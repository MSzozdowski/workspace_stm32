
T8_L16_SDLIBJPEG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025630  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002368  080257d0  080257d0  000357d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027b38  08027b38  00040070  2**0
                  CONTENTS
  4 .ARM          00000008  08027b38  08027b38  00037b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027b40  08027b40  00040070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027b40  08027b40  00037b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08027b44  08027b44  00037b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08027b48  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010f4  20000070  08027bb8  00040070  2**3
                  ALLOC
 10 ._user_heap_stack 00000c04  20001164  08027bb8  00041164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00057131  00000000  00000000  000400a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000084c4  00000000  00000000  000971d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad0  00000000  00000000  0009f698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017f0  00000000  00000000  000a1168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000c3f3  00000000  00000000  000a2958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003ae68  00000000  00000000  000aed4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096bcf  00000000  00000000  000e9bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00180782  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f44  00000000  00000000  001807d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080257b8 	.word	0x080257b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080257b8 	.word	0x080257b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96e 	b.w	8000db0 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468c      	mov	ip, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 8083 	bne.w	8000c02 <__udivmoddi4+0x116>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4617      	mov	r7, r2
 8000b00:	d947      	bls.n	8000b92 <__udivmoddi4+0xa6>
 8000b02:	fab2 f282 	clz	r2, r2
 8000b06:	b142      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	f1c2 0020 	rsb	r0, r2, #32
 8000b0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b10:	4091      	lsls	r1, r2
 8000b12:	4097      	lsls	r7, r2
 8000b14:	ea40 0c01 	orr.w	ip, r0, r1
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbbc f6f8 	udiv	r6, ip, r8
 8000b24:	fa1f fe87 	uxth.w	lr, r7
 8000b28:	fb08 c116 	mls	r1, r8, r6, ip
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb06 f10e 	mul.w	r1, r6, lr
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b3e:	f080 8119 	bcs.w	8000d74 <__udivmoddi4+0x288>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8116 	bls.w	8000d74 <__udivmoddi4+0x288>
 8000b48:	3e02      	subs	r6, #2
 8000b4a:	443b      	add	r3, r7
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3310 	mls	r3, r8, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6a:	f080 8105 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f240 8102 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b74:	3802      	subs	r0, #2
 8000b76:	443c      	add	r4, r7
 8000b78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7c:	eba4 040e 	sub.w	r4, r4, lr
 8000b80:	2600      	movs	r6, #0
 8000b82:	b11d      	cbz	r5, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c5 4300 	strd	r4, r3, [r5]
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	b902      	cbnz	r2, 8000b96 <__udivmoddi4+0xaa>
 8000b94:	deff      	udf	#255	; 0xff
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d150      	bne.n	8000c40 <__udivmoddi4+0x154>
 8000b9e:	1bcb      	subs	r3, r1, r7
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	2601      	movs	r6, #1
 8000baa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bae:	0c21      	lsrs	r1, r4, #16
 8000bb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000bc0:	1879      	adds	r1, r7, r1
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0xe2>
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	f200 80e9 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1ac9      	subs	r1, r1, r3
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x10c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x10a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80d9 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e7bf      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x12e>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	f000 80b1 	beq.w	8000d6e <__udivmoddi4+0x282>
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c12:	4630      	mov	r0, r6
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f683 	clz	r6, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d14a      	bne.n	8000cb8 <__udivmoddi4+0x1cc>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0x140>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80b8 	bhi.w	8000d9c <__udivmoddi4+0x2b0>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	468c      	mov	ip, r1
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0a8      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000c3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c3e:	e7a5      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f603 	lsr.w	r6, r0, r3
 8000c48:	4097      	lsls	r7, r2
 8000c4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c52:	40d9      	lsrs	r1, r3
 8000c54:	4330      	orrs	r0, r6
 8000c56:	0c03      	lsrs	r3, r0, #16
 8000c58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c5c:	fa1f f887 	uxth.w	r8, r7
 8000c60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb06 f108 	mul.w	r1, r6, r8
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x19c>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c7a:	f080 808d 	bcs.w	8000d98 <__udivmoddi4+0x2ac>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 808a 	bls.w	8000d98 <__udivmoddi4+0x2ac>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b281      	uxth	r1, r0
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c98:	fb00 f308 	mul.w	r3, r0, r8
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x1c4>
 8000ca0:	1879      	adds	r1, r7, r1
 8000ca2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca6:	d273      	bcs.n	8000d90 <__udivmoddi4+0x2a4>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d971      	bls.n	8000d90 <__udivmoddi4+0x2a4>
 8000cac:	3802      	subs	r0, #2
 8000cae:	4439      	add	r1, r7
 8000cb0:	1acb      	subs	r3, r1, r3
 8000cb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cb6:	e778      	b.n	8000baa <__udivmoddi4+0xbe>
 8000cb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000cc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cc4:	431c      	orrs	r4, r3
 8000cc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cca:	fa01 f306 	lsl.w	r3, r1, r6
 8000cce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	0c3b      	lsrs	r3, r7, #16
 8000cda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cde:	fa1f f884 	uxth.w	r8, r4
 8000ce2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ce6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cea:	fb09 fa08 	mul.w	sl, r9, r8
 8000cee:	458a      	cmp	sl, r1
 8000cf0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x220>
 8000cfa:	1861      	adds	r1, r4, r1
 8000cfc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d00:	d248      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d02:	458a      	cmp	sl, r1
 8000d04:	d946      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4421      	add	r1, r4
 8000d0c:	eba1 010a 	sub.w	r1, r1, sl
 8000d10:	b2bf      	uxth	r7, r7
 8000d12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d1e:	fb00 f808 	mul.w	r8, r0, r8
 8000d22:	45b8      	cmp	r8, r7
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x24a>
 8000d26:	19e7      	adds	r7, r4, r7
 8000d28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2c:	d22e      	bcs.n	8000d8c <__udivmoddi4+0x2a0>
 8000d2e:	45b8      	cmp	r8, r7
 8000d30:	d92c      	bls.n	8000d8c <__udivmoddi4+0x2a0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4427      	add	r7, r4
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	eba7 0708 	sub.w	r7, r7, r8
 8000d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d42:	454f      	cmp	r7, r9
 8000d44:	46c6      	mov	lr, r8
 8000d46:	4649      	mov	r1, r9
 8000d48:	d31a      	bcc.n	8000d80 <__udivmoddi4+0x294>
 8000d4a:	d017      	beq.n	8000d7c <__udivmoddi4+0x290>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x27a>
 8000d4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d52:	eb67 0701 	sbc.w	r7, r7, r1
 8000d56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d5a:	40f2      	lsrs	r2, r6
 8000d5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d60:	40f7      	lsrs	r7, r6
 8000d62:	e9c5 2700 	strd	r2, r7, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e70b      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6fd      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d7c:	4543      	cmp	r3, r8
 8000d7e:	d2e5      	bcs.n	8000d4c <__udivmoddi4+0x260>
 8000d80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d84:	eb69 0104 	sbc.w	r1, r9, r4
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7df      	b.n	8000d4c <__udivmoddi4+0x260>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e7d2      	b.n	8000d36 <__udivmoddi4+0x24a>
 8000d90:	4660      	mov	r0, ip
 8000d92:	e78d      	b.n	8000cb0 <__udivmoddi4+0x1c4>
 8000d94:	4681      	mov	r9, r0
 8000d96:	e7b9      	b.n	8000d0c <__udivmoddi4+0x220>
 8000d98:	4666      	mov	r6, ip
 8000d9a:	e775      	b.n	8000c88 <__udivmoddi4+0x19c>
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	e74a      	b.n	8000c36 <__udivmoddi4+0x14a>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	4439      	add	r1, r7
 8000da6:	e713      	b.n	8000bd0 <__udivmoddi4+0xe4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	443c      	add	r4, r7
 8000dac:	e724      	b.n	8000bf8 <__udivmoddi4+0x10c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <ILI9341_Delay>:
#endif
//
//  Basic function - write those for your MCU
//
static void ILI9341_Delay(uint32_t ms)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f001 f8bf 	bl	8001f40 <HAL_Delay>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8000dd6:	e014      	b.n	8000e02 <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <ILI9341_SendToTFT+0x5c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d10c      	bne.n	8000e02 <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <ILI9341_SendToTFT+0x5c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	330c      	adds	r3, #12
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	7812      	ldrb	r2, [r2, #0]
 8000df4:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1e7      	bne.n	8000dd8 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8000e08:	bf00      	nop
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <ILI9341_SendToTFT+0x5c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e16:	2b80      	cmp	r3, #128	; 0x80
 8000e18:	d0f7      	beq.n	8000e0a <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8000e1a:	bf00      	nop
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	20000160 	.word	0x20000160

08000e2c <ILI9341_SendCommand>:

static void ILI9341_SendCommand(uint8_t Command)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
	// CS Low
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8000e36:	2200      	movs	r2, #0
 8000e38:	2140      	movs	r1, #64	; 0x40
 8000e3a:	480b      	ldr	r0, [pc, #44]	; (8000e68 <ILI9341_SendCommand+0x3c>)
 8000e3c:	f001 fed8 	bl	8002bf0 <HAL_GPIO_WritePin>
#endif
	// DC to Command - DC to Low
	ILI9341_DC_LOW;
 8000e40:	2200      	movs	r2, #0
 8000e42:	2180      	movs	r1, #128	; 0x80
 8000e44:	4809      	ldr	r0, [pc, #36]	; (8000e6c <ILI9341_SendCommand+0x40>)
 8000e46:	f001 fed3 	bl	8002bf0 <HAL_GPIO_WritePin>

	// Send to TFT 1 byte
	ILI9341_SendToTFT(&Command, 1);
 8000e4a:	1dfb      	adds	r3, r7, #7
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ffbc 	bl	8000dcc <ILI9341_SendToTFT>

	// CS High
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8000e54:	2201      	movs	r2, #1
 8000e56:	2140      	movs	r1, #64	; 0x40
 8000e58:	4803      	ldr	r0, [pc, #12]	; (8000e68 <ILI9341_SendCommand+0x3c>)
 8000e5a:	f001 fec9 	bl	8002bf0 <HAL_GPIO_WritePin>
#endif
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40020400 	.word	0x40020400
 8000e6c:	40020800 	.word	0x40020800

08000e70 <ILI9341_SendCommandAndData>:

static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
 8000e7c:	73fb      	strb	r3, [r7, #15]
	// CS Low
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2140      	movs	r1, #64	; 0x40
 8000e82:	4810      	ldr	r0, [pc, #64]	; (8000ec4 <ILI9341_SendCommandAndData+0x54>)
 8000e84:	f001 feb4 	bl	8002bf0 <HAL_GPIO_WritePin>
#endif
	// DC to Command - DC to Low
	ILI9341_DC_LOW;
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2180      	movs	r1, #128	; 0x80
 8000e8c:	480e      	ldr	r0, [pc, #56]	; (8000ec8 <ILI9341_SendCommandAndData+0x58>)
 8000e8e:	f001 feaf 	bl	8002bf0 <HAL_GPIO_WritePin>
	// Send to TFT 1 byte
	ILI9341_SendToTFT(&Command, 1);
 8000e92:	f107 030f 	add.w	r3, r7, #15
 8000e96:	2101      	movs	r1, #1
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff97 	bl	8000dcc <ILI9341_SendToTFT>

	// DC to Data - DC to High
	ILI9341_DC_HIGH;
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2180      	movs	r1, #128	; 0x80
 8000ea2:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <ILI9341_SendCommandAndData+0x58>)
 8000ea4:	f001 fea4 	bl	8002bf0 <HAL_GPIO_WritePin>
	// Send to TFT Length byte
	ILI9341_SendToTFT(Data, Length);
 8000ea8:	6879      	ldr	r1, [r7, #4]
 8000eaa:	68b8      	ldr	r0, [r7, #8]
 8000eac:	f7ff ff8e 	bl	8000dcc <ILI9341_SendToTFT>

	// CS High
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2140      	movs	r1, #64	; 0x40
 8000eb4:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <ILI9341_SendCommandAndData+0x54>)
 8000eb6:	f001 fe9b 	bl	8002bf0 <HAL_GPIO_WritePin>
#endif
}
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40020400 	.word	0x40020400
 8000ec8:	40020800 	.word	0x40020800

08000ecc <ILI9341_SetRotation>:

//
// TFT Functions
//
void ILI9341_SetRotation(uint8_t Rotation)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b03      	cmp	r3, #3
 8000eda:	d820      	bhi.n	8000f1e <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d816      	bhi.n	8000f10 <ILI9341_SetRotation+0x44>
 8000ee2:	a201      	add	r2, pc, #4	; (adr r2, 8000ee8 <ILI9341_SetRotation+0x1c>)
 8000ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee8:	08000ef9 	.word	0x08000ef9
 8000eec:	08000eff 	.word	0x08000eff
 8000ef0:	08000f05 	.word	0x08000f05
 8000ef4:	08000f0b 	.word	0x08000f0b
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8000ef8:	2348      	movs	r3, #72	; 0x48
 8000efa:	71fb      	strb	r3, [r7, #7]
		break;
 8000efc:	e008      	b.n	8000f10 <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8000efe:	2328      	movs	r3, #40	; 0x28
 8000f00:	71fb      	strb	r3, [r7, #7]
		break;
 8000f02:	e005      	b.n	8000f10 <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8000f04:	2388      	movs	r3, #136	; 0x88
 8000f06:	71fb      	strb	r3, [r7, #7]
		break;
 8000f08:	e002      	b.n	8000f10 <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8000f0a:	23e8      	movs	r3, #232	; 0xe8
 8000f0c:	71fb      	strb	r3, [r7, #7]
		break;
 8000f0e:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8000f10:	1dfb      	adds	r3, r7, #7
 8000f12:	2201      	movs	r2, #1
 8000f14:	4619      	mov	r1, r3
 8000f16:	2036      	movs	r0, #54	; 0x36
 8000f18:	f7ff ffaa 	bl	8000e70 <ILI9341_SendCommandAndData>
 8000f1c:	e000      	b.n	8000f20 <ILI9341_SetRotation+0x54>
		return;
 8000f1e:	bf00      	nop
}
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop

08000f28 <ILI9341_SetAddrWindow>:

void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4604      	mov	r4, r0
 8000f30:	4608      	mov	r0, r1
 8000f32:	4611      	mov	r1, r2
 8000f34:	461a      	mov	r2, r3
 8000f36:	4623      	mov	r3, r4
 8000f38:	80fb      	strh	r3, [r7, #6]
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80bb      	strh	r3, [r7, #4]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	807b      	strh	r3, [r7, #2]
 8000f42:	4613      	mov	r3, r2
 8000f44:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8000f46:	88fa      	ldrh	r2, [r7, #6]
 8000f48:	887b      	ldrh	r3, [r7, #2]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	81fb      	strh	r3, [r7, #14]
 8000f52:	88ba      	ldrh	r2, [r7, #4]
 8000f54:	883b      	ldrh	r3, [r7, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 8000f6e:	89fb      	ldrh	r3, [r7, #14]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8000f78:	89fb      	ldrh	r3, [r7, #14]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4);
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	2204      	movs	r2, #4
 8000f84:	4619      	mov	r1, r3
 8000f86:	202a      	movs	r0, #42	; 0x2a
 8000f88:	f7ff ff72 	bl	8000e70 <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 8000f8c:	88bb      	ldrh	r3, [r7, #4]
 8000f8e:	0a1b      	lsrs	r3, r3, #8
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8000f96:	88bb      	ldrh	r3, [r7, #4]
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 8000f9c:	89bb      	ldrh	r3, [r7, #12]
 8000f9e:	0a1b      	lsrs	r3, r3, #8
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8000fa6:	89bb      	ldrh	r3, [r7, #12]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4);
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	2204      	movs	r2, #4
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	202b      	movs	r0, #43	; 0x2b
 8000fb6:	f7ff ff5b 	bl	8000e70 <ILI9341_SendCommandAndData>
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd90      	pop	{r4, r7, pc}
	...

08000fc4 <ILI9341_ClearDisplay>:
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
	}
}

void ILI9341_ClearDisplay(uint16_t Color)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8000fce:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000fd2:	22f0      	movs	r2, #240	; 0xf0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff ffa6 	bl	8000f28 <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendCommand(ILI9341_RAMWR);
 8000fdc:	202c      	movs	r0, #44	; 0x2c
 8000fde:	f7ff ff25 	bl	8000e2c <ILI9341_SendCommand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8000fe2:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000fe6:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2140      	movs	r1, #64	; 0x40
 8000fec:	4820      	ldr	r0, [pc, #128]	; (8001070 <ILI9341_ClearDisplay+0xac>)
 8000fee:	f001 fdff 	bl	8002bf0 <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2180      	movs	r1, #128	; 0x80
 8000ff6:	481f      	ldr	r0, [pc, #124]	; (8001074 <ILI9341_ClearDisplay+0xb0>)
 8000ff8:	f001 fdfa 	bl	8002bf0 <HAL_GPIO_WritePin>

    while (Length > 0U)
 8000ffc:	e023      	b.n	8001046 <ILI9341_ClearDisplay+0x82>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8000ffe:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <ILI9341_ClearDisplay+0xb4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	2b02      	cmp	r3, #2
 800100c:	d11b      	bne.n	8001046 <ILI9341_ClearDisplay+0x82>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b18      	ldr	r3, [pc, #96]	; (8001078 <ILI9341_ClearDisplay+0xb4>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	330c      	adds	r3, #12
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 8001020:	bf00      	nop
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <ILI9341_ClearDisplay+0xb4>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b02      	cmp	r3, #2
 8001030:	d1f7      	bne.n	8001022 <ILI9341_ClearDisplay+0x5e>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <ILI9341_ClearDisplay+0xb4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	330c      	adds	r3, #12
 800103a:	88fa      	ldrh	r2, [r7, #6]
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3b01      	subs	r3, #1
 8001044:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1d8      	bne.n	8000ffe <ILI9341_ClearDisplay+0x3a>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 800104c:	bf00      	nop
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <ILI9341_ClearDisplay+0xb4>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800105a:	2b80      	cmp	r3, #128	; 0x80
 800105c:	d0f7      	beq.n	800104e <ILI9341_ClearDisplay+0x8a>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 800105e:	2201      	movs	r2, #1
 8001060:	2140      	movs	r1, #64	; 0x40
 8001062:	4803      	ldr	r0, [pc, #12]	; (8001070 <ILI9341_ClearDisplay+0xac>)
 8001064:	f001 fdc4 	bl	8002bf0 <HAL_GPIO_WritePin>
	{
		// Send Color bytes
		ILI9341_SendData16(Color);
	}
#endif
}
 8001068:	bf00      	nop
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40020400 	.word	0x40020400
 8001074:	40020800 	.word	0x40020800
 8001078:	20000160 	.word	0x20000160

0800107c <ILI9341_Init>:
  ILI9341_DISPON  , 0x80,                // Display on
  0x00                                   // End of list
};

void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8001084:	4a25      	ldr	r2, [pc, #148]	; (800111c <ILI9341_Init+0xa0>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6013      	str	r3, [r2, #0]

    uint8_t cmd, x, numArgs;
    const uint8_t *addr = initcmd;
 800108a:	4b25      	ldr	r3, [pc, #148]	; (8001120 <ILI9341_Init+0xa4>)
 800108c:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
    __HAL_SPI_ENABLE(Tft_hspi);
 800108e:	4b23      	ldr	r3, [pc, #140]	; (800111c <ILI9341_Init+0xa0>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	4b21      	ldr	r3, [pc, #132]	; (800111c <ILI9341_Init+0xa0>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010a0:	601a      	str	r2, [r3, #0]
#endif

#if (ILI9341_USE_HW_RESET == 1)
	ILI9341_RST_LOW;
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a8:	481e      	ldr	r0, [pc, #120]	; (8001124 <ILI9341_Init+0xa8>)
 80010aa:	f001 fda1 	bl	8002bf0 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 80010ae:	200a      	movs	r0, #10
 80010b0:	f7ff fe80 	bl	8000db4 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 80010b4:	2201      	movs	r2, #1
 80010b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ba:	481a      	ldr	r0, [pc, #104]	; (8001124 <ILI9341_Init+0xa8>)
 80010bc:	f001 fd98 	bl	8002bf0 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 80010c0:	200a      	movs	r0, #10
 80010c2:	f7ff fe77 	bl	8000db4 <ILI9341_Delay>
#else
	ILI9341_SendCommand(ILI9341_SWRESET); // Engage software reset
    ILI9341_Delay(150);
#endif

    while ((cmd = *(addr++)) > 0)
 80010c6:	e019      	b.n	80010fc <ILI9341_Init+0x80>
    {
      x = *(addr++);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	60fa      	str	r2, [r7, #12]
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	72bb      	strb	r3, [r7, #10]
      numArgs = x & 0x7F;
 80010d2:	7abb      	ldrb	r3, [r7, #10]
 80010d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010d8:	727b      	strb	r3, [r7, #9]
      // Push Init data
      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs);
 80010da:	7a7a      	ldrb	r2, [r7, #9]
 80010dc:	7afb      	ldrb	r3, [r7, #11]
 80010de:	68f9      	ldr	r1, [r7, #12]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fec5 	bl	8000e70 <ILI9341_SendCommandAndData>

      addr += numArgs;
 80010e6:	7a7b      	ldrb	r3, [r7, #9]
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	4413      	add	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]

      if (x & 0x80)
 80010ee:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	da02      	bge.n	80010fc <ILI9341_Init+0x80>
      {
    	  ILI9341_Delay(150);
 80010f6:	2096      	movs	r0, #150	; 0x96
 80010f8:	f7ff fe5c 	bl	8000db4 <ILI9341_Delay>
    while ((cmd = *(addr++)) > 0)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	60fa      	str	r2, [r7, #12]
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	72fb      	strb	r3, [r7, #11]
 8001106:	7afb      	ldrb	r3, [r7, #11]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1dd      	bne.n	80010c8 <ILI9341_Init+0x4c>
      }
    }

    // Set selected Rotation
    ILI9341_SetRotation(ILI9341_ROTATION);
 800110c:	2002      	movs	r0, #2
 800110e:	f7ff fedd 	bl	8000ecc <ILI9341_SetRotation>
}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000160 	.word	0x20000160
 8001120:	08026be0 	.word	0x08026be0
 8001124:	40020000 	.word	0x40020000

08001128 <ConvertRGB888toRGB565>:
#endif //ILI9341_USE_SD_CARD

#if(ILI9341_USE_JPEG == 1)

void ConvertRGB888toRGB565(uint8_t *OutputColor, uint32_t sourceColor)
{
 8001128:	b480      	push	{r7}
 800112a:	b087      	sub	sp, #28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
	uint32_t red = (sourceColor & 0x00FF0000) >> 16;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	0c1b      	lsrs	r3, r3, #16
 8001136:	b2db      	uxtb	r3, r3
 8001138:	617b      	str	r3, [r7, #20]
	uint32_t green = (sourceColor & 0x0000FF00) >> 8;
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	b2db      	uxtb	r3, r3
 8001140:	613b      	str	r3, [r7, #16]
	uint32_t blue =  sourceColor & 0x000000FF;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	60fb      	str	r3, [r7, #12]
	uint16_t Color16b = ((red >> 3) << 11) + ((green >> 2) << 5) + (blue >> 3);
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	08db      	lsrs	r3, r3, #3
 800114c:	b29b      	uxth	r3, r3
 800114e:	02db      	lsls	r3, r3, #11
 8001150:	b29a      	uxth	r2, r3
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	b29b      	uxth	r3, r3
 8001158:	015b      	lsls	r3, r3, #5
 800115a:	b29b      	uxth	r3, r3
 800115c:	4413      	add	r3, r2
 800115e:	b29a      	uxth	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	08db      	lsrs	r3, r3, #3
 8001164:	b29b      	uxth	r3, r3
 8001166:	4413      	add	r3, r2
 8001168:	817b      	strh	r3, [r7, #10]
	OutputColor[1] = Color16b & 0xFF;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3301      	adds	r3, #1
 800116e:	897a      	ldrh	r2, [r7, #10]
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	701a      	strb	r2, [r3, #0]
	OutputColor[0] = Color16b >> 8;
 8001174:	897b      	ldrh	r3, [r7, #10]
 8001176:	0a1b      	lsrs	r3, r3, #8
 8001178:	b29b      	uxth	r3, r3
 800117a:	b2da      	uxtb	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	701a      	strb	r2, [r3, #0]
}
 8001180:	bf00      	nop
 8001182:	371c      	adds	r7, #28
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <ILI9341_DrawJPEG>:


uint8_t ILI9341_DrawJPEG(uint16_t x, uint16_t y, const TCHAR* path)
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8001192:	af00      	add	r7, sp, #0
 8001194:	463b      	mov	r3, r7
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	1dbb      	adds	r3, r7, #6
 800119a:	4602      	mov	r2, r0
 800119c:	801a      	strh	r2, [r3, #0]
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	460a      	mov	r2, r1
 80011a2:	801a      	strh	r2, [r3, #0]
	FIL ImageFile;

	if(f_open(&ImageFile, path, FA_READ) == FR_OK)
 80011a4:	463b      	mov	r3, r7
 80011a6:	f107 0010 	add.w	r0, r7, #16
 80011aa:	2201      	movs	r2, #1
 80011ac:	6819      	ldr	r1, [r3, #0]
 80011ae:	f006 ff33 	bl	8008018 <f_open>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f040 80c8 	bne.w	800134a <ILI9341_DrawJPEG+0x1be>
	{
		/* Decode JPEG Image */
		JSAMPROW buffer[2] = {0}; /* Output row buffer */
 80011ba:	f107 0308 	add.w	r3, r7, #8
 80011be:	461a      	mov	r2, r3
 80011c0:	2300      	movs	r3, #0
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	6053      	str	r3, [r2, #4]
		//uint32_t row_stride = 0; /* Physical row width in image buffer */

		buffer[0] = (JSAMPROW)&_aucLine;
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	4a63      	ldr	r2, [pc, #396]	; (8001358 <ILI9341_DrawJPEG+0x1cc>)
 80011cc:	601a      	str	r2, [r3, #0]

		/* Step 1: Allocate and initialize JPEG decompression object */
		cinfo.err = jpeg_std_error(&jerr);
 80011ce:	4863      	ldr	r0, [pc, #396]	; (800135c <ILI9341_DrawJPEG+0x1d0>)
 80011d0:	f013 fb80 	bl	80148d4 <jpeg_std_error>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a62      	ldr	r2, [pc, #392]	; (8001360 <ILI9341_DrawJPEG+0x1d4>)
 80011d8:	6013      	str	r3, [r2, #0]

		/* Step 2: Initialize the JPEG decompression object */
		jpeg_create_decompress(&cinfo);
 80011da:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80011de:	2150      	movs	r1, #80	; 0x50
 80011e0:	485f      	ldr	r0, [pc, #380]	; (8001360 <ILI9341_DrawJPEG+0x1d4>)
 80011e2:	f008 f8af 	bl	8009344 <jpeg_CreateDecompress>

		jpeg_stdio_src (&cinfo, &ImageFile);
 80011e6:	f107 0310 	add.w	r3, r7, #16
 80011ea:	4619      	mov	r1, r3
 80011ec:	485c      	ldr	r0, [pc, #368]	; (8001360 <ILI9341_DrawJPEG+0x1d4>)
 80011ee:	f009 fe0d 	bl	800ae0c <jpeg_stdio_src>

		/* Step 3: read image parameters with jpeg_read_header() */
		jpeg_read_header(&cinfo, TRUE);
 80011f2:	2101      	movs	r1, #1
 80011f4:	485a      	ldr	r0, [pc, #360]	; (8001360 <ILI9341_DrawJPEG+0x1d4>)
 80011f6:	f008 fa5b 	bl	80096b0 <jpeg_read_header>

		/* Step 4: set parameters for decompression */
		cinfo.dct_method = JDCT_FLOAT;
 80011fa:	4b59      	ldr	r3, [pc, #356]	; (8001360 <ILI9341_DrawJPEG+0x1d4>)
 80011fc:	2202      	movs	r2, #2
 80011fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

		/* Step 5: start decompressor */
		jpeg_start_decompress(&cinfo);
 8001202:	4857      	ldr	r0, [pc, #348]	; (8001360 <ILI9341_DrawJPEG+0x1d4>)
 8001204:	f008 fb61 	bl	80098ca <jpeg_start_decompress>

		//row_stride = cinfo.output_width * cinfo.output_components;

		ILI9341_SetAddrWindow(x, y, x+cinfo.output_width, y+cinfo.output_height);
 8001208:	4b55      	ldr	r3, [pc, #340]	; (8001360 <ILI9341_DrawJPEG+0x1d4>)
 800120a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800120c:	b29a      	uxth	r2, r3
 800120e:	1dbb      	adds	r3, r7, #6
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	b29c      	uxth	r4, r3
 8001216:	4b52      	ldr	r3, [pc, #328]	; (8001360 <ILI9341_DrawJPEG+0x1d4>)
 8001218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800121a:	b29a      	uxth	r2, r3
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	4413      	add	r3, r2
 8001222:	b29a      	uxth	r2, r3
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	8819      	ldrh	r1, [r3, #0]
 8001228:	1dbb      	adds	r3, r7, #6
 800122a:	8818      	ldrh	r0, [r3, #0]
 800122c:	4613      	mov	r3, r2
 800122e:	4622      	mov	r2, r4
 8001230:	f7ff fe7a 	bl	8000f28 <ILI9341_SetAddrWindow>
		ILI9341_SendCommand(ILI9341_RAMWR);
 8001234:	202c      	movs	r0, #44	; 0x2c
 8001236:	f7ff fdf9 	bl	8000e2c <ILI9341_SendCommand>

		uint16_t RowNumber = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	f8a7 3246 	strh.w	r3, [r7, #582]	; 0x246
		while (cinfo.output_scanline < cinfo.output_height)
 8001240:	e06d      	b.n	800131e <ILI9341_DrawJPEG+0x192>
		{
			(void) jpeg_read_scanlines(&cinfo, buffer, 1);
 8001242:	f107 0308 	add.w	r3, r7, #8
 8001246:	2201      	movs	r2, #1
 8001248:	4619      	mov	r1, r3
 800124a:	4845      	ldr	r0, [pc, #276]	; (8001360 <ILI9341_DrawJPEG+0x1d4>)
 800124c:	f008 fc25 	bl	8009a9a <jpeg_read_scanlines>

			RGB_matrix = (RGB_typedef*)buffer[0];
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a43      	ldr	r2, [pc, #268]	; (8001364 <ILI9341_DrawJPEG+0x1d8>)
 8001258:	6013      	str	r3, [r2, #0]

			uint32_t counter = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240

			for(counter = 0; counter < cinfo.output_width; counter++)
 8001260:	2300      	movs	r3, #0
 8001262:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8001266:	e030      	b.n	80012ca <ILI9341_DrawJPEG+0x13e>
			{
				ConvertRGB888toRGB565((uint8_t*)buffer[0]+(counter*2),
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	18d4      	adds	r4, r2, r3
				(
					RGB_matrix[counter].R << 16 |
 8001276:	4b3b      	ldr	r3, [pc, #236]	; (8001364 <ILI9341_DrawJPEG+0x1d8>)
 8001278:	6819      	ldr	r1, [r3, #0]
 800127a:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800127e:	4613      	mov	r3, r2
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	4413      	add	r3, r2
 8001284:	440b      	add	r3, r1
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	0419      	lsls	r1, r3, #16
					RGB_matrix[counter].G << 8|
 800128a:	4b36      	ldr	r3, [pc, #216]	; (8001364 <ILI9341_DrawJPEG+0x1d8>)
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8001292:	4613      	mov	r3, r2
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	4413      	add	r3, r2
 8001298:	4403      	add	r3, r0
 800129a:	785b      	ldrb	r3, [r3, #1]
 800129c:	021b      	lsls	r3, r3, #8
					RGB_matrix[counter].R << 16 |
 800129e:	4319      	orrs	r1, r3
					RGB_matrix[counter].B | 0xFF000000)
 80012a0:	4b30      	ldr	r3, [pc, #192]	; (8001364 <ILI9341_DrawJPEG+0x1d8>)
 80012a2:	6818      	ldr	r0, [r3, #0]
 80012a4:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 80012a8:	4613      	mov	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	4413      	add	r3, r2
 80012ae:	4403      	add	r3, r0
 80012b0:	789b      	ldrb	r3, [r3, #2]
					RGB_matrix[counter].G << 8|
 80012b2:	430b      	orrs	r3, r1
					RGB_matrix[counter].B | 0xFF000000)
 80012b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
				ConvertRGB888toRGB565((uint8_t*)buffer[0]+(counter*2),
 80012b8:	4619      	mov	r1, r3
 80012ba:	4620      	mov	r0, r4
 80012bc:	f7ff ff34 	bl	8001128 <ConvertRGB888toRGB565>
			for(counter = 0; counter < cinfo.output_width; counter++)
 80012c0:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80012c4:	3301      	adds	r3, #1
 80012c6:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 80012ca:	4b25      	ldr	r3, [pc, #148]	; (8001360 <ILI9341_DrawJPEG+0x1d4>)
 80012cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ce:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d3c8      	bcc.n	8001268 <ILI9341_DrawJPEG+0xdc>
				);
			}

#if (ILI9341_USE_CS == 1)
			ILI9341_CS_LOW;
 80012d6:	2200      	movs	r2, #0
 80012d8:	2140      	movs	r1, #64	; 0x40
 80012da:	4823      	ldr	r0, [pc, #140]	; (8001368 <ILI9341_DrawJPEG+0x1dc>)
 80012dc:	f001 fc88 	bl	8002bf0 <HAL_GPIO_WritePin>
#endif

			ILI9341_DC_HIGH;
 80012e0:	2201      	movs	r2, #1
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	4821      	ldr	r0, [pc, #132]	; (800136c <ILI9341_DrawJPEG+0x1e0>)
 80012e6:	f001 fc83 	bl	8002bf0 <HAL_GPIO_WritePin>
			ILI9341_SendToTFT((uint8_t*)buffer[0], (cinfo.output_width)*2);
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <ILI9341_DrawJPEG+0x1d4>)
 80012f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	4619      	mov	r1, r3
 80012f8:	4610      	mov	r0, r2
 80012fa:	f7ff fd67 	bl	8000dcc <ILI9341_SendToTFT>

#if (ILI9341_USE_CS == 1)
			ILI9341_CS_HIGH;
 80012fe:	2201      	movs	r2, #1
 8001300:	2140      	movs	r1, #64	; 0x40
 8001302:	4819      	ldr	r0, [pc, #100]	; (8001368 <ILI9341_DrawJPEG+0x1dc>)
 8001304:	f001 fc74 	bl	8002bf0 <HAL_GPIO_WritePin>
#endif
		RowNumber++;
 8001308:	f8b7 3246 	ldrh.w	r3, [r7, #582]	; 0x246
 800130c:	3301      	adds	r3, #1
 800130e:	f8a7 3246 	strh.w	r3, [r7, #582]	; 0x246
		if(RowNumber == cinfo.output_height)
 8001312:	f8b7 2246 	ldrh.w	r2, [r7, #582]	; 0x246
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <ILI9341_DrawJPEG+0x1d4>)
 8001318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800131a:	429a      	cmp	r2, r3
 800131c:	d007      	beq.n	800132e <ILI9341_DrawJPEG+0x1a2>
		while (cinfo.output_scanline < cinfo.output_height)
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <ILI9341_DrawJPEG+0x1d4>)
 8001320:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <ILI9341_DrawJPEG+0x1d4>)
 8001326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001328:	429a      	cmp	r2, r3
 800132a:	d38a      	bcc.n	8001242 <ILI9341_DrawJPEG+0xb6>
 800132c:	e000      	b.n	8001330 <ILI9341_DrawJPEG+0x1a4>
		{
			break;
 800132e:	bf00      	nop
		}
		}
		  /* Step 6: Finish decompression */
		  jpeg_finish_decompress(&cinfo);
 8001330:	480b      	ldr	r0, [pc, #44]	; (8001360 <ILI9341_DrawJPEG+0x1d4>)
 8001332:	f008 fa67 	bl	8009804 <jpeg_finish_decompress>

		  /* Step 7: Release JPEG decompression object */
		  jpeg_destroy_decompress(&cinfo);
 8001336:	480a      	ldr	r0, [pc, #40]	; (8001360 <ILI9341_DrawJPEG+0x1d4>)
 8001338:	f008 f88d 	bl	8009456 <jpeg_destroy_decompress>

		  f_close(&ImageFile);
 800133c:	f107 0310 	add.w	r3, r7, #16
 8001340:	4618      	mov	r0, r3
 8001342:	f007 fb59 	bl	80089f8 <f_close>

		  return 0;
 8001346:	2300      	movs	r3, #0
 8001348:	e000      	b.n	800134c <ILI9341_DrawJPEG+0x1c0>
	}
	return 1;
 800134a:	2301      	movs	r3, #1
}
 800134c:	4618      	mov	r0, r3
 800134e:	f507 7713 	add.w	r7, r7, #588	; 0x24c
 8001352:	46bd      	mov	sp, r7
 8001354:	bd90      	pop	{r4, r7, pc}
 8001356:	bf00      	nop
 8001358:	20000350 	.word	0x20000350
 800135c:	200000d8 	.word	0x200000d8
 8001360:	20000168 	.word	0x20000168
 8001364:	2000015c 	.word	0x2000015c
 8001368:	40020400 	.word	0x40020400
 800136c:	40020800 	.word	0x40020800

08001370 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <MX_DMA_Init+0x4c>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <MX_DMA_Init+0x4c>)
 8001380:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <MX_DMA_Init+0x4c>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2100      	movs	r1, #0
 8001396:	203b      	movs	r0, #59	; 0x3b
 8001398:	f000 fed1 	bl	800213e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800139c:	203b      	movs	r0, #59	; 0x3b
 800139e:	f000 feea 	bl	8002176 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	2045      	movs	r0, #69	; 0x45
 80013a8:	f000 fec9 	bl	800213e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80013ac:	2045      	movs	r0, #69	; 0x45
 80013ae:	f000 fee2 	bl	8002176 <HAL_NVIC_EnableIRQ>

}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800

080013c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	4b48      	ldr	r3, [pc, #288]	; (80014fc <MX_GPIO_Init+0x13c>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a47      	ldr	r2, [pc, #284]	; (80014fc <MX_GPIO_Init+0x13c>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b45      	ldr	r3, [pc, #276]	; (80014fc <MX_GPIO_Init+0x13c>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b41      	ldr	r3, [pc, #260]	; (80014fc <MX_GPIO_Init+0x13c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a40      	ldr	r2, [pc, #256]	; (80014fc <MX_GPIO_Init+0x13c>)
 80013fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b3e      	ldr	r3, [pc, #248]	; (80014fc <MX_GPIO_Init+0x13c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	4b3a      	ldr	r3, [pc, #232]	; (80014fc <MX_GPIO_Init+0x13c>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a39      	ldr	r2, [pc, #228]	; (80014fc <MX_GPIO_Init+0x13c>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b37      	ldr	r3, [pc, #220]	; (80014fc <MX_GPIO_Init+0x13c>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b33      	ldr	r3, [pc, #204]	; (80014fc <MX_GPIO_Init+0x13c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a32      	ldr	r2, [pc, #200]	; (80014fc <MX_GPIO_Init+0x13c>)
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b30      	ldr	r3, [pc, #192]	; (80014fc <MX_GPIO_Init+0x13c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	603b      	str	r3, [r7, #0]
 800144a:	4b2c      	ldr	r3, [pc, #176]	; (80014fc <MX_GPIO_Init+0x13c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a2b      	ldr	r2, [pc, #172]	; (80014fc <MX_GPIO_Init+0x13c>)
 8001450:	f043 0308 	orr.w	r3, r3, #8
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b29      	ldr	r3, [pc, #164]	; (80014fc <MX_GPIO_Init+0x13c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD2_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	2181      	movs	r1, #129	; 0x81
 8001466:	4826      	ldr	r0, [pc, #152]	; (8001500 <MX_GPIO_Init+0x140>)
 8001468:	f001 fbc2 	bl	8002bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001472:	4824      	ldr	r0, [pc, #144]	; (8001504 <MX_GPIO_Init+0x144>)
 8001474:	f001 fbbc 	bl	8002bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 8001478:	2200      	movs	r2, #0
 800147a:	2140      	movs	r1, #64	; 0x40
 800147c:	4822      	ldr	r0, [pc, #136]	; (8001508 <MX_GPIO_Init+0x148>)
 800147e:	f001 fbb7 	bl	8002bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001482:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001488:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800148c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	4819      	ldr	r0, [pc, #100]	; (8001500 <MX_GPIO_Init+0x140>)
 800149a:	f001 fa25 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LD2_Pin|TFT_DC_Pin;
 800149e:	2381      	movs	r3, #129	; 0x81
 80014a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a2:	2301      	movs	r3, #1
 80014a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	4812      	ldr	r0, [pc, #72]	; (8001500 <MX_GPIO_Init+0x140>)
 80014b6:	f001 fa17 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_RST_Pin;
 80014ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c0:	2301      	movs	r3, #1
 80014c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TFT_RST_GPIO_Port, &GPIO_InitStruct);
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4619      	mov	r1, r3
 80014d2:	480c      	ldr	r0, [pc, #48]	; (8001504 <MX_GPIO_Init+0x144>)
 80014d4:	f001 fa08 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_CS_Pin;
 80014d8:	2340      	movs	r3, #64	; 0x40
 80014da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014dc:	2301      	movs	r3, #1
 80014de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TFT_CS_GPIO_Port, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	4806      	ldr	r0, [pc, #24]	; (8001508 <MX_GPIO_Init+0x148>)
 80014f0:	f001 f9fa 	bl	80028e8 <HAL_GPIO_Init>

}
 80014f4:	bf00      	nop
 80014f6:	3728      	adds	r7, #40	; 0x28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020800 	.word	0x40020800
 8001504:	40020000 	.word	0x40020000
 8001508:	40020400 	.word	0x40020400

0800150c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b096      	sub	sp, #88	; 0x58
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001512:	f000 fca3 	bl	8001e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001516:	f000 f92d 	bl	8001774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151a:	f7ff ff51 	bl	80013c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800151e:	f000 fc01 	bl	8001d24 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001522:	f004 fc35 	bl	8005d90 <MX_FATFS_Init>
  MX_DMA_Init();
 8001526:	f7ff ff23 	bl	8001370 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 800152a:	f000 f991 	bl	8001850 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 800152e:	f000 fac3 	bl	8001ab8 <MX_SPI1_Init>
  MX_LIBJPEG_Init();
 8001532:	f004 fe73 	bl	800621c <MX_LIBJPEG_Init>
  /* USER CODE BEGIN 2 */

  ILI9341_Init(&hspi1);
 8001536:	487e      	ldr	r0, [pc, #504]	; (8001730 <main+0x224>)
 8001538:	f7ff fda0 	bl	800107c <ILI9341_Init>
  ILI9341_ClearDisplay(ILI9341_CYAN);
 800153c:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8001540:	f7ff fd40 	bl	8000fc4 <ILI9341_ClearDisplay>

  FatFsResult = f_mount(&SdFatFs, "",1);
 8001544:	2201      	movs	r2, #1
 8001546:	497b      	ldr	r1, [pc, #492]	; (8001734 <main+0x228>)
 8001548:	487b      	ldr	r0, [pc, #492]	; (8001738 <main+0x22c>)
 800154a:	f006 fd1f 	bl	8007f8c <f_mount>
 800154e:	4603      	mov	r3, r0
 8001550:	461a      	mov	r2, r3
 8001552:	4b7a      	ldr	r3, [pc, #488]	; (800173c <main+0x230>)
 8001554:	701a      	strb	r2, [r3, #0]
  if(FatFsResult != FR_OK)
 8001556:	4b79      	ldr	r3, [pc, #484]	; (800173c <main+0x230>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d011      	beq.n	8001582 <main+0x76>
  {
	  bytes = sprintf(data, "FatFS mount error.\n\r");
 800155e:	4978      	ldr	r1, [pc, #480]	; (8001740 <main+0x234>)
 8001560:	4878      	ldr	r0, [pc, #480]	; (8001744 <main+0x238>)
 8001562:	f023 fdc3 	bl	80250ec <siprintf>
 8001566:	4603      	mov	r3, r0
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4b77      	ldr	r3, [pc, #476]	; (8001748 <main+0x23c>)
 800156c:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 800156e:	4b76      	ldr	r3, [pc, #472]	; (8001748 <main+0x23c>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	b29a      	uxth	r2, r3
 8001574:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001578:	4972      	ldr	r1, [pc, #456]	; (8001744 <main+0x238>)
 800157a:	4874      	ldr	r0, [pc, #464]	; (800174c <main+0x240>)
 800157c:	f003 fbcb 	bl	8004d16 <HAL_UART_Transmit>
 8001580:	e0a6      	b.n	80016d0 <main+0x1c4>
  }
  else
  {
	  bytes = sprintf(data, "FatFS mounted.\n\r");
 8001582:	4973      	ldr	r1, [pc, #460]	; (8001750 <main+0x244>)
 8001584:	486f      	ldr	r0, [pc, #444]	; (8001744 <main+0x238>)
 8001586:	f023 fdb1 	bl	80250ec <siprintf>
 800158a:	4603      	mov	r3, r0
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4b6e      	ldr	r3, [pc, #440]	; (8001748 <main+0x23c>)
 8001590:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 8001592:	4b6d      	ldr	r3, [pc, #436]	; (8001748 <main+0x23c>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	b29a      	uxth	r2, r3
 8001598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159c:	4969      	ldr	r1, [pc, #420]	; (8001744 <main+0x238>)
 800159e:	486b      	ldr	r0, [pc, #428]	; (800174c <main+0x240>)
 80015a0:	f003 fbb9 	bl	8004d16 <HAL_UART_Transmit>
	  //
	  // Open file on SD for writing
	  //
	  FatFsResult = f_open(&SdCardFile, "test.txt", FA_WRITE|FA_CREATE_ALWAYS);
 80015a4:	220a      	movs	r2, #10
 80015a6:	496b      	ldr	r1, [pc, #428]	; (8001754 <main+0x248>)
 80015a8:	486b      	ldr	r0, [pc, #428]	; (8001758 <main+0x24c>)
 80015aa:	f006 fd35 	bl	8008018 <f_open>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b62      	ldr	r3, [pc, #392]	; (800173c <main+0x230>)
 80015b4:	701a      	strb	r2, [r3, #0]
	  //
	  // File open error check
	  //
	  if(FatFsResult != FR_OK)
 80015b6:	4b61      	ldr	r3, [pc, #388]	; (800173c <main+0x230>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d011      	beq.n	80015e2 <main+0xd6>
	  {
		  bytes = sprintf(data, "No test.txt file. Can't create.\n\r");
 80015be:	4967      	ldr	r1, [pc, #412]	; (800175c <main+0x250>)
 80015c0:	4860      	ldr	r0, [pc, #384]	; (8001744 <main+0x238>)
 80015c2:	f023 fd93 	bl	80250ec <siprintf>
 80015c6:	4603      	mov	r3, r0
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4b5f      	ldr	r3, [pc, #380]	; (8001748 <main+0x23c>)
 80015cc:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 80015ce:	4b5e      	ldr	r3, [pc, #376]	; (8001748 <main+0x23c>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d8:	495a      	ldr	r1, [pc, #360]	; (8001744 <main+0x238>)
 80015da:	485c      	ldr	r0, [pc, #368]	; (800174c <main+0x240>)
 80015dc:	f003 fb9b 	bl	8004d16 <HAL_UART_Transmit>
 80015e0:	e076      	b.n	80016d0 <main+0x1c4>
	  }
	  else
	  {
		  bytes = sprintf(data, "File opened.\n\r");
 80015e2:	495f      	ldr	r1, [pc, #380]	; (8001760 <main+0x254>)
 80015e4:	4857      	ldr	r0, [pc, #348]	; (8001744 <main+0x238>)
 80015e6:	f023 fd81 	bl	80250ec <siprintf>
 80015ea:	4603      	mov	r3, r0
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4b56      	ldr	r3, [pc, #344]	; (8001748 <main+0x23c>)
 80015f0:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 80015f2:	4b55      	ldr	r3, [pc, #340]	; (8001748 <main+0x23c>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fc:	4951      	ldr	r1, [pc, #324]	; (8001744 <main+0x238>)
 80015fe:	4853      	ldr	r0, [pc, #332]	; (800174c <main+0x240>)
 8001600:	f003 fb89 	bl	8004d16 <HAL_UART_Transmit>
		  //
		  //	Print something to this file
		  //
		  for(uint8_t i = 0; i < 10; i++)
 8001604:	2300      	movs	r3, #0
 8001606:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800160a:	e00b      	b.n	8001624 <main+0x118>
		  {
			  f_printf(&SdCardFile, "Line number %d.\n", i);
 800160c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001610:	461a      	mov	r2, r3
 8001612:	4954      	ldr	r1, [pc, #336]	; (8001764 <main+0x258>)
 8001614:	4850      	ldr	r0, [pc, #320]	; (8001758 <main+0x24c>)
 8001616:	f007 fbad 	bl	8008d74 <f_printf>
		  for(uint8_t i = 0; i < 10; i++)
 800161a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800161e:	3301      	adds	r3, #1
 8001620:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001624:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001628:	2b09      	cmp	r3, #9
 800162a:	d9ef      	bls.n	800160c <main+0x100>
		  }

		  //
		  // Close file
		  //
		  FatFsResult = f_close(&SdCardFile);
 800162c:	484a      	ldr	r0, [pc, #296]	; (8001758 <main+0x24c>)
 800162e:	f007 f9e3 	bl	80089f8 <f_close>
 8001632:	4603      	mov	r3, r0
 8001634:	461a      	mov	r2, r3
 8001636:	4b41      	ldr	r3, [pc, #260]	; (800173c <main+0x230>)
 8001638:	701a      	strb	r2, [r3, #0]

		  bytes = sprintf(data, "File closed.\n\r");
 800163a:	494b      	ldr	r1, [pc, #300]	; (8001768 <main+0x25c>)
 800163c:	4841      	ldr	r0, [pc, #260]	; (8001744 <main+0x238>)
 800163e:	f023 fd55 	bl	80250ec <siprintf>
 8001642:	4603      	mov	r3, r0
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4b40      	ldr	r3, [pc, #256]	; (8001748 <main+0x23c>)
 8001648:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 800164a:	4b3f      	ldr	r3, [pc, #252]	; (8001748 <main+0x23c>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	b29a      	uxth	r2, r3
 8001650:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001654:	493b      	ldr	r1, [pc, #236]	; (8001744 <main+0x238>)
 8001656:	483d      	ldr	r0, [pc, #244]	; (800174c <main+0x240>)
 8001658:	f003 fb5d 	bl	8004d16 <HAL_UART_Transmit>

		  FatFsResult = f_open(&SdCardFile, "test.txt", FA_READ);
 800165c:	2201      	movs	r2, #1
 800165e:	493d      	ldr	r1, [pc, #244]	; (8001754 <main+0x248>)
 8001660:	483d      	ldr	r0, [pc, #244]	; (8001758 <main+0x24c>)
 8001662:	f006 fcd9 	bl	8008018 <f_open>
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	4b34      	ldr	r3, [pc, #208]	; (800173c <main+0x230>)
 800166c:	701a      	strb	r2, [r3, #0]
		  if(FatFsResult != FR_OK)
 800166e:	4b33      	ldr	r3, [pc, #204]	; (800173c <main+0x230>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d011      	beq.n	800169a <main+0x18e>
		  {
			  bytes = sprintf(data, "No test.txt file. Can't open \n\r");
 8001676:	493d      	ldr	r1, [pc, #244]	; (800176c <main+0x260>)
 8001678:	4832      	ldr	r0, [pc, #200]	; (8001744 <main+0x238>)
 800167a:	f023 fd37 	bl	80250ec <siprintf>
 800167e:	4603      	mov	r3, r0
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4b31      	ldr	r3, [pc, #196]	; (8001748 <main+0x23c>)
 8001684:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 8001686:	4b30      	ldr	r3, [pc, #192]	; (8001748 <main+0x23c>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	b29a      	uxth	r2, r3
 800168c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001690:	492c      	ldr	r1, [pc, #176]	; (8001744 <main+0x238>)
 8001692:	482e      	ldr	r0, [pc, #184]	; (800174c <main+0x240>)
 8001694:	f003 fb3f 	bl	8004d16 <HAL_UART_Transmit>
 8001698:	e01a      	b.n	80016d0 <main+0x1c4>
		  else
		  {
			  UINT len;
			  do
			  {
				  len = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	653b      	str	r3, [r7, #80]	; 0x50
				  f_read(&SdCardFile, data, 10, &len);
 800169e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016a2:	220a      	movs	r2, #10
 80016a4:	4927      	ldr	r1, [pc, #156]	; (8001744 <main+0x238>)
 80016a6:	482c      	ldr	r0, [pc, #176]	; (8001758 <main+0x24c>)
 80016a8:	f006 fe74 	bl	8008394 <f_read>
				  HAL_UART_Transmit(&huart2, (uint8_t*)data, len, 1000);
 80016ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b4:	4923      	ldr	r1, [pc, #140]	; (8001744 <main+0x238>)
 80016b6:	4825      	ldr	r0, [pc, #148]	; (800174c <main+0x240>)
 80016b8:	f003 fb2d 	bl	8004d16 <HAL_UART_Transmit>
			  }while(len >0);
 80016bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1eb      	bne.n	800169a <main+0x18e>
			  FatFsResult = f_close(&SdCardFile);
 80016c2:	4825      	ldr	r0, [pc, #148]	; (8001758 <main+0x24c>)
 80016c4:	f007 f998 	bl	80089f8 <f_close>
 80016c8:	4603      	mov	r3, r0
 80016ca:	461a      	mov	r2, r3
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <main+0x230>)
 80016ce:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  DIR dj;         /* Directory object */
	  FILINFO fno;    /* File information */

	  FatFsResult = f_findfirst(&dj, &fno, "", "*.jpg");  /* Start to search for photo files */
 80016d0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80016d4:	1d38      	adds	r0, r7, #4
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <main+0x264>)
 80016d8:	4a16      	ldr	r2, [pc, #88]	; (8001734 <main+0x228>)
 80016da:	f007 fab5 	bl	8008c48 <f_findfirst>
 80016de:	4603      	mov	r3, r0
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b16      	ldr	r3, [pc, #88]	; (800173c <main+0x230>)
 80016e4:	701a      	strb	r2, [r3, #0]

	  while (FatFsResult == FR_OK && fno.fname[0])
 80016e6:	e016      	b.n	8001716 <main+0x20a>
	  {         /* Repeat while an item is found */
		  ILI9341_DrawJPEG(0, 0, fno.fname);
 80016e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016ec:	3309      	adds	r3, #9
 80016ee:	461a      	mov	r2, r3
 80016f0:	2100      	movs	r1, #0
 80016f2:	2000      	movs	r0, #0
 80016f4:	f7ff fd4a 	bl	800118c <ILI9341_DrawJPEG>
		  FatFsResult = f_findnext(&dj, &fno);               /* Search for next item */
 80016f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	4611      	mov	r1, r2
 8001700:	4618      	mov	r0, r3
 8001702:	f007 fa79 	bl	8008bf8 <f_findnext>
 8001706:	4603      	mov	r3, r0
 8001708:	461a      	mov	r2, r3
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <main+0x230>)
 800170c:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(1000);
 800170e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001712:	f000 fc15 	bl	8001f40 <HAL_Delay>
	  while (FatFsResult == FR_OK && fno.fname[0])
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <main+0x230>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d103      	bne.n	8001726 <main+0x21a>
 800171e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1e0      	bne.n	80016e8 <main+0x1dc>
	  }
	  f_closedir(&dj);
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	4618      	mov	r0, r3
 800172a:	f007 fa02 	bl	8008b32 <f_closedir>
  {
 800172e:	e7cf      	b.n	80016d0 <main+0x1c4>
 8001730:	20000c4c 	.word	0x20000c4c
 8001734:	080257d0 	.word	0x080257d0
 8001738:	20000854 	.word	0x20000854
 800173c:	20000b04 	.word	0x20000b04
 8001740:	080257d4 	.word	0x080257d4
 8001744:	20000a84 	.word	0x20000a84
 8001748:	20000850 	.word	0x20000850
 800174c:	20000ca4 	.word	0x20000ca4
 8001750:	080257ec 	.word	0x080257ec
 8001754:	08025800 	.word	0x08025800
 8001758:	20000620 	.word	0x20000620
 800175c:	0802580c 	.word	0x0802580c
 8001760:	08025830 	.word	0x08025830
 8001764:	08025840 	.word	0x08025840
 8001768:	08025854 	.word	0x08025854
 800176c:	08025864 	.word	0x08025864
 8001770:	08025884 	.word	0x08025884

08001774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b094      	sub	sp, #80	; 0x50
 8001778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800177a:	f107 0320 	add.w	r3, r7, #32
 800177e:	2230      	movs	r2, #48	; 0x30
 8001780:	2100      	movs	r1, #0
 8001782:	4618      	mov	r0, r3
 8001784:	f023 fbf0 	bl	8024f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001798:	2300      	movs	r3, #0
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	4b27      	ldr	r3, [pc, #156]	; (800183c <SystemClock_Config+0xc8>)
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	4a26      	ldr	r2, [pc, #152]	; (800183c <SystemClock_Config+0xc8>)
 80017a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a6:	6413      	str	r3, [r2, #64]	; 0x40
 80017a8:	4b24      	ldr	r3, [pc, #144]	; (800183c <SystemClock_Config+0xc8>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017b4:	2300      	movs	r3, #0
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	4b21      	ldr	r3, [pc, #132]	; (8001840 <SystemClock_Config+0xcc>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a20      	ldr	r2, [pc, #128]	; (8001840 <SystemClock_Config+0xcc>)
 80017be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	4b1e      	ldr	r3, [pc, #120]	; (8001840 <SystemClock_Config+0xcc>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017d0:	2302      	movs	r3, #2
 80017d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017d4:	2301      	movs	r3, #1
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017d8:	2310      	movs	r3, #16
 80017da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017dc:	2302      	movs	r3, #2
 80017de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017e0:	2300      	movs	r3, #0
 80017e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017e4:	2308      	movs	r3, #8
 80017e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80017e8:	2348      	movs	r3, #72	; 0x48
 80017ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017ec:	2302      	movs	r3, #2
 80017ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80017f0:	2303      	movs	r3, #3
 80017f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f4:	f107 0320 	add.w	r3, r7, #32
 80017f8:	4618      	mov	r0, r3
 80017fa:	f001 fa13 	bl	8002c24 <HAL_RCC_OscConfig>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001804:	f000 f81e 	bl	8001844 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001808:	230f      	movs	r3, #15
 800180a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800180c:	2302      	movs	r3, #2
 800180e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001818:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800181e:	f107 030c 	add.w	r3, r7, #12
 8001822:	2102      	movs	r1, #2
 8001824:	4618      	mov	r0, r3
 8001826:	f001 fc75 	bl	8003114 <HAL_RCC_ClockConfig>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001830:	f000 f808 	bl	8001844 <Error_Handler>
  }
}
 8001834:	bf00      	nop
 8001836:	3750      	adds	r7, #80	; 0x50
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40023800 	.word	0x40023800
 8001840:	40007000 	.word	0x40007000

08001844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001848:	b672      	cpsid	i
}
 800184a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800184c:	e7fe      	b.n	800184c <Error_Handler+0x8>
	...

08001850 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001854:	4b0d      	ldr	r3, [pc, #52]	; (800188c <MX_SDIO_SD_Init+0x3c>)
 8001856:	4a0e      	ldr	r2, [pc, #56]	; (8001890 <MX_SDIO_SD_Init+0x40>)
 8001858:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <MX_SDIO_SD_Init+0x3c>)
 800185c:	2200      	movs	r2, #0
 800185e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001860:	4b0a      	ldr	r3, [pc, #40]	; (800188c <MX_SDIO_SD_Init+0x3c>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_ENABLE;
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <MX_SDIO_SD_Init+0x3c>)
 8001868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800186c:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <MX_SDIO_SD_Init+0x3c>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <MX_SDIO_SD_Init+0x3c>)
 8001876:	2200      	movs	r2, #0
 8001878:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 20;
 800187a:	4b04      	ldr	r3, [pc, #16]	; (800188c <MX_SDIO_SD_Init+0x3c>)
 800187c:	2214      	movs	r2, #20
 800187e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000bc8 	.word	0x20000bc8
 8001890:	40012c00 	.word	0x40012c00

08001894 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08c      	sub	sp, #48	; 0x30
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 031c 	add.w	r3, r7, #28
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a78      	ldr	r2, [pc, #480]	; (8001a94 <HAL_SD_MspInit+0x200>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	f040 80ea 	bne.w	8001a8c <HAL_SD_MspInit+0x1f8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80018b8:	2300      	movs	r3, #0
 80018ba:	61bb      	str	r3, [r7, #24]
 80018bc:	4b76      	ldr	r3, [pc, #472]	; (8001a98 <HAL_SD_MspInit+0x204>)
 80018be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c0:	4a75      	ldr	r2, [pc, #468]	; (8001a98 <HAL_SD_MspInit+0x204>)
 80018c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018c6:	6453      	str	r3, [r2, #68]	; 0x44
 80018c8:	4b73      	ldr	r3, [pc, #460]	; (8001a98 <HAL_SD_MspInit+0x204>)
 80018ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018d0:	61bb      	str	r3, [r7, #24]
 80018d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	4b6f      	ldr	r3, [pc, #444]	; (8001a98 <HAL_SD_MspInit+0x204>)
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	4a6e      	ldr	r2, [pc, #440]	; (8001a98 <HAL_SD_MspInit+0x204>)
 80018de:	f043 0302 	orr.w	r3, r3, #2
 80018e2:	6313      	str	r3, [r2, #48]	; 0x30
 80018e4:	4b6c      	ldr	r3, [pc, #432]	; (8001a98 <HAL_SD_MspInit+0x204>)
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f0:	2300      	movs	r3, #0
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	4b68      	ldr	r3, [pc, #416]	; (8001a98 <HAL_SD_MspInit+0x204>)
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f8:	4a67      	ldr	r2, [pc, #412]	; (8001a98 <HAL_SD_MspInit+0x204>)
 80018fa:	f043 0304 	orr.w	r3, r3, #4
 80018fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001900:	4b65      	ldr	r3, [pc, #404]	; (8001a98 <HAL_SD_MspInit+0x204>)
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	4b61      	ldr	r3, [pc, #388]	; (8001a98 <HAL_SD_MspInit+0x204>)
 8001912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001914:	4a60      	ldr	r2, [pc, #384]	; (8001a98 <HAL_SD_MspInit+0x204>)
 8001916:	f043 0308 	orr.w	r3, r3, #8
 800191a:	6313      	str	r3, [r2, #48]	; 0x30
 800191c:	4b5e      	ldr	r3, [pc, #376]	; (8001a98 <HAL_SD_MspInit+0x204>)
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001920:	f003 0308 	and.w	r3, r3, #8
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	68fb      	ldr	r3, [r7, #12]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001928:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800192c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800193a:	230c      	movs	r3, #12
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193e:	f107 031c 	add.w	r3, r7, #28
 8001942:	4619      	mov	r1, r3
 8001944:	4855      	ldr	r0, [pc, #340]	; (8001a9c <HAL_SD_MspInit+0x208>)
 8001946:	f000 ffcf 	bl	80028e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800194a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800194e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800195c:	230c      	movs	r3, #12
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	4619      	mov	r1, r3
 8001966:	484e      	ldr	r0, [pc, #312]	; (8001aa0 <HAL_SD_MspInit+0x20c>)
 8001968:	f000 ffbe 	bl	80028e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800196c:	2304      	movs	r3, #4
 800196e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001978:	2303      	movs	r3, #3
 800197a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800197c:	230c      	movs	r3, #12
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001980:	f107 031c 	add.w	r3, r7, #28
 8001984:	4619      	mov	r1, r3
 8001986:	4847      	ldr	r0, [pc, #284]	; (8001aa4 <HAL_SD_MspInit+0x210>)
 8001988:	f000 ffae 	bl	80028e8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800198c:	4b46      	ldr	r3, [pc, #280]	; (8001aa8 <HAL_SD_MspInit+0x214>)
 800198e:	4a47      	ldr	r2, [pc, #284]	; (8001aac <HAL_SD_MspInit+0x218>)
 8001990:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001992:	4b45      	ldr	r3, [pc, #276]	; (8001aa8 <HAL_SD_MspInit+0x214>)
 8001994:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001998:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800199a:	4b43      	ldr	r3, [pc, #268]	; (8001aa8 <HAL_SD_MspInit+0x214>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a0:	4b41      	ldr	r3, [pc, #260]	; (8001aa8 <HAL_SD_MspInit+0x214>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019a6:	4b40      	ldr	r3, [pc, #256]	; (8001aa8 <HAL_SD_MspInit+0x214>)
 80019a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ac:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019ae:	4b3e      	ldr	r3, [pc, #248]	; (8001aa8 <HAL_SD_MspInit+0x214>)
 80019b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019b4:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019b6:	4b3c      	ldr	r3, [pc, #240]	; (8001aa8 <HAL_SD_MspInit+0x214>)
 80019b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019bc:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80019be:	4b3a      	ldr	r3, [pc, #232]	; (8001aa8 <HAL_SD_MspInit+0x214>)
 80019c0:	2220      	movs	r2, #32
 80019c2:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80019c4:	4b38      	ldr	r3, [pc, #224]	; (8001aa8 <HAL_SD_MspInit+0x214>)
 80019c6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80019ca:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019cc:	4b36      	ldr	r3, [pc, #216]	; (8001aa8 <HAL_SD_MspInit+0x214>)
 80019ce:	2204      	movs	r2, #4
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80019d2:	4b35      	ldr	r3, [pc, #212]	; (8001aa8 <HAL_SD_MspInit+0x214>)
 80019d4:	2203      	movs	r2, #3
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80019d8:	4b33      	ldr	r3, [pc, #204]	; (8001aa8 <HAL_SD_MspInit+0x214>)
 80019da:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80019de:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80019e0:	4b31      	ldr	r3, [pc, #196]	; (8001aa8 <HAL_SD_MspInit+0x214>)
 80019e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019e6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80019e8:	482f      	ldr	r0, [pc, #188]	; (8001aa8 <HAL_SD_MspInit+0x214>)
 80019ea:	f000 fbdf 	bl	80021ac <HAL_DMA_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <HAL_SD_MspInit+0x164>
    {
      Error_Handler();
 80019f4:	f7ff ff26 	bl	8001844 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a2b      	ldr	r2, [pc, #172]	; (8001aa8 <HAL_SD_MspInit+0x214>)
 80019fc:	641a      	str	r2, [r3, #64]	; 0x40
 80019fe:	4a2a      	ldr	r2, [pc, #168]	; (8001aa8 <HAL_SD_MspInit+0x214>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001a04:	4b2a      	ldr	r3, [pc, #168]	; (8001ab0 <HAL_SD_MspInit+0x21c>)
 8001a06:	4a2b      	ldr	r2, [pc, #172]	; (8001ab4 <HAL_SD_MspInit+0x220>)
 8001a08:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001a0a:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <HAL_SD_MspInit+0x21c>)
 8001a0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a10:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a12:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <HAL_SD_MspInit+0x21c>)
 8001a14:	2240      	movs	r2, #64	; 0x40
 8001a16:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a18:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <HAL_SD_MspInit+0x21c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a1e:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <HAL_SD_MspInit+0x21c>)
 8001a20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a24:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a26:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <HAL_SD_MspInit+0x21c>)
 8001a28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a2c:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a2e:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <HAL_SD_MspInit+0x21c>)
 8001a30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a34:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001a36:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <HAL_SD_MspInit+0x21c>)
 8001a38:	2220      	movs	r2, #32
 8001a3a:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a3c:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <HAL_SD_MspInit+0x21c>)
 8001a3e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a42:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a44:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <HAL_SD_MspInit+0x21c>)
 8001a46:	2204      	movs	r2, #4
 8001a48:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_SD_MspInit+0x21c>)
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001a50:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <HAL_SD_MspInit+0x21c>)
 8001a52:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a56:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001a58:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_SD_MspInit+0x21c>)
 8001a5a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a5e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001a60:	4813      	ldr	r0, [pc, #76]	; (8001ab0 <HAL_SD_MspInit+0x21c>)
 8001a62:	f000 fba3 	bl	80021ac <HAL_DMA_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <HAL_SD_MspInit+0x1dc>
    {
      Error_Handler();
 8001a6c:	f7ff feea 	bl	8001844 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a0f      	ldr	r2, [pc, #60]	; (8001ab0 <HAL_SD_MspInit+0x21c>)
 8001a74:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a76:	4a0e      	ldr	r2, [pc, #56]	; (8001ab0 <HAL_SD_MspInit+0x21c>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2031      	movs	r0, #49	; 0x31
 8001a82:	f000 fb5c 	bl	800213e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001a86:	2031      	movs	r0, #49	; 0x31
 8001a88:	f000 fb75 	bl	8002176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	3730      	adds	r7, #48	; 0x30
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40012c00 	.word	0x40012c00
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40020400 	.word	0x40020400
 8001aa0:	40020800 	.word	0x40020800
 8001aa4:	40020c00 	.word	0x40020c00
 8001aa8:	20000b08 	.word	0x20000b08
 8001aac:	40026458 	.word	0x40026458
 8001ab0:	20000b68 	.word	0x20000b68
 8001ab4:	400264a0 	.word	0x400264a0

08001ab8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001abc:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001abe:	4a18      	ldr	r2, [pc, #96]	; (8001b20 <MX_SPI1_Init+0x68>)
 8001ac0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ac2:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001ac4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ac8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001aca:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001adc:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001aec:	2210      	movs	r2, #16
 8001aee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001af0:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001b04:	220a      	movs	r2, #10
 8001b06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b08:	4804      	ldr	r0, [pc, #16]	; (8001b1c <MX_SPI1_Init+0x64>)
 8001b0a:	f003 f82e 	bl	8004b6a <HAL_SPI_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b14:	f7ff fe96 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000c4c 	.word	0x20000c4c
 8001b20:	40013000 	.word	0x40013000

08001b24 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a19      	ldr	r2, [pc, #100]	; (8001ba8 <HAL_SPI_MspInit+0x84>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d12b      	bne.n	8001b9e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	4b18      	ldr	r3, [pc, #96]	; (8001bac <HAL_SPI_MspInit+0x88>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	4a17      	ldr	r2, [pc, #92]	; (8001bac <HAL_SPI_MspInit+0x88>)
 8001b50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b54:	6453      	str	r3, [r2, #68]	; 0x44
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <HAL_SPI_MspInit+0x88>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <HAL_SPI_MspInit+0x88>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a10      	ldr	r2, [pc, #64]	; (8001bac <HAL_SPI_MspInit+0x88>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <HAL_SPI_MspInit+0x88>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b7e:	23e0      	movs	r3, #224	; 0xe0
 8001b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b8e:	2305      	movs	r3, #5
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4619      	mov	r1, r3
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <HAL_SPI_MspInit+0x8c>)
 8001b9a:	f000 fea5 	bl	80028e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	3728      	adds	r7, #40	; 0x28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40013000 	.word	0x40013000
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40020000 	.word	0x40020000

08001bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <HAL_MspInit+0x4c>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	4a0f      	ldr	r2, [pc, #60]	; (8001c00 <HAL_MspInit+0x4c>)
 8001bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bca:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <HAL_MspInit+0x4c>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	603b      	str	r3, [r7, #0]
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <HAL_MspInit+0x4c>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	4a08      	ldr	r2, [pc, #32]	; (8001c00 <HAL_MspInit+0x4c>)
 8001be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be4:	6413      	str	r3, [r2, #64]	; 0x40
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_MspInit+0x4c>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bf2:	2007      	movs	r0, #7
 8001bf4:	f000 fa98 	bl	8002128 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40023800 	.word	0x40023800

08001c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <NMI_Handler+0x4>

08001c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c0e:	e7fe      	b.n	8001c0e <HardFault_Handler+0x4>

08001c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <MemManage_Handler+0x4>

08001c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c1a:	e7fe      	b.n	8001c1a <BusFault_Handler+0x4>

08001c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <UsageFault_Handler+0x4>

08001c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c50:	f000 f956 	bl	8001f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <SDIO_IRQHandler+0x10>)
 8001c5e:	f001 fecb 	bl	80039f8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000bc8 	.word	0x20000bc8

08001c6c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001c70:	4802      	ldr	r0, [pc, #8]	; (8001c7c <DMA2_Stream3_IRQHandler+0x10>)
 8001c72:	f000 fbc3 	bl	80023fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000b08 	.word	0x20000b08

08001c80 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001c84:	4802      	ldr	r0, [pc, #8]	; (8001c90 <DMA2_Stream6_IRQHandler+0x10>)
 8001c86:	f000 fbb9 	bl	80023fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000b68 	.word	0x20000b68

08001c94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c9c:	4a14      	ldr	r2, [pc, #80]	; (8001cf0 <_sbrk+0x5c>)
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <_sbrk+0x60>)
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ca8:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <_sbrk+0x64>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d102      	bne.n	8001cb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <_sbrk+0x64>)
 8001cb2:	4a12      	ldr	r2, [pc, #72]	; (8001cfc <_sbrk+0x68>)
 8001cb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <_sbrk+0x64>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d207      	bcs.n	8001cd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cc4:	f023 f908 	bl	8024ed8 <__errno>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	220c      	movs	r2, #12
 8001ccc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cce:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd2:	e009      	b.n	8001ce8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <_sbrk+0x64>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cda:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <_sbrk+0x64>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	4a05      	ldr	r2, [pc, #20]	; (8001cf8 <_sbrk+0x64>)
 8001ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20020000 	.word	0x20020000
 8001cf4:	00000800 	.word	0x00000800
 8001cf8:	2000008c 	.word	0x2000008c
 8001cfc:	20001168 	.word	0x20001168

08001d00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <SystemInit+0x20>)
 8001d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0a:	4a05      	ldr	r2, [pc, #20]	; (8001d20 <SystemInit+0x20>)
 8001d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d2a:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <MX_USART2_UART_Init+0x50>)
 8001d2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d5a:	4805      	ldr	r0, [pc, #20]	; (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d5c:	f002 ff8e 	bl	8004c7c <HAL_UART_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d66:	f7ff fd6d 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000ca4 	.word	0x20000ca4
 8001d74:	40004400 	.word	0x40004400

08001d78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a19      	ldr	r2, [pc, #100]	; (8001dfc <HAL_UART_MspInit+0x84>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d12b      	bne.n	8001df2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <HAL_UART_MspInit+0x88>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	4a17      	ldr	r2, [pc, #92]	; (8001e00 <HAL_UART_MspInit+0x88>)
 8001da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da8:	6413      	str	r3, [r2, #64]	; 0x40
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <HAL_UART_MspInit+0x88>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <HAL_UART_MspInit+0x88>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a10      	ldr	r2, [pc, #64]	; (8001e00 <HAL_UART_MspInit+0x88>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <HAL_UART_MspInit+0x88>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001dd2:	230c      	movs	r3, #12
 8001dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dde:	2303      	movs	r3, #3
 8001de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001de2:	2307      	movs	r3, #7
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de6:	f107 0314 	add.w	r3, r7, #20
 8001dea:	4619      	mov	r1, r3
 8001dec:	4805      	ldr	r0, [pc, #20]	; (8001e04 <HAL_UART_MspInit+0x8c>)
 8001dee:	f000 fd7b 	bl	80028e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001df2:	bf00      	nop
 8001df4:	3728      	adds	r7, #40	; 0x28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40004400 	.word	0x40004400
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40020000 	.word	0x40020000

08001e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e0c:	480d      	ldr	r0, [pc, #52]	; (8001e44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e0e:	490e      	ldr	r1, [pc, #56]	; (8001e48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e10:	4a0e      	ldr	r2, [pc, #56]	; (8001e4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e14:	e002      	b.n	8001e1c <LoopCopyDataInit>

08001e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e1a:	3304      	adds	r3, #4

08001e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e20:	d3f9      	bcc.n	8001e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e22:	4a0b      	ldr	r2, [pc, #44]	; (8001e50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e24:	4c0b      	ldr	r4, [pc, #44]	; (8001e54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e28:	e001      	b.n	8001e2e <LoopFillZerobss>

08001e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e2c:	3204      	adds	r2, #4

08001e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e30:	d3fb      	bcc.n	8001e2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e32:	f7ff ff65 	bl	8001d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e36:	f023 f855 	bl	8024ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e3a:	f7ff fb67 	bl	800150c <main>
  bx  lr    
 8001e3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e48:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001e4c:	08027b48 	.word	0x08027b48
  ldr r2, =_sbss
 8001e50:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001e54:	20001164 	.word	0x20001164

08001e58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e58:	e7fe      	b.n	8001e58 <ADC_IRQHandler>
	...

08001e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e60:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <HAL_Init+0x40>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0d      	ldr	r2, [pc, #52]	; (8001e9c <HAL_Init+0x40>)
 8001e66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_Init+0x40>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <HAL_Init+0x40>)
 8001e72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <HAL_Init+0x40>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a07      	ldr	r2, [pc, #28]	; (8001e9c <HAL_Init+0x40>)
 8001e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e84:	2003      	movs	r0, #3
 8001e86:	f000 f94f 	bl	8002128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f000 f808 	bl	8001ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e90:	f7ff fe90 	bl	8001bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023c00 	.word	0x40023c00

08001ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_InitTick+0x54>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_InitTick+0x58>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 f967 	bl	8002192 <HAL_SYSTICK_Config>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e00e      	b.n	8001eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b0f      	cmp	r3, #15
 8001ed2:	d80a      	bhi.n	8001eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8001edc:	f000 f92f 	bl	800213e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ee0:	4a06      	ldr	r2, [pc, #24]	; (8001efc <HAL_InitTick+0x5c>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e000      	b.n	8001eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	20000008 	.word	0x20000008
 8001efc:	20000004 	.word	0x20000004

08001f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_IncTick+0x20>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_IncTick+0x24>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <HAL_IncTick+0x24>)
 8001f12:	6013      	str	r3, [r2, #0]
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	20000008 	.word	0x20000008
 8001f24:	20000ce8 	.word	0x20000ce8

08001f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f2c:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <HAL_GetTick+0x14>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	20000ce8 	.word	0x20000ce8

08001f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f48:	f7ff ffee 	bl	8001f28 <HAL_GetTick>
 8001f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f58:	d005      	beq.n	8001f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_Delay+0x44>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4413      	add	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f66:	bf00      	nop
 8001f68:	f7ff ffde 	bl	8001f28 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d8f7      	bhi.n	8001f68 <HAL_Delay+0x28>
  {
  }
}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000008 	.word	0x20000008

08001f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fba:	4a04      	ldr	r2, [pc, #16]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	60d3      	str	r3, [r2, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	0a1b      	lsrs	r3, r3, #8
 8001fda:	f003 0307 	and.w	r3, r3, #7
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	db0b      	blt.n	8002016 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	f003 021f 	and.w	r2, r3, #31
 8002004:	4907      	ldr	r1, [pc, #28]	; (8002024 <__NVIC_EnableIRQ+0x38>)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	2001      	movs	r0, #1
 800200e:	fa00 f202 	lsl.w	r2, r0, r2
 8002012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000e100 	.word	0xe000e100

08002028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002038:	2b00      	cmp	r3, #0
 800203a:	db0a      	blt.n	8002052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	490c      	ldr	r1, [pc, #48]	; (8002074 <__NVIC_SetPriority+0x4c>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	440b      	add	r3, r1
 800204c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002050:	e00a      	b.n	8002068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4908      	ldr	r1, [pc, #32]	; (8002078 <__NVIC_SetPriority+0x50>)
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	3b04      	subs	r3, #4
 8002060:	0112      	lsls	r2, r2, #4
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	440b      	add	r3, r1
 8002066:	761a      	strb	r2, [r3, #24]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000e100 	.word	0xe000e100
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	; 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f1c3 0307 	rsb	r3, r3, #7
 8002096:	2b04      	cmp	r3, #4
 8002098:	bf28      	it	cs
 800209a:	2304      	movcs	r3, #4
 800209c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3304      	adds	r3, #4
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d902      	bls.n	80020ac <NVIC_EncodePriority+0x30>
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3b03      	subs	r3, #3
 80020aa:	e000      	b.n	80020ae <NVIC_EncodePriority+0x32>
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43da      	mvns	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	401a      	ands	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c4:	f04f 31ff 	mov.w	r1, #4294967295
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	43d9      	mvns	r1, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	4313      	orrs	r3, r2
         );
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3724      	adds	r7, #36	; 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f4:	d301      	bcc.n	80020fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f6:	2301      	movs	r3, #1
 80020f8:	e00f      	b.n	800211a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <SysTick_Config+0x40>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002102:	210f      	movs	r1, #15
 8002104:	f04f 30ff 	mov.w	r0, #4294967295
 8002108:	f7ff ff8e 	bl	8002028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <SysTick_Config+0x40>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002112:	4b04      	ldr	r3, [pc, #16]	; (8002124 <SysTick_Config+0x40>)
 8002114:	2207      	movs	r2, #7
 8002116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	e000e010 	.word	0xe000e010

08002128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff ff29 	bl	8001f88 <__NVIC_SetPriorityGrouping>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800213e:	b580      	push	{r7, lr}
 8002140:	b086      	sub	sp, #24
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
 800214a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002150:	f7ff ff3e 	bl	8001fd0 <__NVIC_GetPriorityGrouping>
 8002154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	6978      	ldr	r0, [r7, #20]
 800215c:	f7ff ff8e 	bl	800207c <NVIC_EncodePriority>
 8002160:	4602      	mov	r2, r0
 8002162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff5d 	bl	8002028 <__NVIC_SetPriority>
}
 800216e:	bf00      	nop
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	4603      	mov	r3, r0
 800217e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff31 	bl	8001fec <__NVIC_EnableIRQ>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ffa2 	bl	80020e4 <SysTick_Config>
 80021a0:	4603      	mov	r3, r0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021b8:	f7ff feb6 	bl	8001f28 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e099      	b.n	80022fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2202      	movs	r2, #2
 80021cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0201 	bic.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021e8:	e00f      	b.n	800220a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021ea:	f7ff fe9d 	bl	8001f28 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b05      	cmp	r3, #5
 80021f6:	d908      	bls.n	800220a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2203      	movs	r2, #3
 8002202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e078      	b.n	80022fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1e8      	bne.n	80021ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	4b38      	ldr	r3, [pc, #224]	; (8002304 <HAL_DMA_Init+0x158>)
 8002224:	4013      	ands	r3, r2
 8002226:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002236:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002242:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800224e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	4313      	orrs	r3, r2
 800225a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	2b04      	cmp	r3, #4
 8002262:	d107      	bne.n	8002274 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	4313      	orrs	r3, r2
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	4313      	orrs	r3, r2
 8002272:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f023 0307 	bic.w	r3, r3, #7
 800228a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	4313      	orrs	r3, r2
 8002294:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	2b04      	cmp	r3, #4
 800229c:	d117      	bne.n	80022ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00e      	beq.n	80022ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 fa9d 	bl	80027f0 <DMA_CheckFifoParam>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d008      	beq.n	80022ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2240      	movs	r2, #64	; 0x40
 80022c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022ca:	2301      	movs	r3, #1
 80022cc:	e016      	b.n	80022fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 fa54 	bl	8002784 <DMA_CalcBaseAndBitshift>
 80022dc:	4603      	mov	r3, r0
 80022de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e4:	223f      	movs	r2, #63	; 0x3f
 80022e6:	409a      	lsls	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	f010803f 	.word	0xf010803f

08002308 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
 8002314:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_DMA_Start_IT+0x26>
 800232a:	2302      	movs	r3, #2
 800232c:	e040      	b.n	80023b0 <HAL_DMA_Start_IT+0xa8>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b01      	cmp	r3, #1
 8002340:	d12f      	bne.n	80023a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2202      	movs	r2, #2
 8002346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f9e6 	bl	8002728 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002360:	223f      	movs	r2, #63	; 0x3f
 8002362:	409a      	lsls	r2, r3
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0216 	orr.w	r2, r2, #22
 8002376:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	2b00      	cmp	r3, #0
 800237e:	d007      	beq.n	8002390 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0208 	orr.w	r2, r2, #8
 800238e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	e005      	b.n	80023ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023aa:	2302      	movs	r3, #2
 80023ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d004      	beq.n	80023d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2280      	movs	r2, #128	; 0x80
 80023d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e00c      	b.n	80023f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2205      	movs	r2, #5
 80023da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0201 	bic.w	r2, r2, #1
 80023ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002408:	4b92      	ldr	r3, [pc, #584]	; (8002654 <HAL_DMA_IRQHandler+0x258>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a92      	ldr	r2, [pc, #584]	; (8002658 <HAL_DMA_IRQHandler+0x25c>)
 800240e:	fba2 2303 	umull	r2, r3, r2, r3
 8002412:	0a9b      	lsrs	r3, r3, #10
 8002414:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002426:	2208      	movs	r2, #8
 8002428:	409a      	lsls	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4013      	ands	r3, r2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d01a      	beq.n	8002468 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d013      	beq.n	8002468 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0204 	bic.w	r2, r2, #4
 800244e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002454:	2208      	movs	r2, #8
 8002456:	409a      	lsls	r2, r3
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002460:	f043 0201 	orr.w	r2, r3, #1
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246c:	2201      	movs	r2, #1
 800246e:	409a      	lsls	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4013      	ands	r3, r2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d012      	beq.n	800249e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00b      	beq.n	800249e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248a:	2201      	movs	r2, #1
 800248c:	409a      	lsls	r2, r3
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002496:	f043 0202 	orr.w	r2, r3, #2
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a2:	2204      	movs	r2, #4
 80024a4:	409a      	lsls	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4013      	ands	r3, r2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d012      	beq.n	80024d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00b      	beq.n	80024d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c0:	2204      	movs	r2, #4
 80024c2:	409a      	lsls	r2, r3
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024cc:	f043 0204 	orr.w	r2, r3, #4
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d8:	2210      	movs	r2, #16
 80024da:	409a      	lsls	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4013      	ands	r3, r2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d043      	beq.n	800256c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d03c      	beq.n	800256c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f6:	2210      	movs	r2, #16
 80024f8:	409a      	lsls	r2, r3
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d018      	beq.n	800253e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d108      	bne.n	800252c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	2b00      	cmp	r3, #0
 8002520:	d024      	beq.n	800256c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	4798      	blx	r3
 800252a:	e01f      	b.n	800256c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002530:	2b00      	cmp	r3, #0
 8002532:	d01b      	beq.n	800256c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	4798      	blx	r3
 800253c:	e016      	b.n	800256c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d107      	bne.n	800255c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0208 	bic.w	r2, r2, #8
 800255a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002570:	2220      	movs	r2, #32
 8002572:	409a      	lsls	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4013      	ands	r3, r2
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 808e 	beq.w	800269a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 8086 	beq.w	800269a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002592:	2220      	movs	r2, #32
 8002594:	409a      	lsls	r2, r3
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b05      	cmp	r3, #5
 80025a4:	d136      	bne.n	8002614 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0216 	bic.w	r2, r2, #22
 80025b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695a      	ldr	r2, [r3, #20]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d103      	bne.n	80025d6 <HAL_DMA_IRQHandler+0x1da>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d007      	beq.n	80025e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0208 	bic.w	r2, r2, #8
 80025e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ea:	223f      	movs	r2, #63	; 0x3f
 80025ec:	409a      	lsls	r2, r3
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002606:	2b00      	cmp	r3, #0
 8002608:	d07d      	beq.n	8002706 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	4798      	blx	r3
        }
        return;
 8002612:	e078      	b.n	8002706 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d01c      	beq.n	800265c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d108      	bne.n	8002642 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002634:	2b00      	cmp	r3, #0
 8002636:	d030      	beq.n	800269a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	4798      	blx	r3
 8002640:	e02b      	b.n	800269a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002646:	2b00      	cmp	r3, #0
 8002648:	d027      	beq.n	800269a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	4798      	blx	r3
 8002652:	e022      	b.n	800269a <HAL_DMA_IRQHandler+0x29e>
 8002654:	20000000 	.word	0x20000000
 8002658:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10f      	bne.n	800268a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0210 	bic.w	r2, r2, #16
 8002678:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d032      	beq.n	8002708 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d022      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2205      	movs	r2, #5
 80026b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0201 	bic.w	r2, r2, #1
 80026c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	3301      	adds	r3, #1
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d307      	bcc.n	80026e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1f2      	bne.n	80026c6 <HAL_DMA_IRQHandler+0x2ca>
 80026e0:	e000      	b.n	80026e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80026e2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	4798      	blx	r3
 8002704:	e000      	b.n	8002708 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002706:	bf00      	nop
    }
  }
}
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop

08002710 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002744:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b40      	cmp	r3, #64	; 0x40
 8002754:	d108      	bne.n	8002768 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002766:	e007      	b.n	8002778 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	60da      	str	r2, [r3, #12]
}
 8002778:	bf00      	nop
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	3b10      	subs	r3, #16
 8002794:	4a14      	ldr	r2, [pc, #80]	; (80027e8 <DMA_CalcBaseAndBitshift+0x64>)
 8002796:	fba2 2303 	umull	r2, r3, r2, r3
 800279a:	091b      	lsrs	r3, r3, #4
 800279c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800279e:	4a13      	ldr	r2, [pc, #76]	; (80027ec <DMA_CalcBaseAndBitshift+0x68>)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4413      	add	r3, r2
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	461a      	mov	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d909      	bls.n	80027c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027ba:	f023 0303 	bic.w	r3, r3, #3
 80027be:	1d1a      	adds	r2, r3, #4
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	659a      	str	r2, [r3, #88]	; 0x58
 80027c4:	e007      	b.n	80027d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027ce:	f023 0303 	bic.w	r3, r3, #3
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	aaaaaaab 	.word	0xaaaaaaab
 80027ec:	08026c68 	.word	0x08026c68

080027f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d11f      	bne.n	800284a <DMA_CheckFifoParam+0x5a>
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2b03      	cmp	r3, #3
 800280e:	d856      	bhi.n	80028be <DMA_CheckFifoParam+0xce>
 8002810:	a201      	add	r2, pc, #4	; (adr r2, 8002818 <DMA_CheckFifoParam+0x28>)
 8002812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002816:	bf00      	nop
 8002818:	08002829 	.word	0x08002829
 800281c:	0800283b 	.word	0x0800283b
 8002820:	08002829 	.word	0x08002829
 8002824:	080028bf 	.word	0x080028bf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d046      	beq.n	80028c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002838:	e043      	b.n	80028c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002842:	d140      	bne.n	80028c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002848:	e03d      	b.n	80028c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002852:	d121      	bne.n	8002898 <DMA_CheckFifoParam+0xa8>
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b03      	cmp	r3, #3
 8002858:	d837      	bhi.n	80028ca <DMA_CheckFifoParam+0xda>
 800285a:	a201      	add	r2, pc, #4	; (adr r2, 8002860 <DMA_CheckFifoParam+0x70>)
 800285c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002860:	08002871 	.word	0x08002871
 8002864:	08002877 	.word	0x08002877
 8002868:	08002871 	.word	0x08002871
 800286c:	08002889 	.word	0x08002889
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	73fb      	strb	r3, [r7, #15]
      break;
 8002874:	e030      	b.n	80028d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d025      	beq.n	80028ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002886:	e022      	b.n	80028ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002890:	d11f      	bne.n	80028d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002896:	e01c      	b.n	80028d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d903      	bls.n	80028a6 <DMA_CheckFifoParam+0xb6>
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d003      	beq.n	80028ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028a4:	e018      	b.n	80028d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	73fb      	strb	r3, [r7, #15]
      break;
 80028aa:	e015      	b.n	80028d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00e      	beq.n	80028d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
      break;
 80028bc:	e00b      	b.n	80028d6 <DMA_CheckFifoParam+0xe6>
      break;
 80028be:	bf00      	nop
 80028c0:	e00a      	b.n	80028d8 <DMA_CheckFifoParam+0xe8>
      break;
 80028c2:	bf00      	nop
 80028c4:	e008      	b.n	80028d8 <DMA_CheckFifoParam+0xe8>
      break;
 80028c6:	bf00      	nop
 80028c8:	e006      	b.n	80028d8 <DMA_CheckFifoParam+0xe8>
      break;
 80028ca:	bf00      	nop
 80028cc:	e004      	b.n	80028d8 <DMA_CheckFifoParam+0xe8>
      break;
 80028ce:	bf00      	nop
 80028d0:	e002      	b.n	80028d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80028d2:	bf00      	nop
 80028d4:	e000      	b.n	80028d8 <DMA_CheckFifoParam+0xe8>
      break;
 80028d6:	bf00      	nop
    }
  } 
  
  return status; 
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop

080028e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b089      	sub	sp, #36	; 0x24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	e159      	b.n	8002bb8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002904:	2201      	movs	r2, #1
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	4013      	ands	r3, r2
 8002916:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	429a      	cmp	r2, r3
 800291e:	f040 8148 	bne.w	8002bb2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	2b01      	cmp	r3, #1
 800292c:	d005      	beq.n	800293a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002936:	2b02      	cmp	r3, #2
 8002938:	d130      	bne.n	800299c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	2203      	movs	r2, #3
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4313      	orrs	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002970:	2201      	movs	r2, #1
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	f003 0201 	and.w	r2, r3, #1
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d017      	beq.n	80029d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	2203      	movs	r2, #3
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d123      	bne.n	8002a2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	08da      	lsrs	r2, r3, #3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3208      	adds	r2, #8
 80029ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	220f      	movs	r2, #15
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	08da      	lsrs	r2, r3, #3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3208      	adds	r2, #8
 8002a26:	69b9      	ldr	r1, [r7, #24]
 8002a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	2203      	movs	r2, #3
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4013      	ands	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 0203 	and.w	r2, r3, #3
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 80a2 	beq.w	8002bb2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	4b57      	ldr	r3, [pc, #348]	; (8002bd0 <HAL_GPIO_Init+0x2e8>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	4a56      	ldr	r2, [pc, #344]	; (8002bd0 <HAL_GPIO_Init+0x2e8>)
 8002a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7e:	4b54      	ldr	r3, [pc, #336]	; (8002bd0 <HAL_GPIO_Init+0x2e8>)
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a8a:	4a52      	ldr	r2, [pc, #328]	; (8002bd4 <HAL_GPIO_Init+0x2ec>)
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	089b      	lsrs	r3, r3, #2
 8002a90:	3302      	adds	r3, #2
 8002a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	220f      	movs	r2, #15
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a49      	ldr	r2, [pc, #292]	; (8002bd8 <HAL_GPIO_Init+0x2f0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d019      	beq.n	8002aea <HAL_GPIO_Init+0x202>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a48      	ldr	r2, [pc, #288]	; (8002bdc <HAL_GPIO_Init+0x2f4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d013      	beq.n	8002ae6 <HAL_GPIO_Init+0x1fe>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a47      	ldr	r2, [pc, #284]	; (8002be0 <HAL_GPIO_Init+0x2f8>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00d      	beq.n	8002ae2 <HAL_GPIO_Init+0x1fa>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a46      	ldr	r2, [pc, #280]	; (8002be4 <HAL_GPIO_Init+0x2fc>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d007      	beq.n	8002ade <HAL_GPIO_Init+0x1f6>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a45      	ldr	r2, [pc, #276]	; (8002be8 <HAL_GPIO_Init+0x300>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d101      	bne.n	8002ada <HAL_GPIO_Init+0x1f2>
 8002ad6:	2304      	movs	r3, #4
 8002ad8:	e008      	b.n	8002aec <HAL_GPIO_Init+0x204>
 8002ada:	2307      	movs	r3, #7
 8002adc:	e006      	b.n	8002aec <HAL_GPIO_Init+0x204>
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e004      	b.n	8002aec <HAL_GPIO_Init+0x204>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e002      	b.n	8002aec <HAL_GPIO_Init+0x204>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <HAL_GPIO_Init+0x204>
 8002aea:	2300      	movs	r3, #0
 8002aec:	69fa      	ldr	r2, [r7, #28]
 8002aee:	f002 0203 	and.w	r2, r2, #3
 8002af2:	0092      	lsls	r2, r2, #2
 8002af4:	4093      	lsls	r3, r2
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002afc:	4935      	ldr	r1, [pc, #212]	; (8002bd4 <HAL_GPIO_Init+0x2ec>)
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	089b      	lsrs	r3, r3, #2
 8002b02:	3302      	adds	r3, #2
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b0a:	4b38      	ldr	r3, [pc, #224]	; (8002bec <HAL_GPIO_Init+0x304>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	43db      	mvns	r3, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4013      	ands	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b2e:	4a2f      	ldr	r2, [pc, #188]	; (8002bec <HAL_GPIO_Init+0x304>)
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b34:	4b2d      	ldr	r3, [pc, #180]	; (8002bec <HAL_GPIO_Init+0x304>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b58:	4a24      	ldr	r2, [pc, #144]	; (8002bec <HAL_GPIO_Init+0x304>)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b5e:	4b23      	ldr	r3, [pc, #140]	; (8002bec <HAL_GPIO_Init+0x304>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	43db      	mvns	r3, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b82:	4a1a      	ldr	r2, [pc, #104]	; (8002bec <HAL_GPIO_Init+0x304>)
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b88:	4b18      	ldr	r3, [pc, #96]	; (8002bec <HAL_GPIO_Init+0x304>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bac:	4a0f      	ldr	r2, [pc, #60]	; (8002bec <HAL_GPIO_Init+0x304>)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	61fb      	str	r3, [r7, #28]
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	2b0f      	cmp	r3, #15
 8002bbc:	f67f aea2 	bls.w	8002904 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	bf00      	nop
 8002bc4:	3724      	adds	r7, #36	; 0x24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	40013800 	.word	0x40013800
 8002bd8:	40020000 	.word	0x40020000
 8002bdc:	40020400 	.word	0x40020400
 8002be0:	40020800 	.word	0x40020800
 8002be4:	40020c00 	.word	0x40020c00
 8002be8:	40021000 	.word	0x40021000
 8002bec:	40013c00 	.word	0x40013c00

08002bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	807b      	strh	r3, [r7, #2]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c00:	787b      	ldrb	r3, [r7, #1]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c06:	887a      	ldrh	r2, [r7, #2]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c0c:	e003      	b.n	8002c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c0e:	887b      	ldrh	r3, [r7, #2]
 8002c10:	041a      	lsls	r2, r3, #16
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	619a      	str	r2, [r3, #24]
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e264      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d075      	beq.n	8002d2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c42:	4ba3      	ldr	r3, [pc, #652]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d00c      	beq.n	8002c68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c4e:	4ba0      	ldr	r3, [pc, #640]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d112      	bne.n	8002c80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c5a:	4b9d      	ldr	r3, [pc, #628]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c66:	d10b      	bne.n	8002c80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c68:	4b99      	ldr	r3, [pc, #612]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d05b      	beq.n	8002d2c <HAL_RCC_OscConfig+0x108>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d157      	bne.n	8002d2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e23f      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c88:	d106      	bne.n	8002c98 <HAL_RCC_OscConfig+0x74>
 8002c8a:	4b91      	ldr	r3, [pc, #580]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a90      	ldr	r2, [pc, #576]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	e01d      	b.n	8002cd4 <HAL_RCC_OscConfig+0xb0>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ca0:	d10c      	bne.n	8002cbc <HAL_RCC_OscConfig+0x98>
 8002ca2:	4b8b      	ldr	r3, [pc, #556]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a8a      	ldr	r2, [pc, #552]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	4b88      	ldr	r3, [pc, #544]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a87      	ldr	r2, [pc, #540]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	e00b      	b.n	8002cd4 <HAL_RCC_OscConfig+0xb0>
 8002cbc:	4b84      	ldr	r3, [pc, #528]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a83      	ldr	r2, [pc, #524]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	4b81      	ldr	r3, [pc, #516]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a80      	ldr	r2, [pc, #512]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d013      	beq.n	8002d04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cdc:	f7ff f924 	bl	8001f28 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ce4:	f7ff f920 	bl	8001f28 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b64      	cmp	r3, #100	; 0x64
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e204      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf6:	4b76      	ldr	r3, [pc, #472]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0xc0>
 8002d02:	e014      	b.n	8002d2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7ff f910 	bl	8001f28 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d0c:	f7ff f90c 	bl	8001f28 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	; 0x64
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e1f0      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d1e:	4b6c      	ldr	r3, [pc, #432]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0xe8>
 8002d2a:	e000      	b.n	8002d2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d063      	beq.n	8002e02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d3a:	4b65      	ldr	r3, [pc, #404]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00b      	beq.n	8002d5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d46:	4b62      	ldr	r3, [pc, #392]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d11c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d52:	4b5f      	ldr	r3, [pc, #380]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d116      	bne.n	8002d8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5e:	4b5c      	ldr	r3, [pc, #368]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d005      	beq.n	8002d76 <HAL_RCC_OscConfig+0x152>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d001      	beq.n	8002d76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e1c4      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d76:	4b56      	ldr	r3, [pc, #344]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4952      	ldr	r1, [pc, #328]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8a:	e03a      	b.n	8002e02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d020      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d94:	4b4f      	ldr	r3, [pc, #316]	; (8002ed4 <HAL_RCC_OscConfig+0x2b0>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9a:	f7ff f8c5 	bl	8001f28 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002da2:	f7ff f8c1 	bl	8001f28 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e1a5      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db4:	4b46      	ldr	r3, [pc, #280]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0f0      	beq.n	8002da2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc0:	4b43      	ldr	r3, [pc, #268]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	4940      	ldr	r1, [pc, #256]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	600b      	str	r3, [r1, #0]
 8002dd4:	e015      	b.n	8002e02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dd6:	4b3f      	ldr	r3, [pc, #252]	; (8002ed4 <HAL_RCC_OscConfig+0x2b0>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7ff f8a4 	bl	8001f28 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002de4:	f7ff f8a0 	bl	8001f28 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e184      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df6:	4b36      	ldr	r3, [pc, #216]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d030      	beq.n	8002e70 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d016      	beq.n	8002e44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e16:	4b30      	ldr	r3, [pc, #192]	; (8002ed8 <HAL_RCC_OscConfig+0x2b4>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1c:	f7ff f884 	bl	8001f28 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e24:	f7ff f880 	bl	8001f28 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e164      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e36:	4b26      	ldr	r3, [pc, #152]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0x200>
 8002e42:	e015      	b.n	8002e70 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e44:	4b24      	ldr	r3, [pc, #144]	; (8002ed8 <HAL_RCC_OscConfig+0x2b4>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4a:	f7ff f86d 	bl	8001f28 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e52:	f7ff f869 	bl	8001f28 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e14d      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e64:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1f0      	bne.n	8002e52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80a0 	beq.w	8002fbe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e82:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10f      	bne.n	8002eae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	4a0e      	ldr	r2, [pc, #56]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <HAL_RCC_OscConfig+0x2ac>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eae:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_RCC_OscConfig+0x2b8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d121      	bne.n	8002efe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eba:	4b08      	ldr	r3, [pc, #32]	; (8002edc <HAL_RCC_OscConfig+0x2b8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a07      	ldr	r2, [pc, #28]	; (8002edc <HAL_RCC_OscConfig+0x2b8>)
 8002ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec6:	f7ff f82f 	bl	8001f28 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ecc:	e011      	b.n	8002ef2 <HAL_RCC_OscConfig+0x2ce>
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	42470000 	.word	0x42470000
 8002ed8:	42470e80 	.word	0x42470e80
 8002edc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee0:	f7ff f822 	bl	8001f28 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e106      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef2:	4b85      	ldr	r3, [pc, #532]	; (8003108 <HAL_RCC_OscConfig+0x4e4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d106      	bne.n	8002f14 <HAL_RCC_OscConfig+0x2f0>
 8002f06:	4b81      	ldr	r3, [pc, #516]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	4a80      	ldr	r2, [pc, #512]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	6713      	str	r3, [r2, #112]	; 0x70
 8002f12:	e01c      	b.n	8002f4e <HAL_RCC_OscConfig+0x32a>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b05      	cmp	r3, #5
 8002f1a:	d10c      	bne.n	8002f36 <HAL_RCC_OscConfig+0x312>
 8002f1c:	4b7b      	ldr	r3, [pc, #492]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	4a7a      	ldr	r2, [pc, #488]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002f22:	f043 0304 	orr.w	r3, r3, #4
 8002f26:	6713      	str	r3, [r2, #112]	; 0x70
 8002f28:	4b78      	ldr	r3, [pc, #480]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2c:	4a77      	ldr	r2, [pc, #476]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	6713      	str	r3, [r2, #112]	; 0x70
 8002f34:	e00b      	b.n	8002f4e <HAL_RCC_OscConfig+0x32a>
 8002f36:	4b75      	ldr	r3, [pc, #468]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	4a74      	ldr	r2, [pc, #464]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002f3c:	f023 0301 	bic.w	r3, r3, #1
 8002f40:	6713      	str	r3, [r2, #112]	; 0x70
 8002f42:	4b72      	ldr	r3, [pc, #456]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f46:	4a71      	ldr	r2, [pc, #452]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002f48:	f023 0304 	bic.w	r3, r3, #4
 8002f4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d015      	beq.n	8002f82 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f56:	f7fe ffe7 	bl	8001f28 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5c:	e00a      	b.n	8002f74 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f5e:	f7fe ffe3 	bl	8001f28 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e0c5      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f74:	4b65      	ldr	r3, [pc, #404]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0ee      	beq.n	8002f5e <HAL_RCC_OscConfig+0x33a>
 8002f80:	e014      	b.n	8002fac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f82:	f7fe ffd1 	bl	8001f28 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f88:	e00a      	b.n	8002fa0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f8a:	f7fe ffcd 	bl	8001f28 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e0af      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa0:	4b5a      	ldr	r3, [pc, #360]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1ee      	bne.n	8002f8a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d105      	bne.n	8002fbe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb2:	4b56      	ldr	r3, [pc, #344]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	4a55      	ldr	r2, [pc, #340]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 809b 	beq.w	80030fe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fc8:	4b50      	ldr	r3, [pc, #320]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 030c 	and.w	r3, r3, #12
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d05c      	beq.n	800308e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d141      	bne.n	8003060 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fdc:	4b4c      	ldr	r3, [pc, #304]	; (8003110 <HAL_RCC_OscConfig+0x4ec>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe2:	f7fe ffa1 	bl	8001f28 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fea:	f7fe ff9d 	bl	8001f28 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e081      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffc:	4b43      	ldr	r3, [pc, #268]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1f0      	bne.n	8002fea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69da      	ldr	r2, [r3, #28]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	431a      	orrs	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	019b      	lsls	r3, r3, #6
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301e:	085b      	lsrs	r3, r3, #1
 8003020:	3b01      	subs	r3, #1
 8003022:	041b      	lsls	r3, r3, #16
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302a:	061b      	lsls	r3, r3, #24
 800302c:	4937      	ldr	r1, [pc, #220]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 800302e:	4313      	orrs	r3, r2
 8003030:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003032:	4b37      	ldr	r3, [pc, #220]	; (8003110 <HAL_RCC_OscConfig+0x4ec>)
 8003034:	2201      	movs	r2, #1
 8003036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fe ff76 	bl	8001f28 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003040:	f7fe ff72 	bl	8001f28 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e056      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003052:	4b2e      	ldr	r3, [pc, #184]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0x41c>
 800305e:	e04e      	b.n	80030fe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003060:	4b2b      	ldr	r3, [pc, #172]	; (8003110 <HAL_RCC_OscConfig+0x4ec>)
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003066:	f7fe ff5f 	bl	8001f28 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800306e:	f7fe ff5b 	bl	8001f28 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e03f      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003080:	4b22      	ldr	r3, [pc, #136]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1f0      	bne.n	800306e <HAL_RCC_OscConfig+0x44a>
 800308c:	e037      	b.n	80030fe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d101      	bne.n	800309a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e032      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800309a:	4b1c      	ldr	r3, [pc, #112]	; (800310c <HAL_RCC_OscConfig+0x4e8>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d028      	beq.n	80030fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d121      	bne.n	80030fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d11a      	bne.n	80030fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030ca:	4013      	ands	r3, r2
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030d0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d111      	bne.n	80030fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	085b      	lsrs	r3, r3, #1
 80030e2:	3b01      	subs	r3, #1
 80030e4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d001      	beq.n	80030fe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40007000 	.word	0x40007000
 800310c:	40023800 	.word	0x40023800
 8003110:	42470060 	.word	0x42470060

08003114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0cc      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003128:	4b68      	ldr	r3, [pc, #416]	; (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d90c      	bls.n	8003150 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003136:	4b65      	ldr	r3, [pc, #404]	; (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b63      	ldr	r3, [pc, #396]	; (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0b8      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d020      	beq.n	800319e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003168:	4b59      	ldr	r3, [pc, #356]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	4a58      	ldr	r2, [pc, #352]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003172:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0308 	and.w	r3, r3, #8
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003180:	4b53      	ldr	r3, [pc, #332]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	4a52      	ldr	r2, [pc, #328]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800318a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800318c:	4b50      	ldr	r3, [pc, #320]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	494d      	ldr	r1, [pc, #308]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	4313      	orrs	r3, r2
 800319c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d044      	beq.n	8003234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d107      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b2:	4b47      	ldr	r3, [pc, #284]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d119      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e07f      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d003      	beq.n	80031d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d107      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d2:	4b3f      	ldr	r3, [pc, #252]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d109      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e06f      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e2:	4b3b      	ldr	r3, [pc, #236]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e067      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031f2:	4b37      	ldr	r3, [pc, #220]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f023 0203 	bic.w	r2, r3, #3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4934      	ldr	r1, [pc, #208]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	4313      	orrs	r3, r2
 8003202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003204:	f7fe fe90 	bl	8001f28 <HAL_GetTick>
 8003208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320a:	e00a      	b.n	8003222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800320c:	f7fe fe8c 	bl	8001f28 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f241 3288 	movw	r2, #5000	; 0x1388
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e04f      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003222:	4b2b      	ldr	r3, [pc, #172]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 020c 	and.w	r2, r3, #12
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	429a      	cmp	r2, r3
 8003232:	d1eb      	bne.n	800320c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003234:	4b25      	ldr	r3, [pc, #148]	; (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d20c      	bcs.n	800325c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003242:	4b22      	ldr	r3, [pc, #136]	; (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324a:	4b20      	ldr	r3, [pc, #128]	; (80032cc <HAL_RCC_ClockConfig+0x1b8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d001      	beq.n	800325c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e032      	b.n	80032c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003268:	4b19      	ldr	r3, [pc, #100]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	4916      	ldr	r1, [pc, #88]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	4313      	orrs	r3, r2
 8003278:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d009      	beq.n	800329a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003286:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	490e      	ldr	r1, [pc, #56]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	4313      	orrs	r3, r2
 8003298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800329a:	f000 f821 	bl	80032e0 <HAL_RCC_GetSysClockFreq>
 800329e:	4602      	mov	r2, r0
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	490a      	ldr	r1, [pc, #40]	; (80032d4 <HAL_RCC_ClockConfig+0x1c0>)
 80032ac:	5ccb      	ldrb	r3, [r1, r3]
 80032ae:	fa22 f303 	lsr.w	r3, r2, r3
 80032b2:	4a09      	ldr	r2, [pc, #36]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 80032b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032b6:	4b09      	ldr	r3, [pc, #36]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fe fdf0 	bl	8001ea0 <HAL_InitTick>

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40023c00 	.word	0x40023c00
 80032d0:	40023800 	.word	0x40023800
 80032d4:	08026c50 	.word	0x08026c50
 80032d8:	20000000 	.word	0x20000000
 80032dc:	20000004 	.word	0x20000004

080032e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032e4:	b084      	sub	sp, #16
 80032e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	607b      	str	r3, [r7, #4]
 80032ec:	2300      	movs	r3, #0
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	2300      	movs	r3, #0
 80032f2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032f8:	4b67      	ldr	r3, [pc, #412]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 030c 	and.w	r3, r3, #12
 8003300:	2b08      	cmp	r3, #8
 8003302:	d00d      	beq.n	8003320 <HAL_RCC_GetSysClockFreq+0x40>
 8003304:	2b08      	cmp	r3, #8
 8003306:	f200 80bd 	bhi.w	8003484 <HAL_RCC_GetSysClockFreq+0x1a4>
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <HAL_RCC_GetSysClockFreq+0x34>
 800330e:	2b04      	cmp	r3, #4
 8003310:	d003      	beq.n	800331a <HAL_RCC_GetSysClockFreq+0x3a>
 8003312:	e0b7      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003314:	4b61      	ldr	r3, [pc, #388]	; (800349c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003316:	60bb      	str	r3, [r7, #8]
       break;
 8003318:	e0b7      	b.n	800348a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800331a:	4b61      	ldr	r3, [pc, #388]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800331c:	60bb      	str	r3, [r7, #8]
      break;
 800331e:	e0b4      	b.n	800348a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003320:	4b5d      	ldr	r3, [pc, #372]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003328:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800332a:	4b5b      	ldr	r3, [pc, #364]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d04d      	beq.n	80033d2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003336:	4b58      	ldr	r3, [pc, #352]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	099b      	lsrs	r3, r3, #6
 800333c:	461a      	mov	r2, r3
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003346:	f04f 0100 	mov.w	r1, #0
 800334a:	ea02 0800 	and.w	r8, r2, r0
 800334e:	ea03 0901 	and.w	r9, r3, r1
 8003352:	4640      	mov	r0, r8
 8003354:	4649      	mov	r1, r9
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	014b      	lsls	r3, r1, #5
 8003360:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003364:	0142      	lsls	r2, r0, #5
 8003366:	4610      	mov	r0, r2
 8003368:	4619      	mov	r1, r3
 800336a:	ebb0 0008 	subs.w	r0, r0, r8
 800336e:	eb61 0109 	sbc.w	r1, r1, r9
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	018b      	lsls	r3, r1, #6
 800337c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003380:	0182      	lsls	r2, r0, #6
 8003382:	1a12      	subs	r2, r2, r0
 8003384:	eb63 0301 	sbc.w	r3, r3, r1
 8003388:	f04f 0000 	mov.w	r0, #0
 800338c:	f04f 0100 	mov.w	r1, #0
 8003390:	00d9      	lsls	r1, r3, #3
 8003392:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003396:	00d0      	lsls	r0, r2, #3
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	eb12 0208 	adds.w	r2, r2, r8
 80033a0:	eb43 0309 	adc.w	r3, r3, r9
 80033a4:	f04f 0000 	mov.w	r0, #0
 80033a8:	f04f 0100 	mov.w	r1, #0
 80033ac:	0259      	lsls	r1, r3, #9
 80033ae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80033b2:	0250      	lsls	r0, r2, #9
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4610      	mov	r0, r2
 80033ba:	4619      	mov	r1, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	461a      	mov	r2, r3
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	f7fd fb7a 	bl	8000abc <__aeabi_uldivmod>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4613      	mov	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	e04a      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033d2:	4b31      	ldr	r3, [pc, #196]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	099b      	lsrs	r3, r3, #6
 80033d8:	461a      	mov	r2, r3
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033e2:	f04f 0100 	mov.w	r1, #0
 80033e6:	ea02 0400 	and.w	r4, r2, r0
 80033ea:	ea03 0501 	and.w	r5, r3, r1
 80033ee:	4620      	mov	r0, r4
 80033f0:	4629      	mov	r1, r5
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	f04f 0300 	mov.w	r3, #0
 80033fa:	014b      	lsls	r3, r1, #5
 80033fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003400:	0142      	lsls	r2, r0, #5
 8003402:	4610      	mov	r0, r2
 8003404:	4619      	mov	r1, r3
 8003406:	1b00      	subs	r0, r0, r4
 8003408:	eb61 0105 	sbc.w	r1, r1, r5
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	018b      	lsls	r3, r1, #6
 8003416:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800341a:	0182      	lsls	r2, r0, #6
 800341c:	1a12      	subs	r2, r2, r0
 800341e:	eb63 0301 	sbc.w	r3, r3, r1
 8003422:	f04f 0000 	mov.w	r0, #0
 8003426:	f04f 0100 	mov.w	r1, #0
 800342a:	00d9      	lsls	r1, r3, #3
 800342c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003430:	00d0      	lsls	r0, r2, #3
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	1912      	adds	r2, r2, r4
 8003438:	eb45 0303 	adc.w	r3, r5, r3
 800343c:	f04f 0000 	mov.w	r0, #0
 8003440:	f04f 0100 	mov.w	r1, #0
 8003444:	0299      	lsls	r1, r3, #10
 8003446:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800344a:	0290      	lsls	r0, r2, #10
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4610      	mov	r0, r2
 8003452:	4619      	mov	r1, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	461a      	mov	r2, r3
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	f7fd fb2e 	bl	8000abc <__aeabi_uldivmod>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4613      	mov	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003468:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	0c1b      	lsrs	r3, r3, #16
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	3301      	adds	r3, #1
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003480:	60bb      	str	r3, [r7, #8]
      break;
 8003482:	e002      	b.n	800348a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003484:	4b05      	ldr	r3, [pc, #20]	; (800349c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003486:	60bb      	str	r3, [r7, #8]
      break;
 8003488:	bf00      	nop
    }
  }
  return sysclockfreq;
 800348a:	68bb      	ldr	r3, [r7, #8]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003496:	bf00      	nop
 8003498:	40023800 	.word	0x40023800
 800349c:	00f42400 	.word	0x00f42400
 80034a0:	007a1200 	.word	0x007a1200

080034a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034a8:	4b03      	ldr	r3, [pc, #12]	; (80034b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034aa:	681b      	ldr	r3, [r3, #0]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	20000000 	.word	0x20000000

080034bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034c0:	f7ff fff0 	bl	80034a4 <HAL_RCC_GetHCLKFreq>
 80034c4:	4602      	mov	r2, r0
 80034c6:	4b05      	ldr	r3, [pc, #20]	; (80034dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	0a9b      	lsrs	r3, r3, #10
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	4903      	ldr	r1, [pc, #12]	; (80034e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034d2:	5ccb      	ldrb	r3, [r1, r3]
 80034d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d8:	4618      	mov	r0, r3
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40023800 	.word	0x40023800
 80034e0:	08026c60 	.word	0x08026c60

080034e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034e8:	f7ff ffdc 	bl	80034a4 <HAL_RCC_GetHCLKFreq>
 80034ec:	4602      	mov	r2, r0
 80034ee:	4b05      	ldr	r3, [pc, #20]	; (8003504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	0b5b      	lsrs	r3, r3, #13
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	4903      	ldr	r1, [pc, #12]	; (8003508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034fa:	5ccb      	ldrb	r3, [r1, r3]
 80034fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003500:	4618      	mov	r0, r3
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40023800 	.word	0x40023800
 8003508:	08026c60 	.word	0x08026c60

0800350c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e022      	b.n	8003564 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d105      	bne.n	8003536 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7fe f9af 	bl	8001894 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2203      	movs	r2, #3
 800353a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f814 	bl	800356c <HAL_SD_InitCard>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e00a      	b.n	8003564 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800356c:	b5b0      	push	{r4, r5, r7, lr}
 800356e:	b08e      	sub	sp, #56	; 0x38
 8003570:	af04      	add	r7, sp, #16
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003574:	2300      	movs	r3, #0
 8003576:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800357c:	2300      	movs	r3, #0
 800357e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003584:	2300      	movs	r3, #0
 8003586:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003588:	2376      	movs	r3, #118	; 0x76
 800358a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681d      	ldr	r5, [r3, #0]
 8003590:	466c      	mov	r4, sp
 8003592:	f107 0314 	add.w	r3, r7, #20
 8003596:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800359a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800359e:	f107 0308 	add.w	r3, r7, #8
 80035a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035a4:	4628      	mov	r0, r5
 80035a6:	f001 fe7f 	bl	80052a8 <SDIO_Init>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80035b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e04c      	b.n	8003656 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80035bc:	4b28      	ldr	r3, [pc, #160]	; (8003660 <HAL_SD_InitCard+0xf4>)
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f001 feb7 	bl	800533a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80035cc:	4b24      	ldr	r3, [pc, #144]	; (8003660 <HAL_SD_InitCard+0xf4>)
 80035ce:	2201      	movs	r2, #1
 80035d0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f001 f804 	bl	80045e0 <SD_PowerON>
 80035d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00b      	beq.n	80035f8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e02e      	b.n	8003656 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 ff25 	bl	8004448 <SD_InitCard>
 80035fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00b      	beq.n	800361e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e01b      	b.n	8003656 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003626:	4618      	mov	r0, r3
 8003628:	f001 ff1a 	bl	8005460 <SDMMC_CmdBlockLength>
 800362c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00f      	beq.n	8003654 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a0a      	ldr	r2, [pc, #40]	; (8003664 <HAL_SD_InitCard+0xf8>)
 800363a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e000      	b.n	8003656 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3728      	adds	r7, #40	; 0x28
 800365a:	46bd      	mov	sp, r7
 800365c:	bdb0      	pop	{r4, r5, r7, pc}
 800365e:	bf00      	nop
 8003660:	422580a0 	.word	0x422580a0
 8003664:	004005ff 	.word	0x004005ff

08003668 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b08c      	sub	sp, #48	; 0x30
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d107      	bne.n	8003690 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003684:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0c0      	b.n	8003812 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b01      	cmp	r3, #1
 800369a:	f040 80b9 	bne.w	8003810 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80036a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	441a      	add	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d907      	bls.n	80036c2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e0a7      	b.n	8003812 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2203      	movs	r2, #3
 80036c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2200      	movs	r2, #0
 80036d0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80036e0:	f043 0302 	orr.w	r3, r3, #2
 80036e4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	4a4c      	ldr	r2, [pc, #304]	; (800381c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80036ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	4a4b      	ldr	r2, [pc, #300]	; (8003820 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80036f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	2200      	movs	r2, #0
 80036fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	2200      	movs	r2, #0
 8003704:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3380      	adds	r3, #128	; 0x80
 800372c:	4619      	mov	r1, r3
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	025b      	lsls	r3, r3, #9
 8003734:	089b      	lsrs	r3, r3, #2
 8003736:	f7fe fde7 	bl	8002308 <HAL_DMA_Start_IT>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d017      	beq.n	8003770 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800374e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a33      	ldr	r2, [pc, #204]	; (8003824 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003756:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e050      	b.n	8003812 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003770:	4b2d      	ldr	r3, [pc, #180]	; (8003828 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003772:	2201      	movs	r2, #1
 8003774:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	2b01      	cmp	r3, #1
 800377c:	d002      	beq.n	8003784 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800377e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003780:	025b      	lsls	r3, r3, #9
 8003782:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003784:	f04f 33ff 	mov.w	r3, #4294967295
 8003788:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	025b      	lsls	r3, r3, #9
 800378e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003790:	2390      	movs	r3, #144	; 0x90
 8003792:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003794:	2302      	movs	r3, #2
 8003796:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003798:	2300      	movs	r3, #0
 800379a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800379c:	2301      	movs	r3, #1
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f107 0210 	add.w	r2, r7, #16
 80037a8:	4611      	mov	r1, r2
 80037aa:	4618      	mov	r0, r3
 80037ac:	f001 fe2c 	bl	8005408 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d90a      	bls.n	80037cc <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2282      	movs	r2, #130	; 0x82
 80037ba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037c2:	4618      	mov	r0, r3
 80037c4:	f001 fe90 	bl	80054e8 <SDMMC_CmdReadMultiBlock>
 80037c8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80037ca:	e009      	b.n	80037e0 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2281      	movs	r2, #129	; 0x81
 80037d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037d8:	4618      	mov	r0, r3
 80037da:	f001 fe63 	bl	80054a4 <SDMMC_CmdReadSingleBlock>
 80037de:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80037e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d012      	beq.n	800380c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a0e      	ldr	r2, [pc, #56]	; (8003824 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80037ec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f4:	431a      	orrs	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e002      	b.n	8003812 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800380c:	2300      	movs	r3, #0
 800380e:	e000      	b.n	8003812 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8003810:	2302      	movs	r3, #2
  }
}
 8003812:	4618      	mov	r0, r3
 8003814:	3730      	adds	r7, #48	; 0x30
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	08004257 	.word	0x08004257
 8003820:	080042c9 	.word	0x080042c9
 8003824:	004005ff 	.word	0x004005ff
 8003828:	4225858c 	.word	0x4225858c

0800382c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b08c      	sub	sp, #48	; 0x30
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d107      	bne.n	8003854 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003848:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0c5      	b.n	80039e0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b01      	cmp	r3, #1
 800385e:	f040 80be 	bne.w	80039de <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	441a      	add	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003872:	429a      	cmp	r2, r3
 8003874:	d907      	bls.n	8003886 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e0ac      	b.n	80039e0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2203      	movs	r2, #3
 800388a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2200      	movs	r2, #0
 8003894:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80038a4:	f043 0302 	orr.w	r3, r3, #2
 80038a8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ae:	4a4e      	ldr	r2, [pc, #312]	; (80039e8 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80038b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b6:	4a4d      	ldr	r2, [pc, #308]	; (80039ec <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80038b8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038be:	2200      	movs	r2, #0
 80038c0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d002      	beq.n	80038d0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80038ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038cc:	025b      	lsls	r3, r3, #9
 80038ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d90a      	bls.n	80038ec <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	22a0      	movs	r2, #160	; 0xa0
 80038da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038e2:	4618      	mov	r0, r3
 80038e4:	f001 fe44 	bl	8005570 <SDMMC_CmdWriteMultiBlock>
 80038e8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80038ea:	e009      	b.n	8003900 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2290      	movs	r2, #144	; 0x90
 80038f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038f8:	4618      	mov	r0, r3
 80038fa:	f001 fe17 	bl	800552c <SDMMC_CmdWriteSingleBlock>
 80038fe:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003902:	2b00      	cmp	r3, #0
 8003904:	d012      	beq.n	800392c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a39      	ldr	r2, [pc, #228]	; (80039f0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800390c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003914:	431a      	orrs	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e059      	b.n	80039e0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800392c:	4b31      	ldr	r3, [pc, #196]	; (80039f4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800392e:	2201      	movs	r2, #1
 8003930:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003936:	2240      	movs	r2, #64	; 0x40
 8003938:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800395a:	68b9      	ldr	r1, [r7, #8]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3380      	adds	r3, #128	; 0x80
 8003962:	461a      	mov	r2, r3
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	025b      	lsls	r3, r3, #9
 8003968:	089b      	lsrs	r3, r3, #2
 800396a:	f7fe fccd 	bl	8002308 <HAL_DMA_Start_IT>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d01c      	beq.n	80039ae <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	6812      	ldr	r2, [r2, #0]
 800397e:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8003982:	f023 0302 	bic.w	r3, r3, #2
 8003986:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a18      	ldr	r2, [pc, #96]	; (80039f0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800398e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003994:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e018      	b.n	80039e0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80039ae:	f04f 33ff 	mov.w	r3, #4294967295
 80039b2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	025b      	lsls	r3, r3, #9
 80039b8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80039ba:	2390      	movs	r3, #144	; 0x90
 80039bc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80039be:	2300      	movs	r3, #0
 80039c0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80039c6:	2301      	movs	r3, #1
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f107 0210 	add.w	r2, r7, #16
 80039d2:	4611      	mov	r1, r2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f001 fd17 	bl	8005408 <SDIO_ConfigData>

      return HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	e000      	b.n	80039e0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80039de:	2302      	movs	r3, #2
  }
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3730      	adds	r7, #48	; 0x30
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	0800422d 	.word	0x0800422d
 80039ec:	080042c9 	.word	0x080042c9
 80039f0:	004005ff 	.word	0x004005ff
 80039f4:	4225858c 	.word	0x4225858c

080039f8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <HAL_SD_IRQHandler+0x2e>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fffd 	bl	8004a1e <SD_Read_IT>
 8003a24:	e165      	b.n	8003cf2 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 808f 	beq.w	8003b54 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a3e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6812      	ldr	r2, [r2, #0]
 8003a4a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8003a4e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003a52:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0201 	bic.w	r2, r2, #1
 8003a62:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d039      	beq.n	8003ae2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d104      	bne.n	8003a82 <HAL_SD_IRQHandler+0x8a>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f003 0320 	and.w	r3, r3, #32
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d011      	beq.n	8003aa6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f001 fd94 	bl	80055b4 <SDMMC_CmdStopTransfer>
 8003a8c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d008      	beq.n	8003aa6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f92f 	bl	8003d04 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f240 523a 	movw	r2, #1338	; 0x53a
 8003aae:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d104      	bne.n	8003ad2 <HAL_SD_IRQHandler+0xda>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f002 fa02 	bl	8005edc <HAL_SD_RxCpltCallback>
 8003ad8:	e10b      	b.n	8003cf2 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f002 f9f4 	bl	8005ec8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003ae0:	e107      	b.n	8003cf2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 8102 	beq.w	8003cf2 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f003 0320 	and.w	r3, r3, #32
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d011      	beq.n	8003b1c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f001 fd59 	bl	80055b4 <SDMMC_CmdStopTransfer>
 8003b02:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d008      	beq.n	8003b1c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f8f4 	bl	8003d04 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f040 80e5 	bne.w	8003cf2 <HAL_SD_IRQHandler+0x2fa>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f040 80df 	bne.w	8003cf2 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0208 	bic.w	r2, r2, #8
 8003b42:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f002 f9bb 	bl	8005ec8 <HAL_SD_TxCpltCallback>
}
 8003b52:	e0ce      	b.n	8003cf2 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d008      	beq.n	8003b74 <HAL_SD_IRQHandler+0x17c>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 ffa7 	bl	8004ac0 <SD_Write_IT>
 8003b72:	e0be      	b.n	8003cf2 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b7a:	f240 233a 	movw	r3, #570	; 0x23a
 8003b7e:	4013      	ands	r3, r2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 80b6 	beq.w	8003cf2 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	f043 0202 	orr.w	r2, r3, #2
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	f043 0208 	orr.w	r2, r3, #8
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc0:	f003 0320 	and.w	r3, r3, #32
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	f043 0220 	orr.w	r2, r3, #32
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d005      	beq.n	8003bee <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be6:	f043 0210 	orr.w	r2, r3, #16
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c00:	f043 0208 	orr.w	r2, r3, #8
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f240 723a 	movw	r2, #1850	; 0x73a
 8003c10:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6812      	ldr	r2, [r2, #0]
 8003c1c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003c20:	f023 0302 	bic.w	r3, r3, #2
 8003c24:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f001 fcc2 	bl	80055b4 <SDMMC_CmdStopTransfer>
 8003c30:	4602      	mov	r2, r0
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f855 	bl	8003d04 <HAL_SD_ErrorCallback>
}
 8003c5a:	e04a      	b.n	8003cf2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d045      	beq.n	8003cf2 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d104      	bne.n	8003c7a <HAL_SD_IRQHandler+0x282>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d011      	beq.n	8003c9e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7e:	4a1f      	ldr	r2, [pc, #124]	; (8003cfc <HAL_SD_IRQHandler+0x304>)
 8003c80:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe fb96 	bl	80023b8 <HAL_DMA_Abort_IT>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d02f      	beq.n	8003cf2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 fb68 	bl	800436c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003c9c:	e029      	b.n	8003cf2 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d104      	bne.n	8003cb2 <HAL_SD_IRQHandler+0x2ba>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d011      	beq.n	8003cd6 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	4a12      	ldr	r2, [pc, #72]	; (8003d00 <HAL_SD_IRQHandler+0x308>)
 8003cb8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fe fb7a 	bl	80023b8 <HAL_DMA_Abort_IT>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d013      	beq.n	8003cf2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fb83 	bl	80043da <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003cd4:	e00d      	b.n	8003cf2 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f002 f8e2 	bl	8005eb4 <HAL_SD_AbortCallback>
}
 8003cf0:	e7ff      	b.n	8003cf2 <HAL_SD_IRQHandler+0x2fa>
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	0800436d 	.word	0x0800436d
 8003d00:	080043db 	.word	0x080043db

08003d04 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d26:	0f9b      	lsrs	r3, r3, #30
 8003d28:	b2da      	uxtb	r2, r3
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d32:	0e9b      	lsrs	r3, r3, #26
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d44:	0e1b      	lsrs	r3, r3, #24
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d56:	0c1b      	lsrs	r3, r3, #16
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d62:	0a1b      	lsrs	r3, r3, #8
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d78:	0d1b      	lsrs	r3, r3, #20
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d84:	0c1b      	lsrs	r3, r3, #16
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	f003 030f 	and.w	r3, r3, #15
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d96:	0bdb      	lsrs	r3, r3, #15
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003da8:	0b9b      	lsrs	r3, r3, #14
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dba:	0b5b      	lsrs	r3, r3, #13
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dcc:	0b1b      	lsrs	r3, r3, #12
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d163      	bne.n	8003eb0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dec:	009a      	lsls	r2, r3, #2
 8003dee:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003df2:	4013      	ands	r3, r2
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003df8:	0f92      	lsrs	r2, r2, #30
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e04:	0edb      	lsrs	r3, r3, #27
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e16:	0e1b      	lsrs	r3, r3, #24
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e28:	0d5b      	lsrs	r3, r3, #21
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e3a:	0c9b      	lsrs	r3, r3, #18
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e4c:	0bdb      	lsrs	r3, r3, #15
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	7e1b      	ldrb	r3, [r3, #24]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	3302      	adds	r3, #2
 8003e70:	2201      	movs	r2, #1
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003e7a:	fb02 f203 	mul.w	r2, r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	7a1b      	ldrb	r3, [r3, #8]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003e9c:	0a52      	lsrs	r2, r2, #9
 8003e9e:	fb02 f203 	mul.w	r2, r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eac:	661a      	str	r2, [r3, #96]	; 0x60
 8003eae:	e031      	b.n	8003f14 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d11d      	bne.n	8003ef4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ebc:	041b      	lsls	r3, r3, #16
 8003ebe:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ec6:	0c1b      	lsrs	r3, r3, #16
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	029a      	lsls	r2, r3, #10
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ee8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	661a      	str	r2, [r3, #96]	; 0x60
 8003ef2:	e00f      	b.n	8003f14 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a58      	ldr	r2, [pc, #352]	; (800405c <HAL_SD_GetCardCSD+0x344>)
 8003efa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e09d      	b.n	8004050 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f18:	0b9b      	lsrs	r3, r3, #14
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f2a:	09db      	lsrs	r3, r3, #7
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4c:	0fdb      	lsrs	r3, r3, #31
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f58:	0f5b      	lsrs	r3, r3, #29
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6a:	0e9b      	lsrs	r3, r3, #26
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	f003 0307 	and.w	r3, r3, #7
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7c:	0d9b      	lsrs	r3, r3, #22
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	f003 030f 	and.w	r3, r3, #15
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8e:	0d5b      	lsrs	r3, r3, #21
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003faa:	0c1b      	lsrs	r3, r3, #16
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbe:	0bdb      	lsrs	r3, r3, #15
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd2:	0b9b      	lsrs	r3, r3, #14
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe6:	0b5b      	lsrs	r3, r3, #13
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffa:	0b1b      	lsrs	r3, r3, #12
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	b2da      	uxtb	r2, r3
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400e:	0a9b      	lsrs	r3, r3, #10
 8004010:	b2db      	uxtb	r3, r3
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	b2da      	uxtb	r2, r3
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	0a1b      	lsrs	r3, r3, #8
 8004024:	b2db      	uxtb	r3, r3
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	b2da      	uxtb	r2, r3
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004036:	085b      	lsrs	r3, r3, #1
 8004038:	b2db      	uxtb	r3, r3
 800403a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800403e:	b2da      	uxtb	r2, r3
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	004005ff 	.word	0x004005ff

08004060 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80040b8:	b5b0      	push	{r4, r5, r7, lr}
 80040ba:	b08e      	sub	sp, #56	; 0x38
 80040bc:	af04      	add	r7, sp, #16
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2203      	movs	r2, #3
 80040cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d4:	2b03      	cmp	r3, #3
 80040d6:	d02e      	beq.n	8004136 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040de:	d106      	bne.n	80040ee <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	639a      	str	r2, [r3, #56]	; 0x38
 80040ec:	e029      	b.n	8004142 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040f4:	d10a      	bne.n	800410c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 fb28 	bl	800474c <SD_WideBus_Enable>
 80040fc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	431a      	orrs	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	639a      	str	r2, [r3, #56]	; 0x38
 800410a:	e01a      	b.n	8004142 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10a      	bne.n	8004128 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fb65 	bl	80047e2 <SD_WideBus_Disable>
 8004118:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	431a      	orrs	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	639a      	str	r2, [r3, #56]	; 0x38
 8004126:	e00c      	b.n	8004142 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	639a      	str	r2, [r3, #56]	; 0x38
 8004134:	e005      	b.n	8004142 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00b      	beq.n	8004162 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a26      	ldr	r2, [pc, #152]	; (80041e8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004150:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004160:	e01f      	b.n	80041a2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681d      	ldr	r5, [r3, #0]
 8004188:	466c      	mov	r4, sp
 800418a:	f107 0314 	add.w	r3, r7, #20
 800418e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004192:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004196:	f107 0308 	add.w	r3, r7, #8
 800419a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800419c:	4628      	mov	r0, r5
 800419e:	f001 f883 	bl	80052a8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80041aa:	4618      	mov	r0, r3
 80041ac:	f001 f958 	bl	8005460 <SDMMC_CmdBlockLength>
 80041b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00c      	beq.n	80041d2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a0a      	ldr	r2, [pc, #40]	; (80041e8 <HAL_SD_ConfigWideBusOperation+0x130>)
 80041be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80041da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3728      	adds	r7, #40	; 0x28
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bdb0      	pop	{r4, r5, r7, pc}
 80041e6:	bf00      	nop
 80041e8:	004005ff 	.word	0x004005ff

080041ec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80041f8:	f107 030c 	add.w	r3, r7, #12
 80041fc:	4619      	mov	r1, r3
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fa7c 	bl	80046fc <SD_SendStatus>
 8004204:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	0a5b      	lsrs	r3, r3, #9
 800421c:	f003 030f 	and.w	r3, r3, #15
 8004220:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004222:	693b      	ldr	r3, [r7, #16]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004238:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004248:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800424a:	bf00      	nop
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b084      	sub	sp, #16
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004268:	2b82      	cmp	r3, #130	; 0x82
 800426a:	d111      	bne.n	8004290 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f001 f99f 	bl	80055b4 <SDMMC_CmdStopTransfer>
 8004276:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	431a      	orrs	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f7ff fd3a 	bl	8003d04 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0208 	bic.w	r2, r2, #8
 800429e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f240 523a 	movw	r2, #1338	; 0x53a
 80042a8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f001 fe0f 	bl	8005edc <HAL_SD_RxCpltCallback>
#endif
}
 80042be:	bf00      	nop
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7fe fa1a 	bl	8002710 <HAL_DMA_GetError>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d03e      	beq.n	8004360 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d002      	beq.n	80042fe <SD_DMAError+0x36>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d12d      	bne.n	800435a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a19      	ldr	r2, [pc, #100]	; (8004368 <SD_DMAError+0xa0>)
 8004304:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004314:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004322:	6978      	ldr	r0, [r7, #20]
 8004324:	f7ff ff62 	bl	80041ec <HAL_SD_GetCardState>
 8004328:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b06      	cmp	r3, #6
 800432e:	d002      	beq.n	8004336 <SD_DMAError+0x6e>
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2b05      	cmp	r3, #5
 8004334:	d10a      	bne.n	800434c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f001 f93a 	bl	80055b4 <SDMMC_CmdStopTransfer>
 8004340:	4602      	mov	r2, r0
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004346:	431a      	orrs	r2, r3
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	2200      	movs	r2, #0
 8004358:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800435a:	6978      	ldr	r0, [r7, #20]
 800435c:	f7ff fcd2 	bl	8003d04 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004360:	bf00      	nop
 8004362:	3718      	adds	r7, #24
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	004005ff 	.word	0x004005ff

0800436c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004378:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004382:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f7ff ff31 	bl	80041ec <HAL_SD_GetCardState>
 800438a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2b06      	cmp	r3, #6
 800439e:	d002      	beq.n	80043a6 <SD_DMATxAbort+0x3a>
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b05      	cmp	r3, #5
 80043a4:	d10a      	bne.n	80043bc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f001 f902 	bl	80055b4 <SDMMC_CmdStopTransfer>
 80043b0:	4602      	mov	r2, r0
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b6:	431a      	orrs	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d103      	bne.n	80043cc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f001 fd75 	bl	8005eb4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80043ca:	e002      	b.n	80043d2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f7ff fc99 	bl	8003d04 <HAL_SD_ErrorCallback>
}
 80043d2:	bf00      	nop
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b084      	sub	sp, #16
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f240 523a 	movw	r2, #1338	; 0x53a
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f7ff fefa 	bl	80041ec <HAL_SD_GetCardState>
 80043f8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2b06      	cmp	r3, #6
 800440c:	d002      	beq.n	8004414 <SD_DMARxAbort+0x3a>
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b05      	cmp	r3, #5
 8004412:	d10a      	bne.n	800442a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f001 f8cb 	bl	80055b4 <SDMMC_CmdStopTransfer>
 800441e:	4602      	mov	r2, r0
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004424:	431a      	orrs	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442e:	2b00      	cmp	r3, #0
 8004430:	d103      	bne.n	800443a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f001 fd3e 	bl	8005eb4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004438:	e002      	b.n	8004440 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f7ff fc62 	bl	8003d04 <HAL_SD_ErrorCallback>
}
 8004440:	bf00      	nop
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004448:	b5b0      	push	{r4, r5, r7, lr}
 800444a:	b094      	sub	sp, #80	; 0x50
 800444c:	af04      	add	r7, sp, #16
 800444e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004450:	2301      	movs	r3, #1
 8004452:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	f000 ff7d 	bl	8005358 <SDIO_GetPowerState>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d102      	bne.n	800446a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004464:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004468:	e0b6      	b.n	80045d8 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446e:	2b03      	cmp	r3, #3
 8004470:	d02f      	beq.n	80044d2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f001 f9a6 	bl	80057c8 <SDMMC_CmdSendCID>
 800447c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800447e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <SD_InitCard+0x40>
    {
      return errorstate;
 8004484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004486:	e0a7      	b.n	80045d8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2100      	movs	r1, #0
 800448e:	4618      	mov	r0, r3
 8004490:	f000 ffa7 	bl	80053e2 <SDIO_GetResponse>
 8004494:	4602      	mov	r2, r0
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2104      	movs	r1, #4
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 ff9e 	bl	80053e2 <SDIO_GetResponse>
 80044a6:	4602      	mov	r2, r0
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2108      	movs	r1, #8
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 ff95 	bl	80053e2 <SDIO_GetResponse>
 80044b8:	4602      	mov	r2, r0
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	210c      	movs	r1, #12
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 ff8c 	bl	80053e2 <SDIO_GetResponse>
 80044ca:	4602      	mov	r2, r0
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d00d      	beq.n	80044f6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f107 020e 	add.w	r2, r7, #14
 80044e2:	4611      	mov	r1, r2
 80044e4:	4618      	mov	r0, r3
 80044e6:	f001 f9ac 	bl	8005842 <SDMMC_CmdSetRelAdd>
 80044ea:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80044ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <SD_InitCard+0xae>
    {
      return errorstate;
 80044f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044f4:	e070      	b.n	80045d8 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fa:	2b03      	cmp	r3, #3
 80044fc:	d036      	beq.n	800456c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80044fe:	89fb      	ldrh	r3, [r7, #14]
 8004500:	461a      	mov	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800450e:	041b      	lsls	r3, r3, #16
 8004510:	4619      	mov	r1, r3
 8004512:	4610      	mov	r0, r2
 8004514:	f001 f976 	bl	8005804 <SDMMC_CmdSendCSD>
 8004518:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800451a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004522:	e059      	b.n	80045d8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2100      	movs	r1, #0
 800452a:	4618      	mov	r0, r3
 800452c:	f000 ff59 	bl	80053e2 <SDIO_GetResponse>
 8004530:	4602      	mov	r2, r0
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2104      	movs	r1, #4
 800453c:	4618      	mov	r0, r3
 800453e:	f000 ff50 	bl	80053e2 <SDIO_GetResponse>
 8004542:	4602      	mov	r2, r0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2108      	movs	r1, #8
 800454e:	4618      	mov	r0, r3
 8004550:	f000 ff47 	bl	80053e2 <SDIO_GetResponse>
 8004554:	4602      	mov	r2, r0
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	210c      	movs	r1, #12
 8004560:	4618      	mov	r0, r3
 8004562:	f000 ff3e 	bl	80053e2 <SDIO_GetResponse>
 8004566:	4602      	mov	r2, r0
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2104      	movs	r1, #4
 8004572:	4618      	mov	r0, r3
 8004574:	f000 ff35 	bl	80053e2 <SDIO_GetResponse>
 8004578:	4603      	mov	r3, r0
 800457a:	0d1a      	lsrs	r2, r3, #20
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004580:	f107 0310 	add.w	r3, r7, #16
 8004584:	4619      	mov	r1, r3
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7ff fbc6 	bl	8003d18 <HAL_SD_GetCardCSD>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d002      	beq.n	8004598 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004592:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004596:	e01f      	b.n	80045d8 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6819      	ldr	r1, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a0:	041b      	lsls	r3, r3, #16
 80045a2:	461a      	mov	r2, r3
 80045a4:	f04f 0300 	mov.w	r3, #0
 80045a8:	4608      	mov	r0, r1
 80045aa:	f001 f825 	bl	80055f8 <SDMMC_CmdSelDesel>
 80045ae:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80045b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <SD_InitCard+0x172>
  {
    return errorstate;
 80045b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045b8:	e00e      	b.n	80045d8 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681d      	ldr	r5, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	466c      	mov	r4, sp
 80045c2:	f103 0210 	add.w	r2, r3, #16
 80045c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80045c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80045cc:	3304      	adds	r3, #4
 80045ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045d0:	4628      	mov	r0, r5
 80045d2:	f000 fe69 	bl	80052a8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3740      	adds	r7, #64	; 0x40
 80045dc:	46bd      	mov	sp, r7
 80045de:	bdb0      	pop	{r4, r5, r7, pc}

080045e0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	2300      	movs	r3, #0
 80045f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f001 f820 	bl	800563e <SDMMC_CmdGoIdleState>
 80045fe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <SD_PowerON+0x2a>
  {
    return errorstate;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	e072      	b.n	80046f0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f001 f833 	bl	800567a <SDMMC_CmdOperCond>
 8004614:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00d      	beq.n	8004638 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4618      	mov	r0, r3
 8004628:	f001 f809 	bl	800563e <SDMMC_CmdGoIdleState>
 800462c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d004      	beq.n	800463e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	e05b      	b.n	80046f0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004642:	2b01      	cmp	r3, #1
 8004644:	d137      	bne.n	80046b6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2100      	movs	r1, #0
 800464c:	4618      	mov	r0, r3
 800464e:	f001 f833 	bl	80056b8 <SDMMC_CmdAppCommand>
 8004652:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d02d      	beq.n	80046b6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800465a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800465e:	e047      	b.n	80046f0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2100      	movs	r1, #0
 8004666:	4618      	mov	r0, r3
 8004668:	f001 f826 	bl	80056b8 <SDMMC_CmdAppCommand>
 800466c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <SD_PowerON+0x98>
    {
      return errorstate;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	e03b      	b.n	80046f0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	491e      	ldr	r1, [pc, #120]	; (80046f8 <SD_PowerON+0x118>)
 800467e:	4618      	mov	r0, r3
 8004680:	f001 f83c 	bl	80056fc <SDMMC_CmdAppOperCommand>
 8004684:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800468c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004690:	e02e      	b.n	80046f0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2100      	movs	r1, #0
 8004698:	4618      	mov	r0, r3
 800469a:	f000 fea2 	bl	80053e2 <SDIO_GetResponse>
 800469e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	0fdb      	lsrs	r3, r3, #31
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d101      	bne.n	80046ac <SD_PowerON+0xcc>
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <SD_PowerON+0xce>
 80046ac:	2300      	movs	r3, #0
 80046ae:	613b      	str	r3, [r7, #16]

    count++;
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	3301      	adds	r3, #1
 80046b4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80046bc:	4293      	cmp	r3, r2
 80046be:	d802      	bhi.n	80046c6 <SD_PowerON+0xe6>
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0cc      	beq.n	8004660 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d902      	bls.n	80046d6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80046d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046d4:	e00c      	b.n	80046f0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	645a      	str	r2, [r3, #68]	; 0x44
 80046e6:	e002      	b.n	80046ee <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	c1100000 	.word	0xc1100000

080046fc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d102      	bne.n	8004712 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800470c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004710:	e018      	b.n	8004744 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471a:	041b      	lsls	r3, r3, #16
 800471c:	4619      	mov	r1, r3
 800471e:	4610      	mov	r0, r2
 8004720:	f001 f8b0 	bl	8005884 <SDMMC_CmdSendStatus>
 8004724:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <SD_SendStatus+0x34>
  {
    return errorstate;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	e009      	b.n	8004744 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2100      	movs	r1, #0
 8004736:	4618      	mov	r0, r3
 8004738:	f000 fe53 	bl	80053e2 <SDIO_GetResponse>
 800473c:	4602      	mov	r2, r0
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004754:	2300      	movs	r3, #0
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	2300      	movs	r3, #0
 800475a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2100      	movs	r1, #0
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fe3d 	bl	80053e2 <SDIO_GetResponse>
 8004768:	4603      	mov	r3, r0
 800476a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004772:	d102      	bne.n	800477a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004774:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004778:	e02f      	b.n	80047da <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800477a:	f107 030c 	add.w	r3, r7, #12
 800477e:	4619      	mov	r1, r3
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f879 	bl	8004878 <SD_FindSCR>
 8004786:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	e023      	b.n	80047da <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d01c      	beq.n	80047d6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a4:	041b      	lsls	r3, r3, #16
 80047a6:	4619      	mov	r1, r3
 80047a8:	4610      	mov	r0, r2
 80047aa:	f000 ff85 	bl	80056b8 <SDMMC_CmdAppCommand>
 80047ae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	e00f      	b.n	80047da <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2102      	movs	r1, #2
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 ffbe 	bl	8005742 <SDMMC_CmdBusWidth>
 80047c6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	e003      	b.n	80047da <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80047d2:	2300      	movs	r3, #0
 80047d4:	e001      	b.n	80047da <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80047d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b086      	sub	sp, #24
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80047ea:	2300      	movs	r3, #0
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	2300      	movs	r3, #0
 80047f0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2100      	movs	r1, #0
 80047f8:	4618      	mov	r0, r3
 80047fa:	f000 fdf2 	bl	80053e2 <SDIO_GetResponse>
 80047fe:	4603      	mov	r3, r0
 8004800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004804:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004808:	d102      	bne.n	8004810 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800480a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800480e:	e02f      	b.n	8004870 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004810:	f107 030c 	add.w	r3, r7, #12
 8004814:	4619      	mov	r1, r3
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f82e 	bl	8004878 <SD_FindSCR>
 800481c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	e023      	b.n	8004870 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d01c      	beq.n	800486c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800483a:	041b      	lsls	r3, r3, #16
 800483c:	4619      	mov	r1, r3
 800483e:	4610      	mov	r0, r2
 8004840:	f000 ff3a 	bl	80056b8 <SDMMC_CmdAppCommand>
 8004844:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d001      	beq.n	8004850 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	e00f      	b.n	8004870 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2100      	movs	r1, #0
 8004856:	4618      	mov	r0, r3
 8004858:	f000 ff73 	bl	8005742 <SDMMC_CmdBusWidth>
 800485c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	e003      	b.n	8004870 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004868:	2300      	movs	r3, #0
 800486a:	e001      	b.n	8004870 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800486c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004870:	4618      	mov	r0, r3
 8004872:	3718      	adds	r7, #24
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004878:	b590      	push	{r4, r7, lr}
 800487a:	b08f      	sub	sp, #60	; 0x3c
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004882:	f7fd fb51 	bl	8001f28 <HAL_GetTick>
 8004886:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800488c:	2300      	movs	r3, #0
 800488e:	60bb      	str	r3, [r7, #8]
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2108      	movs	r1, #8
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 fdde 	bl	8005460 <SDMMC_CmdBlockLength>
 80048a4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80048a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	e0b2      	b.n	8004a16 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b8:	041b      	lsls	r3, r3, #16
 80048ba:	4619      	mov	r1, r3
 80048bc:	4610      	mov	r0, r2
 80048be:	f000 fefb 	bl	80056b8 <SDMMC_CmdAppCommand>
 80048c2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80048c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <SD_FindSCR+0x56>
  {
    return errorstate;
 80048ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048cc:	e0a3      	b.n	8004a16 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80048ce:	f04f 33ff 	mov.w	r3, #4294967295
 80048d2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80048d4:	2308      	movs	r3, #8
 80048d6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80048d8:	2330      	movs	r3, #48	; 0x30
 80048da:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80048dc:	2302      	movs	r3, #2
 80048de:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80048e4:	2301      	movs	r3, #1
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f107 0210 	add.w	r2, r7, #16
 80048f0:	4611      	mov	r1, r2
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fd88 	bl	8005408 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 ff42 	bl	8005786 <SDMMC_CmdSendSCR>
 8004902:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004906:	2b00      	cmp	r3, #0
 8004908:	d02a      	beq.n	8004960 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490c:	e083      	b.n	8004a16 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00f      	beq.n	800493c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6819      	ldr	r1, [r3, #0]
 8004920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	f107 0208 	add.w	r2, r7, #8
 8004928:	18d4      	adds	r4, r2, r3
 800492a:	4608      	mov	r0, r1
 800492c:	f000 fce7 	bl	80052fe <SDIO_ReadFIFO>
 8004930:	4603      	mov	r3, r0
 8004932:	6023      	str	r3, [r4, #0]
      index++;
 8004934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004936:	3301      	adds	r3, #1
 8004938:	637b      	str	r3, [r7, #52]	; 0x34
 800493a:	e006      	b.n	800494a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004942:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d012      	beq.n	8004970 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800494a:	f7fd faed 	bl	8001f28 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004958:	d102      	bne.n	8004960 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800495a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800495e:	e05a      	b.n	8004a16 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004966:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0cf      	beq.n	800490e <SD_FindSCR+0x96>
 800496e:	e000      	b.n	8004972 <SD_FindSCR+0xfa>
      break;
 8004970:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004978:	f003 0308 	and.w	r3, r3, #8
 800497c:	2b00      	cmp	r3, #0
 800497e:	d005      	beq.n	800498c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2208      	movs	r2, #8
 8004986:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004988:	2308      	movs	r3, #8
 800498a:	e044      	b.n	8004a16 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d005      	beq.n	80049a6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2202      	movs	r2, #2
 80049a0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80049a2:	2302      	movs	r3, #2
 80049a4:	e037      	b.n	8004a16 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ac:	f003 0320 	and.w	r3, r3, #32
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d005      	beq.n	80049c0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2220      	movs	r2, #32
 80049ba:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80049bc:	2320      	movs	r3, #32
 80049be:	e02a      	b.n	8004a16 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f240 523a 	movw	r2, #1338	; 0x53a
 80049c8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	061a      	lsls	r2, r3, #24
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	021b      	lsls	r3, r3, #8
 80049d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80049d6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	0a1b      	lsrs	r3, r3, #8
 80049dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80049e0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	0e1b      	lsrs	r3, r3, #24
 80049e6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80049e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ea:	601a      	str	r2, [r3, #0]
    scr++;
 80049ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ee:	3304      	adds	r3, #4
 80049f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	061a      	lsls	r2, r3, #24
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	021b      	lsls	r3, r3, #8
 80049fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80049fe:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	0a1b      	lsrs	r3, r3, #8
 8004a04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004a08:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	0e1b      	lsrs	r3, r3, #24
 8004a0e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a12:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	373c      	adds	r7, #60	; 0x3c
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd90      	pop	{r4, r7, pc}

08004a1e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b086      	sub	sp, #24
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d03f      	beq.n	8004ab8 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004a38:	2300      	movs	r3, #0
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	e033      	b.n	8004aa6 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fc5b 	bl	80052fe <SDIO_ReadFIFO>
 8004a48:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	3301      	adds	r3, #1
 8004a56:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	0a1b      	lsrs	r3, r3, #8
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	3b01      	subs	r3, #1
 8004a72:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	0c1b      	lsrs	r3, r3, #16
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3301      	adds	r3, #1
 8004a82:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	0e1b      	lsrs	r3, r3, #24
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	3301      	adds	r3, #1
 8004a98:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	617b      	str	r3, [r7, #20]
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b07      	cmp	r3, #7
 8004aaa:	d9c8      	bls.n	8004a3e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004ab8:	bf00      	nop
 8004aba:	3718      	adds	r7, #24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d043      	beq.n	8004b62 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004ada:	2300      	movs	r3, #0
 8004adc:	617b      	str	r3, [r7, #20]
 8004ade:	e037      	b.n	8004b50 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	3b01      	subs	r3, #1
 8004af0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	021a      	lsls	r2, r3, #8
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3301      	adds	r3, #1
 8004b02:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	041a      	lsls	r2, r3, #16
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	061a      	lsls	r2, r3, #24
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	3301      	adds	r3, #1
 8004b32:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f107 0208 	add.w	r2, r7, #8
 8004b42:	4611      	mov	r1, r2
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fbe7 	bl	8005318 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	2b07      	cmp	r3, #7
 8004b54:	d9c4      	bls.n	8004ae0 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004b62:	bf00      	nop
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b082      	sub	sp, #8
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e07b      	b.n	8004c74 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d108      	bne.n	8004b96 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b8c:	d009      	beq.n	8004ba2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	61da      	str	r2, [r3, #28]
 8004b94:	e005      	b.n	8004ba2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d106      	bne.n	8004bc2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7fc ffb1 	bl	8001b24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bd8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c26:	ea42 0103 	orr.w	r1, r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	0c1b      	lsrs	r3, r3, #16
 8004c40:	f003 0104 	and.w	r1, r3, #4
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	f003 0210 	and.w	r2, r3, #16
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	69da      	ldr	r2, [r3, #28]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e03f      	b.n	8004d0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fd f868 	bl	8001d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2224      	movs	r2, #36	; 0x24
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f929 	bl	8004f18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695a      	ldr	r2, [r3, #20]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ce4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b08a      	sub	sp, #40	; 0x28
 8004d1a:	af02      	add	r7, sp, #8
 8004d1c:	60f8      	str	r0, [r7, #12]
 8004d1e:	60b9      	str	r1, [r7, #8]
 8004d20:	603b      	str	r3, [r7, #0]
 8004d22:	4613      	mov	r3, r2
 8004d24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b20      	cmp	r3, #32
 8004d34:	d17c      	bne.n	8004e30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <HAL_UART_Transmit+0x2c>
 8004d3c:	88fb      	ldrh	r3, [r7, #6]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e075      	b.n	8004e32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <HAL_UART_Transmit+0x3e>
 8004d50:	2302      	movs	r3, #2
 8004d52:	e06e      	b.n	8004e32 <HAL_UART_Transmit+0x11c>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2221      	movs	r2, #33	; 0x21
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d6a:	f7fd f8dd 	bl	8001f28 <HAL_GetTick>
 8004d6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	88fa      	ldrh	r2, [r7, #6]
 8004d74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	88fa      	ldrh	r2, [r7, #6]
 8004d7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d84:	d108      	bne.n	8004d98 <HAL_UART_Transmit+0x82>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d104      	bne.n	8004d98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	61bb      	str	r3, [r7, #24]
 8004d96:	e003      	b.n	8004da0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004da8:	e02a      	b.n	8004e00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2200      	movs	r2, #0
 8004db2:	2180      	movs	r1, #128	; 0x80
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 f840 	bl	8004e3a <UART_WaitOnFlagUntilTimeout>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e036      	b.n	8004e32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10b      	bne.n	8004de2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	3302      	adds	r3, #2
 8004dde:	61bb      	str	r3, [r7, #24]
 8004de0:	e007      	b.n	8004df2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	781a      	ldrb	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	3301      	adds	r3, #1
 8004df0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1cf      	bne.n	8004daa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2200      	movs	r2, #0
 8004e12:	2140      	movs	r1, #64	; 0x40
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 f810 	bl	8004e3a <UART_WaitOnFlagUntilTimeout>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e006      	b.n	8004e32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	e000      	b.n	8004e32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e30:	2302      	movs	r3, #2
  }
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3720      	adds	r7, #32
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b090      	sub	sp, #64	; 0x40
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	60f8      	str	r0, [r7, #12]
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	603b      	str	r3, [r7, #0]
 8004e46:	4613      	mov	r3, r2
 8004e48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e4a:	e050      	b.n	8004eee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e52:	d04c      	beq.n	8004eee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d007      	beq.n	8004e6a <UART_WaitOnFlagUntilTimeout+0x30>
 8004e5a:	f7fd f865 	bl	8001f28 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d241      	bcs.n	8004eee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	330c      	adds	r3, #12
 8004e70:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e74:	e853 3f00 	ldrex	r3, [r3]
 8004e78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	330c      	adds	r3, #12
 8004e88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e8a:	637a      	str	r2, [r7, #52]	; 0x34
 8004e8c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e92:	e841 2300 	strex	r3, r2, [r1]
 8004e96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1e5      	bne.n	8004e6a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3314      	adds	r3, #20
 8004ea4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	e853 3f00 	ldrex	r3, [r3]
 8004eac:	613b      	str	r3, [r7, #16]
   return(result);
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f023 0301 	bic.w	r3, r3, #1
 8004eb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3314      	adds	r3, #20
 8004ebc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ebe:	623a      	str	r2, [r7, #32]
 8004ec0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec2:	69f9      	ldr	r1, [r7, #28]
 8004ec4:	6a3a      	ldr	r2, [r7, #32]
 8004ec6:	e841 2300 	strex	r3, r2, [r1]
 8004eca:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1e5      	bne.n	8004e9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2220      	movs	r2, #32
 8004ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e00f      	b.n	8004f0e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	bf0c      	ite	eq
 8004efe:	2301      	moveq	r3, #1
 8004f00:	2300      	movne	r3, #0
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	461a      	mov	r2, r3
 8004f06:	79fb      	ldrb	r3, [r7, #7]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d09f      	beq.n	8004e4c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3740      	adds	r7, #64	; 0x40
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
	...

08004f18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f1c:	b09f      	sub	sp, #124	; 0x7c
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f2e:	68d9      	ldr	r1, [r3, #12]
 8004f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	ea40 0301 	orr.w	r3, r0, r1
 8004f38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	431a      	orrs	r2, r3
 8004f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f5c:	f021 010c 	bic.w	r1, r1, #12
 8004f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f66:	430b      	orrs	r3, r1
 8004f68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f76:	6999      	ldr	r1, [r3, #24]
 8004f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	ea40 0301 	orr.w	r3, r0, r1
 8004f80:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	4bc5      	ldr	r3, [pc, #788]	; (800529c <UART_SetConfig+0x384>)
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d004      	beq.n	8004f96 <UART_SetConfig+0x7e>
 8004f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	4bc3      	ldr	r3, [pc, #780]	; (80052a0 <UART_SetConfig+0x388>)
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d103      	bne.n	8004f9e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f96:	f7fe faa5 	bl	80034e4 <HAL_RCC_GetPCLK2Freq>
 8004f9a:	6778      	str	r0, [r7, #116]	; 0x74
 8004f9c:	e002      	b.n	8004fa4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f9e:	f7fe fa8d 	bl	80034bc <HAL_RCC_GetPCLK1Freq>
 8004fa2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fac:	f040 80b6 	bne.w	800511c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fb2:	461c      	mov	r4, r3
 8004fb4:	f04f 0500 	mov.w	r5, #0
 8004fb8:	4622      	mov	r2, r4
 8004fba:	462b      	mov	r3, r5
 8004fbc:	1891      	adds	r1, r2, r2
 8004fbe:	6439      	str	r1, [r7, #64]	; 0x40
 8004fc0:	415b      	adcs	r3, r3
 8004fc2:	647b      	str	r3, [r7, #68]	; 0x44
 8004fc4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004fc8:	1912      	adds	r2, r2, r4
 8004fca:	eb45 0303 	adc.w	r3, r5, r3
 8004fce:	f04f 0000 	mov.w	r0, #0
 8004fd2:	f04f 0100 	mov.w	r1, #0
 8004fd6:	00d9      	lsls	r1, r3, #3
 8004fd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fdc:	00d0      	lsls	r0, r2, #3
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	1911      	adds	r1, r2, r4
 8004fe4:	6639      	str	r1, [r7, #96]	; 0x60
 8004fe6:	416b      	adcs	r3, r5
 8004fe8:	667b      	str	r3, [r7, #100]	; 0x64
 8004fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	1891      	adds	r1, r2, r2
 8004ff6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ff8:	415b      	adcs	r3, r3
 8004ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ffc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005000:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005004:	f7fb fd5a 	bl	8000abc <__aeabi_uldivmod>
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	4ba5      	ldr	r3, [pc, #660]	; (80052a4 <UART_SetConfig+0x38c>)
 800500e:	fba3 2302 	umull	r2, r3, r3, r2
 8005012:	095b      	lsrs	r3, r3, #5
 8005014:	011e      	lsls	r6, r3, #4
 8005016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005018:	461c      	mov	r4, r3
 800501a:	f04f 0500 	mov.w	r5, #0
 800501e:	4622      	mov	r2, r4
 8005020:	462b      	mov	r3, r5
 8005022:	1891      	adds	r1, r2, r2
 8005024:	6339      	str	r1, [r7, #48]	; 0x30
 8005026:	415b      	adcs	r3, r3
 8005028:	637b      	str	r3, [r7, #52]	; 0x34
 800502a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800502e:	1912      	adds	r2, r2, r4
 8005030:	eb45 0303 	adc.w	r3, r5, r3
 8005034:	f04f 0000 	mov.w	r0, #0
 8005038:	f04f 0100 	mov.w	r1, #0
 800503c:	00d9      	lsls	r1, r3, #3
 800503e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005042:	00d0      	lsls	r0, r2, #3
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	1911      	adds	r1, r2, r4
 800504a:	65b9      	str	r1, [r7, #88]	; 0x58
 800504c:	416b      	adcs	r3, r5
 800504e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	461a      	mov	r2, r3
 8005056:	f04f 0300 	mov.w	r3, #0
 800505a:	1891      	adds	r1, r2, r2
 800505c:	62b9      	str	r1, [r7, #40]	; 0x28
 800505e:	415b      	adcs	r3, r3
 8005060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005062:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005066:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800506a:	f7fb fd27 	bl	8000abc <__aeabi_uldivmod>
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	4b8c      	ldr	r3, [pc, #560]	; (80052a4 <UART_SetConfig+0x38c>)
 8005074:	fba3 1302 	umull	r1, r3, r3, r2
 8005078:	095b      	lsrs	r3, r3, #5
 800507a:	2164      	movs	r1, #100	; 0x64
 800507c:	fb01 f303 	mul.w	r3, r1, r3
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	3332      	adds	r3, #50	; 0x32
 8005086:	4a87      	ldr	r2, [pc, #540]	; (80052a4 <UART_SetConfig+0x38c>)
 8005088:	fba2 2303 	umull	r2, r3, r2, r3
 800508c:	095b      	lsrs	r3, r3, #5
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005094:	441e      	add	r6, r3
 8005096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005098:	4618      	mov	r0, r3
 800509a:	f04f 0100 	mov.w	r1, #0
 800509e:	4602      	mov	r2, r0
 80050a0:	460b      	mov	r3, r1
 80050a2:	1894      	adds	r4, r2, r2
 80050a4:	623c      	str	r4, [r7, #32]
 80050a6:	415b      	adcs	r3, r3
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
 80050aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050ae:	1812      	adds	r2, r2, r0
 80050b0:	eb41 0303 	adc.w	r3, r1, r3
 80050b4:	f04f 0400 	mov.w	r4, #0
 80050b8:	f04f 0500 	mov.w	r5, #0
 80050bc:	00dd      	lsls	r5, r3, #3
 80050be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80050c2:	00d4      	lsls	r4, r2, #3
 80050c4:	4622      	mov	r2, r4
 80050c6:	462b      	mov	r3, r5
 80050c8:	1814      	adds	r4, r2, r0
 80050ca:	653c      	str	r4, [r7, #80]	; 0x50
 80050cc:	414b      	adcs	r3, r1
 80050ce:	657b      	str	r3, [r7, #84]	; 0x54
 80050d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	461a      	mov	r2, r3
 80050d6:	f04f 0300 	mov.w	r3, #0
 80050da:	1891      	adds	r1, r2, r2
 80050dc:	61b9      	str	r1, [r7, #24]
 80050de:	415b      	adcs	r3, r3
 80050e0:	61fb      	str	r3, [r7, #28]
 80050e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80050ea:	f7fb fce7 	bl	8000abc <__aeabi_uldivmod>
 80050ee:	4602      	mov	r2, r0
 80050f0:	460b      	mov	r3, r1
 80050f2:	4b6c      	ldr	r3, [pc, #432]	; (80052a4 <UART_SetConfig+0x38c>)
 80050f4:	fba3 1302 	umull	r1, r3, r3, r2
 80050f8:	095b      	lsrs	r3, r3, #5
 80050fa:	2164      	movs	r1, #100	; 0x64
 80050fc:	fb01 f303 	mul.w	r3, r1, r3
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	3332      	adds	r3, #50	; 0x32
 8005106:	4a67      	ldr	r2, [pc, #412]	; (80052a4 <UART_SetConfig+0x38c>)
 8005108:	fba2 2303 	umull	r2, r3, r2, r3
 800510c:	095b      	lsrs	r3, r3, #5
 800510e:	f003 0207 	and.w	r2, r3, #7
 8005112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4432      	add	r2, r6
 8005118:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800511a:	e0b9      	b.n	8005290 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800511c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800511e:	461c      	mov	r4, r3
 8005120:	f04f 0500 	mov.w	r5, #0
 8005124:	4622      	mov	r2, r4
 8005126:	462b      	mov	r3, r5
 8005128:	1891      	adds	r1, r2, r2
 800512a:	6139      	str	r1, [r7, #16]
 800512c:	415b      	adcs	r3, r3
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005134:	1912      	adds	r2, r2, r4
 8005136:	eb45 0303 	adc.w	r3, r5, r3
 800513a:	f04f 0000 	mov.w	r0, #0
 800513e:	f04f 0100 	mov.w	r1, #0
 8005142:	00d9      	lsls	r1, r3, #3
 8005144:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005148:	00d0      	lsls	r0, r2, #3
 800514a:	4602      	mov	r2, r0
 800514c:	460b      	mov	r3, r1
 800514e:	eb12 0804 	adds.w	r8, r2, r4
 8005152:	eb43 0905 	adc.w	r9, r3, r5
 8005156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	4618      	mov	r0, r3
 800515c:	f04f 0100 	mov.w	r1, #0
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	008b      	lsls	r3, r1, #2
 800516a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800516e:	0082      	lsls	r2, r0, #2
 8005170:	4640      	mov	r0, r8
 8005172:	4649      	mov	r1, r9
 8005174:	f7fb fca2 	bl	8000abc <__aeabi_uldivmod>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4b49      	ldr	r3, [pc, #292]	; (80052a4 <UART_SetConfig+0x38c>)
 800517e:	fba3 2302 	umull	r2, r3, r3, r2
 8005182:	095b      	lsrs	r3, r3, #5
 8005184:	011e      	lsls	r6, r3, #4
 8005186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005188:	4618      	mov	r0, r3
 800518a:	f04f 0100 	mov.w	r1, #0
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	1894      	adds	r4, r2, r2
 8005194:	60bc      	str	r4, [r7, #8]
 8005196:	415b      	adcs	r3, r3
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800519e:	1812      	adds	r2, r2, r0
 80051a0:	eb41 0303 	adc.w	r3, r1, r3
 80051a4:	f04f 0400 	mov.w	r4, #0
 80051a8:	f04f 0500 	mov.w	r5, #0
 80051ac:	00dd      	lsls	r5, r3, #3
 80051ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80051b2:	00d4      	lsls	r4, r2, #3
 80051b4:	4622      	mov	r2, r4
 80051b6:	462b      	mov	r3, r5
 80051b8:	1814      	adds	r4, r2, r0
 80051ba:	64bc      	str	r4, [r7, #72]	; 0x48
 80051bc:	414b      	adcs	r3, r1
 80051be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f04f 0100 	mov.w	r1, #0
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	f04f 0300 	mov.w	r3, #0
 80051d2:	008b      	lsls	r3, r1, #2
 80051d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80051d8:	0082      	lsls	r2, r0, #2
 80051da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80051de:	f7fb fc6d 	bl	8000abc <__aeabi_uldivmod>
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	4b2f      	ldr	r3, [pc, #188]	; (80052a4 <UART_SetConfig+0x38c>)
 80051e8:	fba3 1302 	umull	r1, r3, r3, r2
 80051ec:	095b      	lsrs	r3, r3, #5
 80051ee:	2164      	movs	r1, #100	; 0x64
 80051f0:	fb01 f303 	mul.w	r3, r1, r3
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	011b      	lsls	r3, r3, #4
 80051f8:	3332      	adds	r3, #50	; 0x32
 80051fa:	4a2a      	ldr	r2, [pc, #168]	; (80052a4 <UART_SetConfig+0x38c>)
 80051fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005200:	095b      	lsrs	r3, r3, #5
 8005202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005206:	441e      	add	r6, r3
 8005208:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800520a:	4618      	mov	r0, r3
 800520c:	f04f 0100 	mov.w	r1, #0
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	1894      	adds	r4, r2, r2
 8005216:	603c      	str	r4, [r7, #0]
 8005218:	415b      	adcs	r3, r3
 800521a:	607b      	str	r3, [r7, #4]
 800521c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005220:	1812      	adds	r2, r2, r0
 8005222:	eb41 0303 	adc.w	r3, r1, r3
 8005226:	f04f 0400 	mov.w	r4, #0
 800522a:	f04f 0500 	mov.w	r5, #0
 800522e:	00dd      	lsls	r5, r3, #3
 8005230:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005234:	00d4      	lsls	r4, r2, #3
 8005236:	4622      	mov	r2, r4
 8005238:	462b      	mov	r3, r5
 800523a:	eb12 0a00 	adds.w	sl, r2, r0
 800523e:	eb43 0b01 	adc.w	fp, r3, r1
 8005242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	4618      	mov	r0, r3
 8005248:	f04f 0100 	mov.w	r1, #0
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	f04f 0300 	mov.w	r3, #0
 8005254:	008b      	lsls	r3, r1, #2
 8005256:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800525a:	0082      	lsls	r2, r0, #2
 800525c:	4650      	mov	r0, sl
 800525e:	4659      	mov	r1, fp
 8005260:	f7fb fc2c 	bl	8000abc <__aeabi_uldivmod>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	4b0e      	ldr	r3, [pc, #56]	; (80052a4 <UART_SetConfig+0x38c>)
 800526a:	fba3 1302 	umull	r1, r3, r3, r2
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	2164      	movs	r1, #100	; 0x64
 8005272:	fb01 f303 	mul.w	r3, r1, r3
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	3332      	adds	r3, #50	; 0x32
 800527c:	4a09      	ldr	r2, [pc, #36]	; (80052a4 <UART_SetConfig+0x38c>)
 800527e:	fba2 2303 	umull	r2, r3, r2, r3
 8005282:	095b      	lsrs	r3, r3, #5
 8005284:	f003 020f 	and.w	r2, r3, #15
 8005288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4432      	add	r2, r6
 800528e:	609a      	str	r2, [r3, #8]
}
 8005290:	bf00      	nop
 8005292:	377c      	adds	r7, #124	; 0x7c
 8005294:	46bd      	mov	sp, r7
 8005296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800529a:	bf00      	nop
 800529c:	40011000 	.word	0x40011000
 80052a0:	40011400 	.word	0x40011400
 80052a4:	51eb851f 	.word	0x51eb851f

080052a8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80052a8:	b084      	sub	sp, #16
 80052aa:	b480      	push	{r7}
 80052ac:	b085      	sub	sp, #20
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	f107 001c 	add.w	r0, r7, #28
 80052b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80052ba:	2300      	movs	r3, #0
 80052bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80052be:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80052c0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80052c2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80052c6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80052c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80052ca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80052cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80052ce:	431a      	orrs	r2, r3
             Init.ClockDiv
 80052d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80052d2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80052e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	431a      	orrs	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	b004      	add	sp, #16
 80052fc:	4770      	bx	lr

080052fe <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800530c:	4618      	mov	r0, r3
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800533a:	b580      	push	{r7, lr}
 800533c:	b082      	sub	sp, #8
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2203      	movs	r2, #3
 8005346:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005348:	2002      	movs	r0, #2
 800534a:	f7fc fdf9 	bl	8001f40 <HAL_Delay>
  
  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0303 	and.w	r3, r3, #3
}
 8005368:	4618      	mov	r0, r3
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800537e:	2300      	movs	r3, #0
 8005380:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005392:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005398:	431a      	orrs	r2, r3
                       Command->CPSM);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800539e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80053ae:	f023 030f 	bic.w	r3, r3, #15
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	431a      	orrs	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	b2db      	uxtb	r3, r3
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b085      	sub	sp, #20
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3314      	adds	r3, #20
 80053f0:	461a      	mov	r2, r3
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	4413      	add	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
}  
 80053fc:	4618      	mov	r0, r3
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005412:	2300      	movs	r3, #0
 8005414:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800542e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005434:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800543a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005446:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	431a      	orrs	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005452:	2300      	movs	r3, #0

}
 8005454:	4618      	mov	r0, r3
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800546e:	2310      	movs	r3, #16
 8005470:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005472:	2340      	movs	r3, #64	; 0x40
 8005474:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005476:	2300      	movs	r3, #0
 8005478:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800547a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800547e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005480:	f107 0308 	add.w	r3, r7, #8
 8005484:	4619      	mov	r1, r3
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7ff ff74 	bl	8005374 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800548c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005490:	2110      	movs	r1, #16
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fa44 	bl	8005920 <SDMMC_GetCmdResp1>
 8005498:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800549a:	69fb      	ldr	r3, [r7, #28]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3720      	adds	r7, #32
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80054b2:	2311      	movs	r3, #17
 80054b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054b6:	2340      	movs	r3, #64	; 0x40
 80054b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054ba:	2300      	movs	r3, #0
 80054bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054c4:	f107 0308 	add.w	r3, r7, #8
 80054c8:	4619      	mov	r1, r3
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff ff52 	bl	8005374 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80054d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d4:	2111      	movs	r1, #17
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fa22 	bl	8005920 <SDMMC_GetCmdResp1>
 80054dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054de:	69fb      	ldr	r3, [r7, #28]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3720      	adds	r7, #32
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b088      	sub	sp, #32
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80054f6:	2312      	movs	r3, #18
 80054f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054fa:	2340      	movs	r3, #64	; 0x40
 80054fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054fe:	2300      	movs	r3, #0
 8005500:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005506:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005508:	f107 0308 	add.w	r3, r7, #8
 800550c:	4619      	mov	r1, r3
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff ff30 	bl	8005374 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005514:	f241 3288 	movw	r2, #5000	; 0x1388
 8005518:	2112      	movs	r1, #18
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fa00 	bl	8005920 <SDMMC_GetCmdResp1>
 8005520:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005522:	69fb      	ldr	r3, [r7, #28]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3720      	adds	r7, #32
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b088      	sub	sp, #32
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800553a:	2318      	movs	r3, #24
 800553c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800553e:	2340      	movs	r3, #64	; 0x40
 8005540:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005542:	2300      	movs	r3, #0
 8005544:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800554a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800554c:	f107 0308 	add.w	r3, r7, #8
 8005550:	4619      	mov	r1, r3
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7ff ff0e 	bl	8005374 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005558:	f241 3288 	movw	r2, #5000	; 0x1388
 800555c:	2118      	movs	r1, #24
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f9de 	bl	8005920 <SDMMC_GetCmdResp1>
 8005564:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005566:	69fb      	ldr	r3, [r7, #28]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3720      	adds	r7, #32
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b088      	sub	sp, #32
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800557e:	2319      	movs	r3, #25
 8005580:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005582:	2340      	movs	r3, #64	; 0x40
 8005584:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005586:	2300      	movs	r3, #0
 8005588:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800558a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800558e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005590:	f107 0308 	add.w	r3, r7, #8
 8005594:	4619      	mov	r1, r3
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7ff feec 	bl	8005374 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800559c:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a0:	2119      	movs	r1, #25
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f9bc 	bl	8005920 <SDMMC_GetCmdResp1>
 80055a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055aa:	69fb      	ldr	r3, [r7, #28]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3720      	adds	r7, #32
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b088      	sub	sp, #32
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80055c0:	230c      	movs	r3, #12
 80055c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055c4:	2340      	movs	r3, #64	; 0x40
 80055c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055d2:	f107 0308 	add.w	r3, r7, #8
 80055d6:	4619      	mov	r1, r3
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7ff fecb 	bl	8005374 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80055de:	4a05      	ldr	r2, [pc, #20]	; (80055f4 <SDMMC_CmdStopTransfer+0x40>)
 80055e0:	210c      	movs	r1, #12
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f99c 	bl	8005920 <SDMMC_GetCmdResp1>
 80055e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055ea:	69fb      	ldr	r3, [r7, #28]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3720      	adds	r7, #32
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	05f5e100 	.word	0x05f5e100

080055f8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08a      	sub	sp, #40	; 0x28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005608:	2307      	movs	r3, #7
 800560a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800560c:	2340      	movs	r3, #64	; 0x40
 800560e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005610:	2300      	movs	r3, #0
 8005612:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005618:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800561a:	f107 0310 	add.w	r3, r7, #16
 800561e:	4619      	mov	r1, r3
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f7ff fea7 	bl	8005374 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005626:	f241 3288 	movw	r2, #5000	; 0x1388
 800562a:	2107      	movs	r1, #7
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 f977 	bl	8005920 <SDMMC_GetCmdResp1>
 8005632:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005636:	4618      	mov	r0, r3
 8005638:	3728      	adds	r7, #40	; 0x28
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b088      	sub	sp, #32
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005646:	2300      	movs	r3, #0
 8005648:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800564e:	2300      	movs	r3, #0
 8005650:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800565a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800565c:	f107 0308 	add.w	r3, r7, #8
 8005660:	4619      	mov	r1, r3
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7ff fe86 	bl	8005374 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f92d 	bl	80058c8 <SDMMC_GetCmdError>
 800566e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005670:	69fb      	ldr	r3, [r7, #28]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3720      	adds	r7, #32
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b088      	sub	sp, #32
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005682:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005686:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005688:	2308      	movs	r3, #8
 800568a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800568c:	2340      	movs	r3, #64	; 0x40
 800568e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005690:	2300      	movs	r3, #0
 8005692:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005698:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800569a:	f107 0308 	add.w	r3, r7, #8
 800569e:	4619      	mov	r1, r3
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7ff fe67 	bl	8005374 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fb24 	bl	8005cf4 <SDMMC_GetCmdResp7>
 80056ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056ae:	69fb      	ldr	r3, [r7, #28]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3720      	adds	r7, #32
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b088      	sub	sp, #32
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80056c6:	2337      	movs	r3, #55	; 0x37
 80056c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056ca:	2340      	movs	r3, #64	; 0x40
 80056cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056ce:	2300      	movs	r3, #0
 80056d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056d8:	f107 0308 	add.w	r3, r7, #8
 80056dc:	4619      	mov	r1, r3
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7ff fe48 	bl	8005374 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80056e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e8:	2137      	movs	r1, #55	; 0x37
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f918 	bl	8005920 <SDMMC_GetCmdResp1>
 80056f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056f2:	69fb      	ldr	r3, [r7, #28]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3720      	adds	r7, #32
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b088      	sub	sp, #32
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800570c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005710:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005712:	2329      	movs	r3, #41	; 0x29
 8005714:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005716:	2340      	movs	r3, #64	; 0x40
 8005718:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800571a:	2300      	movs	r3, #0
 800571c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800571e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005722:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005724:	f107 0308 	add.w	r3, r7, #8
 8005728:	4619      	mov	r1, r3
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7ff fe22 	bl	8005374 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fa2b 	bl	8005b8c <SDMMC_GetCmdResp3>
 8005736:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005738:	69fb      	ldr	r3, [r7, #28]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3720      	adds	r7, #32
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b088      	sub	sp, #32
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
 800574a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005750:	2306      	movs	r3, #6
 8005752:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005754:	2340      	movs	r3, #64	; 0x40
 8005756:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005758:	2300      	movs	r3, #0
 800575a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800575c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005760:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005762:	f107 0308 	add.w	r3, r7, #8
 8005766:	4619      	mov	r1, r3
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7ff fe03 	bl	8005374 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800576e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005772:	2106      	movs	r1, #6
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f8d3 	bl	8005920 <SDMMC_GetCmdResp1>
 800577a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800577c:	69fb      	ldr	r3, [r7, #28]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3720      	adds	r7, #32
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b088      	sub	sp, #32
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005792:	2333      	movs	r3, #51	; 0x33
 8005794:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005796:	2340      	movs	r3, #64	; 0x40
 8005798:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800579e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057a4:	f107 0308 	add.w	r3, r7, #8
 80057a8:	4619      	mov	r1, r3
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7ff fde2 	bl	8005374 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80057b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b4:	2133      	movs	r1, #51	; 0x33
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f8b2 	bl	8005920 <SDMMC_GetCmdResp1>
 80057bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057be:	69fb      	ldr	r3, [r7, #28]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3720      	adds	r7, #32
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b088      	sub	sp, #32
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80057d4:	2302      	movs	r3, #2
 80057d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80057d8:	23c0      	movs	r3, #192	; 0xc0
 80057da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057dc:	2300      	movs	r3, #0
 80057de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057e6:	f107 0308 	add.w	r3, r7, #8
 80057ea:	4619      	mov	r1, r3
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f7ff fdc1 	bl	8005374 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f982 	bl	8005afc <SDMMC_GetCmdResp2>
 80057f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057fa:	69fb      	ldr	r3, [r7, #28]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3720      	adds	r7, #32
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b088      	sub	sp, #32
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005812:	2309      	movs	r3, #9
 8005814:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005816:	23c0      	movs	r3, #192	; 0xc0
 8005818:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800581a:	2300      	movs	r3, #0
 800581c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800581e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005822:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005824:	f107 0308 	add.w	r3, r7, #8
 8005828:	4619      	mov	r1, r3
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7ff fda2 	bl	8005374 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f963 	bl	8005afc <SDMMC_GetCmdResp2>
 8005836:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005838:	69fb      	ldr	r3, [r7, #28]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3720      	adds	r7, #32
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b088      	sub	sp, #32
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
 800584a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005850:	2303      	movs	r3, #3
 8005852:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005854:	2340      	movs	r3, #64	; 0x40
 8005856:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005858:	2300      	movs	r3, #0
 800585a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800585c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005860:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005862:	f107 0308 	add.w	r3, r7, #8
 8005866:	4619      	mov	r1, r3
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7ff fd83 	bl	8005374 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	2103      	movs	r1, #3
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f9c8 	bl	8005c08 <SDMMC_GetCmdResp6>
 8005878:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800587a:	69fb      	ldr	r3, [r7, #28]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3720      	adds	r7, #32
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b088      	sub	sp, #32
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005892:	230d      	movs	r3, #13
 8005894:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005896:	2340      	movs	r3, #64	; 0x40
 8005898:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800589a:	2300      	movs	r3, #0
 800589c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800589e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058a4:	f107 0308 	add.w	r3, r7, #8
 80058a8:	4619      	mov	r1, r3
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7ff fd62 	bl	8005374 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80058b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b4:	210d      	movs	r1, #13
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f832 	bl	8005920 <SDMMC_GetCmdResp1>
 80058bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058be:	69fb      	ldr	r3, [r7, #28]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3720      	adds	r7, #32
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80058d0:	4b11      	ldr	r3, [pc, #68]	; (8005918 <SDMMC_GetCmdError+0x50>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a11      	ldr	r2, [pc, #68]	; (800591c <SDMMC_GetCmdError+0x54>)
 80058d6:	fba2 2303 	umull	r2, r3, r2, r3
 80058da:	0a5b      	lsrs	r3, r3, #9
 80058dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e0:	fb02 f303 	mul.w	r3, r2, r3
 80058e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	1e5a      	subs	r2, r3, #1
 80058ea:	60fa      	str	r2, [r7, #12]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d102      	bne.n	80058f6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80058f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058f4:	e009      	b.n	800590a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d0f1      	beq.n	80058e6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	22c5      	movs	r2, #197	; 0xc5
 8005906:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	20000000 	.word	0x20000000
 800591c:	10624dd3 	.word	0x10624dd3

08005920 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b088      	sub	sp, #32
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	460b      	mov	r3, r1
 800592a:	607a      	str	r2, [r7, #4]
 800592c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800592e:	4b70      	ldr	r3, [pc, #448]	; (8005af0 <SDMMC_GetCmdResp1+0x1d0>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a70      	ldr	r2, [pc, #448]	; (8005af4 <SDMMC_GetCmdResp1+0x1d4>)
 8005934:	fba2 2303 	umull	r2, r3, r2, r3
 8005938:	0a5a      	lsrs	r2, r3, #9
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	fb02 f303 	mul.w	r3, r2, r3
 8005940:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	1e5a      	subs	r2, r3, #1
 8005946:	61fa      	str	r2, [r7, #28]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d102      	bne.n	8005952 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800594c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005950:	e0c9      	b.n	8005ae6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005956:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0ef      	beq.n	8005942 <SDMMC_GetCmdResp1+0x22>
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1ea      	bne.n	8005942 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b00      	cmp	r3, #0
 8005976:	d004      	beq.n	8005982 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2204      	movs	r2, #4
 800597c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800597e:	2304      	movs	r3, #4
 8005980:	e0b1      	b.n	8005ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d004      	beq.n	8005998 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2201      	movs	r2, #1
 8005992:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005994:	2301      	movs	r3, #1
 8005996:	e0a6      	b.n	8005ae6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	22c5      	movs	r2, #197	; 0xc5
 800599c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f7ff fd12 	bl	80053c8 <SDIO_GetCommandResponse>
 80059a4:	4603      	mov	r3, r0
 80059a6:	461a      	mov	r2, r3
 80059a8:	7afb      	ldrb	r3, [r7, #11]
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d001      	beq.n	80059b2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e099      	b.n	8005ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80059b2:	2100      	movs	r1, #0
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f7ff fd14 	bl	80053e2 <SDIO_GetResponse>
 80059ba:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	4b4e      	ldr	r3, [pc, #312]	; (8005af8 <SDMMC_GetCmdResp1+0x1d8>)
 80059c0:	4013      	ands	r3, r2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80059c6:	2300      	movs	r3, #0
 80059c8:	e08d      	b.n	8005ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	da02      	bge.n	80059d6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80059d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059d4:	e087      	b.n	8005ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d001      	beq.n	80059e4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80059e0:	2340      	movs	r3, #64	; 0x40
 80059e2:	e080      	b.n	8005ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80059ee:	2380      	movs	r3, #128	; 0x80
 80059f0:	e079      	b.n	8005ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d002      	beq.n	8005a02 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80059fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a00:	e071      	b.n	8005ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005a0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a10:	e069      	b.n	8005ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a20:	e061      	b.n	8005ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005a2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a30:	e059      	b.n	8005ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a40:	e051      	b.n	8005ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a50:	e049      	b.n	8005ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005a5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a60:	e041      	b.n	8005ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005a6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a70:	e039      	b.n	8005ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005a7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a80:	e031      	b.n	8005ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005a8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005a90:	e029      	b.n	8005ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d002      	beq.n	8005aa2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005a9c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005aa0:	e021      	b.n	8005ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005aac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005ab0:	e019      	b.n	8005ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005abc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005ac0:	e011      	b.n	8005ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005acc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005ad0:	e009      	b.n	8005ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f003 0308 	and.w	r3, r3, #8
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005adc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005ae0:	e001      	b.n	8005ae6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005ae2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3720      	adds	r7, #32
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	20000000 	.word	0x20000000
 8005af4:	10624dd3 	.word	0x10624dd3
 8005af8:	fdffe008 	.word	0xfdffe008

08005afc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b04:	4b1f      	ldr	r3, [pc, #124]	; (8005b84 <SDMMC_GetCmdResp2+0x88>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a1f      	ldr	r2, [pc, #124]	; (8005b88 <SDMMC_GetCmdResp2+0x8c>)
 8005b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0e:	0a5b      	lsrs	r3, r3, #9
 8005b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b14:	fb02 f303 	mul.w	r3, r2, r3
 8005b18:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	1e5a      	subs	r2, r3, #1
 8005b1e:	60fa      	str	r2, [r7, #12]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d102      	bne.n	8005b2a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b28:	e026      	b.n	8005b78 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b2e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0ef      	beq.n	8005b1a <SDMMC_GetCmdResp2+0x1e>
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1ea      	bne.n	8005b1a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d004      	beq.n	8005b5a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2204      	movs	r2, #4
 8005b54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b56:	2304      	movs	r3, #4
 8005b58:	e00e      	b.n	8005b78 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d004      	beq.n	8005b70 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e003      	b.n	8005b78 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	22c5      	movs	r2, #197	; 0xc5
 8005b74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	20000000 	.word	0x20000000
 8005b88:	10624dd3 	.word	0x10624dd3

08005b8c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b94:	4b1a      	ldr	r3, [pc, #104]	; (8005c00 <SDMMC_GetCmdResp3+0x74>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a1a      	ldr	r2, [pc, #104]	; (8005c04 <SDMMC_GetCmdResp3+0x78>)
 8005b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9e:	0a5b      	lsrs	r3, r3, #9
 8005ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba4:	fb02 f303 	mul.w	r3, r2, r3
 8005ba8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	1e5a      	subs	r2, r3, #1
 8005bae:	60fa      	str	r2, [r7, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d102      	bne.n	8005bba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005bb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005bb8:	e01b      	b.n	8005bf2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bbe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0ef      	beq.n	8005baa <SDMMC_GetCmdResp3+0x1e>
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1ea      	bne.n	8005baa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d004      	beq.n	8005bea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2204      	movs	r2, #4
 8005be4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005be6:	2304      	movs	r3, #4
 8005be8:	e003      	b.n	8005bf2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	22c5      	movs	r2, #197	; 0xc5
 8005bee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	20000000 	.word	0x20000000
 8005c04:	10624dd3 	.word	0x10624dd3

08005c08 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b088      	sub	sp, #32
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	460b      	mov	r3, r1
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c16:	4b35      	ldr	r3, [pc, #212]	; (8005cec <SDMMC_GetCmdResp6+0xe4>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a35      	ldr	r2, [pc, #212]	; (8005cf0 <SDMMC_GetCmdResp6+0xe8>)
 8005c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c20:	0a5b      	lsrs	r3, r3, #9
 8005c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c26:	fb02 f303 	mul.w	r3, r2, r3
 8005c2a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	1e5a      	subs	r2, r3, #1
 8005c30:	61fa      	str	r2, [r7, #28]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d102      	bne.n	8005c3c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c3a:	e052      	b.n	8005ce2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c40:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0ef      	beq.n	8005c2c <SDMMC_GetCmdResp6+0x24>
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1ea      	bne.n	8005c2c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c5a:	f003 0304 	and.w	r3, r3, #4
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d004      	beq.n	8005c6c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2204      	movs	r2, #4
 8005c66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c68:	2304      	movs	r3, #4
 8005c6a:	e03a      	b.n	8005ce2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d004      	beq.n	8005c82 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e02f      	b.n	8005ce2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f7ff fba0 	bl	80053c8 <SDIO_GetCommandResponse>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	7afb      	ldrb	r3, [r7, #11]
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d001      	beq.n	8005c96 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e025      	b.n	8005ce2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	22c5      	movs	r2, #197	; 0xc5
 8005c9a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f7ff fb9f 	bl	80053e2 <SDIO_GetResponse>
 8005ca4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d106      	bne.n	8005cbe <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	0c1b      	lsrs	r3, r3, #16
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	e011      	b.n	8005ce2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005cc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ccc:	e009      	b.n	8005ce2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d002      	beq.n	8005cde <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cdc:	e001      	b.n	8005ce2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005cde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3720      	adds	r7, #32
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	20000000 	.word	0x20000000
 8005cf0:	10624dd3 	.word	0x10624dd3

08005cf4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005cfc:	4b22      	ldr	r3, [pc, #136]	; (8005d88 <SDMMC_GetCmdResp7+0x94>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a22      	ldr	r2, [pc, #136]	; (8005d8c <SDMMC_GetCmdResp7+0x98>)
 8005d02:	fba2 2303 	umull	r2, r3, r2, r3
 8005d06:	0a5b      	lsrs	r3, r3, #9
 8005d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d0c:	fb02 f303 	mul.w	r3, r2, r3
 8005d10:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	1e5a      	subs	r2, r3, #1
 8005d16:	60fa      	str	r2, [r7, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d102      	bne.n	8005d22 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d20:	e02c      	b.n	8005d7c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d26:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d0ef      	beq.n	8005d12 <SDMMC_GetCmdResp7+0x1e>
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1ea      	bne.n	8005d12 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d40:	f003 0304 	and.w	r3, r3, #4
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d004      	beq.n	8005d52 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2204      	movs	r2, #4
 8005d4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d4e:	2304      	movs	r3, #4
 8005d50:	e014      	b.n	8005d7c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d004      	beq.n	8005d68 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e009      	b.n	8005d7c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d002      	beq.n	8005d7a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2240      	movs	r2, #64	; 0x40
 8005d78:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005d7a:	2300      	movs	r3, #0
  
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	20000000 	.word	0x20000000
 8005d8c:	10624dd3 	.word	0x10624dd3

08005d90 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005d94:	4904      	ldr	r1, [pc, #16]	; (8005da8 <MX_FATFS_Init+0x18>)
 8005d96:	4805      	ldr	r0, [pc, #20]	; (8005dac <MX_FATFS_Init+0x1c>)
 8005d98:	f003 fa58 	bl	800924c <FATFS_LinkDriver>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	461a      	mov	r2, r3
 8005da0:	4b03      	ldr	r3, [pc, #12]	; (8005db0 <MX_FATFS_Init+0x20>)
 8005da2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005da4:	bf00      	nop
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	20000cf0 	.word	0x20000cf0
 8005dac:	08026c70 	.word	0x08026c70
 8005db0:	20000cec 	.word	0x20000cec

08005db4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005db8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005dce:	f000 f896 	bl	8005efe <BSP_SD_IsDetected>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d001      	beq.n	8005ddc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e012      	b.n	8005e02 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005ddc:	480b      	ldr	r0, [pc, #44]	; (8005e0c <BSP_SD_Init+0x48>)
 8005dde:	f7fd fb95 	bl	800350c <HAL_SD_Init>
 8005de2:	4603      	mov	r3, r0
 8005de4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005de6:	79fb      	ldrb	r3, [r7, #7]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d109      	bne.n	8005e00 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005dec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005df0:	4806      	ldr	r0, [pc, #24]	; (8005e0c <BSP_SD_Init+0x48>)
 8005df2:	f7fe f961 	bl	80040b8 <HAL_SD_ConfigWideBusOperation>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005e00:	79fb      	ldrb	r3, [r7, #7]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	20000bc8 	.word	0x20000bc8

08005e10 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	68f9      	ldr	r1, [r7, #12]
 8005e26:	4806      	ldr	r0, [pc, #24]	; (8005e40 <BSP_SD_ReadBlocks_DMA+0x30>)
 8005e28:	f7fd fc1e 	bl	8003668 <HAL_SD_ReadBlocks_DMA>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3718      	adds	r7, #24
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	20000bc8 	.word	0x20000bc8

08005e44 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005e50:	2300      	movs	r3, #0
 8005e52:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	68f9      	ldr	r1, [r7, #12]
 8005e5a:	4806      	ldr	r0, [pc, #24]	; (8005e74 <BSP_SD_WriteBlocks_DMA+0x30>)
 8005e5c:	f7fd fce6 	bl	800382c <HAL_SD_WriteBlocks_DMA>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3718      	adds	r7, #24
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	20000bc8 	.word	0x20000bc8

08005e78 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005e7c:	4805      	ldr	r0, [pc, #20]	; (8005e94 <BSP_SD_GetCardState+0x1c>)
 8005e7e:	f7fe f9b5 	bl	80041ec <HAL_SD_GetCardState>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b04      	cmp	r3, #4
 8005e86:	bf14      	ite	ne
 8005e88:	2301      	movne	r3, #1
 8005e8a:	2300      	moveq	r3, #0
 8005e8c:	b2db      	uxtb	r3, r3
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20000bc8 	.word	0x20000bc8

08005e98 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005ea0:	6879      	ldr	r1, [r7, #4]
 8005ea2:	4803      	ldr	r0, [pc, #12]	; (8005eb0 <BSP_SD_GetCardInfo+0x18>)
 8005ea4:	f7fe f8dc 	bl	8004060 <HAL_SD_GetCardInfo>
}
 8005ea8:	bf00      	nop
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	20000bc8 	.word	0x20000bc8

08005eb4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005ebc:	f000 f818 	bl	8005ef0 <BSP_SD_AbortCallback>
}
 8005ec0:	bf00      	nop
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005ed0:	f000 f98c 	bl	80061ec <BSP_SD_WriteCpltCallback>
}
 8005ed4:	bf00      	nop
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005ee4:	f000 f98e 	bl	8006204 <BSP_SD_ReadCpltCallback>
}
 8005ee8:	bf00      	nop
 8005eea:	3708      	adds	r7, #8
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0

}
 8005ef4:	bf00      	nop
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b083      	sub	sp, #12
 8005f02:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005f04:	2301      	movs	r3, #1
 8005f06:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005f08:	79fb      	ldrb	r3, [r7, #7]
 8005f0a:	b2db      	uxtb	r3, r3
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8005f20:	f7fc f802 	bl	8001f28 <HAL_GetTick>
 8005f24:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8005f26:	e006      	b.n	8005f36 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005f28:	f7ff ffa6 	bl	8005e78 <BSP_SD_GetCardState>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	e009      	b.n	8005f4a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8005f36:	f7fb fff7 	bl	8001f28 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d8f0      	bhi.n	8005f28 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005f46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
	...

08005f54 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005f5e:	4b0b      	ldr	r3, [pc, #44]	; (8005f8c <SD_CheckStatus+0x38>)
 8005f60:	2201      	movs	r2, #1
 8005f62:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005f64:	f7ff ff88 	bl	8005e78 <BSP_SD_GetCardState>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d107      	bne.n	8005f7e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005f6e:	4b07      	ldr	r3, [pc, #28]	; (8005f8c <SD_CheckStatus+0x38>)
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	f023 0301 	bic.w	r3, r3, #1
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	4b04      	ldr	r3, [pc, #16]	; (8005f8c <SD_CheckStatus+0x38>)
 8005f7c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005f7e:	4b03      	ldr	r3, [pc, #12]	; (8005f8c <SD_CheckStatus+0x38>)
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	b2db      	uxtb	r3, r3
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	20000009 	.word	0x20000009

08005f90 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	4603      	mov	r3, r0
 8005f98:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005f9a:	f7ff ff13 	bl	8005dc4 <BSP_SD_Init>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d107      	bne.n	8005fb4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8005fa4:	79fb      	ldrb	r3, [r7, #7]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7ff ffd4 	bl	8005f54 <SD_CheckStatus>
 8005fac:	4603      	mov	r3, r0
 8005fae:	461a      	mov	r2, r3
 8005fb0:	4b04      	ldr	r3, [pc, #16]	; (8005fc4 <SD_initialize+0x34>)
 8005fb2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005fb4:	4b03      	ldr	r3, [pc, #12]	; (8005fc4 <SD_initialize+0x34>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	b2db      	uxtb	r3, r3
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	20000009 	.word	0x20000009

08005fc8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	4603      	mov	r3, r0
 8005fd0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005fd2:	79fb      	ldrb	r3, [r7, #7]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7ff ffbd 	bl	8005f54 <SD_CheckStatus>
 8005fda:	4603      	mov	r3, r0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	607a      	str	r2, [r7, #4]
 8005fee:	603b      	str	r3, [r7, #0]
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005ff8:	f247 5030 	movw	r0, #30000	; 0x7530
 8005ffc:	f7ff ff8c 	bl	8005f18 <SD_CheckStatusWithTimeout>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	da01      	bge.n	800600a <SD_read+0x26>
  {
    return res;
 8006006:	7dfb      	ldrb	r3, [r7, #23]
 8006008:	e03b      	b.n	8006082 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	6879      	ldr	r1, [r7, #4]
 800600e:	68b8      	ldr	r0, [r7, #8]
 8006010:	f7ff fefe 	bl	8005e10 <BSP_SD_ReadBlocks_DMA>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d132      	bne.n	8006080 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800601a:	4b1c      	ldr	r3, [pc, #112]	; (800608c <SD_read+0xa8>)
 800601c:	2200      	movs	r2, #0
 800601e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8006020:	f7fb ff82 	bl	8001f28 <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006026:	bf00      	nop
 8006028:	4b18      	ldr	r3, [pc, #96]	; (800608c <SD_read+0xa8>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d108      	bne.n	8006042 <SD_read+0x5e>
 8006030:	f7fb ff7a 	bl	8001f28 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	f247 522f 	movw	r2, #29999	; 0x752f
 800603e:	4293      	cmp	r3, r2
 8006040:	d9f2      	bls.n	8006028 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8006042:	4b12      	ldr	r3, [pc, #72]	; (800608c <SD_read+0xa8>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d102      	bne.n	8006050 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	75fb      	strb	r3, [r7, #23]
 800604e:	e017      	b.n	8006080 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8006050:	4b0e      	ldr	r3, [pc, #56]	; (800608c <SD_read+0xa8>)
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006056:	f7fb ff67 	bl	8001f28 <HAL_GetTick>
 800605a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800605c:	e007      	b.n	800606e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800605e:	f7ff ff0b 	bl	8005e78 <BSP_SD_GetCardState>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d102      	bne.n	800606e <SD_read+0x8a>
          {
            res = RES_OK;
 8006068:	2300      	movs	r3, #0
 800606a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800606c:	e008      	b.n	8006080 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800606e:	f7fb ff5b 	bl	8001f28 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	f247 522f 	movw	r2, #29999	; 0x752f
 800607c:	4293      	cmp	r3, r2
 800607e:	d9ee      	bls.n	800605e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8006080:	7dfb      	ldrb	r3, [r7, #23]
}
 8006082:	4618      	mov	r0, r3
 8006084:	3718      	adds	r7, #24
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	20000094 	.word	0x20000094

08006090 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
 8006096:	60b9      	str	r1, [r7, #8]
 8006098:	607a      	str	r2, [r7, #4]
 800609a:	603b      	str	r3, [r7, #0]
 800609c:	4603      	mov	r3, r0
 800609e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80060a4:	4b24      	ldr	r3, [pc, #144]	; (8006138 <SD_write+0xa8>)
 80060a6:	2200      	movs	r2, #0
 80060a8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80060aa:	f247 5030 	movw	r0, #30000	; 0x7530
 80060ae:	f7ff ff33 	bl	8005f18 <SD_CheckStatusWithTimeout>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	da01      	bge.n	80060bc <SD_write+0x2c>
  {
    return res;
 80060b8:	7dfb      	ldrb	r3, [r7, #23]
 80060ba:	e038      	b.n	800612e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	68b8      	ldr	r0, [r7, #8]
 80060c2:	f7ff febf 	bl	8005e44 <BSP_SD_WriteBlocks_DMA>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d12f      	bne.n	800612c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80060cc:	f7fb ff2c 	bl	8001f28 <HAL_GetTick>
 80060d0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80060d2:	bf00      	nop
 80060d4:	4b18      	ldr	r3, [pc, #96]	; (8006138 <SD_write+0xa8>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d108      	bne.n	80060ee <SD_write+0x5e>
 80060dc:	f7fb ff24 	bl	8001f28 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	f247 522f 	movw	r2, #29999	; 0x752f
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d9f2      	bls.n	80060d4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80060ee:	4b12      	ldr	r3, [pc, #72]	; (8006138 <SD_write+0xa8>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d102      	bne.n	80060fc <SD_write+0x6c>
      {
        res = RES_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	75fb      	strb	r3, [r7, #23]
 80060fa:	e017      	b.n	800612c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80060fc:	4b0e      	ldr	r3, [pc, #56]	; (8006138 <SD_write+0xa8>)
 80060fe:	2200      	movs	r2, #0
 8006100:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006102:	f7fb ff11 	bl	8001f28 <HAL_GetTick>
 8006106:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006108:	e007      	b.n	800611a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800610a:	f7ff feb5 	bl	8005e78 <BSP_SD_GetCardState>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d102      	bne.n	800611a <SD_write+0x8a>
          {
            res = RES_OK;
 8006114:	2300      	movs	r3, #0
 8006116:	75fb      	strb	r3, [r7, #23]
            break;
 8006118:	e008      	b.n	800612c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800611a:	f7fb ff05 	bl	8001f28 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	f247 522f 	movw	r2, #29999	; 0x752f
 8006128:	4293      	cmp	r3, r2
 800612a:	d9ee      	bls.n	800610a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800612c:	7dfb      	ldrb	r3, [r7, #23]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3718      	adds	r7, #24
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	20000090 	.word	0x20000090

0800613c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08c      	sub	sp, #48	; 0x30
 8006140:	af00      	add	r7, sp, #0
 8006142:	4603      	mov	r3, r0
 8006144:	603a      	str	r2, [r7, #0]
 8006146:	71fb      	strb	r3, [r7, #7]
 8006148:	460b      	mov	r3, r1
 800614a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006152:	4b25      	ldr	r3, [pc, #148]	; (80061e8 <SD_ioctl+0xac>)
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	b2db      	uxtb	r3, r3
 8006158:	f003 0301 	and.w	r3, r3, #1
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <SD_ioctl+0x28>
 8006160:	2303      	movs	r3, #3
 8006162:	e03c      	b.n	80061de <SD_ioctl+0xa2>

  switch (cmd)
 8006164:	79bb      	ldrb	r3, [r7, #6]
 8006166:	2b03      	cmp	r3, #3
 8006168:	d834      	bhi.n	80061d4 <SD_ioctl+0x98>
 800616a:	a201      	add	r2, pc, #4	; (adr r2, 8006170 <SD_ioctl+0x34>)
 800616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006170:	08006181 	.word	0x08006181
 8006174:	08006189 	.word	0x08006189
 8006178:	080061a1 	.word	0x080061a1
 800617c:	080061bb 	.word	0x080061bb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006180:	2300      	movs	r3, #0
 8006182:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006186:	e028      	b.n	80061da <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006188:	f107 030c 	add.w	r3, r7, #12
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff fe83 	bl	8005e98 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006198:	2300      	movs	r3, #0
 800619a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800619e:	e01c      	b.n	80061da <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80061a0:	f107 030c 	add.w	r3, r7, #12
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7ff fe77 	bl	8005e98 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80061aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80061b8:	e00f      	b.n	80061da <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80061ba:	f107 030c 	add.w	r3, r7, #12
 80061be:	4618      	mov	r0, r3
 80061c0:	f7ff fe6a 	bl	8005e98 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80061c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c6:	0a5a      	lsrs	r2, r3, #9
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80061cc:	2300      	movs	r3, #0
 80061ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80061d2:	e002      	b.n	80061da <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80061d4:	2304      	movs	r3, #4
 80061d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80061da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3730      	adds	r7, #48	; 0x30
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20000009 	.word	0x20000009

080061ec <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80061f0:	4b03      	ldr	r3, [pc, #12]	; (8006200 <BSP_SD_WriteCpltCallback+0x14>)
 80061f2:	2201      	movs	r2, #1
 80061f4:	601a      	str	r2, [r3, #0]
}
 80061f6:	bf00      	nop
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	20000090 	.word	0x20000090

08006204 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006204:	b480      	push	{r7}
 8006206:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8006208:	4b03      	ldr	r3, [pc, #12]	; (8006218 <BSP_SD_ReadCpltCallback+0x14>)
 800620a:	2201      	movs	r2, #1
 800620c:	601a      	str	r2, [r3, #0]
}
 800620e:	bf00      	nop
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	20000094 	.word	0x20000094

0800621c <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 800621c:	b480      	push	{r7}
 800621e:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8006220:	bf00      	nop
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
	...

0800622c <read_file>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

size_t read_file (FIL  *file, uint8_t *buf, uint32_t sizeofbuf)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
static size_t BytesReadfile ;
f_read (file, buf , sizeofbuf, &BytesReadfile);
 8006238:	4b05      	ldr	r3, [pc, #20]	; (8006250 <read_file+0x24>)
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	68b9      	ldr	r1, [r7, #8]
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f002 f8a8 	bl	8008394 <f_read>
return BytesReadfile;
 8006244:	4b02      	ldr	r3, [pc, #8]	; (8006250 <read_file+0x24>)
 8006246:	681b      	ldr	r3, [r3, #0]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	20000098 	.word	0x20000098

08006254 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	4603      	mov	r3, r0
 800625c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800625e:	79fb      	ldrb	r3, [r7, #7]
 8006260:	4a08      	ldr	r2, [pc, #32]	; (8006284 <disk_status+0x30>)
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	79fa      	ldrb	r2, [r7, #7]
 800626c:	4905      	ldr	r1, [pc, #20]	; (8006284 <disk_status+0x30>)
 800626e:	440a      	add	r2, r1
 8006270:	7a12      	ldrb	r2, [r2, #8]
 8006272:	4610      	mov	r0, r2
 8006274:	4798      	blx	r3
 8006276:	4603      	mov	r3, r0
 8006278:	73fb      	strb	r3, [r7, #15]
  return stat;
 800627a:	7bfb      	ldrb	r3, [r7, #15]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	200000c4 	.word	0x200000c4

08006288 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	4603      	mov	r3, r0
 8006290:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006292:	2300      	movs	r3, #0
 8006294:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006296:	79fb      	ldrb	r3, [r7, #7]
 8006298:	4a0d      	ldr	r2, [pc, #52]	; (80062d0 <disk_initialize+0x48>)
 800629a:	5cd3      	ldrb	r3, [r2, r3]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d111      	bne.n	80062c4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80062a0:	79fb      	ldrb	r3, [r7, #7]
 80062a2:	4a0b      	ldr	r2, [pc, #44]	; (80062d0 <disk_initialize+0x48>)
 80062a4:	2101      	movs	r1, #1
 80062a6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80062a8:	79fb      	ldrb	r3, [r7, #7]
 80062aa:	4a09      	ldr	r2, [pc, #36]	; (80062d0 <disk_initialize+0x48>)
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	79fa      	ldrb	r2, [r7, #7]
 80062b6:	4906      	ldr	r1, [pc, #24]	; (80062d0 <disk_initialize+0x48>)
 80062b8:	440a      	add	r2, r1
 80062ba:	7a12      	ldrb	r2, [r2, #8]
 80062bc:	4610      	mov	r0, r2
 80062be:	4798      	blx	r3
 80062c0:	4603      	mov	r3, r0
 80062c2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80062c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	200000c4 	.word	0x200000c4

080062d4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80062d4:	b590      	push	{r4, r7, lr}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60b9      	str	r1, [r7, #8]
 80062dc:	607a      	str	r2, [r7, #4]
 80062de:	603b      	str	r3, [r7, #0]
 80062e0:	4603      	mov	r3, r0
 80062e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
 80062e6:	4a0a      	ldr	r2, [pc, #40]	; (8006310 <disk_read+0x3c>)
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	689c      	ldr	r4, [r3, #8]
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
 80062f2:	4a07      	ldr	r2, [pc, #28]	; (8006310 <disk_read+0x3c>)
 80062f4:	4413      	add	r3, r2
 80062f6:	7a18      	ldrb	r0, [r3, #8]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	68b9      	ldr	r1, [r7, #8]
 80062fe:	47a0      	blx	r4
 8006300:	4603      	mov	r3, r0
 8006302:	75fb      	strb	r3, [r7, #23]
  return res;
 8006304:	7dfb      	ldrb	r3, [r7, #23]
}
 8006306:	4618      	mov	r0, r3
 8006308:	371c      	adds	r7, #28
 800630a:	46bd      	mov	sp, r7
 800630c:	bd90      	pop	{r4, r7, pc}
 800630e:	bf00      	nop
 8006310:	200000c4 	.word	0x200000c4

08006314 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006314:	b590      	push	{r4, r7, lr}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	60b9      	str	r1, [r7, #8]
 800631c:	607a      	str	r2, [r7, #4]
 800631e:	603b      	str	r3, [r7, #0]
 8006320:	4603      	mov	r3, r0
 8006322:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006324:	7bfb      	ldrb	r3, [r7, #15]
 8006326:	4a0a      	ldr	r2, [pc, #40]	; (8006350 <disk_write+0x3c>)
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	68dc      	ldr	r4, [r3, #12]
 8006330:	7bfb      	ldrb	r3, [r7, #15]
 8006332:	4a07      	ldr	r2, [pc, #28]	; (8006350 <disk_write+0x3c>)
 8006334:	4413      	add	r3, r2
 8006336:	7a18      	ldrb	r0, [r3, #8]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	68b9      	ldr	r1, [r7, #8]
 800633e:	47a0      	blx	r4
 8006340:	4603      	mov	r3, r0
 8006342:	75fb      	strb	r3, [r7, #23]
  return res;
 8006344:	7dfb      	ldrb	r3, [r7, #23]
}
 8006346:	4618      	mov	r0, r3
 8006348:	371c      	adds	r7, #28
 800634a:	46bd      	mov	sp, r7
 800634c:	bd90      	pop	{r4, r7, pc}
 800634e:	bf00      	nop
 8006350:	200000c4 	.word	0x200000c4

08006354 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	4603      	mov	r3, r0
 800635c:	603a      	str	r2, [r7, #0]
 800635e:	71fb      	strb	r3, [r7, #7]
 8006360:	460b      	mov	r3, r1
 8006362:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006364:	79fb      	ldrb	r3, [r7, #7]
 8006366:	4a09      	ldr	r2, [pc, #36]	; (800638c <disk_ioctl+0x38>)
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	79fa      	ldrb	r2, [r7, #7]
 8006372:	4906      	ldr	r1, [pc, #24]	; (800638c <disk_ioctl+0x38>)
 8006374:	440a      	add	r2, r1
 8006376:	7a10      	ldrb	r0, [r2, #8]
 8006378:	79b9      	ldrb	r1, [r7, #6]
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	4798      	blx	r3
 800637e:	4603      	mov	r3, r0
 8006380:	73fb      	strb	r3, [r7, #15]
  return res;
 8006382:	7bfb      	ldrb	r3, [r7, #15]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	200000c4 	.word	0x200000c4

08006390 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3301      	adds	r3, #1
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80063a0:	89fb      	ldrh	r3, [r7, #14]
 80063a2:	021b      	lsls	r3, r3, #8
 80063a4:	b21a      	sxth	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	b21b      	sxth	r3, r3
 80063ac:	4313      	orrs	r3, r2
 80063ae:	b21b      	sxth	r3, r3
 80063b0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80063b2:	89fb      	ldrh	r3, [r7, #14]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3303      	adds	r3, #3
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	021b      	lsls	r3, r3, #8
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	3202      	adds	r2, #2
 80063d8:	7812      	ldrb	r2, [r2, #0]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	021b      	lsls	r3, r3, #8
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	3201      	adds	r2, #1
 80063e6:	7812      	ldrb	r2, [r2, #0]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	021b      	lsls	r3, r3, #8
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	7812      	ldrb	r2, [r2, #0]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]
	return rv;
 80063f8:	68fb      	ldr	r3, [r7, #12]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006406:	b480      	push	{r7}
 8006408:	b083      	sub	sp, #12
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	460b      	mov	r3, r1
 8006410:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	887a      	ldrh	r2, [r7, #2]
 800641a:	b2d2      	uxtb	r2, r2
 800641c:	701a      	strb	r2, [r3, #0]
 800641e:	887b      	ldrh	r3, [r7, #2]
 8006420:	0a1b      	lsrs	r3, r3, #8
 8006422:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	607a      	str	r2, [r7, #4]
 800642a:	887a      	ldrh	r2, [r7, #2]
 800642c:	b2d2      	uxtb	r2, r2
 800642e:	701a      	strb	r2, [r3, #0]
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	607a      	str	r2, [r7, #4]
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	b2d2      	uxtb	r2, r2
 8006450:	701a      	strb	r2, [r3, #0]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	0a1b      	lsrs	r3, r3, #8
 8006456:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	1c5a      	adds	r2, r3, #1
 800645c:	607a      	str	r2, [r7, #4]
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	b2d2      	uxtb	r2, r2
 8006462:	701a      	strb	r2, [r3, #0]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	0a1b      	lsrs	r3, r3, #8
 8006468:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	1c5a      	adds	r2, r3, #1
 800646e:	607a      	str	r2, [r7, #4]
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	0a1b      	lsrs	r3, r3, #8
 800647a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	607a      	str	r2, [r7, #4]
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	b2d2      	uxtb	r2, r2
 8006486:	701a      	strb	r2, [r3, #0]
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00d      	beq.n	80064ca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	1c53      	adds	r3, r2, #1
 80064b2:	613b      	str	r3, [r7, #16]
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	1c59      	adds	r1, r3, #1
 80064b8:	6179      	str	r1, [r7, #20]
 80064ba:	7812      	ldrb	r2, [r2, #0]
 80064bc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	3b01      	subs	r3, #1
 80064c2:	607b      	str	r3, [r7, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1f1      	bne.n	80064ae <mem_cpy+0x1a>
	}
}
 80064ca:	bf00      	nop
 80064cc:	371c      	adds	r7, #28
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80064d6:	b480      	push	{r7}
 80064d8:	b087      	sub	sp, #28
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	617a      	str	r2, [r7, #20]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	3b01      	subs	r3, #1
 80064f6:	607b      	str	r3, [r7, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1f3      	bne.n	80064e6 <mem_set+0x10>
}
 80064fe:	bf00      	nop
 8006500:	bf00      	nop
 8006502:	371c      	adds	r7, #28
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800650c:	b480      	push	{r7}
 800650e:	b089      	sub	sp, #36	; 0x24
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	61fb      	str	r3, [r7, #28]
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006520:	2300      	movs	r3, #0
 8006522:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	61fa      	str	r2, [r7, #28]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	4619      	mov	r1, r3
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	1c5a      	adds	r2, r3, #1
 8006532:	61ba      	str	r2, [r7, #24]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	1acb      	subs	r3, r1, r3
 8006538:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	3b01      	subs	r3, #1
 800653e:	607b      	str	r3, [r7, #4]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <mem_cmp+0x40>
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d0eb      	beq.n	8006524 <mem_cmp+0x18>

	return r;
 800654c:	697b      	ldr	r3, [r7, #20]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3724      	adds	r7, #36	; 0x24
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800655a:	b480      	push	{r7}
 800655c:	b083      	sub	sp, #12
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006564:	e002      	b.n	800656c <chk_chr+0x12>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	3301      	adds	r3, #1
 800656a:	607b      	str	r3, [r7, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d005      	beq.n	8006580 <chk_chr+0x26>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	461a      	mov	r2, r3
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	4293      	cmp	r3, r2
 800657e:	d1f2      	bne.n	8006566 <chk_chr+0xc>
	return *str;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	781b      	ldrb	r3, [r3, #0]
}
 8006584:	4618      	mov	r0, r3
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800659a:	2300      	movs	r3, #0
 800659c:	60bb      	str	r3, [r7, #8]
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	60fb      	str	r3, [r7, #12]
 80065a2:	e029      	b.n	80065f8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80065a4:	4a27      	ldr	r2, [pc, #156]	; (8006644 <chk_lock+0xb4>)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	011b      	lsls	r3, r3, #4
 80065aa:	4413      	add	r3, r2
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d01d      	beq.n	80065ee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80065b2:	4a24      	ldr	r2, [pc, #144]	; (8006644 <chk_lock+0xb4>)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	011b      	lsls	r3, r3, #4
 80065b8:	4413      	add	r3, r2
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d116      	bne.n	80065f2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80065c4:	4a1f      	ldr	r2, [pc, #124]	; (8006644 <chk_lock+0xb4>)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	011b      	lsls	r3, r3, #4
 80065ca:	4413      	add	r3, r2
 80065cc:	3304      	adds	r3, #4
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d10c      	bne.n	80065f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80065d8:	4a1a      	ldr	r2, [pc, #104]	; (8006644 <chk_lock+0xb4>)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	011b      	lsls	r3, r3, #4
 80065de:	4413      	add	r3, r2
 80065e0:	3308      	adds	r3, #8
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d102      	bne.n	80065f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80065ec:	e007      	b.n	80065fe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80065ee:	2301      	movs	r3, #1
 80065f0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3301      	adds	r3, #1
 80065f6:	60fb      	str	r3, [r7, #12]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d9d2      	bls.n	80065a4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2b02      	cmp	r3, #2
 8006602:	d109      	bne.n	8006618 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d102      	bne.n	8006610 <chk_lock+0x80>
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b02      	cmp	r3, #2
 800660e:	d101      	bne.n	8006614 <chk_lock+0x84>
 8006610:	2300      	movs	r3, #0
 8006612:	e010      	b.n	8006636 <chk_lock+0xa6>
 8006614:	2312      	movs	r3, #18
 8006616:	e00e      	b.n	8006636 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d108      	bne.n	8006630 <chk_lock+0xa0>
 800661e:	4a09      	ldr	r2, [pc, #36]	; (8006644 <chk_lock+0xb4>)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	011b      	lsls	r3, r3, #4
 8006624:	4413      	add	r3, r2
 8006626:	330c      	adds	r3, #12
 8006628:	881b      	ldrh	r3, [r3, #0]
 800662a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800662e:	d101      	bne.n	8006634 <chk_lock+0xa4>
 8006630:	2310      	movs	r3, #16
 8006632:	e000      	b.n	8006636 <chk_lock+0xa6>
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	200000a4 	.word	0x200000a4

08006648 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800664e:	2300      	movs	r3, #0
 8006650:	607b      	str	r3, [r7, #4]
 8006652:	e002      	b.n	800665a <enq_lock+0x12>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3301      	adds	r3, #1
 8006658:	607b      	str	r3, [r7, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d806      	bhi.n	800666e <enq_lock+0x26>
 8006660:	4a09      	ldr	r2, [pc, #36]	; (8006688 <enq_lock+0x40>)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	011b      	lsls	r3, r3, #4
 8006666:	4413      	add	r3, r2
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1f2      	bne.n	8006654 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b02      	cmp	r3, #2
 8006672:	bf14      	ite	ne
 8006674:	2301      	movne	r3, #1
 8006676:	2300      	moveq	r3, #0
 8006678:	b2db      	uxtb	r3, r3
}
 800667a:	4618      	mov	r0, r3
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	200000a4 	.word	0x200000a4

0800668c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006696:	2300      	movs	r3, #0
 8006698:	60fb      	str	r3, [r7, #12]
 800669a:	e01f      	b.n	80066dc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800669c:	4a41      	ldr	r2, [pc, #260]	; (80067a4 <inc_lock+0x118>)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	011b      	lsls	r3, r3, #4
 80066a2:	4413      	add	r3, r2
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d113      	bne.n	80066d6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80066ae:	4a3d      	ldr	r2, [pc, #244]	; (80067a4 <inc_lock+0x118>)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	011b      	lsls	r3, r3, #4
 80066b4:	4413      	add	r3, r2
 80066b6:	3304      	adds	r3, #4
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80066be:	429a      	cmp	r2, r3
 80066c0:	d109      	bne.n	80066d6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80066c2:	4a38      	ldr	r2, [pc, #224]	; (80067a4 <inc_lock+0x118>)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	4413      	add	r3, r2
 80066ca:	3308      	adds	r3, #8
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d006      	beq.n	80066e4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	3301      	adds	r3, #1
 80066da:	60fb      	str	r3, [r7, #12]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d9dc      	bls.n	800669c <inc_lock+0x10>
 80066e2:	e000      	b.n	80066e6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80066e4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d132      	bne.n	8006752 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80066ec:	2300      	movs	r3, #0
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	e002      	b.n	80066f8 <inc_lock+0x6c>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	3301      	adds	r3, #1
 80066f6:	60fb      	str	r3, [r7, #12]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d806      	bhi.n	800670c <inc_lock+0x80>
 80066fe:	4a29      	ldr	r2, [pc, #164]	; (80067a4 <inc_lock+0x118>)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	011b      	lsls	r3, r3, #4
 8006704:	4413      	add	r3, r2
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1f2      	bne.n	80066f2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2b02      	cmp	r3, #2
 8006710:	d101      	bne.n	8006716 <inc_lock+0x8a>
 8006712:	2300      	movs	r3, #0
 8006714:	e040      	b.n	8006798 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	4922      	ldr	r1, [pc, #136]	; (80067a4 <inc_lock+0x118>)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	011b      	lsls	r3, r3, #4
 8006720:	440b      	add	r3, r1
 8006722:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	689a      	ldr	r2, [r3, #8]
 8006728:	491e      	ldr	r1, [pc, #120]	; (80067a4 <inc_lock+0x118>)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	011b      	lsls	r3, r3, #4
 800672e:	440b      	add	r3, r1
 8006730:	3304      	adds	r3, #4
 8006732:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	695a      	ldr	r2, [r3, #20]
 8006738:	491a      	ldr	r1, [pc, #104]	; (80067a4 <inc_lock+0x118>)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	011b      	lsls	r3, r3, #4
 800673e:	440b      	add	r3, r1
 8006740:	3308      	adds	r3, #8
 8006742:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006744:	4a17      	ldr	r2, [pc, #92]	; (80067a4 <inc_lock+0x118>)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	011b      	lsls	r3, r3, #4
 800674a:	4413      	add	r3, r2
 800674c:	330c      	adds	r3, #12
 800674e:	2200      	movs	r2, #0
 8006750:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d009      	beq.n	800676c <inc_lock+0xe0>
 8006758:	4a12      	ldr	r2, [pc, #72]	; (80067a4 <inc_lock+0x118>)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	011b      	lsls	r3, r3, #4
 800675e:	4413      	add	r3, r2
 8006760:	330c      	adds	r3, #12
 8006762:	881b      	ldrh	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <inc_lock+0xe0>
 8006768:	2300      	movs	r3, #0
 800676a:	e015      	b.n	8006798 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d108      	bne.n	8006784 <inc_lock+0xf8>
 8006772:	4a0c      	ldr	r2, [pc, #48]	; (80067a4 <inc_lock+0x118>)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	011b      	lsls	r3, r3, #4
 8006778:	4413      	add	r3, r2
 800677a:	330c      	adds	r3, #12
 800677c:	881b      	ldrh	r3, [r3, #0]
 800677e:	3301      	adds	r3, #1
 8006780:	b29a      	uxth	r2, r3
 8006782:	e001      	b.n	8006788 <inc_lock+0xfc>
 8006784:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006788:	4906      	ldr	r1, [pc, #24]	; (80067a4 <inc_lock+0x118>)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	011b      	lsls	r3, r3, #4
 800678e:	440b      	add	r3, r1
 8006790:	330c      	adds	r3, #12
 8006792:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	3301      	adds	r3, #1
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	200000a4 	.word	0x200000a4

080067a8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	607b      	str	r3, [r7, #4]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d825      	bhi.n	8006808 <dec_lock+0x60>
		n = Files[i].ctr;
 80067bc:	4a17      	ldr	r2, [pc, #92]	; (800681c <dec_lock+0x74>)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	011b      	lsls	r3, r3, #4
 80067c2:	4413      	add	r3, r2
 80067c4:	330c      	adds	r3, #12
 80067c6:	881b      	ldrh	r3, [r3, #0]
 80067c8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80067ca:	89fb      	ldrh	r3, [r7, #14]
 80067cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067d0:	d101      	bne.n	80067d6 <dec_lock+0x2e>
 80067d2:	2300      	movs	r3, #0
 80067d4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80067d6:	89fb      	ldrh	r3, [r7, #14]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d002      	beq.n	80067e2 <dec_lock+0x3a>
 80067dc:	89fb      	ldrh	r3, [r7, #14]
 80067de:	3b01      	subs	r3, #1
 80067e0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80067e2:	4a0e      	ldr	r2, [pc, #56]	; (800681c <dec_lock+0x74>)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	011b      	lsls	r3, r3, #4
 80067e8:	4413      	add	r3, r2
 80067ea:	330c      	adds	r3, #12
 80067ec:	89fa      	ldrh	r2, [r7, #14]
 80067ee:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80067f0:	89fb      	ldrh	r3, [r7, #14]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d105      	bne.n	8006802 <dec_lock+0x5a>
 80067f6:	4a09      	ldr	r2, [pc, #36]	; (800681c <dec_lock+0x74>)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	011b      	lsls	r3, r3, #4
 80067fc:	4413      	add	r3, r2
 80067fe:	2200      	movs	r2, #0
 8006800:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	737b      	strb	r3, [r7, #13]
 8006806:	e001      	b.n	800680c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006808:	2302      	movs	r3, #2
 800680a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800680c:	7b7b      	ldrb	r3, [r7, #13]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	200000a4 	.word	0x200000a4

08006820 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006828:	2300      	movs	r3, #0
 800682a:	60fb      	str	r3, [r7, #12]
 800682c:	e010      	b.n	8006850 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800682e:	4a0d      	ldr	r2, [pc, #52]	; (8006864 <clear_lock+0x44>)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	011b      	lsls	r3, r3, #4
 8006834:	4413      	add	r3, r2
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	429a      	cmp	r2, r3
 800683c:	d105      	bne.n	800684a <clear_lock+0x2a>
 800683e:	4a09      	ldr	r2, [pc, #36]	; (8006864 <clear_lock+0x44>)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	4413      	add	r3, r2
 8006846:	2200      	movs	r2, #0
 8006848:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3301      	adds	r3, #1
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d9eb      	bls.n	800682e <clear_lock+0xe>
	}
}
 8006856:	bf00      	nop
 8006858:	bf00      	nop
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	200000a4 	.word	0x200000a4

08006868 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006870:	2300      	movs	r3, #0
 8006872:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	78db      	ldrb	r3, [r3, #3]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d034      	beq.n	80068e6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006880:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	7858      	ldrb	r0, [r3, #1]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800688c:	2301      	movs	r3, #1
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	f7ff fd40 	bl	8006314 <disk_write>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d002      	beq.n	80068a0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800689a:	2301      	movs	r3, #1
 800689c:	73fb      	strb	r3, [r7, #15]
 800689e:	e022      	b.n	80068e6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	1ad2      	subs	r2, r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d217      	bcs.n	80068e6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	789b      	ldrb	r3, [r3, #2]
 80068ba:	613b      	str	r3, [r7, #16]
 80068bc:	e010      	b.n	80068e0 <sync_window+0x78>
					wsect += fs->fsize;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	4413      	add	r3, r2
 80068c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	7858      	ldrb	r0, [r3, #1]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80068d2:	2301      	movs	r3, #1
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	f7ff fd1d 	bl	8006314 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	3b01      	subs	r3, #1
 80068de:	613b      	str	r3, [r7, #16]
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d8eb      	bhi.n	80068be <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	429a      	cmp	r2, r3
 8006906:	d01b      	beq.n	8006940 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f7ff ffad 	bl	8006868 <sync_window>
 800690e:	4603      	mov	r3, r0
 8006910:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006912:	7bfb      	ldrb	r3, [r7, #15]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d113      	bne.n	8006940 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	7858      	ldrb	r0, [r3, #1]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006922:	2301      	movs	r3, #1
 8006924:	683a      	ldr	r2, [r7, #0]
 8006926:	f7ff fcd5 	bl	80062d4 <disk_read>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d004      	beq.n	800693a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006930:	f04f 33ff 	mov.w	r3, #4294967295
 8006934:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006936:	2301      	movs	r3, #1
 8006938:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	683a      	ldr	r2, [r7, #0]
 800693e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8006940:	7bfb      	ldrb	r3, [r7, #15]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
	...

0800694c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7ff ff87 	bl	8006868 <sync_window>
 800695a:	4603      	mov	r3, r0
 800695c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800695e:	7bfb      	ldrb	r3, [r7, #15]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d158      	bne.n	8006a16 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	2b03      	cmp	r3, #3
 800696a:	d148      	bne.n	80069fe <sync_fs+0xb2>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	791b      	ldrb	r3, [r3, #4]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d144      	bne.n	80069fe <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	3330      	adds	r3, #48	; 0x30
 8006978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800697c:	2100      	movs	r1, #0
 800697e:	4618      	mov	r0, r3
 8006980:	f7ff fda9 	bl	80064d6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	3330      	adds	r3, #48	; 0x30
 8006988:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800698c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006990:	4618      	mov	r0, r3
 8006992:	f7ff fd38 	bl	8006406 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	3330      	adds	r3, #48	; 0x30
 800699a:	4921      	ldr	r1, [pc, #132]	; (8006a20 <sync_fs+0xd4>)
 800699c:	4618      	mov	r0, r3
 800699e:	f7ff fd4d 	bl	800643c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	3330      	adds	r3, #48	; 0x30
 80069a6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80069aa:	491e      	ldr	r1, [pc, #120]	; (8006a24 <sync_fs+0xd8>)
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7ff fd45 	bl	800643c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	3330      	adds	r3, #48	; 0x30
 80069b6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	4619      	mov	r1, r3
 80069c0:	4610      	mov	r0, r2
 80069c2:	f7ff fd3b 	bl	800643c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	3330      	adds	r3, #48	; 0x30
 80069ca:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	4619      	mov	r1, r3
 80069d4:	4610      	mov	r0, r2
 80069d6:	f7ff fd31 	bl	800643c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	7858      	ldrb	r0, [r3, #1]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f2:	2301      	movs	r3, #1
 80069f4:	f7ff fc8e 	bl	8006314 <disk_write>
			fs->fsi_flag = 0;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	785b      	ldrb	r3, [r3, #1]
 8006a02:	2200      	movs	r2, #0
 8006a04:	2100      	movs	r1, #0
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7ff fca4 	bl	8006354 <disk_ioctl>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <sync_fs+0xca>
 8006a12:	2301      	movs	r3, #1
 8006a14:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	41615252 	.word	0x41615252
 8006a24:	61417272 	.word	0x61417272

08006a28 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	3b02      	subs	r3, #2
 8006a36:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	3b02      	subs	r3, #2
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d301      	bcc.n	8006a48 <clust2sect+0x20>
 8006a44:	2300      	movs	r3, #0
 8006a46:	e008      	b.n	8006a5a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	895b      	ldrh	r3, [r3, #10]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	fb03 f202 	mul.w	r2, r3, r2
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a58:	4413      	add	r3, r2
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b086      	sub	sp, #24
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
 8006a6e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d904      	bls.n	8006a86 <get_fat+0x20>
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d302      	bcc.n	8006a8c <get_fat+0x26>
		val = 1;	/* Internal error */
 8006a86:	2301      	movs	r3, #1
 8006a88:	617b      	str	r3, [r7, #20]
 8006a8a:	e08f      	b.n	8006bac <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a90:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	d062      	beq.n	8006b60 <get_fat+0xfa>
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	dc7c      	bgt.n	8006b98 <get_fat+0x132>
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d002      	beq.n	8006aa8 <get_fat+0x42>
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d042      	beq.n	8006b2c <get_fat+0xc6>
 8006aa6:	e077      	b.n	8006b98 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	60fb      	str	r3, [r7, #12]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	085b      	lsrs	r3, r3, #1
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	6a1a      	ldr	r2, [r3, #32]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	0a5b      	lsrs	r3, r3, #9
 8006abe:	4413      	add	r3, r2
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	6938      	ldr	r0, [r7, #16]
 8006ac4:	f7ff ff14 	bl	80068f0 <move_window>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d167      	bne.n	8006b9e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	1c5a      	adds	r2, r3, #1
 8006ad2:	60fa      	str	r2, [r7, #12]
 8006ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	4413      	add	r3, r2
 8006adc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ae0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	6a1a      	ldr	r2, [r3, #32]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	0a5b      	lsrs	r3, r3, #9
 8006aea:	4413      	add	r3, r2
 8006aec:	4619      	mov	r1, r3
 8006aee:	6938      	ldr	r0, [r7, #16]
 8006af0:	f7ff fefe 	bl	80068f0 <move_window>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d153      	bne.n	8006ba2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	4413      	add	r3, r2
 8006b04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b08:	021b      	lsls	r3, r3, #8
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	f003 0301 	and.w	r3, r3, #1
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <get_fat+0xbc>
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	091b      	lsrs	r3, r3, #4
 8006b20:	e002      	b.n	8006b28 <get_fat+0xc2>
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b28:	617b      	str	r3, [r7, #20]
			break;
 8006b2a:	e03f      	b.n	8006bac <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	6a1a      	ldr	r2, [r3, #32]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	0a1b      	lsrs	r3, r3, #8
 8006b34:	4413      	add	r3, r2
 8006b36:	4619      	mov	r1, r3
 8006b38:	6938      	ldr	r0, [r7, #16]
 8006b3a:	f7ff fed9 	bl	80068f0 <move_window>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d130      	bne.n	8006ba6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	005b      	lsls	r3, r3, #1
 8006b4e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006b52:	4413      	add	r3, r2
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7ff fc1b 	bl	8006390 <ld_word>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	617b      	str	r3, [r7, #20]
			break;
 8006b5e:	e025      	b.n	8006bac <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	6a1a      	ldr	r2, [r3, #32]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	09db      	lsrs	r3, r3, #7
 8006b68:	4413      	add	r3, r2
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6938      	ldr	r0, [r7, #16]
 8006b6e:	f7ff febf 	bl	80068f0 <move_window>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d118      	bne.n	8006baa <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006b86:	4413      	add	r3, r2
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff fc19 	bl	80063c0 <ld_dword>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006b94:	617b      	str	r3, [r7, #20]
			break;
 8006b96:	e009      	b.n	8006bac <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006b98:	2301      	movs	r3, #1
 8006b9a:	617b      	str	r3, [r7, #20]
 8006b9c:	e006      	b.n	8006bac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b9e:	bf00      	nop
 8006ba0:	e004      	b.n	8006bac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ba2:	bf00      	nop
 8006ba4:	e002      	b.n	8006bac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006ba6:	bf00      	nop
 8006ba8:	e000      	b.n	8006bac <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006baa:	bf00      	nop
		}
	}

	return val;
 8006bac:	697b      	ldr	r3, [r7, #20]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3718      	adds	r7, #24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006bb6:	b590      	push	{r4, r7, lr}
 8006bb8:	b089      	sub	sp, #36	; 0x24
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	60f8      	str	r0, [r7, #12]
 8006bbe:	60b9      	str	r1, [r7, #8]
 8006bc0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	f240 80d2 	bls.w	8006d72 <put_fat+0x1bc>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	f080 80cc 	bcs.w	8006d72 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	f000 8096 	beq.w	8006d10 <put_fat+0x15a>
 8006be4:	2b03      	cmp	r3, #3
 8006be6:	f300 80cd 	bgt.w	8006d84 <put_fat+0x1ce>
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d002      	beq.n	8006bf4 <put_fat+0x3e>
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d06e      	beq.n	8006cd0 <put_fat+0x11a>
 8006bf2:	e0c7      	b.n	8006d84 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	61bb      	str	r3, [r7, #24]
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	085b      	lsrs	r3, r3, #1
 8006bfc:	69ba      	ldr	r2, [r7, #24]
 8006bfe:	4413      	add	r3, r2
 8006c00:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6a1a      	ldr	r2, [r3, #32]
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	0a5b      	lsrs	r3, r3, #9
 8006c0a:	4413      	add	r3, r2
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f7ff fe6e 	bl	80068f0 <move_window>
 8006c14:	4603      	mov	r3, r0
 8006c16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006c18:	7ffb      	ldrb	r3, [r7, #31]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f040 80ab 	bne.w	8006d76 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	1c59      	adds	r1, r3, #1
 8006c2a:	61b9      	str	r1, [r7, #24]
 8006c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c30:	4413      	add	r3, r2
 8006c32:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00d      	beq.n	8006c5a <put_fat+0xa4>
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	b25b      	sxtb	r3, r3
 8006c44:	f003 030f 	and.w	r3, r3, #15
 8006c48:	b25a      	sxtb	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	011b      	lsls	r3, r3, #4
 8006c50:	b25b      	sxtb	r3, r3
 8006c52:	4313      	orrs	r3, r2
 8006c54:	b25b      	sxtb	r3, r3
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	e001      	b.n	8006c5e <put_fat+0xa8>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2201      	movs	r2, #1
 8006c66:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6a1a      	ldr	r2, [r3, #32]
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	0a5b      	lsrs	r3, r3, #9
 8006c70:	4413      	add	r3, r2
 8006c72:	4619      	mov	r1, r3
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f7ff fe3b 	bl	80068f0 <move_window>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006c7e:	7ffb      	ldrb	r3, [r7, #31]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d17a      	bne.n	8006d7a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c90:	4413      	add	r3, r2
 8006c92:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d003      	beq.n	8006ca6 <put_fat+0xf0>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	091b      	lsrs	r3, r3, #4
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	e00e      	b.n	8006cc4 <put_fat+0x10e>
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	b25b      	sxtb	r3, r3
 8006cac:	f023 030f 	bic.w	r3, r3, #15
 8006cb0:	b25a      	sxtb	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	0a1b      	lsrs	r3, r3, #8
 8006cb6:	b25b      	sxtb	r3, r3
 8006cb8:	f003 030f 	and.w	r3, r3, #15
 8006cbc:	b25b      	sxtb	r3, r3
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	b25b      	sxtb	r3, r3
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	70da      	strb	r2, [r3, #3]
			break;
 8006cce:	e059      	b.n	8006d84 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6a1a      	ldr	r2, [r3, #32]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	0a1b      	lsrs	r3, r3, #8
 8006cd8:	4413      	add	r3, r2
 8006cda:	4619      	mov	r1, r3
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f7ff fe07 	bl	80068f0 <move_window>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006ce6:	7ffb      	ldrb	r3, [r7, #31]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d148      	bne.n	8006d7e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	005b      	lsls	r3, r3, #1
 8006cf6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006cfa:	4413      	add	r3, r2
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	b292      	uxth	r2, r2
 8006d00:	4611      	mov	r1, r2
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7ff fb7f 	bl	8006406 <st_word>
			fs->wflag = 1;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	70da      	strb	r2, [r3, #3]
			break;
 8006d0e:	e039      	b.n	8006d84 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6a1a      	ldr	r2, [r3, #32]
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	09db      	lsrs	r3, r3, #7
 8006d18:	4413      	add	r3, r2
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f7ff fde7 	bl	80068f0 <move_window>
 8006d22:	4603      	mov	r3, r0
 8006d24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d26:	7ffb      	ldrb	r3, [r7, #31]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d12a      	bne.n	8006d82 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006d40:	4413      	add	r3, r2
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7ff fb3c 	bl	80063c0 <ld_dword>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006d4e:	4323      	orrs	r3, r4
 8006d50:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006d60:	4413      	add	r3, r2
 8006d62:	6879      	ldr	r1, [r7, #4]
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7ff fb69 	bl	800643c <st_dword>
			fs->wflag = 1;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	70da      	strb	r2, [r3, #3]
			break;
 8006d70:	e008      	b.n	8006d84 <put_fat+0x1ce>
		}
	}
 8006d72:	bf00      	nop
 8006d74:	e006      	b.n	8006d84 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006d76:	bf00      	nop
 8006d78:	e004      	b.n	8006d84 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006d7a:	bf00      	nop
 8006d7c:	e002      	b.n	8006d84 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006d7e:	bf00      	nop
 8006d80:	e000      	b.n	8006d84 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006d82:	bf00      	nop
	return res;
 8006d84:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3724      	adds	r7, #36	; 0x24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd90      	pop	{r4, r7, pc}

08006d8e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b088      	sub	sp, #32
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	60f8      	str	r0, [r7, #12]
 8006d96:	60b9      	str	r1, [r7, #8]
 8006d98:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d904      	bls.n	8006db4 <remove_chain+0x26>
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d301      	bcc.n	8006db8 <remove_chain+0x2a>
 8006db4:	2302      	movs	r3, #2
 8006db6:	e04b      	b.n	8006e50 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00c      	beq.n	8006dd8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc2:	6879      	ldr	r1, [r7, #4]
 8006dc4:	69b8      	ldr	r0, [r7, #24]
 8006dc6:	f7ff fef6 	bl	8006bb6 <put_fat>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006dce:	7ffb      	ldrb	r3, [r7, #31]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d001      	beq.n	8006dd8 <remove_chain+0x4a>
 8006dd4:	7ffb      	ldrb	r3, [r7, #31]
 8006dd6:	e03b      	b.n	8006e50 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006dd8:	68b9      	ldr	r1, [r7, #8]
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f7ff fe43 	bl	8006a66 <get_fat>
 8006de0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d031      	beq.n	8006e4c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d101      	bne.n	8006df2 <remove_chain+0x64>
 8006dee:	2302      	movs	r3, #2
 8006df0:	e02e      	b.n	8006e50 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df8:	d101      	bne.n	8006dfe <remove_chain+0x70>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e028      	b.n	8006e50 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006dfe:	2200      	movs	r2, #0
 8006e00:	68b9      	ldr	r1, [r7, #8]
 8006e02:	69b8      	ldr	r0, [r7, #24]
 8006e04:	f7ff fed7 	bl	8006bb6 <put_fat>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006e0c:	7ffb      	ldrb	r3, [r7, #31]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <remove_chain+0x88>
 8006e12:	7ffb      	ldrb	r3, [r7, #31]
 8006e14:	e01c      	b.n	8006e50 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	691a      	ldr	r2, [r3, #16]
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	3b02      	subs	r3, #2
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d20b      	bcs.n	8006e3c <remove_chain+0xae>
			fs->free_clst++;
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	791b      	ldrb	r3, [r3, #4]
 8006e32:	f043 0301 	orr.w	r3, r3, #1
 8006e36:	b2da      	uxtb	r2, r3
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d3c6      	bcc.n	8006dd8 <remove_chain+0x4a>
 8006e4a:	e000      	b.n	8006e4e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006e4c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3720      	adds	r7, #32
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b088      	sub	sp, #32
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10d      	bne.n	8006e8a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d004      	beq.n	8006e84 <create_chain+0x2c>
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	69ba      	ldr	r2, [r7, #24]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d31b      	bcc.n	8006ebc <create_chain+0x64>
 8006e84:	2301      	movs	r3, #1
 8006e86:	61bb      	str	r3, [r7, #24]
 8006e88:	e018      	b.n	8006ebc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7ff fdea 	bl	8006a66 <get_fat>
 8006e92:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d801      	bhi.n	8006e9e <create_chain+0x46>
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e070      	b.n	8006f80 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea4:	d101      	bne.n	8006eaa <create_chain+0x52>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	e06a      	b.n	8006f80 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d201      	bcs.n	8006eb8 <create_chain+0x60>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	e063      	b.n	8006f80 <create_chain+0x128>
		scl = clst;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	69fa      	ldr	r2, [r7, #28]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d307      	bcc.n	8006ee0 <create_chain+0x88>
				ncl = 2;
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006ed4:	69fa      	ldr	r2, [r7, #28]
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d901      	bls.n	8006ee0 <create_chain+0x88>
 8006edc:	2300      	movs	r3, #0
 8006ede:	e04f      	b.n	8006f80 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006ee0:	69f9      	ldr	r1, [r7, #28]
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7ff fdbf 	bl	8006a66 <get_fat>
 8006ee8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00e      	beq.n	8006f0e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d003      	beq.n	8006efe <create_chain+0xa6>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efc:	d101      	bne.n	8006f02 <create_chain+0xaa>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	e03e      	b.n	8006f80 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006f02:	69fa      	ldr	r2, [r7, #28]
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d1da      	bne.n	8006ec0 <create_chain+0x68>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	e038      	b.n	8006f80 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006f0e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006f10:	f04f 32ff 	mov.w	r2, #4294967295
 8006f14:	69f9      	ldr	r1, [r7, #28]
 8006f16:	6938      	ldr	r0, [r7, #16]
 8006f18:	f7ff fe4d 	bl	8006bb6 <put_fat>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006f20:	7dfb      	ldrb	r3, [r7, #23]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d109      	bne.n	8006f3a <create_chain+0xe2>
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d006      	beq.n	8006f3a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006f2c:	69fa      	ldr	r2, [r7, #28]
 8006f2e:	6839      	ldr	r1, [r7, #0]
 8006f30:	6938      	ldr	r0, [r7, #16]
 8006f32:	f7ff fe40 	bl	8006bb6 <put_fat>
 8006f36:	4603      	mov	r3, r0
 8006f38:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006f3a:	7dfb      	ldrb	r3, [r7, #23]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d116      	bne.n	8006f6e <create_chain+0x116>
		fs->last_clst = ncl;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	69fa      	ldr	r2, [r7, #28]
 8006f44:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	691a      	ldr	r2, [r3, #16]
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	3b02      	subs	r3, #2
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d804      	bhi.n	8006f5e <create_chain+0x106>
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	1e5a      	subs	r2, r3, #1
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	791b      	ldrb	r3, [r3, #4]
 8006f62:	f043 0301 	orr.w	r3, r3, #1
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	711a      	strb	r2, [r3, #4]
 8006f6c:	e007      	b.n	8006f7e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006f6e:	7dfb      	ldrb	r3, [r7, #23]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d102      	bne.n	8006f7a <create_chain+0x122>
 8006f74:	f04f 33ff 	mov.w	r3, #4294967295
 8006f78:	e000      	b.n	8006f7c <create_chain+0x124>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006f7e:	69fb      	ldr	r3, [r7, #28]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3720      	adds	r7, #32
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	0a5b      	lsrs	r3, r3, #9
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	8952      	ldrh	r2, [r2, #10]
 8006fa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fac:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	1d1a      	adds	r2, r3, #4
 8006fb2:	613a      	str	r2, [r7, #16]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <clmt_clust+0x3a>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	e010      	b.n	8006fe4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d307      	bcc.n	8006fda <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	617b      	str	r3, [r7, #20]
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006fd8:	e7e9      	b.n	8006fae <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006fda:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	4413      	add	r3, r2
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	371c      	adds	r7, #28
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007006:	d204      	bcs.n	8007012 <dir_sdi+0x22>
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	f003 031f 	and.w	r3, r3, #31
 800700e:	2b00      	cmp	r3, #0
 8007010:	d001      	beq.n	8007016 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007012:	2302      	movs	r3, #2
 8007014:	e063      	b.n	80070de <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	683a      	ldr	r2, [r7, #0]
 800701a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d106      	bne.n	8007036 <dir_sdi+0x46>
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	2b02      	cmp	r3, #2
 800702e:	d902      	bls.n	8007036 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007034:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10c      	bne.n	8007056 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	095b      	lsrs	r3, r3, #5
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	8912      	ldrh	r2, [r2, #8]
 8007044:	4293      	cmp	r3, r2
 8007046:	d301      	bcc.n	800704c <dir_sdi+0x5c>
 8007048:	2302      	movs	r3, #2
 800704a:	e048      	b.n	80070de <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	61da      	str	r2, [r3, #28]
 8007054:	e029      	b.n	80070aa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	895b      	ldrh	r3, [r3, #10]
 800705a:	025b      	lsls	r3, r3, #9
 800705c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800705e:	e019      	b.n	8007094 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6979      	ldr	r1, [r7, #20]
 8007064:	4618      	mov	r0, r3
 8007066:	f7ff fcfe 	bl	8006a66 <get_fat>
 800706a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007072:	d101      	bne.n	8007078 <dir_sdi+0x88>
 8007074:	2301      	movs	r3, #1
 8007076:	e032      	b.n	80070de <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d904      	bls.n	8007088 <dir_sdi+0x98>
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	429a      	cmp	r2, r3
 8007086:	d301      	bcc.n	800708c <dir_sdi+0x9c>
 8007088:	2302      	movs	r3, #2
 800708a:	e028      	b.n	80070de <dir_sdi+0xee>
			ofs -= csz;
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	429a      	cmp	r2, r3
 800709a:	d2e1      	bcs.n	8007060 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800709c:	6979      	ldr	r1, [r7, #20]
 800709e:	6938      	ldr	r0, [r7, #16]
 80070a0:	f7ff fcc2 	bl	8006a28 <clust2sect>
 80070a4:	4602      	mov	r2, r0
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	69db      	ldr	r3, [r3, #28]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d101      	bne.n	80070bc <dir_sdi+0xcc>
 80070b8:	2302      	movs	r3, #2
 80070ba:	e010      	b.n	80070de <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	69da      	ldr	r2, [r3, #28]
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	0a5b      	lsrs	r3, r3, #9
 80070c4:	441a      	add	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d6:	441a      	add	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b086      	sub	sp, #24
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	3320      	adds	r3, #32
 80070fc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d003      	beq.n	800710e <dir_next+0x28>
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800710c:	d301      	bcc.n	8007112 <dir_next+0x2c>
 800710e:	2304      	movs	r3, #4
 8007110:	e0aa      	b.n	8007268 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007118:	2b00      	cmp	r3, #0
 800711a:	f040 8098 	bne.w	800724e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	1c5a      	adds	r2, r3, #1
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10b      	bne.n	8007148 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	095b      	lsrs	r3, r3, #5
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	8912      	ldrh	r2, [r2, #8]
 8007138:	4293      	cmp	r3, r2
 800713a:	f0c0 8088 	bcc.w	800724e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	61da      	str	r2, [r3, #28]
 8007144:	2304      	movs	r3, #4
 8007146:	e08f      	b.n	8007268 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	0a5b      	lsrs	r3, r3, #9
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	8952      	ldrh	r2, [r2, #10]
 8007150:	3a01      	subs	r2, #1
 8007152:	4013      	ands	r3, r2
 8007154:	2b00      	cmp	r3, #0
 8007156:	d17a      	bne.n	800724e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	4619      	mov	r1, r3
 8007160:	4610      	mov	r0, r2
 8007162:	f7ff fc80 	bl	8006a66 <get_fat>
 8007166:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	2b01      	cmp	r3, #1
 800716c:	d801      	bhi.n	8007172 <dir_next+0x8c>
 800716e:	2302      	movs	r3, #2
 8007170:	e07a      	b.n	8007268 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007178:	d101      	bne.n	800717e <dir_next+0x98>
 800717a:	2301      	movs	r3, #1
 800717c:	e074      	b.n	8007268 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	429a      	cmp	r2, r3
 8007186:	d358      	bcc.n	800723a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d104      	bne.n	8007198 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	61da      	str	r2, [r3, #28]
 8007194:	2304      	movs	r3, #4
 8007196:	e067      	b.n	8007268 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	4619      	mov	r1, r3
 80071a0:	4610      	mov	r0, r2
 80071a2:	f7ff fe59 	bl	8006e58 <create_chain>
 80071a6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <dir_next+0xcc>
 80071ae:	2307      	movs	r3, #7
 80071b0:	e05a      	b.n	8007268 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d101      	bne.n	80071bc <dir_next+0xd6>
 80071b8:	2302      	movs	r3, #2
 80071ba:	e055      	b.n	8007268 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c2:	d101      	bne.n	80071c8 <dir_next+0xe2>
 80071c4:	2301      	movs	r3, #1
 80071c6:	e04f      	b.n	8007268 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f7ff fb4d 	bl	8006868 <sync_window>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d001      	beq.n	80071d8 <dir_next+0xf2>
 80071d4:	2301      	movs	r3, #1
 80071d6:	e047      	b.n	8007268 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	3330      	adds	r3, #48	; 0x30
 80071dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071e0:	2100      	movs	r1, #0
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7ff f977 	bl	80064d6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80071e8:	2300      	movs	r3, #0
 80071ea:	613b      	str	r3, [r7, #16]
 80071ec:	6979      	ldr	r1, [r7, #20]
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f7ff fc1a 	bl	8006a28 <clust2sect>
 80071f4:	4602      	mov	r2, r0
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80071fa:	e012      	b.n	8007222 <dir_next+0x13c>
						fs->wflag = 1;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2201      	movs	r2, #1
 8007200:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f7ff fb30 	bl	8006868 <sync_window>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <dir_next+0x12c>
 800720e:	2301      	movs	r3, #1
 8007210:	e02a      	b.n	8007268 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	3301      	adds	r3, #1
 8007216:	613b      	str	r3, [r7, #16]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721c:	1c5a      	adds	r2, r3, #1
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	62da      	str	r2, [r3, #44]	; 0x2c
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	895b      	ldrh	r3, [r3, #10]
 8007226:	461a      	mov	r2, r3
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	4293      	cmp	r3, r2
 800722c:	d3e6      	bcc.n	80071fc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	1ad2      	subs	r2, r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007240:	6979      	ldr	r1, [r7, #20]
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f7ff fbf0 	bl	8006a28 <clust2sect>
 8007248:	4602      	mov	r2, r0
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68ba      	ldr	r2, [r7, #8]
 8007252:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007260:	441a      	add	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3718      	adds	r7, #24
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007280:	2100      	movs	r1, #0
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7ff feb4 	bl	8006ff0 <dir_sdi>
 8007288:	4603      	mov	r3, r0
 800728a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800728c:	7dfb      	ldrb	r3, [r7, #23]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d12b      	bne.n	80072ea <dir_alloc+0x7a>
		n = 0;
 8007292:	2300      	movs	r3, #0
 8007294:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	4619      	mov	r1, r3
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f7ff fb27 	bl	80068f0 <move_window>
 80072a2:	4603      	mov	r3, r0
 80072a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80072a6:	7dfb      	ldrb	r3, [r7, #23]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d11d      	bne.n	80072e8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a1b      	ldr	r3, [r3, #32]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	2be5      	cmp	r3, #229	; 0xe5
 80072b4:	d004      	beq.n	80072c0 <dir_alloc+0x50>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d107      	bne.n	80072d0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	3301      	adds	r3, #1
 80072c4:	613b      	str	r3, [r7, #16]
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d102      	bne.n	80072d4 <dir_alloc+0x64>
 80072ce:	e00c      	b.n	80072ea <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80072d0:	2300      	movs	r3, #0
 80072d2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80072d4:	2101      	movs	r1, #1
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7ff ff05 	bl	80070e6 <dir_next>
 80072dc:	4603      	mov	r3, r0
 80072de:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80072e0:	7dfb      	ldrb	r3, [r7, #23]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d0d7      	beq.n	8007296 <dir_alloc+0x26>
 80072e6:	e000      	b.n	80072ea <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80072e8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80072ea:	7dfb      	ldrb	r3, [r7, #23]
 80072ec:	2b04      	cmp	r3, #4
 80072ee:	d101      	bne.n	80072f4 <dir_alloc+0x84>
 80072f0:	2307      	movs	r3, #7
 80072f2:	75fb      	strb	r3, [r7, #23]
	return res;
 80072f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3718      	adds	r7, #24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b084      	sub	sp, #16
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	331a      	adds	r3, #26
 800730c:	4618      	mov	r0, r3
 800730e:	f7ff f83f 	bl	8006390 <ld_word>
 8007312:	4603      	mov	r3, r0
 8007314:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	2b03      	cmp	r3, #3
 800731c:	d109      	bne.n	8007332 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	3314      	adds	r3, #20
 8007322:	4618      	mov	r0, r3
 8007324:	f7ff f834 	bl	8006390 <ld_word>
 8007328:	4603      	mov	r3, r0
 800732a:	041b      	lsls	r3, r3, #16
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	4313      	orrs	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007332:	68fb      	ldr	r3, [r7, #12]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	331a      	adds	r3, #26
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	b292      	uxth	r2, r2
 8007350:	4611      	mov	r1, r2
 8007352:	4618      	mov	r0, r3
 8007354:	f7ff f857 	bl	8006406 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	2b03      	cmp	r3, #3
 800735e:	d109      	bne.n	8007374 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f103 0214 	add.w	r2, r3, #20
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	0c1b      	lsrs	r3, r3, #16
 800736a:	b29b      	uxth	r3, r3
 800736c:	4619      	mov	r1, r3
 800736e:	4610      	mov	r0, r2
 8007370:	f7ff f849 	bl	8006406 <st_word>
	}
}
 8007374:	bf00      	nop
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8007386:	2304      	movs	r3, #4
 8007388:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8007390:	e03c      	b.n	800740c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	4619      	mov	r1, r3
 8007398:	6938      	ldr	r0, [r7, #16]
 800739a:	f7ff faa9 	bl	80068f0 <move_window>
 800739e:	4603      	mov	r3, r0
 80073a0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80073a2:	7dfb      	ldrb	r3, [r7, #23]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d136      	bne.n	8007416 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d102      	bne.n	80073bc <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80073b6:	2304      	movs	r3, #4
 80073b8:	75fb      	strb	r3, [r7, #23]
 80073ba:	e031      	b.n	8007420 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a1b      	ldr	r3, [r3, #32]
 80073c0:	330b      	adds	r3, #11
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073c8:	73bb      	strb	r3, [r7, #14]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	7bba      	ldrb	r2, [r7, #14]
 80073ce:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
 80073d2:	2be5      	cmp	r3, #229	; 0xe5
 80073d4:	d011      	beq.n	80073fa <dir_read+0x7e>
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
 80073d8:	2b2e      	cmp	r3, #46	; 0x2e
 80073da:	d00e      	beq.n	80073fa <dir_read+0x7e>
 80073dc:	7bbb      	ldrb	r3, [r7, #14]
 80073de:	2b0f      	cmp	r3, #15
 80073e0:	d00b      	beq.n	80073fa <dir_read+0x7e>
 80073e2:	7bbb      	ldrb	r3, [r7, #14]
 80073e4:	f023 0320 	bic.w	r3, r3, #32
 80073e8:	2b08      	cmp	r3, #8
 80073ea:	bf0c      	ite	eq
 80073ec:	2301      	moveq	r3, #1
 80073ee:	2300      	movne	r3, #0
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	461a      	mov	r2, r3
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d00f      	beq.n	800741a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80073fa:	2100      	movs	r1, #0
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7ff fe72 	bl	80070e6 <dir_next>
 8007402:	4603      	mov	r3, r0
 8007404:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007406:	7dfb      	ldrb	r3, [r7, #23]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d108      	bne.n	800741e <dir_read+0xa2>
	while (dp->sect) {
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1be      	bne.n	8007392 <dir_read+0x16>
 8007414:	e004      	b.n	8007420 <dir_read+0xa4>
		if (res != FR_OK) break;
 8007416:	bf00      	nop
 8007418:	e002      	b.n	8007420 <dir_read+0xa4>
				break;
 800741a:	bf00      	nop
 800741c:	e000      	b.n	8007420 <dir_read+0xa4>
		if (res != FR_OK) break;
 800741e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007420:	7dfb      	ldrb	r3, [r7, #23]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d002      	beq.n	800742c <dir_read+0xb0>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	61da      	str	r2, [r3, #28]
	return res;
 800742c:	7dfb      	ldrb	r3, [r7, #23]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3718      	adds	r7, #24
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b086      	sub	sp, #24
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007444:	2100      	movs	r1, #0
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7ff fdd2 	bl	8006ff0 <dir_sdi>
 800744c:	4603      	mov	r3, r0
 800744e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007450:	7dfb      	ldrb	r3, [r7, #23]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d001      	beq.n	800745a <dir_find+0x24>
 8007456:	7dfb      	ldrb	r3, [r7, #23]
 8007458:	e03e      	b.n	80074d8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	69db      	ldr	r3, [r3, #28]
 800745e:	4619      	mov	r1, r3
 8007460:	6938      	ldr	r0, [r7, #16]
 8007462:	f7ff fa45 	bl	80068f0 <move_window>
 8007466:	4603      	mov	r3, r0
 8007468:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800746a:	7dfb      	ldrb	r3, [r7, #23]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d12f      	bne.n	80074d0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a1b      	ldr	r3, [r3, #32]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007478:	7bfb      	ldrb	r3, [r7, #15]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d102      	bne.n	8007484 <dir_find+0x4e>
 800747e:	2304      	movs	r3, #4
 8007480:	75fb      	strb	r3, [r7, #23]
 8007482:	e028      	b.n	80074d6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a1b      	ldr	r3, [r3, #32]
 8007488:	330b      	adds	r3, #11
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007490:	b2da      	uxtb	r2, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	330b      	adds	r3, #11
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	f003 0308 	and.w	r3, r3, #8
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10a      	bne.n	80074bc <dir_find+0x86>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a18      	ldr	r0, [r3, #32]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	3324      	adds	r3, #36	; 0x24
 80074ae:	220b      	movs	r2, #11
 80074b0:	4619      	mov	r1, r3
 80074b2:	f7ff f82b 	bl	800650c <mem_cmp>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00b      	beq.n	80074d4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80074bc:	2100      	movs	r1, #0
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7ff fe11 	bl	80070e6 <dir_next>
 80074c4:	4603      	mov	r3, r0
 80074c6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80074c8:	7dfb      	ldrb	r3, [r7, #23]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d0c5      	beq.n	800745a <dir_find+0x24>
 80074ce:	e002      	b.n	80074d6 <dir_find+0xa0>
		if (res != FR_OK) break;
 80074d0:	bf00      	nop
 80074d2:	e000      	b.n	80074d6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80074d4:	bf00      	nop

	return res;
 80074d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3718      	adds	r7, #24
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80074ee:	2101      	movs	r1, #1
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f7ff febd 	bl	8007270 <dir_alloc>
 80074f6:	4603      	mov	r3, r0
 80074f8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d11c      	bne.n	800753a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	4619      	mov	r1, r3
 8007506:	68b8      	ldr	r0, [r7, #8]
 8007508:	f7ff f9f2 	bl	80068f0 <move_window>
 800750c:	4603      	mov	r3, r0
 800750e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007510:	7bfb      	ldrb	r3, [r7, #15]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d111      	bne.n	800753a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	2220      	movs	r2, #32
 800751c:	2100      	movs	r1, #0
 800751e:	4618      	mov	r0, r3
 8007520:	f7fe ffd9 	bl	80064d6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a18      	ldr	r0, [r3, #32]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	3324      	adds	r3, #36	; 0x24
 800752c:	220b      	movs	r2, #11
 800752e:	4619      	mov	r1, r3
 8007530:	f7fe ffb0 	bl	8006494 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	2201      	movs	r2, #1
 8007538:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800753a:	7bfb      	ldrb	r3, [r7, #15]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b086      	sub	sp, #24
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2200      	movs	r2, #0
 8007552:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	69db      	ldr	r3, [r3, #28]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d04e      	beq.n	80075fa <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800755c:	2300      	movs	r3, #0
 800755e:	613b      	str	r3, [r7, #16]
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8007564:	e021      	b.n	80075aa <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a1a      	ldr	r2, [r3, #32]
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	1c59      	adds	r1, r3, #1
 800756e:	6179      	str	r1, [r7, #20]
 8007570:	4413      	add	r3, r2
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007576:	7bfb      	ldrb	r3, [r7, #15]
 8007578:	2b20      	cmp	r3, #32
 800757a:	d100      	bne.n	800757e <get_fileinfo+0x3a>
 800757c:	e015      	b.n	80075aa <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800757e:	7bfb      	ldrb	r3, [r7, #15]
 8007580:	2b05      	cmp	r3, #5
 8007582:	d101      	bne.n	8007588 <get_fileinfo+0x44>
 8007584:	23e5      	movs	r3, #229	; 0xe5
 8007586:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	2b09      	cmp	r3, #9
 800758c:	d106      	bne.n	800759c <get_fileinfo+0x58>
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	1c5a      	adds	r2, r3, #1
 8007592:	613a      	str	r2, [r7, #16]
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	4413      	add	r3, r2
 8007598:	222e      	movs	r2, #46	; 0x2e
 800759a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	1c5a      	adds	r2, r3, #1
 80075a0:	613a      	str	r2, [r7, #16]
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	4413      	add	r3, r2
 80075a6:	7bfa      	ldrb	r2, [r7, #15]
 80075a8:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	2b0a      	cmp	r3, #10
 80075ae:	d9da      	bls.n	8007566 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80075b0:	683a      	ldr	r2, [r7, #0]
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	4413      	add	r3, r2
 80075b6:	3309      	adds	r3, #9
 80075b8:	2200      	movs	r2, #0
 80075ba:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a1b      	ldr	r3, [r3, #32]
 80075c0:	7ada      	ldrb	r2, [r3, #11]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	331c      	adds	r3, #28
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7fe fef7 	bl	80063c0 <ld_dword>
 80075d2:	4602      	mov	r2, r0
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a1b      	ldr	r3, [r3, #32]
 80075dc:	3316      	adds	r3, #22
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fe feee 	bl	80063c0 <ld_dword>
 80075e4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	80da      	strh	r2, [r3, #6]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	0c1b      	lsrs	r3, r3, #16
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	809a      	strh	r2, [r3, #4]
 80075f8:	e000      	b.n	80075fc <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80075fa:	bf00      	nop
}
 80075fc:	3718      	adds	r7, #24
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
	...

08007604 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	1c59      	adds	r1, r3, #1
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	6011      	str	r1, [r2, #0]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800761a:	89fb      	ldrh	r3, [r7, #14]
 800761c:	2b60      	cmp	r3, #96	; 0x60
 800761e:	d905      	bls.n	800762c <get_achar+0x28>
 8007620:	89fb      	ldrh	r3, [r7, #14]
 8007622:	2b7a      	cmp	r3, #122	; 0x7a
 8007624:	d802      	bhi.n	800762c <get_achar+0x28>
 8007626:	89fb      	ldrh	r3, [r7, #14]
 8007628:	3b20      	subs	r3, #32
 800762a:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800762c:	89fb      	ldrh	r3, [r7, #14]
 800762e:	2b7f      	cmp	r3, #127	; 0x7f
 8007630:	d904      	bls.n	800763c <get_achar+0x38>
 8007632:	89fb      	ldrh	r3, [r7, #14]
 8007634:	3b80      	subs	r3, #128	; 0x80
 8007636:	4a05      	ldr	r2, [pc, #20]	; (800764c <get_achar+0x48>)
 8007638:	5cd3      	ldrb	r3, [r2, r3]
 800763a:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 800763c:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800763e:	4618      	mov	r0, r3
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	08026c84 	.word	0x08026c84

08007650 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b08a      	sub	sp, #40	; 0x28
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
 800765c:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800765e:	e009      	b.n	8007674 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8007660:	f107 0308 	add.w	r3, r7, #8
 8007664:	4618      	mov	r0, r3
 8007666:	f7ff ffcd 	bl	8007604 <get_achar>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d101      	bne.n	8007674 <pattern_matching+0x24>
 8007670:	2300      	movs	r3, #0
 8007672:	e064      	b.n	800773e <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	1e5a      	subs	r2, r3, #1
 8007678:	607a      	str	r2, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1f0      	bne.n	8007660 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d104      	bne.n	8007690 <pattern_matching+0x40>
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <pattern_matching+0x40>
 800768c:	2301      	movs	r3, #1
 800768e:	e056      	b.n	800773e <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	617b      	str	r3, [r7, #20]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	2b3f      	cmp	r3, #63	; 0x3f
 800769e:	d003      	beq.n	80076a8 <pattern_matching+0x58>
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	2b2a      	cmp	r3, #42	; 0x2a
 80076a6:	d126      	bne.n	80076f6 <pattern_matching+0xa6>
				nm = nx = 0;
 80076a8:	2300      	movs	r3, #0
 80076aa:	61fb      	str	r3, [r7, #28]
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	1c5a      	adds	r2, r3, #1
 80076b4:	617a      	str	r2, [r7, #20]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	2b3f      	cmp	r3, #63	; 0x3f
 80076ba:	d103      	bne.n	80076c4 <pattern_matching+0x74>
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	3301      	adds	r3, #1
 80076c0:	623b      	str	r3, [r7, #32]
 80076c2:	e001      	b.n	80076c8 <pattern_matching+0x78>
 80076c4:	2301      	movs	r3, #1
 80076c6:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	2b3f      	cmp	r3, #63	; 0x3f
 80076ce:	d0ef      	beq.n	80076b0 <pattern_matching+0x60>
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	2b2a      	cmp	r3, #42	; 0x2a
 80076d6:	d0eb      	beq.n	80076b0 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 80076d8:	6978      	ldr	r0, [r7, #20]
 80076da:	6939      	ldr	r1, [r7, #16]
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	6a3a      	ldr	r2, [r7, #32]
 80076e0:	f7ff ffb6 	bl	8007650 <pattern_matching>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <pattern_matching+0x9e>
 80076ea:	2301      	movs	r3, #1
 80076ec:	e027      	b.n	800773e <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80076f4:	e017      	b.n	8007726 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 80076f6:	f107 0314 	add.w	r3, r7, #20
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7ff ff82 	bl	8007604 <get_achar>
 8007700:	4603      	mov	r3, r0
 8007702:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 8007704:	f107 0310 	add.w	r3, r7, #16
 8007708:	4618      	mov	r0, r3
 800770a:	f7ff ff7b 	bl	8007604 <get_achar>
 800770e:	4603      	mov	r3, r0
 8007710:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 8007712:	8b7a      	ldrh	r2, [r7, #26]
 8007714:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007716:	429a      	cmp	r2, r3
 8007718:	d104      	bne.n	8007724 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800771a:	8b7b      	ldrh	r3, [r7, #26]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1bb      	bne.n	8007698 <pattern_matching+0x48>
 8007720:	2301      	movs	r3, #1
 8007722:	e00c      	b.n	800773e <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 8007724:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 8007726:	f107 0308 	add.w	r3, r7, #8
 800772a:	4618      	mov	r0, r3
 800772c:	f7ff ff6a 	bl	8007604 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d002      	beq.n	800773c <pattern_matching+0xec>
 8007736:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1a9      	bne.n	8007690 <pattern_matching+0x40>

	return 0;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3728      	adds	r7, #40	; 0x28
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
	...

08007748 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b088      	sub	sp, #32
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	60fb      	str	r3, [r7, #12]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	3324      	adds	r3, #36	; 0x24
 800775c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800775e:	220b      	movs	r2, #11
 8007760:	2120      	movs	r1, #32
 8007762:	68b8      	ldr	r0, [r7, #8]
 8007764:	f7fe feb7 	bl	80064d6 <mem_set>
	si = i = 0; ni = 8;
 8007768:	2300      	movs	r3, #0
 800776a:	613b      	str	r3, [r7, #16]
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	61fb      	str	r3, [r7, #28]
 8007770:	2308      	movs	r3, #8
 8007772:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	1c5a      	adds	r2, r3, #1
 8007778:	61fa      	str	r2, [r7, #28]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	4413      	add	r3, r2
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007782:	7efb      	ldrb	r3, [r7, #27]
 8007784:	2b20      	cmp	r3, #32
 8007786:	d94e      	bls.n	8007826 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007788:	7efb      	ldrb	r3, [r7, #27]
 800778a:	2b2f      	cmp	r3, #47	; 0x2f
 800778c:	d006      	beq.n	800779c <create_name+0x54>
 800778e:	7efb      	ldrb	r3, [r7, #27]
 8007790:	2b5c      	cmp	r3, #92	; 0x5c
 8007792:	d110      	bne.n	80077b6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007794:	e002      	b.n	800779c <create_name+0x54>
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	3301      	adds	r3, #1
 800779a:	61fb      	str	r3, [r7, #28]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	4413      	add	r3, r2
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	2b2f      	cmp	r3, #47	; 0x2f
 80077a6:	d0f6      	beq.n	8007796 <create_name+0x4e>
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	4413      	add	r3, r2
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	2b5c      	cmp	r3, #92	; 0x5c
 80077b2:	d0f0      	beq.n	8007796 <create_name+0x4e>
			break;
 80077b4:	e038      	b.n	8007828 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80077b6:	7efb      	ldrb	r3, [r7, #27]
 80077b8:	2b2e      	cmp	r3, #46	; 0x2e
 80077ba:	d003      	beq.n	80077c4 <create_name+0x7c>
 80077bc:	693a      	ldr	r2, [r7, #16]
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d30c      	bcc.n	80077de <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	2b0b      	cmp	r3, #11
 80077c8:	d002      	beq.n	80077d0 <create_name+0x88>
 80077ca:	7efb      	ldrb	r3, [r7, #27]
 80077cc:	2b2e      	cmp	r3, #46	; 0x2e
 80077ce:	d001      	beq.n	80077d4 <create_name+0x8c>
 80077d0:	2306      	movs	r3, #6
 80077d2:	e044      	b.n	800785e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80077d4:	2308      	movs	r3, #8
 80077d6:	613b      	str	r3, [r7, #16]
 80077d8:	230b      	movs	r3, #11
 80077da:	617b      	str	r3, [r7, #20]
			continue;
 80077dc:	e022      	b.n	8007824 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80077de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	da04      	bge.n	80077f0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80077e6:	7efb      	ldrb	r3, [r7, #27]
 80077e8:	3b80      	subs	r3, #128	; 0x80
 80077ea:	4a1f      	ldr	r2, [pc, #124]	; (8007868 <create_name+0x120>)
 80077ec:	5cd3      	ldrb	r3, [r2, r3]
 80077ee:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80077f0:	7efb      	ldrb	r3, [r7, #27]
 80077f2:	4619      	mov	r1, r3
 80077f4:	481d      	ldr	r0, [pc, #116]	; (800786c <create_name+0x124>)
 80077f6:	f7fe feb0 	bl	800655a <chk_chr>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <create_name+0xbc>
 8007800:	2306      	movs	r3, #6
 8007802:	e02c      	b.n	800785e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007804:	7efb      	ldrb	r3, [r7, #27]
 8007806:	2b60      	cmp	r3, #96	; 0x60
 8007808:	d905      	bls.n	8007816 <create_name+0xce>
 800780a:	7efb      	ldrb	r3, [r7, #27]
 800780c:	2b7a      	cmp	r3, #122	; 0x7a
 800780e:	d802      	bhi.n	8007816 <create_name+0xce>
 8007810:	7efb      	ldrb	r3, [r7, #27]
 8007812:	3b20      	subs	r3, #32
 8007814:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	1c5a      	adds	r2, r3, #1
 800781a:	613a      	str	r2, [r7, #16]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	4413      	add	r3, r2
 8007820:	7efa      	ldrb	r2, [r7, #27]
 8007822:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007824:	e7a6      	b.n	8007774 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007826:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	441a      	add	r2, r3
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d101      	bne.n	800783c <create_name+0xf4>
 8007838:	2306      	movs	r3, #6
 800783a:	e010      	b.n	800785e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	2be5      	cmp	r3, #229	; 0xe5
 8007842:	d102      	bne.n	800784a <create_name+0x102>
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	2205      	movs	r2, #5
 8007848:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800784a:	7efb      	ldrb	r3, [r7, #27]
 800784c:	2b20      	cmp	r3, #32
 800784e:	d801      	bhi.n	8007854 <create_name+0x10c>
 8007850:	2204      	movs	r2, #4
 8007852:	e000      	b.n	8007856 <create_name+0x10e>
 8007854:	2200      	movs	r2, #0
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	330b      	adds	r3, #11
 800785a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800785c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800785e:	4618      	mov	r0, r3
 8007860:	3720      	adds	r7, #32
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	08026c84 	.word	0x08026c84
 800786c:	0802588c 	.word	0x0802588c

08007870 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007884:	e002      	b.n	800788c <follow_path+0x1c>
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	3301      	adds	r3, #1
 800788a:	603b      	str	r3, [r7, #0]
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	2b2f      	cmp	r3, #47	; 0x2f
 8007892:	d0f8      	beq.n	8007886 <follow_path+0x16>
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	2b5c      	cmp	r3, #92	; 0x5c
 800789a:	d0f4      	beq.n	8007886 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	2200      	movs	r2, #0
 80078a0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	2b1f      	cmp	r3, #31
 80078a8:	d80a      	bhi.n	80078c0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2280      	movs	r2, #128	; 0x80
 80078ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80078b2:	2100      	movs	r1, #0
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f7ff fb9b 	bl	8006ff0 <dir_sdi>
 80078ba:	4603      	mov	r3, r0
 80078bc:	75fb      	strb	r3, [r7, #23]
 80078be:	e043      	b.n	8007948 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80078c0:	463b      	mov	r3, r7
 80078c2:	4619      	mov	r1, r3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7ff ff3f 	bl	8007748 <create_name>
 80078ca:	4603      	mov	r3, r0
 80078cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80078ce:	7dfb      	ldrb	r3, [r7, #23]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d134      	bne.n	800793e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7ff fdae 	bl	8007436 <dir_find>
 80078da:	4603      	mov	r3, r0
 80078dc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80078e4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80078e6:	7dfb      	ldrb	r3, [r7, #23]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00a      	beq.n	8007902 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80078ec:	7dfb      	ldrb	r3, [r7, #23]
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	d127      	bne.n	8007942 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80078f2:	7afb      	ldrb	r3, [r7, #11]
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d122      	bne.n	8007942 <follow_path+0xd2>
 80078fc:	2305      	movs	r3, #5
 80078fe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007900:	e01f      	b.n	8007942 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007902:	7afb      	ldrb	r3, [r7, #11]
 8007904:	f003 0304 	and.w	r3, r3, #4
 8007908:	2b00      	cmp	r3, #0
 800790a:	d11c      	bne.n	8007946 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	799b      	ldrb	r3, [r3, #6]
 8007910:	f003 0310 	and.w	r3, r3, #16
 8007914:	2b00      	cmp	r3, #0
 8007916:	d102      	bne.n	800791e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007918:	2305      	movs	r3, #5
 800791a:	75fb      	strb	r3, [r7, #23]
 800791c:	e014      	b.n	8007948 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	695b      	ldr	r3, [r3, #20]
 8007928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800792c:	4413      	add	r3, r2
 800792e:	4619      	mov	r1, r3
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f7ff fce4 	bl	80072fe <ld_clust>
 8007936:	4602      	mov	r2, r0
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800793c:	e7c0      	b.n	80078c0 <follow_path+0x50>
			if (res != FR_OK) break;
 800793e:	bf00      	nop
 8007940:	e002      	b.n	8007948 <follow_path+0xd8>
				break;
 8007942:	bf00      	nop
 8007944:	e000      	b.n	8007948 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007946:	bf00      	nop
			}
		}
	}

	return res;
 8007948:	7dfb      	ldrb	r3, [r7, #23]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3718      	adds	r7, #24
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007952:	b480      	push	{r7}
 8007954:	b087      	sub	sp, #28
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800795a:	f04f 33ff 	mov.w	r3, #4294967295
 800795e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d031      	beq.n	80079cc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	617b      	str	r3, [r7, #20]
 800796e:	e002      	b.n	8007976 <get_ldnumber+0x24>
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	3301      	adds	r3, #1
 8007974:	617b      	str	r3, [r7, #20]
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	2b20      	cmp	r3, #32
 800797c:	d903      	bls.n	8007986 <get_ldnumber+0x34>
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	2b3a      	cmp	r3, #58	; 0x3a
 8007984:	d1f4      	bne.n	8007970 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	2b3a      	cmp	r3, #58	; 0x3a
 800798c:	d11c      	bne.n	80079c8 <get_ldnumber+0x76>
			tp = *path;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	1c5a      	adds	r2, r3, #1
 8007998:	60fa      	str	r2, [r7, #12]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	3b30      	subs	r3, #48	; 0x30
 800799e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	2b09      	cmp	r3, #9
 80079a4:	d80e      	bhi.n	80079c4 <get_ldnumber+0x72>
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d10a      	bne.n	80079c4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d107      	bne.n	80079c4 <get_ldnumber+0x72>
					vol = (int)i;
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	3301      	adds	r3, #1
 80079bc:	617b      	str	r3, [r7, #20]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	e002      	b.n	80079ce <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80079c8:	2300      	movs	r3, #0
 80079ca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80079cc:	693b      	ldr	r3, [r7, #16]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	371c      	adds	r7, #28
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
	...

080079dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	70da      	strb	r2, [r3, #3]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f04f 32ff 	mov.w	r2, #4294967295
 80079f2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7fe ff7a 	bl	80068f0 <move_window>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d001      	beq.n	8007a06 <check_fs+0x2a>
 8007a02:	2304      	movs	r3, #4
 8007a04:	e038      	b.n	8007a78 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	3330      	adds	r3, #48	; 0x30
 8007a0a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fe fcbe 	bl	8006390 <ld_word>
 8007a14:	4603      	mov	r3, r0
 8007a16:	461a      	mov	r2, r3
 8007a18:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d001      	beq.n	8007a24 <check_fs+0x48>
 8007a20:	2303      	movs	r3, #3
 8007a22:	e029      	b.n	8007a78 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007a2a:	2be9      	cmp	r3, #233	; 0xe9
 8007a2c:	d009      	beq.n	8007a42 <check_fs+0x66>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007a34:	2beb      	cmp	r3, #235	; 0xeb
 8007a36:	d11e      	bne.n	8007a76 <check_fs+0x9a>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007a3e:	2b90      	cmp	r3, #144	; 0x90
 8007a40:	d119      	bne.n	8007a76 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	3330      	adds	r3, #48	; 0x30
 8007a46:	3336      	adds	r3, #54	; 0x36
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7fe fcb9 	bl	80063c0 <ld_dword>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a54:	4a0a      	ldr	r2, [pc, #40]	; (8007a80 <check_fs+0xa4>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d101      	bne.n	8007a5e <check_fs+0x82>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	e00c      	b.n	8007a78 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	3330      	adds	r3, #48	; 0x30
 8007a62:	3352      	adds	r3, #82	; 0x52
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7fe fcab 	bl	80063c0 <ld_dword>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	4a05      	ldr	r2, [pc, #20]	; (8007a84 <check_fs+0xa8>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d101      	bne.n	8007a76 <check_fs+0x9a>
 8007a72:	2300      	movs	r3, #0
 8007a74:	e000      	b.n	8007a78 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007a76:	2302      	movs	r3, #2
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3708      	adds	r7, #8
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	00544146 	.word	0x00544146
 8007a84:	33544146 	.word	0x33544146

08007a88 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b096      	sub	sp, #88	; 0x58
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	4613      	mov	r3, r2
 8007a94:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f7ff ff58 	bl	8007952 <get_ldnumber>
 8007aa2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	da01      	bge.n	8007aae <find_volume+0x26>
 8007aaa:	230b      	movs	r3, #11
 8007aac:	e22e      	b.n	8007f0c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007aae:	4aa8      	ldr	r2, [pc, #672]	; (8007d50 <find_volume+0x2c8>)
 8007ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ab6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d101      	bne.n	8007ac2 <find_volume+0x3a>
 8007abe:	230c      	movs	r3, #12
 8007ac0:	e224      	b.n	8007f0c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ac6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007ac8:	79fb      	ldrb	r3, [r7, #7]
 8007aca:	f023 0301 	bic.w	r3, r3, #1
 8007ace:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d01a      	beq.n	8007b0e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ada:	785b      	ldrb	r3, [r3, #1]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7fe fbb9 	bl	8006254 <disk_status>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007ae8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007aec:	f003 0301 	and.w	r3, r3, #1
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10c      	bne.n	8007b0e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007af4:	79fb      	ldrb	r3, [r7, #7]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d007      	beq.n	8007b0a <find_volume+0x82>
 8007afa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007afe:	f003 0304 	and.w	r3, r3, #4
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007b06:	230a      	movs	r3, #10
 8007b08:	e200      	b.n	8007f0c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	e1fe      	b.n	8007f0c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b10:	2200      	movs	r2, #0
 8007b12:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b16:	b2da      	uxtb	r2, r3
 8007b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1e:	785b      	ldrb	r3, [r3, #1]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7fe fbb1 	bl	8006288 <disk_initialize>
 8007b26:	4603      	mov	r3, r0
 8007b28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007b2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d001      	beq.n	8007b3c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007b38:	2303      	movs	r3, #3
 8007b3a:	e1e7      	b.n	8007f0c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007b3c:	79fb      	ldrb	r3, [r7, #7]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d007      	beq.n	8007b52 <find_volume+0xca>
 8007b42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b46:	f003 0304 	and.w	r3, r3, #4
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007b4e:	230a      	movs	r3, #10
 8007b50:	e1dc      	b.n	8007f0c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007b52:	2300      	movs	r3, #0
 8007b54:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007b56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b5a:	f7ff ff3f 	bl	80079dc <check_fs>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007b64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d14b      	bne.n	8007c04 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	643b      	str	r3, [r7, #64]	; 0x40
 8007b70:	e01f      	b.n	8007bb2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b74:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b7a:	011b      	lsls	r3, r3, #4
 8007b7c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007b80:	4413      	add	r3, r2
 8007b82:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b86:	3304      	adds	r3, #4
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d006      	beq.n	8007b9c <find_volume+0x114>
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b90:	3308      	adds	r3, #8
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7fe fc14 	bl	80063c0 <ld_dword>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	e000      	b.n	8007b9e <find_volume+0x116>
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007ba6:	440b      	add	r3, r1
 8007ba8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bae:	3301      	adds	r3, #1
 8007bb0:	643b      	str	r3, [r7, #64]	; 0x40
 8007bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bb4:	2b03      	cmp	r3, #3
 8007bb6:	d9dc      	bls.n	8007b72 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007bb8:	2300      	movs	r3, #0
 8007bba:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d002      	beq.n	8007bc8 <find_volume+0x140>
 8007bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007bd6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007bd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d005      	beq.n	8007bea <find_volume+0x162>
 8007bde:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007be0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007be2:	f7ff fefb 	bl	80079dc <check_fs>
 8007be6:	4603      	mov	r3, r0
 8007be8:	e000      	b.n	8007bec <find_volume+0x164>
 8007bea:	2303      	movs	r3, #3
 8007bec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007bf0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d905      	bls.n	8007c04 <find_volume+0x17c>
 8007bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	643b      	str	r3, [r7, #64]	; 0x40
 8007bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c00:	2b03      	cmp	r3, #3
 8007c02:	d9e1      	bls.n	8007bc8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007c04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c08:	2b04      	cmp	r3, #4
 8007c0a:	d101      	bne.n	8007c10 <find_volume+0x188>
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e17d      	b.n	8007f0c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007c10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d901      	bls.n	8007c1c <find_volume+0x194>
 8007c18:	230d      	movs	r3, #13
 8007c1a:	e177      	b.n	8007f0c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1e:	3330      	adds	r3, #48	; 0x30
 8007c20:	330b      	adds	r3, #11
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7fe fbb4 	bl	8006390 <ld_word>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c2e:	d001      	beq.n	8007c34 <find_volume+0x1ac>
 8007c30:	230d      	movs	r3, #13
 8007c32:	e16b      	b.n	8007f0c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c36:	3330      	adds	r3, #48	; 0x30
 8007c38:	3316      	adds	r3, #22
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fe fba8 	bl	8006390 <ld_word>
 8007c40:	4603      	mov	r3, r0
 8007c42:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d106      	bne.n	8007c58 <find_volume+0x1d0>
 8007c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4c:	3330      	adds	r3, #48	; 0x30
 8007c4e:	3324      	adds	r3, #36	; 0x24
 8007c50:	4618      	mov	r0, r3
 8007c52:	f7fe fbb5 	bl	80063c0 <ld_dword>
 8007c56:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c5c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c60:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8007c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c66:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6a:	789b      	ldrb	r3, [r3, #2]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d005      	beq.n	8007c7c <find_volume+0x1f4>
 8007c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c72:	789b      	ldrb	r3, [r3, #2]
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d001      	beq.n	8007c7c <find_volume+0x1f4>
 8007c78:	230d      	movs	r3, #13
 8007c7a:	e147      	b.n	8007f0c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7e:	789b      	ldrb	r3, [r3, #2]
 8007c80:	461a      	mov	r2, r3
 8007c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c84:	fb02 f303 	mul.w	r3, r2, r3
 8007c88:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c94:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c98:	895b      	ldrh	r3, [r3, #10]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d008      	beq.n	8007cb0 <find_volume+0x228>
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca0:	895b      	ldrh	r3, [r3, #10]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca6:	895b      	ldrh	r3, [r3, #10]
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	4013      	ands	r3, r2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d001      	beq.n	8007cb4 <find_volume+0x22c>
 8007cb0:	230d      	movs	r3, #13
 8007cb2:	e12b      	b.n	8007f0c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb6:	3330      	adds	r3, #48	; 0x30
 8007cb8:	3311      	adds	r3, #17
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7fe fb68 	bl	8006390 <ld_word>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cca:	891b      	ldrh	r3, [r3, #8]
 8007ccc:	f003 030f 	and.w	r3, r3, #15
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <find_volume+0x252>
 8007cd6:	230d      	movs	r3, #13
 8007cd8:	e118      	b.n	8007f0c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cdc:	3330      	adds	r3, #48	; 0x30
 8007cde:	3313      	adds	r3, #19
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7fe fb55 	bl	8006390 <ld_word>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d106      	bne.n	8007cfe <find_volume+0x276>
 8007cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf2:	3330      	adds	r3, #48	; 0x30
 8007cf4:	3320      	adds	r3, #32
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fe fb62 	bl	80063c0 <ld_dword>
 8007cfc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d00:	3330      	adds	r3, #48	; 0x30
 8007d02:	330e      	adds	r3, #14
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7fe fb43 	bl	8006390 <ld_word>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007d0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d101      	bne.n	8007d18 <find_volume+0x290>
 8007d14:	230d      	movs	r3, #13
 8007d16:	e0f9      	b.n	8007f0c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007d18:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d1c:	4413      	add	r3, r2
 8007d1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d20:	8912      	ldrh	r2, [r2, #8]
 8007d22:	0912      	lsrs	r2, r2, #4
 8007d24:	b292      	uxth	r2, r2
 8007d26:	4413      	add	r3, r2
 8007d28:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007d2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d201      	bcs.n	8007d36 <find_volume+0x2ae>
 8007d32:	230d      	movs	r3, #13
 8007d34:	e0ea      	b.n	8007f0c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007d36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d3e:	8952      	ldrh	r2, [r2, #10]
 8007d40:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d44:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d103      	bne.n	8007d54 <find_volume+0x2cc>
 8007d4c:	230d      	movs	r3, #13
 8007d4e:	e0dd      	b.n	8007f0c <find_volume+0x484>
 8007d50:	2000009c 	.word	0x2000009c
		fmt = FS_FAT32;
 8007d54:	2303      	movs	r3, #3
 8007d56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d802      	bhi.n	8007d6a <find_volume+0x2e2>
 8007d64:	2302      	movs	r3, #2
 8007d66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d802      	bhi.n	8007d7a <find_volume+0x2f2>
 8007d74:	2301      	movs	r3, #1
 8007d76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	1c9a      	adds	r2, r3, #2
 8007d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d80:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d86:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007d88:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d8c:	441a      	add	r2, r3
 8007d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d90:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007d92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d96:	441a      	add	r2, r3
 8007d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8007d9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007da0:	2b03      	cmp	r3, #3
 8007da2:	d11e      	bne.n	8007de2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da6:	3330      	adds	r3, #48	; 0x30
 8007da8:	332a      	adds	r3, #42	; 0x2a
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fe faf0 	bl	8006390 <ld_word>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <find_volume+0x332>
 8007db6:	230d      	movs	r3, #13
 8007db8:	e0a8      	b.n	8007f0c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dbc:	891b      	ldrh	r3, [r3, #8]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <find_volume+0x33e>
 8007dc2:	230d      	movs	r3, #13
 8007dc4:	e0a2      	b.n	8007f0c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc8:	3330      	adds	r3, #48	; 0x30
 8007dca:	332c      	adds	r3, #44	; 0x2c
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7fe faf7 	bl	80063c0 <ld_dword>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	647b      	str	r3, [r7, #68]	; 0x44
 8007de0:	e01f      	b.n	8007e22 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de4:	891b      	ldrh	r3, [r3, #8]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d101      	bne.n	8007dee <find_volume+0x366>
 8007dea:	230d      	movs	r3, #13
 8007dec:	e08e      	b.n	8007f0c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df0:	6a1a      	ldr	r2, [r3, #32]
 8007df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007df4:	441a      	add	r2, r3
 8007df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007dfa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d103      	bne.n	8007e0a <find_volume+0x382>
 8007e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	005b      	lsls	r3, r3, #1
 8007e08:	e00a      	b.n	8007e20 <find_volume+0x398>
 8007e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0c:	695a      	ldr	r2, [r3, #20]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	005b      	lsls	r3, r3, #1
 8007e12:	4413      	add	r3, r2
 8007e14:	085a      	lsrs	r2, r3, #1
 8007e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	f003 0301 	and.w	r3, r3, #1
 8007e1e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007e20:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e24:	699a      	ldr	r2, [r3, #24]
 8007e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e28:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007e2c:	0a5b      	lsrs	r3, r3, #9
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d201      	bcs.n	8007e36 <find_volume+0x3ae>
 8007e32:	230d      	movs	r3, #13
 8007e34:	e06a      	b.n	8007f0c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e38:	f04f 32ff 	mov.w	r2, #4294967295
 8007e3c:	611a      	str	r2, [r3, #16]
 8007e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e40:	691a      	ldr	r2, [r3, #16]
 8007e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e44:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e48:	2280      	movs	r2, #128	; 0x80
 8007e4a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007e4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e50:	2b03      	cmp	r3, #3
 8007e52:	d149      	bne.n	8007ee8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e56:	3330      	adds	r3, #48	; 0x30
 8007e58:	3330      	adds	r3, #48	; 0x30
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fe fa98 	bl	8006390 <ld_word>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d140      	bne.n	8007ee8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e68:	3301      	adds	r3, #1
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e6e:	f7fe fd3f 	bl	80068f0 <move_window>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d137      	bne.n	8007ee8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8007e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e80:	3330      	adds	r3, #48	; 0x30
 8007e82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fe fa82 	bl	8006390 <ld_word>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	461a      	mov	r2, r3
 8007e90:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d127      	bne.n	8007ee8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9a:	3330      	adds	r3, #48	; 0x30
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fe fa8f 	bl	80063c0 <ld_dword>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	4a1b      	ldr	r2, [pc, #108]	; (8007f14 <find_volume+0x48c>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d11e      	bne.n	8007ee8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eac:	3330      	adds	r3, #48	; 0x30
 8007eae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fe fa84 	bl	80063c0 <ld_dword>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	4a17      	ldr	r2, [pc, #92]	; (8007f18 <find_volume+0x490>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d113      	bne.n	8007ee8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec2:	3330      	adds	r3, #48	; 0x30
 8007ec4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fe fa79 	bl	80063c0 <ld_dword>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed2:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed6:	3330      	adds	r3, #48	; 0x30
 8007ed8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fe fa6f 	bl	80063c0 <ld_dword>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee6:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eea:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007eee:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007ef0:	4b0a      	ldr	r3, [pc, #40]	; (8007f1c <find_volume+0x494>)
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	4b08      	ldr	r3, [pc, #32]	; (8007f1c <find_volume+0x494>)
 8007efa:	801a      	strh	r2, [r3, #0]
 8007efc:	4b07      	ldr	r3, [pc, #28]	; (8007f1c <find_volume+0x494>)
 8007efe:	881a      	ldrh	r2, [r3, #0]
 8007f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f02:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007f04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f06:	f7fe fc8b 	bl	8006820 <clear_lock>
#endif
	return FR_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3758      	adds	r7, #88	; 0x58
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	41615252 	.word	0x41615252
 8007f18:	61417272 	.word	0x61417272
 8007f1c:	200000a0 	.word	0x200000a0

08007f20 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007f2a:	2309      	movs	r3, #9
 8007f2c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d01c      	beq.n	8007f6e <validate+0x4e>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d018      	beq.n	8007f6e <validate+0x4e>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d013      	beq.n	8007f6e <validate+0x4e>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	889a      	ldrh	r2, [r3, #4]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	88db      	ldrh	r3, [r3, #6]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d10c      	bne.n	8007f6e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	785b      	ldrb	r3, [r3, #1]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7fe f97a 	bl	8006254 <disk_status>
 8007f60:	4603      	mov	r3, r0
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <validate+0x4e>
			res = FR_OK;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007f6e:	7bfb      	ldrb	r3, [r7, #15]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d102      	bne.n	8007f7a <validate+0x5a>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	e000      	b.n	8007f7c <validate+0x5c>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	683a      	ldr	r2, [r7, #0]
 8007f7e:	6013      	str	r3, [r2, #0]
	return res;
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
	...

08007f8c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b088      	sub	sp, #32
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	4613      	mov	r3, r2
 8007f98:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007f9e:	f107 0310 	add.w	r3, r7, #16
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7ff fcd5 	bl	8007952 <get_ldnumber>
 8007fa8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	da01      	bge.n	8007fb4 <f_mount+0x28>
 8007fb0:	230b      	movs	r3, #11
 8007fb2:	e02b      	b.n	800800c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007fb4:	4a17      	ldr	r2, [pc, #92]	; (8008014 <f_mount+0x88>)
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fbc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d005      	beq.n	8007fd0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007fc4:	69b8      	ldr	r0, [r7, #24]
 8007fc6:	f7fe fc2b 	bl	8006820 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d002      	beq.n	8007fdc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	490d      	ldr	r1, [pc, #52]	; (8008014 <f_mount+0x88>)
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d002      	beq.n	8007ff2 <f_mount+0x66>
 8007fec:	79fb      	ldrb	r3, [r7, #7]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d001      	beq.n	8007ff6 <f_mount+0x6a>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	e00a      	b.n	800800c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007ff6:	f107 010c 	add.w	r1, r7, #12
 8007ffa:	f107 0308 	add.w	r3, r7, #8
 8007ffe:	2200      	movs	r2, #0
 8008000:	4618      	mov	r0, r3
 8008002:	f7ff fd41 	bl	8007a88 <find_volume>
 8008006:	4603      	mov	r3, r0
 8008008:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800800a:	7dfb      	ldrb	r3, [r7, #23]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3720      	adds	r7, #32
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	2000009c 	.word	0x2000009c

08008018 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b09a      	sub	sp, #104	; 0x68
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	4613      	mov	r3, r2
 8008024:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d101      	bne.n	8008030 <f_open+0x18>
 800802c:	2309      	movs	r3, #9
 800802e:	e1ad      	b.n	800838c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008030:	79fb      	ldrb	r3, [r7, #7]
 8008032:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008036:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008038:	79fa      	ldrb	r2, [r7, #7]
 800803a:	f107 0114 	add.w	r1, r7, #20
 800803e:	f107 0308 	add.w	r3, r7, #8
 8008042:	4618      	mov	r0, r3
 8008044:	f7ff fd20 	bl	8007a88 <find_volume>
 8008048:	4603      	mov	r3, r0
 800804a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800804e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008052:	2b00      	cmp	r3, #0
 8008054:	f040 8191 	bne.w	800837a <f_open+0x362>
		dj.obj.fs = fs;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	f107 0318 	add.w	r3, r7, #24
 8008062:	4611      	mov	r1, r2
 8008064:	4618      	mov	r0, r3
 8008066:	f7ff fc03 	bl	8007870 <follow_path>
 800806a:	4603      	mov	r3, r0
 800806c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008070:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008074:	2b00      	cmp	r3, #0
 8008076:	d11a      	bne.n	80080ae <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008078:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800807c:	b25b      	sxtb	r3, r3
 800807e:	2b00      	cmp	r3, #0
 8008080:	da03      	bge.n	800808a <f_open+0x72>
				res = FR_INVALID_NAME;
 8008082:	2306      	movs	r3, #6
 8008084:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008088:	e011      	b.n	80080ae <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800808a:	79fb      	ldrb	r3, [r7, #7]
 800808c:	f023 0301 	bic.w	r3, r3, #1
 8008090:	2b00      	cmp	r3, #0
 8008092:	bf14      	ite	ne
 8008094:	2301      	movne	r3, #1
 8008096:	2300      	moveq	r3, #0
 8008098:	b2db      	uxtb	r3, r3
 800809a:	461a      	mov	r2, r3
 800809c:	f107 0318 	add.w	r3, r7, #24
 80080a0:	4611      	mov	r1, r2
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fe fa74 	bl	8006590 <chk_lock>
 80080a8:	4603      	mov	r3, r0
 80080aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80080ae:	79fb      	ldrb	r3, [r7, #7]
 80080b0:	f003 031c 	and.w	r3, r3, #28
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d07f      	beq.n	80081b8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80080b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d017      	beq.n	80080f0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80080c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80080c4:	2b04      	cmp	r3, #4
 80080c6:	d10e      	bne.n	80080e6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80080c8:	f7fe fabe 	bl	8006648 <enq_lock>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d006      	beq.n	80080e0 <f_open+0xc8>
 80080d2:	f107 0318 	add.w	r3, r7, #24
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7ff fa02 	bl	80074e0 <dir_register>
 80080dc:	4603      	mov	r3, r0
 80080de:	e000      	b.n	80080e2 <f_open+0xca>
 80080e0:	2312      	movs	r3, #18
 80080e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80080e6:	79fb      	ldrb	r3, [r7, #7]
 80080e8:	f043 0308 	orr.w	r3, r3, #8
 80080ec:	71fb      	strb	r3, [r7, #7]
 80080ee:	e010      	b.n	8008112 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80080f0:	7fbb      	ldrb	r3, [r7, #30]
 80080f2:	f003 0311 	and.w	r3, r3, #17
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <f_open+0xea>
					res = FR_DENIED;
 80080fa:	2307      	movs	r3, #7
 80080fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008100:	e007      	b.n	8008112 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008102:	79fb      	ldrb	r3, [r7, #7]
 8008104:	f003 0304 	and.w	r3, r3, #4
 8008108:	2b00      	cmp	r3, #0
 800810a:	d002      	beq.n	8008112 <f_open+0xfa>
 800810c:	2308      	movs	r3, #8
 800810e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008112:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008116:	2b00      	cmp	r3, #0
 8008118:	d168      	bne.n	80081ec <f_open+0x1d4>
 800811a:	79fb      	ldrb	r3, [r7, #7]
 800811c:	f003 0308 	and.w	r3, r3, #8
 8008120:	2b00      	cmp	r3, #0
 8008122:	d063      	beq.n	80081ec <f_open+0x1d4>
				dw = GET_FATTIME();
 8008124:	f7fd fe46 	bl	8005db4 <get_fattime>
 8008128:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800812a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812c:	330e      	adds	r3, #14
 800812e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008130:	4618      	mov	r0, r3
 8008132:	f7fe f983 	bl	800643c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008138:	3316      	adds	r3, #22
 800813a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800813c:	4618      	mov	r0, r3
 800813e:	f7fe f97d 	bl	800643c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008144:	330b      	adds	r3, #11
 8008146:	2220      	movs	r2, #32
 8008148:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800814e:	4611      	mov	r1, r2
 8008150:	4618      	mov	r0, r3
 8008152:	f7ff f8d4 	bl	80072fe <ld_clust>
 8008156:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800815c:	2200      	movs	r2, #0
 800815e:	4618      	mov	r0, r3
 8008160:	f7ff f8ec 	bl	800733c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008166:	331c      	adds	r3, #28
 8008168:	2100      	movs	r1, #0
 800816a:	4618      	mov	r0, r3
 800816c:	f7fe f966 	bl	800643c <st_dword>
					fs->wflag = 1;
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	2201      	movs	r2, #1
 8008174:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008178:	2b00      	cmp	r3, #0
 800817a:	d037      	beq.n	80081ec <f_open+0x1d4>
						dw = fs->winsect;
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008180:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8008182:	f107 0318 	add.w	r3, r7, #24
 8008186:	2200      	movs	r2, #0
 8008188:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800818a:	4618      	mov	r0, r3
 800818c:	f7fe fdff 	bl	8006d8e <remove_chain>
 8008190:	4603      	mov	r3, r0
 8008192:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8008196:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800819a:	2b00      	cmp	r3, #0
 800819c:	d126      	bne.n	80081ec <f_open+0x1d4>
							res = move_window(fs, dw);
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7fe fba4 	bl	80068f0 <move_window>
 80081a8:	4603      	mov	r3, r0
 80081aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80081b2:	3a01      	subs	r2, #1
 80081b4:	60da      	str	r2, [r3, #12]
 80081b6:	e019      	b.n	80081ec <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80081b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d115      	bne.n	80081ec <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80081c0:	7fbb      	ldrb	r3, [r7, #30]
 80081c2:	f003 0310 	and.w	r3, r3, #16
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <f_open+0x1ba>
					res = FR_NO_FILE;
 80081ca:	2304      	movs	r3, #4
 80081cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80081d0:	e00c      	b.n	80081ec <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80081d2:	79fb      	ldrb	r3, [r7, #7]
 80081d4:	f003 0302 	and.w	r3, r3, #2
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d007      	beq.n	80081ec <f_open+0x1d4>
 80081dc:	7fbb      	ldrb	r3, [r7, #30]
 80081de:	f003 0301 	and.w	r3, r3, #1
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d002      	beq.n	80081ec <f_open+0x1d4>
						res = FR_DENIED;
 80081e6:	2307      	movs	r3, #7
 80081e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80081ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d128      	bne.n	8008246 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80081f4:	79fb      	ldrb	r3, [r7, #7]
 80081f6:	f003 0308 	and.w	r3, r3, #8
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d003      	beq.n	8008206 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80081fe:	79fb      	ldrb	r3, [r7, #7]
 8008200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008204:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800820e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008214:	79fb      	ldrb	r3, [r7, #7]
 8008216:	f023 0301 	bic.w	r3, r3, #1
 800821a:	2b00      	cmp	r3, #0
 800821c:	bf14      	ite	ne
 800821e:	2301      	movne	r3, #1
 8008220:	2300      	moveq	r3, #0
 8008222:	b2db      	uxtb	r3, r3
 8008224:	461a      	mov	r2, r3
 8008226:	f107 0318 	add.w	r3, r7, #24
 800822a:	4611      	mov	r1, r2
 800822c:	4618      	mov	r0, r3
 800822e:	f7fe fa2d 	bl	800668c <inc_lock>
 8008232:	4602      	mov	r2, r0
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d102      	bne.n	8008246 <f_open+0x22e>
 8008240:	2302      	movs	r3, #2
 8008242:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008246:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800824a:	2b00      	cmp	r3, #0
 800824c:	f040 8095 	bne.w	800837a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008254:	4611      	mov	r1, r2
 8008256:	4618      	mov	r0, r3
 8008258:	f7ff f851 	bl	80072fe <ld_clust>
 800825c:	4602      	mov	r2, r0
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008264:	331c      	adds	r3, #28
 8008266:	4618      	mov	r0, r3
 8008268:	f7fe f8aa 	bl	80063c0 <ld_dword>
 800826c:	4602      	mov	r2, r0
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008278:	697a      	ldr	r2, [r7, #20]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	88da      	ldrh	r2, [r3, #6]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	79fa      	ldrb	r2, [r7, #7]
 800828a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	3330      	adds	r3, #48	; 0x30
 80082a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082a6:	2100      	movs	r1, #0
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7fe f914 	bl	80064d6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80082ae:	79fb      	ldrb	r3, [r7, #7]
 80082b0:	f003 0320 	and.w	r3, r3, #32
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d060      	beq.n	800837a <f_open+0x362>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d05c      	beq.n	800837a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	68da      	ldr	r2, [r3, #12]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	895b      	ldrh	r3, [r3, #10]
 80082cc:	025b      	lsls	r3, r3, #9
 80082ce:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082dc:	e016      	b.n	800830c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fe fbbf 	bl	8006a66 <get_fat>
 80082e8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80082ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d802      	bhi.n	80082f6 <f_open+0x2de>
 80082f0:	2302      	movs	r3, #2
 80082f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80082f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082fc:	d102      	bne.n	8008304 <f_open+0x2ec>
 80082fe:	2301      	movs	r3, #1
 8008300:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008304:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800830c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008310:	2b00      	cmp	r3, #0
 8008312:	d103      	bne.n	800831c <f_open+0x304>
 8008314:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008318:	429a      	cmp	r2, r3
 800831a:	d8e0      	bhi.n	80082de <f_open+0x2c6>
				}
				fp->clust = clst;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008320:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008322:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008326:	2b00      	cmp	r3, #0
 8008328:	d127      	bne.n	800837a <f_open+0x362>
 800832a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800832c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008330:	2b00      	cmp	r3, #0
 8008332:	d022      	beq.n	800837a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008338:	4618      	mov	r0, r3
 800833a:	f7fe fb75 	bl	8006a28 <clust2sect>
 800833e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008342:	2b00      	cmp	r3, #0
 8008344:	d103      	bne.n	800834e <f_open+0x336>
						res = FR_INT_ERR;
 8008346:	2302      	movs	r3, #2
 8008348:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800834c:	e015      	b.n	800837a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800834e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008350:	0a5a      	lsrs	r2, r3, #9
 8008352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008354:	441a      	add	r2, r3
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	7858      	ldrb	r0, [r3, #1]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6a1a      	ldr	r2, [r3, #32]
 8008368:	2301      	movs	r3, #1
 800836a:	f7fd ffb3 	bl	80062d4 <disk_read>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d002      	beq.n	800837a <f_open+0x362>
 8008374:	2301      	movs	r3, #1
 8008376:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800837a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800837e:	2b00      	cmp	r3, #0
 8008380:	d002      	beq.n	8008388 <f_open+0x370>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008388:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800838c:	4618      	mov	r0, r3
 800838e:	3768      	adds	r7, #104	; 0x68
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b08e      	sub	sp, #56	; 0x38
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
 80083a0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	2200      	movs	r2, #0
 80083aa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f107 0214 	add.w	r2, r7, #20
 80083b2:	4611      	mov	r1, r2
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7ff fdb3 	bl	8007f20 <validate>
 80083ba:	4603      	mov	r3, r0
 80083bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80083c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d107      	bne.n	80083d8 <f_read+0x44>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	7d5b      	ldrb	r3, [r3, #21]
 80083cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80083d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d002      	beq.n	80083de <f_read+0x4a>
 80083d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80083dc:	e115      	b.n	800860a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	7d1b      	ldrb	r3, [r3, #20]
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <f_read+0x5a>
 80083ea:	2307      	movs	r3, #7
 80083ec:	e10d      	b.n	800860a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	68da      	ldr	r2, [r3, #12]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	699b      	ldr	r3, [r3, #24]
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	6a3b      	ldr	r3, [r7, #32]
 80083fe:	429a      	cmp	r2, r3
 8008400:	f240 80fe 	bls.w	8008600 <f_read+0x26c>
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008408:	e0fa      	b.n	8008600 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008412:	2b00      	cmp	r3, #0
 8008414:	f040 80c6 	bne.w	80085a4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	699b      	ldr	r3, [r3, #24]
 800841c:	0a5b      	lsrs	r3, r3, #9
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	8952      	ldrh	r2, [r2, #10]
 8008422:	3a01      	subs	r2, #1
 8008424:	4013      	ands	r3, r2
 8008426:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d12f      	bne.n	800848e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d103      	bne.n	800843e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	633b      	str	r3, [r7, #48]	; 0x30
 800843c:	e013      	b.n	8008466 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008442:	2b00      	cmp	r3, #0
 8008444:	d007      	beq.n	8008456 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	4619      	mov	r1, r3
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f7fe fd9b 	bl	8006f88 <clmt_clust>
 8008452:	6338      	str	r0, [r7, #48]	; 0x30
 8008454:	e007      	b.n	8008466 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	69db      	ldr	r3, [r3, #28]
 800845c:	4619      	mov	r1, r3
 800845e:	4610      	mov	r0, r2
 8008460:	f7fe fb01 	bl	8006a66 <get_fat>
 8008464:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008468:	2b01      	cmp	r3, #1
 800846a:	d804      	bhi.n	8008476 <f_read+0xe2>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2202      	movs	r2, #2
 8008470:	755a      	strb	r2, [r3, #21]
 8008472:	2302      	movs	r3, #2
 8008474:	e0c9      	b.n	800860a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800847c:	d104      	bne.n	8008488 <f_read+0xf4>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2201      	movs	r2, #1
 8008482:	755a      	strb	r2, [r3, #21]
 8008484:	2301      	movs	r3, #1
 8008486:	e0c0      	b.n	800860a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800848c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800848e:	697a      	ldr	r2, [r7, #20]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	69db      	ldr	r3, [r3, #28]
 8008494:	4619      	mov	r1, r3
 8008496:	4610      	mov	r0, r2
 8008498:	f7fe fac6 	bl	8006a28 <clust2sect>
 800849c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d104      	bne.n	80084ae <f_read+0x11a>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2202      	movs	r2, #2
 80084a8:	755a      	strb	r2, [r3, #21]
 80084aa:	2302      	movs	r3, #2
 80084ac:	e0ad      	b.n	800860a <f_read+0x276>
			sect += csect;
 80084ae:	69ba      	ldr	r2, [r7, #24]
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	4413      	add	r3, r2
 80084b4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	0a5b      	lsrs	r3, r3, #9
 80084ba:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80084bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d039      	beq.n	8008536 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80084c2:	69fa      	ldr	r2, [r7, #28]
 80084c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c6:	4413      	add	r3, r2
 80084c8:	697a      	ldr	r2, [r7, #20]
 80084ca:	8952      	ldrh	r2, [r2, #10]
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d905      	bls.n	80084dc <f_read+0x148>
					cc = fs->csize - csect;
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	895b      	ldrh	r3, [r3, #10]
 80084d4:	461a      	mov	r2, r3
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	7858      	ldrb	r0, [r3, #1]
 80084e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e2:	69ba      	ldr	r2, [r7, #24]
 80084e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084e6:	f7fd fef5 	bl	80062d4 <disk_read>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d004      	beq.n	80084fa <f_read+0x166>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2201      	movs	r2, #1
 80084f4:	755a      	strb	r2, [r3, #21]
 80084f6:	2301      	movs	r3, #1
 80084f8:	e087      	b.n	800860a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	7d1b      	ldrb	r3, [r3, #20]
 80084fe:	b25b      	sxtb	r3, r3
 8008500:	2b00      	cmp	r3, #0
 8008502:	da14      	bge.n	800852e <f_read+0x19a>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6a1a      	ldr	r2, [r3, #32]
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800850e:	429a      	cmp	r2, r3
 8008510:	d90d      	bls.n	800852e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6a1a      	ldr	r2, [r3, #32]
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	025b      	lsls	r3, r3, #9
 800851c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800851e:	18d0      	adds	r0, r2, r3
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	3330      	adds	r3, #48	; 0x30
 8008524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008528:	4619      	mov	r1, r3
 800852a:	f7fd ffb3 	bl	8006494 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800852e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008530:	025b      	lsls	r3, r3, #9
 8008532:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008534:	e050      	b.n	80085d8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6a1b      	ldr	r3, [r3, #32]
 800853a:	69ba      	ldr	r2, [r7, #24]
 800853c:	429a      	cmp	r2, r3
 800853e:	d02e      	beq.n	800859e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	7d1b      	ldrb	r3, [r3, #20]
 8008544:	b25b      	sxtb	r3, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	da18      	bge.n	800857c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	7858      	ldrb	r0, [r3, #1]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6a1a      	ldr	r2, [r3, #32]
 8008558:	2301      	movs	r3, #1
 800855a:	f7fd fedb 	bl	8006314 <disk_write>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d004      	beq.n	800856e <f_read+0x1da>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2201      	movs	r2, #1
 8008568:	755a      	strb	r2, [r3, #21]
 800856a:	2301      	movs	r3, #1
 800856c:	e04d      	b.n	800860a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	7d1b      	ldrb	r3, [r3, #20]
 8008572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008576:	b2da      	uxtb	r2, r3
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	7858      	ldrb	r0, [r3, #1]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008586:	2301      	movs	r3, #1
 8008588:	69ba      	ldr	r2, [r7, #24]
 800858a:	f7fd fea3 	bl	80062d4 <disk_read>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d004      	beq.n	800859e <f_read+0x20a>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2201      	movs	r2, #1
 8008598:	755a      	strb	r2, [r3, #21]
 800859a:	2301      	movs	r3, #1
 800859c:	e035      	b.n	800860a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	69ba      	ldr	r2, [r7, #24]
 80085a2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ac:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80085b0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80085b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d901      	bls.n	80085be <f_read+0x22a>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	699b      	ldr	r3, [r3, #24]
 80085c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085cc:	4413      	add	r3, r2
 80085ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085d0:	4619      	mov	r1, r3
 80085d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085d4:	f7fd ff5e 	bl	8006494 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80085d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085dc:	4413      	add	r3, r2
 80085de:	627b      	str	r3, [r7, #36]	; 0x24
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	699a      	ldr	r2, [r3, #24]
 80085e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e6:	441a      	add	r2, r3
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	619a      	str	r2, [r3, #24]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f2:	441a      	add	r2, r3
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	601a      	str	r2, [r3, #0]
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2b00      	cmp	r3, #0
 8008604:	f47f af01 	bne.w	800840a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3738      	adds	r7, #56	; 0x38
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b08c      	sub	sp, #48	; 0x30
 8008616:	af00      	add	r7, sp, #0
 8008618:	60f8      	str	r0, [r7, #12]
 800861a:	60b9      	str	r1, [r7, #8]
 800861c:	607a      	str	r2, [r7, #4]
 800861e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	2200      	movs	r2, #0
 8008628:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f107 0210 	add.w	r2, r7, #16
 8008630:	4611      	mov	r1, r2
 8008632:	4618      	mov	r0, r3
 8008634:	f7ff fc74 	bl	8007f20 <validate>
 8008638:	4603      	mov	r3, r0
 800863a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800863e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008642:	2b00      	cmp	r3, #0
 8008644:	d107      	bne.n	8008656 <f_write+0x44>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	7d5b      	ldrb	r3, [r3, #21]
 800864a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800864e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008652:	2b00      	cmp	r3, #0
 8008654:	d002      	beq.n	800865c <f_write+0x4a>
 8008656:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800865a:	e14b      	b.n	80088f4 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	7d1b      	ldrb	r3, [r3, #20]
 8008660:	f003 0302 	and.w	r3, r3, #2
 8008664:	2b00      	cmp	r3, #0
 8008666:	d101      	bne.n	800866c <f_write+0x5a>
 8008668:	2307      	movs	r3, #7
 800866a:	e143      	b.n	80088f4 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	699a      	ldr	r2, [r3, #24]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	441a      	add	r2, r3
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	429a      	cmp	r2, r3
 800867a:	f080 812d 	bcs.w	80088d8 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	43db      	mvns	r3, r3
 8008684:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008686:	e127      	b.n	80088d8 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	699b      	ldr	r3, [r3, #24]
 800868c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008690:	2b00      	cmp	r3, #0
 8008692:	f040 80e3 	bne.w	800885c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	0a5b      	lsrs	r3, r3, #9
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	8952      	ldrh	r2, [r2, #10]
 80086a0:	3a01      	subs	r2, #1
 80086a2:	4013      	ands	r3, r2
 80086a4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d143      	bne.n	8008734 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d10c      	bne.n	80086ce <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80086ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d11a      	bne.n	80086f6 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2100      	movs	r1, #0
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7fe fbc7 	bl	8006e58 <create_chain>
 80086ca:	62b8      	str	r0, [r7, #40]	; 0x28
 80086cc:	e013      	b.n	80086f6 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d007      	beq.n	80086e6 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	4619      	mov	r1, r3
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f7fe fc53 	bl	8006f88 <clmt_clust>
 80086e2:	62b8      	str	r0, [r7, #40]	; 0x28
 80086e4:	e007      	b.n	80086f6 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	69db      	ldr	r3, [r3, #28]
 80086ec:	4619      	mov	r1, r3
 80086ee:	4610      	mov	r0, r2
 80086f0:	f7fe fbb2 	bl	8006e58 <create_chain>
 80086f4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80086f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 80f2 	beq.w	80088e2 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80086fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008700:	2b01      	cmp	r3, #1
 8008702:	d104      	bne.n	800870e <f_write+0xfc>
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2202      	movs	r2, #2
 8008708:	755a      	strb	r2, [r3, #21]
 800870a:	2302      	movs	r3, #2
 800870c:	e0f2      	b.n	80088f4 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800870e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008714:	d104      	bne.n	8008720 <f_write+0x10e>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2201      	movs	r2, #1
 800871a:	755a      	strb	r2, [r3, #21]
 800871c:	2301      	movs	r3, #1
 800871e:	e0e9      	b.n	80088f4 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008724:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d102      	bne.n	8008734 <f_write+0x122>
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008732:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	7d1b      	ldrb	r3, [r3, #20]
 8008738:	b25b      	sxtb	r3, r3
 800873a:	2b00      	cmp	r3, #0
 800873c:	da18      	bge.n	8008770 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	7858      	ldrb	r0, [r3, #1]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6a1a      	ldr	r2, [r3, #32]
 800874c:	2301      	movs	r3, #1
 800874e:	f7fd fde1 	bl	8006314 <disk_write>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d004      	beq.n	8008762 <f_write+0x150>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2201      	movs	r2, #1
 800875c:	755a      	strb	r2, [r3, #21]
 800875e:	2301      	movs	r3, #1
 8008760:	e0c8      	b.n	80088f4 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	7d1b      	ldrb	r3, [r3, #20]
 8008766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800876a:	b2da      	uxtb	r2, r3
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	69db      	ldr	r3, [r3, #28]
 8008776:	4619      	mov	r1, r3
 8008778:	4610      	mov	r0, r2
 800877a:	f7fe f955 	bl	8006a28 <clust2sect>
 800877e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d104      	bne.n	8008790 <f_write+0x17e>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2202      	movs	r2, #2
 800878a:	755a      	strb	r2, [r3, #21]
 800878c:	2302      	movs	r3, #2
 800878e:	e0b1      	b.n	80088f4 <f_write+0x2e2>
			sect += csect;
 8008790:	697a      	ldr	r2, [r7, #20]
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	4413      	add	r3, r2
 8008796:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	0a5b      	lsrs	r3, r3, #9
 800879c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800879e:	6a3b      	ldr	r3, [r7, #32]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d03c      	beq.n	800881e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80087a4:	69ba      	ldr	r2, [r7, #24]
 80087a6:	6a3b      	ldr	r3, [r7, #32]
 80087a8:	4413      	add	r3, r2
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	8952      	ldrh	r2, [r2, #10]
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d905      	bls.n	80087be <f_write+0x1ac>
					cc = fs->csize - csect;
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	895b      	ldrh	r3, [r3, #10]
 80087b6:	461a      	mov	r2, r3
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	7858      	ldrb	r0, [r3, #1]
 80087c2:	6a3b      	ldr	r3, [r7, #32]
 80087c4:	697a      	ldr	r2, [r7, #20]
 80087c6:	69f9      	ldr	r1, [r7, #28]
 80087c8:	f7fd fda4 	bl	8006314 <disk_write>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d004      	beq.n	80087dc <f_write+0x1ca>
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2201      	movs	r2, #1
 80087d6:	755a      	strb	r2, [r3, #21]
 80087d8:	2301      	movs	r3, #1
 80087da:	e08b      	b.n	80088f4 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6a1a      	ldr	r2, [r3, #32]
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	6a3a      	ldr	r2, [r7, #32]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d915      	bls.n	8008816 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6a1a      	ldr	r2, [r3, #32]
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	025b      	lsls	r3, r3, #9
 80087fa:	69fa      	ldr	r2, [r7, #28]
 80087fc:	4413      	add	r3, r2
 80087fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008802:	4619      	mov	r1, r3
 8008804:	f7fd fe46 	bl	8006494 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	7d1b      	ldrb	r3, [r3, #20]
 800880c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008810:	b2da      	uxtb	r2, r3
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008816:	6a3b      	ldr	r3, [r7, #32]
 8008818:	025b      	lsls	r3, r3, #9
 800881a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800881c:	e03f      	b.n	800889e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6a1b      	ldr	r3, [r3, #32]
 8008822:	697a      	ldr	r2, [r7, #20]
 8008824:	429a      	cmp	r2, r3
 8008826:	d016      	beq.n	8008856 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	699a      	ldr	r2, [r3, #24]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008830:	429a      	cmp	r2, r3
 8008832:	d210      	bcs.n	8008856 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	7858      	ldrb	r0, [r3, #1]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800883e:	2301      	movs	r3, #1
 8008840:	697a      	ldr	r2, [r7, #20]
 8008842:	f7fd fd47 	bl	80062d4 <disk_read>
 8008846:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008848:	2b00      	cmp	r3, #0
 800884a:	d004      	beq.n	8008856 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2201      	movs	r2, #1
 8008850:	755a      	strb	r2, [r3, #21]
 8008852:	2301      	movs	r3, #1
 8008854:	e04e      	b.n	80088f4 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	697a      	ldr	r2, [r7, #20]
 800885a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008864:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008868:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800886a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	429a      	cmp	r2, r3
 8008870:	d901      	bls.n	8008876 <f_write+0x264>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008884:	4413      	add	r3, r2
 8008886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008888:	69f9      	ldr	r1, [r7, #28]
 800888a:	4618      	mov	r0, r3
 800888c:	f7fd fe02 	bl	8006494 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	7d1b      	ldrb	r3, [r3, #20]
 8008894:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008898:	b2da      	uxtb	r2, r3
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800889e:	69fa      	ldr	r2, [r7, #28]
 80088a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a2:	4413      	add	r3, r2
 80088a4:	61fb      	str	r3, [r7, #28]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	699a      	ldr	r2, [r3, #24]
 80088aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ac:	441a      	add	r2, r3
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	619a      	str	r2, [r3, #24]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	68da      	ldr	r2, [r3, #12]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	bf38      	it	cc
 80088be:	461a      	movcc	r2, r3
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	60da      	str	r2, [r3, #12]
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ca:	441a      	add	r2, r3
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	601a      	str	r2, [r3, #0]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f47f aed4 	bne.w	8008688 <f_write+0x76>
 80088e0:	e000      	b.n	80088e4 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80088e2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	7d1b      	ldrb	r3, [r3, #20]
 80088e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088ec:	b2da      	uxtb	r2, r3
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3730      	adds	r7, #48	; 0x30
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f107 0208 	add.w	r2, r7, #8
 800890a:	4611      	mov	r1, r2
 800890c:	4618      	mov	r0, r3
 800890e:	f7ff fb07 	bl	8007f20 <validate>
 8008912:	4603      	mov	r3, r0
 8008914:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008916:	7dfb      	ldrb	r3, [r7, #23]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d168      	bne.n	80089ee <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	7d1b      	ldrb	r3, [r3, #20]
 8008920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008924:	2b00      	cmp	r3, #0
 8008926:	d062      	beq.n	80089ee <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	7d1b      	ldrb	r3, [r3, #20]
 800892c:	b25b      	sxtb	r3, r3
 800892e:	2b00      	cmp	r3, #0
 8008930:	da15      	bge.n	800895e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	7858      	ldrb	r0, [r3, #1]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a1a      	ldr	r2, [r3, #32]
 8008940:	2301      	movs	r3, #1
 8008942:	f7fd fce7 	bl	8006314 <disk_write>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d001      	beq.n	8008950 <f_sync+0x54>
 800894c:	2301      	movs	r3, #1
 800894e:	e04f      	b.n	80089f0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	7d1b      	ldrb	r3, [r3, #20]
 8008954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008958:	b2da      	uxtb	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800895e:	f7fd fa29 	bl	8005db4 <get_fattime>
 8008962:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896a:	4619      	mov	r1, r3
 800896c:	4610      	mov	r0, r2
 800896e:	f7fd ffbf 	bl	80068f0 <move_window>
 8008972:	4603      	mov	r3, r0
 8008974:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008976:	7dfb      	ldrb	r3, [r7, #23]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d138      	bne.n	80089ee <f_sync+0xf2>
					dir = fp->dir_ptr;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008980:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	330b      	adds	r3, #11
 8008986:	781a      	ldrb	r2, [r3, #0]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	330b      	adds	r3, #11
 800898c:	f042 0220 	orr.w	r2, r2, #32
 8008990:	b2d2      	uxtb	r2, r2
 8008992:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6818      	ldr	r0, [r3, #0]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	461a      	mov	r2, r3
 800899e:	68f9      	ldr	r1, [r7, #12]
 80089a0:	f7fe fccc 	bl	800733c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f103 021c 	add.w	r2, r3, #28
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	4619      	mov	r1, r3
 80089b0:	4610      	mov	r0, r2
 80089b2:	f7fd fd43 	bl	800643c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	3316      	adds	r3, #22
 80089ba:	6939      	ldr	r1, [r7, #16]
 80089bc:	4618      	mov	r0, r3
 80089be:	f7fd fd3d 	bl	800643c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	3312      	adds	r3, #18
 80089c6:	2100      	movs	r1, #0
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7fd fd1c 	bl	8006406 <st_word>
					fs->wflag = 1;
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	2201      	movs	r2, #1
 80089d2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fd ffb8 	bl	800694c <sync_fs>
 80089dc:	4603      	mov	r3, r0
 80089de:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	7d1b      	ldrb	r3, [r3, #20]
 80089e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089e8:	b2da      	uxtb	r2, r3
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80089ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3718      	adds	r7, #24
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f7ff ff7b 	bl	80088fc <f_sync>
 8008a06:	4603      	mov	r3, r0
 8008a08:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008a0a:	7bfb      	ldrb	r3, [r7, #15]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d118      	bne.n	8008a42 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f107 0208 	add.w	r2, r7, #8
 8008a16:	4611      	mov	r1, r2
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7ff fa81 	bl	8007f20 <validate>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008a22:	7bfb      	ldrb	r3, [r7, #15]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10c      	bne.n	8008a42 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7fd febb 	bl	80067a8 <dec_lock>
 8008a32:	4603      	mov	r3, r0
 8008a34:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008a36:	7bfb      	ldrb	r3, [r7, #15]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d102      	bne.n	8008a42 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b086      	sub	sp, #24
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d101      	bne.n	8008a60 <f_opendir+0x14>
 8008a5c:	2309      	movs	r3, #9
 8008a5e:	e064      	b.n	8008b2a <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8008a64:	f107 010c 	add.w	r1, r7, #12
 8008a68:	463b      	mov	r3, r7
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7ff f80b 	bl	8007a88 <find_volume>
 8008a72:	4603      	mov	r3, r0
 8008a74:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008a76:	7dfb      	ldrb	r3, [r7, #23]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d14f      	bne.n	8008b1c <f_opendir+0xd0>
		obj->fs = fs;
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	4619      	mov	r1, r3
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f7fe fef2 	bl	8007870 <follow_path>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8008a90:	7dfb      	ldrb	r3, [r7, #23]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d13d      	bne.n	8008b12 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008a9c:	b25b      	sxtb	r3, r3
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	db12      	blt.n	8008ac8 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	799b      	ldrb	r3, [r3, #6]
 8008aa6:	f003 0310 	and.w	r3, r3, #16
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00a      	beq.n	8008ac4 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8008aae:	68fa      	ldr	r2, [r7, #12]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a1b      	ldr	r3, [r3, #32]
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	f7fe fc21 	bl	80072fe <ld_clust>
 8008abc:	4602      	mov	r2, r0
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	609a      	str	r2, [r3, #8]
 8008ac2:	e001      	b.n	8008ac8 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8008ac4:	2305      	movs	r3, #5
 8008ac6:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8008ac8:	7dfb      	ldrb	r3, [r7, #23]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d121      	bne.n	8008b12 <f_opendir+0xc6>
				obj->id = fs->id;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	88da      	ldrh	r2, [r3, #6]
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8008ad6:	2100      	movs	r1, #0
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f7fe fa89 	bl	8006ff0 <dir_sdi>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8008ae2:	7dfb      	ldrb	r3, [r7, #23]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d114      	bne.n	8008b12 <f_opendir+0xc6>
					if (obj->sclust) {
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00d      	beq.n	8008b0c <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008af0:	2100      	movs	r1, #0
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f7fd fdca 	bl	800668c <inc_lock>
 8008af8:	4602      	mov	r2, r0
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d105      	bne.n	8008b12 <f_opendir+0xc6>
 8008b06:	2312      	movs	r3, #18
 8008b08:	75fb      	strb	r3, [r7, #23]
 8008b0a:	e002      	b.n	8008b12 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008b12:	7dfb      	ldrb	r3, [r7, #23]
 8008b14:	2b04      	cmp	r3, #4
 8008b16:	d101      	bne.n	8008b1c <f_opendir+0xd0>
 8008b18:	2305      	movs	r3, #5
 8008b1a:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8008b1c:	7dfb      	ldrb	r3, [r7, #23]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d002      	beq.n	8008b28 <f_opendir+0xdc>
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	2200      	movs	r2, #0
 8008b26:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3718      	adds	r7, #24
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b084      	sub	sp, #16
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f107 0208 	add.w	r2, r7, #8
 8008b40:	4611      	mov	r1, r2
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7ff f9ec 	bl	8007f20 <validate>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d110      	bne.n	8008b74 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d006      	beq.n	8008b68 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fd fe22 	bl	80067a8 <dec_lock>
 8008b64:	4603      	mov	r3, r0
 8008b66:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d102      	bne.n	8008b74 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b084      	sub	sp, #16
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f107 0208 	add.w	r2, r7, #8
 8008b8e:	4611      	mov	r1, r2
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7ff f9c5 	bl	8007f20 <validate>
 8008b96:	4603      	mov	r3, r0
 8008b98:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008b9a:	7bfb      	ldrb	r3, [r7, #15]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d126      	bne.n	8008bee <f_readdir+0x70>
		if (!fno) {
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d106      	bne.n	8008bb4 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f7fe fa21 	bl	8006ff0 <dir_sdi>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	73fb      	strb	r3, [r7, #15]
 8008bb2:	e01c      	b.n	8008bee <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f7fe fbe0 	bl	800737c <dir_read>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
 8008bc2:	2b04      	cmp	r3, #4
 8008bc4:	d101      	bne.n	8008bca <f_readdir+0x4c>
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8008bca:	7bfb      	ldrb	r3, [r7, #15]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d10e      	bne.n	8008bee <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8008bd0:	6839      	ldr	r1, [r7, #0]
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7fe fcb6 	bl	8007544 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8008bd8:	2100      	movs	r1, #0
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f7fe fa83 	bl	80070e6 <dir_next>
 8008be0:	4603      	mov	r3, r0
 8008be2:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
 8008be6:	2b04      	cmp	r3, #4
 8008be8:	d101      	bne.n	8008bee <f_readdir+0x70>
 8008bea:	2300      	movs	r3, #0
 8008bec:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8008bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 8008c02:	6839      	ldr	r1, [r7, #0]
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f7ff ffba 	bl	8008b7e <f_readdir>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8008c0e:	7bfb      	ldrb	r3, [r7, #15]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d114      	bne.n	8008c3e <f_findnext+0x46>
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d011      	beq.n	8008c3e <f_findnext+0x46>
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	7a5b      	ldrb	r3, [r3, #9]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00d      	beq.n	8008c3e <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	f103 0109 	add.w	r1, r3, #9
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f7fe fd0e 	bl	8007650 <pattern_matching>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d100      	bne.n	8008c3c <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 8008c3a:	e7e2      	b.n	8008c02 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8008c3c:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 8008c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b086      	sub	sp, #24
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
 8008c54:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	683a      	ldr	r2, [r7, #0]
 8008c5a:	631a      	str	r2, [r3, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 8008c5c:	6879      	ldr	r1, [r7, #4]
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f7ff fef4 	bl	8008a4c <f_opendir>
 8008c64:	4603      	mov	r3, r0
 8008c66:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008c68:	7dfb      	ldrb	r3, [r7, #23]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d105      	bne.n	8008c7a <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 8008c6e:	68b9      	ldr	r1, [r7, #8]
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f7ff ffc1 	bl	8008bf8 <f_findnext>
 8008c76:	4603      	mov	r3, r0
 8008c78:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 8008c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3718      	adds	r7, #24
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008c90:	78fb      	ldrb	r3, [r7, #3]
 8008c92:	2b0a      	cmp	r3, #10
 8008c94:	d103      	bne.n	8008c9e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008c96:	210d      	movs	r1, #13
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f7ff fff3 	bl	8008c84 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	db25      	blt.n	8008cf6 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	1c5a      	adds	r2, r3, #1
 8008cae:	60fa      	str	r2, [r7, #12]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	78fa      	ldrb	r2, [r7, #3]
 8008cb6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2b3c      	cmp	r3, #60	; 0x3c
 8008cbc:	dd12      	ble.n	8008ce4 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6818      	ldr	r0, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f103 010c 	add.w	r1, r3, #12
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	f107 0308 	add.w	r3, r7, #8
 8008cce:	f7ff fca0 	bl	8008612 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008cd2:	68ba      	ldr	r2, [r7, #8]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d101      	bne.n	8008cde <putc_bfd+0x5a>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	e001      	b.n	8008ce2 <putc_bfd+0x5e>
 8008cde:	f04f 33ff 	mov.w	r3, #4294967295
 8008ce2:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	1c5a      	adds	r2, r3, #1
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	609a      	str	r2, [r3, #8]
 8008cf4:	e000      	b.n	8008cf8 <putc_bfd+0x74>
	if (i < 0) return;
 8008cf6:	bf00      	nop
}
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b084      	sub	sp, #16
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	db16      	blt.n	8008d3c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6818      	ldr	r0, [r3, #0]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f103 010c 	add.w	r1, r3, #12
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	f107 030c 	add.w	r3, r7, #12
 8008d22:	f7ff fc76 	bl	8008612 <f_write>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d107      	bne.n	8008d3c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d102      	bne.n	8008d3c <putc_flush+0x3e>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	e001      	b.n	8008d40 <putc_flush+0x42>
	return EOF;
 8008d3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	683a      	ldr	r2, [r7, #0]
 8008d56:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	605a      	str	r2, [r3, #4]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	685a      	ldr	r2, [r3, #4]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	609a      	str	r2, [r3, #8]
}
 8008d66:	bf00      	nop
 8008d68:	370c      	adds	r7, #12
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
	...

08008d74 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8008d74:	b40e      	push	{r1, r2, r3}
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b0a7      	sub	sp, #156	; 0x9c
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8008d7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d82:	6879      	ldr	r1, [r7, #4]
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7ff ffdf 	bl	8008d48 <putc_init>

	va_start(arp, fmt);
 8008d8a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8008d8e:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8008d90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008d94:	1c5a      	adds	r2, r3, #1
 8008d96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8008da0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f000 81f4 	beq.w	8009192 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 8008daa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008dae:	2b25      	cmp	r3, #37	; 0x25
 8008db0:	d008      	beq.n	8008dc4 <f_printf+0x50>
			putc_bfd(&pb, c);
 8008db2:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8008db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008dba:	4611      	mov	r1, r2
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7ff ff61 	bl	8008c84 <putc_bfd>
			continue;
 8008dc2:	e1e5      	b.n	8009190 <f_printf+0x41c>
		}
		w = f = 0;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008dca:	2300      	movs	r3, #0
 8008dcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8008dd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008dd4:	1c5a      	adds	r2, r3, #1
 8008dd6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8008de0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008de4:	2b30      	cmp	r3, #48	; 0x30
 8008de6:	d10b      	bne.n	8008e00 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8008de8:	2301      	movs	r3, #1
 8008dea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008dee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008df2:	1c5a      	adds	r2, r3, #1
 8008df4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8008dfe:	e024      	b.n	8008e4a <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8008e00:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008e04:	2b2d      	cmp	r3, #45	; 0x2d
 8008e06:	d120      	bne.n	8008e4a <f_printf+0xd6>
				f = 2; c = *fmt++;
 8008e08:	2302      	movs	r3, #2
 8008e0a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008e0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008e12:	1c5a      	adds	r2, r3, #1
 8008e14:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8008e1e:	e014      	b.n	8008e4a <f_printf+0xd6>
			w = w * 10 + c - '0';
 8008e20:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008e24:	4613      	mov	r3, r2
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	4413      	add	r3, r2
 8008e2a:	005b      	lsls	r3, r3, #1
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008e32:	4413      	add	r3, r2
 8008e34:	3b30      	subs	r3, #48	; 0x30
 8008e36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8008e3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008e3e:	1c5a      	adds	r2, r3, #1
 8008e40:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8008e4a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008e4e:	2b2f      	cmp	r3, #47	; 0x2f
 8008e50:	d903      	bls.n	8008e5a <f_printf+0xe6>
 8008e52:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008e56:	2b39      	cmp	r3, #57	; 0x39
 8008e58:	d9e2      	bls.n	8008e20 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8008e5a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008e5e:	2b6c      	cmp	r3, #108	; 0x6c
 8008e60:	d003      	beq.n	8008e6a <f_printf+0xf6>
 8008e62:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008e66:	2b4c      	cmp	r3, #76	; 0x4c
 8008e68:	d10d      	bne.n	8008e86 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8008e6a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008e6e:	f043 0304 	orr.w	r3, r3, #4
 8008e72:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008e76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008e7a:	1c5a      	adds	r2, r3, #1
 8008e7c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8008e86:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f000 8183 	beq.w	8009196 <f_printf+0x422>
		d = c;
 8008e90:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008e94:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8008e98:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008e9c:	2b60      	cmp	r3, #96	; 0x60
 8008e9e:	d908      	bls.n	8008eb2 <f_printf+0x13e>
 8008ea0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008ea4:	2b7a      	cmp	r3, #122	; 0x7a
 8008ea6:	d804      	bhi.n	8008eb2 <f_printf+0x13e>
 8008ea8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008eac:	3b20      	subs	r3, #32
 8008eae:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8008eb2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008eb6:	3b42      	subs	r3, #66	; 0x42
 8008eb8:	2b16      	cmp	r3, #22
 8008eba:	f200 8098 	bhi.w	8008fee <f_printf+0x27a>
 8008ebe:	a201      	add	r2, pc, #4	; (adr r2, 8008ec4 <f_printf+0x150>)
 8008ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec4:	08008fcf 	.word	0x08008fcf
 8008ec8:	08008fb7 	.word	0x08008fb7
 8008ecc:	08008fdf 	.word	0x08008fdf
 8008ed0:	08008fef 	.word	0x08008fef
 8008ed4:	08008fef 	.word	0x08008fef
 8008ed8:	08008fef 	.word	0x08008fef
 8008edc:	08008fef 	.word	0x08008fef
 8008ee0:	08008fef 	.word	0x08008fef
 8008ee4:	08008fef 	.word	0x08008fef
 8008ee8:	08008fef 	.word	0x08008fef
 8008eec:	08008fef 	.word	0x08008fef
 8008ef0:	08008fef 	.word	0x08008fef
 8008ef4:	08008fef 	.word	0x08008fef
 8008ef8:	08008fd7 	.word	0x08008fd7
 8008efc:	08008fef 	.word	0x08008fef
 8008f00:	08008fef 	.word	0x08008fef
 8008f04:	08008fef 	.word	0x08008fef
 8008f08:	08008f21 	.word	0x08008f21
 8008f0c:	08008fef 	.word	0x08008fef
 8008f10:	08008fdf 	.word	0x08008fdf
 8008f14:	08008fef 	.word	0x08008fef
 8008f18:	08008fef 	.word	0x08008fef
 8008f1c:	08008fe7 	.word	0x08008fe7
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8008f20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f22:	1d1a      	adds	r2, r3, #4
 8008f24:	67ba      	str	r2, [r7, #120]	; 0x78
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008f30:	e004      	b.n	8008f3c <f_printf+0x1c8>
 8008f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f36:	3301      	adds	r3, #1
 8008f38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008f3c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008f3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f42:	4413      	add	r3, r2
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1f3      	bne.n	8008f32 <f_printf+0x1be>
			if (!(f & 2)) {
 8008f4a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008f4e:	f003 0302 	and.w	r3, r3, #2
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d11a      	bne.n	8008f8c <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8008f56:	e005      	b.n	8008f64 <f_printf+0x1f0>
 8008f58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f5c:	2120      	movs	r1, #32
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7ff fe90 	bl	8008c84 <putc_bfd>
 8008f64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f68:	1c5a      	adds	r2, r3, #1
 8008f6a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008f6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d8f0      	bhi.n	8008f58 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8008f76:	e009      	b.n	8008f8c <f_printf+0x218>
 8008f78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f7a:	1c5a      	adds	r2, r3, #1
 8008f7c:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008f7e:	781a      	ldrb	r2, [r3, #0]
 8008f80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f84:	4611      	mov	r1, r2
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7ff fe7c 	bl	8008c84 <putc_bfd>
 8008f8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1f1      	bne.n	8008f78 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8008f94:	e005      	b.n	8008fa2 <f_printf+0x22e>
 8008f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f9a:	2120      	movs	r1, #32
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7ff fe71 	bl	8008c84 <putc_bfd>
 8008fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fa6:	1c5a      	adds	r2, r3, #1
 8008fa8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008fac:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d8f0      	bhi.n	8008f96 <f_printf+0x222>
			continue;
 8008fb4:	e0ec      	b.n	8009190 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8008fb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fb8:	1d1a      	adds	r2, r3, #4
 8008fba:	67ba      	str	r2, [r7, #120]	; 0x78
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	b2da      	uxtb	r2, r3
 8008fc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008fc4:	4611      	mov	r1, r2
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7ff fe5c 	bl	8008c84 <putc_bfd>
 8008fcc:	e0e0      	b.n	8009190 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 8008fce:	2302      	movs	r3, #2
 8008fd0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8008fd4:	e014      	b.n	8009000 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8008fd6:	2308      	movs	r3, #8
 8008fd8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8008fdc:	e010      	b.n	8009000 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8008fde:	230a      	movs	r3, #10
 8008fe0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8008fe4:	e00c      	b.n	8009000 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8008fe6:	2310      	movs	r3, #16
 8008fe8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8008fec:	e008      	b.n	8009000 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8008fee:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8008ff2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ff6:	4611      	mov	r1, r2
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7ff fe43 	bl	8008c84 <putc_bfd>
 8008ffe:	e0c7      	b.n	8009190 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8009000:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009004:	f003 0304 	and.w	r3, r3, #4
 8009008:	2b00      	cmp	r3, #0
 800900a:	d004      	beq.n	8009016 <f_printf+0x2a2>
 800900c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800900e:	1d1a      	adds	r2, r3, #4
 8009010:	67ba      	str	r2, [r7, #120]	; 0x78
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	e00c      	b.n	8009030 <f_printf+0x2bc>
 8009016:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800901a:	2b44      	cmp	r3, #68	; 0x44
 800901c:	d104      	bne.n	8009028 <f_printf+0x2b4>
 800901e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009020:	1d1a      	adds	r2, r3, #4
 8009022:	67ba      	str	r2, [r7, #120]	; 0x78
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	e003      	b.n	8009030 <f_printf+0x2bc>
 8009028:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800902a:	1d1a      	adds	r2, r3, #4
 800902c:	67ba      	str	r2, [r7, #120]	; 0x78
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8009034:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009038:	2b44      	cmp	r3, #68	; 0x44
 800903a:	d10e      	bne.n	800905a <f_printf+0x2e6>
 800903c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009040:	2b00      	cmp	r3, #0
 8009042:	da0a      	bge.n	800905a <f_printf+0x2e6>
			v = 0 - v;
 8009044:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009048:	425b      	negs	r3, r3
 800904a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800904e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009052:	f043 0308 	orr.w	r3, r3, #8
 8009056:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800905a:	2300      	movs	r3, #0
 800905c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8009060:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8009064:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009068:	fbb3 f1f2 	udiv	r1, r3, r2
 800906c:	fb02 f201 	mul.w	r2, r2, r1
 8009070:	1a9b      	subs	r3, r3, r2
 8009072:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8009076:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800907a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800907e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009082:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8009086:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800908a:	2b09      	cmp	r3, #9
 800908c:	d90b      	bls.n	80090a6 <f_printf+0x332>
 800908e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009092:	2b78      	cmp	r3, #120	; 0x78
 8009094:	d101      	bne.n	800909a <f_printf+0x326>
 8009096:	2227      	movs	r2, #39	; 0x27
 8009098:	e000      	b.n	800909c <f_printf+0x328>
 800909a:	2207      	movs	r2, #7
 800909c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80090a0:	4413      	add	r3, r2
 80090a2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 80090a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090aa:	1c5a      	adds	r2, r3, #1
 80090ac:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80090b0:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80090b4:	3230      	adds	r2, #48	; 0x30
 80090b6:	b2d2      	uxtb	r2, r2
 80090b8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80090bc:	440b      	add	r3, r1
 80090be:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 80090c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d003      	beq.n	80090d2 <f_printf+0x35e>
 80090ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090ce:	2b1f      	cmp	r3, #31
 80090d0:	d9c6      	bls.n	8009060 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 80090d2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80090d6:	f003 0308 	and.w	r3, r3, #8
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00a      	beq.n	80090f4 <f_printf+0x380>
 80090de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090e2:	1c5a      	adds	r2, r3, #1
 80090e4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80090e8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80090ec:	4413      	add	r3, r2
 80090ee:	222d      	movs	r2, #45	; 0x2d
 80090f0:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 80090f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80090fc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009100:	f003 0301 	and.w	r3, r3, #1
 8009104:	2b00      	cmp	r3, #0
 8009106:	d001      	beq.n	800910c <f_printf+0x398>
 8009108:	2330      	movs	r3, #48	; 0x30
 800910a:	e000      	b.n	800910e <f_printf+0x39a>
 800910c:	2320      	movs	r3, #32
 800910e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8009112:	e007      	b.n	8009124 <f_printf+0x3b0>
 8009114:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8009118:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800911c:	4611      	mov	r1, r2
 800911e:	4618      	mov	r0, r3
 8009120:	f7ff fdb0 	bl	8008c84 <putc_bfd>
 8009124:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009128:	f003 0302 	and.w	r3, r3, #2
 800912c:	2b00      	cmp	r3, #0
 800912e:	d108      	bne.n	8009142 <f_printf+0x3ce>
 8009130:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009134:	1c5a      	adds	r2, r3, #1
 8009136:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800913a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800913e:	429a      	cmp	r2, r3
 8009140:	d8e8      	bhi.n	8009114 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 8009142:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009146:	3b01      	subs	r3, #1
 8009148:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800914c:	f107 020c 	add.w	r2, r7, #12
 8009150:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009154:	4413      	add	r3, r2
 8009156:	781a      	ldrb	r2, [r3, #0]
 8009158:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800915c:	4611      	mov	r1, r2
 800915e:	4618      	mov	r0, r3
 8009160:	f7ff fd90 	bl	8008c84 <putc_bfd>
		} while (i);
 8009164:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009168:	2b00      	cmp	r3, #0
 800916a:	d1ea      	bne.n	8009142 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800916c:	e007      	b.n	800917e <f_printf+0x40a>
 800916e:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8009172:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009176:	4611      	mov	r1, r2
 8009178:	4618      	mov	r0, r3
 800917a:	f7ff fd83 	bl	8008c84 <putc_bfd>
 800917e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009182:	1c5a      	adds	r2, r3, #1
 8009184:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009188:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800918c:	429a      	cmp	r2, r3
 800918e:	d8ee      	bhi.n	800916e <f_printf+0x3fa>
		c = *fmt++;
 8009190:	e5fe      	b.n	8008d90 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8009192:	bf00      	nop
 8009194:	e000      	b.n	8009198 <f_printf+0x424>
		if (!c) break;
 8009196:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8009198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800919c:	4618      	mov	r0, r3
 800919e:	f7ff fdae 	bl	8008cfe <putc_flush>
 80091a2:	4603      	mov	r3, r0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	379c      	adds	r7, #156	; 0x9c
 80091a8:	46bd      	mov	sp, r7
 80091aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80091ae:	b003      	add	sp, #12
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop

080091b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b087      	sub	sp, #28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	4613      	mov	r3, r2
 80091c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80091c2:	2301      	movs	r3, #1
 80091c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80091c6:	2300      	movs	r3, #0
 80091c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80091ca:	4b1f      	ldr	r3, [pc, #124]	; (8009248 <FATFS_LinkDriverEx+0x94>)
 80091cc:	7a5b      	ldrb	r3, [r3, #9]
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d131      	bne.n	8009238 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80091d4:	4b1c      	ldr	r3, [pc, #112]	; (8009248 <FATFS_LinkDriverEx+0x94>)
 80091d6:	7a5b      	ldrb	r3, [r3, #9]
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	461a      	mov	r2, r3
 80091dc:	4b1a      	ldr	r3, [pc, #104]	; (8009248 <FATFS_LinkDriverEx+0x94>)
 80091de:	2100      	movs	r1, #0
 80091e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80091e2:	4b19      	ldr	r3, [pc, #100]	; (8009248 <FATFS_LinkDriverEx+0x94>)
 80091e4:	7a5b      	ldrb	r3, [r3, #9]
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	4a17      	ldr	r2, [pc, #92]	; (8009248 <FATFS_LinkDriverEx+0x94>)
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	4413      	add	r3, r2
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80091f2:	4b15      	ldr	r3, [pc, #84]	; (8009248 <FATFS_LinkDriverEx+0x94>)
 80091f4:	7a5b      	ldrb	r3, [r3, #9]
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	461a      	mov	r2, r3
 80091fa:	4b13      	ldr	r3, [pc, #76]	; (8009248 <FATFS_LinkDriverEx+0x94>)
 80091fc:	4413      	add	r3, r2
 80091fe:	79fa      	ldrb	r2, [r7, #7]
 8009200:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009202:	4b11      	ldr	r3, [pc, #68]	; (8009248 <FATFS_LinkDriverEx+0x94>)
 8009204:	7a5b      	ldrb	r3, [r3, #9]
 8009206:	b2db      	uxtb	r3, r3
 8009208:	1c5a      	adds	r2, r3, #1
 800920a:	b2d1      	uxtb	r1, r2
 800920c:	4a0e      	ldr	r2, [pc, #56]	; (8009248 <FATFS_LinkDriverEx+0x94>)
 800920e:	7251      	strb	r1, [r2, #9]
 8009210:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009212:	7dbb      	ldrb	r3, [r7, #22]
 8009214:	3330      	adds	r3, #48	; 0x30
 8009216:	b2da      	uxtb	r2, r3
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	3301      	adds	r3, #1
 8009220:	223a      	movs	r2, #58	; 0x3a
 8009222:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	3302      	adds	r3, #2
 8009228:	222f      	movs	r2, #47	; 0x2f
 800922a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	3303      	adds	r3, #3
 8009230:	2200      	movs	r2, #0
 8009232:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009234:	2300      	movs	r3, #0
 8009236:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009238:	7dfb      	ldrb	r3, [r7, #23]
}
 800923a:	4618      	mov	r0, r3
 800923c:	371c      	adds	r7, #28
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	200000c4 	.word	0x200000c4

0800924c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009256:	2200      	movs	r2, #0
 8009258:	6839      	ldr	r1, [r7, #0]
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f7ff ffaa 	bl	80091b4 <FATFS_LinkDriverEx>
 8009260:	4603      	mov	r3, r0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <jpeg_abort>:
 * responsibility.
 */

GLOBAL(void)
jpeg_abort (j_common_ptr cinfo)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b084      	sub	sp, #16
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
  int pool;

  /* Do nothing if called on a not-initialized or destroyed JPEG object. */
  if (cinfo->mem == NULL)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d01e      	beq.n	80092b8 <jpeg_abort+0x4e>
    return;

  /* Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
 800927a:	2301      	movs	r3, #1
 800927c:	60fb      	str	r3, [r7, #12]
 800927e:	e008      	b.n	8009292 <jpeg_abort+0x28>
    (*cinfo->mem->free_pool) (cinfo, pool);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009286:	68f9      	ldr	r1, [r7, #12]
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	4798      	blx	r3
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	3b01      	subs	r3, #1
 8009290:	60fb      	str	r3, [r7, #12]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2b00      	cmp	r3, #0
 8009296:	dcf3      	bgt.n	8009280 <jpeg_abort+0x16>
  }

  /* Reset overall state for possible reuse of object */
  if (cinfo->is_decompressor) {
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d007      	beq.n	80092b0 <jpeg_abort+0x46>
    cinfo->global_state = DSTATE_START;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	22c8      	movs	r2, #200	; 0xc8
 80092a4:	615a      	str	r2, [r3, #20]
    /* Try to keep application from accessing now-deleted marker list.
     * A bit kludgy to do it here, but this is the most central place.
     */
    ((j_decompress_ptr) cinfo)->marker_list = NULL;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 80092ae:	e004      	b.n	80092ba <jpeg_abort+0x50>
  } else {
    cinfo->global_state = CSTATE_START;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2264      	movs	r2, #100	; 0x64
 80092b4:	615a      	str	r2, [r3, #20]
 80092b6:	e000      	b.n	80092ba <jpeg_abort+0x50>
    return;
 80092b8:	bf00      	nop
  }
}
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <jpeg_destroy>:
 * responsibility.
 */

GLOBAL(void)
jpeg_destroy (j_common_ptr cinfo)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  /* We need only tell the memory manager to release everything. */
  /* NB: mem pointer is NULL if memory mgr failed to initialize. */
  if (cinfo->mem != NULL)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d004      	beq.n	80092da <jpeg_destroy+0x1a>
    (*cinfo->mem->self_destruct) (cinfo);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	4798      	blx	r3
  cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	605a      	str	r2, [r3, #4]
  cinfo->global_state = 0;	/* mark it destroyed */
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	615a      	str	r2, [r3, #20]
}
 80092e6:	bf00      	nop
 80092e8:	3708      	adds	r7, #8
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <jpeg_alloc_quant_table>:
 * (Would jutils.c be a more reasonable place to put these?)
 */

GLOBAL(JQUANT_TBL *)
jpeg_alloc_quant_table (j_common_ptr cinfo)
{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b084      	sub	sp, #16
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
  JQUANT_TBL *tbl;

  tbl = (JQUANT_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2284      	movs	r2, #132	; 0x84
 80092fe:	2100      	movs	r1, #0
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	4798      	blx	r3
 8009304:	60f8      	str	r0, [r7, #12]
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2200      	movs	r2, #0
 800930a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  return tbl;
 800930e:	68fb      	ldr	r3, [r7, #12]
}
 8009310:	4618      	mov	r0, r3
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <jpeg_alloc_huff_table>:


GLOBAL(JHUFF_TBL *)
jpeg_alloc_huff_table (j_common_ptr cinfo)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  JHUFF_TBL *tbl;

  tbl = (JHUFF_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f44f 728c 	mov.w	r2, #280	; 0x118
 800932a:	2100      	movs	r1, #0
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	4798      	blx	r3
 8009330:	60f8      	str	r0, [r7, #12]
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2200      	movs	r2, #0
 8009336:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  return tbl;
 800933a:	68fb      	ldr	r3, [r7, #12]
}
 800933c:	4618      	mov	r0, r3
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <jpeg_CreateDecompress>:
 * The error manager must already be set up (in case memory manager fails).
 */

GLOBAL(void)
jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b088      	sub	sp, #32
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	607a      	str	r2, [r7, #4]
  int i;

  /* Guard against version mismatches between library and caller. */
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2200      	movs	r2, #0
 8009354:	605a      	str	r2, [r3, #4]
  if (version != JPEG_LIB_VERSION)
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	2b50      	cmp	r3, #80	; 0x50
 800935a:	d010      	beq.n	800937e <jpeg_CreateDecompress+0x3a>
    ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	220d      	movs	r2, #13
 8009362:	615a      	str	r2, [r3, #20]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2250      	movs	r2, #80	; 0x50
 800936a:	619a      	str	r2, [r3, #24]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68ba      	ldr	r2, [r7, #8]
 8009372:	61da      	str	r2, [r3, #28]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	4798      	blx	r3
  if (structsize != SIZEOF(struct jpeg_decompress_struct))
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 8009384:	d011      	beq.n	80093aa <jpeg_CreateDecompress+0x66>
    ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2216      	movs	r2, #22
 800938c:	615a      	str	r2, [r3, #20]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009396:	619a      	str	r2, [r3, #24]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	61da      	str	r2, [r3, #28]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	4798      	blx	r3
   * client_data, so we have to save and restore those fields.
   * Note: if application hasn't set client_data, tools like Purify may
   * complain here.
   */
  {
    struct jpeg_error_mgr * err = cinfo->err;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	61bb      	str	r3, [r7, #24]
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	617b      	str	r3, [r7, #20]
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 80093b6:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80093ba:	2100      	movs	r1, #0
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f01b fdd3 	bl	8024f68 <memset>
    cinfo->err = err;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	69ba      	ldr	r2, [r7, #24]
 80093c6:	601a      	str	r2, [r3, #0]
    cinfo->client_data = client_data;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	697a      	ldr	r2, [r7, #20]
 80093cc:	60da      	str	r2, [r3, #12]
  }
  cinfo->is_decompressor = TRUE;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2201      	movs	r2, #1
 80093d2:	611a      	str	r2, [r3, #16]

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	f019 f9f5 	bl	80227c4 <jinit_memory_mgr>

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2200      	movs	r2, #0
 80093de:	609a      	str	r2, [r3, #8]
  cinfo->src = NULL;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	619a      	str	r2, [r3, #24]

  for (i = 0; i < NUM_QUANT_TBLS; i++)
 80093e6:	2300      	movs	r3, #0
 80093e8:	61fb      	str	r3, [r7, #28]
 80093ea:	e009      	b.n	8009400 <jpeg_CreateDecompress+0xbc>
    cinfo->quant_tbl_ptrs[i] = NULL;
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	3328      	adds	r3, #40	; 0x28
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	4413      	add	r3, r2
 80093f6:	2200      	movs	r2, #0
 80093f8:	605a      	str	r2, [r3, #4]
  for (i = 0; i < NUM_QUANT_TBLS; i++)
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	3301      	adds	r3, #1
 80093fe:	61fb      	str	r3, [r7, #28]
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	2b03      	cmp	r3, #3
 8009404:	ddf2      	ble.n	80093ec <jpeg_CreateDecompress+0xa8>

  for (i = 0; i < NUM_HUFF_TBLS; i++) {
 8009406:	2300      	movs	r3, #0
 8009408:	61fb      	str	r3, [r7, #28]
 800940a:	e010      	b.n	800942e <jpeg_CreateDecompress+0xea>
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	332c      	adds	r3, #44	; 0x2c
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	4413      	add	r3, r2
 8009416:	2200      	movs	r2, #0
 8009418:	605a      	str	r2, [r3, #4]
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	3330      	adds	r3, #48	; 0x30
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4413      	add	r3, r2
 8009424:	2200      	movs	r2, #0
 8009426:	605a      	str	r2, [r3, #4]
  for (i = 0; i < NUM_HUFF_TBLS; i++) {
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	3301      	adds	r3, #1
 800942c:	61fb      	str	r3, [r7, #28]
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	2b03      	cmp	r3, #3
 8009432:	ddeb      	ble.n	800940c <jpeg_CreateDecompress+0xc8>
  }

  /* Initialize marker processor so application can override methods
   * for COM, APPn markers before calling jpeg_read_header.
   */
  cinfo->marker_list = NULL;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  jinit_marker_reader(cinfo);
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f009 fcbd 	bl	8012dbc <jinit_marker_reader>

  /* And initialize the overall input controller. */
  jinit_input_controller(cinfo);
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f006 ff22 	bl	801028c <jinit_input_controller>

  /* OK, I'm ready */
  cinfo->global_state = DSTATE_START;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	22c8      	movs	r2, #200	; 0xc8
 800944c:	615a      	str	r2, [r3, #20]
}
 800944e:	bf00      	nop
 8009450:	3720      	adds	r7, #32
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <jpeg_destroy_decompress>:
 * Destruction of a JPEG decompression object
 */

GLOBAL(void)
jpeg_destroy_decompress (j_decompress_ptr cinfo)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b082      	sub	sp, #8
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f7ff ff2e 	bl	80092c0 <jpeg_destroy>
}
 8009464:	bf00      	nop
 8009466:	3708      	adds	r7, #8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <default_decompress_parms>:
 * Set default decompression parameters.
 */

LOCAL(void)
default_decompress_parms (j_decompress_ptr cinfo)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b086      	sub	sp, #24
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  /* Guess the input colorspace, and set output colorspace accordingly. */
  /* (Wish JPEG committee had provided a real way to specify this...) */
  /* Note application may override our guesses. */
  switch (cinfo->num_components) {
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009478:	2b04      	cmp	r3, #4
 800947a:	f000 8097 	beq.w	80095ac <default_decompress_parms+0x140>
 800947e:	2b04      	cmp	r3, #4
 8009480:	f300 80ca 	bgt.w	8009618 <default_decompress_parms+0x1ac>
 8009484:	2b01      	cmp	r3, #1
 8009486:	d002      	beq.n	800948e <default_decompress_parms+0x22>
 8009488:	2b03      	cmp	r3, #3
 800948a:	d009      	beq.n	80094a0 <default_decompress_parms+0x34>
 800948c:	e0c4      	b.n	8009618 <default_decompress_parms+0x1ac>
  case 1:
    cinfo->jpeg_color_space = JCS_GRAYSCALE;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2201      	movs	r2, #1
 8009492:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    cinfo->out_color_space = JCS_GRAYSCALE;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2201      	movs	r2, #1
 800949a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 800949e:	e0c4      	b.n	800962a <default_decompress_parms+0x1be>
    
  case 3:
    if (cinfo->saw_JFIF_marker) {
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d004      	beq.n	80094b4 <default_decompress_parms+0x48>
      cinfo->jpeg_color_space = JCS_YCbCr; /* JFIF implies YCbCr */
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2203      	movs	r2, #3
 80094ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80094b2:	e076      	b.n	80095a2 <default_decompress_parms+0x136>
    } else if (cinfo->saw_Adobe_marker) {
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d027      	beq.n	800950e <default_decompress_parms+0xa2>
      switch (cinfo->Adobe_transform) {
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d002      	beq.n	80094ce <default_decompress_parms+0x62>
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d005      	beq.n	80094d8 <default_decompress_parms+0x6c>
 80094cc:	e009      	b.n	80094e2 <default_decompress_parms+0x76>
      case 0:
	cinfo->jpeg_color_space = JCS_RGB;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2202      	movs	r2, #2
 80094d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	break;
 80094d6:	e064      	b.n	80095a2 <default_decompress_parms+0x136>
      case 1:
	cinfo->jpeg_color_space = JCS_YCbCr;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2203      	movs	r2, #3
 80094dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	break;
 80094e0:	e05f      	b.n	80095a2 <default_decompress_parms+0x136>
      default:
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2274      	movs	r2, #116	; 0x74
 80094e8:	615a      	str	r2, [r3, #20]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	619a      	str	r2, [r3, #24]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	f04f 31ff 	mov.w	r1, #4294967295
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2203      	movs	r2, #3
 8009508:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	break;
 800950c:	e049      	b.n	80095a2 <default_decompress_parms+0x136>
      }
    } else {
      /* Saw no special markers, try to guess from the component IDs */
      int cid0 = cinfo->comp_info[0].component_id;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	617b      	str	r3, [r7, #20]
      int cid1 = cinfo->comp_info[1].component_id;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800951e:	3358      	adds	r3, #88	; 0x58
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	613b      	str	r3, [r7, #16]
      int cid2 = cinfo->comp_info[2].component_id;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800952a:	33b0      	adds	r3, #176	; 0xb0
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	60fb      	str	r3, [r7, #12]

      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	2b01      	cmp	r3, #1
 8009534:	d10a      	bne.n	800954c <default_decompress_parms+0xe0>
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	2b02      	cmp	r3, #2
 800953a:	d107      	bne.n	800954c <default_decompress_parms+0xe0>
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2b03      	cmp	r3, #3
 8009540:	d104      	bne.n	800954c <default_decompress_parms+0xe0>
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume JFIF w/out marker */
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2203      	movs	r2, #3
 8009546:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800954a:	e02a      	b.n	80095a2 <default_decompress_parms+0x136>
      else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	2b52      	cmp	r3, #82	; 0x52
 8009550:	d10a      	bne.n	8009568 <default_decompress_parms+0xfc>
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	2b47      	cmp	r3, #71	; 0x47
 8009556:	d107      	bne.n	8009568 <default_decompress_parms+0xfc>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2b42      	cmp	r3, #66	; 0x42
 800955c:	d104      	bne.n	8009568 <default_decompress_parms+0xfc>
	cinfo->jpeg_color_space = JCS_RGB; /* ASCII 'R', 'G', 'B' */
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2202      	movs	r2, #2
 8009562:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009566:	e01c      	b.n	80095a2 <default_decompress_parms+0x136>
      else {
	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	3318      	adds	r3, #24
 800956e:	60bb      	str	r3, [r7, #8]
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	697a      	ldr	r2, [r7, #20]
 8009574:	601a      	str	r2, [r3, #0]
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	3304      	adds	r3, #4
 800957a:	693a      	ldr	r2, [r7, #16]
 800957c:	601a      	str	r2, [r3, #0]
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	3308      	adds	r3, #8
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	601a      	str	r2, [r3, #0]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2271      	movs	r2, #113	; 0x71
 800958c:	615a      	str	r2, [r3, #20]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	2101      	movs	r1, #1
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2203      	movs	r2, #3
 800959e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      }
    }
    /* Always guess RGB is proper output colorspace. */
    cinfo->out_color_space = JCS_RGB;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2202      	movs	r2, #2
 80095a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 80095aa:	e03e      	b.n	800962a <default_decompress_parms+0x1be>
    
  case 4:
    if (cinfo->saw_Adobe_marker) {
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d027      	beq.n	8009606 <default_decompress_parms+0x19a>
      switch (cinfo->Adobe_transform) {
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d002      	beq.n	80095c6 <default_decompress_parms+0x15a>
 80095c0:	2b02      	cmp	r3, #2
 80095c2:	d005      	beq.n	80095d0 <default_decompress_parms+0x164>
 80095c4:	e009      	b.n	80095da <default_decompress_parms+0x16e>
      case 0:
	cinfo->jpeg_color_space = JCS_CMYK;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2204      	movs	r2, #4
 80095ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	break;
 80095ce:	e01e      	b.n	800960e <default_decompress_parms+0x1a2>
      case 2:
	cinfo->jpeg_color_space = JCS_YCCK;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2205      	movs	r2, #5
 80095d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	break;
 80095d8:	e019      	b.n	800960e <default_decompress_parms+0x1a2>
      default:
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2274      	movs	r2, #116	; 0x74
 80095e0:	615a      	str	r2, [r3, #20]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	619a      	str	r2, [r3, #24]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	f04f 31ff 	mov.w	r1, #4294967295
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCCK; /* assume it's YCCK */
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2205      	movs	r2, #5
 8009600:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	break;
 8009604:	e003      	b.n	800960e <default_decompress_parms+0x1a2>
      }
    } else {
      /* No special markers, assume straight CMYK. */
      cinfo->jpeg_color_space = JCS_CMYK;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2204      	movs	r2, #4
 800960a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
    cinfo->out_color_space = JCS_CMYK;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2204      	movs	r2, #4
 8009612:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 8009616:	e008      	b.n	800962a <default_decompress_parms+0x1be>
    
  default:
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    cinfo->out_color_space = JCS_UNKNOWN;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 8009628:	bf00      	nop
  }

  /* Set defaults for other decompression parameters. */
  cinfo->scale_num = cinfo->block_size;		/* 1:1 scaling */
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8009630:	461a      	mov	r2, r3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	62da      	str	r2, [r3, #44]	; 0x2c
  cinfo->scale_denom = cinfo->block_size;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800963c:	461a      	mov	r2, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	631a      	str	r2, [r3, #48]	; 0x30
  cinfo->output_gamma = 1.0;
 8009642:	6879      	ldr	r1, [r7, #4]
 8009644:	f04f 0200 	mov.w	r2, #0
 8009648:	4b18      	ldr	r3, [pc, #96]	; (80096ac <default_decompress_parms+0x240>)
 800964a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
  cinfo->buffered_image = FALSE;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	641a      	str	r2, [r3, #64]	; 0x40
  cinfo->raw_data_out = FALSE;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	645a      	str	r2, [r3, #68]	; 0x44
  cinfo->dct_method = JDCT_DEFAULT;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  cinfo->do_fancy_upsampling = TRUE;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2201      	movs	r2, #1
 8009666:	64da      	str	r2, [r3, #76]	; 0x4c
  cinfo->do_block_smoothing = TRUE;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	651a      	str	r2, [r3, #80]	; 0x50
  cinfo->quantize_colors = FALSE;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	655a      	str	r2, [r3, #84]	; 0x54
  /* We set these in case application only sets quantize_colors. */
  cinfo->dither_mode = JDITHER_FS;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2202      	movs	r2, #2
 8009678:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
#ifdef QUANT_2PASS_SUPPORTED
  cinfo->two_pass_quantize = TRUE;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	65da      	str	r2, [r3, #92]	; 0x5c
#else
  cinfo->two_pass_quantize = FALSE;
#endif
  cinfo->desired_number_of_colors = 256;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009688:	661a      	str	r2, [r3, #96]	; 0x60
  cinfo->colormap = NULL;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  /* Initialize for no mode change in buffered-image mode. */
  cinfo->enable_1pass_quant = FALSE;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	665a      	str	r2, [r3, #100]	; 0x64
  cinfo->enable_external_quant = FALSE;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	669a      	str	r2, [r3, #104]	; 0x68
  cinfo->enable_2pass_quant = FALSE;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80096a4:	bf00      	nop
 80096a6:	3718      	adds	r7, #24
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	3ff00000 	.word	0x3ff00000

080096b0 <jpeg_read_header>:
 * extra error checking.
 */

GLOBAL(int)
jpeg_read_header (j_decompress_ptr cinfo, boolean require_image)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  int retcode;

  if (cinfo->global_state != DSTATE_START &&
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	695b      	ldr	r3, [r3, #20]
 80096be:	2bc8      	cmp	r3, #200	; 0xc8
 80096c0:	d011      	beq.n	80096e6 <jpeg_read_header+0x36>
      cinfo->global_state != DSTATE_INHEADER)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	695b      	ldr	r3, [r3, #20]
  if (cinfo->global_state != DSTATE_START &&
 80096c6:	2bc9      	cmp	r3, #201	; 0xc9
 80096c8:	d00d      	beq.n	80096e6 <jpeg_read_header+0x36>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2215      	movs	r2, #21
 80096d0:	615a      	str	r2, [r3, #20]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	6952      	ldr	r2, [r2, #20]
 80096da:	619a      	str	r2, [r3, #24]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	4798      	blx	r3

  retcode = jpeg_consume_input(cinfo);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f828 	bl	800973c <jpeg_consume_input>
 80096ec:	60f8      	str	r0, [r7, #12]

  switch (retcode) {
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2b02      	cmp	r3, #2
 80096f2:	d00b      	beq.n	800970c <jpeg_read_header+0x5c>
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	dc1b      	bgt.n	8009732 <jpeg_read_header+0x82>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d017      	beq.n	8009730 <jpeg_read_header+0x80>
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d115      	bne.n	8009732 <jpeg_read_header+0x82>
  case JPEG_REACHED_SOS:
    retcode = JPEG_HEADER_OK;
 8009706:	2301      	movs	r3, #1
 8009708:	60fb      	str	r3, [r7, #12]
    break;
 800970a:	e012      	b.n	8009732 <jpeg_read_header+0x82>
  case JPEG_REACHED_EOI:
    if (require_image)		/* Complain if application wanted an image */
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d008      	beq.n	8009724 <jpeg_read_header+0x74>
      ERREXIT(cinfo, JERR_NO_IMAGE);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2235      	movs	r2, #53	; 0x35
 8009718:	615a      	str	r2, [r3, #20]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	4798      	blx	r3
    /* Reset to start state; it would be safer to require the application to
     * call jpeg_abort, but we can't change it now for compatibility reasons.
     * A side effect is to free any temporary memory (there shouldn't be any).
     */
    jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f7ff fda0 	bl	800926a <jpeg_abort>
    retcode = JPEG_HEADER_TABLES_ONLY;
 800972a:	2302      	movs	r3, #2
 800972c:	60fb      	str	r3, [r7, #12]
    break;
 800972e:	e000      	b.n	8009732 <jpeg_read_header+0x82>
  case JPEG_SUSPENDED:
    /* no work */
    break;
 8009730:	bf00      	nop
  }

  return retcode;
 8009732:	68fb      	ldr	r3, [r7, #12]
}
 8009734:	4618      	mov	r0, r3
 8009736:	3710      	adds	r7, #16
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <jpeg_consume_input>:
 * method.
 */

GLOBAL(int)
jpeg_consume_input (j_decompress_ptr cinfo)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  int retcode = JPEG_SUSPENDED;
 8009744:	2300      	movs	r3, #0
 8009746:	60fb      	str	r3, [r7, #12]

  /* NB: every possible DSTATE value should be listed in this switch */
  switch (cinfo->global_state) {
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	695b      	ldr	r3, [r3, #20]
 800974c:	3bc8      	subs	r3, #200	; 0xc8
 800974e:	2b0a      	cmp	r3, #10
 8009750:	d842      	bhi.n	80097d8 <jpeg_consume_input+0x9c>
 8009752:	a201      	add	r2, pc, #4	; (adr r2, 8009758 <jpeg_consume_input+0x1c>)
 8009754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009758:	08009785 	.word	0x08009785
 800975c:	080097a1 	.word	0x080097a1
 8009760:	080097c3 	.word	0x080097c3
 8009764:	080097c9 	.word	0x080097c9
 8009768:	080097c9 	.word	0x080097c9
 800976c:	080097c9 	.word	0x080097c9
 8009770:	080097c9 	.word	0x080097c9
 8009774:	080097c9 	.word	0x080097c9
 8009778:	080097c9 	.word	0x080097c9
 800977c:	080097d9 	.word	0x080097d9
 8009780:	080097c9 	.word	0x080097c9
  case DSTATE_START:
    /* Start-of-datastream actions: reset appropriate modules */
    (*cinfo->inputctl->reset_input_controller) (cinfo);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	4798      	blx	r3
    /* Initialize application's data source module */
    (*cinfo->src->init_source) (cinfo);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	699b      	ldr	r3, [r3, #24]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	4798      	blx	r3
    cinfo->global_state = DSTATE_INHEADER;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	22c9      	movs	r2, #201	; 0xc9
 800979e:	615a      	str	r2, [r3, #20]
    /*FALLTHROUGH*/
  case DSTATE_INHEADER:
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	4798      	blx	r3
 80097ac:	60f8      	str	r0, [r7, #12]
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d120      	bne.n	80097f6 <jpeg_consume_input+0xba>
      /* Set up default parameters based on header data */
      default_decompress_parms(cinfo);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f7ff fe59 	bl	800946c <default_decompress_parms>
      /* Set global state: ready for start_decompress */
      cinfo->global_state = DSTATE_READY;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	22ca      	movs	r2, #202	; 0xca
 80097be:	615a      	str	r2, [r3, #20]
    }
    break;
 80097c0:	e019      	b.n	80097f6 <jpeg_consume_input+0xba>
  case DSTATE_READY:
    /* Can't advance past first SOS until start_decompress is called */
    retcode = JPEG_REACHED_SOS;
 80097c2:	2301      	movs	r3, #1
 80097c4:	60fb      	str	r3, [r7, #12]
    break;
 80097c6:	e017      	b.n	80097f8 <jpeg_consume_input+0xbc>
  case DSTATE_SCANNING:
  case DSTATE_RAW_OK:
  case DSTATE_BUFIMAGE:
  case DSTATE_BUFPOST:
  case DSTATE_STOPPING:
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	4798      	blx	r3
 80097d4:	60f8      	str	r0, [r7, #12]
    break;
 80097d6:	e00f      	b.n	80097f8 <jpeg_consume_input+0xbc>
  default:
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2215      	movs	r2, #21
 80097de:	615a      	str	r2, [r3, #20]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	6952      	ldr	r2, [r2, #20]
 80097e8:	619a      	str	r2, [r3, #24]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	4798      	blx	r3
 80097f4:	e000      	b.n	80097f8 <jpeg_consume_input+0xbc>
    break;
 80097f6:	bf00      	nop
  }
  return retcode;
 80097f8:	68fb      	ldr	r3, [r7, #12]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop

08009804 <jpeg_finish_decompress>:
 * a suspending data source is used.
 */

GLOBAL(boolean)
jpeg_finish_decompress (j_decompress_ptr cinfo)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  if ((cinfo->global_state == DSTATE_SCANNING ||
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	695b      	ldr	r3, [r3, #20]
 8009810:	2bcd      	cmp	r3, #205	; 0xcd
 8009812:	d003      	beq.n	800981c <jpeg_finish_decompress+0x18>
       cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	695b      	ldr	r3, [r3, #20]
  if ((cinfo->global_state == DSTATE_SCANNING ||
 8009818:	2bce      	cmp	r3, #206	; 0xce
 800981a:	d11d      	bne.n	8009858 <jpeg_finish_decompress+0x54>
       cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009820:	2b00      	cmp	r3, #0
 8009822:	d119      	bne.n	8009858 <jpeg_finish_decompress+0x54>
    /* Terminate final pass of non-buffered mode */
    if (cinfo->output_scanline < cinfo->output_height)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800982e:	429a      	cmp	r2, r3
 8009830:	d208      	bcs.n	8009844 <jpeg_finish_decompress+0x40>
      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2245      	movs	r2, #69	; 0x45
 8009838:	615a      	str	r2, [r3, #20]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	4798      	blx	r3
    (*cinfo->master->finish_output_pass) (cinfo);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	4798      	blx	r3
    cinfo->global_state = DSTATE_STOPPING;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	22d2      	movs	r2, #210	; 0xd2
 8009854:	615a      	str	r2, [r3, #20]
 8009856:	e019      	b.n	800988c <jpeg_finish_decompress+0x88>
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	695b      	ldr	r3, [r3, #20]
 800985c:	2bcf      	cmp	r3, #207	; 0xcf
 800985e:	d103      	bne.n	8009868 <jpeg_finish_decompress+0x64>
    /* Finishing after a buffered-image operation */
    cinfo->global_state = DSTATE_STOPPING;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	22d2      	movs	r2, #210	; 0xd2
 8009864:	615a      	str	r2, [r3, #20]
 8009866:	e01d      	b.n	80098a4 <jpeg_finish_decompress+0xa0>
  } else if (cinfo->global_state != DSTATE_STOPPING) {
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	695b      	ldr	r3, [r3, #20]
 800986c:	2bd2      	cmp	r3, #210	; 0xd2
 800986e:	d019      	beq.n	80098a4 <jpeg_finish_decompress+0xa0>
    /* STOPPING = repeat call after a suspension, anything else is error */
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2215      	movs	r2, #21
 8009876:	615a      	str	r2, [r3, #20]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	6952      	ldr	r2, [r2, #20]
 8009880:	619a      	str	r2, [r3, #24]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	4798      	blx	r3
  }
  /* Read until EOI */
  while (! cinfo->inputctl->eoi_reached) {
 800988c:	e00a      	b.n	80098a4 <jpeg_finish_decompress+0xa0>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	4798      	blx	r3
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	d101      	bne.n	80098a4 <jpeg_finish_decompress+0xa0>
      return FALSE;		/* Suspend, come back later */
 80098a0:	2300      	movs	r3, #0
 80098a2:	e00e      	b.n	80098c2 <jpeg_finish_decompress+0xbe>
  while (! cinfo->inputctl->eoi_reached) {
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80098aa:	695b      	ldr	r3, [r3, #20]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d0ee      	beq.n	800988e <jpeg_finish_decompress+0x8a>
  }
  /* Do final cleanup */
  (*cinfo->src->term_source) (cinfo);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	699b      	ldr	r3, [r3, #24]
 80098b4:	699b      	ldr	r3, [r3, #24]
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	4798      	blx	r3
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f7ff fcd5 	bl	800926a <jpeg_abort>
  return TRUE;
 80098c0:	2301      	movs	r3, #1
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3708      	adds	r7, #8
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <jpeg_start_decompress>:
 * a suspending data source is used.
 */

GLOBAL(boolean)
jpeg_start_decompress (j_decompress_ptr cinfo)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b084      	sub	sp, #16
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
  if (cinfo->global_state == DSTATE_READY) {
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	695b      	ldr	r3, [r3, #20]
 80098d6:	2bca      	cmp	r3, #202	; 0xca
 80098d8:	d10e      	bne.n	80098f8 <jpeg_start_decompress+0x2e>
    /* First call: initialize master control, select active modules */
    jinit_master_decompress(cinfo);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f009 fed4 	bl	8013688 <jinit_master_decompress>
    if (cinfo->buffered_image) {
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d004      	beq.n	80098f2 <jpeg_start_decompress+0x28>
      /* No more work here; expecting jpeg_start_output next */
      cinfo->global_state = DSTATE_BUFIMAGE;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	22cf      	movs	r2, #207	; 0xcf
 80098ec:	615a      	str	r2, [r3, #20]
      return TRUE;
 80098ee:	2301      	movs	r3, #1
 80098f0:	e063      	b.n	80099ba <jpeg_start_decompress+0xf0>
    }
    cinfo->global_state = DSTATE_PRELOAD;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	22cb      	movs	r2, #203	; 0xcb
 80098f6:	615a      	str	r2, [r3, #20]
  }
  if (cinfo->global_state == DSTATE_PRELOAD) {
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	695b      	ldr	r3, [r3, #20]
 80098fc:	2bcb      	cmp	r3, #203	; 0xcb
 80098fe:	d146      	bne.n	800998e <jpeg_start_decompress+0xc4>
    /* If file has multiple scans, absorb them all into the coef buffer */
    if (cinfo->inputctl->has_multiple_scans) {
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d039      	beq.n	8009980 <jpeg_start_decompress+0xb6>
#ifdef D_MULTISCAN_FILES_SUPPORTED
      for (;;) {
	int retcode;
	/* Call progress monitor hook if present */
	if (cinfo->progress != NULL)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d004      	beq.n	800991e <jpeg_start_decompress+0x54>
	  (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	4798      	blx	r3
	/* Absorb some more input */
	retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	4798      	blx	r3
 800992a:	60f8      	str	r0, [r7, #12]
	if (retcode == JPEG_SUSPENDED)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d101      	bne.n	8009936 <jpeg_start_decompress+0x6c>
	  return FALSE;
 8009932:	2300      	movs	r3, #0
 8009934:	e041      	b.n	80099ba <jpeg_start_decompress+0xf0>
	if (retcode == JPEG_REACHED_EOI)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2b02      	cmp	r3, #2
 800993a:	d020      	beq.n	800997e <jpeg_start_decompress+0xb4>
	  break;
	/* Advance progress counter if appropriate */
	if (cinfo->progress != NULL &&
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d0e3      	beq.n	800990c <jpeg_start_decompress+0x42>
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2b03      	cmp	r3, #3
 8009948:	d002      	beq.n	8009950 <jpeg_start_decompress+0x86>
	    (retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2b01      	cmp	r3, #1
 800994e:	d1dd      	bne.n	800990c <jpeg_start_decompress+0x42>
	  if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	685a      	ldr	r2, [r3, #4]
 8009956:	3201      	adds	r2, #1
 8009958:	605a      	str	r2, [r3, #4]
 800995a:	685a      	ldr	r2, [r3, #4]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	429a      	cmp	r2, r3
 8009964:	dbd2      	blt.n	800990c <jpeg_start_decompress+0x42>
	    /* jdmaster underestimated number of scans; ratchet up one scan */
	    cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	689a      	ldr	r2, [r3, #8]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8009972:	4619      	mov	r1, r3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	440a      	add	r2, r1
 800997a:	609a      	str	r2, [r3, #8]
      for (;;) {
 800997c:	e7c6      	b.n	800990c <jpeg_start_decompress+0x42>
	  break;
 800997e:	bf00      	nop
      }
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif /* D_MULTISCAN_FILES_SUPPORTED */
    }
    cinfo->output_scan_number = cinfo->input_scan_number;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800998c:	e011      	b.n	80099b2 <jpeg_start_decompress+0xe8>
  } else if (cinfo->global_state != DSTATE_PRESCAN)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	695b      	ldr	r3, [r3, #20]
 8009992:	2bcc      	cmp	r3, #204	; 0xcc
 8009994:	d00d      	beq.n	80099b2 <jpeg_start_decompress+0xe8>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2215      	movs	r2, #21
 800999c:	615a      	str	r2, [r3, #20]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	6952      	ldr	r2, [r2, #20]
 80099a6:	619a      	str	r2, [r3, #24]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	4798      	blx	r3
  /* Perform any dummy output passes, and set up for the final pass */
  return output_pass_setup(cinfo);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 f805 	bl	80099c2 <output_pass_setup>
 80099b8:	4603      	mov	r3, r0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <output_pass_setup>:
 *       If suspended, returns FALSE and sets global_state = DSTATE_PRESCAN.
 */

LOCAL(boolean)
output_pass_setup (j_decompress_ptr cinfo)
{
 80099c2:	b590      	push	{r4, r7, lr}
 80099c4:	b085      	sub	sp, #20
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
  if (cinfo->global_state != DSTATE_PRESCAN) {
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	695b      	ldr	r3, [r3, #20]
 80099ce:	2bcc      	cmp	r3, #204	; 0xcc
 80099d0:	d04f      	beq.n	8009a72 <output_pass_setup+0xb0>
    /* First call: do pass setup */
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	4798      	blx	r3
    cinfo->output_scanline = 0;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    cinfo->global_state = DSTATE_PRESCAN;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	22cc      	movs	r2, #204	; 0xcc
 80099ea:	615a      	str	r2, [r3, #20]
  }
  /* Loop over any required dummy passes */
  while (cinfo->master->is_dummy_pass) {
 80099ec:	e041      	b.n	8009a72 <output_pass_setup+0xb0>
#ifdef QUANT_2PASS_SUPPORTED
    /* Crank through the dummy pass */
    while (cinfo->output_scanline < cinfo->output_height) {
      JDIMENSION last_scanline;
      /* Call progress monitor hook if present */
      if (cinfo->progress != NULL) {
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00f      	beq.n	8009a16 <output_pass_setup+0x54>
	cinfo->progress->pass_counter = (long) cinfo->output_scanline;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	605a      	str	r2, [r3, #4]
	cinfo->progress->pass_limit = (long) cinfo->output_height;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	609a      	str	r2, [r3, #8]
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	4798      	blx	r3
      }
      /* Process some data */
      last_scanline = cinfo->output_scanline;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a1c:	60fb      	str	r3, [r7, #12]
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8009a24:	685c      	ldr	r4, [r3, #4]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	2100      	movs	r1, #0
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	47a0      	blx	r4
				    &cinfo->output_scanline, (JDIMENSION) 0);
      if (cinfo->output_scanline == last_scanline)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a3a:	68fa      	ldr	r2, [r7, #12]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d101      	bne.n	8009a44 <output_pass_setup+0x82>
	return FALSE;		/* No progress made, must suspend */
 8009a40:	2300      	movs	r3, #0
 8009a42:	e026      	b.n	8009a92 <output_pass_setup+0xd0>
    while (cinfo->output_scanline < cinfo->output_height) {
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d3cd      	bcc.n	80099ee <output_pass_setup+0x2c>
    }
    /* Finish up dummy pass, and set up for another one */
    (*cinfo->master->finish_output_pass) (cinfo);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	4798      	blx	r3
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	4798      	blx	r3
    cinfo->output_scanline = 0;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (cinfo->master->is_dummy_pass) {
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d1e2      	bne.n	8009a44 <output_pass_setup+0x82>
#endif /* QUANT_2PASS_SUPPORTED */
  }
  /* Ready for application to drive output pass through
   * jpeg_read_scanlines or jpeg_read_raw_data.
   */
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d001      	beq.n	8009a8a <output_pass_setup+0xc8>
 8009a86:	22ce      	movs	r2, #206	; 0xce
 8009a88:	e000      	b.n	8009a8c <output_pass_setup+0xca>
 8009a8a:	22cd      	movs	r2, #205	; 0xcd
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	615a      	str	r2, [r3, #20]
  return TRUE;
 8009a90:	2301      	movs	r3, #1
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3714      	adds	r7, #20
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd90      	pop	{r4, r7, pc}

08009a9a <jpeg_read_scanlines>:
 */

GLOBAL(JDIMENSION)
jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines,
		     JDIMENSION max_lines)
{
 8009a9a:	b590      	push	{r4, r7, lr}
 8009a9c:	b087      	sub	sp, #28
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	60f8      	str	r0, [r7, #12]
 8009aa2:	60b9      	str	r1, [r7, #8]
 8009aa4:	607a      	str	r2, [r7, #4]
  JDIMENSION row_ctr;

  if (cinfo->global_state != DSTATE_SCANNING)
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	695b      	ldr	r3, [r3, #20]
 8009aaa:	2bcd      	cmp	r3, #205	; 0xcd
 8009aac:	d00d      	beq.n	8009aca <jpeg_read_scanlines+0x30>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2215      	movs	r2, #21
 8009ab4:	615a      	str	r2, [r3, #20]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	6952      	ldr	r2, [r2, #20]
 8009abe:	619a      	str	r2, [r3, #24]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	4798      	blx	r3
  if (cinfo->output_scanline >= cinfo->output_height) {
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d30c      	bcc.n	8009af2 <jpeg_read_scanlines+0x58>
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	227e      	movs	r2, #126	; 0x7e
 8009ade:	615a      	str	r2, [r3, #20]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	f04f 31ff 	mov.w	r1, #4294967295
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	4798      	blx	r3
    return 0;
 8009aee:	2300      	movs	r3, #0
 8009af0:	e028      	b.n	8009b44 <jpeg_read_scanlines+0xaa>
  }

  /* Call progress monitor hook if present */
  if (cinfo->progress != NULL) {
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d00f      	beq.n	8009b1a <jpeg_read_scanlines+0x80>
    cinfo->progress->pass_counter = (long) cinfo->output_scanline;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	605a      	str	r2, [r3, #4]
    cinfo->progress->pass_limit = (long) cinfo->output_height;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	609a      	str	r2, [r3, #8]
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	4798      	blx	r3
  }

  /* Process some data */
  row_ctr = 0;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	617b      	str	r3, [r7, #20]
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8009b24:	685c      	ldr	r4, [r3, #4]
 8009b26:	f107 0214 	add.w	r2, r7, #20
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	68b9      	ldr	r1, [r7, #8]
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	47a0      	blx	r4
  cinfo->output_scanline += row_ctr;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	441a      	add	r2, r3
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  return row_ctr;
 8009b42:	697b      	ldr	r3, [r7, #20]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	371c      	adds	r7, #28
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd90      	pop	{r4, r7, pc}

08009b4c <get_byte>:


LOCAL(int)
get_byte (j_decompress_ptr cinfo)
/* Read next input byte; we do not support suspension in this module. */
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  struct jpeg_source_mgr * src = cinfo->src;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	699b      	ldr	r3, [r3, #24]
 8009b58:	60fb      	str	r3, [r7, #12]

  if (src->bytes_in_buffer == 0)
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10f      	bne.n	8009b82 <get_byte+0x36>
    if (! (*src->fill_input_buffer) (cinfo))
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	4798      	blx	r3
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d108      	bne.n	8009b82 <get_byte+0x36>
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2219      	movs	r2, #25
 8009b76:	615a      	str	r2, [r3, #20]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	4798      	blx	r3
  src->bytes_in_buffer--;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	1e5a      	subs	r2, r3, #1
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	605a      	str	r2, [r3, #4]
  return GETJOCTET(*src->next_input_byte++);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	1c59      	adds	r1, r3, #1
 8009b92:	68fa      	ldr	r2, [r7, #12]
 8009b94:	6011      	str	r1, [r2, #0]
 8009b96:	781b      	ldrb	r3, [r3, #0]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <arith_decode>:
 * derived from Markus Kuhn's JBIG implementation.
 */

LOCAL(int)
arith_decode (j_decompress_ptr cinfo, unsigned char *st)
{
 8009ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ba4:	b083      	sub	sp, #12
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
 8009baa:	6039      	str	r1, [r7, #0]
  register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 41d0 	ldr.w	r4, [r3, #464]	; 0x1d0
  register unsigned char nl, nm;
  register INT32 qe, temp;
  register int sv, data;

  /* Renormalization & data input per section D.2.6 */
  while (e->a < 0x8000L) {
 8009bb2:	e036      	b.n	8009c22 <arith_decode+0x82>
    if (--e->ct < 0) {
 8009bb4:	6923      	ldr	r3, [r4, #16]
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	6123      	str	r3, [r4, #16]
 8009bba:	6923      	ldr	r3, [r4, #16]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	da2d      	bge.n	8009c1c <arith_decode+0x7c>
      /* Need to fetch next data byte */
      if (cinfo->unread_marker)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d001      	beq.n	8009bce <arith_decode+0x2e>
	data = 0;		/* stuff zero data */
 8009bca:	2500      	movs	r5, #0
 8009bcc:	e013      	b.n	8009bf6 <arith_decode+0x56>
      else {
	data = get_byte(cinfo);	/* read next input byte */
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f7ff ffbc 	bl	8009b4c <get_byte>
 8009bd4:	4605      	mov	r5, r0
	if (data == 0xFF) {	/* zero stuff or marker code */
 8009bd6:	2dff      	cmp	r5, #255	; 0xff
 8009bd8:	d10d      	bne.n	8009bf6 <arith_decode+0x56>
	  do data = get_byte(cinfo);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f7ff ffb6 	bl	8009b4c <get_byte>
 8009be0:	4605      	mov	r5, r0
	  while (data == 0xFF);	/* swallow extra 0xFF bytes */
 8009be2:	2dff      	cmp	r5, #255	; 0xff
 8009be4:	d0f9      	beq.n	8009bda <arith_decode+0x3a>
	  if (data == 0)
 8009be6:	2d00      	cmp	r5, #0
 8009be8:	d101      	bne.n	8009bee <arith_decode+0x4e>
	    data = 0xFF;	/* discard stuffed zero byte */
 8009bea:	25ff      	movs	r5, #255	; 0xff
 8009bec:	e003      	b.n	8009bf6 <arith_decode+0x56>
	     * a marker while processing the compressed data
	     * segment is legal in arithmetic coding.
	     * The convention is to supply zero data
	     * then until decoding is complete.
	     */
	    cinfo->unread_marker = data;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8c3 51b4 	str.w	r5, [r3, #436]	; 0x1b4
	    data = 0;
 8009bf4:	2500      	movs	r5, #0
	  }
	}
      }
      e->c = (e->c << 8) | data; /* insert data into C register */
 8009bf6:	68a3      	ldr	r3, [r4, #8]
 8009bf8:	021b      	lsls	r3, r3, #8
 8009bfa:	432b      	orrs	r3, r5
 8009bfc:	60a3      	str	r3, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 8009bfe:	6923      	ldr	r3, [r4, #16]
 8009c00:	3308      	adds	r3, #8
 8009c02:	6123      	str	r3, [r4, #16]
 8009c04:	6923      	ldr	r3, [r4, #16]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	da08      	bge.n	8009c1c <arith_decode+0x7c>
	/* Need more initial bytes */
	if (++e->ct == 0)
 8009c0a:	6923      	ldr	r3, [r4, #16]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	6123      	str	r3, [r4, #16]
 8009c10:	6923      	ldr	r3, [r4, #16]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d102      	bne.n	8009c1c <arith_decode+0x7c>
	  /* Got 2 initial bytes -> re-init A and exit loop */
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 8009c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c1a:	60e3      	str	r3, [r4, #12]
    }
    e->a <<= 1;
 8009c1c:	68e3      	ldr	r3, [r4, #12]
 8009c1e:	005b      	lsls	r3, r3, #1
 8009c20:	60e3      	str	r3, [r4, #12]
  while (e->a < 0x8000L) {
 8009c22:	68e3      	ldr	r3, [r4, #12]
 8009c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c28:	dbc4      	blt.n	8009bb4 <arith_decode+0x14>
  }

  /* Fetch values from our compact representation of Table D.3(D.2):
   * Qe values and probability estimation state machine
   */
  sv = *st;
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	461e      	mov	r6, r3
  qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 8009c30:	f006 037f 	and.w	r3, r6, #127	; 0x7f
 8009c34:	4a2c      	ldr	r2, [pc, #176]	; (8009ce8 <arith_decode+0x148>)
 8009c36:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
  nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
 8009c3a:	fa5f f985 	uxtb.w	r9, r5
 8009c3e:	122d      	asrs	r5, r5, #8
  nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 8009c40:	fa5f f885 	uxtb.w	r8, r5
 8009c44:	122d      	asrs	r5, r5, #8

  /* Decode & estimation procedures per sections D.2.4 & D.2.5 */
  temp = e->a - qe;
 8009c46:	68e3      	ldr	r3, [r4, #12]
 8009c48:	1b5a      	subs	r2, r3, r5
  e->a = temp;
 8009c4a:	60e2      	str	r2, [r4, #12]
  temp <<= e->ct;
 8009c4c:	6923      	ldr	r3, [r4, #16]
 8009c4e:	409a      	lsls	r2, r3
  if (e->c >= temp) {
 8009c50:	68a3      	ldr	r3, [r4, #8]
 8009c52:	4611      	mov	r1, r2
 8009c54:	4299      	cmp	r1, r3
 8009c56:	dc21      	bgt.n	8009c9c <arith_decode+0xfc>
    e->c -= temp;
 8009c58:	68a3      	ldr	r3, [r4, #8]
 8009c5a:	1a9b      	subs	r3, r3, r2
 8009c5c:	60a3      	str	r3, [r4, #8]
    /* Conditional LPS (less probable symbol) exchange */
    if (e->a < qe) {
 8009c5e:	68e3      	ldr	r3, [r4, #12]
 8009c60:	429d      	cmp	r5, r3
 8009c62:	dd0c      	ble.n	8009c7e <arith_decode+0xde>
      e->a = qe;
 8009c64:	60e5      	str	r5, [r4, #12]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009c66:	b273      	sxtb	r3, r6
 8009c68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009c6c:	b25a      	sxtb	r2, r3
 8009c6e:	fa4f f388 	sxtb.w	r3, r8
 8009c72:	4053      	eors	r3, r2
 8009c74:	b25b      	sxtb	r3, r3
 8009c76:	b2da      	uxtb	r2, r3
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	701a      	strb	r2, [r3, #0]
 8009c7c:	e02e      	b.n	8009cdc <arith_decode+0x13c>
    } else {
      e->a = qe;
 8009c7e:	60e5      	str	r5, [r4, #12]
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 8009c80:	b273      	sxtb	r3, r6
 8009c82:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009c86:	b25a      	sxtb	r2, r3
 8009c88:	fa4f f389 	sxtb.w	r3, r9
 8009c8c:	4053      	eors	r3, r2
 8009c8e:	b25b      	sxtb	r3, r3
 8009c90:	b2da      	uxtb	r2, r3
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	701a      	strb	r2, [r3, #0]
      sv ^= 0x80;		/* Exchange LPS/MPS */
 8009c96:	f086 0680 	eor.w	r6, r6, #128	; 0x80
 8009c9a:	e01f      	b.n	8009cdc <arith_decode+0x13c>
    }
  } else if (e->a < 0x8000L) {
 8009c9c:	68e3      	ldr	r3, [r4, #12]
 8009c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ca2:	da1b      	bge.n	8009cdc <arith_decode+0x13c>
    /* Conditional MPS (more probable symbol) exchange */
    if (e->a < qe) {
 8009ca4:	68e3      	ldr	r3, [r4, #12]
 8009ca6:	429d      	cmp	r5, r3
 8009ca8:	dd0d      	ble.n	8009cc6 <arith_decode+0x126>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 8009caa:	b273      	sxtb	r3, r6
 8009cac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009cb0:	b25a      	sxtb	r2, r3
 8009cb2:	fa4f f389 	sxtb.w	r3, r9
 8009cb6:	4053      	eors	r3, r2
 8009cb8:	b25b      	sxtb	r3, r3
 8009cba:	b2da      	uxtb	r2, r3
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	701a      	strb	r2, [r3, #0]
      sv ^= 0x80;		/* Exchange LPS/MPS */
 8009cc0:	f086 0680 	eor.w	r6, r6, #128	; 0x80
 8009cc4:	e00a      	b.n	8009cdc <arith_decode+0x13c>
    } else {
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009cc6:	b273      	sxtb	r3, r6
 8009cc8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009ccc:	b25a      	sxtb	r2, r3
 8009cce:	fa4f f388 	sxtb.w	r3, r8
 8009cd2:	4053      	eors	r3, r2
 8009cd4:	b25b      	sxtb	r3, r3
 8009cd6:	b2da      	uxtb	r2, r3
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	701a      	strb	r2, [r3, #0]
    }
  }

  return sv >> 7;
 8009cdc:	11f3      	asrs	r3, r6, #7
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	370c      	adds	r7, #12
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ce8:	08026d04 	.word	0x08026d04

08009cec <process_restart>:
 * Check for a restart marker & resynchronize decoder.
 */

LOCAL(void)
process_restart (j_decompress_ptr cinfo)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b086      	sub	sp, #24
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8009cfa:	613b      	str	r3, [r7, #16]
  int ci;
  jpeg_component_info * compptr;

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	4798      	blx	r3
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d108      	bne.n	8009d20 <process_restart+0x34>
    ERREXIT(cinfo, JERR_CANT_SUSPEND);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2219      	movs	r2, #25
 8009d14:	615a      	str	r2, [r3, #20]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	4798      	blx	r3

  /* Re-initialize statistics areas */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009d20:	2300      	movs	r3, #0
 8009d22:	617b      	str	r3, [r7, #20]
 8009d24:	e051      	b.n	8009dca <process_restart+0xde>
    compptr = cinfo->cur_comp_info[ci];
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	3354      	adds	r3, #84	; 0x54
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	4413      	add	r3, r2
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	60fb      	str	r3, [r7, #12]
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d009      	beq.n	8009d52 <process_restart+0x66>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d11d      	bne.n	8009d84 <process_restart+0x98>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d118      	bne.n	8009d84 <process_restart+0x98>
      MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	695a      	ldr	r2, [r3, #20]
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	320e      	adds	r2, #14
 8009d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d5e:	2240      	movs	r2, #64	; 0x40
 8009d60:	2100      	movs	r1, #0
 8009d62:	4618      	mov	r0, r3
 8009d64:	f01b f900 	bl	8024f68 <memset>
      /* Reset DC predictions to 0 */
      entropy->last_dc_val[ci] = 0;
 8009d68:	693a      	ldr	r2, [r7, #16]
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	3304      	adds	r3, #4
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4413      	add	r3, r2
 8009d72:	2200      	movs	r2, #0
 8009d74:	605a      	str	r2, [r3, #4]
      entropy->dc_context[ci] = 0;
 8009d76:	693a      	ldr	r2, [r7, #16]
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	3308      	adds	r3, #8
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	4413      	add	r3, r2
 8009d80:	2200      	movs	r2, #0
 8009d82:	605a      	str	r2, [r3, #4]
    }
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d104      	bne.n	8009d98 <process_restart+0xac>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d109      	bne.n	8009dac <process_restart+0xc0>
	(cinfo->progressive_mode && cinfo->Ss)) {
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d010      	beq.n	8009dc4 <process_restart+0xd8>
	(cinfo->progressive_mode && cinfo->Ss)) {
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d00b      	beq.n	8009dc4 <process_restart+0xd8>
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	699a      	ldr	r2, [r3, #24]
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	321e      	adds	r2, #30
 8009db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009db8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009dbc:	2100      	movs	r1, #0
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f01b f8d2 	bl	8024f68 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	617b      	str	r3, [r7, #20]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8009dd0:	697a      	ldr	r2, [r7, #20]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	dba7      	blt.n	8009d26 <process_restart+0x3a>
    }
  }

  /* Reset arithmetic decoding variables */
  entropy->c = 0;
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	609a      	str	r2, [r3, #8]
  entropy->a = 0;
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	2200      	movs	r2, #0
 8009de0:	60da      	str	r2, [r3, #12]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	f06f 020f 	mvn.w	r2, #15
 8009de8:	611a      	str	r2, [r3, #16]

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8009df4:	bf00      	nop
 8009df6:	3718      	adds	r7, #24
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <decode_mcu_DC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b08c      	sub	sp, #48	; 0x30
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8009e0c:	61fb      	str	r3, [r7, #28]
  unsigned char *st;
  int blkn, ci, tbl, sign;
  int v, m;

  /* Process restart marker if needed */
  if (cinfo->restart_interval) {
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d00b      	beq.n	8009e30 <decode_mcu_DC_first+0x34>
    if (entropy->restarts_to_go == 0)
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d102      	bne.n	8009e26 <decode_mcu_DC_first+0x2a>
      process_restart(cinfo);
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f7ff ff63 	bl	8009cec <process_restart>
    entropy->restarts_to_go--;
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e2a:	1e5a      	subs	r2, r3, #1
 8009e2c:	69fb      	ldr	r3, [r7, #28]
 8009e2e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	691b      	ldr	r3, [r3, #16]
 8009e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e38:	d101      	bne.n	8009e3e <decode_mcu_DC_first+0x42>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e0ec      	b.n	800a018 <decode_mcu_DC_first+0x21c>

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009e3e:	2300      	movs	r3, #0
 8009e40:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e42:	e0e1      	b.n	800a008 <decode_mcu_DC_first+0x20c>
    block = MCU_data[blkn];
 8009e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	683a      	ldr	r2, [r7, #0]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	61bb      	str	r3, [r7, #24]
    ci = cinfo->MCU_membership[blkn];
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e54:	325c      	adds	r2, #92	; 0x5c
 8009e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e5a:	617b      	str	r3, [r7, #20]
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	3354      	adds	r3, #84	; 0x54
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	4413      	add	r3, r2
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	695b      	ldr	r3, [r3, #20]
 8009e6a:	613b      	str	r3, [r7, #16]

    /* Sections F.2.4.1 & F.1.4.4.1: Decoding of DC coefficients */

    /* Table F.4: Point to statistics bin S0 for DC coefficient coding */
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	693a      	ldr	r2, [r7, #16]
 8009e70:	320e      	adds	r2, #14
 8009e72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009e76:	69f9      	ldr	r1, [r7, #28]
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	3308      	adds	r3, #8
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	440b      	add	r3, r1
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	4413      	add	r3, r2
 8009e84:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Figure F.19: Decode_DC_DIFF */
    if (arith_decode(cinfo, st) == 0)
 8009e86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f7ff fe89 	bl	8009ba0 <arith_decode>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d107      	bne.n	8009ea4 <decode_mcu_DC_first+0xa8>
      entropy->dc_context[ci] = 0;
 8009e94:	69fa      	ldr	r2, [r7, #28]
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	3308      	adds	r3, #8
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	4413      	add	r3, r2
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	605a      	str	r2, [r3, #4]
 8009ea2:	e0a0      	b.n	8009fe6 <decode_mcu_DC_first+0x1ea>
    else {
      /* Figure F.21: Decoding nonzero value v */
      /* Figure F.22: Decoding the sign of v */
      sign = arith_decode(cinfo, st + 1);
 8009ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f7ff fe78 	bl	8009ba0 <arith_decode>
 8009eb0:	60f8      	str	r0, [r7, #12]
      st += 2; st += sign;
 8009eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb4:	3302      	adds	r3, #2
 8009eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ebc:	4413      	add	r3, r2
 8009ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
      /* Figure F.23: Decoding the magnitude category of v */
      if ((m = arith_decode(cinfo, st)) != 0) {
 8009ec0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f7ff fe6c 	bl	8009ba0 <arith_decode>
 8009ec8:	6238      	str	r0, [r7, #32]
 8009eca:	6a3b      	ldr	r3, [r7, #32]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d029      	beq.n	8009f24 <decode_mcu_DC_first+0x128>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 8009ed0:	69fb      	ldr	r3, [r7, #28]
 8009ed2:	693a      	ldr	r2, [r7, #16]
 8009ed4:	320e      	adds	r2, #14
 8009ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eda:	3314      	adds	r3, #20
 8009edc:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (arith_decode(cinfo, st)) {
 8009ede:	e01a      	b.n	8009f16 <decode_mcu_DC_first+0x11a>
	  if ((m <<= 1) == 0x8000) {
 8009ee0:	6a3b      	ldr	r3, [r7, #32]
 8009ee2:	005b      	lsls	r3, r3, #1
 8009ee4:	623b      	str	r3, [r7, #32]
 8009ee6:	6a3b      	ldr	r3, [r7, #32]
 8009ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009eec:	d110      	bne.n	8009f10 <decode_mcu_DC_first+0x114>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2275      	movs	r2, #117	; 0x75
 8009ef4:	615a      	str	r2, [r3, #20]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	f04f 31ff 	mov.w	r1, #4294967295
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	f04f 32ff 	mov.w	r2, #4294967295
 8009f0a:	611a      	str	r2, [r3, #16]
	    return TRUE;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e083      	b.n	800a018 <decode_mcu_DC_first+0x21c>
	  }
	  st += 1;
 8009f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f12:	3301      	adds	r3, #1
 8009f14:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (arith_decode(cinfo, st)) {
 8009f16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f7ff fe41 	bl	8009ba0 <arith_decode>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d1dd      	bne.n	8009ee0 <decode_mcu_DC_first+0xe4>
	}
      }
      /* Section F.1.4.4.1.2: Establish dc_context conditioning category */
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	4413      	add	r3, r2
 8009f2a:	33e8      	adds	r3, #232	; 0xe8
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	461a      	mov	r2, r3
 8009f30:	2301      	movs	r3, #1
 8009f32:	4093      	lsls	r3, r2
 8009f34:	105b      	asrs	r3, r3, #1
 8009f36:	6a3a      	ldr	r2, [r7, #32]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	da07      	bge.n	8009f4c <decode_mcu_DC_first+0x150>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 8009f3c:	69fa      	ldr	r2, [r7, #28]
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	3308      	adds	r3, #8
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	4413      	add	r3, r2
 8009f46:	2200      	movs	r2, #0
 8009f48:	605a      	str	r2, [r3, #4]
 8009f4a:	e01e      	b.n	8009f8a <decode_mcu_DC_first+0x18e>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	4413      	add	r3, r2
 8009f52:	33f8      	adds	r3, #248	; 0xf8
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	461a      	mov	r2, r3
 8009f58:	2301      	movs	r3, #1
 8009f5a:	4093      	lsls	r3, r2
 8009f5c:	105b      	asrs	r3, r3, #1
 8009f5e:	6a3a      	ldr	r2, [r7, #32]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	dd09      	ble.n	8009f78 <decode_mcu_DC_first+0x17c>
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	3303      	adds	r3, #3
 8009f68:	009a      	lsls	r2, r3, #2
 8009f6a:	69f9      	ldr	r1, [r7, #28]
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	3308      	adds	r3, #8
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	440b      	add	r3, r1
 8009f74:	605a      	str	r2, [r3, #4]
 8009f76:	e008      	b.n	8009f8a <decode_mcu_DC_first+0x18e>
      else
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	009a      	lsls	r2, r3, #2
 8009f7e:	69f9      	ldr	r1, [r7, #28]
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	3308      	adds	r3, #8
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	440b      	add	r3, r1
 8009f88:	605a      	str	r2, [r3, #4]
      v = m;
 8009f8a:	6a3b      	ldr	r3, [r7, #32]
 8009f8c:	627b      	str	r3, [r7, #36]	; 0x24
      /* Figure F.24: Decoding the magnitude bit pattern of v */
      st += 14;
 8009f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f90:	330e      	adds	r3, #14
 8009f92:	62fb      	str	r3, [r7, #44]	; 0x2c
      while (m >>= 1)
 8009f94:	e00a      	b.n	8009fac <decode_mcu_DC_first+0x1b0>
	if (arith_decode(cinfo, st)) v |= m;
 8009f96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f7ff fe01 	bl	8009ba0 <arith_decode>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d003      	beq.n	8009fac <decode_mcu_DC_first+0x1b0>
 8009fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fa6:	6a3b      	ldr	r3, [r7, #32]
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	627b      	str	r3, [r7, #36]	; 0x24
      while (m >>= 1)
 8009fac:	6a3b      	ldr	r3, [r7, #32]
 8009fae:	105b      	asrs	r3, r3, #1
 8009fb0:	623b      	str	r3, [r7, #32]
 8009fb2:	6a3b      	ldr	r3, [r7, #32]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d1ee      	bne.n	8009f96 <decode_mcu_DC_first+0x19a>
      v += 1; if (sign) v = -v;
 8009fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fba:	3301      	adds	r3, #1
 8009fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d002      	beq.n	8009fca <decode_mcu_DC_first+0x1ce>
 8009fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc6:	425b      	negs	r3, r3
 8009fc8:	627b      	str	r3, [r7, #36]	; 0x24
      entropy->last_dc_val[ci] += v;
 8009fca:	69fa      	ldr	r2, [r7, #28]
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	3304      	adds	r3, #4
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	4413      	add	r3, r2
 8009fd4:	685a      	ldr	r2, [r3, #4]
 8009fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd8:	441a      	add	r2, r3
 8009fda:	69f9      	ldr	r1, [r7, #28]
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	3304      	adds	r3, #4
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	440b      	add	r3, r1
 8009fe4:	605a      	str	r2, [r3, #4]
    }

    /* Scale and output the DC coefficient (assumes jpeg_natural_order[0]=0) */
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 8009fe6:	69fa      	ldr	r2, [r7, #28]
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	3304      	adds	r3, #4
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	4413      	add	r3, r2
 8009ff0:	685a      	ldr	r2, [r3, #4]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8009ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8009ffc:	b21a      	sxth	r2, r3
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	801a      	strh	r2, [r3, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a004:	3301      	adds	r3, #1
 800a006:	62bb      	str	r3, [r7, #40]	; 0x28
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800a00e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a010:	429a      	cmp	r2, r3
 800a012:	f6ff af17 	blt.w	8009e44 <decode_mcu_DC_first+0x48>
  }

  return TRUE;
 800a016:	2301      	movs	r3, #1
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3730      	adds	r7, #48	; 0x30
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <decode_mcu_AC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_AC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b08c      	sub	sp, #48	; 0x30
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800a030:	61fb      	str	r3, [r7, #28]
  int tbl, sign, k;
  int v, m;
  const int * natural_order;

  /* Process restart marker if needed */
  if (cinfo->restart_interval) {
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d00b      	beq.n	800a054 <decode_mcu_AC_first+0x34>
    if (entropy->restarts_to_go == 0)
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a040:	2b00      	cmp	r3, #0
 800a042:	d102      	bne.n	800a04a <decode_mcu_AC_first+0x2a>
      process_restart(cinfo);
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f7ff fe51 	bl	8009cec <process_restart>
    entropy->restarts_to_go--;
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a04e:	1e5a      	subs	r2, r3, #1
 800a050:	69fb      	ldr	r3, [r7, #28]
 800a052:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a05c:	d101      	bne.n	800a062 <decode_mcu_AC_first+0x42>
 800a05e:	2301      	movs	r3, #1
 800a060:	e0da      	b.n	800a218 <decode_mcu_AC_first+0x1f8>

  natural_order = cinfo->natural_order;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800a068:	61bb      	str	r3, [r7, #24]

  /* There is always only one block per MCU */
  block = MCU_data[0];
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	617b      	str	r3, [r7, #20]
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800a076:	699b      	ldr	r3, [r3, #24]
 800a078:	613b      	str	r3, [r7, #16]

  /* Sections F.2.4.2 & F.1.4.4.2: Decoding of AC coefficients */

  /* Figure F.20: Decode_AC_coefficients */
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800a080:	62bb      	str	r3, [r7, #40]	; 0x28
 800a082:	e0bf      	b.n	800a204 <decode_mcu_AC_first+0x1e4>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	693a      	ldr	r2, [r7, #16]
 800a088:	321e      	adds	r2, #30
 800a08a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a090:	1e5a      	subs	r2, r3, #1
 800a092:	4613      	mov	r3, r2
 800a094:	005b      	lsls	r3, r3, #1
 800a096:	4413      	add	r3, r2
 800a098:	440b      	add	r3, r1
 800a09a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 800a09c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f7ff fd7e 	bl	8009ba0 <arith_decode>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	f040 80b4 	bne.w	800a214 <decode_mcu_AC_first+0x1f4>
    while (arith_decode(cinfo, st + 1) == 0) {
 800a0ac:	e01c      	b.n	800a0e8 <decode_mcu_AC_first+0xc8>
      st += 3; k++;
 800a0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b0:	3303      	adds	r3, #3
 800a0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	62bb      	str	r3, [r7, #40]	; 0x28
      if (k > cinfo->Se) {
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800a0c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	dd10      	ble.n	800a0e8 <decode_mcu_AC_first+0xc8>
	WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	2275      	movs	r2, #117	; 0x75
 800a0cc:	615a      	str	r2, [r3, #20]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	f04f 31ff 	mov.w	r1, #4294967295
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	4798      	blx	r3
	entropy->ct = -1;			/* spectral overflow */
 800a0dc:	69fb      	ldr	r3, [r7, #28]
 800a0de:	f04f 32ff 	mov.w	r2, #4294967295
 800a0e2:	611a      	str	r2, [r3, #16]
	return TRUE;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e097      	b.n	800a218 <decode_mcu_AC_first+0x1f8>
    while (arith_decode(cinfo, st + 1) == 0) {
 800a0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f7ff fd56 	bl	8009ba0 <arith_decode>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d0d9      	beq.n	800a0ae <decode_mcu_AC_first+0x8e>
      }
    }
    /* Figure F.21: Decoding nonzero value v */
    /* Figure F.22: Decoding the sign of v */
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	33b8      	adds	r3, #184	; 0xb8
 800a0fe:	4619      	mov	r1, r3
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f7ff fd4d 	bl	8009ba0 <arith_decode>
 800a106:	60f8      	str	r0, [r7, #12]
    st += 2;
 800a108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10a:	3302      	adds	r3, #2
 800a10c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Figure F.23: Decoding the magnitude category of v */
    if ((m = arith_decode(cinfo, st)) != 0) {
 800a10e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f7ff fd45 	bl	8009ba0 <arith_decode>
 800a116:	6238      	str	r0, [r7, #32]
 800a118:	6a3b      	ldr	r3, [r7, #32]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d040      	beq.n	800a1a0 <decode_mcu_AC_first+0x180>
      if (arith_decode(cinfo, st)) {
 800a11e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f7ff fd3d 	bl	8009ba0 <arith_decode>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d039      	beq.n	800a1a0 <decode_mcu_AC_first+0x180>
	m <<= 1;
 800a12c:	6a3b      	ldr	r3, [r7, #32]
 800a12e:	005b      	lsls	r3, r3, #1
 800a130:	623b      	str	r3, [r7, #32]
	st = entropy->ac_stats[tbl] +
 800a132:	69fb      	ldr	r3, [r7, #28]
 800a134:	693a      	ldr	r2, [r7, #16]
 800a136:	321e      	adds	r2, #30
 800a138:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a13c:	6879      	ldr	r1, [r7, #4]
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	440b      	add	r3, r1
 800a142:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	4619      	mov	r1, r3
 800a14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14c:	428b      	cmp	r3, r1
 800a14e:	dc01      	bgt.n	800a154 <decode_mcu_AC_first+0x134>
 800a150:	23bd      	movs	r3, #189	; 0xbd
 800a152:	e000      	b.n	800a156 <decode_mcu_AC_first+0x136>
 800a154:	23d9      	movs	r3, #217	; 0xd9
	st = entropy->ac_stats[tbl] +
 800a156:	4413      	add	r3, r2
 800a158:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (arith_decode(cinfo, st)) {
 800a15a:	e01a      	b.n	800a192 <decode_mcu_AC_first+0x172>
	  if ((m <<= 1) == 0x8000) {
 800a15c:	6a3b      	ldr	r3, [r7, #32]
 800a15e:	005b      	lsls	r3, r3, #1
 800a160:	623b      	str	r3, [r7, #32]
 800a162:	6a3b      	ldr	r3, [r7, #32]
 800a164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a168:	d110      	bne.n	800a18c <decode_mcu_AC_first+0x16c>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	2275      	movs	r2, #117	; 0x75
 800a170:	615a      	str	r2, [r3, #20]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	f04f 31ff 	mov.w	r1, #4294967295
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 800a180:	69fb      	ldr	r3, [r7, #28]
 800a182:	f04f 32ff 	mov.w	r2, #4294967295
 800a186:	611a      	str	r2, [r3, #16]
	    return TRUE;
 800a188:	2301      	movs	r3, #1
 800a18a:	e045      	b.n	800a218 <decode_mcu_AC_first+0x1f8>
	  }
	  st += 1;
 800a18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18e:	3301      	adds	r3, #1
 800a190:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (arith_decode(cinfo, st)) {
 800a192:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f7ff fd03 	bl	8009ba0 <arith_decode>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d1dd      	bne.n	800a15c <decode_mcu_AC_first+0x13c>
	}
      }
    }
    v = m;
 800a1a0:	6a3b      	ldr	r3, [r7, #32]
 800a1a2:	627b      	str	r3, [r7, #36]	; 0x24
    /* Figure F.24: Decoding the magnitude bit pattern of v */
    st += 14;
 800a1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a6:	330e      	adds	r3, #14
 800a1a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (m >>= 1)
 800a1aa:	e00a      	b.n	800a1c2 <decode_mcu_AC_first+0x1a2>
      if (arith_decode(cinfo, st)) v |= m;
 800a1ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f7ff fcf6 	bl	8009ba0 <arith_decode>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d003      	beq.n	800a1c2 <decode_mcu_AC_first+0x1a2>
 800a1ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1bc:	6a3b      	ldr	r3, [r7, #32]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	627b      	str	r3, [r7, #36]	; 0x24
    while (m >>= 1)
 800a1c2:	6a3b      	ldr	r3, [r7, #32]
 800a1c4:	105b      	asrs	r3, r3, #1
 800a1c6:	623b      	str	r3, [r7, #32]
 800a1c8:	6a3b      	ldr	r3, [r7, #32]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1ee      	bne.n	800a1ac <decode_mcu_AC_first+0x18c>
    v += 1; if (sign) v = -v;
 800a1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	627b      	str	r3, [r7, #36]	; 0x24
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d002      	beq.n	800a1e0 <decode_mcu_AC_first+0x1c0>
 800a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1dc:	425b      	negs	r3, r3
 800a1de:	627b      	str	r3, [r7, #36]	; 0x24
    /* Scale and output coefficient in natural (dezigzagged) order */
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800a1e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1e8:	fa02 f103 	lsl.w	r1, r2, r3
 800a1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	69ba      	ldr	r2, [r7, #24]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	b209      	sxth	r1, r1
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a200:	3301      	adds	r3, #1
 800a202:	62bb      	str	r3, [r7, #40]	; 0x28
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800a20a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a20c:	429a      	cmp	r2, r3
 800a20e:	f77f af39 	ble.w	800a084 <decode_mcu_AC_first+0x64>
 800a212:	e000      	b.n	800a216 <decode_mcu_AC_first+0x1f6>
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 800a214:	bf00      	nop
  }

  return TRUE;
 800a216:	2301      	movs	r3, #1
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3730      	adds	r7, #48	; 0x30
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <decode_mcu_DC_refine>:
 * MCU decoding for DC successive approximation refinement scan.
 */

METHODDEF(boolean)
decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b086      	sub	sp, #24
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800a230:	613b      	str	r3, [r7, #16]
  unsigned char *st;
  int p1, blkn;

  /* Process restart marker if needed */
  if (cinfo->restart_interval) {
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d00b      	beq.n	800a254 <decode_mcu_DC_refine+0x34>
    if (entropy->restarts_to_go == 0)
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a240:	2b00      	cmp	r3, #0
 800a242:	d102      	bne.n	800a24a <decode_mcu_DC_refine+0x2a>
      process_restart(cinfo);
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f7ff fd51 	bl	8009cec <process_restart>
    entropy->restarts_to_go--;
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a24e:	1e5a      	subs	r2, r3, #1
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	635a      	str	r2, [r3, #52]	; 0x34
  }

  st = entropy->fixed_bin;	/* use fixed probability estimation */
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	33b8      	adds	r3, #184	; 0xb8
 800a258:	60fb      	str	r3, [r7, #12]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800a260:	2201      	movs	r2, #1
 800a262:	fa02 f303 	lsl.w	r3, r2, r3
 800a266:	60bb      	str	r3, [r7, #8]

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a268:	2300      	movs	r3, #0
 800a26a:	617b      	str	r3, [r7, #20]
 800a26c:	e01a      	b.n	800a2a4 <decode_mcu_DC_refine+0x84>
    /* Encoded data is simply the next bit of the two's-complement DC value */
    if (arith_decode(cinfo, st))
 800a26e:	68f9      	ldr	r1, [r7, #12]
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f7ff fc95 	bl	8009ba0 <arith_decode>
 800a276:	4603      	mov	r3, r0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d010      	beq.n	800a29e <decode_mcu_DC_refine+0x7e>
      MCU_data[blkn][0][0] |= p1;
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	683a      	ldr	r2, [r7, #0]
 800a282:	4413      	add	r3, r2
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f9b3 1000 	ldrsh.w	r1, [r3]
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	b21a      	sxth	r2, r3
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	6838      	ldr	r0, [r7, #0]
 800a294:	4403      	add	r3, r0
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	430a      	orrs	r2, r1
 800a29a:	b212      	sxth	r2, r2
 800a29c:	801a      	strh	r2, [r3, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	617b      	str	r3, [r7, #20]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800a2aa:	697a      	ldr	r2, [r7, #20]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	dbde      	blt.n	800a26e <decode_mcu_DC_refine+0x4e>
  }

  return TRUE;
 800a2b0:	2301      	movs	r3, #1
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3718      	adds	r7, #24
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <decode_mcu_AC_refine>:
 * MCU decoding for AC successive approximation refinement scan.
 */

METHODDEF(boolean)
decode_mcu_AC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b08c      	sub	sp, #48	; 0x30
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	6039      	str	r1, [r7, #0]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800a2ca:	623b      	str	r3, [r7, #32]
  int tbl, k, kex;
  int p1, m1;
  const int * natural_order;

  /* Process restart marker if needed */
  if (cinfo->restart_interval) {
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00b      	beq.n	800a2ee <decode_mcu_AC_refine+0x34>
    if (entropy->restarts_to_go == 0)
 800a2d6:	6a3b      	ldr	r3, [r7, #32]
 800a2d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d102      	bne.n	800a2e4 <decode_mcu_AC_refine+0x2a>
      process_restart(cinfo);
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f7ff fd04 	bl	8009cec <process_restart>
    entropy->restarts_to_go--;
 800a2e4:	6a3b      	ldr	r3, [r7, #32]
 800a2e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e8:	1e5a      	subs	r2, r3, #1
 800a2ea:	6a3b      	ldr	r3, [r7, #32]
 800a2ec:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800a2ee:	6a3b      	ldr	r3, [r7, #32]
 800a2f0:	691b      	ldr	r3, [r3, #16]
 800a2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2f6:	d101      	bne.n	800a2fc <decode_mcu_AC_refine+0x42>
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e0c8      	b.n	800a48e <decode_mcu_AC_refine+0x1d4>

  natural_order = cinfo->natural_order;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800a302:	61fb      	str	r3, [r7, #28]

  /* There is always only one block per MCU */
  block = MCU_data[0];
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	61bb      	str	r3, [r7, #24]
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800a310:	699b      	ldr	r3, [r3, #24]
 800a312:	617b      	str	r3, [r7, #20]

  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800a31a:	2201      	movs	r2, #1
 800a31c:	fa02 f303 	lsl.w	r3, r2, r3
 800a320:	613b      	str	r3, [r7, #16]
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800a328:	f04f 32ff 	mov.w	r2, #4294967295
 800a32c:	fa02 f303 	lsl.w	r3, r2, r3
 800a330:	60fb      	str	r3, [r7, #12]

  /* Establish EOBx (previous stage end-of-block) index */
  for (kex = cinfo->Se; kex > 0; kex--)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800a338:	627b      	str	r3, [r7, #36]	; 0x24
 800a33a:	e00c      	b.n	800a356 <decode_mcu_AC_refine+0x9c>
    if ((*block)[natural_order[kex]]) break;
 800a33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	69fa      	ldr	r2, [r7, #28]
 800a342:	4413      	add	r3, r2
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d106      	bne.n	800a35e <decode_mcu_AC_refine+0xa4>
  for (kex = cinfo->Se; kex > 0; kex--)
 800a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a352:	3b01      	subs	r3, #1
 800a354:	627b      	str	r3, [r7, #36]	; 0x24
 800a356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a358:	2b00      	cmp	r3, #0
 800a35a:	dcef      	bgt.n	800a33c <decode_mcu_AC_refine+0x82>
 800a35c:	e000      	b.n	800a360 <decode_mcu_AC_refine+0xa6>
    if ((*block)[natural_order[kex]]) break;
 800a35e:	bf00      	nop

  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800a366:	62bb      	str	r3, [r7, #40]	; 0x28
 800a368:	e087      	b.n	800a47a <decode_mcu_AC_refine+0x1c0>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a36a:	6a3b      	ldr	r3, [r7, #32]
 800a36c:	697a      	ldr	r2, [r7, #20]
 800a36e:	321e      	adds	r2, #30
 800a370:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a376:	1e5a      	subs	r2, r3, #1
 800a378:	4613      	mov	r3, r2
 800a37a:	005b      	lsls	r3, r3, #1
 800a37c:	4413      	add	r3, r2
 800a37e:	440b      	add	r3, r1
 800a380:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (k > kex)
 800a382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a386:	429a      	cmp	r2, r3
 800a388:	dd06      	ble.n	800a398 <decode_mcu_AC_refine+0xde>
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800a38a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f7ff fc07 	bl	8009ba0 <arith_decode>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d178      	bne.n	800a48a <decode_mcu_AC_refine+0x1d0>
    for (;;) {
      thiscoef = *block + natural_order[k];
 800a398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	69fa      	ldr	r2, [r7, #28]
 800a39e:	4413      	add	r3, r2
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	005b      	lsls	r3, r3, #1
 800a3a4:	69ba      	ldr	r2, [r7, #24]
 800a3a6:	4413      	add	r3, r2
 800a3a8:	60bb      	str	r3, [r7, #8]
      if (*thiscoef) {				/* previously nonzero coef */
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d025      	beq.n	800a400 <decode_mcu_AC_refine+0x146>
	if (arith_decode(cinfo, st + 2)) {
 800a3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b6:	3302      	adds	r3, #2
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f7ff fbf0 	bl	8009ba0 <arith_decode>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d055      	beq.n	800a472 <decode_mcu_AC_refine+0x1b8>
	  if (*thiscoef < 0)
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	da0b      	bge.n	800a3e8 <decode_mcu_AC_refine+0x12e>
	    *thiscoef += m1;
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a3d6:	b29a      	uxth	r2, r3
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	4413      	add	r3, r2
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	b21a      	sxth	r2, r3
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	801a      	strh	r2, [r3, #0]
	  else
	    *thiscoef += p1;
	}
	break;
 800a3e6:	e044      	b.n	800a472 <decode_mcu_AC_refine+0x1b8>
	    *thiscoef += p1;
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a3ee:	b29a      	uxth	r2, r3
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	4413      	add	r3, r2
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	b21a      	sxth	r2, r3
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	801a      	strh	r2, [r3, #0]
	break;
 800a3fe:	e038      	b.n	800a472 <decode_mcu_AC_refine+0x1b8>
      }
      if (arith_decode(cinfo, st + 1)) {	/* newly nonzero coef */
 800a400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a402:	3301      	adds	r3, #1
 800a404:	4619      	mov	r1, r3
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f7ff fbca 	bl	8009ba0 <arith_decode>
 800a40c:	4603      	mov	r3, r0
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d012      	beq.n	800a438 <decode_mcu_AC_refine+0x17e>
	if (arith_decode(cinfo, entropy->fixed_bin))
 800a412:	6a3b      	ldr	r3, [r7, #32]
 800a414:	33b8      	adds	r3, #184	; 0xb8
 800a416:	4619      	mov	r1, r3
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f7ff fbc1 	bl	8009ba0 <arith_decode>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d004      	beq.n	800a42e <decode_mcu_AC_refine+0x174>
	  *thiscoef = m1;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	b21a      	sxth	r2, r3
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	801a      	strh	r2, [r3, #0]
	else
	  *thiscoef = p1;
	break;
 800a42c:	e022      	b.n	800a474 <decode_mcu_AC_refine+0x1ba>
	  *thiscoef = p1;
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	b21a      	sxth	r2, r3
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	801a      	strh	r2, [r3, #0]
	break;
 800a436:	e01d      	b.n	800a474 <decode_mcu_AC_refine+0x1ba>
      }
      st += 3; k++;
 800a438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43a:	3303      	adds	r3, #3
 800a43c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a440:	3301      	adds	r3, #1
 800a442:	62bb      	str	r3, [r7, #40]	; 0x28
      if (k > cinfo->Se) {
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800a44a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a44c:	429a      	cmp	r2, r3
 800a44e:	dda3      	ble.n	800a398 <decode_mcu_AC_refine+0xde>
	WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2275      	movs	r2, #117	; 0x75
 800a456:	615a      	str	r2, [r3, #20]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	f04f 31ff 	mov.w	r1, #4294967295
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	4798      	blx	r3
	entropy->ct = -1;			/* spectral overflow */
 800a466:	6a3b      	ldr	r3, [r7, #32]
 800a468:	f04f 32ff 	mov.w	r2, #4294967295
 800a46c:	611a      	str	r2, [r3, #16]
	return TRUE;
 800a46e:	2301      	movs	r3, #1
 800a470:	e00d      	b.n	800a48e <decode_mcu_AC_refine+0x1d4>
	break;
 800a472:	bf00      	nop
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a476:	3301      	adds	r3, #1
 800a478:	62bb      	str	r3, [r7, #40]	; 0x28
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800a480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a482:	429a      	cmp	r2, r3
 800a484:	f77f af71 	ble.w	800a36a <decode_mcu_AC_refine+0xb0>
 800a488:	e000      	b.n	800a48c <decode_mcu_AC_refine+0x1d2>
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800a48a:	bf00      	nop
      }
    }
  }

  return TRUE;
 800a48c:	2301      	movs	r3, #1
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3730      	adds	r7, #48	; 0x30
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <decode_mcu>:
 * Decode one MCU's worth of arithmetic-compressed coefficients.
 */

METHODDEF(boolean)
decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800a496:	b580      	push	{r7, lr}
 800a498:	b08e      	sub	sp, #56	; 0x38
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
 800a49e:	6039      	str	r1, [r7, #0]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800a4a6:	623b      	str	r3, [r7, #32]
  int blkn, ci, tbl, sign, k;
  int v, m;
  const int * natural_order;

  /* Process restart marker if needed */
  if (cinfo->restart_interval) {
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00b      	beq.n	800a4ca <decode_mcu+0x34>
    if (entropy->restarts_to_go == 0)
 800a4b2:	6a3b      	ldr	r3, [r7, #32]
 800a4b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d102      	bne.n	800a4c0 <decode_mcu+0x2a>
      process_restart(cinfo);
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f7ff fc16 	bl	8009cec <process_restart>
    entropy->restarts_to_go--;
 800a4c0:	6a3b      	ldr	r3, [r7, #32]
 800a4c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4c4:	1e5a      	subs	r2, r3, #1
 800a4c6:	6a3b      	ldr	r3, [r7, #32]
 800a4c8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800a4ca:	6a3b      	ldr	r3, [r7, #32]
 800a4cc:	691b      	ldr	r3, [r3, #16]
 800a4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d2:	d101      	bne.n	800a4d8 <decode_mcu+0x42>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e1ba      	b.n	800a84e <decode_mcu+0x3b8>

  natural_order = cinfo->natural_order;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800a4de:	61fb      	str	r3, [r7, #28]

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	633b      	str	r3, [r7, #48]	; 0x30
 800a4e4:	e1ab      	b.n	800a83e <decode_mcu+0x3a8>
    block = MCU_data[blkn];
 800a4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	683a      	ldr	r2, [r7, #0]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	61bb      	str	r3, [r7, #24]
    ci = cinfo->MCU_membership[blkn];
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4f6:	325c      	adds	r2, #92	; 0x5c
 800a4f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4fc:	617b      	str	r3, [r7, #20]
    compptr = cinfo->cur_comp_info[ci];
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	3354      	adds	r3, #84	; 0x54
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	4413      	add	r3, r2
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	613b      	str	r3, [r7, #16]

    /* Sections F.2.4.1 & F.1.4.4.1: Decoding of DC coefficients */

    tbl = compptr->dc_tbl_no;
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	695b      	ldr	r3, [r3, #20]
 800a510:	60fb      	str	r3, [r7, #12]

    /* Table F.4: Point to statistics bin S0 for DC coefficient coding */
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800a512:	6a3b      	ldr	r3, [r7, #32]
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	320e      	adds	r2, #14
 800a518:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a51c:	6a39      	ldr	r1, [r7, #32]
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	3308      	adds	r3, #8
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	440b      	add	r3, r1
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	4413      	add	r3, r2
 800a52a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Figure F.19: Decode_DC_DIFF */
    if (arith_decode(cinfo, st) == 0)
 800a52c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f7ff fb36 	bl	8009ba0 <arith_decode>
 800a534:	4603      	mov	r3, r0
 800a536:	2b00      	cmp	r3, #0
 800a538:	d107      	bne.n	800a54a <decode_mcu+0xb4>
      entropy->dc_context[ci] = 0;
 800a53a:	6a3a      	ldr	r2, [r7, #32]
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	3308      	adds	r3, #8
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	4413      	add	r3, r2
 800a544:	2200      	movs	r2, #0
 800a546:	605a      	str	r2, [r3, #4]
 800a548:	e0a0      	b.n	800a68c <decode_mcu+0x1f6>
    else {
      /* Figure F.21: Decoding nonzero value v */
      /* Figure F.22: Decoding the sign of v */
      sign = arith_decode(cinfo, st + 1);
 800a54a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a54c:	3301      	adds	r3, #1
 800a54e:	4619      	mov	r1, r3
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f7ff fb25 	bl	8009ba0 <arith_decode>
 800a556:	60b8      	str	r0, [r7, #8]
      st += 2; st += sign;
 800a558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a55a:	3302      	adds	r3, #2
 800a55c:	637b      	str	r3, [r7, #52]	; 0x34
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a562:	4413      	add	r3, r2
 800a564:	637b      	str	r3, [r7, #52]	; 0x34
      /* Figure F.23: Decoding the magnitude category of v */
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a566:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f7ff fb19 	bl	8009ba0 <arith_decode>
 800a56e:	6278      	str	r0, [r7, #36]	; 0x24
 800a570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a572:	2b00      	cmp	r3, #0
 800a574:	d029      	beq.n	800a5ca <decode_mcu+0x134>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 800a576:	6a3b      	ldr	r3, [r7, #32]
 800a578:	68fa      	ldr	r2, [r7, #12]
 800a57a:	320e      	adds	r2, #14
 800a57c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a580:	3314      	adds	r3, #20
 800a582:	637b      	str	r3, [r7, #52]	; 0x34
	while (arith_decode(cinfo, st)) {
 800a584:	e01a      	b.n	800a5bc <decode_mcu+0x126>
	  if ((m <<= 1) == 0x8000) {
 800a586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a588:	005b      	lsls	r3, r3, #1
 800a58a:	627b      	str	r3, [r7, #36]	; 0x24
 800a58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a592:	d110      	bne.n	800a5b6 <decode_mcu+0x120>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2275      	movs	r2, #117	; 0x75
 800a59a:	615a      	str	r2, [r3, #20]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	f04f 31ff 	mov.w	r1, #4294967295
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 800a5aa:	6a3b      	ldr	r3, [r7, #32]
 800a5ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a5b0:	611a      	str	r2, [r3, #16]
	    return TRUE;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	e14b      	b.n	800a84e <decode_mcu+0x3b8>
	  }
	  st += 1;
 800a5b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	637b      	str	r3, [r7, #52]	; 0x34
	while (arith_decode(cinfo, st)) {
 800a5bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f7ff faee 	bl	8009ba0 <arith_decode>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d1dd      	bne.n	800a586 <decode_mcu+0xf0>
	}
      }
      /* Section F.1.4.4.1.2: Establish dc_context conditioning category */
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	33e8      	adds	r3, #232	; 0xe8
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	4093      	lsls	r3, r2
 800a5da:	105b      	asrs	r3, r3, #1
 800a5dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	da07      	bge.n	800a5f2 <decode_mcu+0x15c>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 800a5e2:	6a3a      	ldr	r2, [r7, #32]
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	3308      	adds	r3, #8
 800a5e8:	009b      	lsls	r3, r3, #2
 800a5ea:	4413      	add	r3, r2
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	605a      	str	r2, [r3, #4]
 800a5f0:	e01e      	b.n	800a630 <decode_mcu+0x19a>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	4413      	add	r3, r2
 800a5f8:	33f8      	adds	r3, #248	; 0xf8
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	2301      	movs	r3, #1
 800a600:	4093      	lsls	r3, r2
 800a602:	105b      	asrs	r3, r3, #1
 800a604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a606:	429a      	cmp	r2, r3
 800a608:	dd09      	ble.n	800a61e <decode_mcu+0x188>
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	3303      	adds	r3, #3
 800a60e:	009a      	lsls	r2, r3, #2
 800a610:	6a39      	ldr	r1, [r7, #32]
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	3308      	adds	r3, #8
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	440b      	add	r3, r1
 800a61a:	605a      	str	r2, [r3, #4]
 800a61c:	e008      	b.n	800a630 <decode_mcu+0x19a>
      else
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	3301      	adds	r3, #1
 800a622:	009a      	lsls	r2, r3, #2
 800a624:	6a39      	ldr	r1, [r7, #32]
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	3308      	adds	r3, #8
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	440b      	add	r3, r1
 800a62e:	605a      	str	r2, [r3, #4]
      v = m;
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Figure F.24: Decoding the magnitude bit pattern of v */
      st += 14;
 800a634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a636:	330e      	adds	r3, #14
 800a638:	637b      	str	r3, [r7, #52]	; 0x34
      while (m >>= 1)
 800a63a:	e00a      	b.n	800a652 <decode_mcu+0x1bc>
	if (arith_decode(cinfo, st)) v |= m;
 800a63c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f7ff faae 	bl	8009ba0 <arith_decode>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d003      	beq.n	800a652 <decode_mcu+0x1bc>
 800a64a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64e:	4313      	orrs	r3, r2
 800a650:	62bb      	str	r3, [r7, #40]	; 0x28
      while (m >>= 1)
 800a652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a654:	105b      	asrs	r3, r3, #1
 800a656:	627b      	str	r3, [r7, #36]	; 0x24
 800a658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d1ee      	bne.n	800a63c <decode_mcu+0x1a6>
      v += 1; if (sign) v = -v;
 800a65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a660:	3301      	adds	r3, #1
 800a662:	62bb      	str	r3, [r7, #40]	; 0x28
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d002      	beq.n	800a670 <decode_mcu+0x1da>
 800a66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66c:	425b      	negs	r3, r3
 800a66e:	62bb      	str	r3, [r7, #40]	; 0x28
      entropy->last_dc_val[ci] += v;
 800a670:	6a3a      	ldr	r2, [r7, #32]
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	3304      	adds	r3, #4
 800a676:	009b      	lsls	r3, r3, #2
 800a678:	4413      	add	r3, r2
 800a67a:	685a      	ldr	r2, [r3, #4]
 800a67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67e:	441a      	add	r2, r3
 800a680:	6a39      	ldr	r1, [r7, #32]
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	3304      	adds	r3, #4
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	440b      	add	r3, r1
 800a68a:	605a      	str	r2, [r3, #4]
    }

    (*block)[0] = (JCOEF) entropy->last_dc_val[ci];
 800a68c:	6a3a      	ldr	r2, [r7, #32]
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	3304      	adds	r3, #4
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	4413      	add	r3, r2
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	b21a      	sxth	r2, r3
 800a69a:	69bb      	ldr	r3, [r7, #24]
 800a69c:	801a      	strh	r2, [r3, #0]

    /* Sections F.2.4.2 & F.1.4.4.2: Decoding of AC coefficients */

    if (cinfo->lim_Se == 0) continue;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f000 80c4 	beq.w	800a832 <decode_mcu+0x39c>
    tbl = compptr->ac_tbl_no;
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	699b      	ldr	r3, [r3, #24]
 800a6ae:	60fb      	str	r3, [r7, #12]
    k = 0;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Figure F.20: Decode_AC_coefficients */
    do {
      st = entropy->ac_stats[tbl] + 3 * k;
 800a6b4:	6a3b      	ldr	r3, [r7, #32]
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	321e      	adds	r2, #30
 800a6ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6c0:	4613      	mov	r3, r2
 800a6c2:	005b      	lsls	r3, r3, #1
 800a6c4:	4413      	add	r3, r2
 800a6c6:	440b      	add	r3, r1
 800a6c8:	637b      	str	r3, [r7, #52]	; 0x34
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800a6ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f7ff fa67 	bl	8009ba0 <arith_decode>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	f040 80ae 	bne.w	800a836 <decode_mcu+0x3a0>
      for (;;) {
	k++;
 800a6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6dc:	3301      	adds	r3, #1
 800a6de:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (arith_decode(cinfo, st + 1)) break;
 800a6e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f7ff fa5a 	bl	8009ba0 <arith_decode>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d119      	bne.n	800a726 <decode_mcu+0x290>
	st += 3;
 800a6f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f4:	3303      	adds	r3, #3
 800a6f6:	637b      	str	r3, [r7, #52]	; 0x34
	if (k >= cinfo->lim_Se) {
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800a6fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a700:	429a      	cmp	r2, r3
 800a702:	dbea      	blt.n	800a6da <decode_mcu+0x244>
	  WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2275      	movs	r2, #117	; 0x75
 800a70a:	615a      	str	r2, [r3, #20]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	f04f 31ff 	mov.w	r1, #4294967295
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	4798      	blx	r3
	  entropy->ct = -1;			/* spectral overflow */
 800a71a:	6a3b      	ldr	r3, [r7, #32]
 800a71c:	f04f 32ff 	mov.w	r2, #4294967295
 800a720:	611a      	str	r2, [r3, #16]
	  return TRUE;
 800a722:	2301      	movs	r3, #1
 800a724:	e093      	b.n	800a84e <decode_mcu+0x3b8>
	if (arith_decode(cinfo, st + 1)) break;
 800a726:	bf00      	nop
	}
      }
      /* Figure F.21: Decoding nonzero value v */
      /* Figure F.22: Decoding the sign of v */
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800a728:	6a3b      	ldr	r3, [r7, #32]
 800a72a:	33b8      	adds	r3, #184	; 0xb8
 800a72c:	4619      	mov	r1, r3
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f7ff fa36 	bl	8009ba0 <arith_decode>
 800a734:	60b8      	str	r0, [r7, #8]
      st += 2;
 800a736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a738:	3302      	adds	r3, #2
 800a73a:	637b      	str	r3, [r7, #52]	; 0x34
      /* Figure F.23: Decoding the magnitude category of v */
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a73c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f7ff fa2e 	bl	8009ba0 <arith_decode>
 800a744:	6278      	str	r0, [r7, #36]	; 0x24
 800a746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d040      	beq.n	800a7ce <decode_mcu+0x338>
	if (arith_decode(cinfo, st)) {
 800a74c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f7ff fa26 	bl	8009ba0 <arith_decode>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d039      	beq.n	800a7ce <decode_mcu+0x338>
	  m <<= 1;
 800a75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75c:	005b      	lsls	r3, r3, #1
 800a75e:	627b      	str	r3, [r7, #36]	; 0x24
	  st = entropy->ac_stats[tbl] +
 800a760:	6a3b      	ldr	r3, [r7, #32]
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	321e      	adds	r2, #30
 800a766:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a76a:	6879      	ldr	r1, [r7, #4]
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	440b      	add	r3, r1
 800a770:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	4619      	mov	r1, r3
 800a778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77a:	428b      	cmp	r3, r1
 800a77c:	dc01      	bgt.n	800a782 <decode_mcu+0x2ec>
 800a77e:	23bd      	movs	r3, #189	; 0xbd
 800a780:	e000      	b.n	800a784 <decode_mcu+0x2ee>
 800a782:	23d9      	movs	r3, #217	; 0xd9
	  st = entropy->ac_stats[tbl] +
 800a784:	4413      	add	r3, r2
 800a786:	637b      	str	r3, [r7, #52]	; 0x34
	  while (arith_decode(cinfo, st)) {
 800a788:	e01a      	b.n	800a7c0 <decode_mcu+0x32a>
	    if ((m <<= 1) == 0x8000) {
 800a78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78c:	005b      	lsls	r3, r3, #1
 800a78e:	627b      	str	r3, [r7, #36]	; 0x24
 800a790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a796:	d110      	bne.n	800a7ba <decode_mcu+0x324>
	      WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	2275      	movs	r2, #117	; 0x75
 800a79e:	615a      	str	r2, [r3, #20]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	f04f 31ff 	mov.w	r1, #4294967295
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	4798      	blx	r3
	      entropy->ct = -1;			/* magnitude overflow */
 800a7ae:	6a3b      	ldr	r3, [r7, #32]
 800a7b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a7b4:	611a      	str	r2, [r3, #16]
	      return TRUE;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e049      	b.n	800a84e <decode_mcu+0x3b8>
	    }
	    st += 1;
 800a7ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7bc:	3301      	adds	r3, #1
 800a7be:	637b      	str	r3, [r7, #52]	; 0x34
	  while (arith_decode(cinfo, st)) {
 800a7c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f7ff f9ec 	bl	8009ba0 <arith_decode>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d1dd      	bne.n	800a78a <decode_mcu+0x2f4>
	  }
	}
      }
      v = m;
 800a7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d0:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Figure F.24: Decoding the magnitude bit pattern of v */
      st += 14;
 800a7d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7d4:	330e      	adds	r3, #14
 800a7d6:	637b      	str	r3, [r7, #52]	; 0x34
      while (m >>= 1)
 800a7d8:	e00a      	b.n	800a7f0 <decode_mcu+0x35a>
	if (arith_decode(cinfo, st)) v |= m;
 800a7da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f7ff f9df 	bl	8009ba0 <arith_decode>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d003      	beq.n	800a7f0 <decode_mcu+0x35a>
 800a7e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (m >>= 1)
 800a7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f2:	105b      	asrs	r3, r3, #1
 800a7f4:	627b      	str	r3, [r7, #36]	; 0x24
 800a7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d1ee      	bne.n	800a7da <decode_mcu+0x344>
      v += 1; if (sign) v = -v;
 800a7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fe:	3301      	adds	r3, #1
 800a800:	62bb      	str	r3, [r7, #40]	; 0x28
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d002      	beq.n	800a80e <decode_mcu+0x378>
 800a808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80a:	425b      	negs	r3, r3
 800a80c:	62bb      	str	r3, [r7, #40]	; 0x28
      (*block)[natural_order[k]] = (JCOEF) v;
 800a80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	69fa      	ldr	r2, [r7, #28]
 800a814:	4413      	add	r3, r2
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81a:	b219      	sxth	r1, r3
 800a81c:	69bb      	ldr	r3, [r7, #24]
 800a81e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    } while (k < cinfo->lim_Se);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800a828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a82a:	429a      	cmp	r2, r3
 800a82c:	f6ff af42 	blt.w	800a6b4 <decode_mcu+0x21e>
 800a830:	e002      	b.n	800a838 <decode_mcu+0x3a2>
    if (cinfo->lim_Se == 0) continue;
 800a832:	bf00      	nop
 800a834:	e000      	b.n	800a838 <decode_mcu+0x3a2>
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800a836:	bf00      	nop
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83a:	3301      	adds	r3, #1
 800a83c:	633b      	str	r3, [r7, #48]	; 0x30
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800a844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a846:	429a      	cmp	r2, r3
 800a848:	f6ff ae4d 	blt.w	800a4e6 <decode_mcu+0x50>
  }

  return TRUE;
 800a84c:	2301      	movs	r3, #1
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3738      	adds	r7, #56	; 0x38
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
	...

0800a858 <start_pass>:
 * Initialize for an arithmetic-compressed scan.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b08a      	sub	sp, #40	; 0x28
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800a866:	61fb      	str	r3, [r7, #28]
  int ci, tbl;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	f000 80e7 	beq.w	800aa42 <start_pass+0x1ea>
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d105      	bne.n	800a88a <start_pass+0x32>
      if (cinfo->Se != 0)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800a884:	2b00      	cmp	r3, #0
 800a886:	d015      	beq.n	800a8b4 <start_pass+0x5c>
	goto bad;
 800a888:	e02d      	b.n	800a8e6 <start_pass+0x8e>
    } else {
      /* need not check Ss/Se < 0 since they came from unsigned bytes */
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800a896:	429a      	cmp	r2, r3
 800a898:	db20      	blt.n	800a8dc <start_pass+0x84>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	dc18      	bgt.n	800a8dc <start_pass+0x84>
	goto bad;
      /* AC scans may have only one component */
      if (cinfo->comps_in_scan != 1)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d115      	bne.n	800a8e0 <start_pass+0x88>
	goto bad;
    }
    if (cinfo->Ah != 0) {
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d008      	beq.n	800a8d0 <start_pass+0x78>
      /* Successive approximation refinement scan: must have Al = Ah-1. */
      if (cinfo->Ah-1 != cinfo->Al)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800a8c4:	1e5a      	subs	r2, r3, #1
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d109      	bne.n	800a8e4 <start_pass+0x8c>
	goto bad;
    }
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800a8d6:	2b0d      	cmp	r3, #13
 800a8d8:	dd26      	ble.n	800a928 <start_pass+0xd0>
      bad:
 800a8da:	e004      	b.n	800a8e6 <start_pass+0x8e>
	goto bad;
 800a8dc:	bf00      	nop
 800a8de:	e002      	b.n	800a8e6 <start_pass+0x8e>
	goto bad;
 800a8e0:	bf00      	nop
 800a8e2:	e000      	b.n	800a8e6 <start_pass+0x8e>
	goto bad;
 800a8e4:	bf00      	nop
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2211      	movs	r2, #17
 800a8ec:	615a      	str	r2, [r3, #20]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	f8d2 2198 	ldr.w	r2, [r2, #408]	; 0x198
 800a8f8:	619a      	str	r2, [r3, #24]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	f8d2 219c 	ldr.w	r2, [r2, #412]	; 0x19c
 800a904:	61da      	str	r2, [r3, #28]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
 800a910:	621a      	str	r2, [r3, #32]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 800a91c:	625a      	str	r2, [r3, #36]	; 0x24
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	4798      	blx	r3
    }
    /* Update progression status, and verify that scan order is legal.
     * Note that inter-scan inconsistencies are treated as warnings
     * not fatal errors ... not clear if this is right way to behave.
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a928:	2300      	movs	r3, #0
 800a92a:	627b      	str	r3, [r7, #36]	; 0x24
 800a92c:	e064      	b.n	800a9f8 <start_pass+0x1a0>
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a932:	3354      	adds	r3, #84	; 0x54
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	4413      	add	r3, r2
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	61bb      	str	r3, [r7, #24]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800a944:	69bb      	ldr	r3, [r7, #24]
 800a946:	021b      	lsls	r3, r3, #8
 800a948:	4413      	add	r3, r2
 800a94a:	617b      	str	r3, [r7, #20]
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800a952:	2b00      	cmp	r3, #0
 800a954:	d016      	beq.n	800a984 <start_pass+0x12c>
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	da12      	bge.n	800a984 <start_pass+0x12c>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	2276      	movs	r2, #118	; 0x76
 800a964:	615a      	str	r2, [r3, #20]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	69ba      	ldr	r2, [r7, #24]
 800a96c:	619a      	str	r2, [r3, #24]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2200      	movs	r2, #0
 800a974:	61da      	str	r2, [r3, #28]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	f04f 31ff 	mov.w	r1, #4294967295
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	4798      	blx	r3
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800a98a:	623b      	str	r3, [r7, #32]
 800a98c:	e02b      	b.n	800a9e6 <start_pass+0x18e>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800a98e:	6a3b      	ldr	r3, [r7, #32]
 800a990:	009b      	lsls	r3, r3, #2
 800a992:	697a      	ldr	r2, [r7, #20]
 800a994:	4413      	add	r3, r2
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a99c:	613b      	str	r3, [r7, #16]
	if (cinfo->Ah != expected)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800a9a4:	693a      	ldr	r2, [r7, #16]
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d012      	beq.n	800a9d0 <start_pass+0x178>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2276      	movs	r2, #118	; 0x76
 800a9b0:	615a      	str	r2, [r3, #20]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	69ba      	ldr	r2, [r7, #24]
 800a9b8:	619a      	str	r2, [r3, #24]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	6a3a      	ldr	r2, [r7, #32]
 800a9c0:	61da      	str	r2, [r3, #28]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	f04f 31ff 	mov.w	r1, #4294967295
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	4798      	blx	r3
	coef_bit_ptr[coefi] = cinfo->Al;
 800a9d0:	6a3b      	ldr	r3, [r7, #32]
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	697a      	ldr	r2, [r7, #20]
 800a9d6:	4413      	add	r3, r2
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 800a9de:	601a      	str	r2, [r3, #0]
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800a9e0:	6a3b      	ldr	r3, [r7, #32]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	623b      	str	r3, [r7, #32]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800a9ec:	6a3a      	ldr	r2, [r7, #32]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	ddcd      	ble.n	800a98e <start_pass+0x136>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	627b      	str	r3, [r7, #36]	; 0x24
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800a9fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa00:	429a      	cmp	r2, r3
 800aa02:	db94      	blt.n	800a92e <start_pass+0xd6>
      }
    }
    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d10c      	bne.n	800aa28 <start_pass+0x1d0>
      if (cinfo->Ss == 0)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d103      	bne.n	800aa20 <start_pass+0x1c8>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 800aa18:	69fb      	ldr	r3, [r7, #28]
 800aa1a:	4a80      	ldr	r2, [pc, #512]	; (800ac1c <start_pass+0x3c4>)
 800aa1c:	605a      	str	r2, [r3, #4]
 800aa1e:	e03a      	b.n	800aa96 <start_pass+0x23e>
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	4a7f      	ldr	r2, [pc, #508]	; (800ac20 <start_pass+0x3c8>)
 800aa24:	605a      	str	r2, [r3, #4]
 800aa26:	e036      	b.n	800aa96 <start_pass+0x23e>
    } else {
      if (cinfo->Ss == 0)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d103      	bne.n	800aa3a <start_pass+0x1e2>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	4a7b      	ldr	r2, [pc, #492]	; (800ac24 <start_pass+0x3cc>)
 800aa36:	605a      	str	r2, [r3, #4]
 800aa38:	e02d      	b.n	800aa96 <start_pass+0x23e>
      else
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	4a7a      	ldr	r2, [pc, #488]	; (800ac28 <start_pass+0x3d0>)
 800aa3e:	605a      	str	r2, [r3, #4]
 800aa40:	e029      	b.n	800aa96 <start_pass+0x23e>
    }
  } else {
    /* Check that the scan parameters Ss, Se, Ah/Al are OK for sequential JPEG.
     * This ought to be an error condition, but we make it a warning.
     */
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d116      	bne.n	800aa7a <start_pass+0x222>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d111      	bne.n	800aa7a <start_pass+0x222>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d10c      	bne.n	800aa7a <start_pass+0x222>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800aa66:	2b3f      	cmp	r3, #63	; 0x3f
 800aa68:	dc12      	bgt.n	800aa90 <start_pass+0x238>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d00a      	beq.n	800aa90 <start_pass+0x238>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	227d      	movs	r2, #125	; 0x7d
 800aa80:	615a      	str	r2, [r3, #20]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	f04f 31ff 	mov.w	r1, #4294967295
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	4798      	blx	r3
    /* Select MCU decoding routine */
    entropy->pub.decode_mcu = decode_mcu;
 800aa90:	69fb      	ldr	r3, [r7, #28]
 800aa92:	4a66      	ldr	r2, [pc, #408]	; (800ac2c <start_pass+0x3d4>)
 800aa94:	605a      	str	r2, [r3, #4]
  }

  /* Allocate & initialize requested statistics areas */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800aa96:	2300      	movs	r3, #0
 800aa98:	627b      	str	r3, [r7, #36]	; 0x24
 800aa9a:	e0a4      	b.n	800abe6 <start_pass+0x38e>
    compptr = cinfo->cur_comp_info[ci];
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa0:	3354      	adds	r3, #84	; 0x54
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	4413      	add	r3, r2
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	60fb      	str	r3, [r7, #12]
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d009      	beq.n	800aac8 <start_pass+0x270>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d146      	bne.n	800ab4c <start_pass+0x2f4>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d141      	bne.n	800ab4c <start_pass+0x2f4>
      tbl = compptr->dc_tbl_no;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	695b      	ldr	r3, [r3, #20]
 800aacc:	60bb      	str	r3, [r7, #8]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	db02      	blt.n	800aada <start_pass+0x282>
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	2b0f      	cmp	r3, #15
 800aad8:	dd0c      	ble.n	800aaf4 <start_pass+0x29c>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	2232      	movs	r2, #50	; 0x32
 800aae0:	615a      	str	r2, [r3, #20]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	68ba      	ldr	r2, [r7, #8]
 800aae8:	619a      	str	r2, [r3, #24]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	4798      	blx	r3
      if (entropy->dc_stats[tbl] == NULL)
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	68ba      	ldr	r2, [r7, #8]
 800aaf8:	320e      	adds	r2, #14
 800aafa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d10c      	bne.n	800ab1c <start_pass+0x2c4>
	entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	2240      	movs	r2, #64	; 0x40
 800ab0a:	2101      	movs	r1, #1
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	4798      	blx	r3
 800ab10:	4601      	mov	r1, r0
 800ab12:	69fb      	ldr	r3, [r7, #28]
 800ab14:	68ba      	ldr	r2, [r7, #8]
 800ab16:	320e      	adds	r2, #14
 800ab18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, DC_STAT_BINS);
      MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	68ba      	ldr	r2, [r7, #8]
 800ab20:	320e      	adds	r2, #14
 800ab22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab26:	2240      	movs	r2, #64	; 0x40
 800ab28:	2100      	movs	r1, #0
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f01a fa1c 	bl	8024f68 <memset>
      /* Initialize DC predictions to 0 */
      entropy->last_dc_val[ci] = 0;
 800ab30:	69fa      	ldr	r2, [r7, #28]
 800ab32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab34:	3304      	adds	r3, #4
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	4413      	add	r3, r2
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	605a      	str	r2, [r3, #4]
      entropy->dc_context[ci] = 0;
 800ab3e:	69fa      	ldr	r2, [r7, #28]
 800ab40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab42:	3308      	adds	r3, #8
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	4413      	add	r3, r2
 800ab48:	2200      	movs	r2, #0
 800ab4a:	605a      	str	r2, [r3, #4]
    }
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d104      	bne.n	800ab60 <start_pass+0x308>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d109      	bne.n	800ab74 <start_pass+0x31c>
	(cinfo->progressive_mode && cinfo->Ss)) {
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d03a      	beq.n	800abe0 <start_pass+0x388>
	(cinfo->progressive_mode && cinfo->Ss)) {
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d035      	beq.n	800abe0 <start_pass+0x388>
      tbl = compptr->ac_tbl_no;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	699b      	ldr	r3, [r3, #24]
 800ab78:	60bb      	str	r3, [r7, #8]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	db02      	blt.n	800ab86 <start_pass+0x32e>
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	2b0f      	cmp	r3, #15
 800ab84:	dd0c      	ble.n	800aba0 <start_pass+0x348>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	2232      	movs	r2, #50	; 0x32
 800ab8c:	615a      	str	r2, [r3, #20]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	68ba      	ldr	r2, [r7, #8]
 800ab94:	619a      	str	r2, [r3, #24]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	4798      	blx	r3
      if (entropy->ac_stats[tbl] == NULL)
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	68ba      	ldr	r2, [r7, #8]
 800aba4:	321e      	adds	r2, #30
 800aba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d10d      	bne.n	800abca <start_pass+0x372>
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800abb8:	2101      	movs	r1, #1
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	4798      	blx	r3
 800abbe:	4601      	mov	r1, r0
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	68ba      	ldr	r2, [r7, #8]
 800abc4:	321e      	adds	r2, #30
 800abc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	68ba      	ldr	r2, [r7, #8]
 800abce:	321e      	adds	r2, #30
 800abd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800abd8:	2100      	movs	r1, #0
 800abda:	4618      	mov	r0, r3
 800abdc:	f01a f9c4 	bl	8024f68 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800abe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe2:	3301      	adds	r3, #1
 800abe4:	627b      	str	r3, [r7, #36]	; 0x24
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800abec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abee:	429a      	cmp	r2, r3
 800abf0:	f6ff af54 	blt.w	800aa9c <start_pass+0x244>
    }
  }

  /* Initialize arithmetic decoding variables */
  entropy->c = 0;
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	2200      	movs	r2, #0
 800abf8:	609a      	str	r2, [r3, #8]
  entropy->a = 0;
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	2200      	movs	r2, #0
 800abfe:	60da      	str	r2, [r3, #12]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	f06f 020f 	mvn.w	r2, #15
 800ac06:	611a      	str	r2, [r3, #16]

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800ac0e:	69fb      	ldr	r3, [r7, #28]
 800ac10:	635a      	str	r2, [r3, #52]	; 0x34
}
 800ac12:	bf00      	nop
 800ac14:	3728      	adds	r7, #40	; 0x28
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	08009dfd 	.word	0x08009dfd
 800ac20:	0800a021 	.word	0x0800a021
 800ac24:	0800a221 	.word	0x0800a221
 800ac28:	0800a2bb 	.word	0x0800a2bb
 800ac2c:	0800a497 	.word	0x0800a497

0800ac30 <jinit_arith_decoder>:
 * Module initialization routine for arithmetic entropy decoding.
 */

GLOBAL(void)
jinit_arith_decoder (j_decompress_ptr cinfo)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b086      	sub	sp, #24
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  arith_entropy_ptr entropy;
  int i;

  entropy = (arith_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	22bc      	movs	r2, #188	; 0xbc
 800ac40:	2101      	movs	r1, #1
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	4798      	blx	r3
 800ac46:	60b8      	str	r0, [r7, #8]
				SIZEOF(arith_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	68ba      	ldr	r2, [r7, #8]
 800ac4c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
  entropy->pub.start_pass = start_pass;
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	4a27      	ldr	r2, [pc, #156]	; (800acf0 <jinit_arith_decoder+0xc0>)
 800ac54:	601a      	str	r2, [r3, #0]

  /* Mark tables unallocated */
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
 800ac56:	2300      	movs	r3, #0
 800ac58:	617b      	str	r3, [r7, #20]
 800ac5a:	e00e      	b.n	800ac7a <jinit_arith_decoder+0x4a>
    entropy->dc_stats[i] = NULL;
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	697a      	ldr	r2, [r7, #20]
 800ac60:	320e      	adds	r2, #14
 800ac62:	2100      	movs	r1, #0
 800ac64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    entropy->ac_stats[i] = NULL;
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	697a      	ldr	r2, [r7, #20]
 800ac6c:	321e      	adds	r2, #30
 800ac6e:	2100      	movs	r1, #0
 800ac70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	3301      	adds	r3, #1
 800ac78:	617b      	str	r3, [r7, #20]
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	2b0f      	cmp	r3, #15
 800ac7e:	dded      	ble.n	800ac5c <jinit_arith_decoder+0x2c>
  }

  /* Initialize index for fixed probability estimation */
  entropy->fixed_bin[0] = 113;
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	2271      	movs	r2, #113	; 0x71
 800ac84:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

  if (cinfo->progressive_mode) {
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d02a      	beq.n	800ace8 <jinit_arith_decoder+0xb8>
    /* Create progression status table */
    int *coef_bit_ptr, ci;
    cinfo->coef_bits = (int (*)[DCTSIZE2])
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ac9c:	0212      	lsls	r2, r2, #8
 800ac9e:	2101      	movs	r1, #1
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	4798      	blx	r3
 800aca4:	4602      	mov	r2, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    coef_bit_ptr = & cinfo->coef_bits[0][0];
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800acb2:	613b      	str	r3, [r7, #16]
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800acb4:	2300      	movs	r3, #0
 800acb6:	60fb      	str	r3, [r7, #12]
 800acb8:	e011      	b.n	800acde <jinit_arith_decoder+0xae>
      for (i = 0; i < DCTSIZE2; i++)
 800acba:	2300      	movs	r3, #0
 800acbc:	617b      	str	r3, [r7, #20]
 800acbe:	e008      	b.n	800acd2 <jinit_arith_decoder+0xa2>
	*coef_bit_ptr++ = -1;
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	1d1a      	adds	r2, r3, #4
 800acc4:	613a      	str	r2, [r7, #16]
 800acc6:	f04f 32ff 	mov.w	r2, #4294967295
 800acca:	601a      	str	r2, [r3, #0]
      for (i = 0; i < DCTSIZE2; i++)
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	3301      	adds	r3, #1
 800acd0:	617b      	str	r3, [r7, #20]
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	2b3f      	cmp	r3, #63	; 0x3f
 800acd6:	ddf3      	ble.n	800acc0 <jinit_arith_decoder+0x90>
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	3301      	adds	r3, #1
 800acdc:	60fb      	str	r3, [r7, #12]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	dbe8      	blt.n	800acba <jinit_arith_decoder+0x8a>
  }
}
 800ace8:	bf00      	nop
 800acea:	3718      	adds	r7, #24
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	0800a859 	.word	0x0800a859

0800acf4 <init_source>:
 * before any data is actually read.
 */
#ifdef JFILE 
METHODDEF(void)
init_source (j_decompress_ptr cinfo)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  my_src_ptr src = (my_src_ptr) cinfo->src;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	699b      	ldr	r3, [r3, #24]
 800ad00:	60fb      	str	r3, [r7, #12]

  /* We reset the empty-input-file flag for each image,
   * but we don't clear the input buffer.
   * This is correct behavior for reading a series of images from one source.
   */
  src->start_of_file = TRUE;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2201      	movs	r2, #1
 800ad06:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ad08:	bf00      	nop
 800ad0a:	3714      	adds	r7, #20
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <fill_input_buffer>:
 * the front of the buffer rather than discarding it.
 */
#ifdef JFILE 
METHODDEF(boolean)
fill_input_buffer (j_decompress_ptr cinfo)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  my_src_ptr src = (my_src_ptr) cinfo->src;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	699b      	ldr	r3, [r3, #24]
 800ad20:	60bb      	str	r3, [r7, #8]
  size_t nbytes;

  nbytes = JFREAD(src->infile, src->buffer, INPUT_BUF_SIZE);
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	69d8      	ldr	r0, [r3, #28]
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	6a1b      	ldr	r3, [r3, #32]
 800ad2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ad2e:	4619      	mov	r1, r3
 800ad30:	f7fb fa7c 	bl	800622c <read_file>
 800ad34:	60f8      	str	r0, [r7, #12]
  
  if (nbytes <= 0) {
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d122      	bne.n	800ad82 <fill_input_buffer+0x6e>
    if (src->start_of_file)	/* Treat empty input file as fatal error */
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d008      	beq.n	800ad56 <fill_input_buffer+0x42>
      ERREXIT(cinfo, JERR_INPUT_EMPTY);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	222b      	movs	r2, #43	; 0x2b
 800ad4a:	615a      	str	r2, [r3, #20]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	4798      	blx	r3
    WARNMS(cinfo, JWRN_JPEG_EOF);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	227b      	movs	r2, #123	; 0x7b
 800ad5c:	615a      	str	r2, [r3, #20]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	f04f 31ff 	mov.w	r1, #4294967295
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	4798      	blx	r3
    /* Insert a fake EOI marker */
    src->buffer[0] = (JOCTET) 0xFF;
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	6a1b      	ldr	r3, [r3, #32]
 800ad70:	22ff      	movs	r2, #255	; 0xff
 800ad72:	701a      	strb	r2, [r3, #0]
    src->buffer[1] = (JOCTET) JPEG_EOI;
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	6a1b      	ldr	r3, [r3, #32]
 800ad78:	3301      	adds	r3, #1
 800ad7a:	22d9      	movs	r2, #217	; 0xd9
 800ad7c:	701a      	strb	r2, [r3, #0]
    nbytes = 2;
 800ad7e:	2302      	movs	r3, #2
 800ad80:	60fb      	str	r3, [r7, #12]
  }

  src->pub.next_input_byte = src->buffer;
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	6a1a      	ldr	r2, [r3, #32]
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	601a      	str	r2, [r3, #0]
  src->pub.bytes_in_buffer = nbytes;
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	68fa      	ldr	r2, [r7, #12]
 800ad8e:	605a      	str	r2, [r3, #4]
  src->start_of_file = FALSE;
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	2200      	movs	r2, #0
 800ad94:	625a      	str	r2, [r3, #36]	; 0x24

  return TRUE;
 800ad96:	2301      	movs	r3, #1
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3710      	adds	r7, #16
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <skip_input_data>:
 * buffer is the application writer's problem.
 */

METHODDEF(void)
skip_input_data (j_decompress_ptr cinfo, long num_bytes)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
  struct jpeg_source_mgr * src = cinfo->src;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	699b      	ldr	r3, [r3, #24]
 800adae:	60fb      	str	r3, [r7, #12]

  /* Just a dumb implementation for now.  Could use fseek() except
   * it doesn't work on pipes.  Not clear that being smart is worth
   * any trouble anyway --- large skips are infrequent.
   */
  if (num_bytes > 0) {
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	dd1c      	ble.n	800adf0 <skip_input_data+0x50>
    while (num_bytes > (long) src->bytes_in_buffer) {
 800adb6:	e009      	b.n	800adcc <skip_input_data+0x2c>
      num_bytes -= (long) src->bytes_in_buffer;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	461a      	mov	r2, r3
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	1a9b      	subs	r3, r3, r2
 800adc2:	603b      	str	r3, [r7, #0]
      (void) (*src->fill_input_buffer) (cinfo);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	4798      	blx	r3
    while (num_bytes > (long) src->bytes_in_buffer) {
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	461a      	mov	r2, r3
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	4293      	cmp	r3, r2
 800add6:	dcef      	bgt.n	800adb8 <skip_input_data+0x18>
      /* note we assume that fill_input_buffer will never return FALSE,
       * so suspension need not be handled.
       */
    }
    src->next_input_byte += (size_t) num_bytes;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681a      	ldr	r2, [r3, #0]
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	441a      	add	r2, r3
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	601a      	str	r2, [r3, #0]
    src->bytes_in_buffer -= (size_t) num_bytes;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	685a      	ldr	r2, [r3, #4]
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	1ad2      	subs	r2, r2, r3
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	605a      	str	r2, [r3, #4]
  }
}
 800adf0:	bf00      	nop
 800adf2:	3710      	adds	r7, #16
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <term_source>:
 * for error exit.
 */

METHODDEF(void)
term_source (j_decompress_ptr cinfo)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b083      	sub	sp, #12
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  /* no work necessary here */
}
 800ae00:	bf00      	nop
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <jpeg_stdio_src>:
 * for closing it after finishing decompression.
 */
#ifdef JFILE
GLOBAL(void)
jpeg_stdio_src (j_decompress_ptr cinfo, JFILE * infile)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b084      	sub	sp, #16
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
   * only before the first one.  (If we discarded the buffer at the end of
   * one image, we'd likely lose the start of the next one.)
   * This makes it unsafe to use this manager and a different source
   * manager serially with the same JPEG object.  Caveat programmer.
   */
  if (cinfo->src == NULL) {	/* first time for this JPEG object? */
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	699b      	ldr	r3, [r3, #24]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d117      	bne.n	800ae4e <jpeg_stdio_src+0x42>
    cinfo->src = (struct jpeg_source_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2228      	movs	r2, #40	; 0x28
 800ae26:	2100      	movs	r1, #0
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	4798      	blx	r3
 800ae2c:	4602      	mov	r2, r0
    cinfo->src = (struct jpeg_source_mgr *)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	619a      	str	r2, [r3, #24]
				  SIZEOF(my_source_mgr));
    src = (my_src_ptr) cinfo->src;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	699b      	ldr	r3, [r3, #24]
 800ae36:	60fb      	str	r3, [r7, #12]
    src->buffer = (JOCTET *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ae42:	2100      	movs	r1, #0
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	4798      	blx	r3
 800ae48:	4602      	mov	r2, r0
    src->buffer = (JOCTET *)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	621a      	str	r2, [r3, #32]
				  INPUT_BUF_SIZE * SIZEOF(JOCTET));
  }

  src = (my_src_ptr) cinfo->src;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	699b      	ldr	r3, [r3, #24]
 800ae52:	60fb      	str	r3, [r7, #12]
  src->pub.init_source = init_source;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	4a0d      	ldr	r2, [pc, #52]	; (800ae8c <jpeg_stdio_src+0x80>)
 800ae58:	609a      	str	r2, [r3, #8]
  src->pub.fill_input_buffer = fill_input_buffer;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	4a0c      	ldr	r2, [pc, #48]	; (800ae90 <jpeg_stdio_src+0x84>)
 800ae5e:	60da      	str	r2, [r3, #12]
  src->pub.skip_input_data = skip_input_data;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	4a0c      	ldr	r2, [pc, #48]	; (800ae94 <jpeg_stdio_src+0x88>)
 800ae64:	611a      	str	r2, [r3, #16]
  src->pub.resync_to_restart = jpeg_resync_to_restart; /* use default method */
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	4a0b      	ldr	r2, [pc, #44]	; (800ae98 <jpeg_stdio_src+0x8c>)
 800ae6a:	615a      	str	r2, [r3, #20]
  src->pub.term_source = term_source;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	4a0b      	ldr	r2, [pc, #44]	; (800ae9c <jpeg_stdio_src+0x90>)
 800ae70:	619a      	str	r2, [r3, #24]
  src->infile = infile;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	683a      	ldr	r2, [r7, #0]
 800ae76:	61da      	str	r2, [r3, #28]
  src->pub.bytes_in_buffer = 0; /* forces fill_input_buffer on first read */
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	605a      	str	r2, [r3, #4]
  src->pub.next_input_byte = NULL; /* until buffer loaded */
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2200      	movs	r2, #0
 800ae82:	601a      	str	r2, [r3, #0]
}
 800ae84:	bf00      	nop
 800ae86:	3710      	adds	r7, #16
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}
 800ae8c:	0800acf5 	.word	0x0800acf5
 800ae90:	0800ad15 	.word	0x0800ad15
 800ae94:	0800ada1 	.word	0x0800ada1
 800ae98:	08012c51 	.word	0x08012c51
 800ae9c:	0800adf9 	.word	0x0800adf9

0800aea0 <start_iMCU_row>:


LOCAL(void)
start_iMCU_row (j_decompress_ptr cinfo)
/* Reset within-iMCU-row counters for a new row (input side) */
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800aeae:	60fb      	str	r3, [r7, #12]

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	dd03      	ble.n	800aec2 <start_iMCU_row+0x22>
    coef->MCU_rows_per_iMCU_row = 1;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2201      	movs	r2, #1
 800aebe:	61da      	str	r2, [r3, #28]
 800aec0:	e015      	b.n	800aeee <start_iMCU_row+0x4e>
  } else {
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800aece:	3b01      	subs	r3, #1
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d206      	bcs.n	800aee2 <start_iMCU_row+0x42>
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800aeda:	68da      	ldr	r2, [r3, #12]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	61da      	str	r2, [r3, #28]
 800aee0:	e005      	b.n	800aeee <start_iMCU_row+0x4e>
    else
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800aee8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	61da      	str	r2, [r3, #28]
  }

  coef->MCU_ctr = 0;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2200      	movs	r2, #0
 800aef2:	615a      	str	r2, [r3, #20]
  coef->MCU_vert_offset = 0;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2200      	movs	r2, #0
 800aef8:	619a      	str	r2, [r3, #24]
}
 800aefa:	bf00      	nop
 800aefc:	3714      	adds	r7, #20
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr

0800af06 <start_input_pass>:
 * Initialize for an input processing pass.
 */

METHODDEF(void)
start_input_pass (j_decompress_ptr cinfo)
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b082      	sub	sp, #8
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
  cinfo->input_iMCU_row = 0;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2200      	movs	r2, #0
 800af12:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  start_iMCU_row(cinfo);
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f7ff ffc2 	bl	800aea0 <start_iMCU_row>
}
 800af1c:	bf00      	nop
 800af1e:	3708      	adds	r7, #8
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <start_output_pass>:
 * Initialize for an output processing pass.
 */

METHODDEF(void)
start_output_pass (j_decompress_ptr cinfo)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
#ifdef BLOCK_SMOOTHING_SUPPORTED
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800af32:	60fb      	str	r3, [r7, #12]

  /* If multipass, check to see whether to use block smoothing on this pass */
  if (coef->pub.coef_arrays != NULL) {
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	691b      	ldr	r3, [r3, #16]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d010      	beq.n	800af5e <start_output_pass+0x3a>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af40:	2b00      	cmp	r3, #0
 800af42:	d009      	beq.n	800af58 <start_output_pass+0x34>
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 fad2 	bl	800b4ee <smoothing_ok>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d003      	beq.n	800af58 <start_output_pass+0x34>
      coef->pub.decompress_data = decompress_smooth_data;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	4a07      	ldr	r2, [pc, #28]	; (800af70 <start_output_pass+0x4c>)
 800af54:	60da      	str	r2, [r3, #12]
 800af56:	e002      	b.n	800af5e <start_output_pass+0x3a>
    else
      coef->pub.decompress_data = decompress_data;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	4a06      	ldr	r2, [pc, #24]	; (800af74 <start_output_pass+0x50>)
 800af5c:	60da      	str	r2, [r3, #12]
  }
#endif
  cinfo->output_iMCU_row = 0;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 800af66:	bf00      	nop
 800af68:	3710      	adds	r7, #16
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	0800b615 	.word	0x0800b615
 800af74:	0800b345 	.word	0x0800b345

0800af78 <decompress_onepass>:
 * which we index according to the component's SOF position.
 */

METHODDEF(int)
decompress_onepass (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800af78:	b590      	push	{r4, r7, lr}
 800af7a:	b095      	sub	sp, #84	; 0x54
 800af7c:	af02      	add	r7, sp, #8
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800af88:	627b      	str	r3, [r7, #36]	; 0x24
  JDIMENSION MCU_col_num;	/* index of current MCU within row */
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800af90:	3b01      	subs	r3, #1
 800af92:	623b      	str	r3, [r7, #32]
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800af9a:	3b01      	subs	r3, #1
 800af9c:	61fb      	str	r3, [r7, #28]
  JDIMENSION start_col, output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Loop to process as much as one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800af9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa0:	699b      	ldr	r3, [r3, #24]
 800afa2:	633b      	str	r3, [r7, #48]	; 0x30
 800afa4:	e0bf      	b.n	800b126 <decompress_onepass+0x1ae>
       yoffset++) {
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
 800afa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa8:	695b      	ldr	r3, [r3, #20]
 800afaa:	647b      	str	r3, [r7, #68]	; 0x44
 800afac:	e0b0      	b.n	800b110 <decompress_onepass+0x198>
	 MCU_col_num++) {
      /* Try to fetch an MCU.  Entropy decoder expects buffer to be zeroed. */
      if (cinfo->lim_Se)	/* can bypass in DC only case */
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d009      	beq.n	800afcc <decompress_onepass+0x54>
	FMEMZERO((void FAR *) coef->MCU_buffer[0],
 800afb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afba:	6a18      	ldr	r0, [r3, #32]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800afc2:	01db      	lsls	r3, r3, #7
 800afc4:	461a      	mov	r2, r3
 800afc6:	2100      	movs	r1, #0
 800afc8:	f019 ffce 	bl	8024f68 <memset>
		 (size_t) (cinfo->blocks_in_MCU * SIZEOF(JBLOCK)));
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afd6:	3220      	adds	r2, #32
 800afd8:	4611      	mov	r1, r2
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	4798      	blx	r3
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d107      	bne.n	800aff4 <decompress_onepass+0x7c>
	/* Suspension forced; update state counters and exit */
	coef->MCU_vert_offset = yoffset;
 800afe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afe8:	619a      	str	r2, [r3, #24]
	coef->MCU_ctr = MCU_col_num;
 800afea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afee:	615a      	str	r2, [r3, #20]
	return JPEG_SUSPENDED;
 800aff0:	2300      	movs	r3, #0
 800aff2:	e0c0      	b.n	800b176 <decompress_onepass+0x1fe>
      /* Determine where data should go in output_buf and do the IDCT thing.
       * We skip dummy blocks at the right and bottom edges (but blkn gets
       * incremented past them!).  Note the inner loop relies on having
       * allocated the MCU_buffer[] blocks sequentially.
       */
      blkn = 0;			/* index of current DCT block within MCU */
 800aff4:	2300      	movs	r3, #0
 800aff6:	643b      	str	r3, [r7, #64]	; 0x40
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800aff8:	2300      	movs	r3, #0
 800affa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800affc:	e07e      	b.n	800b0fc <decompress_onepass+0x184>
	compptr = cinfo->cur_comp_info[ci];
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b002:	3354      	adds	r3, #84	; 0x54
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	4413      	add	r3, r2
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	61bb      	str	r3, [r7, #24]
	/* Don't bother to IDCT an uninteresting component. */
	if (! compptr->component_needed) {
 800b00c:	69bb      	ldr	r3, [r7, #24]
 800b00e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b010:	2b00      	cmp	r3, #0
 800b012:	d105      	bne.n	800b020 <decompress_onepass+0xa8>
	  blkn += compptr->MCU_blocks;
 800b014:	69bb      	ldr	r3, [r7, #24]
 800b016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b018:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b01a:	4413      	add	r3, r2
 800b01c:	643b      	str	r3, [r7, #64]	; 0x40
	  continue;
 800b01e:	e06a      	b.n	800b0f6 <decompress_onepass+0x17e>
	}
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	4413      	add	r3, r2
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	617b      	str	r3, [r7, #20]
	useful_width = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
						    : compptr->last_col_width;
 800b032:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b034:	6a3b      	ldr	r3, [r7, #32]
 800b036:	429a      	cmp	r2, r3
 800b038:	d202      	bcs.n	800b040 <decompress_onepass+0xc8>
 800b03a:	69bb      	ldr	r3, [r7, #24]
 800b03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b03e:	e001      	b.n	800b044 <decompress_onepass+0xcc>
 800b040:	69bb      	ldr	r3, [r7, #24]
 800b042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	useful_width = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
 800b044:	613b      	str	r3, [r7, #16]
	output_ptr = output_buf[compptr->component_index] +
 800b046:	69bb      	ldr	r3, [r7, #24]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	683a      	ldr	r2, [r7, #0]
 800b04e:	4413      	add	r3, r2
 800b050:	681a      	ldr	r2, [r3, #0]
	  yoffset * compptr->DCT_v_scaled_size;
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b056:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b058:	fb01 f303 	mul.w	r3, r1, r3
	output_ptr = output_buf[compptr->component_index] +
 800b05c:	009b      	lsls	r3, r3, #2
 800b05e:	4413      	add	r3, r2
 800b060:	62fb      	str	r3, [r7, #44]	; 0x2c
	start_col = MCU_col_num * compptr->MCU_sample_width;
 800b062:	69bb      	ldr	r3, [r7, #24]
 800b064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b066:	461a      	mov	r2, r3
 800b068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b06a:	fb02 f303 	mul.w	r3, r2, r3
 800b06e:	60fb      	str	r3, [r7, #12]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800b070:	2300      	movs	r3, #0
 800b072:	637b      	str	r3, [r7, #52]	; 0x34
 800b074:	e03a      	b.n	800b0ec <decompress_onepass+0x174>
	  if (cinfo->input_iMCU_row < last_iMCU_row ||
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b07c:	69fa      	ldr	r2, [r7, #28]
 800b07e:	429a      	cmp	r2, r3
 800b080:	d806      	bhi.n	800b090 <decompress_onepass+0x118>
	      yoffset+yindex < compptr->last_row_height) {
 800b082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b086:	441a      	add	r2, r3
 800b088:	69bb      	ldr	r3, [r7, #24]
 800b08a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	  if (cinfo->input_iMCU_row < last_iMCU_row ||
 800b08c:	429a      	cmp	r2, r3
 800b08e:	da1f      	bge.n	800b0d0 <decompress_onepass+0x158>
	    output_col = start_col;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	62bb      	str	r3, [r7, #40]	; 0x28
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800b094:	2300      	movs	r3, #0
 800b096:	63bb      	str	r3, [r7, #56]	; 0x38
 800b098:	e016      	b.n	800b0c8 <decompress_onepass+0x150>
	      (*inverse_DCT) (cinfo, compptr,
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 800b09a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09e:	441a      	add	r2, r3
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a2:	3208      	adds	r2, #8
 800b0a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	      (*inverse_DCT) (cinfo, compptr,
 800b0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0aa:	9300      	str	r3, [sp, #0]
 800b0ac:	697c      	ldr	r4, [r7, #20]
 800b0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b0:	69b9      	ldr	r1, [r7, #24]
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	47a0      	blx	r4
			      output_ptr, output_col);
	      output_col += compptr->DCT_h_scaled_size;
 800b0b6:	69bb      	ldr	r3, [r7, #24]
 800b0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0be:	4413      	add	r3, r2
 800b0c0:	62bb      	str	r3, [r7, #40]	; 0x28
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800b0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b0c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	dbe4      	blt.n	800b09a <decompress_onepass+0x122>
	    }
	  }
	  blkn += compptr->MCU_width;
 800b0d0:	69bb      	ldr	r3, [r7, #24]
 800b0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b0d6:	4413      	add	r3, r2
 800b0d8:	643b      	str	r3, [r7, #64]	; 0x40
	  output_ptr += compptr->DCT_v_scaled_size;
 800b0da:	69bb      	ldr	r3, [r7, #24]
 800b0dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0e2:	4413      	add	r3, r2
 800b0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800b0e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	637b      	str	r3, [r7, #52]	; 0x34
 800b0ec:	69bb      	ldr	r3, [r7, #24]
 800b0ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	dbbf      	blt.n	800b076 <decompress_onepass+0xfe>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b0f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800b102:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b104:	429a      	cmp	r2, r3
 800b106:	f6ff af7a 	blt.w	800affe <decompress_onepass+0x86>
	 MCU_col_num++) {
 800b10a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b10c:	3301      	adds	r3, #1
 800b10e:	647b      	str	r3, [r7, #68]	; 0x44
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
 800b110:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b112:	6a3b      	ldr	r3, [r7, #32]
 800b114:	429a      	cmp	r2, r3
 800b116:	f67f af4a 	bls.w	800afae <decompress_onepass+0x36>
	}
      }
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->MCU_ctr = 0;
 800b11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11c:	2200      	movs	r2, #0
 800b11e:	615a      	str	r2, [r3, #20]
       yoffset++) {
 800b120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b122:	3301      	adds	r3, #1
 800b124:	633b      	str	r3, [r7, #48]	; 0x30
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800b126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b128:	69db      	ldr	r3, [r3, #28]
 800b12a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b12c:	429a      	cmp	r2, r3
 800b12e:	f6ff af3a 	blt.w	800afa6 <decompress_onepass+0x2e>
  }
  /* Completed the iMCU row, advance counters for next one */
  cinfo->output_iMCU_row++;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b138:	1c5a      	adds	r2, r3, #1
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b146:	1c5a      	adds	r2, r3, #1
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d204      	bcs.n	800b168 <decompress_onepass+0x1f0>
    start_iMCU_row(cinfo);
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f7ff fe9e 	bl	800aea0 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800b164:	2303      	movs	r3, #3
 800b166:	e006      	b.n	800b176 <decompress_onepass+0x1fe>
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b16e:	68db      	ldr	r3, [r3, #12]
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800b174:	2304      	movs	r3, #4
}
 800b176:	4618      	mov	r0, r3
 800b178:	374c      	adds	r7, #76	; 0x4c
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd90      	pop	{r4, r7, pc}

0800b17e <dummy_consume_data>:
 * Dummy consume-input routine for single-pass operation.
 */

METHODDEF(int)
dummy_consume_data (j_decompress_ptr cinfo)
{
 800b17e:	b480      	push	{r7}
 800b180:	b083      	sub	sp, #12
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
  return JPEG_SUSPENDED;	/* Always indicate nothing was done */
 800b186:	2300      	movs	r3, #0
}
 800b188:	4618      	mov	r0, r3
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <consume_data>:
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 */

METHODDEF(int)
consume_data (j_decompress_ptr cinfo)
{
 800b194:	b590      	push	{r4, r7, lr}
 800b196:	b093      	sub	sp, #76	; 0x4c
 800b198:	af02      	add	r7, sp, #8
 800b19a:	6078      	str	r0, [r7, #4]
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800b1a2:	623b      	str	r3, [r7, #32]
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan. */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	637b      	str	r3, [r7, #52]	; 0x34
 800b1a8:	e029      	b.n	800b1fe <consume_data+0x6a>
    compptr = cinfo->cur_comp_info[ci];
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ae:	3354      	adds	r3, #84	; 0x54
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	4413      	add	r3, r2
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	61fb      	str	r3, [r7, #28]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	6a1c      	ldr	r4, [r3, #32]
      ((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	685a      	ldr	r2, [r3, #4]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800b1c2:	6a3b      	ldr	r3, [r7, #32]
 800b1c4:	3212      	adds	r2, #18
 800b1c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
       cinfo->input_iMCU_row * compptr->v_samp_factor,
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b1d0:	69fa      	ldr	r2, [r7, #28]
 800b1d2:	68d2      	ldr	r2, [r2, #12]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800b1d4:	fb02 f203 	mul.w	r2, r2, r3
       (JDIMENSION) compptr->v_samp_factor, TRUE);
 800b1d8:	69fb      	ldr	r3, [r7, #28]
 800b1da:	68db      	ldr	r3, [r3, #12]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800b1dc:	4618      	mov	r0, r3
 800b1de:	2301      	movs	r3, #1
 800b1e0:	9300      	str	r3, [sp, #0]
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	47a0      	blx	r4
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b1f2:	440b      	add	r3, r1
 800b1f4:	f843 2c38 	str.w	r2, [r3, #-56]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b1f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	637b      	str	r3, [r7, #52]	; 0x34
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800b204:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b206:	429a      	cmp	r2, r3
 800b208:	dbcf      	blt.n	800b1aa <consume_data+0x16>
     * because we requested a pre-zeroed array.
     */
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800b20a:	6a3b      	ldr	r3, [r7, #32]
 800b20c:	699b      	ldr	r3, [r3, #24]
 800b20e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b210:	e074      	b.n	800b2fc <consume_data+0x168>
       yoffset++) {
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
 800b212:	6a3b      	ldr	r3, [r7, #32]
 800b214:	695b      	ldr	r3, [r3, #20]
 800b216:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b218:	e064      	b.n	800b2e4 <consume_data+0x150>
	 MCU_col_num++) {
      /* Construct list of pointers to DCT blocks belonging to this MCU */
      blkn = 0;			/* index of current DCT block within MCU */
 800b21a:	2300      	movs	r3, #0
 800b21c:	63bb      	str	r3, [r7, #56]	; 0x38
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b21e:	2300      	movs	r3, #0
 800b220:	637b      	str	r3, [r7, #52]	; 0x34
 800b222:	e042      	b.n	800b2aa <consume_data+0x116>
	compptr = cinfo->cur_comp_info[ci];
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b228:	3354      	adds	r3, #84	; 0x54
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	4413      	add	r3, r2
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	61fb      	str	r3, [r7, #28]
	start_col = MCU_col_num * compptr->MCU_width;
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b236:	461a      	mov	r2, r3
 800b238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b23a:	fb02 f303 	mul.w	r3, r2, r3
 800b23e:	61bb      	str	r3, [r7, #24]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800b240:	2300      	movs	r3, #0
 800b242:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b244:	e029      	b.n	800b29a <consume_data+0x106>
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800b246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b24e:	4413      	add	r3, r2
 800b250:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800b254:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b258:	440b      	add	r3, r1
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	4413      	add	r3, r2
 800b25e:	681a      	ldr	r2, [r3, #0]
 800b260:	69bb      	ldr	r3, [r7, #24]
 800b262:	01db      	lsls	r3, r3, #7
 800b264:	4413      	add	r3, r2
 800b266:	627b      	str	r3, [r7, #36]	; 0x24
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800b268:	2300      	movs	r3, #0
 800b26a:	633b      	str	r3, [r7, #48]	; 0x30
 800b26c:	e00d      	b.n	800b28a <consume_data+0xf6>
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
 800b26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b270:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800b274:	627a      	str	r2, [r7, #36]	; 0x24
 800b276:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b278:	1c51      	adds	r1, r2, #1
 800b27a:	63b9      	str	r1, [r7, #56]	; 0x38
 800b27c:	6a39      	ldr	r1, [r7, #32]
 800b27e:	3208      	adds	r2, #8
 800b280:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800b284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b286:	3301      	adds	r3, #1
 800b288:	633b      	str	r3, [r7, #48]	; 0x30
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b28e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b290:	429a      	cmp	r2, r3
 800b292:	dbec      	blt.n	800b26e <consume_data+0xda>
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800b294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b296:	3301      	adds	r3, #1
 800b298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b29e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	dbd0      	blt.n	800b246 <consume_data+0xb2>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b2a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	637b      	str	r3, [r7, #52]	; 0x34
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800b2b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	dbb6      	blt.n	800b224 <consume_data+0x90>
	  }
	}
      }
      /* Try to fetch the MCU. */
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	6a3a      	ldr	r2, [r7, #32]
 800b2c0:	3220      	adds	r2, #32
 800b2c2:	4611      	mov	r1, r2
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	4798      	blx	r3
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d107      	bne.n	800b2de <consume_data+0x14a>
	/* Suspension forced; update state counters and exit */
	coef->MCU_vert_offset = yoffset;
 800b2ce:	6a3b      	ldr	r3, [r7, #32]
 800b2d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2d2:	619a      	str	r2, [r3, #24]
	coef->MCU_ctr = MCU_col_num;
 800b2d4:	6a3b      	ldr	r3, [r7, #32]
 800b2d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b2d8:	615a      	str	r2, [r3, #20]
	return JPEG_SUSPENDED;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	e02e      	b.n	800b33c <consume_data+0x1a8>
	 MCU_col_num++) {
 800b2de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800b2ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d394      	bcc.n	800b21a <consume_data+0x86>
      }
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->MCU_ctr = 0;
 800b2f0:	6a3b      	ldr	r3, [r7, #32]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	615a      	str	r2, [r3, #20]
       yoffset++) {
 800b2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800b2fc:	6a3b      	ldr	r3, [r7, #32]
 800b2fe:	69db      	ldr	r3, [r3, #28]
 800b300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b302:	429a      	cmp	r2, r3
 800b304:	db85      	blt.n	800b212 <consume_data+0x7e>
  }
  /* Completed the iMCU row, advance counters for next one */
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b30c:	1c5a      	adds	r2, r3, #1
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800b320:	429a      	cmp	r2, r3
 800b322:	d204      	bcs.n	800b32e <consume_data+0x19a>
    start_iMCU_row(cinfo);
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f7ff fdbb 	bl	800aea0 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800b32a:	2303      	movs	r3, #3
 800b32c:	e006      	b.n	800b33c <consume_data+0x1a8>
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b334:	68db      	ldr	r3, [r3, #12]
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800b33a:	2304      	movs	r3, #4
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3744      	adds	r7, #68	; 0x44
 800b340:	46bd      	mov	sp, r7
 800b342:	bd90      	pop	{r4, r7, pc}

0800b344 <decompress_data>:
 * NB: output_buf contains a plane for each component in image.
 */

METHODDEF(int)
decompress_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800b344:	b590      	push	{r4, r7, lr}
 800b346:	b091      	sub	sp, #68	; 0x44
 800b348:	af02      	add	r7, sp, #8
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800b354:	617b      	str	r3, [r7, #20]
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800b35c:	3b01      	subs	r3, #1
 800b35e:	613b      	str	r3, [r7, #16]
  JDIMENSION output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800b360:	e00a      	b.n	800b378 <decompress_data+0x34>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
	  cinfo->input_iMCU_row <= cinfo->output_iMCU_row)) {
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	4798      	blx	r3
 800b36e:	4603      	mov	r3, r0
 800b370:	2b00      	cmp	r3, #0
 800b372:	d101      	bne.n	800b378 <decompress_data+0x34>
      return JPEG_SUSPENDED;
 800b374:	2300      	movs	r3, #0
 800b376:	e0b6      	b.n	800b4e6 <decompress_data+0x1a2>
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b384:	429a      	cmp	r2, r3
 800b386:	dbec      	blt.n	800b362 <decompress_data+0x1e>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800b394:	429a      	cmp	r2, r3
 800b396:	d107      	bne.n	800b3a8 <decompress_data+0x64>
	  cinfo->input_iMCU_row <= cinfo->output_iMCU_row)) {
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d9dc      	bls.n	800b362 <decompress_data+0x1e>
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	633b      	str	r3, [r7, #48]	; 0x30
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b3b2:	61bb      	str	r3, [r7, #24]
 800b3b4:	e07f      	b.n	800b4b6 <decompress_data+0x172>
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
 800b3b6:	69bb      	ldr	r3, [r7, #24]
 800b3b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d074      	beq.n	800b4a8 <decompress_data+0x164>
      continue;
    /* Align the virtual buffer for this component. */
    buffer = (*cinfo->mem->access_virt_barray)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	6a1c      	ldr	r4, [r3, #32]
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3c8:	3212      	adds	r2, #18
 800b3ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
      ((j_common_ptr) cinfo, coef->whole_image[ci],
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b3d4:	69ba      	ldr	r2, [r7, #24]
 800b3d6:	68d2      	ldr	r2, [r2, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 800b3d8:	fb02 f203 	mul.w	r2, r2, r3
       (JDIMENSION) compptr->v_samp_factor, FALSE);
 800b3dc:	69bb      	ldr	r3, [r7, #24]
 800b3de:	68db      	ldr	r3, [r3, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	9300      	str	r3, [sp, #0]
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	47a0      	blx	r4
 800b3ec:	60f8      	str	r0, [r7, #12]
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b3f4:	693a      	ldr	r2, [r7, #16]
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d903      	bls.n	800b402 <decompress_data+0xbe>
      block_rows = compptr->v_samp_factor;
 800b3fa:	69bb      	ldr	r3, [r7, #24]
 800b3fc:	68db      	ldr	r3, [r3, #12]
 800b3fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800b400:	e00f      	b.n	800b422 <decompress_data+0xde>
    else {
      /* NB: can't use last_row_height here; it is input-side-dependent! */
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800b402:	69bb      	ldr	r3, [r7, #24]
 800b404:	6a1b      	ldr	r3, [r3, #32]
 800b406:	69ba      	ldr	r2, [r7, #24]
 800b408:	68d2      	ldr	r2, [r2, #12]
 800b40a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b40e:	fb02 f201 	mul.w	r2, r2, r1
 800b412:	1a9b      	subs	r3, r3, r2
 800b414:	62bb      	str	r3, [r7, #40]	; 0x28
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800b416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d102      	bne.n	800b422 <decompress_data+0xde>
 800b41c:	69bb      	ldr	r3, [r7, #24]
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
 800b428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b42a:	009b      	lsls	r3, r3, #2
 800b42c:	4413      	add	r3, r2
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	60bb      	str	r3, [r7, #8]
    output_ptr = output_buf[ci];
 800b432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	683a      	ldr	r2, [r7, #0]
 800b438:	4413      	add	r3, r2
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	623b      	str	r3, [r7, #32]
    /* Loop over all DCT blocks to be processed. */
    for (block_row = 0; block_row < block_rows; block_row++) {
 800b43e:	2300      	movs	r3, #0
 800b440:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b442:	e02c      	b.n	800b49e <decompress_data+0x15a>
      buffer_ptr = buffer[block_row];
 800b444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	4413      	add	r3, r2
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	627b      	str	r3, [r7, #36]	; 0x24
      output_col = 0;
 800b450:	2300      	movs	r3, #0
 800b452:	61fb      	str	r3, [r7, #28]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800b454:	2300      	movs	r3, #0
 800b456:	637b      	str	r3, [r7, #52]	; 0x34
 800b458:	e013      	b.n	800b482 <decompress_data+0x13e>
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	9300      	str	r3, [sp, #0]
 800b45e:	68bc      	ldr	r4, [r7, #8]
 800b460:	6a3b      	ldr	r3, [r7, #32]
 800b462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b464:	69b9      	ldr	r1, [r7, #24]
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	47a0      	blx	r4
			output_ptr, output_col);
	buffer_ptr++;
 800b46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46c:	3380      	adds	r3, #128	; 0x80
 800b46e:	627b      	str	r3, [r7, #36]	; 0x24
	output_col += compptr->DCT_h_scaled_size;
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b474:	461a      	mov	r2, r3
 800b476:	69fb      	ldr	r3, [r7, #28]
 800b478:	4413      	add	r3, r2
 800b47a:	61fb      	str	r3, [r7, #28]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800b47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b47e:	3301      	adds	r3, #1
 800b480:	637b      	str	r3, [r7, #52]	; 0x34
 800b482:	69bb      	ldr	r3, [r7, #24]
 800b484:	69db      	ldr	r3, [r3, #28]
 800b486:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b488:	429a      	cmp	r2, r3
 800b48a:	d3e6      	bcc.n	800b45a <decompress_data+0x116>
      }
      output_ptr += compptr->DCT_v_scaled_size;
 800b48c:	69bb      	ldr	r3, [r7, #24]
 800b48e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	6a3a      	ldr	r2, [r7, #32]
 800b494:	4413      	add	r3, r2
 800b496:	623b      	str	r3, [r7, #32]
    for (block_row = 0; block_row < block_rows; block_row++) {
 800b498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b49a:	3301      	adds	r3, #1
 800b49c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b49e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	dbce      	blt.n	800b444 <decompress_data+0x100>
 800b4a6:	e000      	b.n	800b4aa <decompress_data+0x166>
      continue;
 800b4a8:	bf00      	nop
       ci++, compptr++) {
 800b4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	633b      	str	r3, [r7, #48]	; 0x30
 800b4b0:	69bb      	ldr	r3, [r7, #24]
 800b4b2:	3358      	adds	r3, #88	; 0x58
 800b4b4:	61bb      	str	r3, [r7, #24]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	f6ff af7a 	blt.w	800b3b6 <decompress_data+0x72>
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b4c8:	1c5a      	adds	r2, r3, #1
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d201      	bcs.n	800b4e4 <decompress_data+0x1a0>
    return JPEG_ROW_COMPLETED;
 800b4e0:	2303      	movs	r3, #3
 800b4e2:	e000      	b.n	800b4e6 <decompress_data+0x1a2>
  return JPEG_SCAN_COMPLETED;
 800b4e4:	2304      	movs	r3, #4
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	373c      	adds	r7, #60	; 0x3c
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd90      	pop	{r4, r7, pc}

0800b4ee <smoothing_ok>:
 * more accurately than they really are.
 */

LOCAL(boolean)
smoothing_ok (j_decompress_ptr cinfo)
{
 800b4ee:	b590      	push	{r4, r7, lr}
 800b4f0:	b08b      	sub	sp, #44	; 0x2c
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800b4fc:	613b      	str	r3, [r7, #16]
  boolean smoothing_useful = FALSE;
 800b4fe:	2300      	movs	r3, #0
 800b500:	627b      	str	r3, [r7, #36]	; 0x24
  jpeg_component_info *compptr;
  JQUANT_TBL * qtable;
  int * coef_bits;
  int * coef_bits_latch;

  if (! cinfo->progressive_mode || cinfo->coef_bits == NULL)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d004      	beq.n	800b516 <smoothing_ok+0x28>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b512:	2b00      	cmp	r3, #0
 800b514:	d101      	bne.n	800b51a <smoothing_ok+0x2c>
    return FALSE;
 800b516:	2300      	movs	r3, #0
 800b518:	e078      	b.n	800b60c <smoothing_ok+0x11e>

  /* Allocate latch area if not already done */
  if (coef->coef_bits_latch == NULL)
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d110      	bne.n	800b544 <smoothing_ok+0x56>
    coef->coef_bits_latch = (int *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	681c      	ldr	r4, [r3, #0]
				  cinfo->num_components *
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52c:	461a      	mov	r2, r3
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b52e:	4613      	mov	r3, r2
 800b530:	005b      	lsls	r3, r3, #1
 800b532:	4413      	add	r3, r2
 800b534:	00db      	lsls	r3, r3, #3
 800b536:	461a      	mov	r2, r3
 800b538:	2101      	movs	r1, #1
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	47a0      	blx	r4
 800b53e:	4602      	mov	r2, r0
    coef->coef_bits_latch = (int *)
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	671a      	str	r2, [r3, #112]	; 0x70
				  (SAVED_COEFS * SIZEOF(int)));
  coef_bits_latch = coef->coef_bits_latch;
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b548:	617b      	str	r3, [r7, #20]

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b54a:	2300      	movs	r3, #0
 800b54c:	623b      	str	r3, [r7, #32]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b554:	61bb      	str	r3, [r7, #24]
 800b556:	e053      	b.n	800b600 <smoothing_ok+0x112>
       ci++, compptr++) {
    /* All components' quantization values must already be latched. */
    if ((qtable = compptr->quant_table) == NULL)
 800b558:	69bb      	ldr	r3, [r7, #24]
 800b55a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b55c:	60fb      	str	r3, [r7, #12]
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d101      	bne.n	800b568 <smoothing_ok+0x7a>
      return FALSE;
 800b564:	2300      	movs	r3, #0
 800b566:	e051      	b.n	800b60c <smoothing_ok+0x11e>
    /* Verify DC & first 5 AC quantizers are nonzero to avoid zero-divide. */
    if (qtable->quantval[0] == 0 ||
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	881b      	ldrh	r3, [r3, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d013      	beq.n	800b598 <smoothing_ok+0xaa>
	qtable->quantval[Q01_POS] == 0 ||
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	885b      	ldrh	r3, [r3, #2]
    if (qtable->quantval[0] == 0 ||
 800b574:	2b00      	cmp	r3, #0
 800b576:	d00f      	beq.n	800b598 <smoothing_ok+0xaa>
	qtable->quantval[Q10_POS] == 0 ||
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	8a1b      	ldrh	r3, [r3, #16]
	qtable->quantval[Q01_POS] == 0 ||
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d00b      	beq.n	800b598 <smoothing_ok+0xaa>
	qtable->quantval[Q20_POS] == 0 ||
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	8c1b      	ldrh	r3, [r3, #32]
	qtable->quantval[Q10_POS] == 0 ||
 800b584:	2b00      	cmp	r3, #0
 800b586:	d007      	beq.n	800b598 <smoothing_ok+0xaa>
	qtable->quantval[Q11_POS] == 0 ||
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	8a5b      	ldrh	r3, [r3, #18]
	qtable->quantval[Q20_POS] == 0 ||
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d003      	beq.n	800b598 <smoothing_ok+0xaa>
	qtable->quantval[Q02_POS] == 0)
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	889b      	ldrh	r3, [r3, #4]
	qtable->quantval[Q11_POS] == 0 ||
 800b594:	2b00      	cmp	r3, #0
 800b596:	d101      	bne.n	800b59c <smoothing_ok+0xae>
      return FALSE;
 800b598:	2300      	movs	r3, #0
 800b59a:	e037      	b.n	800b60c <smoothing_ok+0x11e>
    /* DC values must be at least partly known for all components. */
    coef_bits = cinfo->coef_bits[ci];
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800b5a2:	6a3b      	ldr	r3, [r7, #32]
 800b5a4:	021b      	lsls	r3, r3, #8
 800b5a6:	4413      	add	r3, r2
 800b5a8:	60bb      	str	r3, [r7, #8]
    if (coef_bits[0] < 0)
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	da01      	bge.n	800b5b6 <smoothing_ok+0xc8>
      return FALSE;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	e02a      	b.n	800b60c <smoothing_ok+0x11e>
    /* Block smoothing is helpful if some AC coefficients remain inaccurate. */
    for (coefi = 1; coefi <= 5; coefi++) {
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	61fb      	str	r3, [r7, #28]
 800b5ba:	e015      	b.n	800b5e8 <smoothing_ok+0xfa>
      coef_bits_latch[coefi] = coef_bits[coefi];
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	68ba      	ldr	r2, [r7, #8]
 800b5c2:	441a      	add	r2, r3
 800b5c4:	69fb      	ldr	r3, [r7, #28]
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	6979      	ldr	r1, [r7, #20]
 800b5ca:	440b      	add	r3, r1
 800b5cc:	6812      	ldr	r2, [r2, #0]
 800b5ce:	601a      	str	r2, [r3, #0]
      if (coef_bits[coefi] != 0)
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	68ba      	ldr	r2, [r7, #8]
 800b5d6:	4413      	add	r3, r2
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d001      	beq.n	800b5e2 <smoothing_ok+0xf4>
	smoothing_useful = TRUE;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	627b      	str	r3, [r7, #36]	; 0x24
    for (coefi = 1; coefi <= 5; coefi++) {
 800b5e2:	69fb      	ldr	r3, [r7, #28]
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	61fb      	str	r3, [r7, #28]
 800b5e8:	69fb      	ldr	r3, [r7, #28]
 800b5ea:	2b05      	cmp	r3, #5
 800b5ec:	dde6      	ble.n	800b5bc <smoothing_ok+0xce>
    }
    coef_bits_latch += SAVED_COEFS;
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	3318      	adds	r3, #24
 800b5f2:	617b      	str	r3, [r7, #20]
       ci++, compptr++) {
 800b5f4:	6a3b      	ldr	r3, [r7, #32]
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	623b      	str	r3, [r7, #32]
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	3358      	adds	r3, #88	; 0x58
 800b5fe:	61bb      	str	r3, [r7, #24]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b604:	6a3a      	ldr	r2, [r7, #32]
 800b606:	429a      	cmp	r2, r3
 800b608:	dba6      	blt.n	800b558 <smoothing_ok+0x6a>
  }

  return smoothing_useful;
 800b60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	372c      	adds	r7, #44	; 0x2c
 800b610:	46bd      	mov	sp, r7
 800b612:	bd90      	pop	{r4, r7, pc}

0800b614 <decompress_smooth_data>:
 * Variant of decompress_data for use when doing block smoothing.
 */

METHODDEF(int)
decompress_smooth_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800b614:	b5b0      	push	{r4, r5, r7, lr}
 800b616:	b0cc      	sub	sp, #304	; 0x130
 800b618:	af02      	add	r7, sp, #8
 800b61a:	1d3b      	adds	r3, r7, #4
 800b61c:	6018      	str	r0, [r3, #0]
 800b61e:	463b      	mov	r3, r7
 800b620:	6019      	str	r1, [r3, #0]
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800b622:	1d3b      	adds	r3, r7, #4
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800b62a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800b62e:	1d3b      	adds	r3, r7, #4
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800b636:	3b01      	subs	r3, #1
 800b638:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  INT32 Q00,Q01,Q02,Q10,Q11,Q20, num;
  int DC1,DC2,DC3,DC4,DC5,DC6,DC7,DC8,DC9;
  int Al, pred;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800b63c:	e02f      	b.n	800b69e <decompress_smooth_data+0x8a>
	 ! cinfo->inputctl->eoi_reached) {
    if (cinfo->input_scan_number == cinfo->output_scan_number) {
 800b63e:	1d3b      	adds	r3, r7, #4
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b646:	1d3b      	adds	r3, r7, #4
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b64e:	429a      	cmp	r2, r3
 800b650:	d117      	bne.n	800b682 <decompress_smooth_data+0x6e>
      /* If input is working on current scan, we ordinarily want it to
       * have completed the current row.  But if input scan is DC,
       * we want it to keep one row ahead so that next block row's DC
       * values are up to date.
       */
      JDIMENSION delta = (cinfo->Ss == 0) ? 1 : 0;
 800b652:	1d3b      	adds	r3, r7, #4
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	bf0c      	ite	eq
 800b65e:	2301      	moveq	r3, #1
 800b660:	2300      	movne	r3, #0
 800b662:	b2db      	uxtb	r3, r3
 800b664:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      if (cinfo->input_iMCU_row > cinfo->output_iMCU_row+delta)
 800b668:	1d3b      	adds	r3, r7, #4
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800b670:	1d3b      	adds	r3, r7, #4
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 800b678:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b67c:	440b      	add	r3, r1
 800b67e:	429a      	cmp	r2, r3
 800b680:	d81f      	bhi.n	800b6c2 <decompress_smooth_data+0xae>
	break;
    }
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800b682:	1d3b      	adds	r3, r7, #4
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	1d3a      	adds	r2, r7, #4
 800b68e:	6810      	ldr	r0, [r2, #0]
 800b690:	4798      	blx	r3
 800b692:	4603      	mov	r3, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d102      	bne.n	800b69e <decompress_smooth_data+0x8a>
      return JPEG_SUSPENDED;
 800b698:	2300      	movs	r3, #0
 800b69a:	f000 bc53 	b.w	800bf44 <decompress_smooth_data+0x930>
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800b69e:	1d3b      	adds	r3, r7, #4
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b6a6:	1d3b      	adds	r3, r7, #4
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	dc08      	bgt.n	800b6c4 <decompress_smooth_data+0xb0>
	 ! cinfo->inputctl->eoi_reached) {
 800b6b2:	1d3b      	adds	r3, r7, #4
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800b6ba:	695b      	ldr	r3, [r3, #20]
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d0be      	beq.n	800b63e <decompress_smooth_data+0x2a>
 800b6c0:	e000      	b.n	800b6c4 <decompress_smooth_data+0xb0>
	break;
 800b6c2:	bf00      	nop
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800b6ca:	1d3b      	adds	r3, r7, #4
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b6d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b6d6:	f000 bc17 	b.w	800bf08 <decompress_smooth_data+0x8f4>
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
 800b6da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b6de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f000 8406 	beq.w	800bef2 <decompress_smooth_data+0x8de>
      continue;
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800b6e6:	1d3b      	adds	r3, r7, #4
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b6ee:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d90d      	bls.n	800b712 <decompress_smooth_data+0xfe>
      block_rows = compptr->v_samp_factor;
 800b6f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
      access_rows = block_rows * 2; /* this and next iMCU row */
 800b700:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b704:	005b      	lsls	r3, r3, #1
 800b706:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      last_row = FALSE;
 800b70a:	2300      	movs	r3, #0
 800b70c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b710:	e01c      	b.n	800b74c <decompress_smooth_data+0x138>
    } else {
      /* NB: can't use last_row_height here; it is input-side-dependent! */
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800b712:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b716:	6a1b      	ldr	r3, [r3, #32]
 800b718:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800b71c:	68d2      	ldr	r2, [r2, #12]
 800b71e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b722:	fb02 f201 	mul.w	r2, r2, r1
 800b726:	1a9b      	subs	r3, r3, r2
 800b728:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800b72c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b730:	2b00      	cmp	r3, #0
 800b732:	d104      	bne.n	800b73e <decompress_smooth_data+0x12a>
 800b734:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b738:	68db      	ldr	r3, [r3, #12]
 800b73a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
      access_rows = block_rows; /* this iMCU row only */
 800b73e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b742:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      last_row = TRUE;
 800b746:	2301      	movs	r3, #1
 800b748:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    }
    /* Align the virtual buffer for this component. */
    if (cinfo->output_iMCU_row > 0) {
 800b74c:	1d3b      	adds	r3, r7, #4
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b754:	2b00      	cmp	r3, #0
 800b756:	d032      	beq.n	800b7be <decompress_smooth_data+0x1aa>
      access_rows += compptr->v_samp_factor; /* prior iMCU row too */
 800b758:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b75c:	68db      	ldr	r3, [r3, #12]
 800b75e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800b762:	4413      	add	r3, r2
 800b764:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      buffer = (*cinfo->mem->access_virt_barray)
 800b768:	1d3b      	adds	r3, r7, #4
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	6a1c      	ldr	r4, [r3, #32]
 800b770:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b774:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800b778:	3212      	adds	r2, #18
 800b77a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	((j_common_ptr) cinfo, coef->whole_image[ci],
	 (cinfo->output_iMCU_row - 1) * compptr->v_samp_factor,
 800b77e:	1d3b      	adds	r3, r7, #4
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b786:	3b01      	subs	r3, #1
 800b788:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800b78c:	68d2      	ldr	r2, [r2, #12]
      buffer = (*cinfo->mem->access_virt_barray)
 800b78e:	fb02 f203 	mul.w	r2, r2, r3
 800b792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b796:	1d38      	adds	r0, r7, #4
 800b798:	2500      	movs	r5, #0
 800b79a:	9500      	str	r5, [sp, #0]
 800b79c:	6800      	ldr	r0, [r0, #0]
 800b79e:	47a0      	blx	r4
 800b7a0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
	 (JDIMENSION) access_rows, FALSE);
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800b7a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b7a8:	68db      	ldr	r3, [r3, #12]
 800b7aa:	009b      	lsls	r3, r3, #2
 800b7ac:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800b7b0:	4413      	add	r3, r2
 800b7b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
      first_row = FALSE;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b7bc:	e017      	b.n	800b7ee <decompress_smooth_data+0x1da>
    } else {
      buffer = (*cinfo->mem->access_virt_barray)
 800b7be:	1d3b      	adds	r3, r7, #4
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	6a1c      	ldr	r4, [r3, #32]
 800b7c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b7ca:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800b7ce:	3212      	adds	r2, #18
 800b7d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b7d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7d8:	1d38      	adds	r0, r7, #4
 800b7da:	2200      	movs	r2, #0
 800b7dc:	9200      	str	r2, [sp, #0]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	6800      	ldr	r0, [r0, #0]
 800b7e2:	47a0      	blx	r4
 800b7e4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
	((j_common_ptr) cinfo, coef->whole_image[ci],
	 (JDIMENSION) 0, (JDIMENSION) access_rows, FALSE);
      first_row = TRUE;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    }
    /* Fetch component-dependent info */
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800b7ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b7f2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b7f4:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800b7f8:	4613      	mov	r3, r2
 800b7fa:	005b      	lsls	r3, r3, #1
 800b7fc:	4413      	add	r3, r2
 800b7fe:	00db      	lsls	r3, r3, #3
 800b800:	440b      	add	r3, r1
 800b802:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    quanttbl = compptr->quant_table;
 800b806:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b80a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b80c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    Q00 = quanttbl->quantval[0];
 800b810:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b814:	881b      	ldrh	r3, [r3, #0]
 800b816:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    Q01 = quanttbl->quantval[Q01_POS];
 800b81a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b81e:	885b      	ldrh	r3, [r3, #2]
 800b820:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    Q10 = quanttbl->quantval[Q10_POS];
 800b824:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b828:	8a1b      	ldrh	r3, [r3, #16]
 800b82a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    Q20 = quanttbl->quantval[Q20_POS];
 800b82e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b832:	8c1b      	ldrh	r3, [r3, #32]
 800b834:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    Q11 = quanttbl->quantval[Q11_POS];
 800b838:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b83c:	8a5b      	ldrh	r3, [r3, #18]
 800b83e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    Q02 = quanttbl->quantval[Q02_POS];
 800b842:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b846:	889b      	ldrh	r3, [r3, #4]
 800b848:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800b84c:	1d3b      	adds	r3, r7, #4
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
 800b854:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b858:	009b      	lsls	r3, r3, #2
 800b85a:	4413      	add	r3, r2
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    output_ptr = output_buf[ci];
 800b862:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b866:	009b      	lsls	r3, r3, #2
 800b868:	463a      	mov	r2, r7
 800b86a:	6812      	ldr	r2, [r2, #0]
 800b86c:	4413      	add	r3, r2
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    /* Loop over all DCT blocks to be processed. */
    for (block_row = 0; block_row < block_rows; block_row++) {
 800b874:	2300      	movs	r3, #0
 800b876:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800b87a:	e332      	b.n	800bee2 <decompress_smooth_data+0x8ce>
      buffer_ptr = buffer[block_row];
 800b87c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800b886:	4413      	add	r3, r2
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      if (first_row && block_row == 0)
 800b88e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b892:	2b00      	cmp	r3, #0
 800b894:	d008      	beq.n	800b8a8 <decompress_smooth_data+0x294>
 800b896:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d104      	bne.n	800b8a8 <decompress_smooth_data+0x294>
	prev_block_row = buffer_ptr;
 800b89e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b8a6:	e00b      	b.n	800b8c0 <decompress_smooth_data+0x2ac>
      else
	prev_block_row = buffer[block_row-1];
 800b8a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b8ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b8b0:	3b01      	subs	r3, #1
 800b8b2:	009b      	lsls	r3, r3, #2
 800b8b4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800b8b8:	4413      	add	r3, r2
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
      if (last_row && block_row == block_rows-1)
 800b8c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d00b      	beq.n	800b8e0 <decompress_smooth_data+0x2cc>
 800b8c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800b8cc:	3b01      	subs	r3, #1
 800b8ce:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d104      	bne.n	800b8e0 <decompress_smooth_data+0x2cc>
	next_block_row = buffer_ptr;
 800b8d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b8de:	e009      	b.n	800b8f4 <decompress_smooth_data+0x2e0>
      else
	next_block_row = buffer[block_row+1];
 800b8e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800b8ec:	4413      	add	r3, r2
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
      /* We fetch the surrounding DC values using a sliding-register approach.
       * Initialize all nine here so as to do the right thing on narrow pics.
       */
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800b8f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b8f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b8fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b904:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b908:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b90c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800b910:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b914:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b918:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b91c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b920:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b928:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800b92c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b930:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b934:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b938:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b93c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b940:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b944:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      output_col = 0;
 800b948:	2300      	movs	r3, #0
 800b94a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
      last_block_column = compptr->width_in_blocks - 1;
 800b94e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b952:	69db      	ldr	r3, [r3, #28]
 800b954:	3b01      	subs	r3, #1
 800b956:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800b95a:	2300      	movs	r3, #0
 800b95c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800b960:	e2aa      	b.n	800beb8 <decompress_smooth_data+0x8a4>
	/* Fetch current DCT block into workspace so we can modify it. */
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800b962:	f107 030c 	add.w	r3, r7, #12
 800b966:	2201      	movs	r2, #1
 800b968:	4619      	mov	r1, r3
 800b96a:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800b96e:	f019 faa1 	bl	8024eb4 <jcopy_block_row>
	/* Update DC values */
	if (block_num < last_block_column) {
 800b972:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800b976:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d214      	bcs.n	800b9a8 <decompress_smooth_data+0x394>
	  DC3 = (int) prev_block_row[1][0];
 800b97e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b982:	3380      	adds	r3, #128	; 0x80
 800b984:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b988:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	  DC6 = (int) buffer_ptr[1][0];
 800b98c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b990:	3380      	adds	r3, #128	; 0x80
 800b992:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b996:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  DC9 = (int) next_block_row[1][0];
 800b99a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b99e:	3380      	adds	r3, #128	; 0x80
 800b9a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	/* Compute coefficient estimates per K.8.
	 * An estimate is applied only if coefficient is still zero,
	 * and is not known to be fully accurate.
	 */
	/* AC01 */
	if ((Al=coef_bits[1]) != 0 && workspace[1] == 0) {
 800b9a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b9b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d068      	beq.n	800ba8c <decompress_smooth_data+0x478>
 800b9ba:	f107 030c 	add.w	r3, r7, #12
 800b9be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d162      	bne.n	800ba8c <decompress_smooth_data+0x478>
	  num = 36 * Q00 * (DC4 - DC6);
 800b9c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b9ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9ce:	1ad3      	subs	r3, r2, r3
 800b9d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b9d4:	fb02 f203 	mul.w	r2, r2, r3
 800b9d8:	4613      	mov	r3, r2
 800b9da:	00db      	lsls	r3, r3, #3
 800b9dc:	4413      	add	r3, r2
 800b9de:	009b      	lsls	r3, r3, #2
 800b9e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  if (num >= 0) {
 800b9e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	db22      	blt.n	800ba32 <decompress_smooth_data+0x41e>
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800b9ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b9f0:	01da      	lsls	r2, r3, #7
 800b9f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b9f6:	441a      	add	r2, r3
 800b9f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b9fc:	021b      	lsls	r3, r3, #8
 800b9fe:	fb92 f3f3 	sdiv	r3, r2, r3
 800ba02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 800ba06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	dd38      	ble.n	800ba80 <decompress_smooth_data+0x46c>
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba14:	fa02 f303 	lsl.w	r3, r2, r3
 800ba18:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	db2f      	blt.n	800ba80 <decompress_smooth_data+0x46c>
	      pred = (1<<Al)-1;
 800ba20:	2201      	movs	r2, #1
 800ba22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba26:	fa02 f303 	lsl.w	r3, r2, r3
 800ba2a:	3b01      	subs	r3, #1
 800ba2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ba30:	e026      	b.n	800ba80 <decompress_smooth_data+0x46c>
	  } else {
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800ba32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ba36:	01da      	lsls	r2, r3, #7
 800ba38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba3c:	1ad2      	subs	r2, r2, r3
 800ba3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ba42:	021b      	lsls	r3, r3, #8
 800ba44:	fb92 f3f3 	sdiv	r3, r2, r3
 800ba48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 800ba4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	dd10      	ble.n	800ba76 <decompress_smooth_data+0x462>
 800ba54:	2201      	movs	r2, #1
 800ba56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba5a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ba62:	429a      	cmp	r2, r3
 800ba64:	db07      	blt.n	800ba76 <decompress_smooth_data+0x462>
	      pred = (1<<Al)-1;
 800ba66:	2201      	movs	r2, #1
 800ba68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ba70:	3b01      	subs	r3, #1
 800ba72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    pred = -pred;
 800ba76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ba7a:	425b      	negs	r3, r3
 800ba7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	  }
	  workspace[1] = (JCOEF) pred;
 800ba80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ba84:	b21a      	sxth	r2, r3
 800ba86:	f107 030c 	add.w	r3, r7, #12
 800ba8a:	805a      	strh	r2, [r3, #2]
	}
	/* AC10 */
	if ((Al=coef_bits[2]) != 0 && workspace[8] == 0) {
 800ba8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ba96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d068      	beq.n	800bb70 <decompress_smooth_data+0x55c>
 800ba9e:	f107 030c 	add.w	r3, r7, #12
 800baa2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d162      	bne.n	800bb70 <decompress_smooth_data+0x55c>
	  num = 36 * Q00 * (DC2 - DC8);
 800baaa:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800baae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800bab2:	1ad3      	subs	r3, r2, r3
 800bab4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bab8:	fb02 f203 	mul.w	r2, r2, r3
 800babc:	4613      	mov	r3, r2
 800babe:	00db      	lsls	r3, r3, #3
 800bac0:	4413      	add	r3, r2
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  if (num >= 0) {
 800bac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bacc:	2b00      	cmp	r3, #0
 800bace:	db22      	blt.n	800bb16 <decompress_smooth_data+0x502>
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800bad0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bad4:	01da      	lsls	r2, r3, #7
 800bad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bada:	441a      	add	r2, r3
 800badc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bae0:	021b      	lsls	r3, r3, #8
 800bae2:	fb92 f3f3 	sdiv	r3, r2, r3
 800bae6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 800baea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800baee:	2b00      	cmp	r3, #0
 800baf0:	dd38      	ble.n	800bb64 <decompress_smooth_data+0x550>
 800baf2:	2201      	movs	r2, #1
 800baf4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800baf8:	fa02 f303 	lsl.w	r3, r2, r3
 800bafc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bb00:	429a      	cmp	r2, r3
 800bb02:	db2f      	blt.n	800bb64 <decompress_smooth_data+0x550>
	      pred = (1<<Al)-1;
 800bb04:	2201      	movs	r2, #1
 800bb06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bb0a:	fa02 f303 	lsl.w	r3, r2, r3
 800bb0e:	3b01      	subs	r3, #1
 800bb10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bb14:	e026      	b.n	800bb64 <decompress_smooth_data+0x550>
	  } else {
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800bb16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bb1a:	01da      	lsls	r2, r3, #7
 800bb1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb20:	1ad2      	subs	r2, r2, r3
 800bb22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bb26:	021b      	lsls	r3, r3, #8
 800bb28:	fb92 f3f3 	sdiv	r3, r2, r3
 800bb2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 800bb30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	dd10      	ble.n	800bb5a <decompress_smooth_data+0x546>
 800bb38:	2201      	movs	r2, #1
 800bb3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bb3e:	fa02 f303 	lsl.w	r3, r2, r3
 800bb42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bb46:	429a      	cmp	r2, r3
 800bb48:	db07      	blt.n	800bb5a <decompress_smooth_data+0x546>
	      pred = (1<<Al)-1;
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bb50:	fa02 f303 	lsl.w	r3, r2, r3
 800bb54:	3b01      	subs	r3, #1
 800bb56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    pred = -pred;
 800bb5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bb5e:	425b      	negs	r3, r3
 800bb60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	  }
	  workspace[8] = (JCOEF) pred;
 800bb64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bb68:	b21a      	sxth	r2, r3
 800bb6a:	f107 030c 	add.w	r3, r7, #12
 800bb6e:	821a      	strh	r2, [r3, #16]
	}
	/* AC20 */
	if ((Al=coef_bits[3]) != 0 && workspace[16] == 0) {
 800bb70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bb74:	68db      	ldr	r3, [r3, #12]
 800bb76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bb7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d06b      	beq.n	800bc5a <decompress_smooth_data+0x646>
 800bb82:	f107 030c 	add.w	r3, r7, #12
 800bb86:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d165      	bne.n	800bc5a <decompress_smooth_data+0x646>
	  num = 9 * Q00 * (DC2 + DC8 - 2*DC5);
 800bb8e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800bb92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800bb96:	441a      	add	r2, r3
 800bb98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb9c:	005b      	lsls	r3, r3, #1
 800bb9e:	1ad3      	subs	r3, r2, r3
 800bba0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bba4:	fb02 f203 	mul.w	r2, r2, r3
 800bba8:	4613      	mov	r3, r2
 800bbaa:	00db      	lsls	r3, r3, #3
 800bbac:	4413      	add	r3, r2
 800bbae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  if (num >= 0) {
 800bbb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	db22      	blt.n	800bc00 <decompress_smooth_data+0x5ec>
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800bbba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bbbe:	01da      	lsls	r2, r3, #7
 800bbc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbc4:	441a      	add	r2, r3
 800bbc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bbca:	021b      	lsls	r3, r3, #8
 800bbcc:	fb92 f3f3 	sdiv	r3, r2, r3
 800bbd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 800bbd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	dd38      	ble.n	800bc4e <decompress_smooth_data+0x63a>
 800bbdc:	2201      	movs	r2, #1
 800bbde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bbe2:	fa02 f303 	lsl.w	r3, r2, r3
 800bbe6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bbea:	429a      	cmp	r2, r3
 800bbec:	db2f      	blt.n	800bc4e <decompress_smooth_data+0x63a>
	      pred = (1<<Al)-1;
 800bbee:	2201      	movs	r2, #1
 800bbf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bbf4:	fa02 f303 	lsl.w	r3, r2, r3
 800bbf8:	3b01      	subs	r3, #1
 800bbfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bbfe:	e026      	b.n	800bc4e <decompress_smooth_data+0x63a>
	  } else {
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800bc00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bc04:	01da      	lsls	r2, r3, #7
 800bc06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc0a:	1ad2      	subs	r2, r2, r3
 800bc0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bc10:	021b      	lsls	r3, r3, #8
 800bc12:	fb92 f3f3 	sdiv	r3, r2, r3
 800bc16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 800bc1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	dd10      	ble.n	800bc44 <decompress_smooth_data+0x630>
 800bc22:	2201      	movs	r2, #1
 800bc24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bc28:	fa02 f303 	lsl.w	r3, r2, r3
 800bc2c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bc30:	429a      	cmp	r2, r3
 800bc32:	db07      	blt.n	800bc44 <decompress_smooth_data+0x630>
	      pred = (1<<Al)-1;
 800bc34:	2201      	movs	r2, #1
 800bc36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bc3a:	fa02 f303 	lsl.w	r3, r2, r3
 800bc3e:	3b01      	subs	r3, #1
 800bc40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    pred = -pred;
 800bc44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bc48:	425b      	negs	r3, r3
 800bc4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	  }
	  workspace[16] = (JCOEF) pred;
 800bc4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bc52:	b21a      	sxth	r2, r3
 800bc54:	f107 030c 	add.w	r3, r7, #12
 800bc58:	841a      	strh	r2, [r3, #32]
	}
	/* AC11 */
	if ((Al=coef_bits[4]) != 0 && workspace[9] == 0) {
 800bc5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bc5e:	691b      	ldr	r3, [r3, #16]
 800bc60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bc64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d06d      	beq.n	800bd48 <decompress_smooth_data+0x734>
 800bc6c:	f107 030c 	add.w	r3, r7, #12
 800bc70:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d167      	bne.n	800bd48 <decompress_smooth_data+0x734>
	  num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
 800bc78:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800bc7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc80:	1ad2      	subs	r2, r2, r3
 800bc82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc86:	1ad2      	subs	r2, r2, r3
 800bc88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bc8c:	4413      	add	r3, r2
 800bc8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bc92:	fb02 f203 	mul.w	r2, r2, r3
 800bc96:	4613      	mov	r3, r2
 800bc98:	009b      	lsls	r3, r3, #2
 800bc9a:	4413      	add	r3, r2
 800bc9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  if (num >= 0) {
 800bca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	db22      	blt.n	800bcee <decompress_smooth_data+0x6da>
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800bca8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bcac:	01da      	lsls	r2, r3, #7
 800bcae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bcb2:	441a      	add	r2, r3
 800bcb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bcb8:	021b      	lsls	r3, r3, #8
 800bcba:	fb92 f3f3 	sdiv	r3, r2, r3
 800bcbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 800bcc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	dd38      	ble.n	800bd3c <decompress_smooth_data+0x728>
 800bcca:	2201      	movs	r2, #1
 800bccc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bcd0:	fa02 f303 	lsl.w	r3, r2, r3
 800bcd4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	db2f      	blt.n	800bd3c <decompress_smooth_data+0x728>
	      pred = (1<<Al)-1;
 800bcdc:	2201      	movs	r2, #1
 800bcde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bce2:	fa02 f303 	lsl.w	r3, r2, r3
 800bce6:	3b01      	subs	r3, #1
 800bce8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bcec:	e026      	b.n	800bd3c <decompress_smooth_data+0x728>
	  } else {
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800bcee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bcf2:	01da      	lsls	r2, r3, #7
 800bcf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bcf8:	1ad2      	subs	r2, r2, r3
 800bcfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bcfe:	021b      	lsls	r3, r3, #8
 800bd00:	fb92 f3f3 	sdiv	r3, r2, r3
 800bd04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 800bd08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	dd10      	ble.n	800bd32 <decompress_smooth_data+0x71e>
 800bd10:	2201      	movs	r2, #1
 800bd12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd16:	fa02 f303 	lsl.w	r3, r2, r3
 800bd1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	db07      	blt.n	800bd32 <decompress_smooth_data+0x71e>
	      pred = (1<<Al)-1;
 800bd22:	2201      	movs	r2, #1
 800bd24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd28:	fa02 f303 	lsl.w	r3, r2, r3
 800bd2c:	3b01      	subs	r3, #1
 800bd2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    pred = -pred;
 800bd32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd36:	425b      	negs	r3, r3
 800bd38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	  }
	  workspace[9] = (JCOEF) pred;
 800bd3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd40:	b21a      	sxth	r2, r3
 800bd42:	f107 030c 	add.w	r3, r7, #12
 800bd46:	825a      	strh	r2, [r3, #18]
	}
	/* AC02 */
	if ((Al=coef_bits[5]) != 0 && workspace[2] == 0) {
 800bd48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bd4c:	695b      	ldr	r3, [r3, #20]
 800bd4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bd52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d06b      	beq.n	800be32 <decompress_smooth_data+0x81e>
 800bd5a:	f107 030c 	add.w	r3, r7, #12
 800bd5e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d165      	bne.n	800be32 <decompress_smooth_data+0x81e>
	  num = 9 * Q00 * (DC4 + DC6 - 2*DC5);
 800bd66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bd6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd6e:	441a      	add	r2, r3
 800bd70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd74:	005b      	lsls	r3, r3, #1
 800bd76:	1ad3      	subs	r3, r2, r3
 800bd78:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bd7c:	fb02 f203 	mul.w	r2, r2, r3
 800bd80:	4613      	mov	r3, r2
 800bd82:	00db      	lsls	r3, r3, #3
 800bd84:	4413      	add	r3, r2
 800bd86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  if (num >= 0) {
 800bd8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	db22      	blt.n	800bdd8 <decompress_smooth_data+0x7c4>
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800bd92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bd96:	01da      	lsls	r2, r3, #7
 800bd98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd9c:	441a      	add	r2, r3
 800bd9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bda2:	021b      	lsls	r3, r3, #8
 800bda4:	fb92 f3f3 	sdiv	r3, r2, r3
 800bda8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 800bdac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	dd38      	ble.n	800be26 <decompress_smooth_data+0x812>
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bdba:	fa02 f303 	lsl.w	r3, r2, r3
 800bdbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	db2f      	blt.n	800be26 <decompress_smooth_data+0x812>
	      pred = (1<<Al)-1;
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bdcc:	fa02 f303 	lsl.w	r3, r2, r3
 800bdd0:	3b01      	subs	r3, #1
 800bdd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bdd6:	e026      	b.n	800be26 <decompress_smooth_data+0x812>
	  } else {
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800bdd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bddc:	01da      	lsls	r2, r3, #7
 800bdde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bde2:	1ad2      	subs	r2, r2, r3
 800bde4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bde8:	021b      	lsls	r3, r3, #8
 800bdea:	fb92 f3f3 	sdiv	r3, r2, r3
 800bdee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 800bdf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	dd10      	ble.n	800be1c <decompress_smooth_data+0x808>
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800be00:	fa02 f303 	lsl.w	r3, r2, r3
 800be04:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800be08:	429a      	cmp	r2, r3
 800be0a:	db07      	blt.n	800be1c <decompress_smooth_data+0x808>
	      pred = (1<<Al)-1;
 800be0c:	2201      	movs	r2, #1
 800be0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800be12:	fa02 f303 	lsl.w	r3, r2, r3
 800be16:	3b01      	subs	r3, #1
 800be18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    pred = -pred;
 800be1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800be20:	425b      	negs	r3, r3
 800be22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	  }
	  workspace[2] = (JCOEF) pred;
 800be26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800be2a:	b21a      	sxth	r2, r3
 800be2c:	f107 030c 	add.w	r3, r7, #12
 800be30:	809a      	strh	r2, [r3, #4]
	}
	/* OK, do the IDCT */
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800be32:	f107 020c 	add.w	r2, r7, #12
 800be36:	1d38      	adds	r0, r7, #4
 800be38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be3c:	9300      	str	r3, [sp, #0]
 800be3e:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 800be42:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800be46:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800be4a:	6800      	ldr	r0, [r0, #0]
 800be4c:	47a0      	blx	r4
			output_ptr, output_col);
	/* Advance for next column */
	DC1 = DC2; DC2 = DC3;
 800be4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800be52:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800be56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	DC4 = DC5; DC5 = DC6;
 800be5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800be66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	DC7 = DC8; DC8 = DC9;
 800be6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800be72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800be76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800be7a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	buffer_ptr++, prev_block_row++, next_block_row++;
 800be7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be82:	3380      	adds	r3, #128	; 0x80
 800be84:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800be88:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800be8c:	3380      	adds	r3, #128	; 0x80
 800be8e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800be92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be96:	3380      	adds	r3, #128	; 0x80
 800be98:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	output_col += compptr->DCT_h_scaled_size;
 800be9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea2:	461a      	mov	r2, r3
 800bea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bea8:	4413      	add	r3, r2
 800beaa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800beae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800beb2:	3301      	adds	r3, #1
 800beb4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800beb8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800bebc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bec0:	429a      	cmp	r2, r3
 800bec2:	f67f ad4e 	bls.w	800b962 <decompress_smooth_data+0x34e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
 800bec6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800beca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800bed2:	4413      	add	r3, r2
 800bed4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    for (block_row = 0; block_row < block_rows; block_row++) {
 800bed8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bedc:	3301      	adds	r3, #1
 800bede:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800bee2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800bee6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800beea:	429a      	cmp	r2, r3
 800beec:	f6ff acc6 	blt.w	800b87c <decompress_smooth_data+0x268>
 800bef0:	e000      	b.n	800bef4 <decompress_smooth_data+0x8e0>
      continue;
 800bef2:	bf00      	nop
       ci++, compptr++) {
 800bef4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bef8:	3301      	adds	r3, #1
 800befa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800befe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bf02:	3358      	adds	r3, #88	; 0x58
 800bf04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bf08:	1d3b      	adds	r3, r7, #4
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf0e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800bf12:	429a      	cmp	r2, r3
 800bf14:	f6ff abe1 	blt.w	800b6da <decompress_smooth_data+0xc6>
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800bf18:	1d3b      	adds	r3, r7, #4
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bf20:	1c5a      	adds	r2, r3, #1
 800bf22:	1d3b      	adds	r3, r7, #4
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800bf2a:	1d3b      	adds	r3, r7, #4
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800bf32:	1d3b      	adds	r3, r7, #4
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d201      	bcs.n	800bf42 <decompress_smooth_data+0x92e>
    return JPEG_ROW_COMPLETED;
 800bf3e:	2303      	movs	r3, #3
 800bf40:	e000      	b.n	800bf44 <decompress_smooth_data+0x930>
  return JPEG_SCAN_COMPLETED;
 800bf42:	2304      	movs	r3, #4
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800bf50 <jinit_d_coef_controller>:
 * Initialize coefficient buffer controller.
 */

GLOBAL(void)
jinit_d_coef_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 800bf50:	b5b0      	push	{r4, r5, r7, lr}
 800bf52:	b08a      	sub	sp, #40	; 0x28
 800bf54:	af02      	add	r7, sp, #8
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
  my_coef_ptr coef;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	2274      	movs	r2, #116	; 0x74
 800bf62:	2101      	movs	r1, #1
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	4798      	blx	r3
 800bf68:	60f8      	str	r0, [r7, #12]
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	68fa      	ldr	r2, [r7, #12]
 800bf6e:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  coef->pub.start_input_pass = start_input_pass;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	4a47      	ldr	r2, [pc, #284]	; (800c094 <jinit_d_coef_controller+0x144>)
 800bf76:	601a      	str	r2, [r3, #0]
  coef->pub.start_output_pass = start_output_pass;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	4a47      	ldr	r2, [pc, #284]	; (800c098 <jinit_d_coef_controller+0x148>)
 800bf7c:	609a      	str	r2, [r3, #8]
#ifdef BLOCK_SMOOTHING_SUPPORTED
  coef->coef_bits_latch = NULL;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2200      	movs	r2, #0
 800bf82:	671a      	str	r2, [r3, #112]	; 0x70
#endif

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d051      	beq.n	800c02e <jinit_d_coef_controller+0xde>
    /* padded to a multiple of samp_factor DCT blocks in each direction. */
    /* Note we ask for a pre-zeroed array. */
    int ci, access_rows;
    jpeg_component_info *compptr;

    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	61fb      	str	r3, [r7, #28]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bf94:	617b      	str	r3, [r7, #20]
 800bf96:	e039      	b.n	800c00c <jinit_d_coef_controller+0xbc>
	 ci++, compptr++) {
      access_rows = compptr->v_samp_factor;
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	61bb      	str	r3, [r7, #24]
#ifdef BLOCK_SMOOTHING_SUPPORTED
      /* If block smoothing could be used, need a bigger window */
      if (cinfo->progressive_mode)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d004      	beq.n	800bfb2 <jinit_d_coef_controller+0x62>
	access_rows *= 3;
 800bfa8:	69ba      	ldr	r2, [r7, #24]
 800bfaa:	4613      	mov	r3, r2
 800bfac:	005b      	lsls	r3, r3, #1
 800bfae:	4413      	add	r3, r2
 800bfb0:	61bb      	str	r3, [r7, #24]
#endif
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	695c      	ldr	r4, [r3, #20]
	((j_common_ptr) cinfo, JPOOL_IMAGE, TRUE,
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	69db      	ldr	r3, [r3, #28]
 800bfbc:	461a      	mov	r2, r3
				(long) compptr->h_samp_factor),
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	689b      	ldr	r3, [r3, #8]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	4610      	mov	r0, r2
 800bfc6:	f018 ff33 	bl	8024e30 <jround_up>
 800bfca:	4603      	mov	r3, r0
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800bfcc:	461d      	mov	r5, r3
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	6a1b      	ldr	r3, [r3, #32]
 800bfd2:	461a      	mov	r2, r3
				(long) compptr->v_samp_factor),
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	68db      	ldr	r3, [r3, #12]
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800bfd8:	4619      	mov	r1, r3
 800bfda:	4610      	mov	r0, r2
 800bfdc:	f018 ff28 	bl	8024e30 <jround_up>
 800bfe0:	4603      	mov	r3, r0
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	69bb      	ldr	r3, [r7, #24]
 800bfe6:	9301      	str	r3, [sp, #4]
 800bfe8:	9200      	str	r2, [sp, #0]
 800bfea:	462b      	mov	r3, r5
 800bfec:	2201      	movs	r2, #1
 800bfee:	2101      	movs	r1, #1
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	47a0      	blx	r4
 800bff4:	4601      	mov	r1, r0
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	69fa      	ldr	r2, [r7, #28]
 800bffa:	3212      	adds	r2, #18
 800bffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 ci++, compptr++) {
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	3301      	adds	r3, #1
 800c004:	61fb      	str	r3, [r7, #28]
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	3358      	adds	r3, #88	; 0x58
 800c00a:	617b      	str	r3, [r7, #20]
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c010:	69fa      	ldr	r2, [r7, #28]
 800c012:	429a      	cmp	r2, r3
 800c014:	dbc0      	blt.n	800bf98 <jinit_d_coef_controller+0x48>
	 (JDIMENSION) access_rows);
    }
    coef->pub.consume_data = consume_data;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	4a20      	ldr	r2, [pc, #128]	; (800c09c <jinit_d_coef_controller+0x14c>)
 800c01a:	605a      	str	r2, [r3, #4]
    coef->pub.decompress_data = decompress_data;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	4a20      	ldr	r2, [pc, #128]	; (800c0a0 <jinit_d_coef_controller+0x150>)
 800c020:	60da      	str	r2, [r3, #12]
    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	611a      	str	r2, [r3, #16]
	       (size_t) (D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK)));
    coef->pub.consume_data = dummy_consume_data;
    coef->pub.decompress_data = decompress_onepass;
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
  }
}
 800c02c:	e02e      	b.n	800c08c <jinit_d_coef_controller+0x13c>
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800c038:	2101      	movs	r1, #1
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	4798      	blx	r3
 800c03e:	60b8      	str	r0, [r7, #8]
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800c040:	2300      	movs	r3, #0
 800c042:	613b      	str	r3, [r7, #16]
 800c044:	e00b      	b.n	800c05e <jinit_d_coef_controller+0x10e>
      coef->MCU_buffer[i] = buffer + i;
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	01db      	lsls	r3, r3, #7
 800c04a:	68ba      	ldr	r2, [r7, #8]
 800c04c:	18d1      	adds	r1, r2, r3
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	693a      	ldr	r2, [r7, #16]
 800c052:	3208      	adds	r2, #8
 800c054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	3301      	adds	r3, #1
 800c05c:	613b      	str	r3, [r7, #16]
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	2b09      	cmp	r3, #9
 800c062:	ddf0      	ble.n	800c046 <jinit_d_coef_controller+0xf6>
    if (cinfo->lim_Se == 0)	/* DC only case: want to bypass later */
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d105      	bne.n	800c07a <jinit_d_coef_controller+0x12a>
      FMEMZERO((void FAR *) buffer,
 800c06e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800c072:	2100      	movs	r1, #0
 800c074:	68b8      	ldr	r0, [r7, #8]
 800c076:	f018 ff77 	bl	8024f68 <memset>
    coef->pub.consume_data = dummy_consume_data;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	4a09      	ldr	r2, [pc, #36]	; (800c0a4 <jinit_d_coef_controller+0x154>)
 800c07e:	605a      	str	r2, [r3, #4]
    coef->pub.decompress_data = decompress_onepass;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	4a09      	ldr	r2, [pc, #36]	; (800c0a8 <jinit_d_coef_controller+0x158>)
 800c084:	60da      	str	r2, [r3, #12]
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2200      	movs	r2, #0
 800c08a:	611a      	str	r2, [r3, #16]
}
 800c08c:	bf00      	nop
 800c08e:	3720      	adds	r7, #32
 800c090:	46bd      	mov	sp, r7
 800c092:	bdb0      	pop	{r4, r5, r7, pc}
 800c094:	0800af07 	.word	0x0800af07
 800c098:	0800af25 	.word	0x0800af25
 800c09c:	0800b195 	.word	0x0800b195
 800c0a0:	0800b345 	.word	0x0800b345
 800c0a4:	0800b17f 	.word	0x0800b17f
 800c0a8:	0800af79 	.word	0x0800af79

0800c0ac <build_ycc_rgb_table>:
 * Initialize tables for YCC->RGB colorspace conversion.
 */

LOCAL(void)
build_ycc_rgb_table (j_decompress_ptr cinfo)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b086      	sub	sp, #24
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800c0ba:	60fb      	str	r3, [r7, #12]
  int i;
  INT32 x;
  SHIFT_TEMPS

  cconvert->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c0c6:	2101      	movs	r1, #1
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	4798      	blx	r3
 800c0cc:	4602      	mov	r2, r0
  cconvert->Cr_r_tab = (int *)
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	609a      	str	r2, [r3, #8]
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c0dc:	2101      	movs	r1, #1
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	4798      	blx	r3
 800c0e2:	4602      	mov	r2, r0
  cconvert->Cb_b_tab = (int *)
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	60da      	str	r2, [r3, #12]
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	685b      	ldr	r3, [r3, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c0f2:	2101      	movs	r1, #1
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	4798      	blx	r3
 800c0f8:	4602      	mov	r2, r0
  cconvert->Cr_g_tab = (INT32 *)
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	611a      	str	r2, [r3, #16]
				(MAXJSAMPLE+1) * SIZEOF(INT32));
  cconvert->Cb_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c108:	2101      	movs	r1, #1
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	4798      	blx	r3
 800c10e:	4602      	mov	r2, r0
  cconvert->Cb_g_tab = (INT32 *)
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	615a      	str	r2, [r3, #20]
				(MAXJSAMPLE+1) * SIZEOF(INT32));

  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800c114:	2300      	movs	r3, #0
 800c116:	617b      	str	r3, [r7, #20]
 800c118:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800c11c:	613b      	str	r3, [r7, #16]
 800c11e:	e035      	b.n	800c18c <build_ycc_rgb_table+0xe0>
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    cconvert->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	4a1e      	ldr	r2, [pc, #120]	; (800c19c <build_ycc_rgb_table+0xf0>)
 800c124:	fb02 f303 	mul.w	r3, r2, r3
 800c128:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
    cconvert->Cr_r_tab[i] = (int)
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	6899      	ldr	r1, [r3, #8]
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	440b      	add	r3, r1
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800c136:	1412      	asrs	r2, r2, #16
    cconvert->Cr_r_tab[i] = (int)
 800c138:	601a      	str	r2, [r3, #0]
    /* Cb=>B value is nearest int to 1.77200 * x */
    cconvert->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	4a18      	ldr	r2, [pc, #96]	; (800c1a0 <build_ycc_rgb_table+0xf4>)
 800c13e:	fb02 f303 	mul.w	r3, r2, r3
 800c142:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
    cconvert->Cb_b_tab[i] = (int)
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	68d9      	ldr	r1, [r3, #12]
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	009b      	lsls	r3, r3, #2
 800c14e:	440b      	add	r3, r1
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800c150:	1412      	asrs	r2, r2, #16
    cconvert->Cb_b_tab[i] = (int)
 800c152:	601a      	str	r2, [r3, #0]
    /* Cr=>G value is scaled-up -0.71414 * x */
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	691a      	ldr	r2, [r3, #16]
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	4413      	add	r3, r2
 800c15e:	693a      	ldr	r2, [r7, #16]
 800c160:	4910      	ldr	r1, [pc, #64]	; (800c1a4 <build_ycc_rgb_table+0xf8>)
 800c162:	fb01 f202 	mul.w	r2, r1, r2
 800c166:	601a      	str	r2, [r3, #0]
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	4a0f      	ldr	r2, [pc, #60]	; (800c1a8 <build_ycc_rgb_table+0xfc>)
 800c16c:	fb02 f203 	mul.w	r2, r2, r3
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	6959      	ldr	r1, [r3, #20]
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	009b      	lsls	r3, r3, #2
 800c178:	440b      	add	r3, r1
 800c17a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800c17e:	601a      	str	r2, [r3, #0]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	3301      	adds	r3, #1
 800c184:	617b      	str	r3, [r7, #20]
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	3301      	adds	r3, #1
 800c18a:	613b      	str	r3, [r7, #16]
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	2bff      	cmp	r3, #255	; 0xff
 800c190:	ddc6      	ble.n	800c120 <build_ycc_rgb_table+0x74>
  }
}
 800c192:	bf00      	nop
 800c194:	bf00      	nop
 800c196:	3718      	adds	r7, #24
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	000166e9 	.word	0x000166e9
 800c1a0:	0001c5a2 	.word	0x0001c5a2
 800c1a4:	ffff492e 	.word	0xffff492e
 800c1a8:	ffffa7e6 	.word	0xffffa7e6

0800c1ac <ycc_rgb_convert>:

METHODDEF(void)
ycc_rgb_convert (j_decompress_ptr cinfo,
		 JSAMPIMAGE input_buf, JDIMENSION input_row,
		 JSAMPARRAY output_buf, int num_rows)
{
 800c1ac:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800c1b0:	b08d      	sub	sp, #52	; 0x34
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6278      	str	r0, [r7, #36]	; 0x24
 800c1b6:	6239      	str	r1, [r7, #32]
 800c1b8:	61fa      	str	r2, [r7, #28]
 800c1ba:	61bb      	str	r3, [r7, #24]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800c1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1be:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800c1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800c1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1c8:	62bb      	str	r3, [r7, #40]	; 0x28
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800c1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1cc:	f8d3 614c 	ldr.w	r6, [r3, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
 800c1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	4618      	mov	r0, r3
  register int * Cbbtab = cconvert->Cb_b_tab;
 800c1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	617b      	str	r3, [r7, #20]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800c1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1de:	691b      	ldr	r3, [r3, #16]
 800c1e0:	613b      	str	r3, [r7, #16]
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800c1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e4:	695b      	ldr	r3, [r3, #20]
 800c1e6:	60fb      	str	r3, [r7, #12]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800c1e8:	e054      	b.n	800c294 <ycc_rgb_convert+0xe8>
    inptr0 = input_buf[0][input_row];
 800c1ea:	6a3b      	ldr	r3, [r7, #32]
 800c1ec:	681a      	ldr	r2, [r3, #0]
 800c1ee:	69fb      	ldr	r3, [r7, #28]
 800c1f0:	009b      	lsls	r3, r3, #2
 800c1f2:	4413      	add	r3, r2
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	60bb      	str	r3, [r7, #8]
    inptr1 = input_buf[1][input_row];
 800c1f8:	6a3b      	ldr	r3, [r7, #32]
 800c1fa:	3304      	adds	r3, #4
 800c1fc:	681a      	ldr	r2, [r3, #0]
 800c1fe:	69fb      	ldr	r3, [r7, #28]
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	4413      	add	r3, r2
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	607b      	str	r3, [r7, #4]
    inptr2 = input_buf[2][input_row];
 800c208:	6a3b      	ldr	r3, [r7, #32]
 800c20a:	3308      	adds	r3, #8
 800c20c:	681a      	ldr	r2, [r3, #0]
 800c20e:	69fb      	ldr	r3, [r7, #28]
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	4413      	add	r3, r2
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	603b      	str	r3, [r7, #0]
    input_row++;
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	3301      	adds	r3, #1
 800c21c:	61fb      	str	r3, [r7, #28]
    outptr = *output_buf++;
 800c21e:	69bb      	ldr	r3, [r7, #24]
 800c220:	1d1a      	adds	r2, r3, #4
 800c222:	61ba      	str	r2, [r7, #24]
 800c224:	681d      	ldr	r5, [r3, #0]
    for (col = 0; col < num_cols; col++) {
 800c226:	2400      	movs	r4, #0
 800c228:	e031      	b.n	800c28e <ycc_rgb_convert+0xe2>
      y  = GETJSAMPLE(inptr0[col]);
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	4423      	add	r3, r4
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	4698      	mov	r8, r3
      cb = GETJSAMPLE(inptr1[col]);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	4423      	add	r3, r4
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	469a      	mov	sl, r3
      cr = GETJSAMPLE(inptr2[col]);
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	4423      	add	r3, r4
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	4699      	mov	r9, r3
      /* Range-limiting is essential due to noise introduced by DCT losses. */
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800c242:	464b      	mov	r3, r9
 800c244:	009b      	lsls	r3, r3, #2
 800c246:	4602      	mov	r2, r0
 800c248:	4413      	add	r3, r2
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4443      	add	r3, r8
 800c24e:	4433      	add	r3, r6
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	702b      	strb	r3, [r5, #0]
      outptr[RGB_GREEN] = range_limit[y +
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800c254:	4653      	mov	r3, sl
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	68fa      	ldr	r2, [r7, #12]
 800c25a:	4413      	add	r3, r2
 800c25c:	681a      	ldr	r2, [r3, #0]
 800c25e:	464b      	mov	r3, r9
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	6939      	ldr	r1, [r7, #16]
 800c264:	440b      	add	r3, r1
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4413      	add	r3, r2
 800c26a:	141b      	asrs	r3, r3, #16
      outptr[RGB_GREEN] = range_limit[y +
 800c26c:	4443      	add	r3, r8
 800c26e:	4433      	add	r3, r6
 800c270:	1c6a      	adds	r2, r5, #1
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	7013      	strb	r3, [r2, #0]
						 SCALEBITS))];
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800c276:	4653      	mov	r3, sl
 800c278:	009b      	lsls	r3, r3, #2
 800c27a:	697a      	ldr	r2, [r7, #20]
 800c27c:	4413      	add	r3, r2
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4443      	add	r3, r8
 800c282:	18f2      	adds	r2, r6, r3
 800c284:	1cab      	adds	r3, r5, #2
 800c286:	7812      	ldrb	r2, [r2, #0]
 800c288:	701a      	strb	r2, [r3, #0]
      outptr += RGB_PIXELSIZE;
 800c28a:	3503      	adds	r5, #3
    for (col = 0; col < num_cols; col++) {
 800c28c:	3401      	adds	r4, #1
 800c28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c290:	429c      	cmp	r4, r3
 800c292:	d3ca      	bcc.n	800c22a <ycc_rgb_convert+0x7e>
  while (--num_rows >= 0) {
 800c294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c296:	3b01      	subs	r3, #1
 800c298:	653b      	str	r3, [r7, #80]	; 0x50
 800c29a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	daa4      	bge.n	800c1ea <ycc_rgb_convert+0x3e>
    }
  }
}
 800c2a0:	bf00      	nop
 800c2a2:	bf00      	nop
 800c2a4:	3734      	adds	r7, #52	; 0x34
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800c2ac:	4770      	bx	lr

0800c2ae <build_rgb_y_table>:
 * Initialize for RGB->grayscale colorspace conversion.
 */

LOCAL(void)
build_rgb_y_table (j_decompress_ptr cinfo)
{
 800c2ae:	b580      	push	{r7, lr}
 800c2b0:	b086      	sub	sp, #24
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	6078      	str	r0, [r7, #4]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800c2bc:	613b      	str	r3, [r7, #16]
  INT32 * rgb_y_tab;
  INT32 i;

  /* Allocate and fill in the conversion tables. */
  cconvert->rgb_y_tab = rgb_y_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800c2c8:	2101      	movs	r1, #1
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	4798      	blx	r3
 800c2ce:	60f8      	str	r0, [r7, #12]
  cconvert->rgb_y_tab = rgb_y_tab = (INT32 *)
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	68fa      	ldr	r2, [r7, #12]
 800c2d4:	619a      	str	r2, [r3, #24]
				(TABLE_SIZE * SIZEOF(INT32)));

  for (i = 0; i <= MAXJSAMPLE; i++) {
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	617b      	str	r3, [r7, #20]
 800c2da:	e026      	b.n	800c32a <build_rgb_y_table+0x7c>
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	009b      	lsls	r3, r3, #2
 800c2e0:	68fa      	ldr	r2, [r7, #12]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	697a      	ldr	r2, [r7, #20]
 800c2e6:	f644 418b 	movw	r1, #19595	; 0x4c8b
 800c2ea:	fb01 f202 	mul.w	r2, r1, r2
 800c2ee:	601a      	str	r2, [r3, #0]
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c2f6:	009b      	lsls	r3, r3, #2
 800c2f8:	68fa      	ldr	r2, [r7, #12]
 800c2fa:	4413      	add	r3, r2
 800c2fc:	697a      	ldr	r2, [r7, #20]
 800c2fe:	f249 6146 	movw	r1, #38470	; 0x9646
 800c302:	fb01 f202 	mul.w	r2, r1, r2
 800c306:	601a      	str	r2, [r3, #0]
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	f641 522f 	movw	r2, #7471	; 0x1d2f
 800c30e:	fb02 f203 	mul.w	r2, r2, r3
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c318:	009b      	lsls	r3, r3, #2
 800c31a:	68f9      	ldr	r1, [r7, #12]
 800c31c:	440b      	add	r3, r1
 800c31e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800c322:	601a      	str	r2, [r3, #0]
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	3301      	adds	r3, #1
 800c328:	617b      	str	r3, [r7, #20]
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	2bff      	cmp	r3, #255	; 0xff
 800c32e:	ddd5      	ble.n	800c2dc <build_rgb_y_table+0x2e>
  }
}
 800c330:	bf00      	nop
 800c332:	bf00      	nop
 800c334:	3718      	adds	r7, #24
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}

0800c33a <rgb_gray_convert>:

METHODDEF(void)
rgb_gray_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800c33a:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800c33e:	b089      	sub	sp, #36	; 0x24
 800c340:	af00      	add	r7, sp, #0
 800c342:	6178      	str	r0, [r7, #20]
 800c344:	6139      	str	r1, [r7, #16]
 800c346:	60fa      	str	r2, [r7, #12]
 800c348:	60bb      	str	r3, [r7, #8]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800c350:	61fb      	str	r3, [r7, #28]
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_y_tab;
 800c352:	69fb      	ldr	r3, [r7, #28]
 800c354:	699d      	ldr	r5, [r3, #24]
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c35a:	61bb      	str	r3, [r7, #24]

  while (--num_rows >= 0) {
 800c35c:	e045      	b.n	800c3ea <rgb_gray_convert+0xb0>
    inptr0 = input_buf[0][input_row];
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	681a      	ldr	r2, [r3, #0]
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	009b      	lsls	r3, r3, #2
 800c366:	4413      	add	r3, r2
 800c368:	681e      	ldr	r6, [r3, #0]
    inptr1 = input_buf[1][input_row];
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	3304      	adds	r3, #4
 800c36e:	681a      	ldr	r2, [r3, #0]
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	009b      	lsls	r3, r3, #2
 800c374:	4413      	add	r3, r2
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4619      	mov	r1, r3
    inptr2 = input_buf[2][input_row];
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	3308      	adds	r3, #8
 800c37e:	681a      	ldr	r2, [r3, #0]
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	4413      	add	r3, r2
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4618      	mov	r0, r3
    input_row++;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	3301      	adds	r3, #1
 800c38e:	60fb      	str	r3, [r7, #12]
    outptr = *output_buf++;
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	1d1a      	adds	r2, r3, #4
 800c394:	60ba      	str	r2, [r7, #8]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	607b      	str	r3, [r7, #4]
    for (col = 0; col < num_cols; col++) {
 800c39a:	2400      	movs	r4, #0
 800c39c:	e022      	b.n	800c3e4 <rgb_gray_convert+0xaa>
      r = GETJSAMPLE(inptr0[col]);
 800c39e:	1933      	adds	r3, r6, r4
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	469a      	mov	sl, r3
      g = GETJSAMPLE(inptr1[col]);
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	4423      	add	r3, r4
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	4699      	mov	r9, r3
      b = GETJSAMPLE(inptr2[col]);
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	4423      	add	r3, r4
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	4698      	mov	r8, r3
      /* Y */
      outptr[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 800c3b4:	4653      	mov	r3, sl
 800c3b6:	009b      	lsls	r3, r3, #2
 800c3b8:	442b      	add	r3, r5
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	464b      	mov	r3, r9
 800c3be:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c3c2:	009b      	lsls	r3, r3, #2
 800c3c4:	442b      	add	r3, r5
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	441a      	add	r2, r3
 800c3ca:	4643      	mov	r3, r8
 800c3cc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c3d0:	009b      	lsls	r3, r3, #2
 800c3d2:	442b      	add	r3, r5
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	4413      	add	r3, r2
		 >> SCALEBITS);
 800c3d8:	141a      	asrs	r2, r3, #16
      outptr[col] = (JSAMPLE)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	4423      	add	r3, r4
 800c3de:	b2d2      	uxtb	r2, r2
 800c3e0:	701a      	strb	r2, [r3, #0]
    for (col = 0; col < num_cols; col++) {
 800c3e2:	3401      	adds	r4, #1
 800c3e4:	69bb      	ldr	r3, [r7, #24]
 800c3e6:	429c      	cmp	r4, r3
 800c3e8:	d3d9      	bcc.n	800c39e <rgb_gray_convert+0x64>
  while (--num_rows >= 0) {
 800c3ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3ec:	3b01      	subs	r3, #1
 800c3ee:	643b      	str	r3, [r7, #64]	; 0x40
 800c3f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	dab3      	bge.n	800c35e <rgb_gray_convert+0x24>
    }
  }
}
 800c3f6:	bf00      	nop
 800c3f8:	bf00      	nop
 800c3fa:	3724      	adds	r7, #36	; 0x24
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800c402:	4770      	bx	lr

0800c404 <rgb_convert>:

METHODDEF(void)
rgb_convert (j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION input_row,
	     JSAMPARRAY output_buf, int num_rows)
{
 800c404:	b4f0      	push	{r4, r5, r6, r7}
 800c406:	b086      	sub	sp, #24
 800c408:	af00      	add	r7, sp, #0
 800c40a:	60f8      	str	r0, [r7, #12]
 800c40c:	60b9      	str	r1, [r7, #8]
 800c40e:	607a      	str	r2, [r7, #4]
 800c410:	603b      	str	r3, [r7, #0]
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c416:	617b      	str	r3, [r7, #20]

  while (--num_rows >= 0) {
 800c418:	e030      	b.n	800c47c <rgb_convert+0x78>
    inptr0 = input_buf[0][input_row];
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	681a      	ldr	r2, [r3, #0]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	009b      	lsls	r3, r3, #2
 800c422:	4413      	add	r3, r2
 800c424:	681e      	ldr	r6, [r3, #0]
    inptr1 = input_buf[1][input_row];
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	3304      	adds	r3, #4
 800c42a:	681a      	ldr	r2, [r3, #0]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	009b      	lsls	r3, r3, #2
 800c430:	4413      	add	r3, r2
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	4619      	mov	r1, r3
    inptr2 = input_buf[2][input_row];
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	3308      	adds	r3, #8
 800c43a:	681a      	ldr	r2, [r3, #0]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	009b      	lsls	r3, r3, #2
 800c440:	4413      	add	r3, r2
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4618      	mov	r0, r3
    input_row++;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	3301      	adds	r3, #1
 800c44a:	607b      	str	r3, [r7, #4]
    outptr = *output_buf++;
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	1d1a      	adds	r2, r3, #4
 800c450:	603a      	str	r2, [r7, #0]
 800c452:	681d      	ldr	r5, [r3, #0]
    for (col = 0; col < num_cols; col++) {
 800c454:	2400      	movs	r4, #0
 800c456:	e00e      	b.n	800c476 <rgb_convert+0x72>
      /* We can dispense with GETJSAMPLE() here */
      outptr[RGB_RED]   = inptr0[col];
 800c458:	1933      	adds	r3, r6, r4
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	702b      	strb	r3, [r5, #0]
      outptr[RGB_GREEN] = inptr1[col];
 800c45e:	460b      	mov	r3, r1
 800c460:	191a      	adds	r2, r3, r4
 800c462:	1c6b      	adds	r3, r5, #1
 800c464:	7812      	ldrb	r2, [r2, #0]
 800c466:	701a      	strb	r2, [r3, #0]
      outptr[RGB_BLUE]  = inptr2[col];
 800c468:	4603      	mov	r3, r0
 800c46a:	191a      	adds	r2, r3, r4
 800c46c:	1cab      	adds	r3, r5, #2
 800c46e:	7812      	ldrb	r2, [r2, #0]
 800c470:	701a      	strb	r2, [r3, #0]
      outptr += RGB_PIXELSIZE;
 800c472:	3503      	adds	r5, #3
    for (col = 0; col < num_cols; col++) {
 800c474:	3401      	adds	r4, #1
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	429c      	cmp	r4, r3
 800c47a:	d3ed      	bcc.n	800c458 <rgb_convert+0x54>
  while (--num_rows >= 0) {
 800c47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c47e:	3b01      	subs	r3, #1
 800c480:	62bb      	str	r3, [r7, #40]	; 0x28
 800c482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c484:	2b00      	cmp	r3, #0
 800c486:	dac8      	bge.n	800c41a <rgb_convert+0x16>
    }
  }
}
 800c488:	bf00      	nop
 800c48a:	bf00      	nop
 800c48c:	3718      	adds	r7, #24
 800c48e:	46bd      	mov	sp, r7
 800c490:	bcf0      	pop	{r4, r5, r6, r7}
 800c492:	4770      	bx	lr

0800c494 <null_convert>:

METHODDEF(void)
null_convert (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION input_row,
	      JSAMPARRAY output_buf, int num_rows)
{
 800c494:	b4f0      	push	{r4, r5, r6, r7}
 800c496:	b086      	sub	sp, #24
 800c498:	af00      	add	r7, sp, #0
 800c49a:	60f8      	str	r0, [r7, #12]
 800c49c:	60b9      	str	r1, [r7, #8]
 800c49e:	607a      	str	r2, [r7, #4]
 800c4a0:	603b      	str	r3, [r7, #0]
  register JSAMPROW inptr, outptr;
  register JDIMENSION count;
  register int num_components = cinfo->num_components;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	6a5e      	ldr	r6, [r3, #36]	; 0x24
  JDIMENSION num_cols = cinfo->output_width;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4aa:	613b      	str	r3, [r7, #16]
  int ci;

  while (--num_rows >= 0) {
 800c4ac:	e028      	b.n	800c500 <null_convert+0x6c>
    for (ci = 0; ci < num_components; ci++) {
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	617b      	str	r3, [r7, #20]
 800c4b2:	e01c      	b.n	800c4ee <null_convert+0x5a>
      inptr = input_buf[ci][input_row];
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	68ba      	ldr	r2, [r7, #8]
 800c4ba:	4413      	add	r3, r2
 800c4bc:	681a      	ldr	r2, [r3, #0]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	4413      	add	r3, r2
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4619      	mov	r1, r3
      outptr = output_buf[0] + ci;
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	681a      	ldr	r2, [r3, #0]
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	18d5      	adds	r5, r2, r3
      for (count = num_cols; count > 0; count--) {
 800c4d0:	693c      	ldr	r4, [r7, #16]
 800c4d2:	e007      	b.n	800c4e4 <null_convert+0x50>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	1c5a      	adds	r2, r3, #1
 800c4d8:	4611      	mov	r1, r2
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	702b      	strb	r3, [r5, #0]
	outptr += num_components;
 800c4de:	4633      	mov	r3, r6
 800c4e0:	441d      	add	r5, r3
      for (count = num_cols; count > 0; count--) {
 800c4e2:	3c01      	subs	r4, #1
 800c4e4:	2c00      	cmp	r4, #0
 800c4e6:	d1f5      	bne.n	800c4d4 <null_convert+0x40>
    for (ci = 0; ci < num_components; ci++) {
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	3301      	adds	r3, #1
 800c4ec:	617b      	str	r3, [r7, #20]
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	42b3      	cmp	r3, r6
 800c4f2:	dbdf      	blt.n	800c4b4 <null_convert+0x20>
      }
    }
    input_row++;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	607b      	str	r3, [r7, #4]
    output_buf++;
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	3304      	adds	r3, #4
 800c4fe:	603b      	str	r3, [r7, #0]
  while (--num_rows >= 0) {
 800c500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c502:	3b01      	subs	r3, #1
 800c504:	62bb      	str	r3, [r7, #40]	; 0x28
 800c506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c508:	2b00      	cmp	r3, #0
 800c50a:	dad0      	bge.n	800c4ae <null_convert+0x1a>
  }
}
 800c50c:	bf00      	nop
 800c50e:	bf00      	nop
 800c510:	3718      	adds	r7, #24
 800c512:	46bd      	mov	sp, r7
 800c514:	bcf0      	pop	{r4, r5, r6, r7}
 800c516:	4770      	bx	lr

0800c518 <grayscale_convert>:

METHODDEF(void)
grayscale_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b086      	sub	sp, #24
 800c51c:	af02      	add	r7, sp, #8
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	60b9      	str	r1, [r7, #8]
 800c522:	607a      	str	r2, [r7, #4]
 800c524:	603b      	str	r3, [r7, #0]
  jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	6818      	ldr	r0, [r3, #0]
 800c52a:	6879      	ldr	r1, [r7, #4]
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c530:	9301      	str	r3, [sp, #4]
 800c532:	69bb      	ldr	r3, [r7, #24]
 800c534:	9300      	str	r3, [sp, #0]
 800c536:	2300      	movs	r3, #0
 800c538:	683a      	ldr	r2, [r7, #0]
 800c53a:	f018 fc93 	bl	8024e64 <jcopy_sample_rows>
		    num_rows, cinfo->output_width);
}
 800c53e:	bf00      	nop
 800c540:	3710      	adds	r7, #16
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <gray_rgb_convert>:

METHODDEF(void)
gray_rgb_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800c546:	b4f0      	push	{r4, r5, r6, r7}
 800c548:	b086      	sub	sp, #24
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	60f8      	str	r0, [r7, #12]
 800c54e:	60b9      	str	r1, [r7, #8]
 800c550:	607a      	str	r2, [r7, #4]
 800c552:	603b      	str	r3, [r7, #0]
  register JSAMPROW inptr, outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c558:	617b      	str	r3, [r7, #20]

  while (--num_rows >= 0) {
 800c55a:	e01b      	b.n	800c594 <gray_rgb_convert+0x4e>
    inptr = input_buf[0][input_row++];
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	1c59      	adds	r1, r3, #1
 800c564:	6079      	str	r1, [r7, #4]
 800c566:	009b      	lsls	r3, r3, #2
 800c568:	4413      	add	r3, r2
 800c56a:	681e      	ldr	r6, [r3, #0]
    outptr = *output_buf++;
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	1d1a      	adds	r2, r3, #4
 800c570:	603a      	str	r2, [r7, #0]
 800c572:	681c      	ldr	r4, [r3, #0]
    for (col = 0; col < num_cols; col++) {
 800c574:	2500      	movs	r5, #0
 800c576:	e00a      	b.n	800c58e <gray_rgb_convert+0x48>
      /* We can dispense with GETJSAMPLE() here */
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
 800c578:	1973      	adds	r3, r6, r5
 800c57a:	1ca2      	adds	r2, r4, #2
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	7013      	strb	r3, [r2, #0]
 800c580:	1c63      	adds	r3, r4, #1
 800c582:	7812      	ldrb	r2, [r2, #0]
 800c584:	701a      	strb	r2, [r3, #0]
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	7023      	strb	r3, [r4, #0]
      outptr += RGB_PIXELSIZE;
 800c58a:	3403      	adds	r4, #3
    for (col = 0; col < num_cols; col++) {
 800c58c:	3501      	adds	r5, #1
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	429d      	cmp	r5, r3
 800c592:	d3f1      	bcc.n	800c578 <gray_rgb_convert+0x32>
  while (--num_rows >= 0) {
 800c594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c596:	3b01      	subs	r3, #1
 800c598:	62bb      	str	r3, [r7, #40]	; 0x28
 800c59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	dadd      	bge.n	800c55c <gray_rgb_convert+0x16>
    }
  }
}
 800c5a0:	bf00      	nop
 800c5a2:	bf00      	nop
 800c5a4:	3718      	adds	r7, #24
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bcf0      	pop	{r4, r5, r6, r7}
 800c5aa:	4770      	bx	lr

0800c5ac <ycck_cmyk_convert>:

METHODDEF(void)
ycck_cmyk_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
 800c5ac:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800c5b0:	b08f      	sub	sp, #60	; 0x3c
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c5b6:	62b9      	str	r1, [r7, #40]	; 0x28
 800c5b8:	627a      	str	r2, [r7, #36]	; 0x24
 800c5ba:	623b      	str	r3, [r7, #32]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800c5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5be:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800c5c2:	637b      	str	r3, [r7, #52]	; 0x34
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800c5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5c8:	633b      	str	r3, [r7, #48]	; 0x30
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800c5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5cc:	f8d3 614c 	ldr.w	r6, [r3, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
 800c5d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5d2:	689b      	ldr	r3, [r3, #8]
 800c5d4:	4618      	mov	r0, r3
  register int * Cbbtab = cconvert->Cb_b_tab;
 800c5d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5d8:	68db      	ldr	r3, [r3, #12]
 800c5da:	61fb      	str	r3, [r7, #28]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800c5dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5de:	691b      	ldr	r3, [r3, #16]
 800c5e0:	61bb      	str	r3, [r7, #24]
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800c5e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5e4:	695b      	ldr	r3, [r3, #20]
 800c5e6:	617b      	str	r3, [r7, #20]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800c5e8:	e067      	b.n	800c6ba <ycck_cmyk_convert+0x10e>
    inptr0 = input_buf[0][input_row];
 800c5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ec:	681a      	ldr	r2, [r3, #0]
 800c5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	4413      	add	r3, r2
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	613b      	str	r3, [r7, #16]
    inptr1 = input_buf[1][input_row];
 800c5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5fa:	3304      	adds	r3, #4
 800c5fc:	681a      	ldr	r2, [r3, #0]
 800c5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c600:	009b      	lsls	r3, r3, #2
 800c602:	4413      	add	r3, r2
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	60fb      	str	r3, [r7, #12]
    inptr2 = input_buf[2][input_row];
 800c608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60a:	3308      	adds	r3, #8
 800c60c:	681a      	ldr	r2, [r3, #0]
 800c60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c610:	009b      	lsls	r3, r3, #2
 800c612:	4413      	add	r3, r2
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	60bb      	str	r3, [r7, #8]
    inptr3 = input_buf[3][input_row];
 800c618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c61a:	330c      	adds	r3, #12
 800c61c:	681a      	ldr	r2, [r3, #0]
 800c61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	4413      	add	r3, r2
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	607b      	str	r3, [r7, #4]
    input_row++;
 800c628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62a:	3301      	adds	r3, #1
 800c62c:	627b      	str	r3, [r7, #36]	; 0x24
    outptr = *output_buf++;
 800c62e:	6a3b      	ldr	r3, [r7, #32]
 800c630:	1d1a      	adds	r2, r3, #4
 800c632:	623a      	str	r2, [r7, #32]
 800c634:	681d      	ldr	r5, [r3, #0]
    for (col = 0; col < num_cols; col++) {
 800c636:	2400      	movs	r4, #0
 800c638:	e03c      	b.n	800c6b4 <ycck_cmyk_convert+0x108>
      y  = GETJSAMPLE(inptr0[col]);
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	4423      	add	r3, r4
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	4698      	mov	r8, r3
      cb = GETJSAMPLE(inptr1[col]);
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	4423      	add	r3, r4
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	469a      	mov	sl, r3
      cr = GETJSAMPLE(inptr2[col]);
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	4423      	add	r3, r4
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	4699      	mov	r9, r3
      /* Range-limiting is essential due to noise introduced by DCT losses. */
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800c652:	464b      	mov	r3, r9
 800c654:	009b      	lsls	r3, r3, #2
 800c656:	4602      	mov	r2, r0
 800c658:	4413      	add	r3, r2
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4443      	add	r3, r8
 800c65e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800c662:	4433      	add	r3, r6
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	702b      	strb	r3, [r5, #0]
      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800c668:	4653      	mov	r3, sl
 800c66a:	009b      	lsls	r3, r3, #2
 800c66c:	697a      	ldr	r2, [r7, #20]
 800c66e:	4413      	add	r3, r2
 800c670:	681a      	ldr	r2, [r3, #0]
 800c672:	464b      	mov	r3, r9
 800c674:	009b      	lsls	r3, r3, #2
 800c676:	69b9      	ldr	r1, [r7, #24]
 800c678:	440b      	add	r3, r1
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	4413      	add	r3, r2
 800c67e:	141b      	asrs	r3, r3, #16
      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
 800c680:	4443      	add	r3, r8
 800c682:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800c686:	4433      	add	r3, r6
 800c688:	1c6a      	adds	r2, r5, #1
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	7013      	strb	r3, [r2, #0]
						 SCALEBITS)))];
      outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
 800c68e:	4653      	mov	r3, sl
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	69fa      	ldr	r2, [r7, #28]
 800c694:	4413      	add	r3, r2
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4443      	add	r3, r8
 800c69a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800c69e:	18f2      	adds	r2, r6, r3
 800c6a0:	1cab      	adds	r3, r5, #2
 800c6a2:	7812      	ldrb	r2, [r2, #0]
 800c6a4:	701a      	strb	r2, [r3, #0]
      /* K passes through unchanged */
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	191a      	adds	r2, r3, r4
 800c6aa:	1ceb      	adds	r3, r5, #3
 800c6ac:	7812      	ldrb	r2, [r2, #0]
 800c6ae:	701a      	strb	r2, [r3, #0]
      outptr += 4;
 800c6b0:	3504      	adds	r5, #4
    for (col = 0; col < num_cols; col++) {
 800c6b2:	3401      	adds	r4, #1
 800c6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b6:	429c      	cmp	r4, r3
 800c6b8:	d3bf      	bcc.n	800c63a <ycck_cmyk_convert+0x8e>
  while (--num_rows >= 0) {
 800c6ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c6bc:	3b01      	subs	r3, #1
 800c6be:	65bb      	str	r3, [r7, #88]	; 0x58
 800c6c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	da91      	bge.n	800c5ea <ycck_cmyk_convert+0x3e>
    }
  }
}
 800c6c6:	bf00      	nop
 800c6c8:	bf00      	nop
 800c6ca:	373c      	adds	r7, #60	; 0x3c
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800c6d2:	4770      	bx	lr

0800c6d4 <start_pass_dcolor>:
 * Empty method for start_pass.
 */

METHODDEF(void)
start_pass_dcolor (j_decompress_ptr cinfo)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  /* no work needed */
}
 800c6dc:	bf00      	nop
 800c6de:	370c      	adds	r7, #12
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr

0800c6e8 <jinit_color_deconverter>:
 * Module initialization routine for output colorspace conversion.
 */

GLOBAL(void)
jinit_color_deconverter (j_decompress_ptr cinfo)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b084      	sub	sp, #16
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  my_cconvert_ptr cconvert;
  int ci;

  cconvert = (my_cconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	221c      	movs	r2, #28
 800c6f8:	2101      	movs	r1, #1
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	4798      	blx	r3
 800c6fe:	60b8      	str	r0, [r7, #8]
				SIZEOF(my_color_deconverter));
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	68ba      	ldr	r2, [r7, #8]
 800c704:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
  cconvert->pub.start_pass = start_pass_dcolor;
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	4a88      	ldr	r2, [pc, #544]	; (800c92c <jinit_color_deconverter+0x244>)
 800c70c:	601a      	str	r2, [r3, #0]

  /* Make sure num_components agrees with jpeg_color_space */
  switch (cinfo->jpeg_color_space) {
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c714:	2b05      	cmp	r3, #5
 800c716:	dc33      	bgt.n	800c780 <jinit_color_deconverter+0x98>
 800c718:	2b04      	cmp	r3, #4
 800c71a:	da23      	bge.n	800c764 <jinit_color_deconverter+0x7c>
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	d005      	beq.n	800c72c <jinit_color_deconverter+0x44>
 800c720:	2b00      	cmp	r3, #0
 800c722:	dd2d      	ble.n	800c780 <jinit_color_deconverter+0x98>
 800c724:	3b02      	subs	r3, #2
 800c726:	2b01      	cmp	r3, #1
 800c728:	d82a      	bhi.n	800c780 <jinit_color_deconverter+0x98>
 800c72a:	e00d      	b.n	800c748 <jinit_color_deconverter+0x60>
  case JCS_GRAYSCALE:
    if (cinfo->num_components != 1)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c730:	2b01      	cmp	r3, #1
 800c732:	d033      	beq.n	800c79c <jinit_color_deconverter+0xb4>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	220b      	movs	r2, #11
 800c73a:	615a      	str	r2, [r3, #20]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	4798      	blx	r3
    break;
 800c746:	e029      	b.n	800c79c <jinit_color_deconverter+0xb4>

  case JCS_RGB:
  case JCS_YCbCr:
    if (cinfo->num_components != 3)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c74c:	2b03      	cmp	r3, #3
 800c74e:	d027      	beq.n	800c7a0 <jinit_color_deconverter+0xb8>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	220b      	movs	r2, #11
 800c756:	615a      	str	r2, [r3, #20]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	4798      	blx	r3
    break;
 800c762:	e01d      	b.n	800c7a0 <jinit_color_deconverter+0xb8>

  case JCS_CMYK:
  case JCS_YCCK:
    if (cinfo->num_components != 4)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c768:	2b04      	cmp	r3, #4
 800c76a:	d01b      	beq.n	800c7a4 <jinit_color_deconverter+0xbc>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	220b      	movs	r2, #11
 800c772:	615a      	str	r2, [r3, #20]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	4798      	blx	r3
    break;
 800c77e:	e011      	b.n	800c7a4 <jinit_color_deconverter+0xbc>

  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->num_components < 1)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c784:	2b00      	cmp	r3, #0
 800c786:	dc0f      	bgt.n	800c7a8 <jinit_color_deconverter+0xc0>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	220b      	movs	r2, #11
 800c78e:	615a      	str	r2, [r3, #20]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	4798      	blx	r3
    break;
 800c79a:	e005      	b.n	800c7a8 <jinit_color_deconverter+0xc0>
    break;
 800c79c:	bf00      	nop
 800c79e:	e004      	b.n	800c7aa <jinit_color_deconverter+0xc2>
    break;
 800c7a0:	bf00      	nop
 800c7a2:	e002      	b.n	800c7aa <jinit_color_deconverter+0xc2>
    break;
 800c7a4:	bf00      	nop
 800c7a6:	e000      	b.n	800c7aa <jinit_color_deconverter+0xc2>
    break;
 800c7a8:	bf00      	nop
  /* Set out_color_components and conversion method based on requested space.
   * Also clear the component_needed flags for any unused components,
   * so that earlier pipeline stages can avoid useless computation.
   */

  switch (cinfo->out_color_space) {
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800c7b0:	2b04      	cmp	r3, #4
 800c7b2:	d06f      	beq.n	800c894 <jinit_color_deconverter+0x1ac>
 800c7b4:	2b04      	cmp	r3, #4
 800c7b6:	f300 808f 	bgt.w	800c8d8 <jinit_color_deconverter+0x1f0>
 800c7ba:	2b01      	cmp	r3, #1
 800c7bc:	d002      	beq.n	800c7c4 <jinit_color_deconverter+0xdc>
 800c7be:	2b02      	cmp	r3, #2
 800c7c0:	d03d      	beq.n	800c83e <jinit_color_deconverter+0x156>
 800c7c2:	e089      	b.n	800c8d8 <jinit_color_deconverter+0x1f0>
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	679a      	str	r2, [r3, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	d004      	beq.n	800c7de <jinit_color_deconverter+0xf6>
	cinfo->jpeg_color_space == JCS_YCbCr) {
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800c7da:	2b03      	cmp	r3, #3
 800c7dc:	d118      	bne.n	800c810 <jinit_color_deconverter+0x128>
      cconvert->pub.color_convert = grayscale_convert;
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	4a53      	ldr	r2, [pc, #332]	; (800c930 <jinit_color_deconverter+0x248>)
 800c7e2:	605a      	str	r2, [r3, #4]
      /* For color->grayscale conversion, only the Y (0) component is needed */
      for (ci = 1; ci < cinfo->num_components; ci++)
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	60fb      	str	r3, [r7, #12]
 800c7e8:	e00c      	b.n	800c804 <jinit_color_deconverter+0x11c>
	cinfo->comp_info[ci].component_needed = FALSE;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	2158      	movs	r1, #88	; 0x58
 800c7f4:	fb01 f303 	mul.w	r3, r1, r3
 800c7f8:	4413      	add	r3, r2
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	635a      	str	r2, [r3, #52]	; 0x34
      for (ci = 1; ci < cinfo->num_components; ci++)
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	3301      	adds	r3, #1
 800c802:	60fb      	str	r3, [r7, #12]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c808:	68fa      	ldr	r2, [r7, #12]
 800c80a:	429a      	cmp	r2, r3
 800c80c:	dbed      	blt.n	800c7ea <jinit_color_deconverter+0x102>
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800c80e:	e015      	b.n	800c83c <jinit_color_deconverter+0x154>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c816:	2b02      	cmp	r3, #2
 800c818:	d106      	bne.n	800c828 <jinit_color_deconverter+0x140>
      cconvert->pub.color_convert = rgb_gray_convert;
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	4a45      	ldr	r2, [pc, #276]	; (800c934 <jinit_color_deconverter+0x24c>)
 800c81e:	605a      	str	r2, [r3, #4]
      build_rgb_y_table(cinfo);
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f7ff fd44 	bl	800c2ae <build_rgb_y_table>
    } else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
 800c826:	e071      	b.n	800c90c <jinit_color_deconverter+0x224>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	221c      	movs	r2, #28
 800c82e:	615a      	str	r2, [r3, #20]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	4798      	blx	r3
    break;
 800c83a:	e067      	b.n	800c90c <jinit_color_deconverter+0x224>
 800c83c:	e066      	b.n	800c90c <jinit_color_deconverter+0x224>

  case JCS_RGB:
    cinfo->out_color_components = RGB_PIXELSIZE;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2203      	movs	r2, #3
 800c842:	679a      	str	r2, [r3, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c84a:	2b03      	cmp	r3, #3
 800c84c:	d106      	bne.n	800c85c <jinit_color_deconverter+0x174>
      cconvert->pub.color_convert = ycc_rgb_convert;
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	4a39      	ldr	r2, [pc, #228]	; (800c938 <jinit_color_deconverter+0x250>)
 800c852:	605a      	str	r2, [r3, #4]
      build_ycc_rgb_table(cinfo);
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f7ff fc29 	bl	800c0ac <build_ycc_rgb_table>
      cconvert->pub.color_convert = gray_rgb_convert;
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
      cconvert->pub.color_convert = rgb_convert;
    } else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
 800c85a:	e057      	b.n	800c90c <jinit_color_deconverter+0x224>
    } else if (cinfo->jpeg_color_space == JCS_GRAYSCALE) {
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c862:	2b01      	cmp	r3, #1
 800c864:	d103      	bne.n	800c86e <jinit_color_deconverter+0x186>
      cconvert->pub.color_convert = gray_rgb_convert;
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	4a34      	ldr	r2, [pc, #208]	; (800c93c <jinit_color_deconverter+0x254>)
 800c86a:	605a      	str	r2, [r3, #4]
    break;
 800c86c:	e04e      	b.n	800c90c <jinit_color_deconverter+0x224>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c874:	2b02      	cmp	r3, #2
 800c876:	d103      	bne.n	800c880 <jinit_color_deconverter+0x198>
      cconvert->pub.color_convert = rgb_convert;
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	4a31      	ldr	r2, [pc, #196]	; (800c940 <jinit_color_deconverter+0x258>)
 800c87c:	605a      	str	r2, [r3, #4]
    break;
 800c87e:	e045      	b.n	800c90c <jinit_color_deconverter+0x224>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	221c      	movs	r2, #28
 800c886:	615a      	str	r2, [r3, #20]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	4798      	blx	r3
    break;
 800c892:	e03b      	b.n	800c90c <jinit_color_deconverter+0x224>

  case JCS_CMYK:
    cinfo->out_color_components = 4;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2204      	movs	r2, #4
 800c898:	679a      	str	r2, [r3, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8a0:	2b05      	cmp	r3, #5
 800c8a2:	d106      	bne.n	800c8b2 <jinit_color_deconverter+0x1ca>
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	4a27      	ldr	r2, [pc, #156]	; (800c944 <jinit_color_deconverter+0x25c>)
 800c8a8:	605a      	str	r2, [r3, #4]
      build_ycc_rgb_table(cinfo);
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f7ff fbfe 	bl	800c0ac <build_ycc_rgb_table>
    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
      cconvert->pub.color_convert = null_convert;
    } else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
 800c8b0:	e02c      	b.n	800c90c <jinit_color_deconverter+0x224>
    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8b8:	2b04      	cmp	r3, #4
 800c8ba:	d103      	bne.n	800c8c4 <jinit_color_deconverter+0x1dc>
      cconvert->pub.color_convert = null_convert;
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	4a22      	ldr	r2, [pc, #136]	; (800c948 <jinit_color_deconverter+0x260>)
 800c8c0:	605a      	str	r2, [r3, #4]
    break;
 800c8c2:	e023      	b.n	800c90c <jinit_color_deconverter+0x224>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	221c      	movs	r2, #28
 800c8ca:	615a      	str	r2, [r3, #20]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	4798      	blx	r3
    break;
 800c8d6:	e019      	b.n	800c90c <jinit_color_deconverter+0x224>

  default:
    /* Permit null conversion to same output space */
    if (cinfo->out_color_space == cinfo->jpeg_color_space) {
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d107      	bne.n	800c8f8 <jinit_color_deconverter+0x210>
      cinfo->out_color_components = cinfo->num_components;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	679a      	str	r2, [r3, #120]	; 0x78
      cconvert->pub.color_convert = null_convert;
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	4a15      	ldr	r2, [pc, #84]	; (800c948 <jinit_color_deconverter+0x260>)
 800c8f4:	605a      	str	r2, [r3, #4]
    } else			/* unsupported non-null conversion */
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
 800c8f6:	e008      	b.n	800c90a <jinit_color_deconverter+0x222>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	221c      	movs	r2, #28
 800c8fe:	615a      	str	r2, [r3, #20]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	4798      	blx	r3
    break;
 800c90a:	bf00      	nop
  }

  if (cinfo->quantize_colors)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c910:	2b00      	cmp	r3, #0
 800c912:	d003      	beq.n	800c91c <jinit_color_deconverter+0x234>
    cinfo->output_components = 1; /* single colormapped output component */
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2201      	movs	r2, #1
 800c918:	67da      	str	r2, [r3, #124]	; 0x7c
  else
    cinfo->output_components = cinfo->out_color_components;
}
 800c91a:	e003      	b.n	800c924 <jinit_color_deconverter+0x23c>
    cinfo->output_components = cinfo->out_color_components;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800c924:	bf00      	nop
 800c926:	3710      	adds	r7, #16
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}
 800c92c:	0800c6d5 	.word	0x0800c6d5
 800c930:	0800c519 	.word	0x0800c519
 800c934:	0800c33b 	.word	0x0800c33b
 800c938:	0800c1ad 	.word	0x0800c1ad
 800c93c:	0800c547 	.word	0x0800c547
 800c940:	0800c405 	.word	0x0800c405
 800c944:	0800c5ad 	.word	0x0800c5ad
 800c948:	0800c495 	.word	0x0800c495

0800c94c <start_pass>:
 * a matching multiplier table.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800c94c:	b590      	push	{r4, r7, lr}
 800c94e:	b08f      	sub	sp, #60	; 0x3c
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800c95a:	61bb      	str	r3, [r7, #24]
  int ci, i;
  jpeg_component_info *compptr;
  int method = 0;
 800c95c:	2300      	movs	r3, #0
 800c95e:	62bb      	str	r3, [r7, #40]	; 0x28
  inverse_DCT_method_ptr method_ptr = NULL;
 800c960:	2300      	movs	r3, #0
 800c962:	627b      	str	r3, [r7, #36]	; 0x24
  JQUANT_TBL * qtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c964:	2300      	movs	r3, #0
 800c966:	637b      	str	r3, [r7, #52]	; 0x34
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c96e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c970:	e30d      	b.n	800cf8e <start_pass+0x642>
       ci++, compptr++) {
    /* Select the proper IDCT routine for this component's scaling */
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800c972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c976:	021a      	lsls	r2, r3, #8
 800c978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c97c:	4413      	add	r3, r2
 800c97e:	f241 0210 	movw	r2, #4112	; 0x1010
 800c982:	4293      	cmp	r3, r2
 800c984:	f000 8168 	beq.w	800cc58 <start_pass+0x30c>
 800c988:	f241 0210 	movw	r2, #4112	; 0x1010
 800c98c:	4293      	cmp	r3, r2
 800c98e:	f300 81de 	bgt.w	800cd4e <start_pass+0x402>
 800c992:	f241 0208 	movw	r2, #4104	; 0x1008
 800c996:	4293      	cmp	r3, r2
 800c998:	f000 8163 	beq.w	800cc62 <start_pass+0x316>
 800c99c:	f241 0208 	movw	r2, #4104	; 0x1008
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	f300 81d4 	bgt.w	800cd4e <start_pass+0x402>
 800c9a6:	f640 720f 	movw	r2, #3855	; 0xf0f
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	f000 814f 	beq.w	800cc4e <start_pass+0x302>
 800c9b0:	f5b3 6f71 	cmp.w	r3, #3856	; 0xf10
 800c9b4:	f280 81cb 	bge.w	800cd4e <start_pass+0x402>
 800c9b8:	f640 620e 	movw	r2, #3598	; 0xe0e
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	f000 8141 	beq.w	800cc44 <start_pass+0x2f8>
 800c9c2:	f640 620e 	movw	r2, #3598	; 0xe0e
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	f300 81c1 	bgt.w	800cd4e <start_pass+0x402>
 800c9cc:	f640 6207 	movw	r2, #3591	; 0xe07
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	f000 814b 	beq.w	800cc6c <start_pass+0x320>
 800c9d6:	f640 6207 	movw	r2, #3591	; 0xe07
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	f300 81b7 	bgt.w	800cd4e <start_pass+0x402>
 800c9e0:	f640 520d 	movw	r2, #3341	; 0xd0d
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	f000 8128 	beq.w	800cc3a <start_pass+0x2ee>
 800c9ea:	f640 520d 	movw	r2, #3341	; 0xd0d
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	f300 81ad 	bgt.w	800cd4e <start_pass+0x402>
 800c9f4:	f640 420c 	movw	r2, #3084	; 0xc0c
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	f000 8119 	beq.w	800cc30 <start_pass+0x2e4>
 800c9fe:	f640 420c 	movw	r2, #3084	; 0xc0c
 800ca02:	4293      	cmp	r3, r2
 800ca04:	f300 81a3 	bgt.w	800cd4e <start_pass+0x402>
 800ca08:	f640 4206 	movw	r2, #3078	; 0xc06
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	f000 8132 	beq.w	800cc76 <start_pass+0x32a>
 800ca12:	f640 4206 	movw	r2, #3078	; 0xc06
 800ca16:	4293      	cmp	r3, r2
 800ca18:	f300 8199 	bgt.w	800cd4e <start_pass+0x402>
 800ca1c:	f640 320b 	movw	r2, #2827	; 0xb0b
 800ca20:	4293      	cmp	r3, r2
 800ca22:	f000 8100 	beq.w	800cc26 <start_pass+0x2da>
 800ca26:	f640 320b 	movw	r2, #2827	; 0xb0b
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	f300 818f 	bgt.w	800cd4e <start_pass+0x402>
 800ca30:	f640 220a 	movw	r2, #2570	; 0xa0a
 800ca34:	4293      	cmp	r3, r2
 800ca36:	f000 80f1 	beq.w	800cc1c <start_pass+0x2d0>
 800ca3a:	f640 220a 	movw	r2, #2570	; 0xa0a
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	f300 8185 	bgt.w	800cd4e <start_pass+0x402>
 800ca44:	f640 2205 	movw	r2, #2565	; 0xa05
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	f000 8119 	beq.w	800cc80 <start_pass+0x334>
 800ca4e:	f640 2205 	movw	r2, #2565	; 0xa05
 800ca52:	4293      	cmp	r3, r2
 800ca54:	f300 817b 	bgt.w	800cd4e <start_pass+0x402>
 800ca58:	f640 1209 	movw	r2, #2313	; 0x909
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	f000 80d8 	beq.w	800cc12 <start_pass+0x2c6>
 800ca62:	f640 1209 	movw	r2, #2313	; 0x909
 800ca66:	4293      	cmp	r3, r2
 800ca68:	f300 8171 	bgt.w	800cd4e <start_pass+0x402>
 800ca6c:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800ca70:	f000 811f 	beq.w	800ccb2 <start_pass+0x366>
 800ca74:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800ca78:	f300 8169 	bgt.w	800cd4e <start_pass+0x402>
 800ca7c:	f640 0208 	movw	r2, #2056	; 0x808
 800ca80:	4293      	cmp	r3, r2
 800ca82:	f000 813e 	beq.w	800cd02 <start_pass+0x3b6>
 800ca86:	f640 0208 	movw	r2, #2056	; 0x808
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	f300 815f 	bgt.w	800cd4e <start_pass+0x402>
 800ca90:	f640 0204 	movw	r2, #2052	; 0x804
 800ca94:	4293      	cmp	r3, r2
 800ca96:	f000 80f8 	beq.w	800cc8a <start_pass+0x33e>
 800ca9a:	f640 0204 	movw	r2, #2052	; 0x804
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	f300 8155 	bgt.w	800cd4e <start_pass+0x402>
 800caa4:	f240 720e 	movw	r2, #1806	; 0x70e
 800caa8:	4293      	cmp	r3, r2
 800caaa:	f000 8107 	beq.w	800ccbc <start_pass+0x370>
 800caae:	f240 720e 	movw	r2, #1806	; 0x70e
 800cab2:	4293      	cmp	r3, r2
 800cab4:	f300 814b 	bgt.w	800cd4e <start_pass+0x402>
 800cab8:	f240 7207 	movw	r2, #1799	; 0x707
 800cabc:	4293      	cmp	r3, r2
 800cabe:	f000 80a3 	beq.w	800cc08 <start_pass+0x2bc>
 800cac2:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800cac6:	f280 8142 	bge.w	800cd4e <start_pass+0x402>
 800caca:	f240 620c 	movw	r2, #1548	; 0x60c
 800cace:	4293      	cmp	r3, r2
 800cad0:	f000 80f9 	beq.w	800ccc6 <start_pass+0x37a>
 800cad4:	f240 620c 	movw	r2, #1548	; 0x60c
 800cad8:	4293      	cmp	r3, r2
 800cada:	f300 8138 	bgt.w	800cd4e <start_pass+0x402>
 800cade:	f240 6206 	movw	r2, #1542	; 0x606
 800cae2:	4293      	cmp	r3, r2
 800cae4:	f000 808b 	beq.w	800cbfe <start_pass+0x2b2>
 800cae8:	f240 6206 	movw	r2, #1542	; 0x606
 800caec:	4293      	cmp	r3, r2
 800caee:	f300 812e 	bgt.w	800cd4e <start_pass+0x402>
 800caf2:	f240 6203 	movw	r2, #1539	; 0x603
 800caf6:	4293      	cmp	r3, r2
 800caf8:	f000 80cc 	beq.w	800cc94 <start_pass+0x348>
 800cafc:	f240 6203 	movw	r2, #1539	; 0x603
 800cb00:	4293      	cmp	r3, r2
 800cb02:	f300 8124 	bgt.w	800cd4e <start_pass+0x402>
 800cb06:	f240 520a 	movw	r2, #1290	; 0x50a
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	f000 80e0 	beq.w	800ccd0 <start_pass+0x384>
 800cb10:	f240 520a 	movw	r2, #1290	; 0x50a
 800cb14:	4293      	cmp	r3, r2
 800cb16:	f300 811a 	bgt.w	800cd4e <start_pass+0x402>
 800cb1a:	f240 5205 	movw	r2, #1285	; 0x505
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d068      	beq.n	800cbf4 <start_pass+0x2a8>
 800cb22:	f240 5205 	movw	r2, #1285	; 0x505
 800cb26:	4293      	cmp	r3, r2
 800cb28:	f300 8111 	bgt.w	800cd4e <start_pass+0x402>
 800cb2c:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800cb30:	f000 80d3 	beq.w	800ccda <start_pass+0x38e>
 800cb34:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800cb38:	f300 8109 	bgt.w	800cd4e <start_pass+0x402>
 800cb3c:	f240 4204 	movw	r2, #1028	; 0x404
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d052      	beq.n	800cbea <start_pass+0x29e>
 800cb44:	f240 4204 	movw	r2, #1028	; 0x404
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	f300 8100 	bgt.w	800cd4e <start_pass+0x402>
 800cb4e:	f240 4202 	movw	r2, #1026	; 0x402
 800cb52:	4293      	cmp	r3, r2
 800cb54:	f000 80a3 	beq.w	800cc9e <start_pass+0x352>
 800cb58:	f240 4202 	movw	r2, #1026	; 0x402
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	f300 80f6 	bgt.w	800cd4e <start_pass+0x402>
 800cb62:	f240 3206 	movw	r2, #774	; 0x306
 800cb66:	4293      	cmp	r3, r2
 800cb68:	f000 80bc 	beq.w	800cce4 <start_pass+0x398>
 800cb6c:	f240 3206 	movw	r2, #774	; 0x306
 800cb70:	4293      	cmp	r3, r2
 800cb72:	f300 80ec 	bgt.w	800cd4e <start_pass+0x402>
 800cb76:	f240 3203 	movw	r2, #771	; 0x303
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d030      	beq.n	800cbe0 <start_pass+0x294>
 800cb7e:	f5b3 7f41 	cmp.w	r3, #772	; 0x304
 800cb82:	f280 80e4 	bge.w	800cd4e <start_pass+0x402>
 800cb86:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800cb8a:	f000 80b0 	beq.w	800ccee <start_pass+0x3a2>
 800cb8e:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800cb92:	f300 80dc 	bgt.w	800cd4e <start_pass+0x402>
 800cb96:	f240 2202 	movw	r2, #514	; 0x202
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d01b      	beq.n	800cbd6 <start_pass+0x28a>
 800cb9e:	f240 2202 	movw	r2, #514	; 0x202
 800cba2:	4293      	cmp	r3, r2
 800cba4:	f300 80d3 	bgt.w	800cd4e <start_pass+0x402>
 800cba8:	f240 2201 	movw	r2, #513	; 0x201
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d07b      	beq.n	800cca8 <start_pass+0x35c>
 800cbb0:	f240 2201 	movw	r2, #513	; 0x201
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	f300 80ca 	bgt.w	800cd4e <start_pass+0x402>
 800cbba:	f240 1201 	movw	r2, #257	; 0x101
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d004      	beq.n	800cbcc <start_pass+0x280>
 800cbc2:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800cbc6:	f000 8097 	beq.w	800ccf8 <start_pass+0x3ac>
 800cbca:	e0c0      	b.n	800cd4e <start_pass+0x402>
#ifdef IDCT_SCALING_SUPPORTED
    case ((1 << 8) + 1):
      method_ptr = jpeg_idct_1x1;
 800cbcc:	4b91      	ldr	r3, [pc, #580]	; (800ce14 <start_pass+0x4c8>)
 800cbce:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800cbd4:	e0cf      	b.n	800cd76 <start_pass+0x42a>
    case ((2 << 8) + 2):
      method_ptr = jpeg_idct_2x2;
 800cbd6:	4b90      	ldr	r3, [pc, #576]	; (800ce18 <start_pass+0x4cc>)
 800cbd8:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800cbda:	2300      	movs	r3, #0
 800cbdc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800cbde:	e0ca      	b.n	800cd76 <start_pass+0x42a>
    case ((3 << 8) + 3):
      method_ptr = jpeg_idct_3x3;
 800cbe0:	4b8e      	ldr	r3, [pc, #568]	; (800ce1c <start_pass+0x4d0>)
 800cbe2:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800cbe8:	e0c5      	b.n	800cd76 <start_pass+0x42a>
    case ((4 << 8) + 4):
      method_ptr = jpeg_idct_4x4;
 800cbea:	4b8d      	ldr	r3, [pc, #564]	; (800ce20 <start_pass+0x4d4>)
 800cbec:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800cbee:	2300      	movs	r3, #0
 800cbf0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800cbf2:	e0c0      	b.n	800cd76 <start_pass+0x42a>
    case ((5 << 8) + 5):
      method_ptr = jpeg_idct_5x5;
 800cbf4:	4b8b      	ldr	r3, [pc, #556]	; (800ce24 <start_pass+0x4d8>)
 800cbf6:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800cbfc:	e0bb      	b.n	800cd76 <start_pass+0x42a>
    case ((6 << 8) + 6):
      method_ptr = jpeg_idct_6x6;
 800cbfe:	4b8a      	ldr	r3, [pc, #552]	; (800ce28 <start_pass+0x4dc>)
 800cc00:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800cc02:	2300      	movs	r3, #0
 800cc04:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800cc06:	e0b6      	b.n	800cd76 <start_pass+0x42a>
    case ((7 << 8) + 7):
      method_ptr = jpeg_idct_7x7;
 800cc08:	4b88      	ldr	r3, [pc, #544]	; (800ce2c <start_pass+0x4e0>)
 800cc0a:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800cc10:	e0b1      	b.n	800cd76 <start_pass+0x42a>
    case ((9 << 8) + 9):
      method_ptr = jpeg_idct_9x9;
 800cc12:	4b87      	ldr	r3, [pc, #540]	; (800ce30 <start_pass+0x4e4>)
 800cc14:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800cc16:	2300      	movs	r3, #0
 800cc18:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800cc1a:	e0ac      	b.n	800cd76 <start_pass+0x42a>
    case ((10 << 8) + 10):
      method_ptr = jpeg_idct_10x10;
 800cc1c:	4b85      	ldr	r3, [pc, #532]	; (800ce34 <start_pass+0x4e8>)
 800cc1e:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800cc20:	2300      	movs	r3, #0
 800cc22:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800cc24:	e0a7      	b.n	800cd76 <start_pass+0x42a>
    case ((11 << 8) + 11):
      method_ptr = jpeg_idct_11x11;
 800cc26:	4b84      	ldr	r3, [pc, #528]	; (800ce38 <start_pass+0x4ec>)
 800cc28:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800cc2e:	e0a2      	b.n	800cd76 <start_pass+0x42a>
    case ((12 << 8) + 12):
      method_ptr = jpeg_idct_12x12;
 800cc30:	4b82      	ldr	r3, [pc, #520]	; (800ce3c <start_pass+0x4f0>)
 800cc32:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800cc34:	2300      	movs	r3, #0
 800cc36:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800cc38:	e09d      	b.n	800cd76 <start_pass+0x42a>
    case ((13 << 8) + 13):
      method_ptr = jpeg_idct_13x13;
 800cc3a:	4b81      	ldr	r3, [pc, #516]	; (800ce40 <start_pass+0x4f4>)
 800cc3c:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800cc3e:	2300      	movs	r3, #0
 800cc40:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800cc42:	e098      	b.n	800cd76 <start_pass+0x42a>
    case ((14 << 8) + 14):
      method_ptr = jpeg_idct_14x14;
 800cc44:	4b7f      	ldr	r3, [pc, #508]	; (800ce44 <start_pass+0x4f8>)
 800cc46:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800cc48:	2300      	movs	r3, #0
 800cc4a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800cc4c:	e093      	b.n	800cd76 <start_pass+0x42a>
    case ((15 << 8) + 15):
      method_ptr = jpeg_idct_15x15;
 800cc4e:	4b7e      	ldr	r3, [pc, #504]	; (800ce48 <start_pass+0x4fc>)
 800cc50:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800cc52:	2300      	movs	r3, #0
 800cc54:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800cc56:	e08e      	b.n	800cd76 <start_pass+0x42a>
    case ((16 << 8) + 16):
      method_ptr = jpeg_idct_16x16;
 800cc58:	4b7c      	ldr	r3, [pc, #496]	; (800ce4c <start_pass+0x500>)
 800cc5a:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800cc60:	e089      	b.n	800cd76 <start_pass+0x42a>
    case ((16 << 8) + 8):
      method_ptr = jpeg_idct_16x8;
 800cc62:	4b7b      	ldr	r3, [pc, #492]	; (800ce50 <start_pass+0x504>)
 800cc64:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800cc66:	2300      	movs	r3, #0
 800cc68:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800cc6a:	e084      	b.n	800cd76 <start_pass+0x42a>
    case ((14 << 8) + 7):
      method_ptr = jpeg_idct_14x7;
 800cc6c:	4b79      	ldr	r3, [pc, #484]	; (800ce54 <start_pass+0x508>)
 800cc6e:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800cc70:	2300      	movs	r3, #0
 800cc72:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800cc74:	e07f      	b.n	800cd76 <start_pass+0x42a>
    case ((12 << 8) + 6):
      method_ptr = jpeg_idct_12x6;
 800cc76:	4b78      	ldr	r3, [pc, #480]	; (800ce58 <start_pass+0x50c>)
 800cc78:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800cc7e:	e07a      	b.n	800cd76 <start_pass+0x42a>
    case ((10 << 8) + 5):
      method_ptr = jpeg_idct_10x5;
 800cc80:	4b76      	ldr	r3, [pc, #472]	; (800ce5c <start_pass+0x510>)
 800cc82:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800cc84:	2300      	movs	r3, #0
 800cc86:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800cc88:	e075      	b.n	800cd76 <start_pass+0x42a>
    case ((8 << 8) + 4):
      method_ptr = jpeg_idct_8x4;
 800cc8a:	4b75      	ldr	r3, [pc, #468]	; (800ce60 <start_pass+0x514>)
 800cc8c:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800cc8e:	2300      	movs	r3, #0
 800cc90:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800cc92:	e070      	b.n	800cd76 <start_pass+0x42a>
    case ((6 << 8) + 3):
      method_ptr = jpeg_idct_6x3;
 800cc94:	4b73      	ldr	r3, [pc, #460]	; (800ce64 <start_pass+0x518>)
 800cc96:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800cc98:	2300      	movs	r3, #0
 800cc9a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800cc9c:	e06b      	b.n	800cd76 <start_pass+0x42a>
    case ((4 << 8) + 2):
      method_ptr = jpeg_idct_4x2;
 800cc9e:	4b72      	ldr	r3, [pc, #456]	; (800ce68 <start_pass+0x51c>)
 800cca0:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800cca2:	2300      	movs	r3, #0
 800cca4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800cca6:	e066      	b.n	800cd76 <start_pass+0x42a>
    case ((2 << 8) + 1):
      method_ptr = jpeg_idct_2x1;
 800cca8:	4b70      	ldr	r3, [pc, #448]	; (800ce6c <start_pass+0x520>)
 800ccaa:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800ccac:	2300      	movs	r3, #0
 800ccae:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800ccb0:	e061      	b.n	800cd76 <start_pass+0x42a>
    case ((8 << 8) + 16):
      method_ptr = jpeg_idct_8x16;
 800ccb2:	4b6f      	ldr	r3, [pc, #444]	; (800ce70 <start_pass+0x524>)
 800ccb4:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800ccba:	e05c      	b.n	800cd76 <start_pass+0x42a>
    case ((7 << 8) + 14):
      method_ptr = jpeg_idct_7x14;
 800ccbc:	4b6d      	ldr	r3, [pc, #436]	; (800ce74 <start_pass+0x528>)
 800ccbe:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800ccc4:	e057      	b.n	800cd76 <start_pass+0x42a>
    case ((6 << 8) + 12):
      method_ptr = jpeg_idct_6x12;
 800ccc6:	4b6c      	ldr	r3, [pc, #432]	; (800ce78 <start_pass+0x52c>)
 800ccc8:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800ccca:	2300      	movs	r3, #0
 800cccc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800ccce:	e052      	b.n	800cd76 <start_pass+0x42a>
    case ((5 << 8) + 10):
      method_ptr = jpeg_idct_5x10;
 800ccd0:	4b6a      	ldr	r3, [pc, #424]	; (800ce7c <start_pass+0x530>)
 800ccd2:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800ccd8:	e04d      	b.n	800cd76 <start_pass+0x42a>
    case ((4 << 8) + 8):
      method_ptr = jpeg_idct_4x8;
 800ccda:	4b69      	ldr	r3, [pc, #420]	; (800ce80 <start_pass+0x534>)
 800ccdc:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800ccde:	2300      	movs	r3, #0
 800cce0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800cce2:	e048      	b.n	800cd76 <start_pass+0x42a>
    case ((3 << 8) + 6):
      method_ptr = jpeg_idct_3x6;
 800cce4:	4b67      	ldr	r3, [pc, #412]	; (800ce84 <start_pass+0x538>)
 800cce6:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800cce8:	2300      	movs	r3, #0
 800ccea:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800ccec:	e043      	b.n	800cd76 <start_pass+0x42a>
    case ((2 << 8) + 4):
      method_ptr = jpeg_idct_2x4;
 800ccee:	4b66      	ldr	r3, [pc, #408]	; (800ce88 <start_pass+0x53c>)
 800ccf0:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800ccf6:	e03e      	b.n	800cd76 <start_pass+0x42a>
    case ((1 << 8) + 2):
      method_ptr = jpeg_idct_1x2;
 800ccf8:	4b64      	ldr	r3, [pc, #400]	; (800ce8c <start_pass+0x540>)
 800ccfa:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800cd00:	e039      	b.n	800cd76 <start_pass+0x42a>
#endif
    case ((DCTSIZE << 8) + DCTSIZE):
      switch (cinfo->dct_method) {
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800cd08:	2b02      	cmp	r3, #2
 800cd0a:	d010      	beq.n	800cd2e <start_pass+0x3e2>
 800cd0c:	2b02      	cmp	r3, #2
 800cd0e:	dc13      	bgt.n	800cd38 <start_pass+0x3ec>
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d002      	beq.n	800cd1a <start_pass+0x3ce>
 800cd14:	2b01      	cmp	r3, #1
 800cd16:	d005      	beq.n	800cd24 <start_pass+0x3d8>
 800cd18:	e00e      	b.n	800cd38 <start_pass+0x3ec>
#ifdef DCT_ISLOW_SUPPORTED
      case JDCT_ISLOW:
	method_ptr = jpeg_idct_islow;
 800cd1a:	4b5d      	ldr	r3, [pc, #372]	; (800ce90 <start_pass+0x544>)
 800cd1c:	627b      	str	r3, [r7, #36]	; 0x24
	method = JDCT_ISLOW;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	62bb      	str	r3, [r7, #40]	; 0x28
	break;
 800cd22:	e013      	b.n	800cd4c <start_pass+0x400>
#endif
#ifdef DCT_IFAST_SUPPORTED
      case JDCT_IFAST:
	method_ptr = jpeg_idct_ifast;
 800cd24:	4b5b      	ldr	r3, [pc, #364]	; (800ce94 <start_pass+0x548>)
 800cd26:	627b      	str	r3, [r7, #36]	; 0x24
	method = JDCT_IFAST;
 800cd28:	2301      	movs	r3, #1
 800cd2a:	62bb      	str	r3, [r7, #40]	; 0x28
	break;
 800cd2c:	e00e      	b.n	800cd4c <start_pass+0x400>
#endif
#ifdef DCT_FLOAT_SUPPORTED
      case JDCT_FLOAT:
	method_ptr = jpeg_idct_float;
 800cd2e:	4b5a      	ldr	r3, [pc, #360]	; (800ce98 <start_pass+0x54c>)
 800cd30:	627b      	str	r3, [r7, #36]	; 0x24
	method = JDCT_FLOAT;
 800cd32:	2302      	movs	r3, #2
 800cd34:	62bb      	str	r3, [r7, #40]	; 0x28
	break;
 800cd36:	e009      	b.n	800cd4c <start_pass+0x400>
#endif
      default:
	ERREXIT(cinfo, JERR_NOT_COMPILED);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	2231      	movs	r2, #49	; 0x31
 800cd3e:	615a      	str	r2, [r3, #20]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	4798      	blx	r3
	break;
 800cd4a:	bf00      	nop
      }
      break;
 800cd4c:	e013      	b.n	800cd76 <start_pass+0x42a>
    default:
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	2207      	movs	r2, #7
 800cd54:	615a      	str	r2, [r3, #20]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cd5e:	619a      	str	r2, [r3, #24]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd66:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800cd68:	61da      	str	r2, [r3, #28]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	4798      	blx	r3
	       compptr->DCT_h_scaled_size, compptr->DCT_v_scaled_size);
      break;
 800cd74:	bf00      	nop
    }
    idct->pub.inverse_DCT[ci] = method_ptr;
 800cd76:	69ba      	ldr	r2, [r7, #24]
 800cd78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	4413      	add	r3, r2
 800cd7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd80:	605a      	str	r2, [r3, #4]
     * or if we already built the table.  Also, if no quant table
     * has yet been saved for the component, we leave the
     * multiplier table all-zero; we'll be reading zeroes from the
     * coefficient controller's buffer anyway.
     */
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800cd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	f000 80f8 	beq.w	800cf7c <start_pass+0x630>
 800cd8c:	69ba      	ldr	r2, [r7, #24]
 800cd8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd90:	330a      	adds	r3, #10
 800cd92:	009b      	lsls	r3, r3, #2
 800cd94:	4413      	add	r3, r2
 800cd96:	685b      	ldr	r3, [r3, #4]
 800cd98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	f000 80ee 	beq.w	800cf7c <start_pass+0x630>
      continue;
    qtbl = compptr->quant_table;
 800cda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cda4:	617b      	str	r3, [r7, #20]
    if (qtbl == NULL)		/* happens if no data yet for component */
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	f000 80e9 	beq.w	800cf80 <start_pass+0x634>
      continue;
    idct->cur_method[ci] = method;
 800cdae:	69ba      	ldr	r2, [r7, #24]
 800cdb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdb2:	330a      	adds	r3, #10
 800cdb4:	009b      	lsls	r3, r3, #2
 800cdb6:	4413      	add	r3, r2
 800cdb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdba:	605a      	str	r2, [r3, #4]
    switch (method) {
 800cdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdbe:	2b02      	cmp	r3, #2
 800cdc0:	f000 8086 	beq.w	800ced0 <start_pass+0x584>
 800cdc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc6:	2b02      	cmp	r3, #2
 800cdc8:	f300 80ce 	bgt.w	800cf68 <start_pass+0x61c>
 800cdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d003      	beq.n	800cdda <start_pass+0x48e>
 800cdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d017      	beq.n	800ce08 <start_pass+0x4bc>
 800cdd8:	e0c6      	b.n	800cf68 <start_pass+0x61c>
    case JDCT_ISLOW:
      {
	/* For LL&M IDCT method, multipliers are equal to raw quantization
	 * coefficients, but are stored as ints to ensure access efficiency.
	 */
	ISLOW_MULT_TYPE * ismtbl = (ISLOW_MULT_TYPE *) compptr->dct_table;
 800cdda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdde:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < DCTSIZE2; i++) {
 800cde0:	2300      	movs	r3, #0
 800cde2:	633b      	str	r3, [r7, #48]	; 0x30
 800cde4:	e00c      	b.n	800ce00 <start_pass+0x4b4>
	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdea:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 800cdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf0:	009b      	lsls	r3, r3, #2
 800cdf2:	68ba      	ldr	r2, [r7, #8]
 800cdf4:	4413      	add	r3, r2
 800cdf6:	460a      	mov	r2, r1
 800cdf8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < DCTSIZE2; i++) {
 800cdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	633b      	str	r3, [r7, #48]	; 0x30
 800ce00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce02:	2b3f      	cmp	r3, #63	; 0x3f
 800ce04:	ddef      	ble.n	800cde6 <start_pass+0x49a>
	}
      }
      break;
 800ce06:	e0bc      	b.n	800cf82 <start_pass+0x636>
	 *   scalefactor[0] = 1
	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
	 * For integer operation, the multiplier table is to be scaled by
	 * IFAST_SCALE_BITS.
	 */
	IFAST_MULT_TYPE * ifmtbl = (IFAST_MULT_TYPE *) compptr->dct_table;
 800ce08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce0c:	60fb      	str	r3, [r7, #12]
	   8867, 12299, 11585, 10426,  8867,  6967,  4799,  2446,
	   4520,  6270,  5906,  5315,  4520,  3552,  2446,  1247
	};
	SHIFT_TEMPS

	for (i = 0; i < DCTSIZE2; i++) {
 800ce0e:	2300      	movs	r3, #0
 800ce10:	633b      	str	r3, [r7, #48]	; 0x30
 800ce12:	e059      	b.n	800cec8 <start_pass+0x57c>
 800ce14:	0801764b 	.word	0x0801764b
 800ce18:	08017535 	.word	0x08017535
 800ce1c:	08017385 	.word	0x08017385
 800ce20:	08017149 	.word	0x08017149
 800ce24:	08016d7d 	.word	0x08016d7d
 800ce28:	08016915 	.word	0x08016915
 800ce2c:	080162ad 	.word	0x080162ad
 800ce30:	080176a5 	.word	0x080176a5
 800ce34:	08017dad 	.word	0x08017dad
 800ce38:	08018581 	.word	0x08018581
 800ce3c:	08018f05 	.word	0x08018f05
 800ce40:	08019821 	.word	0x08019821
 800ce44:	0801a31d 	.word	0x0801a31d
 800ce48:	0801ad95 	.word	0x0801ad95
 800ce4c:	0801b89d 	.word	0x0801b89d
 800ce50:	0801c579 	.word	0x0801c579
 800ce54:	0801d0c5 	.word	0x0801d0c5
 800ce58:	0801d94d 	.word	0x0801d94d
 800ce5c:	0801e029 	.word	0x0801e029
 800ce60:	0801e605 	.word	0x0801e605
 800ce64:	0801eb15 	.word	0x0801eb15
 800ce68:	0801eddd 	.word	0x0801eddd
 800ce6c:	0801ef61 	.word	0x0801ef61
 800ce70:	0801eff1 	.word	0x0801eff1
 800ce74:	0801f9e5 	.word	0x0801f9e5
 800ce78:	08020235 	.word	0x08020235
 800ce7c:	080208ed 	.word	0x080208ed
 800ce80:	08020ecd 	.word	0x08020ecd
 800ce84:	080214f9 	.word	0x080214f9
 800ce88:	080217c9 	.word	0x080217c9
 800ce8c:	08021959 	.word	0x08021959
 800ce90:	08015975 	.word	0x08015975
 800ce94:	0801518d 	.word	0x0801518d
 800ce98:	08014955 	.word	0x08014955
	  ifmtbl[i] = (IFAST_MULT_TYPE)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cea0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800cea4:	4619      	mov	r1, r3
 800cea6:	4a3f      	ldr	r2, [pc, #252]	; (800cfa4 <start_pass+0x658>)
 800cea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceaa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ceae:	fb03 f301 	mul.w	r3, r3, r1
 800ceb2:	f503 6200 	add.w	r2, r3, #2048	; 0x800
	  ifmtbl[i] = (IFAST_MULT_TYPE)
 800ceb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb8:	009b      	lsls	r3, r3, #2
 800ceba:	68f9      	ldr	r1, [r7, #12]
 800cebc:	440b      	add	r3, r1
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 800cebe:	1312      	asrs	r2, r2, #12
	  ifmtbl[i] = (IFAST_MULT_TYPE)
 800cec0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < DCTSIZE2; i++) {
 800cec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec4:	3301      	adds	r3, #1
 800cec6:	633b      	str	r3, [r7, #48]	; 0x30
 800cec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceca:	2b3f      	cmp	r3, #63	; 0x3f
 800cecc:	dde6      	ble.n	800ce9c <start_pass+0x550>
				  (INT32) aanscales[i]),
		    CONST_BITS-IFAST_SCALE_BITS);
	}
      }
      break;
 800cece:	e058      	b.n	800cf82 <start_pass+0x636>
	 * coefficients scaled by scalefactor[row]*scalefactor[col], where
	 *   scalefactor[0] = 1
	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
	 * We apply a further scale factor of 1/8.
	 */
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800ced0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ced4:	613b      	str	r3, [r7, #16]
	static const double aanscalefactor[DCTSIZE] = {
	  1.0, 1.387039845, 1.306562965, 1.175875602,
	  1.0, 0.785694958, 0.541196100, 0.275899379
	};

	i = 0;
 800ced6:	2300      	movs	r3, #0
 800ced8:	633b      	str	r3, [r7, #48]	; 0x30
	for (row = 0; row < DCTSIZE; row++) {
 800ceda:	2300      	movs	r3, #0
 800cedc:	623b      	str	r3, [r7, #32]
 800cede:	e03f      	b.n	800cf60 <start_pass+0x614>
	  for (col = 0; col < DCTSIZE; col++) {
 800cee0:	2300      	movs	r3, #0
 800cee2:	61fb      	str	r3, [r7, #28]
 800cee4:	e036      	b.n	800cf54 <start_pass+0x608>
	    fmtbl[i] = (FLOAT_MULT_TYPE)
	      ((double) qtbl->quantval[i] *
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ceea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800ceee:	4618      	mov	r0, r3
 800cef0:	f7f3 fb08 	bl	8000504 <__aeabi_ui2d>
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800cef4:	4a2c      	ldr	r2, [pc, #176]	; (800cfa8 <start_pass+0x65c>)
 800cef6:	6a3b      	ldr	r3, [r7, #32]
 800cef8:	00db      	lsls	r3, r3, #3
 800cefa:	4413      	add	r3, r2
 800cefc:	e9d3 2300 	ldrd	r2, r3, [r3]
	      ((double) qtbl->quantval[i] *
 800cf00:	f7f3 fb7a 	bl	80005f8 <__aeabi_dmul>
 800cf04:	4602      	mov	r2, r0
 800cf06:	460b      	mov	r3, r1
 800cf08:	4610      	mov	r0, r2
 800cf0a:	4619      	mov	r1, r3
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800cf0c:	4a26      	ldr	r2, [pc, #152]	; (800cfa8 <start_pass+0x65c>)
 800cf0e:	69fb      	ldr	r3, [r7, #28]
 800cf10:	00db      	lsls	r3, r3, #3
 800cf12:	4413      	add	r3, r2
 800cf14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf18:	f7f3 fb6e 	bl	80005f8 <__aeabi_dmul>
 800cf1c:	4602      	mov	r2, r0
 800cf1e:	460b      	mov	r3, r1
 800cf20:	4610      	mov	r0, r2
 800cf22:	4619      	mov	r1, r3
 800cf24:	f04f 0200 	mov.w	r2, #0
 800cf28:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cf2c:	f7f3 fb64 	bl	80005f8 <__aeabi_dmul>
 800cf30:	4602      	mov	r2, r0
 800cf32:	460b      	mov	r3, r1
 800cf34:	4610      	mov	r0, r2
 800cf36:	4619      	mov	r1, r3
	    fmtbl[i] = (FLOAT_MULT_TYPE)
 800cf38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf3a:	009b      	lsls	r3, r3, #2
 800cf3c:	693a      	ldr	r2, [r7, #16]
 800cf3e:	18d4      	adds	r4, r2, r3
 800cf40:	f7f3 fd6c 	bl	8000a1c <__aeabi_d2f>
 800cf44:	4603      	mov	r3, r0
 800cf46:	6023      	str	r3, [r4, #0]
	    i++;
 800cf48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	633b      	str	r3, [r7, #48]	; 0x30
	  for (col = 0; col < DCTSIZE; col++) {
 800cf4e:	69fb      	ldr	r3, [r7, #28]
 800cf50:	3301      	adds	r3, #1
 800cf52:	61fb      	str	r3, [r7, #28]
 800cf54:	69fb      	ldr	r3, [r7, #28]
 800cf56:	2b07      	cmp	r3, #7
 800cf58:	ddc5      	ble.n	800cee6 <start_pass+0x59a>
	for (row = 0; row < DCTSIZE; row++) {
 800cf5a:	6a3b      	ldr	r3, [r7, #32]
 800cf5c:	3301      	adds	r3, #1
 800cf5e:	623b      	str	r3, [r7, #32]
 800cf60:	6a3b      	ldr	r3, [r7, #32]
 800cf62:	2b07      	cmp	r3, #7
 800cf64:	ddbc      	ble.n	800cee0 <start_pass+0x594>
	  }
	}
      }
      break;
 800cf66:	e00c      	b.n	800cf82 <start_pass+0x636>
#endif
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	2231      	movs	r2, #49	; 0x31
 800cf6e:	615a      	str	r2, [r3, #20]
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	4798      	blx	r3
      break;
 800cf7a:	e002      	b.n	800cf82 <start_pass+0x636>
      continue;
 800cf7c:	bf00      	nop
 800cf7e:	e000      	b.n	800cf82 <start_pass+0x636>
      continue;
 800cf80:	bf00      	nop
       ci++, compptr++) {
 800cf82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf84:	3301      	adds	r3, #1
 800cf86:	637b      	str	r3, [r7, #52]	; 0x34
 800cf88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8a:	3358      	adds	r3, #88	; 0x58
 800cf8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf94:	429a      	cmp	r2, r3
 800cf96:	f6ff acec 	blt.w	800c972 <start_pass+0x26>
    }
  }
}
 800cf9a:	bf00      	nop
 800cf9c:	bf00      	nop
 800cf9e:	373c      	adds	r7, #60	; 0x3c
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd90      	pop	{r4, r7, pc}
 800cfa4:	08026ecc 	.word	0x08026ecc
 800cfa8:	08026f50 	.word	0x08026f50

0800cfac <jinit_inverse_dct>:
 * Initialize IDCT manager.
 */

GLOBAL(void)
jinit_inverse_dct (j_decompress_ptr cinfo)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b086      	sub	sp, #24
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  my_idct_ptr idct;
  int ci;
  jpeg_component_info *compptr;

  idct = (my_idct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	685b      	ldr	r3, [r3, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	2254      	movs	r2, #84	; 0x54
 800cfbc:	2101      	movs	r1, #1
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	4798      	blx	r3
 800cfc2:	60f8      	str	r0, [r7, #12]
				SIZEOF(my_idct_controller));
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	68fa      	ldr	r2, [r7, #12]
 800cfc8:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
  idct->pub.start_pass = start_pass;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	4a1a      	ldr	r2, [pc, #104]	; (800d038 <jinit_inverse_dct+0x8c>)
 800cfd0:	601a      	str	r2, [r3, #0]

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	617b      	str	r3, [r7, #20]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800cfdc:	613b      	str	r3, [r7, #16]
 800cfde:	e020      	b.n	800d022 <jinit_inverse_dct+0x76>
       ci++, compptr++) {
    /* Allocate and pre-zero a multiplier table for each component */
    compptr->dct_table =
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cfea:	2101      	movs	r1, #1
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	4798      	blx	r3
 800cff0:	4602      	mov	r2, r0
    compptr->dct_table =
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	655a      	str	r2, [r3, #84]	; 0x54
				  SIZEOF(multiplier_table));
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cffa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cffe:	2100      	movs	r1, #0
 800d000:	4618      	mov	r0, r3
 800d002:	f017 ffb1 	bl	8024f68 <memset>
    /* Mark multiplier table not yet set up for any method */
    idct->cur_method[ci] = -1;
 800d006:	68fa      	ldr	r2, [r7, #12]
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	330a      	adds	r3, #10
 800d00c:	009b      	lsls	r3, r3, #2
 800d00e:	4413      	add	r3, r2
 800d010:	f04f 32ff 	mov.w	r2, #4294967295
 800d014:	605a      	str	r2, [r3, #4]
       ci++, compptr++) {
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	3301      	adds	r3, #1
 800d01a:	617b      	str	r3, [r7, #20]
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	3358      	adds	r3, #88	; 0x58
 800d020:	613b      	str	r3, [r7, #16]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d026:	697a      	ldr	r2, [r7, #20]
 800d028:	429a      	cmp	r2, r3
 800d02a:	dbd9      	blt.n	800cfe0 <jinit_inverse_dct+0x34>
  }
}
 800d02c:	bf00      	nop
 800d02e:	bf00      	nop
 800d030:	3718      	adds	r7, #24
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
 800d036:	bf00      	nop
 800d038:	0800c94d 	.word	0x0800c94d

0800d03c <jpeg_make_d_derived_tbl>:
 */

LOCAL(void)
jpeg_make_d_derived_tbl (j_decompress_ptr cinfo, boolean isDC, int tblno,
			 d_derived_tbl ** pdtbl)
{
 800d03c:	b590      	push	{r4, r7, lr}
 800d03e:	f2ad 5d4c 	subw	sp, sp, #1356	; 0x54c
 800d042:	af00      	add	r7, sp, #0
 800d044:	f107 040c 	add.w	r4, r7, #12
 800d048:	6020      	str	r0, [r4, #0]
 800d04a:	f107 0008 	add.w	r0, r7, #8
 800d04e:	6001      	str	r1, [r0, #0]
 800d050:	1d39      	adds	r1, r7, #4
 800d052:	600a      	str	r2, [r1, #0]
 800d054:	463a      	mov	r2, r7
 800d056:	6013      	str	r3, [r2, #0]
  /* Note that huffsize[] and huffcode[] are filled in code-length order,
   * paralleling the order of the symbols themselves in htbl->huffval[].
   */

  /* Find the input Huffman table */
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800d058:	1d3b      	adds	r3, r7, #4
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	db03      	blt.n	800d068 <jpeg_make_d_derived_tbl+0x2c>
 800d060:	1d3b      	adds	r3, r7, #4
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	2b03      	cmp	r3, #3
 800d066:	dd15      	ble.n	800d094 <jpeg_make_d_derived_tbl+0x58>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800d068:	f107 030c 	add.w	r3, r7, #12
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	2234      	movs	r2, #52	; 0x34
 800d072:	615a      	str	r2, [r3, #20]
 800d074:	f107 030c 	add.w	r3, r7, #12
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	1d3a      	adds	r2, r7, #4
 800d07e:	6812      	ldr	r2, [r2, #0]
 800d080:	619a      	str	r2, [r3, #24]
 800d082:	f107 030c 	add.w	r3, r7, #12
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f107 020c 	add.w	r2, r7, #12
 800d090:	6810      	ldr	r0, [r2, #0]
 800d092:	4798      	blx	r3
  htbl =
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800d094:	f107 0308 	add.w	r3, r7, #8
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d009      	beq.n	800d0b2 <jpeg_make_d_derived_tbl+0x76>
 800d09e:	f107 030c 	add.w	r3, r7, #12
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	1d3b      	adds	r3, r7, #4
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	332c      	adds	r3, #44	; 0x2c
 800d0aa:	009b      	lsls	r3, r3, #2
 800d0ac:	4413      	add	r3, r2
 800d0ae:	685b      	ldr	r3, [r3, #4]
 800d0b0:	e008      	b.n	800d0c4 <jpeg_make_d_derived_tbl+0x88>
 800d0b2:	f107 030c 	add.w	r3, r7, #12
 800d0b6:	681a      	ldr	r2, [r3, #0]
 800d0b8:	1d3b      	adds	r3, r7, #4
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	3330      	adds	r3, #48	; 0x30
 800d0be:	009b      	lsls	r3, r3, #2
 800d0c0:	4413      	add	r3, r2
 800d0c2:	685b      	ldr	r3, [r3, #4]
  htbl =
 800d0c4:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
  if (htbl == NULL)
 800d0c8:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d115      	bne.n	800d0fc <jpeg_make_d_derived_tbl+0xc0>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800d0d0:	f107 030c 	add.w	r3, r7, #12
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	2234      	movs	r2, #52	; 0x34
 800d0da:	615a      	str	r2, [r3, #20]
 800d0dc:	f107 030c 	add.w	r3, r7, #12
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	1d3a      	adds	r2, r7, #4
 800d0e6:	6812      	ldr	r2, [r2, #0]
 800d0e8:	619a      	str	r2, [r3, #24]
 800d0ea:	f107 030c 	add.w	r3, r7, #12
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f107 020c 	add.w	r2, r7, #12
 800d0f8:	6810      	ldr	r0, [r2, #0]
 800d0fa:	4798      	blx	r3

  /* Allocate a workspace if we haven't already done so. */
  if (*pdtbl == NULL)
 800d0fc:	463b      	mov	r3, r7
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d10f      	bne.n	800d126 <jpeg_make_d_derived_tbl+0xea>
    *pdtbl = (d_derived_tbl *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d106:	f107 030c 	add.w	r3, r7, #12
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f107 000c 	add.w	r0, r7, #12
 800d114:	f44f 62b2 	mov.w	r2, #1424	; 0x590
 800d118:	2101      	movs	r1, #1
 800d11a:	6800      	ldr	r0, [r0, #0]
 800d11c:	4798      	blx	r3
 800d11e:	4602      	mov	r2, r0
    *pdtbl = (d_derived_tbl *)
 800d120:	463b      	mov	r3, r7
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	601a      	str	r2, [r3, #0]
				  SIZEOF(d_derived_tbl));
  dtbl = *pdtbl;
 800d126:	463b      	mov	r3, r7
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  dtbl->pub = htbl;		/* fill in back link */
 800d130:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800d134:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 800d138:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
  /* Figure C.1: make table of Huffman code length for each symbol */

  p = 0;
 800d13c:	2300      	movs	r3, #0
 800d13e:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
  for (l = 1; l <= 16; l++) {
 800d142:	2301      	movs	r3, #1
 800d144:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 800d148:	e03a      	b.n	800d1c0 <jpeg_make_d_derived_tbl+0x184>
    i = (int) htbl->bits[l];
 800d14a:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 800d14e:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800d152:	4413      	add	r3, r2
 800d154:	781b      	ldrb	r3, [r3, #0]
 800d156:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
    if (i < 0 || p + i > 256)	/* protect against table overrun */
 800d15a:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800d15e:	2b00      	cmp	r3, #0
 800d160:	db07      	blt.n	800d172 <jpeg_make_d_derived_tbl+0x136>
 800d162:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 800d166:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800d16a:	4413      	add	r3, r2
 800d16c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d170:	dd1a      	ble.n	800d1a8 <jpeg_make_d_derived_tbl+0x16c>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800d172:	f107 030c 	add.w	r3, r7, #12
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	2209      	movs	r2, #9
 800d17c:	615a      	str	r2, [r3, #20]
 800d17e:	f107 030c 	add.w	r3, r7, #12
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f107 020c 	add.w	r2, r7, #12
 800d18c:	6810      	ldr	r0, [r2, #0]
 800d18e:	4798      	blx	r3
    while (i--)
 800d190:	e00a      	b.n	800d1a8 <jpeg_make_d_derived_tbl+0x16c>
      huffsize[p++] = (char) l;
 800d192:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800d196:	1c5a      	adds	r2, r3, #1
 800d198:	f8c7 2544 	str.w	r2, [r7, #1348]	; 0x544
 800d19c:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 800d1a0:	b2d1      	uxtb	r1, r2
 800d1a2:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800d1a6:	54d1      	strb	r1, [r2, r3]
    while (i--)
 800d1a8:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800d1ac:	1e5a      	subs	r2, r3, #1
 800d1ae:	f8c7 2540 	str.w	r2, [r7, #1344]	; 0x540
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d1ed      	bne.n	800d192 <jpeg_make_d_derived_tbl+0x156>
  for (l = 1; l <= 16; l++) {
 800d1b6:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 800d1c0:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800d1c4:	2b10      	cmp	r3, #16
 800d1c6:	ddc0      	ble.n	800d14a <jpeg_make_d_derived_tbl+0x10e>
  }
  huffsize[p] = 0;
 800d1c8:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800d1cc:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800d1d0:	4413      	add	r3, r2
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	701a      	strb	r2, [r3, #0]
  numsymbols = p;
 800d1d6:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800d1da:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
  
  /* Figure C.2: generate the codes themselves */
  /* We also validate that the counts represent a legal Huffman code tree. */
  
  code = 0;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
  si = huffsize[0];
 800d1e4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
  p = 0;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
  while (huffsize[p]) {
 800d1f4:	e03b      	b.n	800d26e <jpeg_make_d_derived_tbl+0x232>
    while (((int) huffsize[p]) == si) {
      huffcode[p++] = code;
 800d1f6:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800d1fa:	1c5a      	adds	r2, r3, #1
 800d1fc:	f8c7 2544 	str.w	r2, [r7, #1348]	; 0x544
 800d200:	f107 0214 	add.w	r2, r7, #20
 800d204:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 800d208:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      code++;
 800d20c:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800d210:	3301      	adds	r3, #1
 800d212:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
    while (((int) huffsize[p]) == si) {
 800d216:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800d21a:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800d21e:	4413      	add	r3, r2
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	461a      	mov	r2, r3
 800d224:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 800d228:	4293      	cmp	r3, r2
 800d22a:	d0e4      	beq.n	800d1f6 <jpeg_make_d_derived_tbl+0x1ba>
    }
    /* code is now 1 more than the last code used for codelength si; but
     * it must still fit in si bits, since no code is allowed to be all ones.
     */
    if (((INT32) code) >= (((INT32) 1) << si))
 800d22c:	2201      	movs	r2, #1
 800d22e:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 800d232:	409a      	lsls	r2, r3
 800d234:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800d238:	429a      	cmp	r2, r3
 800d23a:	dc0e      	bgt.n	800d25a <jpeg_make_d_derived_tbl+0x21e>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800d23c:	f107 030c 	add.w	r3, r7, #12
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	2209      	movs	r2, #9
 800d246:	615a      	str	r2, [r3, #20]
 800d248:	f107 030c 	add.w	r3, r7, #12
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f107 020c 	add.w	r2, r7, #12
 800d256:	6810      	ldr	r0, [r2, #0]
 800d258:	4798      	blx	r3
    code <<= 1;
 800d25a:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800d25e:	005b      	lsls	r3, r3, #1
 800d260:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
    si++;
 800d264:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 800d268:	3301      	adds	r3, #1
 800d26a:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
  while (huffsize[p]) {
 800d26e:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800d272:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800d276:	4413      	add	r3, r2
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d1cb      	bne.n	800d216 <jpeg_make_d_derived_tbl+0x1da>
  }

  /* Figure F.15: generate decoding tables for bit-sequential decoding */

  p = 0;
 800d27e:	2300      	movs	r3, #0
 800d280:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
  for (l = 1; l <= 16; l++) {
 800d284:	2301      	movs	r3, #1
 800d286:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 800d28a:	e040      	b.n	800d30e <jpeg_make_d_derived_tbl+0x2d2>
    if (htbl->bits[l]) {
 800d28c:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 800d290:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800d294:	4413      	add	r3, r2
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d02b      	beq.n	800d2f4 <jpeg_make_d_derived_tbl+0x2b8>
      /* valoffset[l] = huffval[] index of 1st symbol of code length l,
       * minus the minimum code of length l
       */
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800d29c:	f107 0314 	add.w	r3, r7, #20
 800d2a0:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 800d2a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2a8:	461a      	mov	r2, r3
 800d2aa:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800d2ae:	1a99      	subs	r1, r3, r2
 800d2b0:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800d2b4:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 800d2b8:	3212      	adds	r2, #18
 800d2ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      p += htbl->bits[l];
 800d2be:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 800d2c2:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800d2c6:	4413      	add	r3, r2
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	461a      	mov	r2, r3
 800d2cc:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800d2d0:	4413      	add	r3, r2
 800d2d2:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
      dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 800d2d6:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800d2da:	1e5a      	subs	r2, r3, #1
 800d2dc:	f107 0314 	add.w	r3, r7, #20
 800d2e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2e4:	4619      	mov	r1, r3
 800d2e6:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800d2ea:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 800d2ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d2f2:	e007      	b.n	800d304 <jpeg_make_d_derived_tbl+0x2c8>
    } else {
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 800d2f4:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800d2f8:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 800d2fc:	f04f 31ff 	mov.w	r1, #4294967295
 800d300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (l = 1; l <= 16; l++) {
 800d304:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800d308:	3301      	adds	r3, #1
 800d30a:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 800d30e:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800d312:	2b10      	cmp	r3, #16
 800d314:	ddba      	ble.n	800d28c <jpeg_make_d_derived_tbl+0x250>
    }
  }
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800d316:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800d31a:	4a56      	ldr	r2, [pc, #344]	; (800d474 <jpeg_make_d_derived_tbl+0x438>)
 800d31c:	645a      	str	r2, [r3, #68]	; 0x44
   * then we iterate through the Huffman codes that are short enough and
   * fill in all the entries that correspond to bit sequences starting
   * with that code.
   */

  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800d31e:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800d322:	3390      	adds	r3, #144	; 0x90
 800d324:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d328:	2100      	movs	r1, #0
 800d32a:	4618      	mov	r0, r3
 800d32c:	f017 fe1c 	bl	8024f68 <memset>

  p = 0;
 800d330:	2300      	movs	r3, #0
 800d332:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800d336:	2301      	movs	r3, #1
 800d338:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 800d33c:	e05c      	b.n	800d3f8 <jpeg_make_d_derived_tbl+0x3bc>
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800d33e:	2301      	movs	r3, #1
 800d340:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
 800d344:	e048      	b.n	800d3d8 <jpeg_make_d_derived_tbl+0x39c>
      /* l = current code's length, p = its index in huffcode[] & huffval[]. */
      /* Generate left-justified code followed by all possible bit sequences */
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800d346:	f107 0314 	add.w	r3, r7, #20
 800d34a:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 800d34e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d352:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800d356:	f1c3 0308 	rsb	r3, r3, #8
 800d35a:	fa02 f303 	lsl.w	r3, r2, r3
 800d35e:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800d362:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800d366:	f1c3 0308 	rsb	r3, r3, #8
 800d36a:	2201      	movs	r2, #1
 800d36c:	fa02 f303 	lsl.w	r3, r2, r3
 800d370:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
 800d374:	e022      	b.n	800d3bc <jpeg_make_d_derived_tbl+0x380>
	dtbl->look_nbits[lookbits] = l;
 800d376:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800d37a:	f8d7 2534 	ldr.w	r2, [r7, #1332]	; 0x534
 800d37e:	3224      	adds	r2, #36	; 0x24
 800d380:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
 800d384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800d388:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 800d38c:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800d390:	4413      	add	r3, r2
 800d392:	3311      	adds	r3, #17
 800d394:	7819      	ldrb	r1, [r3, #0]
 800d396:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800d39a:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 800d39e:	4413      	add	r3, r2
 800d3a0:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 800d3a4:	460a      	mov	r2, r1
 800d3a6:	701a      	strb	r2, [r3, #0]
	lookbits++;
 800d3a8:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 800d3ac:	3301      	adds	r3, #1
 800d3ae:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800d3b2:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 800d3b6:	3b01      	subs	r3, #1
 800d3b8:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
 800d3bc:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	dcd8      	bgt.n	800d376 <jpeg_make_d_derived_tbl+0x33a>
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800d3c4:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
 800d3ce:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 800d3d8:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 800d3dc:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800d3e0:	4413      	add	r3, r2
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	461a      	mov	r2, r3
 800d3e6:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	ddab      	ble.n	800d346 <jpeg_make_d_derived_tbl+0x30a>
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800d3ee:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800d3f2:	3301      	adds	r3, #1
 800d3f4:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 800d3f8:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800d3fc:	2b08      	cmp	r3, #8
 800d3fe:	dd9e      	ble.n	800d33e <jpeg_make_d_derived_tbl+0x302>
   * For AC tables, we make no check, but accept all byte values 0..255.
   * For DC tables, we require the symbols to be in range 0..15.
   * (Tighter bounds could be applied depending on the data depth and mode,
   * but this is sufficient to ensure safe decoding.)
   */
  if (isDC) {
 800d400:	f107 0308 	add.w	r3, r7, #8
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d02e      	beq.n	800d468 <jpeg_make_d_derived_tbl+0x42c>
    for (i = 0; i < numsymbols; i++) {
 800d40a:	2300      	movs	r3, #0
 800d40c:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
 800d410:	e024      	b.n	800d45c <jpeg_make_d_derived_tbl+0x420>
      int sym = htbl->huffval[i];
 800d412:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 800d416:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800d41a:	4413      	add	r3, r2
 800d41c:	3311      	adds	r3, #17
 800d41e:	781b      	ldrb	r3, [r3, #0]
 800d420:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
      if (sym < 0 || sym > 15)
 800d424:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800d428:	2b00      	cmp	r3, #0
 800d42a:	db03      	blt.n	800d434 <jpeg_make_d_derived_tbl+0x3f8>
 800d42c:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800d430:	2b0f      	cmp	r3, #15
 800d432:	dd0e      	ble.n	800d452 <jpeg_make_d_derived_tbl+0x416>
	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800d434:	f107 030c 	add.w	r3, r7, #12
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	2209      	movs	r2, #9
 800d43e:	615a      	str	r2, [r3, #20]
 800d440:	f107 030c 	add.w	r3, r7, #12
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f107 020c 	add.w	r2, r7, #12
 800d44e:	6810      	ldr	r0, [r2, #0]
 800d450:	4798      	blx	r3
    for (i = 0; i < numsymbols; i++) {
 800d452:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 800d456:	3301      	adds	r3, #1
 800d458:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
 800d45c:	f8d7 2540 	ldr.w	r2, [r7, #1344]	; 0x540
 800d460:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800d464:	429a      	cmp	r2, r3
 800d466:	dbd4      	blt.n	800d412 <jpeg_make_d_derived_tbl+0x3d6>
    }
  }
}
 800d468:	bf00      	nop
 800d46a:	f207 574c 	addw	r7, r7, #1356	; 0x54c
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd90      	pop	{r4, r7, pc}
 800d472:	bf00      	nop
 800d474:	000fffff 	.word	0x000fffff

0800d478 <jpeg_fill_bit_buffer>:
LOCAL(boolean)
jpeg_fill_bit_buffer (bitread_working_state * state,
		      register bit_buf_type get_buffer, register int bits_left,
		      int nbits)
/* Load up the bit buffer to a depth of at least nbits */
{
 800d478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d47a:	b087      	sub	sp, #28
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	6079      	str	r1, [r7, #4]
 800d482:	4615      	mov	r5, r2
 800d484:	60bb      	str	r3, [r7, #8]
  /* Copy heavily used state fields into locals (hopefully registers) */
  register const JOCTET * next_input_byte = state->next_input_byte;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681e      	ldr	r6, [r3, #0]
  register size_t bytes_in_buffer = state->bytes_in_buffer;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	685c      	ldr	r4, [r3, #4]
  j_decompress_ptr cinfo = state->cinfo;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	691b      	ldr	r3, [r3, #16]
 800d492:	617b      	str	r3, [r7, #20]

  /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
  /* (It is assumed that no request will be for more than that many bits.) */
  /* We fail to do so only if we hit a marker or are forced to suspend. */

  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d143      	bne.n	800d526 <jpeg_fill_bit_buffer+0xae>
    while (bits_left < MIN_GET_BITS) {
 800d49e:	e03f      	b.n	800d520 <jpeg_fill_bit_buffer+0xa8>
      register int c;

      /* Attempt to read a byte */
      if (bytes_in_buffer == 0) {
 800d4a0:	2c00      	cmp	r4, #0
 800d4a2:	d10f      	bne.n	800d4c4 <jpeg_fill_bit_buffer+0x4c>
	if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	699b      	ldr	r3, [r3, #24]
 800d4a8:	68db      	ldr	r3, [r3, #12]
 800d4aa:	6978      	ldr	r0, [r7, #20]
 800d4ac:	4798      	blx	r3
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d101      	bne.n	800d4b8 <jpeg_fill_bit_buffer+0x40>
	  return FALSE;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	e060      	b.n	800d57a <jpeg_fill_bit_buffer+0x102>
	next_input_byte = cinfo->src->next_input_byte;
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	699b      	ldr	r3, [r3, #24]
 800d4bc:	681e      	ldr	r6, [r3, #0]
	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	699b      	ldr	r3, [r3, #24]
 800d4c2:	685c      	ldr	r4, [r3, #4]
      }
      bytes_in_buffer--;
 800d4c4:	3c01      	subs	r4, #1
      c = GETJOCTET(*next_input_byte++);
 800d4c6:	4633      	mov	r3, r6
 800d4c8:	1c5e      	adds	r6, r3, #1
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	461a      	mov	r2, r3

      /* If it's 0xFF, check and discard stuffed zero byte */
      if (c == 0xFF) {
 800d4ce:	2bff      	cmp	r3, #255	; 0xff
 800d4d0:	d121      	bne.n	800d516 <jpeg_fill_bit_buffer+0x9e>
	 * so that we can save a valid unread_marker value.  NOTE: we will
	 * accept multiple FF's followed by a 0 as meaning a single FF data
	 * byte.  This data pattern is not valid according to the standard.
	 */
	do {
	  if (bytes_in_buffer == 0) {
 800d4d2:	2c00      	cmp	r4, #0
 800d4d4:	d10f      	bne.n	800d4f6 <jpeg_fill_bit_buffer+0x7e>
	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	699b      	ldr	r3, [r3, #24]
 800d4da:	68db      	ldr	r3, [r3, #12]
 800d4dc:	6978      	ldr	r0, [r7, #20]
 800d4de:	4798      	blx	r3
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d101      	bne.n	800d4ea <jpeg_fill_bit_buffer+0x72>
	      return FALSE;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	e047      	b.n	800d57a <jpeg_fill_bit_buffer+0x102>
	    next_input_byte = cinfo->src->next_input_byte;
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	699b      	ldr	r3, [r3, #24]
 800d4ee:	681e      	ldr	r6, [r3, #0]
	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	699b      	ldr	r3, [r3, #24]
 800d4f4:	685c      	ldr	r4, [r3, #4]
	  }
	  bytes_in_buffer--;
 800d4f6:	3c01      	subs	r4, #1
	  c = GETJOCTET(*next_input_byte++);
 800d4f8:	4633      	mov	r3, r6
 800d4fa:	1c5e      	adds	r6, r3, #1
 800d4fc:	781b      	ldrb	r3, [r3, #0]
 800d4fe:	461a      	mov	r2, r3
	} while (c == 0xFF);
 800d500:	2bff      	cmp	r3, #255	; 0xff
 800d502:	d0e6      	beq.n	800d4d2 <jpeg_fill_bit_buffer+0x5a>

	if (c == 0) {
 800d504:	2b00      	cmp	r3, #0
 800d506:	d102      	bne.n	800d50e <jpeg_fill_bit_buffer+0x96>
	  /* Found FF/00, which represents an FF data byte */
	  c = 0xFF;
 800d508:	23ff      	movs	r3, #255	; 0xff
 800d50a:	461a      	mov	r2, r3
 800d50c:	e003      	b.n	800d516 <jpeg_fill_bit_buffer+0x9e>
	   * bitread working state, not straight into permanent state.  But
	   * once we have hit a marker, we cannot need to suspend within the
	   * current MCU, because we will read no more bytes from the data
	   * source.  So it is OK to update permanent state right away.
	   */
	  cinfo->unread_marker = c;
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
	  /* See if we need to insert some fake zero bits. */
	  goto no_more_bytes;
 800d514:	e008      	b.n	800d528 <jpeg_fill_bit_buffer+0xb0>
	}
      }

      /* OK, load c into get_buffer */
      get_buffer = (get_buffer << 8) | c;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	021b      	lsls	r3, r3, #8
 800d51a:	431a      	orrs	r2, r3
 800d51c:	607a      	str	r2, [r7, #4]
      bits_left += 8;
 800d51e:	3508      	adds	r5, #8
    while (bits_left < MIN_GET_BITS) {
 800d520:	2d18      	cmp	r5, #24
 800d522:	ddbd      	ble.n	800d4a0 <jpeg_fill_bit_buffer+0x28>
 800d524:	e01f      	b.n	800d566 <jpeg_fill_bit_buffer+0xee>
    } /* end while */
  } else {
  no_more_bytes:
 800d526:	bf00      	nop
    /* We get here if we've read the marker that terminates the compressed
     * data segment.  There should be enough bits in the buffer register
     * to satisfy the request; if so, no problem.
     */
    if (nbits > bits_left) {
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	42ab      	cmp	r3, r5
 800d52c:	dd1b      	ble.n	800d566 <jpeg_fill_bit_buffer+0xee>
      /* Uh-oh.  Report corrupted data to user and stuff zeroes into
       * the data stream, so that we can produce some kind of image.
       * We use a nonvolatile flag to ensure that only one warning message
       * appears per data segment.
       */
      if (! ((huff_entropy_ptr) cinfo->entropy)->insufficient_data) {
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800d534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d536:	2b00      	cmp	r3, #0
 800d538:	d10f      	bne.n	800d55a <jpeg_fill_bit_buffer+0xe2>
	WARNMS(cinfo, JWRN_HIT_MARKER);
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	2278      	movs	r2, #120	; 0x78
 800d540:	615a      	str	r2, [r3, #20]
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	685b      	ldr	r3, [r3, #4]
 800d548:	f04f 31ff 	mov.w	r1, #4294967295
 800d54c:	6978      	ldr	r0, [r7, #20]
 800d54e:	4798      	blx	r3
	((huff_entropy_ptr) cinfo->entropy)->insufficient_data = TRUE;
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800d556:	2201      	movs	r2, #1
 800d558:	625a      	str	r2, [r3, #36]	; 0x24
      }
      /* Fill the buffer with zero bits */
      get_buffer <<= MIN_GET_BITS - bits_left;
 800d55a:	f1c5 0319 	rsb	r3, r5, #25
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	409a      	lsls	r2, r3
 800d562:	607a      	str	r2, [r7, #4]
      bits_left = MIN_GET_BITS;
 800d564:	2519      	movs	r5, #25
    }
  }

  /* Unload the local registers */
  state->next_input_byte = next_input_byte;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	601e      	str	r6, [r3, #0]
  state->bytes_in_buffer = bytes_in_buffer;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	605c      	str	r4, [r3, #4]
  state->get_buffer = get_buffer;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	687a      	ldr	r2, [r7, #4]
 800d572:	609a      	str	r2, [r3, #8]
  state->bits_left = bits_left;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	60dd      	str	r5, [r3, #12]

  return TRUE;
 800d578:	2301      	movs	r3, #1
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	371c      	adds	r7, #28
 800d57e:	46bd      	mov	sp, r7
 800d580:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800d584 <jpeg_huff_decode>:

LOCAL(int)
jpeg_huff_decode (bitread_working_state * state,
		  register bit_buf_type get_buffer, register int bits_left,
		  d_derived_tbl * htbl, int min_bits)
{
 800d584:	b5b0      	push	{r4, r5, r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	603b      	str	r3, [r7, #0]
  register int l = min_bits;
 800d58e:	69bc      	ldr	r4, [r7, #24]
  register INT32 code;

  /* HUFF_DECODE has determined that the code is at least min_bits */
  /* bits long, so fetch that many bits in one swoop. */

  CHECK_BIT_BUFFER(*state, l, return -1);
 800d590:	42a2      	cmp	r2, r4
 800d592:	da0d      	bge.n	800d5b0 <jpeg_huff_decode+0x2c>
 800d594:	4623      	mov	r3, r4
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f7ff ff6e 	bl	800d478 <jpeg_fill_bit_buffer>
 800d59c:	4603      	mov	r3, r0
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d102      	bne.n	800d5a8 <jpeg_huff_decode+0x24>
 800d5a2:	f04f 33ff 	mov.w	r3, #4294967295
 800d5a6:	e04b      	b.n	800d640 <jpeg_huff_decode+0xbc>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6899      	ldr	r1, [r3, #8]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	68da      	ldr	r2, [r3, #12]
  code = GET_BITS(l);
 800d5b0:	1b12      	subs	r2, r2, r4
 800d5b2:	fa41 f002 	asr.w	r0, r1, r2
 800d5b6:	4b24      	ldr	r3, [pc, #144]	; (800d648 <jpeg_huff_decode+0xc4>)
 800d5b8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d5bc:	ea00 0503 	and.w	r5, r0, r3

  /* Collect the rest of the Huffman code one bit at a time. */
  /* This is per Figure F.16 in the JPEG spec. */

  while (code > htbl->maxcode[l]) {
 800d5c0:	e017      	b.n	800d5f2 <jpeg_huff_decode+0x6e>
    code <<= 1;
 800d5c2:	006d      	lsls	r5, r5, #1
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800d5c4:	2a00      	cmp	r2, #0
 800d5c6:	dc0d      	bgt.n	800d5e4 <jpeg_huff_decode+0x60>
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f7ff ff54 	bl	800d478 <jpeg_fill_bit_buffer>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d102      	bne.n	800d5dc <jpeg_huff_decode+0x58>
 800d5d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d5da:	e031      	b.n	800d640 <jpeg_huff_decode+0xbc>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6899      	ldr	r1, [r3, #8]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	68da      	ldr	r2, [r3, #12]
    code |= GET_BITS(1);
 800d5e4:	3a01      	subs	r2, #1
 800d5e6:	fa41 f302 	asr.w	r3, r1, r2
 800d5ea:	2001      	movs	r0, #1
 800d5ec:	4003      	ands	r3, r0
 800d5ee:	431d      	orrs	r5, r3
    l++;
 800d5f0:	3401      	adds	r4, #1
  while (code > htbl->maxcode[l]) {
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d5f8:	429d      	cmp	r5, r3
 800d5fa:	dce2      	bgt.n	800d5c2 <jpeg_huff_decode+0x3e>
  }

  /* Unload the local registers */
  state->get_buffer = get_buffer;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6099      	str	r1, [r3, #8]
  state->bits_left = bits_left;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	60da      	str	r2, [r3, #12]

  /* With garbage input we may reach the sentinel value l = 17. */

  if (l > 16) {
 800d604:	2c10      	cmp	r4, #16
 800d606:	dd10      	ble.n	800d62a <jpeg_huff_decode+0xa6>
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	691b      	ldr	r3, [r3, #16]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	2279      	movs	r2, #121	; 0x79
 800d610:	615a      	str	r2, [r3, #20]
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	691b      	ldr	r3, [r3, #16]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	687a      	ldr	r2, [r7, #4]
 800d61c:	6912      	ldr	r2, [r2, #16]
 800d61e:	f04f 31ff 	mov.w	r1, #4294967295
 800d622:	4610      	mov	r0, r2
 800d624:	4798      	blx	r3
    return 0;			/* fake a zero as the safest result */
 800d626:	2300      	movs	r3, #0
 800d628:	e00a      	b.n	800d640 <jpeg_huff_decode+0xbc>
  }

  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	f104 0112 	add.w	r1, r4, #18
 800d636:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d63a:	442b      	add	r3, r5
 800d63c:	4413      	add	r3, r2
 800d63e:	7c5b      	ldrb	r3, [r3, #17]
}
 800d640:	4618      	mov	r0, r3
 800d642:	3708      	adds	r7, #8
 800d644:	46bd      	mov	sp, r7
 800d646:	bdb0      	pop	{r4, r5, r7, pc}
 800d648:	080272bc 	.word	0x080272bc

0800d64c <process_restart>:
 * Returns FALSE if must suspend.
 */

LOCAL(boolean)
process_restart (j_decompress_ptr cinfo)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b084      	sub	sp, #16
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800d65a:	60bb      	str	r3, [r7, #8]
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800d662:	699a      	ldr	r2, [r3, #24]
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	68db      	ldr	r3, [r3, #12]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	da00      	bge.n	800d66e <process_restart+0x22>
 800d66c:	3307      	adds	r3, #7
 800d66e:	10db      	asrs	r3, r3, #3
 800d670:	4619      	mov	r1, r3
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800d678:	440a      	add	r2, r1
 800d67a:	619a      	str	r2, [r3, #24]
  entropy->bitstate.bits_left = 0;
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	2200      	movs	r2, #0
 800d680:	60da      	str	r2, [r3, #12]

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800d688:	689b      	ldr	r3, [r3, #8]
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	4798      	blx	r3
 800d68e:	4603      	mov	r3, r0
 800d690:	2b00      	cmp	r3, #0
 800d692:	d101      	bne.n	800d698 <process_restart+0x4c>
    return FALSE;
 800d694:	2300      	movs	r3, #0
 800d696:	e023      	b.n	800d6e0 <process_restart+0x94>

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
 800d698:	2300      	movs	r3, #0
 800d69a:	60fb      	str	r3, [r7, #12]
 800d69c:	e009      	b.n	800d6b2 <process_restart+0x66>
    entropy->saved.last_dc_val[ci] = 0;
 800d69e:	68ba      	ldr	r2, [r7, #8]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	3304      	adds	r3, #4
 800d6a4:	009b      	lsls	r3, r3, #2
 800d6a6:	4413      	add	r3, r2
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	605a      	str	r2, [r3, #4]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	3301      	adds	r3, #1
 800d6b0:	60fb      	str	r3, [r7, #12]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800d6b8:	68fa      	ldr	r2, [r7, #12]
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	dbef      	blt.n	800d69e <process_restart+0x52>
  /* Re-init EOB run count, too */
  entropy->saved.EOBRUN = 0;
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	611a      	str	r2, [r3, #16]

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	629a      	str	r2, [r3, #40]	; 0x28
  /* Reset out-of-data flag, unless read_restart_marker left us smack up
   * against a marker.  In that case we will end up treating the next data
   * segment as empty, and we can avoid producing bogus output pixels by
   * leaving the flag set.
   */
  if (cinfo->unread_marker == 0)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d102      	bne.n	800d6de <process_restart+0x92>
    entropy->insufficient_data = FALSE;
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	625a      	str	r2, [r3, #36]	; 0x24

  return TRUE;
 800d6de:	2301      	movs	r3, #1
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3710      	adds	r7, #16
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}

0800d6e8 <decode_mcu_DC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800d6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6ec:	b096      	sub	sp, #88	; 0x58
 800d6ee:	af02      	add	r7, sp, #8
 800d6f0:	6078      	str	r0, [r7, #4]
 800d6f2:	6039      	str	r1, [r7, #0]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800d6fa:	64bb      	str	r3, [r7, #72]	; 0x48
  int Al = cinfo->Al;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800d702:	647b      	str	r3, [r7, #68]	; 0x44
  savable_state state;
  d_derived_tbl * tbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d00b      	beq.n	800d726 <decode_mcu_DC_first+0x3e>
    if (entropy->restarts_to_go == 0)
 800d70e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d712:	2b00      	cmp	r3, #0
 800d714:	d107      	bne.n	800d726 <decode_mcu_DC_first+0x3e>
      if (! process_restart(cinfo))
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f7ff ff98 	bl	800d64c <process_restart>
 800d71c:	4603      	mov	r3, r0
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d101      	bne.n	800d726 <decode_mcu_DC_first+0x3e>
	return FALSE;
 800d722:	2300      	movs	r3, #0
 800d724:	e0d6      	b.n	800d8d4 <decode_mcu_DC_first+0x1ec>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800d726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	f040 80cc 	bne.w	800d8c8 <decode_mcu_DC_first+0x1e0>

    /* Load up working state */
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	633b      	str	r3, [r7, #48]	; 0x30
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	699b      	ldr	r3, [r3, #24]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	623b      	str	r3, [r7, #32]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	699b      	ldr	r3, [r3, #24]
 800d740:	685b      	ldr	r3, [r3, #4]
 800d742:	627b      	str	r3, [r7, #36]	; 0x24
 800d744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d746:	689e      	ldr	r6, [r3, #8]
 800d748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d74a:	68dc      	ldr	r4, [r3, #12]
    ASSIGN_STATE(state, entropy->saved);
 800d74c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d74e:	f107 050c 	add.w	r5, r7, #12
 800d752:	f103 0c10 	add.w	ip, r3, #16
 800d756:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d75a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d75c:	f8dc 3000 	ldr.w	r3, [ip]
 800d760:	602b      	str	r3, [r5, #0]

    /* Outer loop handles each block in the MCU */

    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d762:	2300      	movs	r3, #0
 800d764:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d766:	e093      	b.n	800d890 <decode_mcu_DC_first+0x1a8>
      block = MCU_data[blkn];
 800d768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d76a:	009b      	lsls	r3, r3, #2
 800d76c:	683a      	ldr	r2, [r7, #0]
 800d76e:	4413      	add	r3, r2
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	643b      	str	r3, [r7, #64]	; 0x40
      ci = cinfo->MCU_membership[blkn];
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d778:	325c      	adds	r2, #92	; 0x5c
 800d77a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d77e:	63fb      	str	r3, [r7, #60]	; 0x3c
      compptr = cinfo->cur_comp_info[ci];
 800d780:	687a      	ldr	r2, [r7, #4]
 800d782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d784:	3354      	adds	r3, #84	; 0x54
 800d786:	009b      	lsls	r3, r3, #2
 800d788:	4413      	add	r3, r2
 800d78a:	685b      	ldr	r3, [r3, #4]
 800d78c:	63bb      	str	r3, [r7, #56]	; 0x38
      tbl = entropy->derived_tbls[compptr->dc_tbl_no];
 800d78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d790:	695b      	ldr	r3, [r3, #20]
 800d792:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d794:	330a      	adds	r3, #10
 800d796:	009b      	lsls	r3, r3, #2
 800d798:	4413      	add	r3, r2
 800d79a:	685b      	ldr	r3, [r3, #4]
 800d79c:	637b      	str	r3, [r7, #52]	; 0x34

      /* Decode a single block's worth of coefficients */

      /* Section F.2.2.1: decode the DC coefficient difference */
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800d79e:	2c07      	cmp	r4, #7
 800d7a0:	dc11      	bgt.n	800d7c6 <decode_mcu_DC_first+0xde>
 800d7a2:	f107 0020 	add.w	r0, r7, #32
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	4622      	mov	r2, r4
 800d7aa:	4631      	mov	r1, r6
 800d7ac:	f7ff fe64 	bl	800d478 <jpeg_fill_bit_buffer>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d101      	bne.n	800d7ba <decode_mcu_DC_first+0xd2>
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	e08c      	b.n	800d8d4 <decode_mcu_DC_first+0x1ec>
 800d7ba:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800d7bc:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800d7be:	2c07      	cmp	r4, #7
 800d7c0:	dc01      	bgt.n	800d7c6 <decode_mcu_DC_first+0xde>
 800d7c2:	2501      	movs	r5, #1
 800d7c4:	e015      	b.n	800d7f2 <decode_mcu_DC_first+0x10a>
 800d7c6:	f1a4 0308 	sub.w	r3, r4, #8
 800d7ca:	fa46 f303 	asr.w	r3, r6, r3
 800d7ce:	22ff      	movs	r2, #255	; 0xff
 800d7d0:	ea03 0802 	and.w	r8, r3, r2
 800d7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7d6:	f108 0224 	add.w	r2, r8, #36	; 0x24
 800d7da:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800d7de:	2d00      	cmp	r5, #0
 800d7e0:	d006      	beq.n	800d7f0 <decode_mcu_DC_first+0x108>
 800d7e2:	1b64      	subs	r4, r4, r5
 800d7e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7e6:	4443      	add	r3, r8
 800d7e8:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800d7ec:	461d      	mov	r5, r3
 800d7ee:	e00f      	b.n	800d810 <decode_mcu_DC_first+0x128>
 800d7f0:	2509      	movs	r5, #9
 800d7f2:	f107 0020 	add.w	r0, r7, #32
 800d7f6:	9500      	str	r5, [sp, #0]
 800d7f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7fa:	4622      	mov	r2, r4
 800d7fc:	4631      	mov	r1, r6
 800d7fe:	f7ff fec1 	bl	800d584 <jpeg_huff_decode>
 800d802:	4605      	mov	r5, r0
 800d804:	2d00      	cmp	r5, #0
 800d806:	da01      	bge.n	800d80c <decode_mcu_DC_first+0x124>
 800d808:	2300      	movs	r3, #0
 800d80a:	e063      	b.n	800d8d4 <decode_mcu_DC_first+0x1ec>
 800d80c:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800d80e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
      if (s) {
 800d810:	2d00      	cmp	r5, #0
 800d812:	d025      	beq.n	800d860 <decode_mcu_DC_first+0x178>
	CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800d814:	42ac      	cmp	r4, r5
 800d816:	da0d      	bge.n	800d834 <decode_mcu_DC_first+0x14c>
 800d818:	f107 0020 	add.w	r0, r7, #32
 800d81c:	462b      	mov	r3, r5
 800d81e:	4622      	mov	r2, r4
 800d820:	4631      	mov	r1, r6
 800d822:	f7ff fe29 	bl	800d478 <jpeg_fill_bit_buffer>
 800d826:	4603      	mov	r3, r0
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d101      	bne.n	800d830 <decode_mcu_DC_first+0x148>
 800d82c:	2300      	movs	r3, #0
 800d82e:	e051      	b.n	800d8d4 <decode_mcu_DC_first+0x1ec>
 800d830:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800d832:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	r = GET_BITS(s);
 800d834:	1b64      	subs	r4, r4, r5
 800d836:	fa46 f204 	asr.w	r2, r6, r4
 800d83a:	4b29      	ldr	r3, [pc, #164]	; (800d8e0 <decode_mcu_DC_first+0x1f8>)
 800d83c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d840:	ea02 0803 	and.w	r8, r2, r3
	s = HUFF_EXTEND(r, s);
 800d844:	1e6b      	subs	r3, r5, #1
 800d846:	4a26      	ldr	r2, [pc, #152]	; (800d8e0 <decode_mcu_DC_first+0x1f8>)
 800d848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d84c:	4598      	cmp	r8, r3
 800d84e:	dc05      	bgt.n	800d85c <decode_mcu_DC_first+0x174>
 800d850:	4b23      	ldr	r3, [pc, #140]	; (800d8e0 <decode_mcu_DC_first+0x1f8>)
 800d852:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d856:	eba8 0303 	sub.w	r3, r8, r3
 800d85a:	e000      	b.n	800d85e <decode_mcu_DC_first+0x176>
 800d85c:	4643      	mov	r3, r8
 800d85e:	461d      	mov	r5, r3
      }

      /* Convert DC difference to actual value, update last_dc_val */
      s += state.last_dc_val[ci];
 800d860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d862:	009b      	lsls	r3, r3, #2
 800d864:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800d868:	4413      	add	r3, r2
 800d86a:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800d86e:	441d      	add	r5, r3
      state.last_dc_val[ci] = s;
 800d870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d872:	009b      	lsls	r3, r3, #2
 800d874:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800d878:	4413      	add	r3, r2
 800d87a:	f843 5c40 	str.w	r5, [r3, #-64]
      /* Scale and output the coefficient (assumes jpeg_natural_order[0]=0) */
      (*block)[0] = (JCOEF) (s << Al);
 800d87e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d880:	fa05 f303 	lsl.w	r3, r5, r3
 800d884:	b21a      	sxth	r2, r3
 800d886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d888:	801a      	strh	r2, [r3, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d88a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d88c:	3301      	adds	r3, #1
 800d88e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800d896:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d898:	429a      	cmp	r2, r3
 800d89a:	f6ff af65 	blt.w	800d768 <decode_mcu_DC_first+0x80>
    }

    /* Completed MCU, so update state */
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	699b      	ldr	r3, [r3, #24]
 800d8a2:	6a3a      	ldr	r2, [r7, #32]
 800d8a4:	601a      	str	r2, [r3, #0]
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	699b      	ldr	r3, [r3, #24]
 800d8aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8ac:	605a      	str	r2, [r3, #4]
 800d8ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8b0:	609e      	str	r6, [r3, #8]
 800d8b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8b4:	60dc      	str	r4, [r3, #12]
    ASSIGN_STATE(entropy->saved, state);
 800d8b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8b8:	f103 0410 	add.w	r4, r3, #16
 800d8bc:	f107 050c 	add.w	r5, r7, #12
 800d8c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d8c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d8c4:	682b      	ldr	r3, [r5, #0]
 800d8c6:	6023      	str	r3, [r4, #0]
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800d8c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8cc:	1e5a      	subs	r2, r3, #1
 800d8ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8d0:	629a      	str	r2, [r3, #40]	; 0x28

  return TRUE;
 800d8d2:	2301      	movs	r3, #1
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3750      	adds	r7, #80	; 0x50
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8de:	bf00      	nop
 800d8e0:	080272bc 	.word	0x080272bc

0800d8e4 <decode_mcu_AC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_AC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800d8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8e6:	b093      	sub	sp, #76	; 0x4c
 800d8e8:	af02      	add	r7, sp, #8
 800d8ea:	60f8      	str	r0, [r7, #12]
 800d8ec:	60b9      	str	r1, [r7, #8]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800d8f4:	63bb      	str	r3, [r7, #56]	; 0x38
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d00b      	beq.n	800d918 <decode_mcu_AC_first+0x34>
    if (entropy->restarts_to_go == 0)
 800d900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d904:	2b00      	cmp	r3, #0
 800d906:	d107      	bne.n	800d918 <decode_mcu_AC_first+0x34>
      if (! process_restart(cinfo))
 800d908:	68f8      	ldr	r0, [r7, #12]
 800d90a:	f7ff fe9f 	bl	800d64c <process_restart>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b00      	cmp	r3, #0
 800d912:	d101      	bne.n	800d918 <decode_mcu_AC_first+0x34>
	return FALSE;
 800d914:	2300      	movs	r3, #0
 800d916:	e0f7      	b.n	800db08 <decode_mcu_AC_first+0x224>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800d918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	f040 80ed 	bne.w	800dafc <decode_mcu_AC_first+0x218>

    Se = cinfo->Se;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800d928:	637b      	str	r3, [r7, #52]	; 0x34
    Al = cinfo->Al;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800d930:	633b      	str	r3, [r7, #48]	; 0x30
    natural_order = cinfo->natural_order;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800d938:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Load up working state.
     * We can avoid loading/saving bitread state if in an EOB run.
     */
    EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */
 800d93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d93c:	691b      	ldr	r3, [r3, #16]
 800d93e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* There is always only one block per MCU */

    if (EOBRUN > 0)		/* if it's a band of zeroes... */
 800d940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d942:	2b00      	cmp	r3, #0
 800d944:	d003      	beq.n	800d94e <decode_mcu_AC_first+0x6a>
      EOBRUN--;			/* ...process it now (we do nothing) */
 800d946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d948:	3b01      	subs	r3, #1
 800d94a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d94c:	e0d3      	b.n	800daf6 <decode_mcu_AC_first+0x212>
    else {
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	623b      	str	r3, [r7, #32]
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	699b      	ldr	r3, [r3, #24]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	613b      	str	r3, [r7, #16]
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	699b      	ldr	r3, [r3, #24]
 800d95e:	685b      	ldr	r3, [r3, #4]
 800d960:	617b      	str	r3, [r7, #20]
 800d962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d964:	689b      	ldr	r3, [r3, #8]
 800d966:	607b      	str	r3, [r7, #4]
 800d968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d96a:	68dc      	ldr	r4, [r3, #12]
      block = MCU_data[0];
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	62bb      	str	r3, [r7, #40]	; 0x28
      tbl = entropy->ac_derived_tbl;
 800d972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d976:	627b      	str	r3, [r7, #36]	; 0x24

      for (k = cinfo->Ss; k <= Se; k++) {
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800d97e:	603b      	str	r3, [r7, #0]
 800d980:	e0a7      	b.n	800dad2 <decode_mcu_AC_first+0x1ee>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800d982:	2c07      	cmp	r4, #7
 800d984:	dc12      	bgt.n	800d9ac <decode_mcu_AC_first+0xc8>
 800d986:	f107 0010 	add.w	r0, r7, #16
 800d98a:	2300      	movs	r3, #0
 800d98c:	4622      	mov	r2, r4
 800d98e:	6879      	ldr	r1, [r7, #4]
 800d990:	f7ff fd72 	bl	800d478 <jpeg_fill_bit_buffer>
 800d994:	4603      	mov	r3, r0
 800d996:	2b00      	cmp	r3, #0
 800d998:	d101      	bne.n	800d99e <decode_mcu_AC_first+0xba>
 800d99a:	2300      	movs	r3, #0
 800d99c:	e0b4      	b.n	800db08 <decode_mcu_AC_first+0x224>
 800d99e:	69bb      	ldr	r3, [r7, #24]
 800d9a0:	607b      	str	r3, [r7, #4]
 800d9a2:	69fc      	ldr	r4, [r7, #28]
 800d9a4:	2c07      	cmp	r4, #7
 800d9a6:	dc01      	bgt.n	800d9ac <decode_mcu_AC_first+0xc8>
 800d9a8:	2501      	movs	r5, #1
 800d9aa:	e016      	b.n	800d9da <decode_mcu_AC_first+0xf6>
 800d9ac:	f1a4 0308 	sub.w	r3, r4, #8
 800d9b0:	687a      	ldr	r2, [r7, #4]
 800d9b2:	fa42 f303 	asr.w	r3, r2, r3
 800d9b6:	22ff      	movs	r2, #255	; 0xff
 800d9b8:	ea03 0602 	and.w	r6, r3, r2
 800d9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9be:	f106 0224 	add.w	r2, r6, #36	; 0x24
 800d9c2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800d9c6:	2d00      	cmp	r5, #0
 800d9c8:	d006      	beq.n	800d9d8 <decode_mcu_AC_first+0xf4>
 800d9ca:	1b64      	subs	r4, r4, r5
 800d9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ce:	4433      	add	r3, r6
 800d9d0:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800d9d4:	461e      	mov	r6, r3
 800d9d6:	e010      	b.n	800d9fa <decode_mcu_AC_first+0x116>
 800d9d8:	2509      	movs	r5, #9
 800d9da:	f107 0010 	add.w	r0, r7, #16
 800d9de:	9500      	str	r5, [sp, #0]
 800d9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e2:	4622      	mov	r2, r4
 800d9e4:	6879      	ldr	r1, [r7, #4]
 800d9e6:	f7ff fdcd 	bl	800d584 <jpeg_huff_decode>
 800d9ea:	4606      	mov	r6, r0
 800d9ec:	2e00      	cmp	r6, #0
 800d9ee:	da01      	bge.n	800d9f4 <decode_mcu_AC_first+0x110>
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	e089      	b.n	800db08 <decode_mcu_AC_first+0x224>
 800d9f4:	69bb      	ldr	r3, [r7, #24]
 800d9f6:	607b      	str	r3, [r7, #4]
 800d9f8:	69fc      	ldr	r4, [r7, #28]
	r = s >> 4;
 800d9fa:	1135      	asrs	r5, r6, #4
	s &= 15;
 800d9fc:	f006 060f 	and.w	r6, r6, #15
	if (s) {
 800da00:	2e00      	cmp	r6, #0
 800da02:	d036      	beq.n	800da72 <decode_mcu_AC_first+0x18e>
	  k += r;
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	442b      	add	r3, r5
 800da08:	603b      	str	r3, [r7, #0]
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800da0a:	42b4      	cmp	r4, r6
 800da0c:	da0e      	bge.n	800da2c <decode_mcu_AC_first+0x148>
 800da0e:	f107 0010 	add.w	r0, r7, #16
 800da12:	4633      	mov	r3, r6
 800da14:	4622      	mov	r2, r4
 800da16:	6879      	ldr	r1, [r7, #4]
 800da18:	f7ff fd2e 	bl	800d478 <jpeg_fill_bit_buffer>
 800da1c:	4603      	mov	r3, r0
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d101      	bne.n	800da26 <decode_mcu_AC_first+0x142>
 800da22:	2300      	movs	r3, #0
 800da24:	e070      	b.n	800db08 <decode_mcu_AC_first+0x224>
 800da26:	69bb      	ldr	r3, [r7, #24]
 800da28:	607b      	str	r3, [r7, #4]
 800da2a:	69fc      	ldr	r4, [r7, #28]
	  r = GET_BITS(s);
 800da2c:	1ba4      	subs	r4, r4, r6
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	fa43 f204 	asr.w	r2, r3, r4
 800da34:	4b36      	ldr	r3, [pc, #216]	; (800db10 <decode_mcu_AC_first+0x22c>)
 800da36:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800da3a:	ea02 0503 	and.w	r5, r2, r3
	  s = HUFF_EXTEND(r, s);
 800da3e:	1e73      	subs	r3, r6, #1
 800da40:	4a33      	ldr	r2, [pc, #204]	; (800db10 <decode_mcu_AC_first+0x22c>)
 800da42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da46:	429d      	cmp	r5, r3
 800da48:	dc04      	bgt.n	800da54 <decode_mcu_AC_first+0x170>
 800da4a:	4b31      	ldr	r3, [pc, #196]	; (800db10 <decode_mcu_AC_first+0x22c>)
 800da4c:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800da50:	1aeb      	subs	r3, r5, r3
 800da52:	e000      	b.n	800da56 <decode_mcu_AC_first+0x172>
 800da54:	462b      	mov	r3, r5
 800da56:	461e      	mov	r6, r3
	  /* Scale and output coefficient in natural (dezigzagged) order */
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800da58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da5a:	fa06 f103 	lsl.w	r1, r6, r3
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	009b      	lsls	r3, r3, #2
 800da62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da64:	4413      	add	r3, r2
 800da66:	681a      	ldr	r2, [r3, #0]
 800da68:	b209      	sxth	r1, r1
 800da6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da6c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800da70:	e02c      	b.n	800dacc <decode_mcu_AC_first+0x1e8>
	} else {
	  if (r == 15) {	/* ZRL */
 800da72:	2d0f      	cmp	r5, #15
 800da74:	d103      	bne.n	800da7e <decode_mcu_AC_first+0x19a>
	    k += 15;		/* skip 15 zeroes in band */
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	330f      	adds	r3, #15
 800da7a:	603b      	str	r3, [r7, #0]
 800da7c:	e026      	b.n	800dacc <decode_mcu_AC_first+0x1e8>
	  } else {		/* EOBr, run length is 2^r + appended bits */
	    EOBRUN = 1 << r;
 800da7e:	2301      	movs	r3, #1
 800da80:	40ab      	lsls	r3, r5
 800da82:	63fb      	str	r3, [r7, #60]	; 0x3c
	    if (r) {		/* EOBr, r > 0 */
 800da84:	2d00      	cmp	r5, #0
 800da86:	d01d      	beq.n	800dac4 <decode_mcu_AC_first+0x1e0>
	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
 800da88:	42ac      	cmp	r4, r5
 800da8a:	da0e      	bge.n	800daaa <decode_mcu_AC_first+0x1c6>
 800da8c:	f107 0010 	add.w	r0, r7, #16
 800da90:	462b      	mov	r3, r5
 800da92:	4622      	mov	r2, r4
 800da94:	6879      	ldr	r1, [r7, #4]
 800da96:	f7ff fcef 	bl	800d478 <jpeg_fill_bit_buffer>
 800da9a:	4603      	mov	r3, r0
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d101      	bne.n	800daa4 <decode_mcu_AC_first+0x1c0>
 800daa0:	2300      	movs	r3, #0
 800daa2:	e031      	b.n	800db08 <decode_mcu_AC_first+0x224>
 800daa4:	69bb      	ldr	r3, [r7, #24]
 800daa6:	607b      	str	r3, [r7, #4]
 800daa8:	69fc      	ldr	r4, [r7, #28]
	      r = GET_BITS(r);
 800daaa:	1b64      	subs	r4, r4, r5
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	fa43 f204 	asr.w	r2, r3, r4
 800dab2:	4b17      	ldr	r3, [pc, #92]	; (800db10 <decode_mcu_AC_first+0x22c>)
 800dab4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800dab8:	ea02 0503 	and.w	r5, r2, r3
	      EOBRUN += r;
 800dabc:	462a      	mov	r2, r5
 800dabe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dac0:	4413      	add	r3, r2
 800dac2:	63fb      	str	r3, [r7, #60]	; 0x3c
	    }
	    EOBRUN--;		/* this band is processed at this moment */
 800dac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dac6:	3b01      	subs	r3, #1
 800dac8:	63fb      	str	r3, [r7, #60]	; 0x3c
	    break;		/* force end-of-band */
 800daca:	e007      	b.n	800dadc <decode_mcu_AC_first+0x1f8>
      for (k = cinfo->Ss; k <= Se; k++) {
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	3301      	adds	r3, #1
 800dad0:	603b      	str	r3, [r7, #0]
 800dad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dad4:	683a      	ldr	r2, [r7, #0]
 800dad6:	429a      	cmp	r2, r3
 800dad8:	f77f af53 	ble.w	800d982 <decode_mcu_AC_first+0x9e>
	  }
	}
      }

      BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	699b      	ldr	r3, [r3, #24]
 800dae0:	693a      	ldr	r2, [r7, #16]
 800dae2:	601a      	str	r2, [r3, #0]
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	699b      	ldr	r3, [r3, #24]
 800dae8:	697a      	ldr	r2, [r7, #20]
 800daea:	605a      	str	r2, [r3, #4]
 800daec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daee:	687a      	ldr	r2, [r7, #4]
 800daf0:	609a      	str	r2, [r3, #8]
 800daf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf4:	60dc      	str	r4, [r3, #12]
    }

    /* Completed MCU, so update state */
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
 800daf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dafa:	611a      	str	r2, [r3, #16]
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800dafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dafe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db00:	1e5a      	subs	r2, r3, #1
 800db02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db04:	629a      	str	r2, [r3, #40]	; 0x28

  return TRUE;
 800db06:	2301      	movs	r3, #1
}
 800db08:	4618      	mov	r0, r3
 800db0a:	3744      	adds	r7, #68	; 0x44
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db10:	080272bc 	.word	0x080272bc

0800db14 <decode_mcu_DC_refine>:
 * is not very clear on the point.
 */

METHODDEF(boolean)
decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800db14:	b5b0      	push	{r4, r5, r7, lr}
 800db16:	b08c      	sub	sp, #48	; 0x30
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	6039      	str	r1, [r7, #0]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800db24:	62bb      	str	r3, [r7, #40]	; 0x28
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800db2c:	2201      	movs	r2, #1
 800db2e:	fa02 f303 	lsl.w	r3, r2, r3
 800db32:	627b      	str	r3, [r7, #36]	; 0x24
  int blkn;
  JBLOCKROW block;
  BITREAD_STATE_VARS;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d00b      	beq.n	800db56 <decode_mcu_DC_refine+0x42>
    if (entropy->restarts_to_go == 0)
 800db3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db42:	2b00      	cmp	r3, #0
 800db44:	d107      	bne.n	800db56 <decode_mcu_DC_refine+0x42>
      if (! process_restart(cinfo))
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f7ff fd80 	bl	800d64c <process_restart>
 800db4c:	4603      	mov	r3, r0
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d101      	bne.n	800db56 <decode_mcu_DC_refine+0x42>
	return FALSE;
 800db52:	2300      	movs	r3, #0
 800db54:	e051      	b.n	800dbfa <decode_mcu_DC_refine+0xe6>
  /* Not worth the cycles to check insufficient_data here,
   * since we will not change the data anyway if we read zeroes.
   */

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	61fb      	str	r3, [r7, #28]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	699b      	ldr	r3, [r3, #24]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	60fb      	str	r3, [r7, #12]
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	699b      	ldr	r3, [r3, #24]
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	613b      	str	r3, [r7, #16]
 800db6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db6c:	689d      	ldr	r5, [r3, #8]
 800db6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db70:	68dc      	ldr	r4, [r3, #12]

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800db72:	2300      	movs	r3, #0
 800db74:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db76:	e028      	b.n	800dbca <decode_mcu_DC_refine+0xb6>
    block = MCU_data[blkn];
 800db78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db7a:	009b      	lsls	r3, r3, #2
 800db7c:	683a      	ldr	r2, [r7, #0]
 800db7e:	4413      	add	r3, r2
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	623b      	str	r3, [r7, #32]

    /* Encoded data is simply the next bit of the two's-complement DC value */
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800db84:	2c00      	cmp	r4, #0
 800db86:	dc0d      	bgt.n	800dba4 <decode_mcu_DC_refine+0x90>
 800db88:	f107 000c 	add.w	r0, r7, #12
 800db8c:	2301      	movs	r3, #1
 800db8e:	4622      	mov	r2, r4
 800db90:	4629      	mov	r1, r5
 800db92:	f7ff fc71 	bl	800d478 <jpeg_fill_bit_buffer>
 800db96:	4603      	mov	r3, r0
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d101      	bne.n	800dba0 <decode_mcu_DC_refine+0x8c>
 800db9c:	2300      	movs	r3, #0
 800db9e:	e02c      	b.n	800dbfa <decode_mcu_DC_refine+0xe6>
 800dba0:	697d      	ldr	r5, [r7, #20]
 800dba2:	69bc      	ldr	r4, [r7, #24]
    if (GET_BITS(1))
 800dba4:	3c01      	subs	r4, #1
 800dba6:	fa45 f304 	asr.w	r3, r5, r4
 800dbaa:	2201      	movs	r2, #1
 800dbac:	4013      	ands	r3, r2
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d008      	beq.n	800dbc4 <decode_mcu_DC_refine+0xb0>
      (*block)[0] |= p1;
 800dbb2:	6a3b      	ldr	r3, [r7, #32]
 800dbb4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800dbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbba:	b21b      	sxth	r3, r3
 800dbbc:	4313      	orrs	r3, r2
 800dbbe:	b21a      	sxth	r2, r3
 800dbc0:	6a3b      	ldr	r3, [r7, #32]
 800dbc2:	801a      	strh	r2, [r3, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800dbc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800dbd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	dbd0      	blt.n	800db78 <decode_mcu_DC_refine+0x64>
    /* Note: since we use |=, repeating the assignment later is safe */
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	699b      	ldr	r3, [r3, #24]
 800dbda:	68fa      	ldr	r2, [r7, #12]
 800dbdc:	601a      	str	r2, [r3, #0]
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	699b      	ldr	r3, [r3, #24]
 800dbe2:	693a      	ldr	r2, [r7, #16]
 800dbe4:	605a      	str	r2, [r3, #4]
 800dbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe8:	609d      	str	r5, [r3, #8]
 800dbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbec:	60dc      	str	r4, [r3, #12]

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800dbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbf2:	1e5a      	subs	r2, r3, #1
 800dbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf6:	629a      	str	r2, [r3, #40]	; 0x28

  return TRUE;
 800dbf8:	2301      	movs	r3, #1
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3730      	adds	r7, #48	; 0x30
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800dc04 <decode_mcu_AC_refine>:
 * MCU decoding for AC successive approximation refinement scan.
 */

METHODDEF(boolean)
decode_mcu_AC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800dc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc08:	b0d6      	sub	sp, #344	; 0x158
 800dc0a:	af02      	add	r7, sp, #8
 800dc0c:	f107 030c 	add.w	r3, r7, #12
 800dc10:	6018      	str	r0, [r3, #0]
 800dc12:	f107 0308 	add.w	r3, r7, #8
 800dc16:	6019      	str	r1, [r3, #0]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800dc18:	f107 030c 	add.w	r3, r7, #12
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800dc22:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  d_derived_tbl * tbl;
  int num_newnz;
  int newnz_pos[DCTSIZE2];

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800dc26:	f107 030c 	add.w	r3, r7, #12
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d00e      	beq.n	800dc52 <decode_mcu_AC_refine+0x4e>
    if (entropy->restarts_to_go == 0)
 800dc34:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800dc38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d109      	bne.n	800dc52 <decode_mcu_AC_refine+0x4e>
      if (! process_restart(cinfo))
 800dc3e:	f107 030c 	add.w	r3, r7, #12
 800dc42:	6818      	ldr	r0, [r3, #0]
 800dc44:	f7ff fd02 	bl	800d64c <process_restart>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d101      	bne.n	800dc52 <decode_mcu_AC_refine+0x4e>
	return FALSE;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	e23a      	b.n	800e0c8 <decode_mcu_AC_refine+0x4c4>
  }

  /* If we've run out of data, don't modify the MCU.
   */
  if (! entropy->insufficient_data) {
 800dc52:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800dc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	f040 820b 	bne.w	800e074 <decode_mcu_AC_refine+0x470>

    Se = cinfo->Se;
 800dc5e:	f107 030c 	add.w	r3, r7, #12
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800dc68:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800dc6c:	f107 030c 	add.w	r3, r7, #12
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800dc76:	2201      	movs	r2, #1
 800dc78:	fa02 f303 	lsl.w	r3, r2, r3
 800dc7c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800dc80:	f107 030c 	add.w	r3, r7, #12
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800dc8a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc8e:	fa02 f303 	lsl.w	r3, r2, r3
 800dc92:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    natural_order = cinfo->natural_order;
 800dc96:	f107 030c 	add.w	r3, r7, #12
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800dca0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

    /* Load up working state */
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800dca4:	f107 030c 	add.w	r3, r7, #12
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800dcae:	f107 030c 	add.w	r3, r7, #12
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	699b      	ldr	r3, [r3, #24]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800dcbc:	f107 030c 	add.w	r3, r7, #12
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	699b      	ldr	r3, [r3, #24]
 800dcc4:	685b      	ldr	r3, [r3, #4]
 800dcc6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800dcca:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800dcce:	689d      	ldr	r5, [r3, #8]
 800dcd0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800dcd4:	68dc      	ldr	r4, [r3, #12]
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800dcd6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800dcda:	691b      	ldr	r3, [r3, #16]
 800dcdc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

    /* There is always only one block per MCU */
    block = MCU_data[0];
 800dce0:	f107 0308 	add.w	r3, r7, #8
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    tbl = entropy->ac_derived_tbl;
 800dcec:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800dcf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcf2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
     * nonzero coefficients in the block, because otherwise we'd get confused
     * next time about which coefficients were already nonzero.
     * But we need not undo addition of bits to already-nonzero coefficients;
     * instead, we can test the current bit to see if we already did it.
     */
    num_newnz = 0;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

    /* initialize coefficient loop counter to start of band */
    k = cinfo->Ss;
 800dcfc:	f107 030c 	add.w	r3, r7, #12
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800dd06:	607b      	str	r3, [r7, #4]

    if (EOBRUN == 0) {
 800dd08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	f040 8130 	bne.w	800df72 <decode_mcu_AC_refine+0x36e>
      for (; k <= Se; k++) {
 800dd12:	e126      	b.n	800df62 <decode_mcu_AC_refine+0x35e>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800dd14:	2c07      	cmp	r4, #7
 800dd16:	dc12      	bgt.n	800dd3e <decode_mcu_AC_refine+0x13a>
 800dd18:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	4622      	mov	r2, r4
 800dd20:	4629      	mov	r1, r5
 800dd22:	f7ff fba9 	bl	800d478 <jpeg_fill_bit_buffer>
 800dd26:	4603      	mov	r3, r0
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	f000 81ac 	beq.w	800e086 <decode_mcu_AC_refine+0x482>
 800dd2e:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 800dd32:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
 800dd36:	2c07      	cmp	r4, #7
 800dd38:	dc01      	bgt.n	800dd3e <decode_mcu_AC_refine+0x13a>
 800dd3a:	2601      	movs	r6, #1
 800dd3c:	e017      	b.n	800dd6e <decode_mcu_AC_refine+0x16a>
 800dd3e:	f1a4 0308 	sub.w	r3, r4, #8
 800dd42:	fa45 f303 	asr.w	r3, r5, r3
 800dd46:	22ff      	movs	r2, #255	; 0xff
 800dd48:	ea03 0802 	and.w	r8, r3, r2
 800dd4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dd50:	f108 0224 	add.w	r2, r8, #36	; 0x24
 800dd54:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800dd58:	2e00      	cmp	r6, #0
 800dd5a:	d007      	beq.n	800dd6c <decode_mcu_AC_refine+0x168>
 800dd5c:	1ba4      	subs	r4, r4, r6
 800dd5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dd62:	4443      	add	r3, r8
 800dd64:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800dd68:	603b      	str	r3, [r7, #0]
 800dd6a:	e012      	b.n	800dd92 <decode_mcu_AC_refine+0x18e>
 800dd6c:	2609      	movs	r6, #9
 800dd6e:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800dd72:	9600      	str	r6, [sp, #0]
 800dd74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dd78:	4622      	mov	r2, r4
 800dd7a:	4629      	mov	r1, r5
 800dd7c:	f7ff fc02 	bl	800d584 <jpeg_huff_decode>
 800dd80:	4603      	mov	r3, r0
 800dd82:	603b      	str	r3, [r7, #0]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	f2c0 8180 	blt.w	800e08a <decode_mcu_AC_refine+0x486>
 800dd8a:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 800dd8e:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
	r = s >> 4;
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	111e      	asrs	r6, r3, #4
	s &= 15;
 800dd96:	f003 030f 	and.w	r3, r3, #15
 800dd9a:	603b      	str	r3, [r7, #0]
	if (s) {
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d032      	beq.n	800de06 <decode_mcu_AC_refine+0x202>
	  if (s != 1)		/* size of new coef should always be 1 */
 800dda0:	2b01      	cmp	r3, #1
 800dda2:	d010      	beq.n	800ddc6 <decode_mcu_AC_refine+0x1c2>
	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
 800dda4:	f107 030c 	add.w	r3, r7, #12
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	2279      	movs	r2, #121	; 0x79
 800ddae:	615a      	str	r2, [r3, #20]
 800ddb0:	f107 030c 	add.w	r3, r7, #12
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	f107 020c 	add.w	r2, r7, #12
 800ddbe:	f04f 31ff 	mov.w	r1, #4294967295
 800ddc2:	6810      	ldr	r0, [r2, #0]
 800ddc4:	4798      	blx	r3
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800ddc6:	2c00      	cmp	r4, #0
 800ddc8:	dc0e      	bgt.n	800dde8 <decode_mcu_AC_refine+0x1e4>
 800ddca:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800ddce:	2301      	movs	r3, #1
 800ddd0:	4622      	mov	r2, r4
 800ddd2:	4629      	mov	r1, r5
 800ddd4:	f7ff fb50 	bl	800d478 <jpeg_fill_bit_buffer>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	f000 8157 	beq.w	800e08e <decode_mcu_AC_refine+0x48a>
 800dde0:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 800dde4:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
	  if (GET_BITS(1))
 800dde8:	3c01      	subs	r4, #1
 800ddea:	fa45 f304 	asr.w	r3, r5, r4
 800ddee:	2201      	movs	r2, #1
 800ddf0:	4013      	ands	r3, r2
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d003      	beq.n	800ddfe <decode_mcu_AC_refine+0x1fa>
	    s = p1;		/* newly nonzero coef is positive */
 800ddf6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800ddfa:	603b      	str	r3, [r7, #0]
 800ddfc:	e02c      	b.n	800de58 <decode_mcu_AC_refine+0x254>
	  else
	    s = m1;		/* newly nonzero coef is negative */
 800ddfe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800de02:	603b      	str	r3, [r7, #0]
 800de04:	e028      	b.n	800de58 <decode_mcu_AC_refine+0x254>
	} else {
	  if (r != 15) {
 800de06:	2e0f      	cmp	r6, #15
 800de08:	d026      	beq.n	800de58 <decode_mcu_AC_refine+0x254>
	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
 800de0a:	2301      	movs	r3, #1
 800de0c:	40b3      	lsls	r3, r6
 800de0e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	    if (r) {
 800de12:	2e00      	cmp	r6, #0
 800de14:	f000 80ac 	beq.w	800df70 <decode_mcu_AC_refine+0x36c>
	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 800de18:	42b4      	cmp	r4, r6
 800de1a:	da0e      	bge.n	800de3a <decode_mcu_AC_refine+0x236>
 800de1c:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800de20:	4633      	mov	r3, r6
 800de22:	4622      	mov	r2, r4
 800de24:	4629      	mov	r1, r5
 800de26:	f7ff fb27 	bl	800d478 <jpeg_fill_bit_buffer>
 800de2a:	4603      	mov	r3, r0
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	f000 8130 	beq.w	800e092 <decode_mcu_AC_refine+0x48e>
 800de32:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 800de36:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
	      r = GET_BITS(r);
 800de3a:	1ba4      	subs	r4, r4, r6
 800de3c:	fa45 f204 	asr.w	r2, r5, r4
 800de40:	4ba4      	ldr	r3, [pc, #656]	; (800e0d4 <decode_mcu_AC_refine+0x4d0>)
 800de42:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800de46:	ea02 0603 	and.w	r6, r2, r3
	      EOBRUN += r;
 800de4a:	4632      	mov	r2, r6
 800de4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800de50:	4413      	add	r3, r2
 800de52:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	    }
	    break;		/* rest of block is handled by EOB logic */
 800de56:	e08b      	b.n	800df70 <decode_mcu_AC_refine+0x36c>
	/* Advance over already-nonzero coefs and r still-zero coefs,
	 * appending correction bits to the nonzeroes.  A correction bit is 1
	 * if the absolute value of the coefficient must be increased.
	 */
	do {
	  thiscoef = *block + natural_order[k];
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	009b      	lsls	r3, r3, #2
 800de5c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800de60:	4413      	add	r3, r2
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	005b      	lsls	r3, r3, #1
 800de66:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800de6a:	4413      	add	r3, r2
 800de6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	  if (*thiscoef != 0) {
 800de70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800de74:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d045      	beq.n	800df08 <decode_mcu_AC_refine+0x304>
	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800de7c:	2c00      	cmp	r4, #0
 800de7e:	dc0e      	bgt.n	800de9e <decode_mcu_AC_refine+0x29a>
 800de80:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800de84:	2301      	movs	r3, #1
 800de86:	4622      	mov	r2, r4
 800de88:	4629      	mov	r1, r5
 800de8a:	f7ff faf5 	bl	800d478 <jpeg_fill_bit_buffer>
 800de8e:	4603      	mov	r3, r0
 800de90:	2b00      	cmp	r3, #0
 800de92:	f000 8100 	beq.w	800e096 <decode_mcu_AC_refine+0x492>
 800de96:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 800de9a:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
	    if (GET_BITS(1)) {
 800de9e:	3c01      	subs	r4, #1
 800dea0:	fa45 f304 	asr.w	r3, r5, r4
 800dea4:	2201      	movs	r2, #1
 800dea6:	4013      	ands	r3, r2
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d030      	beq.n	800df0e <decode_mcu_AC_refine+0x30a>
	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
 800deac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800deb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800deb4:	461a      	mov	r2, r3
 800deb6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800deba:	4013      	ands	r3, r2
 800debc:	2b00      	cmp	r3, #0
 800debe:	d126      	bne.n	800df0e <decode_mcu_AC_refine+0x30a>
		if (*thiscoef >= 0)
 800dec0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dec4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	db0e      	blt.n	800deea <decode_mcu_AC_refine+0x2e6>
		  *thiscoef += p1;
 800decc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ded0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ded4:	b29a      	uxth	r2, r3
 800ded6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800deda:	b29b      	uxth	r3, r3
 800dedc:	4413      	add	r3, r2
 800dede:	b29b      	uxth	r3, r3
 800dee0:	b21a      	sxth	r2, r3
 800dee2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dee6:	801a      	strh	r2, [r3, #0]
 800dee8:	e011      	b.n	800df0e <decode_mcu_AC_refine+0x30a>
		else
		  *thiscoef += m1;
 800deea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800deee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800def2:	b29a      	uxth	r2, r3
 800def4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800def8:	b29b      	uxth	r3, r3
 800defa:	4413      	add	r3, r2
 800defc:	b29b      	uxth	r3, r3
 800defe:	b21a      	sxth	r2, r3
 800df00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800df04:	801a      	strh	r2, [r3, #0]
 800df06:	e002      	b.n	800df0e <decode_mcu_AC_refine+0x30a>
	      }
	    }
	  } else {
	    if (--r < 0)
 800df08:	3e01      	subs	r6, #1
 800df0a:	2e00      	cmp	r6, #0
 800df0c:	db08      	blt.n	800df20 <decode_mcu_AC_refine+0x31c>
	      break;		/* reached target zero coefficient */
	  }
	  k++;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	3301      	adds	r3, #1
 800df12:	461a      	mov	r2, r3
 800df14:	607a      	str	r2, [r7, #4]
	} while (k <= Se);
 800df16:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800df1a:	429a      	cmp	r2, r3
 800df1c:	dd9c      	ble.n	800de58 <decode_mcu_AC_refine+0x254>
 800df1e:	e000      	b.n	800df22 <decode_mcu_AC_refine+0x31e>
	      break;		/* reached target zero coefficient */
 800df20:	bf00      	nop
	if (s) {
 800df22:	6839      	ldr	r1, [r7, #0]
 800df24:	2900      	cmp	r1, #0
 800df26:	d019      	beq.n	800df5c <decode_mcu_AC_refine+0x358>
	  int pos = natural_order[k];
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	009b      	lsls	r3, r3, #2
 800df2c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800df30:	4413      	add	r3, r2
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	  /* Output newly nonzero coefficient */
	  (*block)[pos] = (JCOEF) s;
 800df38:	b209      	sxth	r1, r1
 800df3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800df3e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800df42:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  /* Remember its position in case we have to suspend */
	  newnz_pos[num_newnz++] = pos;
 800df46:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800df4a:	1c5a      	adds	r2, r3, #1
 800df4c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800df50:	f107 0210 	add.w	r2, r7, #16
 800df54:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800df58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      for (; k <= Se; k++) {
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	3301      	adds	r3, #1
 800df60:	607b      	str	r3, [r7, #4]
 800df62:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800df66:	687a      	ldr	r2, [r7, #4]
 800df68:	429a      	cmp	r2, r3
 800df6a:	f77f aed3 	ble.w	800dd14 <decode_mcu_AC_refine+0x110>
 800df6e:	e000      	b.n	800df72 <decode_mcu_AC_refine+0x36e>
	    break;		/* rest of block is handled by EOB logic */
 800df70:	bf00      	nop
	}
      }
    }

    if (EOBRUN > 0) {
 800df72:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800df76:	2b00      	cmp	r3, #0
 800df78:	d063      	beq.n	800e042 <decode_mcu_AC_refine+0x43e>
      /* Scan any remaining coefficient positions after the end-of-band
       * (the last newly nonzero coefficient, if any).  Append a correction
       * bit to each already-nonzero coefficient.  A correction bit is 1
       * if the absolute value of the coefficient must be increased.
       */
      for (; k <= Se; k++) {
 800df7a:	e058      	b.n	800e02e <decode_mcu_AC_refine+0x42a>
	thiscoef = *block + natural_order[k];
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	009b      	lsls	r3, r3, #2
 800df80:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800df84:	4413      	add	r3, r2
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	005b      	lsls	r3, r3, #1
 800df8a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800df8e:	4413      	add	r3, r2
 800df90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	if (*thiscoef != 0) {
 800df94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800df98:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d043      	beq.n	800e028 <decode_mcu_AC_refine+0x424>
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800dfa0:	2c00      	cmp	r4, #0
 800dfa2:	dc0d      	bgt.n	800dfc0 <decode_mcu_AC_refine+0x3bc>
 800dfa4:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	4622      	mov	r2, r4
 800dfac:	4629      	mov	r1, r5
 800dfae:	f7ff fa63 	bl	800d478 <jpeg_fill_bit_buffer>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d070      	beq.n	800e09a <decode_mcu_AC_refine+0x496>
 800dfb8:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 800dfbc:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
	  if (GET_BITS(1)) {
 800dfc0:	3c01      	subs	r4, #1
 800dfc2:	fa45 f304 	asr.w	r3, r5, r4
 800dfc6:	2201      	movs	r2, #1
 800dfc8:	4013      	ands	r3, r2
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d02c      	beq.n	800e028 <decode_mcu_AC_refine+0x424>
	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
 800dfce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dfd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dfd6:	461a      	mov	r2, r3
 800dfd8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800dfdc:	4013      	ands	r3, r2
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d122      	bne.n	800e028 <decode_mcu_AC_refine+0x424>
	      if (*thiscoef >= 0)
 800dfe2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dfe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	db0e      	blt.n	800e00c <decode_mcu_AC_refine+0x408>
		*thiscoef += p1;
 800dfee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dff6:	b29a      	uxth	r2, r3
 800dff8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800dffc:	b29b      	uxth	r3, r3
 800dffe:	4413      	add	r3, r2
 800e000:	b29b      	uxth	r3, r3
 800e002:	b21a      	sxth	r2, r3
 800e004:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e008:	801a      	strh	r2, [r3, #0]
 800e00a:	e00d      	b.n	800e028 <decode_mcu_AC_refine+0x424>
	      else
		*thiscoef += m1;
 800e00c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e010:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e014:	b29a      	uxth	r2, r3
 800e016:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	4413      	add	r3, r2
 800e01e:	b29b      	uxth	r3, r3
 800e020:	b21a      	sxth	r2, r3
 800e022:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e026:	801a      	strh	r2, [r3, #0]
      for (; k <= Se; k++) {
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	3301      	adds	r3, #1
 800e02c:	607b      	str	r3, [r7, #4]
 800e02e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800e032:	687a      	ldr	r2, [r7, #4]
 800e034:	429a      	cmp	r2, r3
 800e036:	dda1      	ble.n	800df7c <decode_mcu_AC_refine+0x378>
	    }
	  }
	}
      }
      /* Count one block completed in EOB run */
      EOBRUN--;
 800e038:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e03c:	3b01      	subs	r3, #1
 800e03e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    /* Completed MCU, so update state */
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800e042:	f107 030c 	add.w	r3, r7, #12
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	699b      	ldr	r3, [r3, #24]
 800e04a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800e04e:	601a      	str	r2, [r3, #0]
 800e050:	f107 030c 	add.w	r3, r7, #12
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	699b      	ldr	r3, [r3, #24]
 800e058:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800e05c:	605a      	str	r2, [r3, #4]
 800e05e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800e062:	609d      	str	r5, [r3, #8]
 800e064:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800e068:	60dc      	str	r4, [r3, #12]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800e06a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800e06e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800e072:	611a      	str	r2, [r3, #16]
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800e074:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800e078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e07a:	1e5a      	subs	r2, r3, #1
 800e07c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800e080:	629a      	str	r2, [r3, #40]	; 0x28

  return TRUE;
 800e082:	2301      	movs	r3, #1
 800e084:	e020      	b.n	800e0c8 <decode_mcu_AC_refine+0x4c4>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800e086:	bf00      	nop
 800e088:	e019      	b.n	800e0be <decode_mcu_AC_refine+0x4ba>
 800e08a:	bf00      	nop
 800e08c:	e017      	b.n	800e0be <decode_mcu_AC_refine+0x4ba>
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800e08e:	bf00      	nop
 800e090:	e015      	b.n	800e0be <decode_mcu_AC_refine+0x4ba>
	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 800e092:	bf00      	nop
 800e094:	e013      	b.n	800e0be <decode_mcu_AC_refine+0x4ba>
	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800e096:	bf00      	nop
 800e098:	e011      	b.n	800e0be <decode_mcu_AC_refine+0x4ba>
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800e09a:	bf00      	nop

undoit:
  /* Re-zero any output coefficients that we made newly nonzero */
  while (num_newnz > 0)
 800e09c:	e00f      	b.n	800e0be <decode_mcu_AC_refine+0x4ba>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800e09e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e0a2:	3b01      	subs	r3, #1
 800e0a4:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800e0a8:	f107 0310 	add.w	r3, r7, #16
 800e0ac:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800e0b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e0b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e0b8:	2100      	movs	r1, #0
 800e0ba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  while (num_newnz > 0)
 800e0be:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	dceb      	bgt.n	800e09e <decode_mcu_AC_refine+0x49a>

  return FALSE;
 800e0c6:	2300      	movs	r3, #0
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0d4:	080272bc 	.word	0x080272bc

0800e0d8 <decode_mcu_sub>:
 * partial blocks.
 */

METHODDEF(boolean)
decode_mcu_sub (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800e0d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e0dc:	b097      	sub	sp, #92	; 0x5c
 800e0de:	af02      	add	r7, sp, #8
 800e0e0:	6078      	str	r0, [r7, #4]
 800e0e2:	6039      	str	r1, [r7, #0]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800e0ea:	64bb      	str	r3, [r7, #72]	; 0x48
  int Se, blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d00b      	beq.n	800e10e <decode_mcu_sub+0x36>
    if (entropy->restarts_to_go == 0)
 800e0f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d107      	bne.n	800e10e <decode_mcu_sub+0x36>
      if (! process_restart(cinfo))
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f7ff faa4 	bl	800d64c <process_restart>
 800e104:	4603      	mov	r3, r0
 800e106:	2b00      	cmp	r3, #0
 800e108:	d101      	bne.n	800e10e <decode_mcu_sub+0x36>
	return FALSE;
 800e10a:	2300      	movs	r3, #0
 800e10c:	e1d4      	b.n	800e4b8 <decode_mcu_sub+0x3e0>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800e10e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e112:	2b00      	cmp	r3, #0
 800e114:	f040 81ca 	bne.w	800e4ac <decode_mcu_sub+0x3d4>

    natural_order = cinfo->natural_order;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800e11e:	647b      	str	r3, [r7, #68]	; 0x44
    Se = cinfo->lim_Se;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800e126:	643b      	str	r3, [r7, #64]	; 0x40

    /* Load up working state */
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	699b      	ldr	r3, [r3, #24]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	61fb      	str	r3, [r7, #28]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	699b      	ldr	r3, [r3, #24]
 800e138:	685b      	ldr	r3, [r3, #4]
 800e13a:	623b      	str	r3, [r7, #32]
 800e13c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e13e:	689e      	ldr	r6, [r3, #8]
 800e140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e142:	68dc      	ldr	r4, [r3, #12]
    ASSIGN_STATE(state, entropy->saved);
 800e144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e146:	f107 0508 	add.w	r5, r7, #8
 800e14a:	f103 0c10 	add.w	ip, r3, #16
 800e14e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e152:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e154:	f8dc 3000 	ldr.w	r3, [ip]
 800e158:	602b      	str	r3, [r5, #0]

    /* Outer loop handles each block in the MCU */

    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800e15a:	2300      	movs	r3, #0
 800e15c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e15e:	e189      	b.n	800e474 <decode_mcu_sub+0x39c>
      JBLOCKROW block = MCU_data[blkn];
 800e160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e162:	009b      	lsls	r3, r3, #2
 800e164:	683a      	ldr	r2, [r7, #0]
 800e166:	4413      	add	r3, r2
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	63fb      	str	r3, [r7, #60]	; 0x3c
      int coef_limit, ci;

      /* Decode a single block's worth of coefficients */

      /* Section F.2.2.1: decode the DC coefficient difference */
      htbl = entropy->dc_cur_tbls[blkn];
 800e16c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e16e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e170:	3218      	adds	r2, #24
 800e172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e176:	63bb      	str	r3, [r7, #56]	; 0x38
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800e178:	2c07      	cmp	r4, #7
 800e17a:	dc11      	bgt.n	800e1a0 <decode_mcu_sub+0xc8>
 800e17c:	f107 001c 	add.w	r0, r7, #28
 800e180:	2300      	movs	r3, #0
 800e182:	4622      	mov	r2, r4
 800e184:	4631      	mov	r1, r6
 800e186:	f7ff f977 	bl	800d478 <jpeg_fill_bit_buffer>
 800e18a:	4603      	mov	r3, r0
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d101      	bne.n	800e194 <decode_mcu_sub+0xbc>
 800e190:	2300      	movs	r3, #0
 800e192:	e191      	b.n	800e4b8 <decode_mcu_sub+0x3e0>
 800e194:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800e196:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800e198:	2c07      	cmp	r4, #7
 800e19a:	dc01      	bgt.n	800e1a0 <decode_mcu_sub+0xc8>
 800e19c:	2501      	movs	r5, #1
 800e19e:	e015      	b.n	800e1cc <decode_mcu_sub+0xf4>
 800e1a0:	f1a4 0308 	sub.w	r3, r4, #8
 800e1a4:	fa46 f303 	asr.w	r3, r6, r3
 800e1a8:	22ff      	movs	r2, #255	; 0xff
 800e1aa:	ea03 0802 	and.w	r8, r3, r2
 800e1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b0:	f108 0224 	add.w	r2, r8, #36	; 0x24
 800e1b4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800e1b8:	2d00      	cmp	r5, #0
 800e1ba:	d006      	beq.n	800e1ca <decode_mcu_sub+0xf2>
 800e1bc:	1b64      	subs	r4, r4, r5
 800e1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c0:	4443      	add	r3, r8
 800e1c2:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800e1c6:	461d      	mov	r5, r3
 800e1c8:	e00f      	b.n	800e1ea <decode_mcu_sub+0x112>
 800e1ca:	2509      	movs	r5, #9
 800e1cc:	f107 001c 	add.w	r0, r7, #28
 800e1d0:	9500      	str	r5, [sp, #0]
 800e1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d4:	4622      	mov	r2, r4
 800e1d6:	4631      	mov	r1, r6
 800e1d8:	f7ff f9d4 	bl	800d584 <jpeg_huff_decode>
 800e1dc:	4605      	mov	r5, r0
 800e1de:	2d00      	cmp	r5, #0
 800e1e0:	da01      	bge.n	800e1e6 <decode_mcu_sub+0x10e>
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	e168      	b.n	800e4b8 <decode_mcu_sub+0x3e0>
 800e1e6:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800e1e8:	6abc      	ldr	r4, [r7, #40]	; 0x28

      htbl = entropy->ac_cur_tbls[blkn];
 800e1ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e1ee:	3222      	adds	r2, #34	; 0x22
 800e1f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1f4:	63bb      	str	r3, [r7, #56]	; 0x38
      k = 1;
 800e1f6:	f04f 0801 	mov.w	r8, #1
      coef_limit = entropy->coef_limit[blkn];
 800e1fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e1fe:	322c      	adds	r2, #44	; 0x2c
 800e200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e204:	637b      	str	r3, [r7, #52]	; 0x34
      if (coef_limit) {
 800e206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e208:	2b00      	cmp	r3, #0
 800e20a:	f000 80bc 	beq.w	800e386 <decode_mcu_sub+0x2ae>
	/* Convert DC difference to actual value, update last_dc_val */
	if (s) {
 800e20e:	2d00      	cmp	r5, #0
 800e210:	d025      	beq.n	800e25e <decode_mcu_sub+0x186>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800e212:	42ac      	cmp	r4, r5
 800e214:	da0d      	bge.n	800e232 <decode_mcu_sub+0x15a>
 800e216:	f107 001c 	add.w	r0, r7, #28
 800e21a:	462b      	mov	r3, r5
 800e21c:	4622      	mov	r2, r4
 800e21e:	4631      	mov	r1, r6
 800e220:	f7ff f92a 	bl	800d478 <jpeg_fill_bit_buffer>
 800e224:	4603      	mov	r3, r0
 800e226:	2b00      	cmp	r3, #0
 800e228:	d101      	bne.n	800e22e <decode_mcu_sub+0x156>
 800e22a:	2300      	movs	r3, #0
 800e22c:	e144      	b.n	800e4b8 <decode_mcu_sub+0x3e0>
 800e22e:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800e230:	6abc      	ldr	r4, [r7, #40]	; 0x28
	  r = GET_BITS(s);
 800e232:	1b64      	subs	r4, r4, r5
 800e234:	fa46 f204 	asr.w	r2, r6, r4
 800e238:	4ba2      	ldr	r3, [pc, #648]	; (800e4c4 <decode_mcu_sub+0x3ec>)
 800e23a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e23e:	ea02 0903 	and.w	r9, r2, r3
	  s = HUFF_EXTEND(r, s);
 800e242:	1e6b      	subs	r3, r5, #1
 800e244:	4a9f      	ldr	r2, [pc, #636]	; (800e4c4 <decode_mcu_sub+0x3ec>)
 800e246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e24a:	4599      	cmp	r9, r3
 800e24c:	dc05      	bgt.n	800e25a <decode_mcu_sub+0x182>
 800e24e:	4b9d      	ldr	r3, [pc, #628]	; (800e4c4 <decode_mcu_sub+0x3ec>)
 800e250:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e254:	eba9 0303 	sub.w	r3, r9, r3
 800e258:	e000      	b.n	800e25c <decode_mcu_sub+0x184>
 800e25a:	464b      	mov	r3, r9
 800e25c:	461d      	mov	r5, r3
	}
	ci = cinfo->MCU_membership[blkn];
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e262:	325c      	adds	r2, #92	; 0x5c
 800e264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e268:	633b      	str	r3, [r7, #48]	; 0x30
	s += state.last_dc_val[ci];
 800e26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e26c:	009b      	lsls	r3, r3, #2
 800e26e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800e272:	4413      	add	r3, r2
 800e274:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e278:	441d      	add	r5, r3
	state.last_dc_val[ci] = s;
 800e27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e27c:	009b      	lsls	r3, r3, #2
 800e27e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800e282:	4413      	add	r3, r2
 800e284:	f843 5c44 	str.w	r5, [r3, #-68]
	/* Output the DC coefficient */
	(*block)[0] = (JCOEF) s;
 800e288:	b22a      	sxth	r2, r5
 800e28a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e28c:	801a      	strh	r2, [r3, #0]

	/* Section F.2.2.2: decode the AC coefficients */
	/* Since zeroes are skipped, output area must be cleared beforehand */
	for (; k < coef_limit; k++) {
 800e28e:	e076      	b.n	800e37e <decode_mcu_sub+0x2a6>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800e290:	2c07      	cmp	r4, #7
 800e292:	dc11      	bgt.n	800e2b8 <decode_mcu_sub+0x1e0>
 800e294:	f107 001c 	add.w	r0, r7, #28
 800e298:	2300      	movs	r3, #0
 800e29a:	4622      	mov	r2, r4
 800e29c:	4631      	mov	r1, r6
 800e29e:	f7ff f8eb 	bl	800d478 <jpeg_fill_bit_buffer>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d101      	bne.n	800e2ac <decode_mcu_sub+0x1d4>
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	e105      	b.n	800e4b8 <decode_mcu_sub+0x3e0>
 800e2ac:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800e2ae:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800e2b0:	2c07      	cmp	r4, #7
 800e2b2:	dc01      	bgt.n	800e2b8 <decode_mcu_sub+0x1e0>
 800e2b4:	2501      	movs	r5, #1
 800e2b6:	e015      	b.n	800e2e4 <decode_mcu_sub+0x20c>
 800e2b8:	f1a4 0308 	sub.w	r3, r4, #8
 800e2bc:	fa46 f303 	asr.w	r3, r6, r3
 800e2c0:	22ff      	movs	r2, #255	; 0xff
 800e2c2:	ea03 0902 	and.w	r9, r3, r2
 800e2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c8:	f109 0224 	add.w	r2, r9, #36	; 0x24
 800e2cc:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800e2d0:	2d00      	cmp	r5, #0
 800e2d2:	d006      	beq.n	800e2e2 <decode_mcu_sub+0x20a>
 800e2d4:	1b64      	subs	r4, r4, r5
 800e2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d8:	444b      	add	r3, r9
 800e2da:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800e2de:	461d      	mov	r5, r3
 800e2e0:	e00f      	b.n	800e302 <decode_mcu_sub+0x22a>
 800e2e2:	2509      	movs	r5, #9
 800e2e4:	f107 001c 	add.w	r0, r7, #28
 800e2e8:	9500      	str	r5, [sp, #0]
 800e2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ec:	4622      	mov	r2, r4
 800e2ee:	4631      	mov	r1, r6
 800e2f0:	f7ff f948 	bl	800d584 <jpeg_huff_decode>
 800e2f4:	4605      	mov	r5, r0
 800e2f6:	2d00      	cmp	r5, #0
 800e2f8:	da01      	bge.n	800e2fe <decode_mcu_sub+0x226>
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	e0dc      	b.n	800e4b8 <decode_mcu_sub+0x3e0>
 800e2fe:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800e300:	6abc      	ldr	r4, [r7, #40]	; 0x28

	  r = s >> 4;
 800e302:	ea4f 1925 	mov.w	r9, r5, asr #4
	  s &= 15;
 800e306:	f005 050f 	and.w	r5, r5, #15

	  if (s) {
 800e30a:	2d00      	cmp	r5, #0
 800e30c:	d030      	beq.n	800e370 <decode_mcu_sub+0x298>
	    k += r;
 800e30e:	44c8      	add	r8, r9
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800e310:	42ac      	cmp	r4, r5
 800e312:	da0d      	bge.n	800e330 <decode_mcu_sub+0x258>
 800e314:	f107 001c 	add.w	r0, r7, #28
 800e318:	462b      	mov	r3, r5
 800e31a:	4622      	mov	r2, r4
 800e31c:	4631      	mov	r1, r6
 800e31e:	f7ff f8ab 	bl	800d478 <jpeg_fill_bit_buffer>
 800e322:	4603      	mov	r3, r0
 800e324:	2b00      	cmp	r3, #0
 800e326:	d101      	bne.n	800e32c <decode_mcu_sub+0x254>
 800e328:	2300      	movs	r3, #0
 800e32a:	e0c5      	b.n	800e4b8 <decode_mcu_sub+0x3e0>
 800e32c:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800e32e:	6abc      	ldr	r4, [r7, #40]	; 0x28
	    r = GET_BITS(s);
 800e330:	1b64      	subs	r4, r4, r5
 800e332:	fa46 f204 	asr.w	r2, r6, r4
 800e336:	4b63      	ldr	r3, [pc, #396]	; (800e4c4 <decode_mcu_sub+0x3ec>)
 800e338:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e33c:	ea02 0903 	and.w	r9, r2, r3
	    s = HUFF_EXTEND(r, s);
 800e340:	1e6b      	subs	r3, r5, #1
 800e342:	4a60      	ldr	r2, [pc, #384]	; (800e4c4 <decode_mcu_sub+0x3ec>)
 800e344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e348:	4599      	cmp	r9, r3
 800e34a:	dc05      	bgt.n	800e358 <decode_mcu_sub+0x280>
 800e34c:	4b5d      	ldr	r3, [pc, #372]	; (800e4c4 <decode_mcu_sub+0x3ec>)
 800e34e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e352:	eba9 0303 	sub.w	r3, r9, r3
 800e356:	e000      	b.n	800e35a <decode_mcu_sub+0x282>
 800e358:	464b      	mov	r3, r9
 800e35a:	461d      	mov	r5, r3
	    /* Output coefficient in natural (dezigzagged) order.
	     * Note: the extra entries in natural_order[] will save us
	     * if k > Se, which could happen if the data is corrupted.
	     */
	    (*block)[natural_order[k]] = (JCOEF) s;
 800e35c:	4643      	mov	r3, r8
 800e35e:	009b      	lsls	r3, r3, #2
 800e360:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e362:	4413      	add	r3, r2
 800e364:	681a      	ldr	r2, [r3, #0]
 800e366:	b229      	sxth	r1, r5
 800e368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e36a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800e36e:	e004      	b.n	800e37a <decode_mcu_sub+0x2a2>
	  } else {
	    if (r != 15)
 800e370:	f1b9 0f0f 	cmp.w	r9, #15
 800e374:	d178      	bne.n	800e468 <decode_mcu_sub+0x390>
	      goto EndOfBlock;
	    k += 15;
 800e376:	f108 080f 	add.w	r8, r8, #15
	for (; k < coef_limit; k++) {
 800e37a:	f108 0801 	add.w	r8, r8, #1
 800e37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e380:	4598      	cmp	r8, r3
 800e382:	db85      	blt.n	800e290 <decode_mcu_sub+0x1b8>
 800e384:	e06c      	b.n	800e460 <decode_mcu_sub+0x388>
	  }
	}
      } else {
	if (s) {
 800e386:	2d00      	cmp	r5, #0
 800e388:	d06a      	beq.n	800e460 <decode_mcu_sub+0x388>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800e38a:	42ac      	cmp	r4, r5
 800e38c:	da0d      	bge.n	800e3aa <decode_mcu_sub+0x2d2>
 800e38e:	f107 001c 	add.w	r0, r7, #28
 800e392:	462b      	mov	r3, r5
 800e394:	4622      	mov	r2, r4
 800e396:	4631      	mov	r1, r6
 800e398:	f7ff f86e 	bl	800d478 <jpeg_fill_bit_buffer>
 800e39c:	4603      	mov	r3, r0
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d101      	bne.n	800e3a6 <decode_mcu_sub+0x2ce>
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	e088      	b.n	800e4b8 <decode_mcu_sub+0x3e0>
 800e3a6:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800e3a8:	6abc      	ldr	r4, [r7, #40]	; 0x28
	  DROP_BITS(s);
 800e3aa:	1b64      	subs	r4, r4, r5
	}
      }

      /* Section F.2.2.2: decode the AC coefficients */
      /* In this path we just discard the values */
      for (; k <= Se; k++) {
 800e3ac:	e058      	b.n	800e460 <decode_mcu_sub+0x388>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800e3ae:	2c07      	cmp	r4, #7
 800e3b0:	dc11      	bgt.n	800e3d6 <decode_mcu_sub+0x2fe>
 800e3b2:	f107 001c 	add.w	r0, r7, #28
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	4622      	mov	r2, r4
 800e3ba:	4631      	mov	r1, r6
 800e3bc:	f7ff f85c 	bl	800d478 <jpeg_fill_bit_buffer>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d101      	bne.n	800e3ca <decode_mcu_sub+0x2f2>
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	e076      	b.n	800e4b8 <decode_mcu_sub+0x3e0>
 800e3ca:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800e3cc:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800e3ce:	2c07      	cmp	r4, #7
 800e3d0:	dc01      	bgt.n	800e3d6 <decode_mcu_sub+0x2fe>
 800e3d2:	2501      	movs	r5, #1
 800e3d4:	e015      	b.n	800e402 <decode_mcu_sub+0x32a>
 800e3d6:	f1a4 0308 	sub.w	r3, r4, #8
 800e3da:	fa46 f303 	asr.w	r3, r6, r3
 800e3de:	22ff      	movs	r2, #255	; 0xff
 800e3e0:	ea03 0902 	and.w	r9, r3, r2
 800e3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e6:	f109 0224 	add.w	r2, r9, #36	; 0x24
 800e3ea:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800e3ee:	2d00      	cmp	r5, #0
 800e3f0:	d006      	beq.n	800e400 <decode_mcu_sub+0x328>
 800e3f2:	1b64      	subs	r4, r4, r5
 800e3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3f6:	444b      	add	r3, r9
 800e3f8:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800e3fc:	461d      	mov	r5, r3
 800e3fe:	e00f      	b.n	800e420 <decode_mcu_sub+0x348>
 800e400:	2509      	movs	r5, #9
 800e402:	f107 001c 	add.w	r0, r7, #28
 800e406:	9500      	str	r5, [sp, #0]
 800e408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e40a:	4622      	mov	r2, r4
 800e40c:	4631      	mov	r1, r6
 800e40e:	f7ff f8b9 	bl	800d584 <jpeg_huff_decode>
 800e412:	4605      	mov	r5, r0
 800e414:	2d00      	cmp	r5, #0
 800e416:	da01      	bge.n	800e41c <decode_mcu_sub+0x344>
 800e418:	2300      	movs	r3, #0
 800e41a:	e04d      	b.n	800e4b8 <decode_mcu_sub+0x3e0>
 800e41c:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800e41e:	6abc      	ldr	r4, [r7, #40]	; 0x28

	r = s >> 4;
 800e420:	ea4f 1925 	mov.w	r9, r5, asr #4
	s &= 15;
 800e424:	f005 050f 	and.w	r5, r5, #15

	if (s) {
 800e428:	2d00      	cmp	r5, #0
 800e42a:	d012      	beq.n	800e452 <decode_mcu_sub+0x37a>
	  k += r;
 800e42c:	44c8      	add	r8, r9
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800e42e:	42ac      	cmp	r4, r5
 800e430:	da0d      	bge.n	800e44e <decode_mcu_sub+0x376>
 800e432:	f107 001c 	add.w	r0, r7, #28
 800e436:	462b      	mov	r3, r5
 800e438:	4622      	mov	r2, r4
 800e43a:	4631      	mov	r1, r6
 800e43c:	f7ff f81c 	bl	800d478 <jpeg_fill_bit_buffer>
 800e440:	4603      	mov	r3, r0
 800e442:	2b00      	cmp	r3, #0
 800e444:	d101      	bne.n	800e44a <decode_mcu_sub+0x372>
 800e446:	2300      	movs	r3, #0
 800e448:	e036      	b.n	800e4b8 <decode_mcu_sub+0x3e0>
 800e44a:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800e44c:	6abc      	ldr	r4, [r7, #40]	; 0x28
	  DROP_BITS(s);
 800e44e:	1b64      	subs	r4, r4, r5
 800e450:	e004      	b.n	800e45c <decode_mcu_sub+0x384>
	} else {
	  if (r != 15)
 800e452:	f1b9 0f0f 	cmp.w	r9, #15
 800e456:	d109      	bne.n	800e46c <decode_mcu_sub+0x394>
	    break;
	  k += 15;
 800e458:	f108 080f 	add.w	r8, r8, #15
      for (; k <= Se; k++) {
 800e45c:	f108 0801 	add.w	r8, r8, #1
 800e460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e462:	4598      	cmp	r8, r3
 800e464:	dda3      	ble.n	800e3ae <decode_mcu_sub+0x2d6>
	}
      }

      EndOfBlock: ;
 800e466:	e002      	b.n	800e46e <decode_mcu_sub+0x396>
	      goto EndOfBlock;
 800e468:	bf00      	nop
 800e46a:	e000      	b.n	800e46e <decode_mcu_sub+0x396>
	    break;
 800e46c:	bf00      	nop
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800e46e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e470:	3301      	adds	r3, #1
 800e472:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800e47a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e47c:	429a      	cmp	r2, r3
 800e47e:	f6ff ae6f 	blt.w	800e160 <decode_mcu_sub+0x88>
    }

    /* Completed MCU, so update state */
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	699b      	ldr	r3, [r3, #24]
 800e486:	69fa      	ldr	r2, [r7, #28]
 800e488:	601a      	str	r2, [r3, #0]
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	699b      	ldr	r3, [r3, #24]
 800e48e:	6a3a      	ldr	r2, [r7, #32]
 800e490:	605a      	str	r2, [r3, #4]
 800e492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e494:	609e      	str	r6, [r3, #8]
 800e496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e498:	60dc      	str	r4, [r3, #12]
    ASSIGN_STATE(entropy->saved, state);
 800e49a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e49c:	f103 0410 	add.w	r4, r3, #16
 800e4a0:	f107 0508 	add.w	r5, r7, #8
 800e4a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e4a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e4a8:	682b      	ldr	r3, [r5, #0]
 800e4aa:	6023      	str	r3, [r4, #0]
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800e4ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4b0:	1e5a      	subs	r2, r3, #1
 800e4b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4b4:	629a      	str	r2, [r3, #40]	; 0x28

  return TRUE;
 800e4b6:	2301      	movs	r3, #1
}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3754      	adds	r7, #84	; 0x54
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4c2:	bf00      	nop
 800e4c4:	080272bc 	.word	0x080272bc

0800e4c8 <decode_mcu>:
 * full-size blocks.
 */

METHODDEF(boolean)
decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800e4c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e4cc:	b095      	sub	sp, #84	; 0x54
 800e4ce:	af02      	add	r7, sp, #8
 800e4d0:	6078      	str	r0, [r7, #4]
 800e4d2:	6039      	str	r1, [r7, #0]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800e4da:	643b      	str	r3, [r7, #64]	; 0x40
  int blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d00b      	beq.n	800e4fe <decode_mcu+0x36>
    if (entropy->restarts_to_go == 0)
 800e4e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d107      	bne.n	800e4fe <decode_mcu+0x36>
      if (! process_restart(cinfo))
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f7ff f8ac 	bl	800d64c <process_restart>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d101      	bne.n	800e4fe <decode_mcu+0x36>
	return FALSE;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	e1ca      	b.n	800e894 <decode_mcu+0x3cc>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800e4fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e502:	2b00      	cmp	r3, #0
 800e504:	f040 81c0 	bne.w	800e888 <decode_mcu+0x3c0>

    /* Load up working state */
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	699b      	ldr	r3, [r3, #24]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	61fb      	str	r3, [r7, #28]
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	699b      	ldr	r3, [r3, #24]
 800e518:	685b      	ldr	r3, [r3, #4]
 800e51a:	623b      	str	r3, [r7, #32]
 800e51c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e51e:	689e      	ldr	r6, [r3, #8]
 800e520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e522:	68dc      	ldr	r4, [r3, #12]
    ASSIGN_STATE(state, entropy->saved);
 800e524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e526:	f107 0508 	add.w	r5, r7, #8
 800e52a:	f103 0c10 	add.w	ip, r3, #16
 800e52e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e532:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e534:	f8dc 3000 	ldr.w	r3, [ip]
 800e538:	602b      	str	r3, [r5, #0]

    /* Outer loop handles each block in the MCU */

    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800e53a:	2300      	movs	r3, #0
 800e53c:	647b      	str	r3, [r7, #68]	; 0x44
 800e53e:	e187      	b.n	800e850 <decode_mcu+0x388>
      JBLOCKROW block = MCU_data[blkn];
 800e540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e542:	009b      	lsls	r3, r3, #2
 800e544:	683a      	ldr	r2, [r7, #0]
 800e546:	4413      	add	r3, r2
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	63fb      	str	r3, [r7, #60]	; 0x3c
      int coef_limit, ci;

      /* Decode a single block's worth of coefficients */

      /* Section F.2.2.1: decode the DC coefficient difference */
      htbl = entropy->dc_cur_tbls[blkn];
 800e54c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e54e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e550:	3218      	adds	r2, #24
 800e552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e556:	63bb      	str	r3, [r7, #56]	; 0x38
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800e558:	2c07      	cmp	r4, #7
 800e55a:	dc11      	bgt.n	800e580 <decode_mcu+0xb8>
 800e55c:	f107 001c 	add.w	r0, r7, #28
 800e560:	2300      	movs	r3, #0
 800e562:	4622      	mov	r2, r4
 800e564:	4631      	mov	r1, r6
 800e566:	f7fe ff87 	bl	800d478 <jpeg_fill_bit_buffer>
 800e56a:	4603      	mov	r3, r0
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d101      	bne.n	800e574 <decode_mcu+0xac>
 800e570:	2300      	movs	r3, #0
 800e572:	e18f      	b.n	800e894 <decode_mcu+0x3cc>
 800e574:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800e576:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800e578:	2c07      	cmp	r4, #7
 800e57a:	dc01      	bgt.n	800e580 <decode_mcu+0xb8>
 800e57c:	2501      	movs	r5, #1
 800e57e:	e015      	b.n	800e5ac <decode_mcu+0xe4>
 800e580:	f1a4 0308 	sub.w	r3, r4, #8
 800e584:	fa46 f303 	asr.w	r3, r6, r3
 800e588:	22ff      	movs	r2, #255	; 0xff
 800e58a:	ea03 0802 	and.w	r8, r3, r2
 800e58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e590:	f108 0224 	add.w	r2, r8, #36	; 0x24
 800e594:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800e598:	2d00      	cmp	r5, #0
 800e59a:	d006      	beq.n	800e5aa <decode_mcu+0xe2>
 800e59c:	1b64      	subs	r4, r4, r5
 800e59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a0:	4443      	add	r3, r8
 800e5a2:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800e5a6:	461d      	mov	r5, r3
 800e5a8:	e00f      	b.n	800e5ca <decode_mcu+0x102>
 800e5aa:	2509      	movs	r5, #9
 800e5ac:	f107 001c 	add.w	r0, r7, #28
 800e5b0:	9500      	str	r5, [sp, #0]
 800e5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b4:	4622      	mov	r2, r4
 800e5b6:	4631      	mov	r1, r6
 800e5b8:	f7fe ffe4 	bl	800d584 <jpeg_huff_decode>
 800e5bc:	4605      	mov	r5, r0
 800e5be:	2d00      	cmp	r5, #0
 800e5c0:	da01      	bge.n	800e5c6 <decode_mcu+0xfe>
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	e166      	b.n	800e894 <decode_mcu+0x3cc>
 800e5c6:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800e5c8:	6abc      	ldr	r4, [r7, #40]	; 0x28

      htbl = entropy->ac_cur_tbls[blkn];
 800e5ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5ce:	3222      	adds	r2, #34	; 0x22
 800e5d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5d4:	63bb      	str	r3, [r7, #56]	; 0x38
      k = 1;
 800e5d6:	f04f 0801 	mov.w	r8, #1
      coef_limit = entropy->coef_limit[blkn];
 800e5da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5de:	322c      	adds	r2, #44	; 0x2c
 800e5e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5e4:	637b      	str	r3, [r7, #52]	; 0x34
      if (coef_limit) {
 800e5e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	f000 80ba 	beq.w	800e762 <decode_mcu+0x29a>
	/* Convert DC difference to actual value, update last_dc_val */
	if (s) {
 800e5ee:	2d00      	cmp	r5, #0
 800e5f0:	d025      	beq.n	800e63e <decode_mcu+0x176>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800e5f2:	42ac      	cmp	r4, r5
 800e5f4:	da0d      	bge.n	800e612 <decode_mcu+0x14a>
 800e5f6:	f107 001c 	add.w	r0, r7, #28
 800e5fa:	462b      	mov	r3, r5
 800e5fc:	4622      	mov	r2, r4
 800e5fe:	4631      	mov	r1, r6
 800e600:	f7fe ff3a 	bl	800d478 <jpeg_fill_bit_buffer>
 800e604:	4603      	mov	r3, r0
 800e606:	2b00      	cmp	r3, #0
 800e608:	d101      	bne.n	800e60e <decode_mcu+0x146>
 800e60a:	2300      	movs	r3, #0
 800e60c:	e142      	b.n	800e894 <decode_mcu+0x3cc>
 800e60e:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800e610:	6abc      	ldr	r4, [r7, #40]	; 0x28
	  r = GET_BITS(s);
 800e612:	1b64      	subs	r4, r4, r5
 800e614:	fa46 f204 	asr.w	r2, r6, r4
 800e618:	4ba1      	ldr	r3, [pc, #644]	; (800e8a0 <decode_mcu+0x3d8>)
 800e61a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e61e:	ea02 0903 	and.w	r9, r2, r3
	  s = HUFF_EXTEND(r, s);
 800e622:	1e6b      	subs	r3, r5, #1
 800e624:	4a9e      	ldr	r2, [pc, #632]	; (800e8a0 <decode_mcu+0x3d8>)
 800e626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e62a:	4599      	cmp	r9, r3
 800e62c:	dc05      	bgt.n	800e63a <decode_mcu+0x172>
 800e62e:	4b9c      	ldr	r3, [pc, #624]	; (800e8a0 <decode_mcu+0x3d8>)
 800e630:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e634:	eba9 0303 	sub.w	r3, r9, r3
 800e638:	e000      	b.n	800e63c <decode_mcu+0x174>
 800e63a:	464b      	mov	r3, r9
 800e63c:	461d      	mov	r5, r3
	}
	ci = cinfo->MCU_membership[blkn];
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e642:	325c      	adds	r2, #92	; 0x5c
 800e644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e648:	633b      	str	r3, [r7, #48]	; 0x30
	s += state.last_dc_val[ci];
 800e64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e64c:	009b      	lsls	r3, r3, #2
 800e64e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e652:	4413      	add	r3, r2
 800e654:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800e658:	441d      	add	r5, r3
	state.last_dc_val[ci] = s;
 800e65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e65c:	009b      	lsls	r3, r3, #2
 800e65e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e662:	4413      	add	r3, r2
 800e664:	f843 5c3c 	str.w	r5, [r3, #-60]
	/* Output the DC coefficient */
	(*block)[0] = (JCOEF) s;
 800e668:	b22a      	sxth	r2, r5
 800e66a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e66c:	801a      	strh	r2, [r3, #0]

	/* Section F.2.2.2: decode the AC coefficients */
	/* Since zeroes are skipped, output area must be cleared beforehand */
	for (; k < coef_limit; k++) {
 800e66e:	e074      	b.n	800e75a <decode_mcu+0x292>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800e670:	2c07      	cmp	r4, #7
 800e672:	dc11      	bgt.n	800e698 <decode_mcu+0x1d0>
 800e674:	f107 001c 	add.w	r0, r7, #28
 800e678:	2300      	movs	r3, #0
 800e67a:	4622      	mov	r2, r4
 800e67c:	4631      	mov	r1, r6
 800e67e:	f7fe fefb 	bl	800d478 <jpeg_fill_bit_buffer>
 800e682:	4603      	mov	r3, r0
 800e684:	2b00      	cmp	r3, #0
 800e686:	d101      	bne.n	800e68c <decode_mcu+0x1c4>
 800e688:	2300      	movs	r3, #0
 800e68a:	e103      	b.n	800e894 <decode_mcu+0x3cc>
 800e68c:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800e68e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800e690:	2c07      	cmp	r4, #7
 800e692:	dc01      	bgt.n	800e698 <decode_mcu+0x1d0>
 800e694:	2501      	movs	r5, #1
 800e696:	e015      	b.n	800e6c4 <decode_mcu+0x1fc>
 800e698:	f1a4 0308 	sub.w	r3, r4, #8
 800e69c:	fa46 f303 	asr.w	r3, r6, r3
 800e6a0:	22ff      	movs	r2, #255	; 0xff
 800e6a2:	ea03 0902 	and.w	r9, r3, r2
 800e6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6a8:	f109 0224 	add.w	r2, r9, #36	; 0x24
 800e6ac:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800e6b0:	2d00      	cmp	r5, #0
 800e6b2:	d006      	beq.n	800e6c2 <decode_mcu+0x1fa>
 800e6b4:	1b64      	subs	r4, r4, r5
 800e6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b8:	444b      	add	r3, r9
 800e6ba:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800e6be:	461d      	mov	r5, r3
 800e6c0:	e00f      	b.n	800e6e2 <decode_mcu+0x21a>
 800e6c2:	2509      	movs	r5, #9
 800e6c4:	f107 001c 	add.w	r0, r7, #28
 800e6c8:	9500      	str	r5, [sp, #0]
 800e6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6cc:	4622      	mov	r2, r4
 800e6ce:	4631      	mov	r1, r6
 800e6d0:	f7fe ff58 	bl	800d584 <jpeg_huff_decode>
 800e6d4:	4605      	mov	r5, r0
 800e6d6:	2d00      	cmp	r5, #0
 800e6d8:	da01      	bge.n	800e6de <decode_mcu+0x216>
 800e6da:	2300      	movs	r3, #0
 800e6dc:	e0da      	b.n	800e894 <decode_mcu+0x3cc>
 800e6de:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800e6e0:	6abc      	ldr	r4, [r7, #40]	; 0x28

	  r = s >> 4;
 800e6e2:	ea4f 1925 	mov.w	r9, r5, asr #4
	  s &= 15;
 800e6e6:	f005 050f 	and.w	r5, r5, #15

	  if (s) {
 800e6ea:	2d00      	cmp	r5, #0
 800e6ec:	d02e      	beq.n	800e74c <decode_mcu+0x284>
	    k += r;
 800e6ee:	44c8      	add	r8, r9
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800e6f0:	42ac      	cmp	r4, r5
 800e6f2:	da0d      	bge.n	800e710 <decode_mcu+0x248>
 800e6f4:	f107 001c 	add.w	r0, r7, #28
 800e6f8:	462b      	mov	r3, r5
 800e6fa:	4622      	mov	r2, r4
 800e6fc:	4631      	mov	r1, r6
 800e6fe:	f7fe febb 	bl	800d478 <jpeg_fill_bit_buffer>
 800e702:	4603      	mov	r3, r0
 800e704:	2b00      	cmp	r3, #0
 800e706:	d101      	bne.n	800e70c <decode_mcu+0x244>
 800e708:	2300      	movs	r3, #0
 800e70a:	e0c3      	b.n	800e894 <decode_mcu+0x3cc>
 800e70c:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800e70e:	6abc      	ldr	r4, [r7, #40]	; 0x28
	    r = GET_BITS(s);
 800e710:	1b64      	subs	r4, r4, r5
 800e712:	fa46 f204 	asr.w	r2, r6, r4
 800e716:	4b62      	ldr	r3, [pc, #392]	; (800e8a0 <decode_mcu+0x3d8>)
 800e718:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e71c:	ea02 0903 	and.w	r9, r2, r3
	    s = HUFF_EXTEND(r, s);
 800e720:	1e6b      	subs	r3, r5, #1
 800e722:	4a5f      	ldr	r2, [pc, #380]	; (800e8a0 <decode_mcu+0x3d8>)
 800e724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e728:	4599      	cmp	r9, r3
 800e72a:	dc05      	bgt.n	800e738 <decode_mcu+0x270>
 800e72c:	4b5c      	ldr	r3, [pc, #368]	; (800e8a0 <decode_mcu+0x3d8>)
 800e72e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e732:	eba9 0303 	sub.w	r3, r9, r3
 800e736:	e000      	b.n	800e73a <decode_mcu+0x272>
 800e738:	464b      	mov	r3, r9
 800e73a:	461d      	mov	r5, r3
	    /* Output coefficient in natural (dezigzagged) order.
	     * Note: the extra entries in jpeg_natural_order[] will save us
	     * if k >= DCTSIZE2, which could happen if the data is corrupted.
	     */
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800e73c:	4b59      	ldr	r3, [pc, #356]	; (800e8a4 <decode_mcu+0x3dc>)
 800e73e:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 800e742:	b229      	sxth	r1, r5
 800e744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e746:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800e74a:	e004      	b.n	800e756 <decode_mcu+0x28e>
	  } else {
	    if (r != 15)
 800e74c:	f1b9 0f0f 	cmp.w	r9, #15
 800e750:	d178      	bne.n	800e844 <decode_mcu+0x37c>
	      goto EndOfBlock;
	    k += 15;
 800e752:	f108 080f 	add.w	r8, r8, #15
	for (; k < coef_limit; k++) {
 800e756:	f108 0801 	add.w	r8, r8, #1
 800e75a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e75c:	4598      	cmp	r8, r3
 800e75e:	db87      	blt.n	800e670 <decode_mcu+0x1a8>
 800e760:	e06c      	b.n	800e83c <decode_mcu+0x374>
	  }
	}
      } else {
	if (s) {
 800e762:	2d00      	cmp	r5, #0
 800e764:	d06a      	beq.n	800e83c <decode_mcu+0x374>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800e766:	42ac      	cmp	r4, r5
 800e768:	da0d      	bge.n	800e786 <decode_mcu+0x2be>
 800e76a:	f107 001c 	add.w	r0, r7, #28
 800e76e:	462b      	mov	r3, r5
 800e770:	4622      	mov	r2, r4
 800e772:	4631      	mov	r1, r6
 800e774:	f7fe fe80 	bl	800d478 <jpeg_fill_bit_buffer>
 800e778:	4603      	mov	r3, r0
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d101      	bne.n	800e782 <decode_mcu+0x2ba>
 800e77e:	2300      	movs	r3, #0
 800e780:	e088      	b.n	800e894 <decode_mcu+0x3cc>
 800e782:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800e784:	6abc      	ldr	r4, [r7, #40]	; 0x28
	  DROP_BITS(s);
 800e786:	1b64      	subs	r4, r4, r5
	}
      }

      /* Section F.2.2.2: decode the AC coefficients */
      /* In this path we just discard the values */
      for (; k < DCTSIZE2; k++) {
 800e788:	e058      	b.n	800e83c <decode_mcu+0x374>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800e78a:	2c07      	cmp	r4, #7
 800e78c:	dc11      	bgt.n	800e7b2 <decode_mcu+0x2ea>
 800e78e:	f107 001c 	add.w	r0, r7, #28
 800e792:	2300      	movs	r3, #0
 800e794:	4622      	mov	r2, r4
 800e796:	4631      	mov	r1, r6
 800e798:	f7fe fe6e 	bl	800d478 <jpeg_fill_bit_buffer>
 800e79c:	4603      	mov	r3, r0
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d101      	bne.n	800e7a6 <decode_mcu+0x2de>
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	e076      	b.n	800e894 <decode_mcu+0x3cc>
 800e7a6:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800e7a8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800e7aa:	2c07      	cmp	r4, #7
 800e7ac:	dc01      	bgt.n	800e7b2 <decode_mcu+0x2ea>
 800e7ae:	2501      	movs	r5, #1
 800e7b0:	e015      	b.n	800e7de <decode_mcu+0x316>
 800e7b2:	f1a4 0308 	sub.w	r3, r4, #8
 800e7b6:	fa46 f303 	asr.w	r3, r6, r3
 800e7ba:	22ff      	movs	r2, #255	; 0xff
 800e7bc:	ea03 0902 	and.w	r9, r3, r2
 800e7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7c2:	f109 0224 	add.w	r2, r9, #36	; 0x24
 800e7c6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800e7ca:	2d00      	cmp	r5, #0
 800e7cc:	d006      	beq.n	800e7dc <decode_mcu+0x314>
 800e7ce:	1b64      	subs	r4, r4, r5
 800e7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d2:	444b      	add	r3, r9
 800e7d4:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800e7d8:	461d      	mov	r5, r3
 800e7da:	e00f      	b.n	800e7fc <decode_mcu+0x334>
 800e7dc:	2509      	movs	r5, #9
 800e7de:	f107 001c 	add.w	r0, r7, #28
 800e7e2:	9500      	str	r5, [sp, #0]
 800e7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e6:	4622      	mov	r2, r4
 800e7e8:	4631      	mov	r1, r6
 800e7ea:	f7fe fecb 	bl	800d584 <jpeg_huff_decode>
 800e7ee:	4605      	mov	r5, r0
 800e7f0:	2d00      	cmp	r5, #0
 800e7f2:	da01      	bge.n	800e7f8 <decode_mcu+0x330>
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	e04d      	b.n	800e894 <decode_mcu+0x3cc>
 800e7f8:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800e7fa:	6abc      	ldr	r4, [r7, #40]	; 0x28

	r = s >> 4;
 800e7fc:	ea4f 1925 	mov.w	r9, r5, asr #4
	s &= 15;
 800e800:	f005 050f 	and.w	r5, r5, #15

	if (s) {
 800e804:	2d00      	cmp	r5, #0
 800e806:	d012      	beq.n	800e82e <decode_mcu+0x366>
	  k += r;
 800e808:	44c8      	add	r8, r9
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800e80a:	42ac      	cmp	r4, r5
 800e80c:	da0d      	bge.n	800e82a <decode_mcu+0x362>
 800e80e:	f107 001c 	add.w	r0, r7, #28
 800e812:	462b      	mov	r3, r5
 800e814:	4622      	mov	r2, r4
 800e816:	4631      	mov	r1, r6
 800e818:	f7fe fe2e 	bl	800d478 <jpeg_fill_bit_buffer>
 800e81c:	4603      	mov	r3, r0
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d101      	bne.n	800e826 <decode_mcu+0x35e>
 800e822:	2300      	movs	r3, #0
 800e824:	e036      	b.n	800e894 <decode_mcu+0x3cc>
 800e826:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800e828:	6abc      	ldr	r4, [r7, #40]	; 0x28
	  DROP_BITS(s);
 800e82a:	1b64      	subs	r4, r4, r5
 800e82c:	e004      	b.n	800e838 <decode_mcu+0x370>
	} else {
	  if (r != 15)
 800e82e:	f1b9 0f0f 	cmp.w	r9, #15
 800e832:	d109      	bne.n	800e848 <decode_mcu+0x380>
	    break;
	  k += 15;
 800e834:	f108 080f 	add.w	r8, r8, #15
      for (; k < DCTSIZE2; k++) {
 800e838:	f108 0801 	add.w	r8, r8, #1
 800e83c:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 800e840:	dda3      	ble.n	800e78a <decode_mcu+0x2c2>
	}
      }

      EndOfBlock: ;
 800e842:	e002      	b.n	800e84a <decode_mcu+0x382>
	      goto EndOfBlock;
 800e844:	bf00      	nop
 800e846:	e000      	b.n	800e84a <decode_mcu+0x382>
	    break;
 800e848:	bf00      	nop
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800e84a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e84c:	3301      	adds	r3, #1
 800e84e:	647b      	str	r3, [r7, #68]	; 0x44
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800e856:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e858:	429a      	cmp	r2, r3
 800e85a:	f6ff ae71 	blt.w	800e540 <decode_mcu+0x78>
    }

    /* Completed MCU, so update state */
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	699b      	ldr	r3, [r3, #24]
 800e862:	69fa      	ldr	r2, [r7, #28]
 800e864:	601a      	str	r2, [r3, #0]
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	699b      	ldr	r3, [r3, #24]
 800e86a:	6a3a      	ldr	r2, [r7, #32]
 800e86c:	605a      	str	r2, [r3, #4]
 800e86e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e870:	609e      	str	r6, [r3, #8]
 800e872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e874:	60dc      	str	r4, [r3, #12]
    ASSIGN_STATE(entropy->saved, state);
 800e876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e878:	f103 0410 	add.w	r4, r3, #16
 800e87c:	f107 0508 	add.w	r5, r7, #8
 800e880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e884:	682b      	ldr	r3, [r5, #0]
 800e886:	6023      	str	r3, [r4, #0]
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800e888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e88a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e88c:	1e5a      	subs	r2, r3, #1
 800e88e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e890:	629a      	str	r2, [r3, #40]	; 0x28

  return TRUE;
 800e892:	2301      	movs	r3, #1
}
 800e894:	4618      	mov	r0, r3
 800e896:	374c      	adds	r7, #76	; 0x4c
 800e898:	46bd      	mov	sp, r7
 800e89a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e89e:	bf00      	nop
 800e8a0:	080272bc 	.word	0x080272bc
 800e8a4:	08027618 	.word	0x08027618

0800e8a8 <start_pass_huff_decoder>:
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF(void)
start_pass_huff_decoder (j_decompress_ptr cinfo)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b08c      	sub	sp, #48	; 0x30
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800e8b6:	61fb      	str	r3, [r7, #28]
  int ci, blkn, tbl, i;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	f000 8133 	beq.w	800eb2a <start_pass_huff_decoder+0x282>
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d105      	bne.n	800e8da <start_pass_huff_decoder+0x32>
      if (cinfo->Se != 0)
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d015      	beq.n	800e904 <start_pass_huff_decoder+0x5c>
	goto bad;
 800e8d8:	e02d      	b.n	800e936 <start_pass_huff_decoder+0x8e>
    } else {
      /* need not check Ss/Se < 0 since they came from unsigned bytes */
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	db20      	blt.n	800e92c <start_pass_huff_decoder+0x84>
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	dc18      	bgt.n	800e92c <start_pass_huff_decoder+0x84>
	goto bad;
      /* AC scans may have only one component */
      if (cinfo->comps_in_scan != 1)
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800e900:	2b01      	cmp	r3, #1
 800e902:	d115      	bne.n	800e930 <start_pass_huff_decoder+0x88>
	goto bad;
    }
    if (cinfo->Ah != 0) {
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d008      	beq.n	800e920 <start_pass_huff_decoder+0x78>
      /* Successive approximation refinement scan: must have Al = Ah-1. */
      if (cinfo->Ah-1 != cinfo->Al)
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800e914:	1e5a      	subs	r2, r3, #1
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d109      	bne.n	800e934 <start_pass_huff_decoder+0x8c>
	goto bad;
    }
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800e926:	2b0d      	cmp	r3, #13
 800e928:	dd26      	ble.n	800e978 <start_pass_huff_decoder+0xd0>
       * but the spec doesn't say so, and we try to be liberal about what we
       * accept.  Note: large Al values could result in out-of-range DC
       * coefficients during early scans, leading to bizarre displays due to
       * overflows in the IDCT math.  But we won't crash.
       */
      bad:
 800e92a:	e004      	b.n	800e936 <start_pass_huff_decoder+0x8e>
	goto bad;
 800e92c:	bf00      	nop
 800e92e:	e002      	b.n	800e936 <start_pass_huff_decoder+0x8e>
	goto bad;
 800e930:	bf00      	nop
 800e932:	e000      	b.n	800e936 <start_pass_huff_decoder+0x8e>
	goto bad;
 800e934:	bf00      	nop
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	2211      	movs	r2, #17
 800e93c:	615a      	str	r2, [r3, #20]
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	f8d2 2198 	ldr.w	r2, [r2, #408]	; 0x198
 800e948:	619a      	str	r2, [r3, #24]
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	687a      	ldr	r2, [r7, #4]
 800e950:	f8d2 219c 	ldr.w	r2, [r2, #412]	; 0x19c
 800e954:	61da      	str	r2, [r3, #28]
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	687a      	ldr	r2, [r7, #4]
 800e95c:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
 800e960:	621a      	str	r2, [r3, #32]
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	687a      	ldr	r2, [r7, #4]
 800e968:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 800e96c:	625a      	str	r2, [r3, #36]	; 0x24
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	4798      	blx	r3
    }
    /* Update progression status, and verify that scan order is legal.
     * Note that inter-scan inconsistencies are treated as warnings
     * not fatal errors ... not clear if this is right way to behave.
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800e978:	2300      	movs	r3, #0
 800e97a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e97c:	e064      	b.n	800ea48 <start_pass_huff_decoder+0x1a0>
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800e97e:	687a      	ldr	r2, [r7, #4]
 800e980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e982:	3354      	adds	r3, #84	; 0x54
 800e984:	009b      	lsls	r3, r3, #2
 800e986:	4413      	add	r3, r2
 800e988:	685b      	ldr	r3, [r3, #4]
 800e98a:	685b      	ldr	r3, [r3, #4]
 800e98c:	613b      	str	r3, [r7, #16]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	021b      	lsls	r3, r3, #8
 800e998:	4413      	add	r3, r2
 800e99a:	60fb      	str	r3, [r7, #12]
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d016      	beq.n	800e9d4 <start_pass_huff_decoder+0x12c>
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	da12      	bge.n	800e9d4 <start_pass_huff_decoder+0x12c>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	2276      	movs	r2, #118	; 0x76
 800e9b4:	615a      	str	r2, [r3, #20]
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	693a      	ldr	r2, [r7, #16]
 800e9bc:	619a      	str	r2, [r3, #24]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	61da      	str	r2, [r3, #28]
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	685b      	ldr	r3, [r3, #4]
 800e9cc:	f04f 31ff 	mov.w	r1, #4294967295
 800e9d0:	6878      	ldr	r0, [r7, #4]
 800e9d2:	4798      	blx	r3
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800e9da:	623b      	str	r3, [r7, #32]
 800e9dc:	e02b      	b.n	800ea36 <start_pass_huff_decoder+0x18e>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800e9de:	6a3b      	ldr	r3, [r7, #32]
 800e9e0:	009b      	lsls	r3, r3, #2
 800e9e2:	68fa      	ldr	r2, [r7, #12]
 800e9e4:	4413      	add	r3, r2
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e9ec:	60bb      	str	r3, [r7, #8]
	if (cinfo->Ah != expected)
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800e9f4:	68ba      	ldr	r2, [r7, #8]
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d012      	beq.n	800ea20 <start_pass_huff_decoder+0x178>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	2276      	movs	r2, #118	; 0x76
 800ea00:	615a      	str	r2, [r3, #20]
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	693a      	ldr	r2, [r7, #16]
 800ea08:	619a      	str	r2, [r3, #24]
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	6a3a      	ldr	r2, [r7, #32]
 800ea10:	61da      	str	r2, [r3, #28]
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	685b      	ldr	r3, [r3, #4]
 800ea18:	f04f 31ff 	mov.w	r1, #4294967295
 800ea1c:	6878      	ldr	r0, [r7, #4]
 800ea1e:	4798      	blx	r3
	coef_bit_ptr[coefi] = cinfo->Al;
 800ea20:	6a3b      	ldr	r3, [r7, #32]
 800ea22:	009b      	lsls	r3, r3, #2
 800ea24:	68fa      	ldr	r2, [r7, #12]
 800ea26:	4413      	add	r3, r2
 800ea28:	687a      	ldr	r2, [r7, #4]
 800ea2a:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 800ea2e:	601a      	str	r2, [r3, #0]
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800ea30:	6a3b      	ldr	r3, [r7, #32]
 800ea32:	3301      	adds	r3, #1
 800ea34:	623b      	str	r3, [r7, #32]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800ea3c:	6a3a      	ldr	r2, [r7, #32]
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	ddcd      	ble.n	800e9de <start_pass_huff_decoder+0x136>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ea42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea44:	3301      	adds	r3, #1
 800ea46:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800ea4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea50:	429a      	cmp	r2, r3
 800ea52:	db94      	blt.n	800e97e <start_pass_huff_decoder+0xd6>
      }
    }

    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d10c      	bne.n	800ea78 <start_pass_huff_decoder+0x1d0>
      if (cinfo->Ss == 0)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d103      	bne.n	800ea70 <start_pass_huff_decoder+0x1c8>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 800ea68:	69fb      	ldr	r3, [r7, #28]
 800ea6a:	4a6a      	ldr	r2, [pc, #424]	; (800ec14 <start_pass_huff_decoder+0x36c>)
 800ea6c:	605a      	str	r2, [r3, #4]
 800ea6e:	e00f      	b.n	800ea90 <start_pass_huff_decoder+0x1e8>
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800ea70:	69fb      	ldr	r3, [r7, #28]
 800ea72:	4a69      	ldr	r2, [pc, #420]	; (800ec18 <start_pass_huff_decoder+0x370>)
 800ea74:	605a      	str	r2, [r3, #4]
 800ea76:	e00b      	b.n	800ea90 <start_pass_huff_decoder+0x1e8>
    } else {
      if (cinfo->Ss == 0)
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d103      	bne.n	800ea8a <start_pass_huff_decoder+0x1e2>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800ea82:	69fb      	ldr	r3, [r7, #28]
 800ea84:	4a65      	ldr	r2, [pc, #404]	; (800ec1c <start_pass_huff_decoder+0x374>)
 800ea86:	605a      	str	r2, [r3, #4]
 800ea88:	e002      	b.n	800ea90 <start_pass_huff_decoder+0x1e8>
      else
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 800ea8a:	69fb      	ldr	r3, [r7, #28]
 800ea8c:	4a64      	ldr	r2, [pc, #400]	; (800ec20 <start_pass_huff_decoder+0x378>)
 800ea8e:	605a      	str	r2, [r3, #4]
    }

    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ea90:	2300      	movs	r3, #0
 800ea92:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea94:	e03f      	b.n	800eb16 <start_pass_huff_decoder+0x26e>
      compptr = cinfo->cur_comp_info[ci];
 800ea96:	687a      	ldr	r2, [r7, #4]
 800ea98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea9a:	3354      	adds	r3, #84	; 0x54
 800ea9c:	009b      	lsls	r3, r3, #2
 800ea9e:	4413      	add	r3, r2
 800eaa0:	685b      	ldr	r3, [r3, #4]
 800eaa2:	61bb      	str	r3, [r7, #24]
      /* Make sure requested tables are present, and compute derived tables.
       * We may build same derived table more than once, but it's not expensive.
       */
      if (cinfo->Ss == 0) {
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d113      	bne.n	800ead6 <start_pass_huff_decoder+0x22e>
	if (cinfo->Ah == 0) {	/* DC refinement needs no table */
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d124      	bne.n	800eb02 <start_pass_huff_decoder+0x25a>
	  tbl = compptr->dc_tbl_no;
 800eab8:	69bb      	ldr	r3, [r7, #24]
 800eaba:	695b      	ldr	r3, [r3, #20]
 800eabc:	617b      	str	r3, [r7, #20]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	330a      	adds	r3, #10
 800eac2:	009b      	lsls	r3, r3, #2
 800eac4:	69fa      	ldr	r2, [r7, #28]
 800eac6:	4413      	add	r3, r2
 800eac8:	3304      	adds	r3, #4
 800eaca:	697a      	ldr	r2, [r7, #20]
 800eacc:	2101      	movs	r1, #1
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f7fe fab4 	bl	800d03c <jpeg_make_d_derived_tbl>
 800ead4:	e015      	b.n	800eb02 <start_pass_huff_decoder+0x25a>
				  & entropy->derived_tbls[tbl]);
	}
      } else {
	tbl = compptr->ac_tbl_no;
 800ead6:	69bb      	ldr	r3, [r7, #24]
 800ead8:	699b      	ldr	r3, [r3, #24]
 800eada:	617b      	str	r3, [r7, #20]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	330a      	adds	r3, #10
 800eae0:	009b      	lsls	r3, r3, #2
 800eae2:	69fa      	ldr	r2, [r7, #28]
 800eae4:	4413      	add	r3, r2
 800eae6:	3304      	adds	r3, #4
 800eae8:	697a      	ldr	r2, [r7, #20]
 800eaea:	2100      	movs	r1, #0
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f7fe faa5 	bl	800d03c <jpeg_make_d_derived_tbl>
				& entropy->derived_tbls[tbl]);
	/* remember the single active table */
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800eaf2:	69fa      	ldr	r2, [r7, #28]
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	330a      	adds	r3, #10
 800eaf8:	009b      	lsls	r3, r3, #2
 800eafa:	4413      	add	r3, r2
 800eafc:	685a      	ldr	r2, [r3, #4]
 800eafe:	69fb      	ldr	r3, [r7, #28]
 800eb00:	63da      	str	r2, [r3, #60]	; 0x3c
      }
      /* Initialize DC predictions to 0 */
      entropy->saved.last_dc_val[ci] = 0;
 800eb02:	69fa      	ldr	r2, [r7, #28]
 800eb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb06:	3304      	adds	r3, #4
 800eb08:	009b      	lsls	r3, r3, #2
 800eb0a:	4413      	add	r3, r2
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	605a      	str	r2, [r3, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800eb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb12:	3301      	adds	r3, #1
 800eb14:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800eb1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb1e:	429a      	cmp	r2, r3
 800eb20:	dbb9      	blt.n	800ea96 <start_pass_huff_decoder+0x1ee>
    }

    /* Initialize private state variables */
    entropy->saved.EOBRUN = 0;
 800eb22:	69fb      	ldr	r3, [r7, #28]
 800eb24:	2200      	movs	r2, #0
 800eb26:	611a      	str	r2, [r3, #16]
 800eb28:	e21a      	b.n	800ef60 <start_pass_huff_decoder+0x6b8>
  } else {
    /* Check that the scan parameters Ss, Se, Ah/Al are OK for sequential JPEG.
     * This ought to be an error condition, but we make it a warning because
     * there are some baseline files out there with all zeroes in these bytes.
     */
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d11b      	bne.n	800eb6c <start_pass_huff_decoder+0x2c4>
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d116      	bne.n	800eb6c <start_pass_huff_decoder+0x2c4>
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d111      	bne.n	800eb6c <start_pass_huff_decoder+0x2c4>
	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d104      	bne.n	800eb5c <start_pass_huff_decoder+0x2b4>
	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800eb58:	2b3f      	cmp	r3, #63	; 0x3f
 800eb5a:	dc12      	bgt.n	800eb82 <start_pass_huff_decoder+0x2da>
	cinfo->Se != cinfo->lim_Se))
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d00a      	beq.n	800eb82 <start_pass_huff_decoder+0x2da>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	227d      	movs	r2, #125	; 0x7d
 800eb72:	615a      	str	r2, [r3, #20]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	685b      	ldr	r3, [r3, #4]
 800eb7a:	f04f 31ff 	mov.w	r1, #4294967295
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	4798      	blx	r3
     * This is not necessary, but it appears that this version is slightly
     * more performant in the given implementation.
     * With an improved implementation we would prefer a single optimized
     * function.
     */
    if (cinfo->lim_Se != DCTSIZE2-1)
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800eb88:	2b3f      	cmp	r3, #63	; 0x3f
 800eb8a:	d003      	beq.n	800eb94 <start_pass_huff_decoder+0x2ec>
      entropy->pub.decode_mcu = decode_mcu_sub;
 800eb8c:	69fb      	ldr	r3, [r7, #28]
 800eb8e:	4a25      	ldr	r2, [pc, #148]	; (800ec24 <start_pass_huff_decoder+0x37c>)
 800eb90:	605a      	str	r2, [r3, #4]
 800eb92:	e002      	b.n	800eb9a <start_pass_huff_decoder+0x2f2>
    else
      entropy->pub.decode_mcu = decode_mcu;
 800eb94:	69fb      	ldr	r3, [r7, #28]
 800eb96:	4a24      	ldr	r2, [pc, #144]	; (800ec28 <start_pass_huff_decoder+0x380>)
 800eb98:	605a      	str	r2, [r3, #4]

    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb9e:	e02f      	b.n	800ec00 <start_pass_huff_decoder+0x358>
      compptr = cinfo->cur_comp_info[ci];
 800eba0:	687a      	ldr	r2, [r7, #4]
 800eba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba4:	3354      	adds	r3, #84	; 0x54
 800eba6:	009b      	lsls	r3, r3, #2
 800eba8:	4413      	add	r3, r2
 800ebaa:	685b      	ldr	r3, [r3, #4]
 800ebac:	61bb      	str	r3, [r7, #24]
      /* Compute derived values for Huffman tables */
      /* We may do this more than once for a table, but it's not expensive */
      tbl = compptr->dc_tbl_no;
 800ebae:	69bb      	ldr	r3, [r7, #24]
 800ebb0:	695b      	ldr	r3, [r3, #20]
 800ebb2:	617b      	str	r3, [r7, #20]
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800ebb4:	697b      	ldr	r3, [r7, #20]
 800ebb6:	3310      	adds	r3, #16
 800ebb8:	009b      	lsls	r3, r3, #2
 800ebba:	69fa      	ldr	r2, [r7, #28]
 800ebbc:	4413      	add	r3, r2
 800ebbe:	697a      	ldr	r2, [r7, #20]
 800ebc0:	2101      	movs	r1, #1
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f7fe fa3a 	bl	800d03c <jpeg_make_d_derived_tbl>
			      & entropy->dc_derived_tbls[tbl]);
      if (cinfo->lim_Se) {	/* AC needs no table when not present */
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d00c      	beq.n	800ebec <start_pass_huff_decoder+0x344>
	tbl = compptr->ac_tbl_no;
 800ebd2:	69bb      	ldr	r3, [r7, #24]
 800ebd4:	699b      	ldr	r3, [r3, #24]
 800ebd6:	617b      	str	r3, [r7, #20]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800ebd8:	697b      	ldr	r3, [r7, #20]
 800ebda:	3314      	adds	r3, #20
 800ebdc:	009b      	lsls	r3, r3, #2
 800ebde:	69fa      	ldr	r2, [r7, #28]
 800ebe0:	4413      	add	r3, r2
 800ebe2:	697a      	ldr	r2, [r7, #20]
 800ebe4:	2100      	movs	r1, #0
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f7fe fa28 	bl	800d03c <jpeg_make_d_derived_tbl>
				& entropy->ac_derived_tbls[tbl]);
      }
      /* Initialize DC predictions to 0 */
      entropy->saved.last_dc_val[ci] = 0;
 800ebec:	69fa      	ldr	r2, [r7, #28]
 800ebee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf0:	3304      	adds	r3, #4
 800ebf2:	009b      	lsls	r3, r3, #2
 800ebf4:	4413      	add	r3, r2
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	605a      	str	r2, [r3, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ebfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebfc:	3301      	adds	r3, #1
 800ebfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800ec06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	dbc9      	blt.n	800eba0 <start_pass_huff_decoder+0x2f8>
    }

    /* Precalculate decoding info for each block in an MCU of this scan */
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec10:	e19f      	b.n	800ef52 <start_pass_huff_decoder+0x6aa>
 800ec12:	bf00      	nop
 800ec14:	0800d6e9 	.word	0x0800d6e9
 800ec18:	0800d8e5 	.word	0x0800d8e5
 800ec1c:	0800db15 	.word	0x0800db15
 800ec20:	0800dc05 	.word	0x0800dc05
 800ec24:	0800e0d9 	.word	0x0800e0d9
 800ec28:	0800e4c9 	.word	0x0800e4c9
      ci = cinfo->MCU_membership[blkn];
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec30:	325c      	adds	r2, #92	; 0x5c
 800ec32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec36:	62fb      	str	r3, [r7, #44]	; 0x2c
      compptr = cinfo->cur_comp_info[ci];
 800ec38:	687a      	ldr	r2, [r7, #4]
 800ec3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3c:	3354      	adds	r3, #84	; 0x54
 800ec3e:	009b      	lsls	r3, r3, #2
 800ec40:	4413      	add	r3, r2
 800ec42:	685b      	ldr	r3, [r3, #4]
 800ec44:	61bb      	str	r3, [r7, #24]
      /* Precalculate which table to use for each block */
      entropy->dc_cur_tbls[blkn] = entropy->dc_derived_tbls[compptr->dc_tbl_no];
 800ec46:	69bb      	ldr	r3, [r7, #24]
 800ec48:	695a      	ldr	r2, [r3, #20]
 800ec4a:	69fb      	ldr	r3, [r7, #28]
 800ec4c:	3210      	adds	r2, #16
 800ec4e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ec52:	69fb      	ldr	r3, [r7, #28]
 800ec54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec56:	3218      	adds	r2, #24
 800ec58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
 800ec5c:	69bb      	ldr	r3, [r7, #24]
 800ec5e:	699a      	ldr	r2, [r3, #24]
 800ec60:	69fb      	ldr	r3, [r7, #28]
 800ec62:	3214      	adds	r2, #20
 800ec64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ec68:	69fb      	ldr	r3, [r7, #28]
 800ec6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec6c:	3222      	adds	r2, #34	; 0x22
 800ec6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      /* Decide whether we really care about the coefficient values */
      if (compptr->component_needed) {
 800ec72:	69bb      	ldr	r3, [r7, #24]
 800ec74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	f000 8162 	beq.w	800ef40 <start_pass_huff_decoder+0x698>
	ci = compptr->DCT_v_scaled_size;
 800ec7c:	69bb      	ldr	r3, [r7, #24]
 800ec7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec80:	62fb      	str	r3, [r7, #44]	; 0x2c
	i = compptr->DCT_h_scaled_size;
 800ec82:	69bb      	ldr	r3, [r7, #24]
 800ec84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec86:	627b      	str	r3, [r7, #36]	; 0x24
	switch (cinfo->lim_Se) {
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800ec8e:	2b30      	cmp	r3, #48	; 0x30
 800ec90:	f200 8136 	bhi.w	800ef00 <start_pass_huff_decoder+0x658>
 800ec94:	a201      	add	r2, pc, #4	; (adr r2, 800ec9c <start_pass_huff_decoder+0x3f4>)
 800ec96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec9a:	bf00      	nop
 800ec9c:	0800ed61 	.word	0x0800ed61
 800eca0:	0800ef01 	.word	0x0800ef01
 800eca4:	0800ef01 	.word	0x0800ef01
 800eca8:	0800ed6f 	.word	0x0800ed6f
 800ecac:	0800ef01 	.word	0x0800ef01
 800ecb0:	0800ef01 	.word	0x0800ef01
 800ecb4:	0800ef01 	.word	0x0800ef01
 800ecb8:	0800ef01 	.word	0x0800ef01
 800ecbc:	0800edaf 	.word	0x0800edaf
 800ecc0:	0800ef01 	.word	0x0800ef01
 800ecc4:	0800ef01 	.word	0x0800ef01
 800ecc8:	0800ef01 	.word	0x0800ef01
 800eccc:	0800ef01 	.word	0x0800ef01
 800ecd0:	0800ef01 	.word	0x0800ef01
 800ecd4:	0800ef01 	.word	0x0800ef01
 800ecd8:	0800edf3 	.word	0x0800edf3
 800ecdc:	0800ef01 	.word	0x0800ef01
 800ece0:	0800ef01 	.word	0x0800ef01
 800ece4:	0800ef01 	.word	0x0800ef01
 800ece8:	0800ef01 	.word	0x0800ef01
 800ecec:	0800ef01 	.word	0x0800ef01
 800ecf0:	0800ef01 	.word	0x0800ef01
 800ecf4:	0800ef01 	.word	0x0800ef01
 800ecf8:	0800ef01 	.word	0x0800ef01
 800ecfc:	0800ee33 	.word	0x0800ee33
 800ed00:	0800ef01 	.word	0x0800ef01
 800ed04:	0800ef01 	.word	0x0800ef01
 800ed08:	0800ef01 	.word	0x0800ef01
 800ed0c:	0800ef01 	.word	0x0800ef01
 800ed10:	0800ef01 	.word	0x0800ef01
 800ed14:	0800ef01 	.word	0x0800ef01
 800ed18:	0800ef01 	.word	0x0800ef01
 800ed1c:	0800ef01 	.word	0x0800ef01
 800ed20:	0800ef01 	.word	0x0800ef01
 800ed24:	0800ef01 	.word	0x0800ef01
 800ed28:	0800ee77 	.word	0x0800ee77
 800ed2c:	0800ef01 	.word	0x0800ef01
 800ed30:	0800ef01 	.word	0x0800ef01
 800ed34:	0800ef01 	.word	0x0800ef01
 800ed38:	0800ef01 	.word	0x0800ef01
 800ed3c:	0800ef01 	.word	0x0800ef01
 800ed40:	0800ef01 	.word	0x0800ef01
 800ed44:	0800ef01 	.word	0x0800ef01
 800ed48:	0800ef01 	.word	0x0800ef01
 800ed4c:	0800ef01 	.word	0x0800ef01
 800ed50:	0800ef01 	.word	0x0800ef01
 800ed54:	0800ef01 	.word	0x0800ef01
 800ed58:	0800ef01 	.word	0x0800ef01
 800ed5c:	0800eebd 	.word	0x0800eebd
	case (1*1-1):
	  entropy->coef_limit[blkn] = 1;
 800ed60:	69fb      	ldr	r3, [r7, #28]
 800ed62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed64:	322c      	adds	r2, #44	; 0x2c
 800ed66:	2101      	movs	r1, #1
 800ed68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  break;
 800ed6c:	e0ee      	b.n	800ef4c <start_pass_huff_decoder+0x6a4>
	case (2*2-1):
	  if (ci <= 0 || ci > 2) ci = 2;
 800ed6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	dd02      	ble.n	800ed7a <start_pass_huff_decoder+0x4d2>
 800ed74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed76:	2b02      	cmp	r3, #2
 800ed78:	dd01      	ble.n	800ed7e <start_pass_huff_decoder+0x4d6>
 800ed7a:	2302      	movs	r3, #2
 800ed7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (i <= 0 || i > 2) i = 2;
 800ed7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	dd02      	ble.n	800ed8a <start_pass_huff_decoder+0x4e2>
 800ed84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed86:	2b02      	cmp	r3, #2
 800ed88:	dd01      	ble.n	800ed8e <start_pass_huff_decoder+0x4e6>
 800ed8a:	2302      	movs	r3, #2
 800ed8c:	627b      	str	r3, [r7, #36]	; 0x24
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 800ed8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed90:	1e5a      	subs	r2, r3, #1
 800ed92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed94:	3b01      	subs	r3, #1
 800ed96:	497b      	ldr	r1, [pc, #492]	; (800ef84 <start_pass_huff_decoder+0x6dc>)
 800ed98:	0052      	lsls	r2, r2, #1
 800ed9a:	4413      	add	r3, r2
 800ed9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800eda0:	1c59      	adds	r1, r3, #1
 800eda2:	69fb      	ldr	r3, [r7, #28]
 800eda4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eda6:	322c      	adds	r2, #44	; 0x2c
 800eda8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  break;
 800edac:	e0ce      	b.n	800ef4c <start_pass_huff_decoder+0x6a4>
	case (3*3-1):
	  if (ci <= 0 || ci > 3) ci = 3;
 800edae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	dd02      	ble.n	800edba <start_pass_huff_decoder+0x512>
 800edb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb6:	2b03      	cmp	r3, #3
 800edb8:	dd01      	ble.n	800edbe <start_pass_huff_decoder+0x516>
 800edba:	2303      	movs	r3, #3
 800edbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (i <= 0 || i > 3) i = 3;
 800edbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	dd02      	ble.n	800edca <start_pass_huff_decoder+0x522>
 800edc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc6:	2b03      	cmp	r3, #3
 800edc8:	dd01      	ble.n	800edce <start_pass_huff_decoder+0x526>
 800edca:	2303      	movs	r3, #3
 800edcc:	627b      	str	r3, [r7, #36]	; 0x24
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800edce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd0:	1e5a      	subs	r2, r3, #1
 800edd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd4:	1e59      	subs	r1, r3, #1
 800edd6:	486c      	ldr	r0, [pc, #432]	; (800ef88 <start_pass_huff_decoder+0x6e0>)
 800edd8:	4613      	mov	r3, r2
 800edda:	005b      	lsls	r3, r3, #1
 800eddc:	4413      	add	r3, r2
 800edde:	440b      	add	r3, r1
 800ede0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800ede4:	1c59      	adds	r1, r3, #1
 800ede6:	69fb      	ldr	r3, [r7, #28]
 800ede8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edea:	322c      	adds	r2, #44	; 0x2c
 800edec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  break;
 800edf0:	e0ac      	b.n	800ef4c <start_pass_huff_decoder+0x6a4>
	case (4*4-1):
	  if (ci <= 0 || ci > 4) ci = 4;
 800edf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	dd02      	ble.n	800edfe <start_pass_huff_decoder+0x556>
 800edf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edfa:	2b04      	cmp	r3, #4
 800edfc:	dd01      	ble.n	800ee02 <start_pass_huff_decoder+0x55a>
 800edfe:	2304      	movs	r3, #4
 800ee00:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (i <= 0 || i > 4) i = 4;
 800ee02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	dd02      	ble.n	800ee0e <start_pass_huff_decoder+0x566>
 800ee08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee0a:	2b04      	cmp	r3, #4
 800ee0c:	dd01      	ble.n	800ee12 <start_pass_huff_decoder+0x56a>
 800ee0e:	2304      	movs	r3, #4
 800ee10:	627b      	str	r3, [r7, #36]	; 0x24
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 800ee12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee14:	1e5a      	subs	r2, r3, #1
 800ee16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee18:	3b01      	subs	r3, #1
 800ee1a:	495c      	ldr	r1, [pc, #368]	; (800ef8c <start_pass_huff_decoder+0x6e4>)
 800ee1c:	0092      	lsls	r2, r2, #2
 800ee1e:	4413      	add	r3, r2
 800ee20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ee24:	1c59      	adds	r1, r3, #1
 800ee26:	69fb      	ldr	r3, [r7, #28]
 800ee28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee2a:	322c      	adds	r2, #44	; 0x2c
 800ee2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  break;
 800ee30:	e08c      	b.n	800ef4c <start_pass_huff_decoder+0x6a4>
	case (5*5-1):
	  if (ci <= 0 || ci > 5) ci = 5;
 800ee32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	dd02      	ble.n	800ee3e <start_pass_huff_decoder+0x596>
 800ee38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee3a:	2b05      	cmp	r3, #5
 800ee3c:	dd01      	ble.n	800ee42 <start_pass_huff_decoder+0x59a>
 800ee3e:	2305      	movs	r3, #5
 800ee40:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (i <= 0 || i > 5) i = 5;
 800ee42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	dd02      	ble.n	800ee4e <start_pass_huff_decoder+0x5a6>
 800ee48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee4a:	2b05      	cmp	r3, #5
 800ee4c:	dd01      	ble.n	800ee52 <start_pass_huff_decoder+0x5aa>
 800ee4e:	2305      	movs	r3, #5
 800ee50:	627b      	str	r3, [r7, #36]	; 0x24
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800ee52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee54:	1e5a      	subs	r2, r3, #1
 800ee56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee58:	1e59      	subs	r1, r3, #1
 800ee5a:	484d      	ldr	r0, [pc, #308]	; (800ef90 <start_pass_huff_decoder+0x6e8>)
 800ee5c:	4613      	mov	r3, r2
 800ee5e:	009b      	lsls	r3, r3, #2
 800ee60:	4413      	add	r3, r2
 800ee62:	440b      	add	r3, r1
 800ee64:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800ee68:	1c59      	adds	r1, r3, #1
 800ee6a:	69fb      	ldr	r3, [r7, #28]
 800ee6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee6e:	322c      	adds	r2, #44	; 0x2c
 800ee70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  break;
 800ee74:	e06a      	b.n	800ef4c <start_pass_huff_decoder+0x6a4>
	case (6*6-1):
	  if (ci <= 0 || ci > 6) ci = 6;
 800ee76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	dd02      	ble.n	800ee82 <start_pass_huff_decoder+0x5da>
 800ee7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee7e:	2b06      	cmp	r3, #6
 800ee80:	dd01      	ble.n	800ee86 <start_pass_huff_decoder+0x5de>
 800ee82:	2306      	movs	r3, #6
 800ee84:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (i <= 0 || i > 6) i = 6;
 800ee86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	dd02      	ble.n	800ee92 <start_pass_huff_decoder+0x5ea>
 800ee8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee8e:	2b06      	cmp	r3, #6
 800ee90:	dd01      	ble.n	800ee96 <start_pass_huff_decoder+0x5ee>
 800ee92:	2306      	movs	r3, #6
 800ee94:	627b      	str	r3, [r7, #36]	; 0x24
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
 800ee96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee98:	1e5a      	subs	r2, r3, #1
 800ee9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee9c:	1e59      	subs	r1, r3, #1
 800ee9e:	483d      	ldr	r0, [pc, #244]	; (800ef94 <start_pass_huff_decoder+0x6ec>)
 800eea0:	4613      	mov	r3, r2
 800eea2:	005b      	lsls	r3, r3, #1
 800eea4:	4413      	add	r3, r2
 800eea6:	005b      	lsls	r3, r3, #1
 800eea8:	440b      	add	r3, r1
 800eeaa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800eeae:	1c59      	adds	r1, r3, #1
 800eeb0:	69fb      	ldr	r3, [r7, #28]
 800eeb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eeb4:	322c      	adds	r2, #44	; 0x2c
 800eeb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  break;
 800eeba:	e047      	b.n	800ef4c <start_pass_huff_decoder+0x6a4>
	case (7*7-1):
	  if (ci <= 0 || ci > 7) ci = 7;
 800eebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	dd02      	ble.n	800eec8 <start_pass_huff_decoder+0x620>
 800eec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec4:	2b07      	cmp	r3, #7
 800eec6:	dd01      	ble.n	800eecc <start_pass_huff_decoder+0x624>
 800eec8:	2307      	movs	r3, #7
 800eeca:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (i <= 0 || i > 7) i = 7;
 800eecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eece:	2b00      	cmp	r3, #0
 800eed0:	dd02      	ble.n	800eed8 <start_pass_huff_decoder+0x630>
 800eed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed4:	2b07      	cmp	r3, #7
 800eed6:	dd01      	ble.n	800eedc <start_pass_huff_decoder+0x634>
 800eed8:	2307      	movs	r3, #7
 800eeda:	627b      	str	r3, [r7, #36]	; 0x24
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800eedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eede:	1e5a      	subs	r2, r3, #1
 800eee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee2:	1e59      	subs	r1, r3, #1
 800eee4:	482c      	ldr	r0, [pc, #176]	; (800ef98 <start_pass_huff_decoder+0x6f0>)
 800eee6:	4613      	mov	r3, r2
 800eee8:	00db      	lsls	r3, r3, #3
 800eeea:	1a9b      	subs	r3, r3, r2
 800eeec:	440b      	add	r3, r1
 800eeee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800eef2:	1c59      	adds	r1, r3, #1
 800eef4:	69fb      	ldr	r3, [r7, #28]
 800eef6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eef8:	322c      	adds	r2, #44	; 0x2c
 800eefa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  break;
 800eefe:	e025      	b.n	800ef4c <start_pass_huff_decoder+0x6a4>
	default:
	  if (ci <= 0 || ci > 8) ci = 8;
 800ef00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	dd02      	ble.n	800ef0c <start_pass_huff_decoder+0x664>
 800ef06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef08:	2b08      	cmp	r3, #8
 800ef0a:	dd01      	ble.n	800ef10 <start_pass_huff_decoder+0x668>
 800ef0c:	2308      	movs	r3, #8
 800ef0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (i <= 0 || i > 8) i = 8;
 800ef10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	dd02      	ble.n	800ef1c <start_pass_huff_decoder+0x674>
 800ef16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef18:	2b08      	cmp	r3, #8
 800ef1a:	dd01      	ble.n	800ef20 <start_pass_huff_decoder+0x678>
 800ef1c:	2308      	movs	r3, #8
 800ef1e:	627b      	str	r3, [r7, #36]	; 0x24
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800ef20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef22:	1e5a      	subs	r2, r3, #1
 800ef24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef26:	3b01      	subs	r3, #1
 800ef28:	491c      	ldr	r1, [pc, #112]	; (800ef9c <start_pass_huff_decoder+0x6f4>)
 800ef2a:	00d2      	lsls	r2, r2, #3
 800ef2c:	4413      	add	r3, r2
 800ef2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ef32:	1c59      	adds	r1, r3, #1
 800ef34:	69fb      	ldr	r3, [r7, #28]
 800ef36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef38:	322c      	adds	r2, #44	; 0x2c
 800ef3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  break;
 800ef3e:	e005      	b.n	800ef4c <start_pass_huff_decoder+0x6a4>
	}
      } else {
	entropy->coef_limit[blkn] = 0;
 800ef40:	69fb      	ldr	r3, [r7, #28]
 800ef42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef44:	322c      	adds	r2, #44	; 0x2c
 800ef46:	2100      	movs	r1, #0
 800ef48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800ef4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef4e:	3301      	adds	r3, #1
 800ef50:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800ef58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef5a:	429a      	cmp	r2, r3
 800ef5c:	f6ff ae66 	blt.w	800ec2c <start_pass_huff_decoder+0x384>
      }
    }
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
 800ef60:	69fb      	ldr	r3, [r7, #28]
 800ef62:	2200      	movs	r2, #0
 800ef64:	60da      	str	r2, [r3, #12]
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
 800ef66:	69fb      	ldr	r3, [r7, #28]
 800ef68:	2200      	movs	r2, #0
 800ef6a:	609a      	str	r2, [r3, #8]
  entropy->insufficient_data = FALSE;
 800ef6c:	69fb      	ldr	r3, [r7, #28]
 800ef6e:	2200      	movs	r2, #0
 800ef70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800ef78:	69fb      	ldr	r3, [r7, #28]
 800ef7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ef7c:	bf00      	nop
 800ef7e:	3730      	adds	r7, #48	; 0x30
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}
 800ef84:	080272ac 	.word	0x080272ac
 800ef88:	08027288 	.word	0x08027288
 800ef8c:	08027248 	.word	0x08027248
 800ef90:	080271e4 	.word	0x080271e4
 800ef94:	08027154 	.word	0x08027154
 800ef98:	08027090 	.word	0x08027090
 800ef9c:	08026f90 	.word	0x08026f90

0800efa0 <jinit_huff_decoder>:
 * Module initialization routine for Huffman entropy decoding.
 */

GLOBAL(void)
jinit_huff_decoder (j_decompress_ptr cinfo)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b086      	sub	sp, #24
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	685b      	ldr	r3, [r3, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	22d8      	movs	r2, #216	; 0xd8
 800efb0:	2101      	movs	r1, #1
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	4798      	blx	r3
 800efb6:	60b8      	str	r0, [r7, #8]
				SIZEOF(huff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	68ba      	ldr	r2, [r7, #8]
 800efbc:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
  entropy->pub.start_pass = start_pass_huff_decoder;
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	4a30      	ldr	r2, [pc, #192]	; (800f084 <jinit_huff_decoder+0xe4>)
 800efc4:	601a      	str	r2, [r3, #0]

  if (cinfo->progressive_mode) {
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d03b      	beq.n	800f048 <jinit_huff_decoder+0xa8>
    /* Create progression status table */
    int *coef_bit_ptr, ci;
    cinfo->coef_bits = (int (*)[DCTSIZE2])
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	685b      	ldr	r3, [r3, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
 800efd6:	687a      	ldr	r2, [r7, #4]
 800efd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800efda:	0212      	lsls	r2, r2, #8
 800efdc:	2101      	movs	r1, #1
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	4798      	blx	r3
 800efe2:	4602      	mov	r2, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    coef_bit_ptr = & cinfo->coef_bits[0][0];
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800eff0:	613b      	str	r3, [r7, #16]
    for (ci = 0; ci < cinfo->num_components; ci++)
 800eff2:	2300      	movs	r3, #0
 800eff4:	60fb      	str	r3, [r7, #12]
 800eff6:	e011      	b.n	800f01c <jinit_huff_decoder+0x7c>
      for (i = 0; i < DCTSIZE2; i++)
 800eff8:	2300      	movs	r3, #0
 800effa:	617b      	str	r3, [r7, #20]
 800effc:	e008      	b.n	800f010 <jinit_huff_decoder+0x70>
	*coef_bit_ptr++ = -1;
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	1d1a      	adds	r2, r3, #4
 800f002:	613a      	str	r2, [r7, #16]
 800f004:	f04f 32ff 	mov.w	r2, #4294967295
 800f008:	601a      	str	r2, [r3, #0]
      for (i = 0; i < DCTSIZE2; i++)
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	3301      	adds	r3, #1
 800f00e:	617b      	str	r3, [r7, #20]
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	2b3f      	cmp	r3, #63	; 0x3f
 800f014:	ddf3      	ble.n	800effe <jinit_huff_decoder+0x5e>
    for (ci = 0; ci < cinfo->num_components; ci++)
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	3301      	adds	r3, #1
 800f01a:	60fb      	str	r3, [r7, #12]
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f020:	68fa      	ldr	r2, [r7, #12]
 800f022:	429a      	cmp	r2, r3
 800f024:	dbe8      	blt.n	800eff8 <jinit_huff_decoder+0x58>

    /* Mark derived tables unallocated */
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
 800f026:	2300      	movs	r3, #0
 800f028:	617b      	str	r3, [r7, #20]
 800f02a:	e009      	b.n	800f040 <jinit_huff_decoder+0xa0>
      entropy->derived_tbls[i] = NULL;
 800f02c:	68ba      	ldr	r2, [r7, #8]
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	330a      	adds	r3, #10
 800f032:	009b      	lsls	r3, r3, #2
 800f034:	4413      	add	r3, r2
 800f036:	2200      	movs	r2, #0
 800f038:	605a      	str	r2, [r3, #4]
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	3301      	adds	r3, #1
 800f03e:	617b      	str	r3, [r7, #20]
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	2b03      	cmp	r3, #3
 800f044:	ddf2      	ble.n	800f02c <jinit_huff_decoder+0x8c>
    /* Mark tables unallocated */
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
      entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
    }
  }
}
 800f046:	e018      	b.n	800f07a <jinit_huff_decoder+0xda>
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
 800f048:	2300      	movs	r3, #0
 800f04a:	617b      	str	r3, [r7, #20]
 800f04c:	e012      	b.n	800f074 <jinit_huff_decoder+0xd4>
      entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	697a      	ldr	r2, [r7, #20]
 800f052:	3214      	adds	r2, #20
 800f054:	2100      	movs	r1, #0
 800f056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	697a      	ldr	r2, [r7, #20]
 800f05e:	3214      	adds	r2, #20
 800f060:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f064:	68bb      	ldr	r3, [r7, #8]
 800f066:	697a      	ldr	r2, [r7, #20]
 800f068:	3210      	adds	r2, #16
 800f06a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	3301      	adds	r3, #1
 800f072:	617b      	str	r3, [r7, #20]
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	2b03      	cmp	r3, #3
 800f078:	dde9      	ble.n	800f04e <jinit_huff_decoder+0xae>
}
 800f07a:	bf00      	nop
 800f07c:	3718      	adds	r7, #24
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}
 800f082:	bf00      	nop
 800f084:	0800e8a9 	.word	0x0800e8a9

0800f088 <jpeg_core_output_dimensions>:
GLOBAL(void)
jpeg_core_output_dimensions (j_decompress_ptr cinfo)
/* Do computations that are needed before master selection phase.
 * This function is used for transcoding and full decompression.
 */
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b084      	sub	sp, #16
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
#ifdef IDCT_SCALING_SUPPORTED
  int ci;
  jpeg_component_info *compptr;

  /* Compute actual output image dimensions and DCT scaling choices. */
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f094:	687a      	ldr	r2, [r7, #4]
 800f096:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800f09a:	fb02 f203 	mul.w	r2, r2, r3
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0a2:	429a      	cmp	r2, r3
 800f0a4:	d824      	bhi.n	800f0f0 <jpeg_core_output_dimensions+0x68>
    /* Provide 1/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	69db      	ldr	r3, [r3, #28]
 800f0aa:	461a      	mov	r2, r3
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f0b2:	4619      	mov	r1, r3
 800f0b4:	4610      	mov	r0, r2
 800f0b6:	f015 fea9 	bl	8024e0c <jdiv_round_up>
 800f0ba:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800f0bc:	461a      	mov	r2, r3
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	6a1b      	ldr	r3, [r3, #32]
 800f0c6:	461a      	mov	r2, r3
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f0ce:	4619      	mov	r1, r3
 800f0d0:	4610      	mov	r0, r2
 800f0d2:	f015 fe9b 	bl	8024e0c <jdiv_round_up>
 800f0d6:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800f0d8:	461a      	mov	r2, r3
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 1;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2201      	movs	r2, #1
 800f0e2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 1;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	2201      	movs	r2, #1
 800f0ea:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800f0ee:	e349      	b.n	800f784 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 2) {
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0f4:	687a      	ldr	r2, [r7, #4]
 800f0f6:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800f0fa:	fb02 f203 	mul.w	r2, r2, r3
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f102:	005b      	lsls	r3, r3, #1
 800f104:	429a      	cmp	r2, r3
 800f106:	d824      	bhi.n	800f152 <jpeg_core_output_dimensions+0xca>
    /* Provide 2/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 2L, (long) cinfo->block_size);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	69db      	ldr	r3, [r3, #28]
 800f10c:	005a      	lsls	r2, r3, #1
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f114:	4619      	mov	r1, r3
 800f116:	4610      	mov	r0, r2
 800f118:	f015 fe78 	bl	8024e0c <jdiv_round_up>
 800f11c:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800f11e:	461a      	mov	r2, r3
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 2L, (long) cinfo->block_size);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	6a1b      	ldr	r3, [r3, #32]
 800f128:	005a      	lsls	r2, r3, #1
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f130:	4619      	mov	r1, r3
 800f132:	4610      	mov	r0, r2
 800f134:	f015 fe6a 	bl	8024e0c <jdiv_round_up>
 800f138:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800f13a:	461a      	mov	r2, r3
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 2;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2202      	movs	r2, #2
 800f144:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 2;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2202      	movs	r2, #2
 800f14c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800f150:	e318      	b.n	800f784 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 3) {
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f156:	687a      	ldr	r2, [r7, #4]
 800f158:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800f15c:	fb02 f103 	mul.w	r1, r2, r3
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f164:	4613      	mov	r3, r2
 800f166:	005b      	lsls	r3, r3, #1
 800f168:	4413      	add	r3, r2
 800f16a:	4299      	cmp	r1, r3
 800f16c:	d82a      	bhi.n	800f1c4 <jpeg_core_output_dimensions+0x13c>
    /* Provide 3/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 3L, (long) cinfo->block_size);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	69db      	ldr	r3, [r3, #28]
 800f172:	461a      	mov	r2, r3
 800f174:	4613      	mov	r3, r2
 800f176:	005b      	lsls	r3, r3, #1
 800f178:	441a      	add	r2, r3
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f180:	4619      	mov	r1, r3
 800f182:	4610      	mov	r0, r2
 800f184:	f015 fe42 	bl	8024e0c <jdiv_round_up>
 800f188:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800f18a:	461a      	mov	r2, r3
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 3L, (long) cinfo->block_size);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6a1b      	ldr	r3, [r3, #32]
 800f194:	461a      	mov	r2, r3
 800f196:	4613      	mov	r3, r2
 800f198:	005b      	lsls	r3, r3, #1
 800f19a:	441a      	add	r2, r3
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f1a2:	4619      	mov	r1, r3
 800f1a4:	4610      	mov	r0, r2
 800f1a6:	f015 fe31 	bl	8024e0c <jdiv_round_up>
 800f1aa:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800f1ac:	461a      	mov	r2, r3
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 3;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2203      	movs	r2, #3
 800f1b6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 3;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2203      	movs	r2, #3
 800f1be:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800f1c2:	e2df      	b.n	800f784 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 4) {
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1c8:	687a      	ldr	r2, [r7, #4]
 800f1ca:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800f1ce:	fb02 f203 	mul.w	r2, r2, r3
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1d6:	009b      	lsls	r3, r3, #2
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	d824      	bhi.n	800f226 <jpeg_core_output_dimensions+0x19e>
    /* Provide 4/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 4L, (long) cinfo->block_size);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	69db      	ldr	r3, [r3, #28]
 800f1e0:	009a      	lsls	r2, r3, #2
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f1e8:	4619      	mov	r1, r3
 800f1ea:	4610      	mov	r0, r2
 800f1ec:	f015 fe0e 	bl	8024e0c <jdiv_round_up>
 800f1f0:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800f1f2:	461a      	mov	r2, r3
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 4L, (long) cinfo->block_size);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	6a1b      	ldr	r3, [r3, #32]
 800f1fc:	009a      	lsls	r2, r3, #2
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f204:	4619      	mov	r1, r3
 800f206:	4610      	mov	r0, r2
 800f208:	f015 fe00 	bl	8024e0c <jdiv_round_up>
 800f20c:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800f20e:	461a      	mov	r2, r3
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 4;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2204      	movs	r2, #4
 800f218:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 4;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2204      	movs	r2, #4
 800f220:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800f224:	e2ae      	b.n	800f784 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 5) {
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f22a:	687a      	ldr	r2, [r7, #4]
 800f22c:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800f230:	fb02 f103 	mul.w	r1, r2, r3
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f238:	4613      	mov	r3, r2
 800f23a:	009b      	lsls	r3, r3, #2
 800f23c:	4413      	add	r3, r2
 800f23e:	4299      	cmp	r1, r3
 800f240:	d82a      	bhi.n	800f298 <jpeg_core_output_dimensions+0x210>
    /* Provide 5/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 5L, (long) cinfo->block_size);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	69db      	ldr	r3, [r3, #28]
 800f246:	461a      	mov	r2, r3
 800f248:	4613      	mov	r3, r2
 800f24a:	009b      	lsls	r3, r3, #2
 800f24c:	441a      	add	r2, r3
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f254:	4619      	mov	r1, r3
 800f256:	4610      	mov	r0, r2
 800f258:	f015 fdd8 	bl	8024e0c <jdiv_round_up>
 800f25c:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800f25e:	461a      	mov	r2, r3
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 5L, (long) cinfo->block_size);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6a1b      	ldr	r3, [r3, #32]
 800f268:	461a      	mov	r2, r3
 800f26a:	4613      	mov	r3, r2
 800f26c:	009b      	lsls	r3, r3, #2
 800f26e:	441a      	add	r2, r3
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f276:	4619      	mov	r1, r3
 800f278:	4610      	mov	r0, r2
 800f27a:	f015 fdc7 	bl	8024e0c <jdiv_round_up>
 800f27e:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800f280:	461a      	mov	r2, r3
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 5;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	2205      	movs	r2, #5
 800f28a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 5;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	2205      	movs	r2, #5
 800f292:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800f296:	e275      	b.n	800f784 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 6) {
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f29c:	687a      	ldr	r2, [r7, #4]
 800f29e:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800f2a2:	fb02 f103 	mul.w	r1, r2, r3
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2aa:	4613      	mov	r3, r2
 800f2ac:	005b      	lsls	r3, r3, #1
 800f2ae:	4413      	add	r3, r2
 800f2b0:	005b      	lsls	r3, r3, #1
 800f2b2:	4299      	cmp	r1, r3
 800f2b4:	d82e      	bhi.n	800f314 <jpeg_core_output_dimensions+0x28c>
    /* Provide 6/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 6L, (long) cinfo->block_size);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	69db      	ldr	r3, [r3, #28]
 800f2ba:	461a      	mov	r2, r3
 800f2bc:	4613      	mov	r3, r2
 800f2be:	005b      	lsls	r3, r3, #1
 800f2c0:	4413      	add	r3, r2
 800f2c2:	005b      	lsls	r3, r3, #1
 800f2c4:	461a      	mov	r2, r3
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f2cc:	4619      	mov	r1, r3
 800f2ce:	4610      	mov	r0, r2
 800f2d0:	f015 fd9c 	bl	8024e0c <jdiv_round_up>
 800f2d4:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800f2d6:	461a      	mov	r2, r3
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 6L, (long) cinfo->block_size);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	6a1b      	ldr	r3, [r3, #32]
 800f2e0:	461a      	mov	r2, r3
 800f2e2:	4613      	mov	r3, r2
 800f2e4:	005b      	lsls	r3, r3, #1
 800f2e6:	4413      	add	r3, r2
 800f2e8:	005b      	lsls	r3, r3, #1
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f2f2:	4619      	mov	r1, r3
 800f2f4:	4610      	mov	r0, r2
 800f2f6:	f015 fd89 	bl	8024e0c <jdiv_round_up>
 800f2fa:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800f2fc:	461a      	mov	r2, r3
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 6;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2206      	movs	r2, #6
 800f306:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 6;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2206      	movs	r2, #6
 800f30e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800f312:	e237      	b.n	800f784 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 7) {
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f318:	687a      	ldr	r2, [r7, #4]
 800f31a:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800f31e:	fb02 f103 	mul.w	r1, r2, r3
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f326:	4613      	mov	r3, r2
 800f328:	00db      	lsls	r3, r3, #3
 800f32a:	1a9b      	subs	r3, r3, r2
 800f32c:	4299      	cmp	r1, r3
 800f32e:	d82a      	bhi.n	800f386 <jpeg_core_output_dimensions+0x2fe>
    /* Provide 7/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 7L, (long) cinfo->block_size);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	69db      	ldr	r3, [r3, #28]
 800f334:	461a      	mov	r2, r3
 800f336:	4613      	mov	r3, r2
 800f338:	00db      	lsls	r3, r3, #3
 800f33a:	1a9a      	subs	r2, r3, r2
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f342:	4619      	mov	r1, r3
 800f344:	4610      	mov	r0, r2
 800f346:	f015 fd61 	bl	8024e0c <jdiv_round_up>
 800f34a:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800f34c:	461a      	mov	r2, r3
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 7L, (long) cinfo->block_size);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	6a1b      	ldr	r3, [r3, #32]
 800f356:	461a      	mov	r2, r3
 800f358:	4613      	mov	r3, r2
 800f35a:	00db      	lsls	r3, r3, #3
 800f35c:	1a9a      	subs	r2, r3, r2
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f364:	4619      	mov	r1, r3
 800f366:	4610      	mov	r0, r2
 800f368:	f015 fd50 	bl	8024e0c <jdiv_round_up>
 800f36c:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800f36e:	461a      	mov	r2, r3
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 7;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2207      	movs	r2, #7
 800f378:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 7;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2207      	movs	r2, #7
 800f380:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800f384:	e1fe      	b.n	800f784 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 8) {
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f38a:	687a      	ldr	r2, [r7, #4]
 800f38c:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800f390:	fb02 f203 	mul.w	r2, r2, r3
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f398:	00db      	lsls	r3, r3, #3
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d824      	bhi.n	800f3e8 <jpeg_core_output_dimensions+0x360>
    /* Provide 8/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 8L, (long) cinfo->block_size);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	69db      	ldr	r3, [r3, #28]
 800f3a2:	00da      	lsls	r2, r3, #3
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f3aa:	4619      	mov	r1, r3
 800f3ac:	4610      	mov	r0, r2
 800f3ae:	f015 fd2d 	bl	8024e0c <jdiv_round_up>
 800f3b2:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800f3b4:	461a      	mov	r2, r3
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 8L, (long) cinfo->block_size);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6a1b      	ldr	r3, [r3, #32]
 800f3be:	00da      	lsls	r2, r3, #3
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f3c6:	4619      	mov	r1, r3
 800f3c8:	4610      	mov	r0, r2
 800f3ca:	f015 fd1f 	bl	8024e0c <jdiv_round_up>
 800f3ce:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800f3d0:	461a      	mov	r2, r3
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 8;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2208      	movs	r2, #8
 800f3da:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 8;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2208      	movs	r2, #8
 800f3e2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800f3e6:	e1cd      	b.n	800f784 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 9) {
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3ec:	687a      	ldr	r2, [r7, #4]
 800f3ee:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800f3f2:	fb02 f103 	mul.w	r1, r2, r3
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3fa:	4613      	mov	r3, r2
 800f3fc:	00db      	lsls	r3, r3, #3
 800f3fe:	4413      	add	r3, r2
 800f400:	4299      	cmp	r1, r3
 800f402:	d82a      	bhi.n	800f45a <jpeg_core_output_dimensions+0x3d2>
    /* Provide 9/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 9L, (long) cinfo->block_size);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	69db      	ldr	r3, [r3, #28]
 800f408:	461a      	mov	r2, r3
 800f40a:	4613      	mov	r3, r2
 800f40c:	00db      	lsls	r3, r3, #3
 800f40e:	441a      	add	r2, r3
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f416:	4619      	mov	r1, r3
 800f418:	4610      	mov	r0, r2
 800f41a:	f015 fcf7 	bl	8024e0c <jdiv_round_up>
 800f41e:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800f420:	461a      	mov	r2, r3
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 9L, (long) cinfo->block_size);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6a1b      	ldr	r3, [r3, #32]
 800f42a:	461a      	mov	r2, r3
 800f42c:	4613      	mov	r3, r2
 800f42e:	00db      	lsls	r3, r3, #3
 800f430:	441a      	add	r2, r3
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f438:	4619      	mov	r1, r3
 800f43a:	4610      	mov	r0, r2
 800f43c:	f015 fce6 	bl	8024e0c <jdiv_round_up>
 800f440:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800f442:	461a      	mov	r2, r3
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 9;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2209      	movs	r2, #9
 800f44c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 9;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2209      	movs	r2, #9
 800f454:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800f458:	e194      	b.n	800f784 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 10) {
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f45e:	687a      	ldr	r2, [r7, #4]
 800f460:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800f464:	fb02 f103 	mul.w	r1, r2, r3
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f46c:	4613      	mov	r3, r2
 800f46e:	009b      	lsls	r3, r3, #2
 800f470:	4413      	add	r3, r2
 800f472:	005b      	lsls	r3, r3, #1
 800f474:	4299      	cmp	r1, r3
 800f476:	d82e      	bhi.n	800f4d6 <jpeg_core_output_dimensions+0x44e>
    /* Provide 10/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 10L, (long) cinfo->block_size);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	69db      	ldr	r3, [r3, #28]
 800f47c:	461a      	mov	r2, r3
 800f47e:	4613      	mov	r3, r2
 800f480:	009b      	lsls	r3, r3, #2
 800f482:	4413      	add	r3, r2
 800f484:	005b      	lsls	r3, r3, #1
 800f486:	461a      	mov	r2, r3
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f48e:	4619      	mov	r1, r3
 800f490:	4610      	mov	r0, r2
 800f492:	f015 fcbb 	bl	8024e0c <jdiv_round_up>
 800f496:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800f498:	461a      	mov	r2, r3
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 10L, (long) cinfo->block_size);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6a1b      	ldr	r3, [r3, #32]
 800f4a2:	461a      	mov	r2, r3
 800f4a4:	4613      	mov	r3, r2
 800f4a6:	009b      	lsls	r3, r3, #2
 800f4a8:	4413      	add	r3, r2
 800f4aa:	005b      	lsls	r3, r3, #1
 800f4ac:	461a      	mov	r2, r3
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f4b4:	4619      	mov	r1, r3
 800f4b6:	4610      	mov	r0, r2
 800f4b8:	f015 fca8 	bl	8024e0c <jdiv_round_up>
 800f4bc:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800f4be:	461a      	mov	r2, r3
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 10;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	220a      	movs	r2, #10
 800f4c8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 10;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	220a      	movs	r2, #10
 800f4d0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800f4d4:	e156      	b.n	800f784 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 11) {
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4da:	687a      	ldr	r2, [r7, #4]
 800f4dc:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800f4e0:	fb02 f103 	mul.w	r1, r2, r3
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f4e8:	4613      	mov	r3, r2
 800f4ea:	009b      	lsls	r3, r3, #2
 800f4ec:	4413      	add	r3, r2
 800f4ee:	005b      	lsls	r3, r3, #1
 800f4f0:	4413      	add	r3, r2
 800f4f2:	4299      	cmp	r1, r3
 800f4f4:	d82e      	bhi.n	800f554 <jpeg_core_output_dimensions+0x4cc>
    /* Provide 11/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 11L, (long) cinfo->block_size);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	69db      	ldr	r3, [r3, #28]
 800f4fa:	461a      	mov	r2, r3
 800f4fc:	4613      	mov	r3, r2
 800f4fe:	009b      	lsls	r3, r3, #2
 800f500:	4413      	add	r3, r2
 800f502:	005b      	lsls	r3, r3, #1
 800f504:	441a      	add	r2, r3
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f50c:	4619      	mov	r1, r3
 800f50e:	4610      	mov	r0, r2
 800f510:	f015 fc7c 	bl	8024e0c <jdiv_round_up>
 800f514:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800f516:	461a      	mov	r2, r3
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 11L, (long) cinfo->block_size);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	6a1b      	ldr	r3, [r3, #32]
 800f520:	461a      	mov	r2, r3
 800f522:	4613      	mov	r3, r2
 800f524:	009b      	lsls	r3, r3, #2
 800f526:	4413      	add	r3, r2
 800f528:	005b      	lsls	r3, r3, #1
 800f52a:	441a      	add	r2, r3
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f532:	4619      	mov	r1, r3
 800f534:	4610      	mov	r0, r2
 800f536:	f015 fc69 	bl	8024e0c <jdiv_round_up>
 800f53a:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800f53c:	461a      	mov	r2, r3
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 11;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	220b      	movs	r2, #11
 800f546:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 11;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	220b      	movs	r2, #11
 800f54e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800f552:	e117      	b.n	800f784 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 12) {
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f558:	687a      	ldr	r2, [r7, #4]
 800f55a:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800f55e:	fb02 f103 	mul.w	r1, r2, r3
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f566:	4613      	mov	r3, r2
 800f568:	005b      	lsls	r3, r3, #1
 800f56a:	4413      	add	r3, r2
 800f56c:	009b      	lsls	r3, r3, #2
 800f56e:	4299      	cmp	r1, r3
 800f570:	d82e      	bhi.n	800f5d0 <jpeg_core_output_dimensions+0x548>
    /* Provide 12/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 12L, (long) cinfo->block_size);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	69db      	ldr	r3, [r3, #28]
 800f576:	461a      	mov	r2, r3
 800f578:	4613      	mov	r3, r2
 800f57a:	005b      	lsls	r3, r3, #1
 800f57c:	4413      	add	r3, r2
 800f57e:	009b      	lsls	r3, r3, #2
 800f580:	461a      	mov	r2, r3
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f588:	4619      	mov	r1, r3
 800f58a:	4610      	mov	r0, r2
 800f58c:	f015 fc3e 	bl	8024e0c <jdiv_round_up>
 800f590:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800f592:	461a      	mov	r2, r3
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 12L, (long) cinfo->block_size);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	6a1b      	ldr	r3, [r3, #32]
 800f59c:	461a      	mov	r2, r3
 800f59e:	4613      	mov	r3, r2
 800f5a0:	005b      	lsls	r3, r3, #1
 800f5a2:	4413      	add	r3, r2
 800f5a4:	009b      	lsls	r3, r3, #2
 800f5a6:	461a      	mov	r2, r3
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f5ae:	4619      	mov	r1, r3
 800f5b0:	4610      	mov	r0, r2
 800f5b2:	f015 fc2b 	bl	8024e0c <jdiv_round_up>
 800f5b6:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800f5b8:	461a      	mov	r2, r3
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 12;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	220c      	movs	r2, #12
 800f5c2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 12;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	220c      	movs	r2, #12
 800f5ca:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800f5ce:	e0d9      	b.n	800f784 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 13) {
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5d4:	687a      	ldr	r2, [r7, #4]
 800f5d6:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800f5da:	fb02 f103 	mul.w	r1, r2, r3
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f5e2:	4613      	mov	r3, r2
 800f5e4:	005b      	lsls	r3, r3, #1
 800f5e6:	4413      	add	r3, r2
 800f5e8:	009b      	lsls	r3, r3, #2
 800f5ea:	4413      	add	r3, r2
 800f5ec:	4299      	cmp	r1, r3
 800f5ee:	d82e      	bhi.n	800f64e <jpeg_core_output_dimensions+0x5c6>
    /* Provide 13/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 13L, (long) cinfo->block_size);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	69db      	ldr	r3, [r3, #28]
 800f5f4:	461a      	mov	r2, r3
 800f5f6:	4613      	mov	r3, r2
 800f5f8:	005b      	lsls	r3, r3, #1
 800f5fa:	4413      	add	r3, r2
 800f5fc:	009b      	lsls	r3, r3, #2
 800f5fe:	441a      	add	r2, r3
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f606:	4619      	mov	r1, r3
 800f608:	4610      	mov	r0, r2
 800f60a:	f015 fbff 	bl	8024e0c <jdiv_round_up>
 800f60e:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800f610:	461a      	mov	r2, r3
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 13L, (long) cinfo->block_size);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6a1b      	ldr	r3, [r3, #32]
 800f61a:	461a      	mov	r2, r3
 800f61c:	4613      	mov	r3, r2
 800f61e:	005b      	lsls	r3, r3, #1
 800f620:	4413      	add	r3, r2
 800f622:	009b      	lsls	r3, r3, #2
 800f624:	441a      	add	r2, r3
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f62c:	4619      	mov	r1, r3
 800f62e:	4610      	mov	r0, r2
 800f630:	f015 fbec 	bl	8024e0c <jdiv_round_up>
 800f634:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800f636:	461a      	mov	r2, r3
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 13;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	220d      	movs	r2, #13
 800f640:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 13;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	220d      	movs	r2, #13
 800f648:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800f64c:	e09a      	b.n	800f784 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 14) {
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f652:	687a      	ldr	r2, [r7, #4]
 800f654:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800f658:	fb02 f103 	mul.w	r1, r2, r3
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f660:	4613      	mov	r3, r2
 800f662:	00db      	lsls	r3, r3, #3
 800f664:	1a9b      	subs	r3, r3, r2
 800f666:	005b      	lsls	r3, r3, #1
 800f668:	4299      	cmp	r1, r3
 800f66a:	d82e      	bhi.n	800f6ca <jpeg_core_output_dimensions+0x642>
    /* Provide 14/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 14L, (long) cinfo->block_size);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	69db      	ldr	r3, [r3, #28]
 800f670:	461a      	mov	r2, r3
 800f672:	4613      	mov	r3, r2
 800f674:	00db      	lsls	r3, r3, #3
 800f676:	1a9b      	subs	r3, r3, r2
 800f678:	005b      	lsls	r3, r3, #1
 800f67a:	461a      	mov	r2, r3
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f682:	4619      	mov	r1, r3
 800f684:	4610      	mov	r0, r2
 800f686:	f015 fbc1 	bl	8024e0c <jdiv_round_up>
 800f68a:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800f68c:	461a      	mov	r2, r3
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 14L, (long) cinfo->block_size);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6a1b      	ldr	r3, [r3, #32]
 800f696:	461a      	mov	r2, r3
 800f698:	4613      	mov	r3, r2
 800f69a:	00db      	lsls	r3, r3, #3
 800f69c:	1a9b      	subs	r3, r3, r2
 800f69e:	005b      	lsls	r3, r3, #1
 800f6a0:	461a      	mov	r2, r3
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f6a8:	4619      	mov	r1, r3
 800f6aa:	4610      	mov	r0, r2
 800f6ac:	f015 fbae 	bl	8024e0c <jdiv_round_up>
 800f6b0:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800f6b2:	461a      	mov	r2, r3
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 14;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	220e      	movs	r2, #14
 800f6bc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 14;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	220e      	movs	r2, #14
 800f6c4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800f6c8:	e05c      	b.n	800f784 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 15) {
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6ce:	687a      	ldr	r2, [r7, #4]
 800f6d0:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800f6d4:	fb02 f103 	mul.w	r1, r2, r3
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f6dc:	4613      	mov	r3, r2
 800f6de:	011b      	lsls	r3, r3, #4
 800f6e0:	1a9b      	subs	r3, r3, r2
 800f6e2:	4299      	cmp	r1, r3
 800f6e4:	d82a      	bhi.n	800f73c <jpeg_core_output_dimensions+0x6b4>
    /* Provide 15/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 15L, (long) cinfo->block_size);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	69db      	ldr	r3, [r3, #28]
 800f6ea:	461a      	mov	r2, r3
 800f6ec:	4613      	mov	r3, r2
 800f6ee:	011b      	lsls	r3, r3, #4
 800f6f0:	1a9a      	subs	r2, r3, r2
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f6f8:	4619      	mov	r1, r3
 800f6fa:	4610      	mov	r0, r2
 800f6fc:	f015 fb86 	bl	8024e0c <jdiv_round_up>
 800f700:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800f702:	461a      	mov	r2, r3
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 15L, (long) cinfo->block_size);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	6a1b      	ldr	r3, [r3, #32]
 800f70c:	461a      	mov	r2, r3
 800f70e:	4613      	mov	r3, r2
 800f710:	011b      	lsls	r3, r3, #4
 800f712:	1a9a      	subs	r2, r3, r2
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f71a:	4619      	mov	r1, r3
 800f71c:	4610      	mov	r0, r2
 800f71e:	f015 fb75 	bl	8024e0c <jdiv_round_up>
 800f722:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800f724:	461a      	mov	r2, r3
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 15;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	220f      	movs	r2, #15
 800f72e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 15;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	220f      	movs	r2, #15
 800f736:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800f73a:	e023      	b.n	800f784 <jpeg_core_output_dimensions+0x6fc>
  } else {
    /* Provide 16/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 16L, (long) cinfo->block_size);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	69db      	ldr	r3, [r3, #28]
 800f740:	011a      	lsls	r2, r3, #4
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f748:	4619      	mov	r1, r3
 800f74a:	4610      	mov	r0, r2
 800f74c:	f015 fb5e 	bl	8024e0c <jdiv_round_up>
 800f750:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800f752:	461a      	mov	r2, r3
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 16L, (long) cinfo->block_size);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6a1b      	ldr	r3, [r3, #32]
 800f75c:	011a      	lsls	r2, r3, #4
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800f764:	4619      	mov	r1, r3
 800f766:	4610      	mov	r0, r2
 800f768:	f015 fb50 	bl	8024e0c <jdiv_round_up>
 800f76c:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800f76e:	461a      	mov	r2, r3
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 16;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2210      	movs	r2, #16
 800f778:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 16;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2210      	movs	r2, #16
 800f780:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
  }

  /* Recompute dimensions of components */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f784:	2300      	movs	r3, #0
 800f786:	60fb      	str	r3, [r7, #12]
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f78e:	60bb      	str	r3, [r7, #8]
 800f790:	e00f      	b.n	800f7b2 <jpeg_core_output_dimensions+0x72a>
       ci++, compptr++) {
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	625a      	str	r2, [r3, #36]	; 0x24
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 800f7a2:	68bb      	ldr	r3, [r7, #8]
 800f7a4:	629a      	str	r2, [r3, #40]	; 0x28
       ci++, compptr++) {
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	3301      	adds	r3, #1
 800f7aa:	60fb      	str	r3, [r7, #12]
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	3358      	adds	r3, #88	; 0x58
 800f7b0:	60bb      	str	r3, [r7, #8]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7b6:	68fa      	ldr	r2, [r7, #12]
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	dbea      	blt.n	800f792 <jpeg_core_output_dimensions+0x70a>
  /* jdinput.c has already initialized DCT_scaled_size,
   * and has computed unscaled downsampled_width and downsampled_height.
   */

#endif /* IDCT_SCALING_SUPPORTED */
}
 800f7bc:	bf00      	nop
 800f7be:	bf00      	nop
 800f7c0:	3710      	adds	r7, #16
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}
	...

0800f7c8 <initial_setup>:


LOCAL(void)
initial_setup (j_decompress_ptr cinfo)
/* Called once, when first SOS marker is reached */
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b084      	sub	sp, #16
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
  int ci;
  jpeg_component_info *compptr;

  /* Make sure image isn't bigger than I can handle */
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6a1b      	ldr	r3, [r3, #32]
 800f7d4:	461a      	mov	r2, r3
 800f7d6:	f64f 73dc 	movw	r3, #65500	; 0xffdc
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	dc06      	bgt.n	800f7ec <initial_setup+0x24>
      (long) cinfo->image_width > (long) JPEG_MAX_DIMENSION)
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	69db      	ldr	r3, [r3, #28]
 800f7e2:	461a      	mov	r2, r3
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
 800f7e4:	f64f 73dc 	movw	r3, #65500	; 0xffdc
 800f7e8:	429a      	cmp	r2, r3
 800f7ea:	dd0d      	ble.n	800f808 <initial_setup+0x40>
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	222a      	movs	r2, #42	; 0x2a
 800f7f2:	615a      	str	r2, [r3, #20]
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 800f7fc:	619a      	str	r2, [r3, #24]
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	4798      	blx	r3

  /* For now, precision must match compiled-in value... */
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f80e:	2b08      	cmp	r3, #8
 800f810:	d00e      	beq.n	800f830 <initial_setup+0x68>
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	2210      	movs	r2, #16
 800f818:	615a      	str	r2, [r3, #20]
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	687a      	ldr	r2, [r7, #4]
 800f820:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 800f824:	619a      	str	r2, [r3, #24]
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	4798      	blx	r3

  /* Check that number of components won't exceed internal array sizes */
  if (cinfo->num_components > MAX_COMPONENTS)
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f834:	2b0a      	cmp	r3, #10
 800f836:	dd11      	ble.n	800f85c <initial_setup+0x94>
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	221b      	movs	r2, #27
 800f83e:	615a      	str	r2, [r3, #20]
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	687a      	ldr	r2, [r7, #4]
 800f846:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f848:	619a      	str	r2, [r3, #24]
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	220a      	movs	r2, #10
 800f850:	61da      	str	r2, [r3, #28]
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	4798      	blx	r3
	     MAX_COMPONENTS);

  /* Compute maximum sampling factors; check factor validity */
  cinfo->max_h_samp_factor = 1;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2201      	movs	r2, #1
 800f860:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
  cinfo->max_v_samp_factor = 1;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2201      	movs	r2, #1
 800f868:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f86c:	2300      	movs	r3, #0
 800f86e:	60fb      	str	r3, [r7, #12]
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f876:	60bb      	str	r3, [r7, #8]
 800f878:	e034      	b.n	800f8e4 <initial_setup+0x11c>
       ci++, compptr++) {
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	689b      	ldr	r3, [r3, #8]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	dd0b      	ble.n	800f89a <initial_setup+0xd2>
 800f882:	68bb      	ldr	r3, [r7, #8]
 800f884:	689b      	ldr	r3, [r3, #8]
 800f886:	2b04      	cmp	r3, #4
 800f888:	dc07      	bgt.n	800f89a <initial_setup+0xd2>
	compptr->v_samp_factor<=0 || compptr->v_samp_factor>MAX_SAMP_FACTOR)
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	68db      	ldr	r3, [r3, #12]
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 800f88e:	2b00      	cmp	r3, #0
 800f890:	dd03      	ble.n	800f89a <initial_setup+0xd2>
	compptr->v_samp_factor<=0 || compptr->v_samp_factor>MAX_SAMP_FACTOR)
 800f892:	68bb      	ldr	r3, [r7, #8]
 800f894:	68db      	ldr	r3, [r3, #12]
 800f896:	2b04      	cmp	r3, #4
 800f898:	dd08      	ble.n	800f8ac <initial_setup+0xe4>
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	2213      	movs	r2, #19
 800f8a0:	615a      	str	r2, [r3, #20]
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	4798      	blx	r3
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	689a      	ldr	r2, [r3, #8]
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	bfb8      	it	lt
 800f8ba:	461a      	movlt	r2, r3
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
				   compptr->h_samp_factor);
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	68da      	ldr	r2, [r3, #12]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800f8cc:	429a      	cmp	r2, r3
 800f8ce:	bfb8      	it	lt
 800f8d0:	461a      	movlt	r2, r3
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
       ci++, compptr++) {
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	3301      	adds	r3, #1
 800f8dc:	60fb      	str	r3, [r7, #12]
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	3358      	adds	r3, #88	; 0x58
 800f8e2:	60bb      	str	r3, [r7, #8]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8e8:	68fa      	ldr	r2, [r7, #12]
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	dbc5      	blt.n	800f87a <initial_setup+0xb2>
				   compptr->v_samp_factor);
  }

  /* Derive block_size, natural_order, and lim_Se */
  if (cinfo->is_baseline || (cinfo->progressive_mode &&
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d109      	bne.n	800f90c <initial_setup+0x144>
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d011      	beq.n	800f926 <initial_setup+0x15e>
      cinfo->comps_in_scan)) { /* no pseudo SOS marker */
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  if (cinfo->is_baseline || (cinfo->progressive_mode &&
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d00c      	beq.n	800f926 <initial_setup+0x15e>
    cinfo->block_size = DCTSIZE;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2208      	movs	r2, #8
 800f910:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    cinfo->natural_order = jpeg_natural_order;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	4aca      	ldr	r2, [pc, #808]	; (800fc40 <initial_setup+0x478>)
 800f918:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    cinfo->lim_Se = DCTSIZE2-1;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	223f      	movs	r2, #63	; 0x3f
 800f920:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
 800f924:	e1c9      	b.n	800fcba <initial_setup+0x4f2>
  } else
    switch (cinfo->Se) {
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800f92c:	2bff      	cmp	r3, #255	; 0xff
 800f92e:	f000 8195 	beq.w	800fc5c <initial_setup+0x494>
 800f932:	2bff      	cmp	r3, #255	; 0xff
 800f934:	f300 819f 	bgt.w	800fc76 <initial_setup+0x4ae>
 800f938:	2be0      	cmp	r3, #224	; 0xe0
 800f93a:	f000 8174 	beq.w	800fc26 <initial_setup+0x45e>
 800f93e:	2be0      	cmp	r3, #224	; 0xe0
 800f940:	f300 8199 	bgt.w	800fc76 <initial_setup+0x4ae>
 800f944:	2bc3      	cmp	r3, #195	; 0xc3
 800f946:	f000 8161 	beq.w	800fc0c <initial_setup+0x444>
 800f94a:	2bc3      	cmp	r3, #195	; 0xc3
 800f94c:	f300 8193 	bgt.w	800fc76 <initial_setup+0x4ae>
 800f950:	2ba8      	cmp	r3, #168	; 0xa8
 800f952:	f000 814e 	beq.w	800fbf2 <initial_setup+0x42a>
 800f956:	2ba8      	cmp	r3, #168	; 0xa8
 800f958:	f300 818d 	bgt.w	800fc76 <initial_setup+0x4ae>
 800f95c:	2b8f      	cmp	r3, #143	; 0x8f
 800f95e:	f000 813b 	beq.w	800fbd8 <initial_setup+0x410>
 800f962:	2b8f      	cmp	r3, #143	; 0x8f
 800f964:	f300 8187 	bgt.w	800fc76 <initial_setup+0x4ae>
 800f968:	2b78      	cmp	r3, #120	; 0x78
 800f96a:	f000 8128 	beq.w	800fbbe <initial_setup+0x3f6>
 800f96e:	2b78      	cmp	r3, #120	; 0x78
 800f970:	f300 8181 	bgt.w	800fc76 <initial_setup+0x4ae>
 800f974:	2b63      	cmp	r3, #99	; 0x63
 800f976:	f000 8115 	beq.w	800fba4 <initial_setup+0x3dc>
 800f97a:	2b63      	cmp	r3, #99	; 0x63
 800f97c:	f300 817b 	bgt.w	800fc76 <initial_setup+0x4ae>
 800f980:	2b3f      	cmp	r3, #63	; 0x3f
 800f982:	f300 8089 	bgt.w	800fa98 <initial_setup+0x2d0>
 800f986:	2b00      	cmp	r3, #0
 800f988:	f2c0 8175 	blt.w	800fc76 <initial_setup+0x4ae>
 800f98c:	2b3f      	cmp	r3, #63	; 0x3f
 800f98e:	f200 8172 	bhi.w	800fc76 <initial_setup+0x4ae>
 800f992:	a201      	add	r2, pc, #4	; (adr r2, 800f998 <initial_setup+0x1d0>)
 800f994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f998:	0800fa9f 	.word	0x0800fa9f
 800f99c:	0800fc77 	.word	0x0800fc77
 800f9a0:	0800fc77 	.word	0x0800fc77
 800f9a4:	0800fabd 	.word	0x0800fabd
 800f9a8:	0800fc77 	.word	0x0800fc77
 800f9ac:	0800fc77 	.word	0x0800fc77
 800f9b0:	0800fc77 	.word	0x0800fc77
 800f9b4:	0800fc77 	.word	0x0800fc77
 800f9b8:	0800fadb 	.word	0x0800fadb
 800f9bc:	0800fc77 	.word	0x0800fc77
 800f9c0:	0800fc77 	.word	0x0800fc77
 800f9c4:	0800fc77 	.word	0x0800fc77
 800f9c8:	0800fc77 	.word	0x0800fc77
 800f9cc:	0800fc77 	.word	0x0800fc77
 800f9d0:	0800fc77 	.word	0x0800fc77
 800f9d4:	0800faf9 	.word	0x0800faf9
 800f9d8:	0800fc77 	.word	0x0800fc77
 800f9dc:	0800fc77 	.word	0x0800fc77
 800f9e0:	0800fc77 	.word	0x0800fc77
 800f9e4:	0800fc77 	.word	0x0800fc77
 800f9e8:	0800fc77 	.word	0x0800fc77
 800f9ec:	0800fc77 	.word	0x0800fc77
 800f9f0:	0800fc77 	.word	0x0800fc77
 800f9f4:	0800fc77 	.word	0x0800fc77
 800f9f8:	0800fb17 	.word	0x0800fb17
 800f9fc:	0800fc77 	.word	0x0800fc77
 800fa00:	0800fc77 	.word	0x0800fc77
 800fa04:	0800fc77 	.word	0x0800fc77
 800fa08:	0800fc77 	.word	0x0800fc77
 800fa0c:	0800fc77 	.word	0x0800fc77
 800fa10:	0800fc77 	.word	0x0800fc77
 800fa14:	0800fc77 	.word	0x0800fc77
 800fa18:	0800fc77 	.word	0x0800fc77
 800fa1c:	0800fc77 	.word	0x0800fc77
 800fa20:	0800fc77 	.word	0x0800fc77
 800fa24:	0800fb35 	.word	0x0800fb35
 800fa28:	0800fc77 	.word	0x0800fc77
 800fa2c:	0800fc77 	.word	0x0800fc77
 800fa30:	0800fc77 	.word	0x0800fc77
 800fa34:	0800fc77 	.word	0x0800fc77
 800fa38:	0800fc77 	.word	0x0800fc77
 800fa3c:	0800fc77 	.word	0x0800fc77
 800fa40:	0800fc77 	.word	0x0800fc77
 800fa44:	0800fc77 	.word	0x0800fc77
 800fa48:	0800fc77 	.word	0x0800fc77
 800fa4c:	0800fc77 	.word	0x0800fc77
 800fa50:	0800fc77 	.word	0x0800fc77
 800fa54:	0800fc77 	.word	0x0800fc77
 800fa58:	0800fb53 	.word	0x0800fb53
 800fa5c:	0800fc77 	.word	0x0800fc77
 800fa60:	0800fc77 	.word	0x0800fc77
 800fa64:	0800fc77 	.word	0x0800fc77
 800fa68:	0800fc77 	.word	0x0800fc77
 800fa6c:	0800fc77 	.word	0x0800fc77
 800fa70:	0800fc77 	.word	0x0800fc77
 800fa74:	0800fc77 	.word	0x0800fc77
 800fa78:	0800fc77 	.word	0x0800fc77
 800fa7c:	0800fc77 	.word	0x0800fc77
 800fa80:	0800fc77 	.word	0x0800fc77
 800fa84:	0800fc77 	.word	0x0800fc77
 800fa88:	0800fc77 	.word	0x0800fc77
 800fa8c:	0800fc77 	.word	0x0800fc77
 800fa90:	0800fc77 	.word	0x0800fc77
 800fa94:	0800fb71 	.word	0x0800fb71
 800fa98:	2b50      	cmp	r3, #80	; 0x50
 800fa9a:	d076      	beq.n	800fb8a <initial_setup+0x3c2>
 800fa9c:	e0eb      	b.n	800fc76 <initial_setup+0x4ae>
    case (1*1-1):
      cinfo->block_size = 1;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2201      	movs	r2, #1
 800faa2:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order; /* not needed */
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	4a65      	ldr	r2, [pc, #404]	; (800fc40 <initial_setup+0x478>)
 800faaa:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 800faba:	e0fe      	b.n	800fcba <initial_setup+0x4f2>
    case (2*2-1):
      cinfo->block_size = 2;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2202      	movs	r2, #2
 800fac0:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order2;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	4a5f      	ldr	r2, [pc, #380]	; (800fc44 <initial_setup+0x47c>)
 800fac8:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 800fad8:	e0ef      	b.n	800fcba <initial_setup+0x4f2>
    case (3*3-1):
      cinfo->block_size = 3;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2203      	movs	r2, #3
 800fade:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order3;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	4a58      	ldr	r2, [pc, #352]	; (800fc48 <initial_setup+0x480>)
 800fae6:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 800faf6:	e0e0      	b.n	800fcba <initial_setup+0x4f2>
    case (4*4-1):
      cinfo->block_size = 4;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2204      	movs	r2, #4
 800fafc:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order4;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	4a52      	ldr	r2, [pc, #328]	; (800fc4c <initial_setup+0x484>)
 800fb04:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 800fb14:	e0d1      	b.n	800fcba <initial_setup+0x4f2>
    case (5*5-1):
      cinfo->block_size = 5;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	2205      	movs	r2, #5
 800fb1a:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order5;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	4a4b      	ldr	r2, [pc, #300]	; (800fc50 <initial_setup+0x488>)
 800fb22:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 800fb32:	e0c2      	b.n	800fcba <initial_setup+0x4f2>
    case (6*6-1):
      cinfo->block_size = 6;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2206      	movs	r2, #6
 800fb38:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order6;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	4a45      	ldr	r2, [pc, #276]	; (800fc54 <initial_setup+0x48c>)
 800fb40:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 800fb50:	e0b3      	b.n	800fcba <initial_setup+0x4f2>
    case (7*7-1):
      cinfo->block_size = 7;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2207      	movs	r2, #7
 800fb56:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order7;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	4a3e      	ldr	r2, [pc, #248]	; (800fc58 <initial_setup+0x490>)
 800fb5e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 800fb6e:	e0a4      	b.n	800fcba <initial_setup+0x4f2>
    case (8*8-1):
      cinfo->block_size = 8;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2208      	movs	r2, #8
 800fb74:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	4a31      	ldr	r2, [pc, #196]	; (800fc40 <initial_setup+0x478>)
 800fb7c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	223f      	movs	r2, #63	; 0x3f
 800fb84:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 800fb88:	e097      	b.n	800fcba <initial_setup+0x4f2>
    case (9*9-1):
      cinfo->block_size = 9;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2209      	movs	r2, #9
 800fb8e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	4a2a      	ldr	r2, [pc, #168]	; (800fc40 <initial_setup+0x478>)
 800fb96:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	223f      	movs	r2, #63	; 0x3f
 800fb9e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 800fba2:	e08a      	b.n	800fcba <initial_setup+0x4f2>
    case (10*10-1):
      cinfo->block_size = 10;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	220a      	movs	r2, #10
 800fba8:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	4a24      	ldr	r2, [pc, #144]	; (800fc40 <initial_setup+0x478>)
 800fbb0:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	223f      	movs	r2, #63	; 0x3f
 800fbb8:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 800fbbc:	e07d      	b.n	800fcba <initial_setup+0x4f2>
    case (11*11-1):
      cinfo->block_size = 11;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	220b      	movs	r2, #11
 800fbc2:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	4a1d      	ldr	r2, [pc, #116]	; (800fc40 <initial_setup+0x478>)
 800fbca:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	223f      	movs	r2, #63	; 0x3f
 800fbd2:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 800fbd6:	e070      	b.n	800fcba <initial_setup+0x4f2>
    case (12*12-1):
      cinfo->block_size = 12;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	220c      	movs	r2, #12
 800fbdc:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	4a17      	ldr	r2, [pc, #92]	; (800fc40 <initial_setup+0x478>)
 800fbe4:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	223f      	movs	r2, #63	; 0x3f
 800fbec:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 800fbf0:	e063      	b.n	800fcba <initial_setup+0x4f2>
    case (13*13-1):
      cinfo->block_size = 13;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	220d      	movs	r2, #13
 800fbf6:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	4a10      	ldr	r2, [pc, #64]	; (800fc40 <initial_setup+0x478>)
 800fbfe:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	223f      	movs	r2, #63	; 0x3f
 800fc06:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 800fc0a:	e056      	b.n	800fcba <initial_setup+0x4f2>
    case (14*14-1):
      cinfo->block_size = 14;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	220e      	movs	r2, #14
 800fc10:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	4a0a      	ldr	r2, [pc, #40]	; (800fc40 <initial_setup+0x478>)
 800fc18:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	223f      	movs	r2, #63	; 0x3f
 800fc20:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 800fc24:	e049      	b.n	800fcba <initial_setup+0x4f2>
    case (15*15-1):
      cinfo->block_size = 15;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	220f      	movs	r2, #15
 800fc2a:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	4a03      	ldr	r2, [pc, #12]	; (800fc40 <initial_setup+0x478>)
 800fc32:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	223f      	movs	r2, #63	; 0x3f
 800fc3a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 800fc3e:	e03c      	b.n	800fcba <initial_setup+0x4f2>
 800fc40:	08027618 	.word	0x08027618
 800fc44:	08027ab4 	.word	0x08027ab4
 800fc48:	08027a50 	.word	0x08027a50
 800fc4c:	080279d0 	.word	0x080279d0
 800fc50:	0802792c 	.word	0x0802792c
 800fc54:	0802785c 	.word	0x0802785c
 800fc58:	08027758 	.word	0x08027758
    case (16*16-1):
      cinfo->block_size = 16;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2210      	movs	r2, #16
 800fc60:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	4a6b      	ldr	r2, [pc, #428]	; (800fe14 <initial_setup+0x64c>)
 800fc68:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	223f      	movs	r2, #63	; 0x3f
 800fc70:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 800fc74:	e021      	b.n	800fcba <initial_setup+0x4f2>
    default:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	2211      	movs	r2, #17
 800fc7c:	615a      	str	r2, [r3, #20]
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	687a      	ldr	r2, [r7, #4]
 800fc84:	f8d2 2198 	ldr.w	r2, [r2, #408]	; 0x198
 800fc88:	619a      	str	r2, [r3, #24]
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	687a      	ldr	r2, [r7, #4]
 800fc90:	f8d2 219c 	ldr.w	r2, [r2, #412]	; 0x19c
 800fc94:	61da      	str	r2, [r3, #28]
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	687a      	ldr	r2, [r7, #4]
 800fc9c:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
 800fca0:	621a      	str	r2, [r3, #32]
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	687a      	ldr	r2, [r7, #4]
 800fca8:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 800fcac:	625a      	str	r2, [r3, #36]	; 0x24
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	4798      	blx	r3
	       cinfo->Ss, cinfo->Se, cinfo->Ah, cinfo->Al);
      break;
 800fcb8:	bf00      	nop
   * In the full decompressor,
   * this will be overridden by jpeg_calc_output_dimensions in jdmaster.c;
   * but in the transcoder,
   * jpeg_calc_output_dimensions is not used, so we must do it here.
   */
  cinfo->min_DCT_h_scaled_size = cinfo->block_size;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  cinfo->min_DCT_v_scaled_size = cinfo->block_size;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  /* Compute dimensions of components */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	60fb      	str	r3, [r7, #12]
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800fcdc:	60bb      	str	r3, [r7, #8]
 800fcde:	e065      	b.n	800fdac <initial_setup+0x5e4>
       ci++, compptr++) {
    compptr->DCT_h_scaled_size = cinfo->block_size;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 800fce6:	68bb      	ldr	r3, [r7, #8]
 800fce8:	625a      	str	r2, [r3, #36]	; 0x24
    compptr->DCT_v_scaled_size = cinfo->block_size;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Size in DCT blocks */
    compptr->width_in_blocks = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	69db      	ldr	r3, [r3, #28]
 800fcf8:	461a      	mov	r2, r3
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	689b      	ldr	r3, [r3, #8]
 800fcfe:	fb03 f002 	mul.w	r0, r3, r2
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800fd08:	687a      	ldr	r2, [r7, #4]
 800fd0a:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800fd0e:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800fd12:	4619      	mov	r1, r3
 800fd14:	f015 f87a 	bl	8024e0c <jdiv_round_up>
 800fd18:	4603      	mov	r3, r0
    compptr->width_in_blocks = (JDIMENSION)
 800fd1a:	461a      	mov	r2, r3
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	61da      	str	r2, [r3, #28]
    compptr->height_in_blocks = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	6a1b      	ldr	r3, [r3, #32]
 800fd24:	461a      	mov	r2, r3
 800fd26:	68bb      	ldr	r3, [r7, #8]
 800fd28:	68db      	ldr	r3, [r3, #12]
 800fd2a:	fb03 f002 	mul.w	r0, r3, r2
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800fd34:	687a      	ldr	r2, [r7, #4]
 800fd36:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800fd3a:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800fd3e:	4619      	mov	r1, r3
 800fd40:	f015 f864 	bl	8024e0c <jdiv_round_up>
 800fd44:	4603      	mov	r3, r0
    compptr->height_in_blocks = (JDIMENSION)
 800fd46:	461a      	mov	r2, r3
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	621a      	str	r2, [r3, #32]
     * jdmaster.c if we are doing full decompression.  The transcoder library
     * doesn't use these values, but the calling application might.
     */
    /* Size in samples */
    compptr->downsampled_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	69db      	ldr	r3, [r3, #28]
 800fd50:	461a      	mov	r2, r3
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	689b      	ldr	r3, [r3, #8]
 800fd56:	fb03 f202 	mul.w	r2, r3, r2
		    (long) cinfo->max_h_samp_factor);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800fd60:	4619      	mov	r1, r3
 800fd62:	4610      	mov	r0, r2
 800fd64:	f015 f852 	bl	8024e0c <jdiv_round_up>
 800fd68:	4603      	mov	r3, r0
    compptr->downsampled_width = (JDIMENSION)
 800fd6a:	461a      	mov	r2, r3
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	62da      	str	r2, [r3, #44]	; 0x2c
    compptr->downsampled_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	6a1b      	ldr	r3, [r3, #32]
 800fd74:	461a      	mov	r2, r3
 800fd76:	68bb      	ldr	r3, [r7, #8]
 800fd78:	68db      	ldr	r3, [r3, #12]
 800fd7a:	fb03 f202 	mul.w	r2, r3, r2
		    (long) cinfo->max_v_samp_factor);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800fd84:	4619      	mov	r1, r3
 800fd86:	4610      	mov	r0, r2
 800fd88:	f015 f840 	bl	8024e0c <jdiv_round_up>
 800fd8c:	4603      	mov	r3, r0
    compptr->downsampled_height = (JDIMENSION)
 800fd8e:	461a      	mov	r2, r3
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	631a      	str	r2, [r3, #48]	; 0x30
    /* Mark component needed, until color conversion says otherwise */
    compptr->component_needed = TRUE;
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	2201      	movs	r2, #1
 800fd98:	635a      	str	r2, [r3, #52]	; 0x34
    /* Mark no quantization table yet saved for component */
    compptr->quant_table = NULL;
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	651a      	str	r2, [r3, #80]	; 0x50
       ci++, compptr++) {
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	3301      	adds	r3, #1
 800fda4:	60fb      	str	r3, [r7, #12]
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	3358      	adds	r3, #88	; 0x58
 800fdaa:	60bb      	str	r3, [r7, #8]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdb0:	68fa      	ldr	r2, [r7, #12]
 800fdb2:	429a      	cmp	r2, r3
 800fdb4:	db94      	blt.n	800fce0 <initial_setup+0x518>
  }

  /* Compute number of fully interleaved MCU rows. */
  cinfo->total_iMCU_rows = (JDIMENSION)
    jdiv_round_up((long) cinfo->image_height,
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6a1b      	ldr	r3, [r3, #32]
 800fdba:	4618      	mov	r0, r3
	          (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800fdc2:	687a      	ldr	r2, [r7, #4]
 800fdc4:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800fdc8:	fb02 f303 	mul.w	r3, r2, r3
    jdiv_round_up((long) cinfo->image_height,
 800fdcc:	4619      	mov	r1, r3
 800fdce:	f015 f81d 	bl	8024e0c <jdiv_round_up>
 800fdd2:	4603      	mov	r3, r0
  cinfo->total_iMCU_rows = (JDIMENSION)
 800fdd4:	461a      	mov	r2, r3
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

  /* Decide whether file contains multiple scans */
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fde6:	429a      	cmp	r2, r3
 800fde8:	db04      	blt.n	800fdf4 <initial_setup+0x62c>
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d005      	beq.n	800fe00 <initial_setup+0x638>
    cinfo->inputctl->has_multiple_scans = TRUE;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800fdfa:	2201      	movs	r2, #1
 800fdfc:	611a      	str	r2, [r3, #16]
 800fdfe:	e005      	b.n	800fe0c <initial_setup+0x644>
  else
    cinfo->inputctl->has_multiple_scans = FALSE;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800fe06:	2200      	movs	r2, #0
 800fe08:	611a      	str	r2, [r3, #16]
}
 800fe0a:	bf00      	nop
 800fe0c:	bf00      	nop
 800fe0e:	3710      	adds	r7, #16
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}
 800fe14:	08027618 	.word	0x08027618

0800fe18 <per_scan_setup>:

LOCAL(void)
per_scan_setup (j_decompress_ptr cinfo)
/* Do computations that are needed before processing a JPEG scan */
/* cinfo->comps_in_scan and cinfo->cur_comp_info[] were set from SOS marker */
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b086      	sub	sp, #24
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
  int ci, mcublks, tmp;
  jpeg_component_info *compptr;
  
  if (cinfo->comps_in_scan == 1) {
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800fe26:	2b01      	cmp	r3, #1
 800fe28:	d139      	bne.n	800fe9e <per_scan_setup+0x86>
    
    /* Noninterleaved (single-component) scan */
    compptr = cinfo->cur_comp_info[0];
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800fe30:	60bb      	str	r3, [r7, #8]
    
    /* Overall image size in MCUs */
    cinfo->MCUs_per_row = compptr->width_in_blocks;
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	69da      	ldr	r2, [r3, #28]
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	6a1a      	ldr	r2, [r3, #32]
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    
    /* For noninterleaved scan, always one block per MCU */
    compptr->MCU_width = 1;
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	2201      	movs	r2, #1
 800fe4a:	639a      	str	r2, [r3, #56]	; 0x38
    compptr->MCU_height = 1;
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	2201      	movs	r2, #1
 800fe50:	63da      	str	r2, [r3, #60]	; 0x3c
    compptr->MCU_blocks = 1;
 800fe52:	68bb      	ldr	r3, [r7, #8]
 800fe54:	2201      	movs	r2, #1
 800fe56:	641a      	str	r2, [r3, #64]	; 0x40
    compptr->MCU_sample_width = compptr->DCT_h_scaled_size;
 800fe58:	68bb      	ldr	r3, [r7, #8]
 800fe5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe5c:	68bb      	ldr	r3, [r7, #8]
 800fe5e:	645a      	str	r2, [r3, #68]	; 0x44
    compptr->last_col_width = 1;
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	2201      	movs	r2, #1
 800fe64:	649a      	str	r2, [r3, #72]	; 0x48
    /* For noninterleaved scans, it is convenient to define last_row_height
     * as the number of block rows present in the last iMCU row.
     */
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	6a1b      	ldr	r3, [r3, #32]
 800fe6a:	68ba      	ldr	r2, [r7, #8]
 800fe6c:	68d2      	ldr	r2, [r2, #12]
 800fe6e:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe72:	fb02 f201 	mul.w	r2, r2, r1
 800fe76:	1a9b      	subs	r3, r3, r2
 800fe78:	60fb      	str	r3, [r7, #12]
    if (tmp == 0) tmp = compptr->v_samp_factor;
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d102      	bne.n	800fe86 <per_scan_setup+0x6e>
 800fe80:	68bb      	ldr	r3, [r7, #8]
 800fe82:	68db      	ldr	r3, [r3, #12]
 800fe84:	60fb      	str	r3, [r7, #12]
    compptr->last_row_height = tmp;
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	68fa      	ldr	r2, [r7, #12]
 800fe8a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Prepare array describing MCU composition */
    cinfo->blocks_in_MCU = 1;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2201      	movs	r2, #1
 800fe90:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    cinfo->MCU_membership[0] = 0;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2200      	movs	r2, #0
 800fe98:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
      }
    }
    
  }
}
 800fe9c:	e0bc      	b.n	8010018 <per_scan_setup+0x200>
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	dd04      	ble.n	800feb2 <per_scan_setup+0x9a>
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800feae:	2b04      	cmp	r3, #4
 800feb0:	dd12      	ble.n	800fed8 <per_scan_setup+0xc0>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	221b      	movs	r2, #27
 800feb8:	615a      	str	r2, [r3, #20]
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	687a      	ldr	r2, [r7, #4]
 800fec0:	f8d2 2150 	ldr.w	r2, [r2, #336]	; 0x150
 800fec4:	619a      	str	r2, [r3, #24]
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	2204      	movs	r2, #4
 800fecc:	61da      	str	r2, [r3, #28]
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	4798      	blx	r3
      jdiv_round_up((long) cinfo->image_width,
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	69db      	ldr	r3, [r3, #28]
 800fedc:	4618      	mov	r0, r3
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800fee4:	687a      	ldr	r2, [r7, #4]
 800fee6:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800feea:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->image_width,
 800feee:	4619      	mov	r1, r3
 800fef0:	f014 ff8c 	bl	8024e0c <jdiv_round_up>
 800fef4:	4603      	mov	r3, r0
    cinfo->MCUs_per_row = (JDIMENSION)
 800fef6:	461a      	mov	r2, r3
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
      jdiv_round_up((long) cinfo->image_height,
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	6a1b      	ldr	r3, [r3, #32]
 800ff02:	4618      	mov	r0, r3
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800ff0a:	687a      	ldr	r2, [r7, #4]
 800ff0c:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800ff10:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->image_height,
 800ff14:	4619      	mov	r1, r3
 800ff16:	f014 ff79 	bl	8024e0c <jdiv_round_up>
 800ff1a:	4603      	mov	r3, r0
    cinfo->MCU_rows_in_scan = (JDIMENSION)
 800ff1c:	461a      	mov	r2, r3
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    cinfo->blocks_in_MCU = 0;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2200      	movs	r2, #0
 800ff28:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	617b      	str	r3, [r7, #20]
 800ff30:	e06c      	b.n	801000c <per_scan_setup+0x1f4>
      compptr = cinfo->cur_comp_info[ci];
 800ff32:	687a      	ldr	r2, [r7, #4]
 800ff34:	697b      	ldr	r3, [r7, #20]
 800ff36:	3354      	adds	r3, #84	; 0x54
 800ff38:	009b      	lsls	r3, r3, #2
 800ff3a:	4413      	add	r3, r2
 800ff3c:	685b      	ldr	r3, [r3, #4]
 800ff3e:	60bb      	str	r3, [r7, #8]
      compptr->MCU_width = compptr->h_samp_factor;
 800ff40:	68bb      	ldr	r3, [r7, #8]
 800ff42:	689a      	ldr	r2, [r3, #8]
 800ff44:	68bb      	ldr	r3, [r7, #8]
 800ff46:	639a      	str	r2, [r3, #56]	; 0x38
      compptr->MCU_height = compptr->v_samp_factor;
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	68da      	ldr	r2, [r3, #12]
 800ff4c:	68bb      	ldr	r3, [r7, #8]
 800ff4e:	63da      	str	r2, [r3, #60]	; 0x3c
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff54:	68ba      	ldr	r2, [r7, #8]
 800ff56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ff58:	fb02 f203 	mul.w	r2, r2, r3
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	641a      	str	r2, [r3, #64]	; 0x40
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800ff60:	68bb      	ldr	r3, [r7, #8]
 800ff62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff64:	68ba      	ldr	r2, [r7, #8]
 800ff66:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ff68:	fb02 f203 	mul.w	r2, r2, r3
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	645a      	str	r2, [r3, #68]	; 0x44
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	69db      	ldr	r3, [r3, #28]
 800ff74:	68ba      	ldr	r2, [r7, #8]
 800ff76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ff78:	fbb3 f1f2 	udiv	r1, r3, r2
 800ff7c:	fb02 f201 	mul.w	r2, r2, r1
 800ff80:	1a9b      	subs	r3, r3, r2
 800ff82:	60fb      	str	r3, [r7, #12]
      if (tmp == 0) tmp = compptr->MCU_width;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d102      	bne.n	800ff90 <per_scan_setup+0x178>
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff8e:	60fb      	str	r3, [r7, #12]
      compptr->last_col_width = tmp;
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	68fa      	ldr	r2, [r7, #12]
 800ff94:	649a      	str	r2, [r3, #72]	; 0x48
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	6a1b      	ldr	r3, [r3, #32]
 800ff9a:	68ba      	ldr	r2, [r7, #8]
 800ff9c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ff9e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ffa2:	fb02 f201 	mul.w	r2, r2, r1
 800ffa6:	1a9b      	subs	r3, r3, r2
 800ffa8:	60fb      	str	r3, [r7, #12]
      if (tmp == 0) tmp = compptr->MCU_height;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d102      	bne.n	800ffb6 <per_scan_setup+0x19e>
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffb4:	60fb      	str	r3, [r7, #12]
      compptr->last_row_height = tmp;
 800ffb6:	68bb      	ldr	r3, [r7, #8]
 800ffb8:	68fa      	ldr	r2, [r7, #12]
 800ffba:	64da      	str	r2, [r3, #76]	; 0x4c
      mcublks = compptr->MCU_blocks;
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffc0:	613b      	str	r3, [r7, #16]
      if (cinfo->blocks_in_MCU + mcublks > D_MAX_BLOCKS_IN_MCU)
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	4413      	add	r3, r2
 800ffcc:	2b0a      	cmp	r3, #10
 800ffce:	dd15      	ble.n	800fffc <per_scan_setup+0x1e4>
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	220e      	movs	r2, #14
 800ffd6:	615a      	str	r2, [r3, #20]
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	6878      	ldr	r0, [r7, #4]
 800ffe0:	4798      	blx	r3
      while (mcublks-- > 0) {
 800ffe2:	e00b      	b.n	800fffc <per_scan_setup+0x1e4>
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800ffea:	1c59      	adds	r1, r3, #1
 800ffec:	687a      	ldr	r2, [r7, #4]
 800ffee:	f8c2 116c 	str.w	r1, [r2, #364]	; 0x16c
 800fff2:	687a      	ldr	r2, [r7, #4]
 800fff4:	335c      	adds	r3, #92	; 0x5c
 800fff6:	6979      	ldr	r1, [r7, #20]
 800fff8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      while (mcublks-- > 0) {
 800fffc:	693b      	ldr	r3, [r7, #16]
 800fffe:	1e5a      	subs	r2, r3, #1
 8010000:	613a      	str	r2, [r7, #16]
 8010002:	2b00      	cmp	r3, #0
 8010004:	dcee      	bgt.n	800ffe4 <per_scan_setup+0x1cc>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8010006:	697b      	ldr	r3, [r7, #20]
 8010008:	3301      	adds	r3, #1
 801000a:	617b      	str	r3, [r7, #20]
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8010012:	697a      	ldr	r2, [r7, #20]
 8010014:	429a      	cmp	r2, r3
 8010016:	db8c      	blt.n	800ff32 <per_scan_setup+0x11a>
}
 8010018:	bf00      	nop
 801001a:	3718      	adds	r7, #24
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}

08010020 <latch_quant_tables>:
 * not at the current Q-table slots.
 */

LOCAL(void)
latch_quant_tables (j_decompress_ptr cinfo)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b086      	sub	sp, #24
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
  int ci, qtblno;
  jpeg_component_info *compptr;
  JQUANT_TBL * qtbl;

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8010028:	2300      	movs	r3, #0
 801002a:	617b      	str	r3, [r7, #20]
 801002c:	e043      	b.n	80100b6 <latch_quant_tables+0x96>
    compptr = cinfo->cur_comp_info[ci];
 801002e:	687a      	ldr	r2, [r7, #4]
 8010030:	697b      	ldr	r3, [r7, #20]
 8010032:	3354      	adds	r3, #84	; 0x54
 8010034:	009b      	lsls	r3, r3, #2
 8010036:	4413      	add	r3, r2
 8010038:	685b      	ldr	r3, [r3, #4]
 801003a:	613b      	str	r3, [r7, #16]
    /* No work if we already saved Q-table for this component */
    if (compptr->quant_table != NULL)
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010040:	2b00      	cmp	r3, #0
 8010042:	d134      	bne.n	80100ae <latch_quant_tables+0x8e>
      continue;
    /* Make sure specified quantization table is present */
    qtblno = compptr->quant_tbl_no;
 8010044:	693b      	ldr	r3, [r7, #16]
 8010046:	691b      	ldr	r3, [r3, #16]
 8010048:	60fb      	str	r3, [r7, #12]
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	2b00      	cmp	r3, #0
 801004e:	db0a      	blt.n	8010066 <latch_quant_tables+0x46>
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	2b03      	cmp	r3, #3
 8010054:	dc07      	bgt.n	8010066 <latch_quant_tables+0x46>
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
 8010056:	687a      	ldr	r2, [r7, #4]
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	3328      	adds	r3, #40	; 0x28
 801005c:	009b      	lsls	r3, r3, #2
 801005e:	4413      	add	r3, r2
 8010060:	685b      	ldr	r3, [r3, #4]
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 8010062:	2b00      	cmp	r3, #0
 8010064:	d10c      	bne.n	8010080 <latch_quant_tables+0x60>
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	2236      	movs	r2, #54	; 0x36
 801006c:	615a      	str	r2, [r3, #20]
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	68fa      	ldr	r2, [r7, #12]
 8010074:	619a      	str	r2, [r3, #24]
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	4798      	blx	r3
    /* OK, save away the quantization table */
    qtbl = (JQUANT_TBL *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	685b      	ldr	r3, [r3, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	2284      	movs	r2, #132	; 0x84
 8010088:	2101      	movs	r1, #1
 801008a:	6878      	ldr	r0, [r7, #4]
 801008c:	4798      	blx	r3
 801008e:	60b8      	str	r0, [r7, #8]
				  SIZEOF(JQUANT_TBL));
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 8010090:	687a      	ldr	r2, [r7, #4]
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	3328      	adds	r3, #40	; 0x28
 8010096:	009b      	lsls	r3, r3, #2
 8010098:	4413      	add	r3, r2
 801009a:	685b      	ldr	r3, [r3, #4]
 801009c:	2284      	movs	r2, #132	; 0x84
 801009e:	4619      	mov	r1, r3
 80100a0:	68b8      	ldr	r0, [r7, #8]
 80100a2:	f014 ff53 	bl	8024f4c <memcpy>
    compptr->quant_table = qtbl;
 80100a6:	693b      	ldr	r3, [r7, #16]
 80100a8:	68ba      	ldr	r2, [r7, #8]
 80100aa:	651a      	str	r2, [r3, #80]	; 0x50
 80100ac:	e000      	b.n	80100b0 <latch_quant_tables+0x90>
      continue;
 80100ae:	bf00      	nop
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80100b0:	697b      	ldr	r3, [r7, #20]
 80100b2:	3301      	adds	r3, #1
 80100b4:	617b      	str	r3, [r7, #20]
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80100bc:	697a      	ldr	r2, [r7, #20]
 80100be:	429a      	cmp	r2, r3
 80100c0:	dbb5      	blt.n	801002e <latch_quant_tables+0xe>
  }
}
 80100c2:	bf00      	nop
 80100c4:	bf00      	nop
 80100c6:	3718      	adds	r7, #24
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}

080100cc <start_input_pass>:
 * Subsequent calls come from consume_markers, below.
 */

METHODDEF(void)
start_input_pass (j_decompress_ptr cinfo)
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b082      	sub	sp, #8
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
  per_scan_setup(cinfo);
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f7ff fe9f 	bl	800fe18 <per_scan_setup>
  latch_quant_tables(cinfo);
 80100da:	6878      	ldr	r0, [r7, #4]
 80100dc:	f7ff ffa0 	bl	8010020 <latch_quant_tables>
  (*cinfo->entropy->start_pass) (cinfo);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	4798      	blx	r3
  (*cinfo->coef->start_input_pass) (cinfo);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	4798      	blx	r3
  cinfo->inputctl->consume_input = cinfo->coef->consume_data;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8010104:	6852      	ldr	r2, [r2, #4]
 8010106:	601a      	str	r2, [r3, #0]
}
 8010108:	bf00      	nop
 801010a:	3708      	adds	r7, #8
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}

08010110 <finish_input_pass>:
 * the expected data of the scan.
 */

METHODDEF(void)
finish_input_pass (j_decompress_ptr cinfo)
{
 8010110:	b480      	push	{r7}
 8010112:	b083      	sub	sp, #12
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
  cinfo->inputctl->consume_input = consume_markers;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 801011e:	4a04      	ldr	r2, [pc, #16]	; (8010130 <finish_input_pass+0x20>)
 8010120:	601a      	str	r2, [r3, #0]
}
 8010122:	bf00      	nop
 8010124:	370c      	adds	r7, #12
 8010126:	46bd      	mov	sp, r7
 8010128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012c:	4770      	bx	lr
 801012e:	bf00      	nop
 8010130:	08010135 	.word	0x08010135

08010134 <consume_markers>:
 * read_markers is processed and then skipped for other markers.
 */

METHODDEF(int)
consume_markers (j_decompress_ptr cinfo)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b084      	sub	sp, #16
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8010142:	60fb      	str	r3, [r7, #12]
  int val;

  if (inputctl->pub.eoi_reached) /* After hitting EOI, read no further */
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	695b      	ldr	r3, [r3, #20]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d001      	beq.n	8010150 <consume_markers+0x1c>
    return JPEG_REACHED_EOI;
 801014c:	2302      	movs	r3, #2
 801014e:	e06e      	b.n	801022e <consume_markers+0xfa>

  for (;;) {			/* Loop to pass pseudo SOS marker */
    val = (*cinfo->marker->read_markers) (cinfo);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8010156:	685b      	ldr	r3, [r3, #4]
 8010158:	6878      	ldr	r0, [r7, #4]
 801015a:	4798      	blx	r3
 801015c:	60b8      	str	r0, [r7, #8]

    switch (val) {
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	2b02      	cmp	r3, #2
 8010162:	d037      	beq.n	80101d4 <consume_markers+0xa0>
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	2b02      	cmp	r3, #2
 8010168:	dc5d      	bgt.n	8010226 <consume_markers+0xf2>
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d058      	beq.n	8010222 <consume_markers+0xee>
 8010170:	68bb      	ldr	r3, [r7, #8]
 8010172:	2b01      	cmp	r3, #1
 8010174:	d157      	bne.n	8010226 <consume_markers+0xf2>
    case JPEG_REACHED_SOS:	/* Found SOS */
      if (inputctl->inheaders) { /* 1st SOS */
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	699b      	ldr	r3, [r3, #24]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d013      	beq.n	80101a6 <consume_markers+0x72>
	if (inputctl->inheaders == 1)
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	699b      	ldr	r3, [r3, #24]
 8010182:	2b01      	cmp	r3, #1
 8010184:	d102      	bne.n	801018c <consume_markers+0x58>
	  initial_setup(cinfo);
 8010186:	6878      	ldr	r0, [r7, #4]
 8010188:	f7ff fb1e 	bl	800f7c8 <initial_setup>
	if (cinfo->comps_in_scan == 0) { /* pseudo SOS marker */
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8010192:	2b00      	cmp	r3, #0
 8010194:	d103      	bne.n	801019e <consume_markers+0x6a>
	  inputctl->inheaders = 2;
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	2202      	movs	r2, #2
 801019a:	619a      	str	r2, [r3, #24]
	  break;
 801019c:	e046      	b.n	801022c <consume_markers+0xf8>
	}
	inputctl->inheaders = 0;
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	2200      	movs	r2, #0
 80101a2:	619a      	str	r2, [r3, #24]
 80101a4:	e014      	b.n	80101d0 <consume_markers+0x9c>
	/* Note: start_input_pass must be called by jdmaster.c
	 * before any more input can be consumed.  jdapimin.c is
	 * responsible for enforcing this sequencing.
	 */
      } else {			/* 2nd or later SOS marker */
	if (! inputctl->pub.has_multiple_scans)
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	691b      	ldr	r3, [r3, #16]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d108      	bne.n	80101c0 <consume_markers+0x8c>
	  ERREXIT(cinfo, JERR_EOI_EXPECTED); /* Oops, I wasn't expecting this! */
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	2224      	movs	r2, #36	; 0x24
 80101b4:	615a      	str	r2, [r3, #20]
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	6878      	ldr	r0, [r7, #4]
 80101be:	4798      	blx	r3
	if (cinfo->comps_in_scan == 0) /* unexpected pseudo SOS marker */
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d02f      	beq.n	801022a <consume_markers+0xf6>
	  break;
	start_input_pass(cinfo);
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f7ff ff7e 	bl	80100cc <start_input_pass>
      }
      return val;
 80101d0:	68bb      	ldr	r3, [r7, #8]
 80101d2:	e02c      	b.n	801022e <consume_markers+0xfa>
    case JPEG_REACHED_EOI:	/* Found EOI */
      inputctl->pub.eoi_reached = TRUE;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	2201      	movs	r2, #1
 80101d8:	615a      	str	r2, [r3, #20]
      if (inputctl->inheaders) { /* Tables-only datastream, apparently */
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	699b      	ldr	r3, [r3, #24]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d00f      	beq.n	8010202 <consume_markers+0xce>
	if (cinfo->marker->saw_SOF)
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80101e8:	691b      	ldr	r3, [r3, #16]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d017      	beq.n	801021e <consume_markers+0xea>
	  ERREXIT(cinfo, JERR_SOF_NO_SOS);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	223d      	movs	r2, #61	; 0x3d
 80101f4:	615a      	str	r2, [r3, #20]
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	6878      	ldr	r0, [r7, #4]
 80101fe:	4798      	blx	r3
 8010200:	e00d      	b.n	801021e <consume_markers+0xea>
      } else {
	/* Prevent infinite loop in coef ctlr's decompress_data routine
	 * if user set output_scan_number larger than number of scans.
	 */
	if (cinfo->output_scan_number > cinfo->input_scan_number)
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801020e:	429a      	cmp	r2, r3
 8010210:	dd05      	ble.n	801021e <consume_markers+0xea>
	  cinfo->output_scan_number = cinfo->input_scan_number;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      }
      return val;
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	e005      	b.n	801022e <consume_markers+0xfa>
    case JPEG_SUSPENDED:
      return val;
 8010222:	68bb      	ldr	r3, [r7, #8]
 8010224:	e003      	b.n	801022e <consume_markers+0xfa>
    default:
      return val;
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	e001      	b.n	801022e <consume_markers+0xfa>
	  break;
 801022a:	bf00      	nop
    val = (*cinfo->marker->read_markers) (cinfo);
 801022c:	e790      	b.n	8010150 <consume_markers+0x1c>
    }
  }
}
 801022e:	4618      	mov	r0, r3
 8010230:	3710      	adds	r7, #16
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}
	...

08010238 <reset_input_controller>:
 * Reset state to begin a fresh datastream.
 */

METHODDEF(void)
reset_input_controller (j_decompress_ptr cinfo)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b084      	sub	sp, #16
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8010246:	60fb      	str	r3, [r7, #12]

  inputctl->pub.consume_input = consume_markers;
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	4a0f      	ldr	r2, [pc, #60]	; (8010288 <reset_input_controller+0x50>)
 801024c:	601a      	str	r2, [r3, #0]
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	2200      	movs	r2, #0
 8010252:	611a      	str	r2, [r3, #16]
  inputctl->pub.eoi_reached = FALSE;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	2200      	movs	r2, #0
 8010258:	615a      	str	r2, [r3, #20]
  inputctl->inheaders = 1;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	2201      	movs	r2, #1
 801025e:	619a      	str	r2, [r3, #24]
  /* Reset other modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	691b      	ldr	r3, [r3, #16]
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	4798      	blx	r3
  (*cinfo->marker->reset_marker_reader) (cinfo);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	4798      	blx	r3
  /* Reset progression state -- would be cleaner if entropy decoder did this */
  cinfo->coef_bits = NULL;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2200      	movs	r2, #0
 801027a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
 801027e:	bf00      	nop
 8010280:	3710      	adds	r7, #16
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}
 8010286:	bf00      	nop
 8010288:	08010135 	.word	0x08010135

0801028c <jinit_input_controller>:
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_input_controller (j_decompress_ptr cinfo)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b084      	sub	sp, #16
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
  my_inputctl_ptr inputctl;

  /* Create subobject in permanent pool */
  inputctl = (my_inputctl_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	685b      	ldr	r3, [r3, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	221c      	movs	r2, #28
 801029c:	2100      	movs	r1, #0
 801029e:	6878      	ldr	r0, [r7, #4]
 80102a0:	4798      	blx	r3
 80102a2:	60f8      	str	r0, [r7, #12]
				SIZEOF(my_input_controller));
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	68fa      	ldr	r2, [r7, #12]
 80102a8:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  /* Initialize method pointers */
  inputctl->pub.consume_input = consume_markers;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	4a0c      	ldr	r2, [pc, #48]	; (80102e0 <jinit_input_controller+0x54>)
 80102b0:	601a      	str	r2, [r3, #0]
  inputctl->pub.reset_input_controller = reset_input_controller;
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	4a0b      	ldr	r2, [pc, #44]	; (80102e4 <jinit_input_controller+0x58>)
 80102b6:	605a      	str	r2, [r3, #4]
  inputctl->pub.start_input_pass = start_input_pass;
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	4a0b      	ldr	r2, [pc, #44]	; (80102e8 <jinit_input_controller+0x5c>)
 80102bc:	609a      	str	r2, [r3, #8]
  inputctl->pub.finish_input_pass = finish_input_pass;
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	4a0a      	ldr	r2, [pc, #40]	; (80102ec <jinit_input_controller+0x60>)
 80102c2:	60da      	str	r2, [r3, #12]
  /* Initialize state: can't use reset_input_controller since we don't
   * want to try to reset other modules yet.
   */
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	2200      	movs	r2, #0
 80102c8:	611a      	str	r2, [r3, #16]
  inputctl->pub.eoi_reached = FALSE;
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	2200      	movs	r2, #0
 80102ce:	615a      	str	r2, [r3, #20]
  inputctl->inheaders = 1;
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	2201      	movs	r2, #1
 80102d4:	619a      	str	r2, [r3, #24]
}
 80102d6:	bf00      	nop
 80102d8:	3710      	adds	r7, #16
 80102da:	46bd      	mov	sp, r7
 80102dc:	bd80      	pop	{r7, pc}
 80102de:	bf00      	nop
 80102e0:	08010135 	.word	0x08010135
 80102e4:	08010239 	.word	0x08010239
 80102e8:	080100cd 	.word	0x080100cd
 80102ec:	08010111 	.word	0x08010111

080102f0 <alloc_funny_pointers>:
LOCAL(void)
alloc_funny_pointers (j_decompress_ptr cinfo)
/* Allocate space for the funny pointer lists.
 * This is done only once, not once per pass.
 */
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b088      	sub	sp, #32
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
  my_main_ptr main = (my_main_ptr) cinfo->main;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80102fe:	617b      	str	r3, [r7, #20]
  int ci, rgroup;
  int M = cinfo->min_DCT_v_scaled_size;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8010306:	613b      	str	r3, [r7, #16]

  /* Get top-level space for component array pointers.
   * We alloc both arrays with one call to save a few cycles.
   */
  main->xbuffer[0] = (JSAMPIMAGE)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	685b      	ldr	r3, [r3, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
				cinfo->num_components * 2 * SIZEOF(JSAMPARRAY));
 801030e:	687a      	ldr	r2, [r7, #4]
 8010310:	6a52      	ldr	r2, [r2, #36]	; 0x24
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010312:	00d2      	lsls	r2, r2, #3
 8010314:	2101      	movs	r1, #1
 8010316:	6878      	ldr	r0, [r7, #4]
 8010318:	4798      	blx	r3
 801031a:	4602      	mov	r2, r0
  main->xbuffer[0] = (JSAMPIMAGE)
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	639a      	str	r2, [r3, #56]	; 0x38
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 8010320:	697b      	ldr	r3, [r7, #20]
 8010322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010328:	009b      	lsls	r3, r3, #2
 801032a:	441a      	add	r2, r3
 801032c:	697b      	ldr	r3, [r7, #20]
 801032e:	63da      	str	r2, [r3, #60]	; 0x3c

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8010330:	2300      	movs	r3, #0
 8010332:	61fb      	str	r3, [r7, #28]
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801033a:	61bb      	str	r3, [r7, #24]
 801033c:	e03a      	b.n	80103b4 <alloc_funny_pointers+0xc4>
       ci++, compptr++) {
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 801033e:	69bb      	ldr	r3, [r7, #24]
 8010340:	68db      	ldr	r3, [r3, #12]
 8010342:	69ba      	ldr	r2, [r7, #24]
 8010344:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8010346:	fb02 f203 	mul.w	r2, r2, r3
      cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 8010350:	fb92 f3f3 	sdiv	r3, r2, r3
 8010354:	60fb      	str	r3, [r7, #12]
    /* Get space for pointer lists --- M+4 row groups in each list.
     * We alloc both pointer lists with one call to save a few cycles.
     */
    xbuf = (JSAMPARRAY)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	685b      	ldr	r3, [r3, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 801035c:	693a      	ldr	r2, [r7, #16]
 801035e:	3204      	adds	r2, #4
 8010360:	68f9      	ldr	r1, [r7, #12]
 8010362:	fb01 f202 	mul.w	r2, r1, r2
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8010366:	00d2      	lsls	r2, r2, #3
 8010368:	2101      	movs	r1, #1
 801036a:	6878      	ldr	r0, [r7, #4]
 801036c:	4798      	blx	r3
 801036e:	60b8      	str	r0, [r7, #8]
    xbuf += rgroup;		/* want one row group at negative offsets */
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	009b      	lsls	r3, r3, #2
 8010374:	68ba      	ldr	r2, [r7, #8]
 8010376:	4413      	add	r3, r2
 8010378:	60bb      	str	r3, [r7, #8]
    main->xbuffer[0][ci] = xbuf;
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801037e:	69fb      	ldr	r3, [r7, #28]
 8010380:	009b      	lsls	r3, r3, #2
 8010382:	4413      	add	r3, r2
 8010384:	68ba      	ldr	r2, [r7, #8]
 8010386:	601a      	str	r2, [r3, #0]
    xbuf += rgroup * (M + 4);
 8010388:	693b      	ldr	r3, [r7, #16]
 801038a:	3304      	adds	r3, #4
 801038c:	68fa      	ldr	r2, [r7, #12]
 801038e:	fb02 f303 	mul.w	r3, r2, r3
 8010392:	009b      	lsls	r3, r3, #2
 8010394:	68ba      	ldr	r2, [r7, #8]
 8010396:	4413      	add	r3, r2
 8010398:	60bb      	str	r3, [r7, #8]
    main->xbuffer[1][ci] = xbuf;
 801039a:	697b      	ldr	r3, [r7, #20]
 801039c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801039e:	69fb      	ldr	r3, [r7, #28]
 80103a0:	009b      	lsls	r3, r3, #2
 80103a2:	4413      	add	r3, r2
 80103a4:	68ba      	ldr	r2, [r7, #8]
 80103a6:	601a      	str	r2, [r3, #0]
       ci++, compptr++) {
 80103a8:	69fb      	ldr	r3, [r7, #28]
 80103aa:	3301      	adds	r3, #1
 80103ac:	61fb      	str	r3, [r7, #28]
 80103ae:	69bb      	ldr	r3, [r7, #24]
 80103b0:	3358      	adds	r3, #88	; 0x58
 80103b2:	61bb      	str	r3, [r7, #24]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103b8:	69fa      	ldr	r2, [r7, #28]
 80103ba:	429a      	cmp	r2, r3
 80103bc:	dbbf      	blt.n	801033e <alloc_funny_pointers+0x4e>
  }
}
 80103be:	bf00      	nop
 80103c0:	bf00      	nop
 80103c2:	3720      	adds	r7, #32
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}

080103c8 <make_funny_pointers>:
 * The actual workspace is already allocated (in main->buffer),
 * and the space for the pointer lists is allocated too.
 * This routine just fills in the curiously ordered lists.
 * This will be repeated at the beginning of each pass.
 */
{
 80103c8:	b480      	push	{r7}
 80103ca:	b08d      	sub	sp, #52	; 0x34
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
  my_main_ptr main = (my_main_ptr) cinfo->main;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80103d6:	623b      	str	r3, [r7, #32]
  int ci, i, rgroup;
  int M = cinfo->min_DCT_v_scaled_size;
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80103de:	61fb      	str	r3, [r7, #28]
  jpeg_component_info *compptr;
  JSAMPARRAY buf, xbuf0, xbuf1;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80103e0:	2300      	movs	r3, #0
 80103e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80103ea:	627b      	str	r3, [r7, #36]	; 0x24
 80103ec:	e08b      	b.n	8010506 <make_funny_pointers+0x13e>
       ci++, compptr++) {
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 80103ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103f0:	68db      	ldr	r3, [r3, #12]
 80103f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103f4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80103f6:	fb02 f203 	mul.w	r2, r2, r3
      cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 8010400:	fb92 f3f3 	sdiv	r3, r2, r3
 8010404:	61bb      	str	r3, [r7, #24]
    xbuf0 = main->xbuffer[0][ci];
 8010406:	6a3b      	ldr	r3, [r7, #32]
 8010408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801040a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801040c:	009b      	lsls	r3, r3, #2
 801040e:	4413      	add	r3, r2
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	617b      	str	r3, [r7, #20]
    xbuf1 = main->xbuffer[1][ci];
 8010414:	6a3b      	ldr	r3, [r7, #32]
 8010416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801041a:	009b      	lsls	r3, r3, #2
 801041c:	4413      	add	r3, r2
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	613b      	str	r3, [r7, #16]
    /* First copy the workspace pointers as-is */
    buf = main->buffer[ci];
 8010422:	6a3b      	ldr	r3, [r7, #32]
 8010424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010426:	3202      	adds	r2, #2
 8010428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801042c:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < rgroup * (M + 2); i++) {
 801042e:	2300      	movs	r3, #0
 8010430:	62bb      	str	r3, [r7, #40]	; 0x28
 8010432:	e012      	b.n	801045a <make_funny_pointers+0x92>
      xbuf0[i] = xbuf1[i] = buf[i];
 8010434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010436:	009b      	lsls	r3, r3, #2
 8010438:	68fa      	ldr	r2, [r7, #12]
 801043a:	441a      	add	r2, r3
 801043c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801043e:	009b      	lsls	r3, r3, #2
 8010440:	6939      	ldr	r1, [r7, #16]
 8010442:	440b      	add	r3, r1
 8010444:	6812      	ldr	r2, [r2, #0]
 8010446:	601a      	str	r2, [r3, #0]
 8010448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801044a:	0092      	lsls	r2, r2, #2
 801044c:	6979      	ldr	r1, [r7, #20]
 801044e:	440a      	add	r2, r1
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	6013      	str	r3, [r2, #0]
    for (i = 0; i < rgroup * (M + 2); i++) {
 8010454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010456:	3301      	adds	r3, #1
 8010458:	62bb      	str	r3, [r7, #40]	; 0x28
 801045a:	69fb      	ldr	r3, [r7, #28]
 801045c:	3302      	adds	r3, #2
 801045e:	69ba      	ldr	r2, [r7, #24]
 8010460:	fb02 f303 	mul.w	r3, r2, r3
 8010464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010466:	429a      	cmp	r2, r3
 8010468:	dbe4      	blt.n	8010434 <make_funny_pointers+0x6c>
    }
    /* In the second list, put the last four row groups in swapped order */
    for (i = 0; i < rgroup * 2; i++) {
 801046a:	2300      	movs	r3, #0
 801046c:	62bb      	str	r3, [r7, #40]	; 0x28
 801046e:	e02c      	b.n	80104ca <make_funny_pointers+0x102>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 8010470:	69bb      	ldr	r3, [r7, #24]
 8010472:	69fa      	ldr	r2, [r7, #28]
 8010474:	fb02 f203 	mul.w	r2, r2, r3
 8010478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801047a:	4413      	add	r3, r2
 801047c:	009b      	lsls	r3, r3, #2
 801047e:	68fa      	ldr	r2, [r7, #12]
 8010480:	441a      	add	r2, r3
 8010482:	69fb      	ldr	r3, [r7, #28]
 8010484:	3b02      	subs	r3, #2
 8010486:	69b9      	ldr	r1, [r7, #24]
 8010488:	fb01 f103 	mul.w	r1, r1, r3
 801048c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801048e:	440b      	add	r3, r1
 8010490:	009b      	lsls	r3, r3, #2
 8010492:	6939      	ldr	r1, [r7, #16]
 8010494:	440b      	add	r3, r1
 8010496:	6812      	ldr	r2, [r2, #0]
 8010498:	601a      	str	r2, [r3, #0]
      xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
 801049a:	69fb      	ldr	r3, [r7, #28]
 801049c:	3b02      	subs	r3, #2
 801049e:	69ba      	ldr	r2, [r7, #24]
 80104a0:	fb02 f203 	mul.w	r2, r2, r3
 80104a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104a6:	4413      	add	r3, r2
 80104a8:	009b      	lsls	r3, r3, #2
 80104aa:	68fa      	ldr	r2, [r7, #12]
 80104ac:	441a      	add	r2, r3
 80104ae:	69bb      	ldr	r3, [r7, #24]
 80104b0:	69f9      	ldr	r1, [r7, #28]
 80104b2:	fb01 f103 	mul.w	r1, r1, r3
 80104b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104b8:	440b      	add	r3, r1
 80104ba:	009b      	lsls	r3, r3, #2
 80104bc:	6939      	ldr	r1, [r7, #16]
 80104be:	440b      	add	r3, r1
 80104c0:	6812      	ldr	r2, [r2, #0]
 80104c2:	601a      	str	r2, [r3, #0]
    for (i = 0; i < rgroup * 2; i++) {
 80104c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104c6:	3301      	adds	r3, #1
 80104c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80104ca:	69bb      	ldr	r3, [r7, #24]
 80104cc:	005b      	lsls	r3, r3, #1
 80104ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104d0:	429a      	cmp	r2, r3
 80104d2:	dbcd      	blt.n	8010470 <make_funny_pointers+0xa8>
    /* The wraparound pointers at top and bottom will be filled later
     * (see set_wraparound_pointers, below).  Initially we want the "above"
     * pointers to duplicate the first actual data line.  This only needs
     * to happen in xbuffer[0].
     */
    for (i = 0; i < rgroup; i++) {
 80104d4:	2300      	movs	r3, #0
 80104d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80104d8:	e00b      	b.n	80104f2 <make_funny_pointers+0x12a>
      xbuf0[i - rgroup] = xbuf0[0];
 80104da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104dc:	69bb      	ldr	r3, [r7, #24]
 80104de:	1ad3      	subs	r3, r2, r3
 80104e0:	009b      	lsls	r3, r3, #2
 80104e2:	697a      	ldr	r2, [r7, #20]
 80104e4:	4413      	add	r3, r2
 80104e6:	697a      	ldr	r2, [r7, #20]
 80104e8:	6812      	ldr	r2, [r2, #0]
 80104ea:	601a      	str	r2, [r3, #0]
    for (i = 0; i < rgroup; i++) {
 80104ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104ee:	3301      	adds	r3, #1
 80104f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80104f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104f4:	69bb      	ldr	r3, [r7, #24]
 80104f6:	429a      	cmp	r2, r3
 80104f8:	dbef      	blt.n	80104da <make_funny_pointers+0x112>
       ci++, compptr++) {
 80104fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104fc:	3301      	adds	r3, #1
 80104fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010502:	3358      	adds	r3, #88	; 0x58
 8010504:	627b      	str	r3, [r7, #36]	; 0x24
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801050a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801050c:	429a      	cmp	r2, r3
 801050e:	f6ff af6e 	blt.w	80103ee <make_funny_pointers+0x26>
    }
  }
}
 8010512:	bf00      	nop
 8010514:	bf00      	nop
 8010516:	3734      	adds	r7, #52	; 0x34
 8010518:	46bd      	mov	sp, r7
 801051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051e:	4770      	bx	lr

08010520 <set_wraparound_pointers>:
LOCAL(void)
set_wraparound_pointers (j_decompress_ptr cinfo)
/* Set up the "wraparound" pointers at top and bottom of the pointer lists.
 * This changes the pointer list state from top-of-image to the normal state.
 */
{
 8010520:	b480      	push	{r7}
 8010522:	b08b      	sub	sp, #44	; 0x2c
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
  my_main_ptr main = (my_main_ptr) cinfo->main;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 801052e:	61bb      	str	r3, [r7, #24]
  int ci, i, rgroup;
  int M = cinfo->min_DCT_v_scaled_size;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8010536:	617b      	str	r3, [r7, #20]
  jpeg_component_info *compptr;
  JSAMPARRAY xbuf0, xbuf1;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8010538:	2300      	movs	r3, #0
 801053a:	627b      	str	r3, [r7, #36]	; 0x24
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010542:	61fb      	str	r3, [r7, #28]
 8010544:	e06d      	b.n	8010622 <set_wraparound_pointers+0x102>
       ci++, compptr++) {
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 8010546:	69fb      	ldr	r3, [r7, #28]
 8010548:	68db      	ldr	r3, [r3, #12]
 801054a:	69fa      	ldr	r2, [r7, #28]
 801054c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801054e:	fb02 f203 	mul.w	r2, r2, r3
      cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 8010558:	fb92 f3f3 	sdiv	r3, r2, r3
 801055c:	613b      	str	r3, [r7, #16]
    xbuf0 = main->xbuffer[0][ci];
 801055e:	69bb      	ldr	r3, [r7, #24]
 8010560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010564:	009b      	lsls	r3, r3, #2
 8010566:	4413      	add	r3, r2
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	60fb      	str	r3, [r7, #12]
    xbuf1 = main->xbuffer[1][ci];
 801056c:	69bb      	ldr	r3, [r7, #24]
 801056e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010572:	009b      	lsls	r3, r3, #2
 8010574:	4413      	add	r3, r2
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < rgroup; i++) {
 801057a:	2300      	movs	r3, #0
 801057c:	623b      	str	r3, [r7, #32]
 801057e:	e046      	b.n	801060e <set_wraparound_pointers+0xee>
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 8010580:	697b      	ldr	r3, [r7, #20]
 8010582:	3301      	adds	r3, #1
 8010584:	693a      	ldr	r2, [r7, #16]
 8010586:	fb02 f203 	mul.w	r2, r2, r3
 801058a:	6a3b      	ldr	r3, [r7, #32]
 801058c:	4413      	add	r3, r2
 801058e:	009b      	lsls	r3, r3, #2
 8010590:	68fa      	ldr	r2, [r7, #12]
 8010592:	441a      	add	r2, r3
 8010594:	6a39      	ldr	r1, [r7, #32]
 8010596:	693b      	ldr	r3, [r7, #16]
 8010598:	1acb      	subs	r3, r1, r3
 801059a:	009b      	lsls	r3, r3, #2
 801059c:	68f9      	ldr	r1, [r7, #12]
 801059e:	440b      	add	r3, r1
 80105a0:	6812      	ldr	r2, [r2, #0]
 80105a2:	601a      	str	r2, [r3, #0]
      xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
 80105a4:	697b      	ldr	r3, [r7, #20]
 80105a6:	3301      	adds	r3, #1
 80105a8:	693a      	ldr	r2, [r7, #16]
 80105aa:	fb02 f203 	mul.w	r2, r2, r3
 80105ae:	6a3b      	ldr	r3, [r7, #32]
 80105b0:	4413      	add	r3, r2
 80105b2:	009b      	lsls	r3, r3, #2
 80105b4:	68ba      	ldr	r2, [r7, #8]
 80105b6:	441a      	add	r2, r3
 80105b8:	6a39      	ldr	r1, [r7, #32]
 80105ba:	693b      	ldr	r3, [r7, #16]
 80105bc:	1acb      	subs	r3, r1, r3
 80105be:	009b      	lsls	r3, r3, #2
 80105c0:	68b9      	ldr	r1, [r7, #8]
 80105c2:	440b      	add	r3, r1
 80105c4:	6812      	ldr	r2, [r2, #0]
 80105c6:	601a      	str	r2, [r3, #0]
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 80105c8:	6a3b      	ldr	r3, [r7, #32]
 80105ca:	009b      	lsls	r3, r3, #2
 80105cc:	68fa      	ldr	r2, [r7, #12]
 80105ce:	441a      	add	r2, r3
 80105d0:	697b      	ldr	r3, [r7, #20]
 80105d2:	3302      	adds	r3, #2
 80105d4:	6939      	ldr	r1, [r7, #16]
 80105d6:	fb01 f103 	mul.w	r1, r1, r3
 80105da:	6a3b      	ldr	r3, [r7, #32]
 80105dc:	440b      	add	r3, r1
 80105de:	009b      	lsls	r3, r3, #2
 80105e0:	68f9      	ldr	r1, [r7, #12]
 80105e2:	440b      	add	r3, r1
 80105e4:	6812      	ldr	r2, [r2, #0]
 80105e6:	601a      	str	r2, [r3, #0]
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 80105e8:	6a3b      	ldr	r3, [r7, #32]
 80105ea:	009b      	lsls	r3, r3, #2
 80105ec:	68ba      	ldr	r2, [r7, #8]
 80105ee:	441a      	add	r2, r3
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	3302      	adds	r3, #2
 80105f4:	6939      	ldr	r1, [r7, #16]
 80105f6:	fb01 f103 	mul.w	r1, r1, r3
 80105fa:	6a3b      	ldr	r3, [r7, #32]
 80105fc:	440b      	add	r3, r1
 80105fe:	009b      	lsls	r3, r3, #2
 8010600:	68b9      	ldr	r1, [r7, #8]
 8010602:	440b      	add	r3, r1
 8010604:	6812      	ldr	r2, [r2, #0]
 8010606:	601a      	str	r2, [r3, #0]
    for (i = 0; i < rgroup; i++) {
 8010608:	6a3b      	ldr	r3, [r7, #32]
 801060a:	3301      	adds	r3, #1
 801060c:	623b      	str	r3, [r7, #32]
 801060e:	6a3a      	ldr	r2, [r7, #32]
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	429a      	cmp	r2, r3
 8010614:	dbb4      	blt.n	8010580 <set_wraparound_pointers+0x60>
       ci++, compptr++) {
 8010616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010618:	3301      	adds	r3, #1
 801061a:	627b      	str	r3, [r7, #36]	; 0x24
 801061c:	69fb      	ldr	r3, [r7, #28]
 801061e:	3358      	adds	r3, #88	; 0x58
 8010620:	61fb      	str	r3, [r7, #28]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010628:	429a      	cmp	r2, r3
 801062a:	db8c      	blt.n	8010546 <set_wraparound_pointers+0x26>
    }
  }
}
 801062c:	bf00      	nop
 801062e:	bf00      	nop
 8010630:	372c      	adds	r7, #44	; 0x2c
 8010632:	46bd      	mov	sp, r7
 8010634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010638:	4770      	bx	lr

0801063a <set_bottom_pointers>:
set_bottom_pointers (j_decompress_ptr cinfo)
/* Change the pointer lists to duplicate the last sample row at the bottom
 * of the image.  whichptr indicates which xbuffer holds the final iMCU row.
 * Also sets rowgroups_avail to indicate number of nondummy row groups in row.
 */
{
 801063a:	b480      	push	{r7}
 801063c:	b08b      	sub	sp, #44	; 0x2c
 801063e:	af00      	add	r7, sp, #0
 8010640:	6078      	str	r0, [r7, #4]
  my_main_ptr main = (my_main_ptr) cinfo->main;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8010648:	617b      	str	r3, [r7, #20]
  int ci, i, rgroup, iMCUheight, rows_left;
  jpeg_component_info *compptr;
  JSAMPARRAY xbuf;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 801064a:	2300      	movs	r3, #0
 801064c:	627b      	str	r3, [r7, #36]	; 0x24
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010654:	61bb      	str	r3, [r7, #24]
 8010656:	e052      	b.n	80106fe <set_bottom_pointers+0xc4>
       ci++, compptr++) {
    /* Count sample rows in one iMCU row and in one row group */
    iMCUheight = compptr->v_samp_factor * compptr->DCT_v_scaled_size;
 8010658:	69bb      	ldr	r3, [r7, #24]
 801065a:	68db      	ldr	r3, [r3, #12]
 801065c:	69ba      	ldr	r2, [r7, #24]
 801065e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8010660:	fb02 f303 	mul.w	r3, r2, r3
 8010664:	613b      	str	r3, [r7, #16]
    rgroup = iMCUheight / cinfo->min_DCT_v_scaled_size;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 801066c:	693a      	ldr	r2, [r7, #16]
 801066e:	fb92 f3f3 	sdiv	r3, r2, r3
 8010672:	60fb      	str	r3, [r7, #12]
    /* Count nondummy sample rows remaining for this component */
    rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
 8010674:	69bb      	ldr	r3, [r7, #24]
 8010676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010678:	693a      	ldr	r2, [r7, #16]
 801067a:	fbb3 f1f2 	udiv	r1, r3, r2
 801067e:	fb02 f201 	mul.w	r2, r2, r1
 8010682:	1a9b      	subs	r3, r3, r2
 8010684:	61fb      	str	r3, [r7, #28]
    if (rows_left == 0) rows_left = iMCUheight;
 8010686:	69fb      	ldr	r3, [r7, #28]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d101      	bne.n	8010690 <set_bottom_pointers+0x56>
 801068c:	693b      	ldr	r3, [r7, #16]
 801068e:	61fb      	str	r3, [r7, #28]
    /* Count nondummy row groups.  Should get same answer for each component,
     * so we need only do it once.
     */
    if (ci == 0) {
 8010690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010692:	2b00      	cmp	r3, #0
 8010694:	d108      	bne.n	80106a8 <set_bottom_pointers+0x6e>
      main->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
 8010696:	69fb      	ldr	r3, [r7, #28]
 8010698:	1e5a      	subs	r2, r3, #1
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	fb92 f3f3 	sdiv	r3, r2, r3
 80106a0:	3301      	adds	r3, #1
 80106a2:	461a      	mov	r2, r3
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Duplicate the last real sample row rgroup*2 times; this pads out the
     * last partial rowgroup and ensures at least one full rowgroup of context.
     */
    xbuf = main->xbuffer[main->whichptr][ci];
 80106a8:	697b      	ldr	r3, [r7, #20]
 80106aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80106ac:	697b      	ldr	r3, [r7, #20]
 80106ae:	320e      	adds	r2, #14
 80106b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80106b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b6:	009b      	lsls	r3, r3, #2
 80106b8:	4413      	add	r3, r2
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < rgroup * 2; i++) {
 80106be:	2300      	movs	r3, #0
 80106c0:	623b      	str	r3, [r7, #32]
 80106c2:	e011      	b.n	80106e8 <set_bottom_pointers+0xae>
      xbuf[rows_left + i] = xbuf[rows_left-1];
 80106c4:	69fb      	ldr	r3, [r7, #28]
 80106c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80106ca:	3b01      	subs	r3, #1
 80106cc:	009b      	lsls	r3, r3, #2
 80106ce:	68ba      	ldr	r2, [r7, #8]
 80106d0:	441a      	add	r2, r3
 80106d2:	69f9      	ldr	r1, [r7, #28]
 80106d4:	6a3b      	ldr	r3, [r7, #32]
 80106d6:	440b      	add	r3, r1
 80106d8:	009b      	lsls	r3, r3, #2
 80106da:	68b9      	ldr	r1, [r7, #8]
 80106dc:	440b      	add	r3, r1
 80106de:	6812      	ldr	r2, [r2, #0]
 80106e0:	601a      	str	r2, [r3, #0]
    for (i = 0; i < rgroup * 2; i++) {
 80106e2:	6a3b      	ldr	r3, [r7, #32]
 80106e4:	3301      	adds	r3, #1
 80106e6:	623b      	str	r3, [r7, #32]
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	005b      	lsls	r3, r3, #1
 80106ec:	6a3a      	ldr	r2, [r7, #32]
 80106ee:	429a      	cmp	r2, r3
 80106f0:	dbe8      	blt.n	80106c4 <set_bottom_pointers+0x8a>
       ci++, compptr++) {
 80106f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106f4:	3301      	adds	r3, #1
 80106f6:	627b      	str	r3, [r7, #36]	; 0x24
 80106f8:	69bb      	ldr	r3, [r7, #24]
 80106fa:	3358      	adds	r3, #88	; 0x58
 80106fc:	61bb      	str	r3, [r7, #24]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010704:	429a      	cmp	r2, r3
 8010706:	dba7      	blt.n	8010658 <set_bottom_pointers+0x1e>
    }
  }
}
 8010708:	bf00      	nop
 801070a:	bf00      	nop
 801070c:	372c      	adds	r7, #44	; 0x2c
 801070e:	46bd      	mov	sp, r7
 8010710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010714:	4770      	bx	lr
	...

08010718 <start_pass_main>:
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_main (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b084      	sub	sp, #16
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
 8010720:	460b      	mov	r3, r1
 8010722:	70fb      	strb	r3, [r7, #3]
  my_main_ptr main = (my_main_ptr) cinfo->main;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 801072a:	60fb      	str	r3, [r7, #12]

  switch (pass_mode) {
 801072c:	78fb      	ldrb	r3, [r7, #3]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d002      	beq.n	8010738 <start_pass_main+0x20>
 8010732:	2b02      	cmp	r3, #2
 8010734:	d020      	beq.n	8010778 <start_pass_main+0x60>
 8010736:	e023      	b.n	8010780 <start_pass_main+0x68>
  case JBUF_PASS_THRU:
    if (cinfo->upsample->need_context_rows) {
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 801073e:	689b      	ldr	r3, [r3, #8]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d00f      	beq.n	8010764 <start_pass_main+0x4c>
      main->pub.process_data = process_data_context_main;
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	4a15      	ldr	r2, [pc, #84]	; (801079c <start_pass_main+0x84>)
 8010748:	605a      	str	r2, [r3, #4]
      make_funny_pointers(cinfo); /* Create the xbuffer[] lists */
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f7ff fe3c 	bl	80103c8 <make_funny_pointers>
      main->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	2200      	movs	r2, #0
 8010754:	641a      	str	r2, [r3, #64]	; 0x40
      main->context_state = CTX_PREPARE_FOR_IMCU;
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	2200      	movs	r2, #0
 801075a:	645a      	str	r2, [r3, #68]	; 0x44
      main->iMCU_row_ctr = 0;
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	2200      	movs	r2, #0
 8010760:	64da      	str	r2, [r3, #76]	; 0x4c
 8010762:	e002      	b.n	801076a <start_pass_main+0x52>
    } else {
      /* Simple case with no context needed */
      main->pub.process_data = process_data_simple_main;
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	4a0e      	ldr	r2, [pc, #56]	; (80107a0 <start_pass_main+0x88>)
 8010768:	605a      	str	r2, [r3, #4]
    }
    main->buffer_full = FALSE;	/* Mark buffer empty */
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	2200      	movs	r2, #0
 801076e:	631a      	str	r2, [r3, #48]	; 0x30
    main->rowgroup_ctr = 0;
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	2200      	movs	r2, #0
 8010774:	635a      	str	r2, [r3, #52]	; 0x34
    break;
 8010776:	e00d      	b.n	8010794 <start_pass_main+0x7c>
#ifdef QUANT_2PASS_SUPPORTED
  case JBUF_CRANK_DEST:
    /* For last pass of 2-pass quantization, just crank the postprocessor */
    main->pub.process_data = process_data_crank_post;
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	4a0a      	ldr	r2, [pc, #40]	; (80107a4 <start_pass_main+0x8c>)
 801077c:	605a      	str	r2, [r3, #4]
    break;
 801077e:	e009      	b.n	8010794 <start_pass_main+0x7c>
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	2203      	movs	r2, #3
 8010786:	615a      	str	r2, [r3, #20]
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	4798      	blx	r3
    break;
 8010792:	bf00      	nop
  }
}
 8010794:	bf00      	nop
 8010796:	3710      	adds	r7, #16
 8010798:	46bd      	mov	sp, r7
 801079a:	bd80      	pop	{r7, pc}
 801079c:	08010833 	.word	0x08010833
 80107a0:	080107a9 	.word	0x080107a9
 80107a4:	080109a9 	.word	0x080109a9

080107a8 <process_data_simple_main>:

METHODDEF(void)
process_data_simple_main (j_decompress_ptr cinfo,
			  JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			  JDIMENSION out_rows_avail)
{
 80107a8:	b590      	push	{r4, r7, lr}
 80107aa:	b08b      	sub	sp, #44	; 0x2c
 80107ac:	af04      	add	r7, sp, #16
 80107ae:	60f8      	str	r0, [r7, #12]
 80107b0:	60b9      	str	r1, [r7, #8]
 80107b2:	607a      	str	r2, [r7, #4]
 80107b4:	603b      	str	r3, [r7, #0]
  my_main_ptr main = (my_main_ptr) cinfo->main;
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80107bc:	617b      	str	r3, [r7, #20]
  JDIMENSION rowgroups_avail;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 80107be:	697b      	ldr	r3, [r7, #20]
 80107c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d10e      	bne.n	80107e4 <process_data_simple_main+0x3c>
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80107cc:	68db      	ldr	r3, [r3, #12]
 80107ce:	697a      	ldr	r2, [r7, #20]
 80107d0:	3208      	adds	r2, #8
 80107d2:	4611      	mov	r1, r2
 80107d4:	68f8      	ldr	r0, [r7, #12]
 80107d6:	4798      	blx	r3
 80107d8:	4603      	mov	r3, r0
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d025      	beq.n	801082a <process_data_simple_main+0x82>
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 80107de:	697b      	ldr	r3, [r7, #20]
 80107e0:	2201      	movs	r2, #1
 80107e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* There are always min_DCT_scaled_size row groups in an iMCU row. */
  rowgroups_avail = (JDIMENSION) cinfo->min_DCT_v_scaled_size;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80107ea:	613b      	str	r3, [r7, #16]
   * to the postprocessor.  The postprocessor has to check for bottom
   * of image anyway (at row resolution), so no point in us doing it too.
   */

  /* Feed the postprocessor */
  (*cinfo->post->post_process_data) (cinfo, main->buffer,
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80107f2:	685c      	ldr	r4, [r3, #4]
 80107f4:	697b      	ldr	r3, [r7, #20]
 80107f6:	f103 0108 	add.w	r1, r3, #8
 80107fa:	697b      	ldr	r3, [r7, #20]
 80107fc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	9302      	str	r3, [sp, #8]
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	9301      	str	r3, [sp, #4]
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	9300      	str	r3, [sp, #0]
 801080c:	693b      	ldr	r3, [r7, #16]
 801080e:	68f8      	ldr	r0, [r7, #12]
 8010810:	47a0      	blx	r4
				     &main->rowgroup_ctr, rowgroups_avail,
				     output_buf, out_row_ctr, out_rows_avail);

  /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
  if (main->rowgroup_ctr >= rowgroups_avail) {
 8010812:	697b      	ldr	r3, [r7, #20]
 8010814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010816:	693a      	ldr	r2, [r7, #16]
 8010818:	429a      	cmp	r2, r3
 801081a:	d807      	bhi.n	801082c <process_data_simple_main+0x84>
    main->buffer_full = FALSE;
 801081c:	697b      	ldr	r3, [r7, #20]
 801081e:	2200      	movs	r2, #0
 8010820:	631a      	str	r2, [r3, #48]	; 0x30
    main->rowgroup_ctr = 0;
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	2200      	movs	r2, #0
 8010826:	635a      	str	r2, [r3, #52]	; 0x34
 8010828:	e000      	b.n	801082c <process_data_simple_main+0x84>
      return;			/* suspension forced, can do nothing more */
 801082a:	bf00      	nop
  }
}
 801082c:	371c      	adds	r7, #28
 801082e:	46bd      	mov	sp, r7
 8010830:	bd90      	pop	{r4, r7, pc}

08010832 <process_data_context_main>:

METHODDEF(void)
process_data_context_main (j_decompress_ptr cinfo,
			   JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail)
{
 8010832:	b590      	push	{r4, r7, lr}
 8010834:	b08b      	sub	sp, #44	; 0x2c
 8010836:	af04      	add	r7, sp, #16
 8010838:	60f8      	str	r0, [r7, #12]
 801083a:	60b9      	str	r1, [r7, #8]
 801083c:	607a      	str	r2, [r7, #4]
 801083e:	603b      	str	r3, [r7, #0]
  my_main_ptr main = (my_main_ptr) cinfo->main;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8010846:	617b      	str	r3, [r7, #20]

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 8010848:	697b      	ldr	r3, [r7, #20]
 801084a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801084c:	2b00      	cmp	r3, #0
 801084e:	d118      	bne.n	8010882 <process_data_context_main+0x50>
    if (! (*cinfo->coef->decompress_data) (cinfo,
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8010856:	68db      	ldr	r3, [r3, #12]
					   main->xbuffer[main->whichptr]))
 8010858:	697a      	ldr	r2, [r7, #20]
 801085a:	6c11      	ldr	r1, [r2, #64]	; 0x40
    if (! (*cinfo->coef->decompress_data) (cinfo,
 801085c:	697a      	ldr	r2, [r7, #20]
 801085e:	310e      	adds	r1, #14
 8010860:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8010864:	4611      	mov	r1, r2
 8010866:	68f8      	ldr	r0, [r7, #12]
 8010868:	4798      	blx	r3
 801086a:	4603      	mov	r3, r0
 801086c:	2b00      	cmp	r3, #0
 801086e:	f000 8091 	beq.w	8010994 <process_data_context_main+0x162>
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 8010872:	697b      	ldr	r3, [r7, #20]
 8010874:	2201      	movs	r2, #1
 8010876:	631a      	str	r2, [r3, #48]	; 0x30
    main->iMCU_row_ctr++;	/* count rows received */
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801087c:	1c5a      	adds	r2, r3, #1
 801087e:	697b      	ldr	r3, [r7, #20]
 8010880:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Postprocessor typically will not swallow all the input data it is handed
   * in one call (due to filling the output buffer first).  Must be prepared
   * to exit and restart.  This switch lets us keep track of how far we got.
   * Note that each case falls through to the next on successful completion.
   */
  switch (main->context_state) {
 8010882:	697b      	ldr	r3, [r7, #20]
 8010884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010886:	2b02      	cmp	r3, #2
 8010888:	d007      	beq.n	801089a <process_data_context_main+0x68>
 801088a:	2b02      	cmp	r3, #2
 801088c:	f300 8089 	bgt.w	80109a2 <process_data_context_main+0x170>
 8010890:	2b00      	cmp	r3, #0
 8010892:	d028      	beq.n	80108e6 <process_data_context_main+0xb4>
 8010894:	2b01      	cmp	r3, #1
 8010896:	d03d      	beq.n	8010914 <process_data_context_main+0xe2>
 8010898:	e083      	b.n	80109a2 <process_data_context_main+0x170>
  case CTX_POSTPONED_ROW:
    /* Call postprocessor using previously set pointers for postponed row */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80108a0:	685c      	ldr	r4, [r3, #4]
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80108a6:	697b      	ldr	r3, [r7, #20]
 80108a8:	320e      	adds	r2, #14
 80108aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80108ae:	697b      	ldr	r3, [r7, #20]
 80108b0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80108b4:	697b      	ldr	r3, [r7, #20]
 80108b6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	9302      	str	r3, [sp, #8]
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	9301      	str	r3, [sp, #4]
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	9300      	str	r3, [sp, #0]
 80108c4:	4603      	mov	r3, r0
 80108c6:	68f8      	ldr	r0, [r7, #12]
 80108c8:	47a0      	blx	r4
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
 80108ca:	697b      	ldr	r3, [r7, #20]
 80108cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80108ce:	697b      	ldr	r3, [r7, #20]
 80108d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80108d2:	429a      	cmp	r2, r3
 80108d4:	d360      	bcc.n	8010998 <process_data_context_main+0x166>
      return;			/* Need to suspend */
    main->context_state = CTX_PREPARE_FOR_IMCU;
 80108d6:	697b      	ldr	r3, [r7, #20]
 80108d8:	2200      	movs	r2, #0
 80108da:	645a      	str	r2, [r3, #68]	; 0x44
    if (*out_row_ctr >= out_rows_avail)
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	683a      	ldr	r2, [r7, #0]
 80108e2:	429a      	cmp	r2, r3
 80108e4:	d95a      	bls.n	801099c <process_data_context_main+0x16a>
      return;			/* Postprocessor exactly filled output buf */
    /*FALLTHROUGH*/
  case CTX_PREPARE_FOR_IMCU:
    /* Prepare to process first M-1 row groups of this iMCU row */
    main->rowgroup_ctr = 0;
 80108e6:	697b      	ldr	r3, [r7, #20]
 80108e8:	2200      	movs	r2, #0
 80108ea:	635a      	str	r2, [r3, #52]	; 0x34
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80108f2:	3b01      	subs	r3, #1
 80108f4:	461a      	mov	r2, r3
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Check for bottom of image: if so, tweak pointers to "duplicate"
     * the last sample row, and adjust rowgroups_avail to ignore padding rows.
     */
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 80108fa:	697b      	ldr	r3, [r7, #20]
 80108fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8010904:	429a      	cmp	r2, r3
 8010906:	d102      	bne.n	801090e <process_data_context_main+0xdc>
      set_bottom_pointers(cinfo);
 8010908:	68f8      	ldr	r0, [r7, #12]
 801090a:	f7ff fe96 	bl	801063a <set_bottom_pointers>
    main->context_state = CTX_PROCESS_IMCU;
 801090e:	697b      	ldr	r3, [r7, #20]
 8010910:	2201      	movs	r2, #1
 8010912:	645a      	str	r2, [r3, #68]	; 0x44
    /*FALLTHROUGH*/
  case CTX_PROCESS_IMCU:
    /* Call postprocessor using previously set pointers */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 801091a:	685c      	ldr	r4, [r3, #4]
 801091c:	697b      	ldr	r3, [r7, #20]
 801091e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010920:	697b      	ldr	r3, [r7, #20]
 8010922:	320e      	adds	r2, #14
 8010924:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010928:	697b      	ldr	r3, [r7, #20]
 801092a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801092e:	697b      	ldr	r3, [r7, #20]
 8010930:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8010932:	683b      	ldr	r3, [r7, #0]
 8010934:	9302      	str	r3, [sp, #8]
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	9301      	str	r3, [sp, #4]
 801093a:	68bb      	ldr	r3, [r7, #8]
 801093c:	9300      	str	r3, [sp, #0]
 801093e:	4603      	mov	r3, r0
 8010940:	68f8      	ldr	r0, [r7, #12]
 8010942:	47a0      	blx	r4
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801094c:	429a      	cmp	r2, r3
 801094e:	d327      	bcc.n	80109a0 <process_data_context_main+0x16e>
      return;			/* Need to suspend */
    /* After the first iMCU, change wraparound pointers to normal state */
    if (main->iMCU_row_ctr == 1)
 8010950:	697b      	ldr	r3, [r7, #20]
 8010952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010954:	2b01      	cmp	r3, #1
 8010956:	d102      	bne.n	801095e <process_data_context_main+0x12c>
      set_wraparound_pointers(cinfo);
 8010958:	68f8      	ldr	r0, [r7, #12]
 801095a:	f7ff fde1 	bl	8010520 <set_wraparound_pointers>
    /* Prepare to load new iMCU row using other xbuffer list */
    main->whichptr ^= 1;	/* 0=>1 or 1=>0 */
 801095e:	697b      	ldr	r3, [r7, #20]
 8010960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010962:	f083 0201 	eor.w	r2, r3, #1
 8010966:	697b      	ldr	r3, [r7, #20]
 8010968:	641a      	str	r2, [r3, #64]	; 0x40
    main->buffer_full = FALSE;
 801096a:	697b      	ldr	r3, [r7, #20]
 801096c:	2200      	movs	r2, #0
 801096e:	631a      	str	r2, [r3, #48]	; 0x30
    /* Still need to process last row group of this iMCU row, */
    /* which is saved at index M+1 of the other xbuffer */
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8010976:	3301      	adds	r3, #1
 8010978:	461a      	mov	r2, r3
 801097a:	697b      	ldr	r3, [r7, #20]
 801097c:	635a      	str	r2, [r3, #52]	; 0x34
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8010984:	3302      	adds	r3, #2
 8010986:	461a      	mov	r2, r3
 8010988:	697b      	ldr	r3, [r7, #20]
 801098a:	649a      	str	r2, [r3, #72]	; 0x48
    main->context_state = CTX_POSTPONED_ROW;
 801098c:	697b      	ldr	r3, [r7, #20]
 801098e:	2202      	movs	r2, #2
 8010990:	645a      	str	r2, [r3, #68]	; 0x44
 8010992:	e006      	b.n	80109a2 <process_data_context_main+0x170>
      return;			/* suspension forced, can do nothing more */
 8010994:	bf00      	nop
 8010996:	e004      	b.n	80109a2 <process_data_context_main+0x170>
      return;			/* Need to suspend */
 8010998:	bf00      	nop
 801099a:	e002      	b.n	80109a2 <process_data_context_main+0x170>
      return;			/* Postprocessor exactly filled output buf */
 801099c:	bf00      	nop
 801099e:	e000      	b.n	80109a2 <process_data_context_main+0x170>
      return;			/* Need to suspend */
 80109a0:	bf00      	nop
  }
}
 80109a2:	371c      	adds	r7, #28
 80109a4:	46bd      	mov	sp, r7
 80109a6:	bd90      	pop	{r4, r7, pc}

080109a8 <process_data_crank_post>:

METHODDEF(void)
process_data_crank_post (j_decompress_ptr cinfo,
			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			 JDIMENSION out_rows_avail)
{
 80109a8:	b590      	push	{r4, r7, lr}
 80109aa:	b089      	sub	sp, #36	; 0x24
 80109ac:	af04      	add	r7, sp, #16
 80109ae:	60f8      	str	r0, [r7, #12]
 80109b0:	60b9      	str	r1, [r7, #8]
 80109b2:	607a      	str	r2, [r7, #4]
 80109b4:	603b      	str	r3, [r7, #0]
  (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80109bc:	685c      	ldr	r4, [r3, #4]
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	9302      	str	r3, [sp, #8]
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	9301      	str	r3, [sp, #4]
 80109c6:	68bb      	ldr	r3, [r7, #8]
 80109c8:	9300      	str	r3, [sp, #0]
 80109ca:	2300      	movs	r3, #0
 80109cc:	2200      	movs	r2, #0
 80109ce:	2100      	movs	r1, #0
 80109d0:	68f8      	ldr	r0, [r7, #12]
 80109d2:	47a0      	blx	r4
				     (JDIMENSION *) NULL, (JDIMENSION) 0,
				     output_buf, out_row_ctr, out_rows_avail);
}
 80109d4:	bf00      	nop
 80109d6:	3714      	adds	r7, #20
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd90      	pop	{r4, r7, pc}

080109dc <jinit_d_main_controller>:
 * Initialize main buffer controller.
 */

GLOBAL(void)
jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 80109dc:	b590      	push	{r4, r7, lr}
 80109de:	b089      	sub	sp, #36	; 0x24
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
 80109e4:	6039      	str	r1, [r7, #0]
  my_main_ptr main;
  int ci, rgroup, ngroups;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	685b      	ldr	r3, [r3, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	2250      	movs	r2, #80	; 0x50
 80109ee:	2101      	movs	r1, #1
 80109f0:	6878      	ldr	r0, [r7, #4]
 80109f2:	4798      	blx	r3
 80109f4:	6138      	str	r0, [r7, #16]
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_d_main_controller *) main;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	693a      	ldr	r2, [r7, #16]
 80109fa:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
  main->pub.start_pass = start_pass_main;
 80109fe:	693b      	ldr	r3, [r7, #16]
 8010a00:	4a34      	ldr	r2, [pc, #208]	; (8010ad4 <jinit_d_main_controller+0xf8>)
 8010a02:	601a      	str	r2, [r3, #0]

  if (need_full_buffer)		/* shouldn't happen */
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d008      	beq.n	8010a1c <jinit_d_main_controller+0x40>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	2203      	movs	r2, #3
 8010a10:	615a      	str	r2, [r3, #20]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	6878      	ldr	r0, [r7, #4]
 8010a1a:	4798      	blx	r3

  /* Allocate the workspace.
   * ngroups is the number of row groups we need.
   */
  if (cinfo->upsample->need_context_rows) {
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8010a22:	689b      	ldr	r3, [r3, #8]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d016      	beq.n	8010a56 <jinit_d_main_controller+0x7a>
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8010a2e:	2b01      	cmp	r3, #1
 8010a30:	dc08      	bgt.n	8010a44 <jinit_d_main_controller+0x68>
      ERREXIT(cinfo, JERR_NOTIMPL);
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	2230      	movs	r2, #48	; 0x30
 8010a38:	615a      	str	r2, [r3, #20]
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	4798      	blx	r3
    alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
 8010a44:	6878      	ldr	r0, [r7, #4]
 8010a46:	f7ff fc53 	bl	80102f0 <alloc_funny_pointers>
    ngroups = cinfo->min_DCT_v_scaled_size + 2;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8010a50:	3302      	adds	r3, #2
 8010a52:	61bb      	str	r3, [r7, #24]
 8010a54:	e003      	b.n	8010a5e <jinit_d_main_controller+0x82>
  } else {
    ngroups = cinfo->min_DCT_v_scaled_size;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8010a5c:	61bb      	str	r3, [r7, #24]
  }

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8010a5e:	2300      	movs	r3, #0
 8010a60:	61fb      	str	r3, [r7, #28]
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010a68:	617b      	str	r3, [r7, #20]
 8010a6a:	e028      	b.n	8010abe <jinit_d_main_controller+0xe2>
       ci++, compptr++) {
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 8010a6c:	697b      	ldr	r3, [r7, #20]
 8010a6e:	68db      	ldr	r3, [r3, #12]
 8010a70:	697a      	ldr	r2, [r7, #20]
 8010a72:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8010a74:	fb02 f203 	mul.w	r2, r2, r3
      cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 8010a7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8010a82:	60fb      	str	r3, [r7, #12]
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	685b      	ldr	r3, [r3, #4]
 8010a88:	689c      	ldr	r4, [r3, #8]
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 compptr->width_in_blocks * compptr->DCT_h_scaled_size,
 8010a8a:	697b      	ldr	r3, [r7, #20]
 8010a8c:	69db      	ldr	r3, [r3, #28]
 8010a8e:	697a      	ldr	r2, [r7, #20]
 8010a90:	6a52      	ldr	r2, [r2, #36]	; 0x24
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 8010a92:	fb02 f103 	mul.w	r1, r2, r3
			 (JDIMENSION) (rgroup * ngroups));
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	69ba      	ldr	r2, [r7, #24]
 8010a9a:	fb02 f303 	mul.w	r3, r2, r3
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 8010a9e:	460a      	mov	r2, r1
 8010aa0:	2101      	movs	r1, #1
 8010aa2:	6878      	ldr	r0, [r7, #4]
 8010aa4:	47a0      	blx	r4
 8010aa6:	4601      	mov	r1, r0
 8010aa8:	693b      	ldr	r3, [r7, #16]
 8010aaa:	69fa      	ldr	r2, [r7, #28]
 8010aac:	3202      	adds	r2, #2
 8010aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
       ci++, compptr++) {
 8010ab2:	69fb      	ldr	r3, [r7, #28]
 8010ab4:	3301      	adds	r3, #1
 8010ab6:	61fb      	str	r3, [r7, #28]
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	3358      	adds	r3, #88	; 0x58
 8010abc:	617b      	str	r3, [r7, #20]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ac2:	69fa      	ldr	r2, [r7, #28]
 8010ac4:	429a      	cmp	r2, r3
 8010ac6:	dbd1      	blt.n	8010a6c <jinit_d_main_controller+0x90>
  }
}
 8010ac8:	bf00      	nop
 8010aca:	bf00      	nop
 8010acc:	3724      	adds	r7, #36	; 0x24
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd90      	pop	{r4, r7, pc}
 8010ad2:	bf00      	nop
 8010ad4:	08010719 	.word	0x08010719

08010ad8 <get_soi>:


LOCAL(boolean)
get_soi (j_decompress_ptr cinfo)
/* Process an SOI marker */
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b084      	sub	sp, #16
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
  int i;
  
  TRACEMS(cinfo, 1, JTRC_SOI);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	2268      	movs	r2, #104	; 0x68
 8010ae6:	615a      	str	r2, [r3, #20]
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	685b      	ldr	r3, [r3, #4]
 8010aee:	2101      	movs	r1, #1
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	4798      	blx	r3

  if (cinfo->marker->saw_SOI)
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8010afa:	68db      	ldr	r3, [r3, #12]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d008      	beq.n	8010b12 <get_soi+0x3a>
    ERREXIT(cinfo, JERR_SOI_DUPLICATE);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	223f      	movs	r2, #63	; 0x3f
 8010b06:	615a      	str	r2, [r3, #20]
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	4798      	blx	r3

  /* Reset all parameters that are defined to be reset by SOI */

  for (i = 0; i < NUM_ARITH_TBLS; i++) {
 8010b12:	2300      	movs	r3, #0
 8010b14:	60fb      	str	r3, [r7, #12]
 8010b16:	e015      	b.n	8010b44 <get_soi+0x6c>
    cinfo->arith_dc_L[i] = 0;
 8010b18:	687a      	ldr	r2, [r7, #4]
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	4413      	add	r3, r2
 8010b1e:	33e8      	adds	r3, #232	; 0xe8
 8010b20:	2200      	movs	r2, #0
 8010b22:	701a      	strb	r2, [r3, #0]
    cinfo->arith_dc_U[i] = 1;
 8010b24:	687a      	ldr	r2, [r7, #4]
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	4413      	add	r3, r2
 8010b2a:	33f8      	adds	r3, #248	; 0xf8
 8010b2c:	2201      	movs	r2, #1
 8010b2e:	701a      	strb	r2, [r3, #0]
    cinfo->arith_ac_K[i] = 5;
 8010b30:	687a      	ldr	r2, [r7, #4]
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	4413      	add	r3, r2
 8010b36:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8010b3a:	2205      	movs	r2, #5
 8010b3c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	3301      	adds	r3, #1
 8010b42:	60fb      	str	r3, [r7, #12]
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	2b0f      	cmp	r3, #15
 8010b48:	dde6      	ble.n	8010b18 <get_soi+0x40>
  }
  cinfo->restart_interval = 0;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

  /* Set initial assumptions for colorspace etc */

  cinfo->jpeg_color_space = JCS_UNKNOWN;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	2200      	movs	r2, #0
 8010b56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

  cinfo->saw_JFIF_marker = FALSE;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2200      	movs	r2, #0
 8010b66:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	2201      	movs	r2, #1
 8010b6e:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
  cinfo->JFIF_minor_version = 1;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2201      	movs	r2, #1
 8010b76:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
  cinfo->density_unit = 0;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
  cinfo->X_density = 1;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	2201      	movs	r2, #1
 8010b86:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
  cinfo->Y_density = 1;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	2201      	movs	r2, #1
 8010b8e:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
  cinfo->saw_Adobe_marker = FALSE;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2200      	movs	r2, #0
 8010b96:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
  cinfo->Adobe_transform = 0;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c

  cinfo->marker->saw_SOI = TRUE;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8010ba8:	2201      	movs	r2, #1
 8010baa:	60da      	str	r2, [r3, #12]

  return TRUE;
 8010bac:	2301      	movs	r3, #1
}
 8010bae:	4618      	mov	r0, r3
 8010bb0:	3710      	adds	r7, #16
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bd80      	pop	{r7, pc}

08010bb6 <get_sof>:

LOCAL(boolean)
get_sof (j_decompress_ptr cinfo, boolean is_baseline, boolean is_prog,
	 boolean is_arith)
/* Process a SOFn marker */
{
 8010bb6:	b580      	push	{r7, lr}
 8010bb8:	b08e      	sub	sp, #56	; 0x38
 8010bba:	af00      	add	r7, sp, #0
 8010bbc:	60f8      	str	r0, [r7, #12]
 8010bbe:	60b9      	str	r1, [r7, #8]
 8010bc0:	607a      	str	r2, [r7, #4]
 8010bc2:	603b      	str	r3, [r7, #0]
  INT32 length;
  int c, ci;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	699b      	ldr	r3, [r3, #24]
 8010bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8010bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bd2:	685b      	ldr	r3, [r3, #4]
 8010bd4:	62bb      	str	r3, [r7, #40]	; 0x28

  cinfo->is_baseline = is_baseline;
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	68ba      	ldr	r2, [r7, #8]
 8010bda:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  cinfo->progressive_mode = is_prog;
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	687a      	ldr	r2, [r7, #4]
 8010be2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  cinfo->arith_code = is_arith;
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	683a      	ldr	r2, [r7, #0]
 8010bea:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

  INPUT_2BYTES(cinfo, length, return FALSE);
 8010bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d10e      	bne.n	8010c12 <get_sof+0x5c>
 8010bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf6:	68db      	ldr	r3, [r3, #12]
 8010bf8:	68f8      	ldr	r0, [r7, #12]
 8010bfa:	4798      	blx	r3
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d101      	bne.n	8010c06 <get_sof+0x50>
 8010c02:	2300      	movs	r3, #0
 8010c04:	e1e7      	b.n	8010fd6 <get_sof+0x420>
 8010c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c0e:	685b      	ldr	r3, [r3, #4]
 8010c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c14:	3b01      	subs	r3, #1
 8010c16:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c1a:	1c5a      	adds	r2, r3, #1
 8010c1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010c1e:	781b      	ldrb	r3, [r3, #0]
 8010c20:	021b      	lsls	r3, r3, #8
 8010c22:	623b      	str	r3, [r7, #32]
 8010c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d10e      	bne.n	8010c48 <get_sof+0x92>
 8010c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c2c:	68db      	ldr	r3, [r3, #12]
 8010c2e:	68f8      	ldr	r0, [r7, #12]
 8010c30:	4798      	blx	r3
 8010c32:	4603      	mov	r3, r0
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d101      	bne.n	8010c3c <get_sof+0x86>
 8010c38:	2300      	movs	r3, #0
 8010c3a:	e1cc      	b.n	8010fd6 <get_sof+0x420>
 8010c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c44:	685b      	ldr	r3, [r3, #4]
 8010c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c4a:	3b01      	subs	r3, #1
 8010c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c50:	1c5a      	adds	r2, r3, #1
 8010c52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010c54:	781b      	ldrb	r3, [r3, #0]
 8010c56:	461a      	mov	r2, r3
 8010c58:	6a3b      	ldr	r3, [r7, #32]
 8010c5a:	4413      	add	r3, r2
 8010c5c:	623b      	str	r3, [r7, #32]

  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 8010c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d10e      	bne.n	8010c82 <get_sof+0xcc>
 8010c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c66:	68db      	ldr	r3, [r3, #12]
 8010c68:	68f8      	ldr	r0, [r7, #12]
 8010c6a:	4798      	blx	r3
 8010c6c:	4603      	mov	r3, r0
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d101      	bne.n	8010c76 <get_sof+0xc0>
 8010c72:	2300      	movs	r3, #0
 8010c74:	e1af      	b.n	8010fd6 <get_sof+0x420>
 8010c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c7e:	685b      	ldr	r3, [r3, #4]
 8010c80:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c84:	3b01      	subs	r3, #1
 8010c86:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c8a:	1c5a      	adds	r2, r3, #1
 8010c8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010c8e:	781b      	ldrb	r3, [r3, #0]
 8010c90:	461a      	mov	r2, r3
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 8010c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d10e      	bne.n	8010cbc <get_sof+0x106>
 8010c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca0:	68db      	ldr	r3, [r3, #12]
 8010ca2:	68f8      	ldr	r0, [r7, #12]
 8010ca4:	4798      	blx	r3
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d101      	bne.n	8010cb0 <get_sof+0xfa>
 8010cac:	2300      	movs	r3, #0
 8010cae:	e192      	b.n	8010fd6 <get_sof+0x420>
 8010cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb8:	685b      	ldr	r3, [r3, #4]
 8010cba:	62bb      	str	r3, [r7, #40]	; 0x28
 8010cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cbe:	3b01      	subs	r3, #1
 8010cc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8010cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cc4:	1c5a      	adds	r2, r3, #1
 8010cc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010cc8:	781b      	ldrb	r3, [r3, #0]
 8010cca:	021a      	lsls	r2, r3, #8
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	621a      	str	r2, [r3, #32]
 8010cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d10e      	bne.n	8010cf4 <get_sof+0x13e>
 8010cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd8:	68db      	ldr	r3, [r3, #12]
 8010cda:	68f8      	ldr	r0, [r7, #12]
 8010cdc:	4798      	blx	r3
 8010cde:	4603      	mov	r3, r0
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d101      	bne.n	8010ce8 <get_sof+0x132>
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	e176      	b.n	8010fd6 <get_sof+0x420>
 8010ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf0:	685b      	ldr	r3, [r3, #4]
 8010cf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8010cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf6:	3b01      	subs	r3, #1
 8010cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8010cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cfc:	1c5a      	adds	r2, r3, #1
 8010cfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010d00:	781a      	ldrb	r2, [r3, #0]
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	6a1b      	ldr	r3, [r3, #32]
 8010d06:	441a      	add	r2, r3
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	621a      	str	r2, [r3, #32]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 8010d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d10e      	bne.n	8010d30 <get_sof+0x17a>
 8010d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d14:	68db      	ldr	r3, [r3, #12]
 8010d16:	68f8      	ldr	r0, [r7, #12]
 8010d18:	4798      	blx	r3
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d101      	bne.n	8010d24 <get_sof+0x16e>
 8010d20:	2300      	movs	r3, #0
 8010d22:	e158      	b.n	8010fd6 <get_sof+0x420>
 8010d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d2c:	685b      	ldr	r3, [r3, #4]
 8010d2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d32:	3b01      	subs	r3, #1
 8010d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d38:	1c5a      	adds	r2, r3, #1
 8010d3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010d3c:	781b      	ldrb	r3, [r3, #0]
 8010d3e:	021a      	lsls	r2, r3, #8
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	61da      	str	r2, [r3, #28]
 8010d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d10e      	bne.n	8010d68 <get_sof+0x1b2>
 8010d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d4c:	68db      	ldr	r3, [r3, #12]
 8010d4e:	68f8      	ldr	r0, [r7, #12]
 8010d50:	4798      	blx	r3
 8010d52:	4603      	mov	r3, r0
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d101      	bne.n	8010d5c <get_sof+0x1a6>
 8010d58:	2300      	movs	r3, #0
 8010d5a:	e13c      	b.n	8010fd6 <get_sof+0x420>
 8010d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d64:	685b      	ldr	r3, [r3, #4]
 8010d66:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d6a:	3b01      	subs	r3, #1
 8010d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d70:	1c5a      	adds	r2, r3, #1
 8010d72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010d74:	781a      	ldrb	r2, [r3, #0]
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	69db      	ldr	r3, [r3, #28]
 8010d7a:	441a      	add	r2, r3
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	61da      	str	r2, [r3, #28]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 8010d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d10e      	bne.n	8010da4 <get_sof+0x1ee>
 8010d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d88:	68db      	ldr	r3, [r3, #12]
 8010d8a:	68f8      	ldr	r0, [r7, #12]
 8010d8c:	4798      	blx	r3
 8010d8e:	4603      	mov	r3, r0
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d101      	bne.n	8010d98 <get_sof+0x1e2>
 8010d94:	2300      	movs	r3, #0
 8010d96:	e11e      	b.n	8010fd6 <get_sof+0x420>
 8010d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da0:	685b      	ldr	r3, [r3, #4]
 8010da2:	62bb      	str	r3, [r7, #40]	; 0x28
 8010da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010da6:	3b01      	subs	r3, #1
 8010da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8010daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dac:	1c5a      	adds	r2, r3, #1
 8010dae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010db0:	781b      	ldrb	r3, [r3, #0]
 8010db2:	461a      	mov	r2, r3
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	625a      	str	r2, [r3, #36]	; 0x24

  length -= 8;
 8010db8:	6a3b      	ldr	r3, [r7, #32]
 8010dba:	3b08      	subs	r3, #8
 8010dbc:	623b      	str	r3, [r7, #32]

  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	3318      	adds	r3, #24
 8010dc4:	61fb      	str	r3, [r7, #28]
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	f8d3 21b4 	ldr.w	r2, [r3, #436]	; 0x1b4
 8010dcc:	69fb      	ldr	r3, [r7, #28]
 8010dce:	601a      	str	r2, [r3, #0]
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	69da      	ldr	r2, [r3, #28]
 8010dd4:	69fb      	ldr	r3, [r7, #28]
 8010dd6:	3304      	adds	r3, #4
 8010dd8:	601a      	str	r2, [r3, #0]
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	6a1a      	ldr	r2, [r3, #32]
 8010dde:	69fb      	ldr	r3, [r7, #28]
 8010de0:	3308      	adds	r3, #8
 8010de2:	601a      	str	r2, [r3, #0]
 8010de4:	69fb      	ldr	r3, [r7, #28]
 8010de6:	330c      	adds	r3, #12
 8010de8:	68fa      	ldr	r2, [r7, #12]
 8010dea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010dec:	601a      	str	r2, [r3, #0]
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	2266      	movs	r2, #102	; 0x66
 8010df4:	615a      	str	r2, [r3, #20]
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	685b      	ldr	r3, [r3, #4]
 8010dfc:	2101      	movs	r1, #1
 8010dfe:	68f8      	ldr	r0, [r7, #12]
 8010e00:	4798      	blx	r3
	   (int) cinfo->image_width, (int) cinfo->image_height,
	   cinfo->num_components);

  if (cinfo->marker->saw_SOF)
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8010e08:	691b      	ldr	r3, [r3, #16]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d008      	beq.n	8010e20 <get_sof+0x26a>
    ERREXIT(cinfo, JERR_SOF_DUPLICATE);
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	223c      	movs	r2, #60	; 0x3c
 8010e14:	615a      	str	r2, [r3, #20]
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	68f8      	ldr	r0, [r7, #12]
 8010e1e:	4798      	blx	r3

  /* We don't support files in which the image height is initially specified */
  /* as 0 and is later redefined by DNL.  As long as we have to check that,  */
  /* might as well have a general sanity check. */
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	6a1b      	ldr	r3, [r3, #32]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d007      	beq.n	8010e38 <get_sof+0x282>
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	69db      	ldr	r3, [r3, #28]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d003      	beq.n	8010e38 <get_sof+0x282>
      || cinfo->num_components <= 0)
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	dc08      	bgt.n	8010e4a <get_sof+0x294>
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	2221      	movs	r2, #33	; 0x21
 8010e3e:	615a      	str	r2, [r3, #20]
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	68f8      	ldr	r0, [r7, #12]
 8010e48:	4798      	blx	r3

  if (length != (cinfo->num_components * 3))
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e4e:	4613      	mov	r3, r2
 8010e50:	005b      	lsls	r3, r3, #1
 8010e52:	4413      	add	r3, r2
 8010e54:	6a3a      	ldr	r2, [r7, #32]
 8010e56:	429a      	cmp	r2, r3
 8010e58:	d008      	beq.n	8010e6c <get_sof+0x2b6>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	220c      	movs	r2, #12
 8010e60:	615a      	str	r2, [r3, #20]
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	68f8      	ldr	r0, [r7, #12]
 8010e6a:	4798      	blx	r3

  if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d10f      	bne.n	8010e96 <get_sof+0x2e0>
    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	685b      	ldr	r3, [r3, #4]
 8010e7a:	681b      	ldr	r3, [r3, #0]
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 cinfo->num_components * SIZEOF(jpeg_component_info));
 8010e7c:	68fa      	ldr	r2, [r7, #12]
 8010e7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010e80:	4611      	mov	r1, r2
    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
 8010e82:	2258      	movs	r2, #88	; 0x58
 8010e84:	fb02 f201 	mul.w	r2, r2, r1
 8010e88:	2101      	movs	r1, #1
 8010e8a:	68f8      	ldr	r0, [r7, #12]
 8010e8c:	4798      	blx	r3
 8010e8e:	4602      	mov	r2, r0
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8010e96:	2300      	movs	r3, #0
 8010e98:	637b      	str	r3, [r7, #52]	; 0x34
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010ea0:	633b      	str	r3, [r7, #48]	; 0x30
 8010ea2:	e086      	b.n	8010fb2 <get_sof+0x3fc>
       ci++, compptr++) {
    compptr->component_index = ci;
 8010ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010ea8:	605a      	str	r2, [r3, #4]
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 8010eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d10e      	bne.n	8010ece <get_sof+0x318>
 8010eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb2:	68db      	ldr	r3, [r3, #12]
 8010eb4:	68f8      	ldr	r0, [r7, #12]
 8010eb6:	4798      	blx	r3
 8010eb8:	4603      	mov	r3, r0
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d101      	bne.n	8010ec2 <get_sof+0x30c>
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	e089      	b.n	8010fd6 <get_sof+0x420>
 8010ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eca:	685b      	ldr	r3, [r3, #4]
 8010ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8010ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ed0:	3b01      	subs	r3, #1
 8010ed2:	62bb      	str	r3, [r7, #40]	; 0x28
 8010ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ed6:	1c5a      	adds	r2, r3, #1
 8010ed8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010eda:	781b      	ldrb	r3, [r3, #0]
 8010edc:	461a      	mov	r2, r3
 8010ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee0:	601a      	str	r2, [r3, #0]
    INPUT_BYTE(cinfo, c, return FALSE);
 8010ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d10e      	bne.n	8010f06 <get_sof+0x350>
 8010ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eea:	68db      	ldr	r3, [r3, #12]
 8010eec:	68f8      	ldr	r0, [r7, #12]
 8010eee:	4798      	blx	r3
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d101      	bne.n	8010efa <get_sof+0x344>
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	e06d      	b.n	8010fd6 <get_sof+0x420>
 8010efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f02:	685b      	ldr	r3, [r3, #4]
 8010f04:	62bb      	str	r3, [r7, #40]	; 0x28
 8010f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f08:	3b01      	subs	r3, #1
 8010f0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8010f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f0e:	1c5a      	adds	r2, r3, #1
 8010f10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010f12:	781b      	ldrb	r3, [r3, #0]
 8010f14:	61bb      	str	r3, [r7, #24]
    compptr->h_samp_factor = (c >> 4) & 15;
 8010f16:	69bb      	ldr	r3, [r7, #24]
 8010f18:	111b      	asrs	r3, r3, #4
 8010f1a:	f003 020f 	and.w	r2, r3, #15
 8010f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f20:	609a      	str	r2, [r3, #8]
    compptr->v_samp_factor = (c     ) & 15;
 8010f22:	69bb      	ldr	r3, [r7, #24]
 8010f24:	f003 020f 	and.w	r2, r3, #15
 8010f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f2a:	60da      	str	r2, [r3, #12]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 8010f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d10e      	bne.n	8010f50 <get_sof+0x39a>
 8010f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f34:	68db      	ldr	r3, [r3, #12]
 8010f36:	68f8      	ldr	r0, [r7, #12]
 8010f38:	4798      	blx	r3
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d101      	bne.n	8010f44 <get_sof+0x38e>
 8010f40:	2300      	movs	r3, #0
 8010f42:	e048      	b.n	8010fd6 <get_sof+0x420>
 8010f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f4c:	685b      	ldr	r3, [r3, #4]
 8010f4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f52:	3b01      	subs	r3, #1
 8010f54:	62bb      	str	r3, [r7, #40]	; 0x28
 8010f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f58:	1c5a      	adds	r2, r3, #1
 8010f5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010f5c:	781b      	ldrb	r3, [r3, #0]
 8010f5e:	461a      	mov	r2, r3
 8010f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f62:	611a      	str	r2, [r3, #16]

    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	3318      	adds	r3, #24
 8010f6a:	617b      	str	r3, [r7, #20]
 8010f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f6e:	681a      	ldr	r2, [r3, #0]
 8010f70:	697b      	ldr	r3, [r7, #20]
 8010f72:	601a      	str	r2, [r3, #0]
 8010f74:	697b      	ldr	r3, [r7, #20]
 8010f76:	3304      	adds	r3, #4
 8010f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f7a:	6892      	ldr	r2, [r2, #8]
 8010f7c:	601a      	str	r2, [r3, #0]
 8010f7e:	697b      	ldr	r3, [r7, #20]
 8010f80:	3308      	adds	r3, #8
 8010f82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f84:	68d2      	ldr	r2, [r2, #12]
 8010f86:	601a      	str	r2, [r3, #0]
 8010f88:	697b      	ldr	r3, [r7, #20]
 8010f8a:	330c      	adds	r3, #12
 8010f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f8e:	6912      	ldr	r2, [r2, #16]
 8010f90:	601a      	str	r2, [r3, #0]
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	2267      	movs	r2, #103	; 0x67
 8010f98:	615a      	str	r2, [r3, #20]
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	685b      	ldr	r3, [r3, #4]
 8010fa0:	2101      	movs	r1, #1
 8010fa2:	68f8      	ldr	r0, [r7, #12]
 8010fa4:	4798      	blx	r3
       ci++, compptr++) {
 8010fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fa8:	3301      	adds	r3, #1
 8010faa:	637b      	str	r3, [r7, #52]	; 0x34
 8010fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fae:	3358      	adds	r3, #88	; 0x58
 8010fb0:	633b      	str	r3, [r7, #48]	; 0x30
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	f6ff af73 	blt.w	8010ea4 <get_sof+0x2ee>
	     compptr->component_id, compptr->h_samp_factor,
	     compptr->v_samp_factor, compptr->quant_tbl_no);
  }

  cinfo->marker->saw_SOF = TRUE;
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8010fc4:	2201      	movs	r2, #1
 8010fc6:	611a      	str	r2, [r3, #16]

  INPUT_SYNC(cinfo);
 8010fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010fcc:	601a      	str	r2, [r3, #0]
 8010fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fd2:	605a      	str	r2, [r3, #4]
  return TRUE;
 8010fd4:	2301      	movs	r3, #1
}
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	3738      	adds	r7, #56	; 0x38
 8010fda:	46bd      	mov	sp, r7
 8010fdc:	bd80      	pop	{r7, pc}

08010fde <get_sos>:


LOCAL(boolean)
get_sos (j_decompress_ptr cinfo)
/* Process a SOS marker */
{
 8010fde:	b580      	push	{r7, lr}
 8010fe0:	b08e      	sub	sp, #56	; 0x38
 8010fe2:	af00      	add	r7, sp, #0
 8010fe4:	6078      	str	r0, [r7, #4]
  INT32 length;
  int i, ci, n, c, cc;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	699b      	ldr	r3, [r3, #24]
 8010fea:	623b      	str	r3, [r7, #32]
 8010fec:	6a3b      	ldr	r3, [r7, #32]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8010ff2:	6a3b      	ldr	r3, [r7, #32]
 8010ff4:	685b      	ldr	r3, [r3, #4]
 8010ff6:	627b      	str	r3, [r7, #36]	; 0x24

  if (! cinfo->marker->saw_SOF)
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8010ffe:	691b      	ldr	r3, [r3, #16]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d108      	bne.n	8011016 <get_sos+0x38>
    ERREXIT(cinfo, JERR_SOS_NO_SOF);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	2240      	movs	r2, #64	; 0x40
 801100a:	615a      	str	r2, [r3, #20]
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	4798      	blx	r3

  INPUT_2BYTES(cinfo, length, return FALSE);
 8011016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011018:	2b00      	cmp	r3, #0
 801101a:	d10e      	bne.n	801103a <get_sos+0x5c>
 801101c:	6a3b      	ldr	r3, [r7, #32]
 801101e:	68db      	ldr	r3, [r3, #12]
 8011020:	6878      	ldr	r0, [r7, #4]
 8011022:	4798      	blx	r3
 8011024:	4603      	mov	r3, r0
 8011026:	2b00      	cmp	r3, #0
 8011028:	d101      	bne.n	801102e <get_sos+0x50>
 801102a:	2300      	movs	r3, #0
 801102c:	e1a1      	b.n	8011372 <get_sos+0x394>
 801102e:	6a3b      	ldr	r3, [r7, #32]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	62bb      	str	r3, [r7, #40]	; 0x28
 8011034:	6a3b      	ldr	r3, [r7, #32]
 8011036:	685b      	ldr	r3, [r3, #4]
 8011038:	627b      	str	r3, [r7, #36]	; 0x24
 801103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801103c:	3b01      	subs	r3, #1
 801103e:	627b      	str	r3, [r7, #36]	; 0x24
 8011040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011042:	1c5a      	adds	r2, r3, #1
 8011044:	62ba      	str	r2, [r7, #40]	; 0x28
 8011046:	781b      	ldrb	r3, [r3, #0]
 8011048:	021b      	lsls	r3, r3, #8
 801104a:	61fb      	str	r3, [r7, #28]
 801104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801104e:	2b00      	cmp	r3, #0
 8011050:	d10e      	bne.n	8011070 <get_sos+0x92>
 8011052:	6a3b      	ldr	r3, [r7, #32]
 8011054:	68db      	ldr	r3, [r3, #12]
 8011056:	6878      	ldr	r0, [r7, #4]
 8011058:	4798      	blx	r3
 801105a:	4603      	mov	r3, r0
 801105c:	2b00      	cmp	r3, #0
 801105e:	d101      	bne.n	8011064 <get_sos+0x86>
 8011060:	2300      	movs	r3, #0
 8011062:	e186      	b.n	8011372 <get_sos+0x394>
 8011064:	6a3b      	ldr	r3, [r7, #32]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	62bb      	str	r3, [r7, #40]	; 0x28
 801106a:	6a3b      	ldr	r3, [r7, #32]
 801106c:	685b      	ldr	r3, [r3, #4]
 801106e:	627b      	str	r3, [r7, #36]	; 0x24
 8011070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011072:	3b01      	subs	r3, #1
 8011074:	627b      	str	r3, [r7, #36]	; 0x24
 8011076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011078:	1c5a      	adds	r2, r3, #1
 801107a:	62ba      	str	r2, [r7, #40]	; 0x28
 801107c:	781b      	ldrb	r3, [r3, #0]
 801107e:	461a      	mov	r2, r3
 8011080:	69fb      	ldr	r3, [r7, #28]
 8011082:	4413      	add	r3, r2
 8011084:	61fb      	str	r3, [r7, #28]

  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 8011086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011088:	2b00      	cmp	r3, #0
 801108a:	d10e      	bne.n	80110aa <get_sos+0xcc>
 801108c:	6a3b      	ldr	r3, [r7, #32]
 801108e:	68db      	ldr	r3, [r3, #12]
 8011090:	6878      	ldr	r0, [r7, #4]
 8011092:	4798      	blx	r3
 8011094:	4603      	mov	r3, r0
 8011096:	2b00      	cmp	r3, #0
 8011098:	d101      	bne.n	801109e <get_sos+0xc0>
 801109a:	2300      	movs	r3, #0
 801109c:	e169      	b.n	8011372 <get_sos+0x394>
 801109e:	6a3b      	ldr	r3, [r7, #32]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80110a4:	6a3b      	ldr	r3, [r7, #32]
 80110a6:	685b      	ldr	r3, [r3, #4]
 80110a8:	627b      	str	r3, [r7, #36]	; 0x24
 80110aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ac:	3b01      	subs	r3, #1
 80110ae:	627b      	str	r3, [r7, #36]	; 0x24
 80110b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110b2:	1c5a      	adds	r2, r3, #1
 80110b4:	62ba      	str	r2, [r7, #40]	; 0x28
 80110b6:	781b      	ldrb	r3, [r3, #0]
 80110b8:	61bb      	str	r3, [r7, #24]

  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	2269      	movs	r2, #105	; 0x69
 80110c0:	615a      	str	r2, [r3, #20]
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	69ba      	ldr	r2, [r7, #24]
 80110c8:	619a      	str	r2, [r3, #24]
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	685b      	ldr	r3, [r3, #4]
 80110d0:	2101      	movs	r1, #1
 80110d2:	6878      	ldr	r0, [r7, #4]
 80110d4:	4798      	blx	r3

  if (length != (n * 2 + 6) || n > MAX_COMPS_IN_SCAN ||
 80110d6:	69bb      	ldr	r3, [r7, #24]
 80110d8:	3303      	adds	r3, #3
 80110da:	005b      	lsls	r3, r3, #1
 80110dc:	69fa      	ldr	r2, [r7, #28]
 80110de:	429a      	cmp	r2, r3
 80110e0:	d10a      	bne.n	80110f8 <get_sos+0x11a>
 80110e2:	69bb      	ldr	r3, [r7, #24]
 80110e4:	2b04      	cmp	r3, #4
 80110e6:	dc07      	bgt.n	80110f8 <get_sos+0x11a>
 80110e8:	69bb      	ldr	r3, [r7, #24]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d10d      	bne.n	801110a <get_sos+0x12c>
      (n == 0 && !cinfo->progressive_mode))
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d108      	bne.n	801110a <get_sos+0x12c>
      /* pseudo SOS marker only allowed in progressive mode */
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	220c      	movs	r2, #12
 80110fe:	615a      	str	r2, [r3, #20]
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	6878      	ldr	r0, [r7, #4]
 8011108:	4798      	blx	r3

  cinfo->comps_in_scan = n;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	69ba      	ldr	r2, [r7, #24]
 801110e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Collect the component-spec parameters */

  for (i = 0; i < n; i++) {
 8011112:	2300      	movs	r3, #0
 8011114:	637b      	str	r3, [r7, #52]	; 0x34
 8011116:	e089      	b.n	801122c <get_sos+0x24e>
    INPUT_BYTE(cinfo, cc, return FALSE);
 8011118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801111a:	2b00      	cmp	r3, #0
 801111c:	d10e      	bne.n	801113c <get_sos+0x15e>
 801111e:	6a3b      	ldr	r3, [r7, #32]
 8011120:	68db      	ldr	r3, [r3, #12]
 8011122:	6878      	ldr	r0, [r7, #4]
 8011124:	4798      	blx	r3
 8011126:	4603      	mov	r3, r0
 8011128:	2b00      	cmp	r3, #0
 801112a:	d101      	bne.n	8011130 <get_sos+0x152>
 801112c:	2300      	movs	r3, #0
 801112e:	e120      	b.n	8011372 <get_sos+0x394>
 8011130:	6a3b      	ldr	r3, [r7, #32]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	62bb      	str	r3, [r7, #40]	; 0x28
 8011136:	6a3b      	ldr	r3, [r7, #32]
 8011138:	685b      	ldr	r3, [r3, #4]
 801113a:	627b      	str	r3, [r7, #36]	; 0x24
 801113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801113e:	3b01      	subs	r3, #1
 8011140:	627b      	str	r3, [r7, #36]	; 0x24
 8011142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011144:	1c5a      	adds	r2, r3, #1
 8011146:	62ba      	str	r2, [r7, #40]	; 0x28
 8011148:	781b      	ldrb	r3, [r3, #0]
 801114a:	60fb      	str	r3, [r7, #12]
    INPUT_BYTE(cinfo, c, return FALSE);
 801114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801114e:	2b00      	cmp	r3, #0
 8011150:	d10e      	bne.n	8011170 <get_sos+0x192>
 8011152:	6a3b      	ldr	r3, [r7, #32]
 8011154:	68db      	ldr	r3, [r3, #12]
 8011156:	6878      	ldr	r0, [r7, #4]
 8011158:	4798      	blx	r3
 801115a:	4603      	mov	r3, r0
 801115c:	2b00      	cmp	r3, #0
 801115e:	d101      	bne.n	8011164 <get_sos+0x186>
 8011160:	2300      	movs	r3, #0
 8011162:	e106      	b.n	8011372 <get_sos+0x394>
 8011164:	6a3b      	ldr	r3, [r7, #32]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	62bb      	str	r3, [r7, #40]	; 0x28
 801116a:	6a3b      	ldr	r3, [r7, #32]
 801116c:	685b      	ldr	r3, [r3, #4]
 801116e:	627b      	str	r3, [r7, #36]	; 0x24
 8011170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011172:	3b01      	subs	r3, #1
 8011174:	627b      	str	r3, [r7, #36]	; 0x24
 8011176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011178:	1c5a      	adds	r2, r3, #1
 801117a:	62ba      	str	r2, [r7, #40]	; 0x28
 801117c:	781b      	ldrb	r3, [r3, #0]
 801117e:	617b      	str	r3, [r7, #20]
    
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8011180:	2300      	movs	r3, #0
 8011182:	633b      	str	r3, [r7, #48]	; 0x30
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801118a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801118c:	e00a      	b.n	80111a4 <get_sos+0x1c6>
	 ci++, compptr++) {
      if (cc == compptr->component_id)
 801118e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	68fa      	ldr	r2, [r7, #12]
 8011194:	429a      	cmp	r2, r3
 8011196:	d018      	beq.n	80111ca <get_sos+0x1ec>
	 ci++, compptr++) {
 8011198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801119a:	3301      	adds	r3, #1
 801119c:	633b      	str	r3, [r7, #48]	; 0x30
 801119e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a0:	3358      	adds	r3, #88	; 0x58
 80111a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111aa:	429a      	cmp	r2, r3
 80111ac:	dbef      	blt.n	801118e <get_sos+0x1b0>
	goto id_found;
    }

    ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	2204      	movs	r2, #4
 80111b4:	615a      	str	r2, [r3, #20]
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	68fa      	ldr	r2, [r7, #12]
 80111bc:	619a      	str	r2, [r3, #24]
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	6878      	ldr	r0, [r7, #4]
 80111c6:	4798      	blx	r3
 80111c8:	e000      	b.n	80111cc <get_sos+0x1ee>
	goto id_found;
 80111ca:	bf00      	nop

  id_found:

    cinfo->cur_comp_info[i] = compptr;
 80111cc:	687a      	ldr	r2, [r7, #4]
 80111ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111d0:	3354      	adds	r3, #84	; 0x54
 80111d2:	009b      	lsls	r3, r3, #2
 80111d4:	4413      	add	r3, r2
 80111d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111d8:	605a      	str	r2, [r3, #4]
    compptr->dc_tbl_no = (c >> 4) & 15;
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	111b      	asrs	r3, r3, #4
 80111de:	f003 020f 	and.w	r2, r3, #15
 80111e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e4:	615a      	str	r2, [r3, #20]
    compptr->ac_tbl_no = (c     ) & 15;
 80111e6:	697b      	ldr	r3, [r7, #20]
 80111e8:	f003 020f 	and.w	r2, r3, #15
 80111ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ee:	619a      	str	r2, [r3, #24]
    
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	3318      	adds	r3, #24
 80111f6:	60bb      	str	r3, [r7, #8]
 80111f8:	68bb      	ldr	r3, [r7, #8]
 80111fa:	68fa      	ldr	r2, [r7, #12]
 80111fc:	601a      	str	r2, [r3, #0]
 80111fe:	68bb      	ldr	r3, [r7, #8]
 8011200:	3304      	adds	r3, #4
 8011202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011204:	6952      	ldr	r2, [r2, #20]
 8011206:	601a      	str	r2, [r3, #0]
 8011208:	68bb      	ldr	r3, [r7, #8]
 801120a:	3308      	adds	r3, #8
 801120c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801120e:	6992      	ldr	r2, [r2, #24]
 8011210:	601a      	str	r2, [r3, #0]
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	226a      	movs	r2, #106	; 0x6a
 8011218:	615a      	str	r2, [r3, #20]
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	685b      	ldr	r3, [r3, #4]
 8011220:	2101      	movs	r1, #1
 8011222:	6878      	ldr	r0, [r7, #4]
 8011224:	4798      	blx	r3
  for (i = 0; i < n; i++) {
 8011226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011228:	3301      	adds	r3, #1
 801122a:	637b      	str	r3, [r7, #52]	; 0x34
 801122c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801122e:	69bb      	ldr	r3, [r7, #24]
 8011230:	429a      	cmp	r2, r3
 8011232:	f6ff af71 	blt.w	8011118 <get_sos+0x13a>
	     compptr->dc_tbl_no, compptr->ac_tbl_no);
  }

  /* Collect the additional scan parameters Ss, Se, Ah/Al. */
  INPUT_BYTE(cinfo, c, return FALSE);
 8011236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011238:	2b00      	cmp	r3, #0
 801123a:	d10e      	bne.n	801125a <get_sos+0x27c>
 801123c:	6a3b      	ldr	r3, [r7, #32]
 801123e:	68db      	ldr	r3, [r3, #12]
 8011240:	6878      	ldr	r0, [r7, #4]
 8011242:	4798      	blx	r3
 8011244:	4603      	mov	r3, r0
 8011246:	2b00      	cmp	r3, #0
 8011248:	d101      	bne.n	801124e <get_sos+0x270>
 801124a:	2300      	movs	r3, #0
 801124c:	e091      	b.n	8011372 <get_sos+0x394>
 801124e:	6a3b      	ldr	r3, [r7, #32]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	62bb      	str	r3, [r7, #40]	; 0x28
 8011254:	6a3b      	ldr	r3, [r7, #32]
 8011256:	685b      	ldr	r3, [r3, #4]
 8011258:	627b      	str	r3, [r7, #36]	; 0x24
 801125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801125c:	3b01      	subs	r3, #1
 801125e:	627b      	str	r3, [r7, #36]	; 0x24
 8011260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011262:	1c5a      	adds	r2, r3, #1
 8011264:	62ba      	str	r2, [r7, #40]	; 0x28
 8011266:	781b      	ldrb	r3, [r3, #0]
 8011268:	617b      	str	r3, [r7, #20]
  cinfo->Ss = c;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	697a      	ldr	r2, [r7, #20]
 801126e:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  INPUT_BYTE(cinfo, c, return FALSE);
 8011272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011274:	2b00      	cmp	r3, #0
 8011276:	d10e      	bne.n	8011296 <get_sos+0x2b8>
 8011278:	6a3b      	ldr	r3, [r7, #32]
 801127a:	68db      	ldr	r3, [r3, #12]
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	4798      	blx	r3
 8011280:	4603      	mov	r3, r0
 8011282:	2b00      	cmp	r3, #0
 8011284:	d101      	bne.n	801128a <get_sos+0x2ac>
 8011286:	2300      	movs	r3, #0
 8011288:	e073      	b.n	8011372 <get_sos+0x394>
 801128a:	6a3b      	ldr	r3, [r7, #32]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011290:	6a3b      	ldr	r3, [r7, #32]
 8011292:	685b      	ldr	r3, [r3, #4]
 8011294:	627b      	str	r3, [r7, #36]	; 0x24
 8011296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011298:	3b01      	subs	r3, #1
 801129a:	627b      	str	r3, [r7, #36]	; 0x24
 801129c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801129e:	1c5a      	adds	r2, r3, #1
 80112a0:	62ba      	str	r2, [r7, #40]	; 0x28
 80112a2:	781b      	ldrb	r3, [r3, #0]
 80112a4:	617b      	str	r3, [r7, #20]
  cinfo->Se = c;
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	697a      	ldr	r2, [r7, #20]
 80112aa:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  INPUT_BYTE(cinfo, c, return FALSE);
 80112ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d10e      	bne.n	80112d2 <get_sos+0x2f4>
 80112b4:	6a3b      	ldr	r3, [r7, #32]
 80112b6:	68db      	ldr	r3, [r3, #12]
 80112b8:	6878      	ldr	r0, [r7, #4]
 80112ba:	4798      	blx	r3
 80112bc:	4603      	mov	r3, r0
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d101      	bne.n	80112c6 <get_sos+0x2e8>
 80112c2:	2300      	movs	r3, #0
 80112c4:	e055      	b.n	8011372 <get_sos+0x394>
 80112c6:	6a3b      	ldr	r3, [r7, #32]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80112cc:	6a3b      	ldr	r3, [r7, #32]
 80112ce:	685b      	ldr	r3, [r3, #4]
 80112d0:	627b      	str	r3, [r7, #36]	; 0x24
 80112d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d4:	3b01      	subs	r3, #1
 80112d6:	627b      	str	r3, [r7, #36]	; 0x24
 80112d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112da:	1c5a      	adds	r2, r3, #1
 80112dc:	62ba      	str	r2, [r7, #40]	; 0x28
 80112de:	781b      	ldrb	r3, [r3, #0]
 80112e0:	617b      	str	r3, [r7, #20]
  cinfo->Ah = (c >> 4) & 15;
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	111b      	asrs	r3, r3, #4
 80112e6:	f003 020f 	and.w	r2, r3, #15
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
  cinfo->Al = (c     ) & 15;
 80112f0:	697b      	ldr	r3, [r7, #20]
 80112f2:	f003 020f 	and.w	r2, r3, #15
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	3318      	adds	r3, #24
 8011302:	613b      	str	r3, [r7, #16]
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 801130a:	693b      	ldr	r3, [r7, #16]
 801130c:	601a      	str	r2, [r3, #0]
 801130e:	693b      	ldr	r3, [r7, #16]
 8011310:	3304      	adds	r3, #4
 8011312:	687a      	ldr	r2, [r7, #4]
 8011314:	f8d2 219c 	ldr.w	r2, [r2, #412]	; 0x19c
 8011318:	601a      	str	r2, [r3, #0]
 801131a:	693b      	ldr	r3, [r7, #16]
 801131c:	3308      	adds	r3, #8
 801131e:	687a      	ldr	r2, [r7, #4]
 8011320:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
 8011324:	601a      	str	r2, [r3, #0]
 8011326:	693b      	ldr	r3, [r7, #16]
 8011328:	330c      	adds	r3, #12
 801132a:	687a      	ldr	r2, [r7, #4]
 801132c:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8011330:	601a      	str	r2, [r3, #0]
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	226b      	movs	r2, #107	; 0x6b
 8011338:	615a      	str	r2, [r3, #20]
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	685b      	ldr	r3, [r3, #4]
 8011340:	2101      	movs	r1, #1
 8011342:	6878      	ldr	r0, [r7, #4]
 8011344:	4798      	blx	r3
	   cinfo->Ah, cinfo->Al);

  /* Prepare to scan data & restart markers */
  cinfo->marker->next_restart_num = 0;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 801134c:	2200      	movs	r2, #0
 801134e:	615a      	str	r2, [r3, #20]

  /* Count another (non-pseudo) SOS marker */
  if (n) cinfo->input_scan_number++;
 8011350:	69bb      	ldr	r3, [r7, #24]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d006      	beq.n	8011364 <get_sos+0x386>
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801135c:	1c5a      	adds	r2, r3, #1
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  INPUT_SYNC(cinfo);
 8011364:	6a3b      	ldr	r3, [r7, #32]
 8011366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011368:	601a      	str	r2, [r3, #0]
 801136a:	6a3b      	ldr	r3, [r7, #32]
 801136c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801136e:	605a      	str	r2, [r3, #4]
  return TRUE;
 8011370:	2301      	movs	r3, #1
}
 8011372:	4618      	mov	r0, r3
 8011374:	3738      	adds	r7, #56	; 0x38
 8011376:	46bd      	mov	sp, r7
 8011378:	bd80      	pop	{r7, pc}

0801137a <get_dac>:
#ifdef D_ARITH_CODING_SUPPORTED

LOCAL(boolean)
get_dac (j_decompress_ptr cinfo)
/* Process a DAC marker */
{
 801137a:	b580      	push	{r7, lr}
 801137c:	b088      	sub	sp, #32
 801137e:	af00      	add	r7, sp, #0
 8011380:	6078      	str	r0, [r7, #4]
  INT32 length;
  int index, val;
  INPUT_VARS(cinfo);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	699b      	ldr	r3, [r3, #24]
 8011386:	613b      	str	r3, [r7, #16]
 8011388:	693b      	ldr	r3, [r7, #16]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	61bb      	str	r3, [r7, #24]
 801138e:	693b      	ldr	r3, [r7, #16]
 8011390:	685b      	ldr	r3, [r3, #4]
 8011392:	617b      	str	r3, [r7, #20]

  INPUT_2BYTES(cinfo, length, return FALSE);
 8011394:	697b      	ldr	r3, [r7, #20]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d10e      	bne.n	80113b8 <get_dac+0x3e>
 801139a:	693b      	ldr	r3, [r7, #16]
 801139c:	68db      	ldr	r3, [r3, #12]
 801139e:	6878      	ldr	r0, [r7, #4]
 80113a0:	4798      	blx	r3
 80113a2:	4603      	mov	r3, r0
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d101      	bne.n	80113ac <get_dac+0x32>
 80113a8:	2300      	movs	r3, #0
 80113aa:	e0dc      	b.n	8011566 <get_dac+0x1ec>
 80113ac:	693b      	ldr	r3, [r7, #16]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	61bb      	str	r3, [r7, #24]
 80113b2:	693b      	ldr	r3, [r7, #16]
 80113b4:	685b      	ldr	r3, [r3, #4]
 80113b6:	617b      	str	r3, [r7, #20]
 80113b8:	697b      	ldr	r3, [r7, #20]
 80113ba:	3b01      	subs	r3, #1
 80113bc:	617b      	str	r3, [r7, #20]
 80113be:	69bb      	ldr	r3, [r7, #24]
 80113c0:	1c5a      	adds	r2, r3, #1
 80113c2:	61ba      	str	r2, [r7, #24]
 80113c4:	781b      	ldrb	r3, [r3, #0]
 80113c6:	021b      	lsls	r3, r3, #8
 80113c8:	61fb      	str	r3, [r7, #28]
 80113ca:	697b      	ldr	r3, [r7, #20]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d10e      	bne.n	80113ee <get_dac+0x74>
 80113d0:	693b      	ldr	r3, [r7, #16]
 80113d2:	68db      	ldr	r3, [r3, #12]
 80113d4:	6878      	ldr	r0, [r7, #4]
 80113d6:	4798      	blx	r3
 80113d8:	4603      	mov	r3, r0
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d101      	bne.n	80113e2 <get_dac+0x68>
 80113de:	2300      	movs	r3, #0
 80113e0:	e0c1      	b.n	8011566 <get_dac+0x1ec>
 80113e2:	693b      	ldr	r3, [r7, #16]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	61bb      	str	r3, [r7, #24]
 80113e8:	693b      	ldr	r3, [r7, #16]
 80113ea:	685b      	ldr	r3, [r3, #4]
 80113ec:	617b      	str	r3, [r7, #20]
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	3b01      	subs	r3, #1
 80113f2:	617b      	str	r3, [r7, #20]
 80113f4:	69bb      	ldr	r3, [r7, #24]
 80113f6:	1c5a      	adds	r2, r3, #1
 80113f8:	61ba      	str	r2, [r7, #24]
 80113fa:	781b      	ldrb	r3, [r3, #0]
 80113fc:	461a      	mov	r2, r3
 80113fe:	69fb      	ldr	r3, [r7, #28]
 8011400:	4413      	add	r3, r2
 8011402:	61fb      	str	r3, [r7, #28]
  length -= 2;
 8011404:	69fb      	ldr	r3, [r7, #28]
 8011406:	3b02      	subs	r3, #2
 8011408:	61fb      	str	r3, [r7, #28]
  
  while (length > 0) {
 801140a:	e095      	b.n	8011538 <get_dac+0x1be>
    INPUT_BYTE(cinfo, index, return FALSE);
 801140c:	697b      	ldr	r3, [r7, #20]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d10e      	bne.n	8011430 <get_dac+0xb6>
 8011412:	693b      	ldr	r3, [r7, #16]
 8011414:	68db      	ldr	r3, [r3, #12]
 8011416:	6878      	ldr	r0, [r7, #4]
 8011418:	4798      	blx	r3
 801141a:	4603      	mov	r3, r0
 801141c:	2b00      	cmp	r3, #0
 801141e:	d101      	bne.n	8011424 <get_dac+0xaa>
 8011420:	2300      	movs	r3, #0
 8011422:	e0a0      	b.n	8011566 <get_dac+0x1ec>
 8011424:	693b      	ldr	r3, [r7, #16]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	61bb      	str	r3, [r7, #24]
 801142a:	693b      	ldr	r3, [r7, #16]
 801142c:	685b      	ldr	r3, [r3, #4]
 801142e:	617b      	str	r3, [r7, #20]
 8011430:	697b      	ldr	r3, [r7, #20]
 8011432:	3b01      	subs	r3, #1
 8011434:	617b      	str	r3, [r7, #20]
 8011436:	69bb      	ldr	r3, [r7, #24]
 8011438:	1c5a      	adds	r2, r3, #1
 801143a:	61ba      	str	r2, [r7, #24]
 801143c:	781b      	ldrb	r3, [r3, #0]
 801143e:	60fb      	str	r3, [r7, #12]
    INPUT_BYTE(cinfo, val, return FALSE);
 8011440:	697b      	ldr	r3, [r7, #20]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d10e      	bne.n	8011464 <get_dac+0xea>
 8011446:	693b      	ldr	r3, [r7, #16]
 8011448:	68db      	ldr	r3, [r3, #12]
 801144a:	6878      	ldr	r0, [r7, #4]
 801144c:	4798      	blx	r3
 801144e:	4603      	mov	r3, r0
 8011450:	2b00      	cmp	r3, #0
 8011452:	d101      	bne.n	8011458 <get_dac+0xde>
 8011454:	2300      	movs	r3, #0
 8011456:	e086      	b.n	8011566 <get_dac+0x1ec>
 8011458:	693b      	ldr	r3, [r7, #16]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	61bb      	str	r3, [r7, #24]
 801145e:	693b      	ldr	r3, [r7, #16]
 8011460:	685b      	ldr	r3, [r3, #4]
 8011462:	617b      	str	r3, [r7, #20]
 8011464:	697b      	ldr	r3, [r7, #20]
 8011466:	3b01      	subs	r3, #1
 8011468:	617b      	str	r3, [r7, #20]
 801146a:	69bb      	ldr	r3, [r7, #24]
 801146c:	1c5a      	adds	r2, r3, #1
 801146e:	61ba      	str	r2, [r7, #24]
 8011470:	781b      	ldrb	r3, [r3, #0]
 8011472:	60bb      	str	r3, [r7, #8]

    length -= 2;
 8011474:	69fb      	ldr	r3, [r7, #28]
 8011476:	3b02      	subs	r3, #2
 8011478:	61fb      	str	r3, [r7, #28]

    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	2251      	movs	r2, #81	; 0x51
 8011480:	615a      	str	r2, [r3, #20]
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	68fa      	ldr	r2, [r7, #12]
 8011488:	619a      	str	r2, [r3, #24]
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	68ba      	ldr	r2, [r7, #8]
 8011490:	61da      	str	r2, [r3, #28]
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	685b      	ldr	r3, [r3, #4]
 8011498:	2101      	movs	r1, #1
 801149a:	6878      	ldr	r0, [r7, #4]
 801149c:	4798      	blx	r3

    if (index < 0 || index >= (2*NUM_ARITH_TBLS))
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	db02      	blt.n	80114aa <get_dac+0x130>
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	2b1f      	cmp	r3, #31
 80114a8:	dd0c      	ble.n	80114c4 <get_dac+0x14a>
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	221d      	movs	r2, #29
 80114b0:	615a      	str	r2, [r3, #20]
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	68fa      	ldr	r2, [r7, #12]
 80114b8:	619a      	str	r2, [r3, #24]
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	6878      	ldr	r0, [r7, #4]
 80114c2:	4798      	blx	r3

    if (index >= NUM_ARITH_TBLS) { /* define AC table */
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	2b0f      	cmp	r3, #15
 80114c8:	dd09      	ble.n	80114de <get_dac+0x164>
      cinfo->arith_ac_K[index-NUM_ARITH_TBLS] = (UINT8) val;
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	3b10      	subs	r3, #16
 80114ce:	68ba      	ldr	r2, [r7, #8]
 80114d0:	b2d1      	uxtb	r1, r2
 80114d2:	687a      	ldr	r2, [r7, #4]
 80114d4:	4413      	add	r3, r2
 80114d6:	460a      	mov	r2, r1
 80114d8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 80114dc:	e02c      	b.n	8011538 <get_dac+0x1be>
    } else {			/* define DC table */
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 80114de:	68bb      	ldr	r3, [r7, #8]
 80114e0:	b2db      	uxtb	r3, r3
 80114e2:	f003 030f 	and.w	r3, r3, #15
 80114e6:	b2d9      	uxtb	r1, r3
 80114e8:	687a      	ldr	r2, [r7, #4]
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	4413      	add	r3, r2
 80114ee:	33e8      	adds	r3, #232	; 0xe8
 80114f0:	460a      	mov	r2, r1
 80114f2:	701a      	strb	r2, [r3, #0]
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 80114f4:	68bb      	ldr	r3, [r7, #8]
 80114f6:	111b      	asrs	r3, r3, #4
 80114f8:	b2d9      	uxtb	r1, r3
 80114fa:	687a      	ldr	r2, [r7, #4]
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	4413      	add	r3, r2
 8011500:	33f8      	adds	r3, #248	; 0xf8
 8011502:	460a      	mov	r2, r1
 8011504:	701a      	strb	r2, [r3, #0]
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 8011506:	687a      	ldr	r2, [r7, #4]
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	4413      	add	r3, r2
 801150c:	33e8      	adds	r3, #232	; 0xe8
 801150e:	781a      	ldrb	r2, [r3, #0]
 8011510:	6879      	ldr	r1, [r7, #4]
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	440b      	add	r3, r1
 8011516:	33f8      	adds	r3, #248	; 0xf8
 8011518:	781b      	ldrb	r3, [r3, #0]
 801151a:	429a      	cmp	r2, r3
 801151c:	d90c      	bls.n	8011538 <get_dac+0x1be>
	ERREXIT1(cinfo, JERR_DAC_VALUE, val);
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	221e      	movs	r2, #30
 8011524:	615a      	str	r2, [r3, #20]
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	68ba      	ldr	r2, [r7, #8]
 801152c:	619a      	str	r2, [r3, #24]
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	6878      	ldr	r0, [r7, #4]
 8011536:	4798      	blx	r3
  while (length > 0) {
 8011538:	69fb      	ldr	r3, [r7, #28]
 801153a:	2b00      	cmp	r3, #0
 801153c:	f73f af66 	bgt.w	801140c <get_dac+0x92>
    }
  }

  if (length != 0)
 8011540:	69fb      	ldr	r3, [r7, #28]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d008      	beq.n	8011558 <get_dac+0x1de>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	220c      	movs	r2, #12
 801154c:	615a      	str	r2, [r3, #20]
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	6878      	ldr	r0, [r7, #4]
 8011556:	4798      	blx	r3

  INPUT_SYNC(cinfo);
 8011558:	693b      	ldr	r3, [r7, #16]
 801155a:	69ba      	ldr	r2, [r7, #24]
 801155c:	601a      	str	r2, [r3, #0]
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	697a      	ldr	r2, [r7, #20]
 8011562:	605a      	str	r2, [r3, #4]
  return TRUE;
 8011564:	2301      	movs	r3, #1
}
 8011566:	4618      	mov	r0, r3
 8011568:	3720      	adds	r7, #32
 801156a:	46bd      	mov	sp, r7
 801156c:	bd80      	pop	{r7, pc}

0801156e <get_dht>:


LOCAL(boolean)
get_dht (j_decompress_ptr cinfo)
/* Process a DHT marker */
{
 801156e:	b5b0      	push	{r4, r5, r7, lr}
 8011570:	b0d2      	sub	sp, #328	; 0x148
 8011572:	af00      	add	r7, sp, #0
 8011574:	1d3b      	adds	r3, r7, #4
 8011576:	6018      	str	r0, [r3, #0]
  INT32 length;
  UINT8 bits[17];
  UINT8 huffval[256];
  int i, index, count;
  JHUFF_TBL **htblptr;
  INPUT_VARS(cinfo);
 8011578:	1d3b      	adds	r3, r7, #4
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	699b      	ldr	r3, [r3, #24]
 801157e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8011582:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 801158c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011590:	685b      	ldr	r3, [r3, #4]
 8011592:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

  INPUT_2BYTES(cinfo, length, return FALSE);
 8011596:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801159a:	2b00      	cmp	r3, #0
 801159c:	d114      	bne.n	80115c8 <get_dht+0x5a>
 801159e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80115a2:	68db      	ldr	r3, [r3, #12]
 80115a4:	1d3a      	adds	r2, r7, #4
 80115a6:	6810      	ldr	r0, [r2, #0]
 80115a8:	4798      	blx	r3
 80115aa:	4603      	mov	r3, r0
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d101      	bne.n	80115b4 <get_dht+0x46>
 80115b0:	2300      	movs	r3, #0
 80115b2:	e22f      	b.n	8011a14 <get_dht+0x4a6>
 80115b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80115be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80115c2:	685b      	ldr	r3, [r3, #4]
 80115c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80115c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80115cc:	3b01      	subs	r3, #1
 80115ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80115d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80115d6:	1c5a      	adds	r2, r3, #1
 80115d8:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 80115dc:	781b      	ldrb	r3, [r3, #0]
 80115de:	021b      	lsls	r3, r3, #8
 80115e0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80115e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d114      	bne.n	8011616 <get_dht+0xa8>
 80115ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80115f0:	68db      	ldr	r3, [r3, #12]
 80115f2:	1d3a      	adds	r2, r7, #4
 80115f4:	6810      	ldr	r0, [r2, #0]
 80115f6:	4798      	blx	r3
 80115f8:	4603      	mov	r3, r0
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d101      	bne.n	8011602 <get_dht+0x94>
 80115fe:	2300      	movs	r3, #0
 8011600:	e208      	b.n	8011a14 <get_dht+0x4a6>
 8011602:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 801160c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011610:	685b      	ldr	r3, [r3, #4]
 8011612:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011616:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801161a:	3b01      	subs	r3, #1
 801161c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011620:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011624:	1c5a      	adds	r2, r3, #1
 8011626:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 801162a:	781b      	ldrb	r3, [r3, #0]
 801162c:	461a      	mov	r2, r3
 801162e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8011632:	4413      	add	r3, r2
 8011634:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  length -= 2;
 8011638:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801163c:	3b02      	subs	r3, #2
 801163e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  
  while (length > 16) {
 8011642:	e1c7      	b.n	80119d4 <get_dht+0x466>
    INPUT_BYTE(cinfo, index, return FALSE);
 8011644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011648:	2b00      	cmp	r3, #0
 801164a:	d114      	bne.n	8011676 <get_dht+0x108>
 801164c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011650:	68db      	ldr	r3, [r3, #12]
 8011652:	1d3a      	adds	r2, r7, #4
 8011654:	6810      	ldr	r0, [r2, #0]
 8011656:	4798      	blx	r3
 8011658:	4603      	mov	r3, r0
 801165a:	2b00      	cmp	r3, #0
 801165c:	d101      	bne.n	8011662 <get_dht+0xf4>
 801165e:	2300      	movs	r3, #0
 8011660:	e1d8      	b.n	8011a14 <get_dht+0x4a6>
 8011662:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 801166c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011670:	685b      	ldr	r3, [r3, #4]
 8011672:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011676:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801167a:	3b01      	subs	r3, #1
 801167c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011680:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011684:	1c5a      	adds	r2, r3, #1
 8011686:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 801168a:	781b      	ldrb	r3, [r3, #0]
 801168c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 8011690:	1d3b      	adds	r3, r7, #4
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	2252      	movs	r2, #82	; 0x52
 8011698:	615a      	str	r2, [r3, #20]
 801169a:	1d3b      	adds	r3, r7, #4
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80116a4:	619a      	str	r2, [r3, #24]
 80116a6:	1d3b      	adds	r3, r7, #4
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	685b      	ldr	r3, [r3, #4]
 80116ae:	1d3a      	adds	r2, r7, #4
 80116b0:	2101      	movs	r1, #1
 80116b2:	6810      	ldr	r0, [r2, #0]
 80116b4:	4798      	blx	r3
      
    bits[0] = 0;
 80116b6:	2300      	movs	r3, #0
 80116b8:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
    count = 0;
 80116bc:	2300      	movs	r3, #0
 80116be:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    for (i = 1; i <= 16; i++) {
 80116c2:	2301      	movs	r3, #1
 80116c4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80116c8:	e03b      	b.n	8011742 <get_dht+0x1d4>
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 80116ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d114      	bne.n	80116fc <get_dht+0x18e>
 80116d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80116d6:	68db      	ldr	r3, [r3, #12]
 80116d8:	1d3a      	adds	r2, r7, #4
 80116da:	6810      	ldr	r0, [r2, #0]
 80116dc:	4798      	blx	r3
 80116de:	4603      	mov	r3, r0
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d101      	bne.n	80116e8 <get_dht+0x17a>
 80116e4:	2300      	movs	r3, #0
 80116e6:	e195      	b.n	8011a14 <get_dht+0x4a6>
 80116e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80116f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80116f6:	685b      	ldr	r3, [r3, #4]
 80116f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80116fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011700:	3b01      	subs	r3, #1
 8011702:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8011706:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801170a:	1c5a      	adds	r2, r3, #1
 801170c:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8011710:	7819      	ldrb	r1, [r3, #0]
 8011712:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8011716:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801171a:	4413      	add	r3, r2
 801171c:	460a      	mov	r2, r1
 801171e:	701a      	strb	r2, [r3, #0]
      count += bits[i];
 8011720:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8011724:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8011728:	4413      	add	r3, r2
 801172a:	781b      	ldrb	r3, [r3, #0]
 801172c:	461a      	mov	r2, r3
 801172e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011732:	4413      	add	r3, r2
 8011734:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    for (i = 1; i <= 16; i++) {
 8011738:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801173c:	3301      	adds	r3, #1
 801173e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8011742:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8011746:	2b10      	cmp	r3, #16
 8011748:	ddbf      	ble.n	80116ca <get_dht+0x15c>
    }

    length -= 1 + 16;
 801174a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801174e:	3b11      	subs	r3, #17
 8011750:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 8011754:	1d3b      	adds	r3, r7, #4
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	3318      	adds	r3, #24
 801175c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8011760:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8011764:	461a      	mov	r2, r3
 8011766:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801176a:	601a      	str	r2, [r3, #0]
 801176c:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8011770:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8011774:	3304      	adds	r3, #4
 8011776:	601a      	str	r2, [r3, #0]
 8011778:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 801177c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8011780:	3308      	adds	r3, #8
 8011782:	601a      	str	r2, [r3, #0]
 8011784:	f897 2110 	ldrb.w	r2, [r7, #272]	; 0x110
 8011788:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801178c:	330c      	adds	r3, #12
 801178e:	601a      	str	r2, [r3, #0]
 8011790:	f897 2111 	ldrb.w	r2, [r7, #273]	; 0x111
 8011794:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8011798:	3310      	adds	r3, #16
 801179a:	601a      	str	r2, [r3, #0]
 801179c:	f897 2112 	ldrb.w	r2, [r7, #274]	; 0x112
 80117a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80117a4:	3314      	adds	r3, #20
 80117a6:	601a      	str	r2, [r3, #0]
 80117a8:	f897 2113 	ldrb.w	r2, [r7, #275]	; 0x113
 80117ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80117b0:	3318      	adds	r3, #24
 80117b2:	601a      	str	r2, [r3, #0]
 80117b4:	f897 2114 	ldrb.w	r2, [r7, #276]	; 0x114
 80117b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80117bc:	331c      	adds	r3, #28
 80117be:	601a      	str	r2, [r3, #0]
 80117c0:	1d3b      	adds	r3, r7, #4
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	2258      	movs	r2, #88	; 0x58
 80117c8:	615a      	str	r2, [r3, #20]
 80117ca:	1d3b      	adds	r3, r7, #4
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	685b      	ldr	r3, [r3, #4]
 80117d2:	1d3a      	adds	r2, r7, #4
 80117d4:	2102      	movs	r1, #2
 80117d6:	6810      	ldr	r0, [r2, #0]
 80117d8:	4798      	blx	r3
	     bits[1], bits[2], bits[3], bits[4],
	     bits[5], bits[6], bits[7], bits[8]);
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 80117da:	1d3b      	adds	r3, r7, #4
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	3318      	adds	r3, #24
 80117e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80117e6:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80117ea:	461a      	mov	r2, r3
 80117ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80117f0:	601a      	str	r2, [r3, #0]
 80117f2:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 80117f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80117fa:	3304      	adds	r3, #4
 80117fc:	601a      	str	r2, [r3, #0]
 80117fe:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8011802:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011806:	3308      	adds	r3, #8
 8011808:	601a      	str	r2, [r3, #0]
 801180a:	f897 2118 	ldrb.w	r2, [r7, #280]	; 0x118
 801180e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011812:	330c      	adds	r3, #12
 8011814:	601a      	str	r2, [r3, #0]
 8011816:	f897 2119 	ldrb.w	r2, [r7, #281]	; 0x119
 801181a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801181e:	3310      	adds	r3, #16
 8011820:	601a      	str	r2, [r3, #0]
 8011822:	f897 211a 	ldrb.w	r2, [r7, #282]	; 0x11a
 8011826:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801182a:	3314      	adds	r3, #20
 801182c:	601a      	str	r2, [r3, #0]
 801182e:	f897 211b 	ldrb.w	r2, [r7, #283]	; 0x11b
 8011832:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011836:	3318      	adds	r3, #24
 8011838:	601a      	str	r2, [r3, #0]
 801183a:	f897 211c 	ldrb.w	r2, [r7, #284]	; 0x11c
 801183e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8011842:	331c      	adds	r3, #28
 8011844:	601a      	str	r2, [r3, #0]
 8011846:	1d3b      	adds	r3, r7, #4
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	2258      	movs	r2, #88	; 0x58
 801184e:	615a      	str	r2, [r3, #20]
 8011850:	1d3b      	adds	r3, r7, #4
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	685b      	ldr	r3, [r3, #4]
 8011858:	1d3a      	adds	r2, r7, #4
 801185a:	2102      	movs	r1, #2
 801185c:	6810      	ldr	r0, [r2, #0]
 801185e:	4798      	blx	r3
	     bits[13], bits[14], bits[15], bits[16]);

    /* Here we just do minimal validation of the counts to avoid walking
     * off the end of our table space.  jdhuff.c will check more carefully.
     */
    if (count > 256 || ((INT32) count) > length)
 8011860:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011868:	dc05      	bgt.n	8011876 <get_dht+0x308>
 801186a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801186e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8011872:	429a      	cmp	r2, r3
 8011874:	dd0b      	ble.n	801188e <get_dht+0x320>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 8011876:	1d3b      	adds	r3, r7, #4
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	2209      	movs	r2, #9
 801187e:	615a      	str	r2, [r3, #20]
 8011880:	1d3b      	adds	r3, r7, #4
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	1d3a      	adds	r2, r7, #4
 801188a:	6810      	ldr	r0, [r2, #0]
 801188c:	4798      	blx	r3

    for (i = 0; i < count; i++)
 801188e:	2300      	movs	r3, #0
 8011890:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8011894:	e02f      	b.n	80118f6 <get_dht+0x388>
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 8011896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801189a:	2b00      	cmp	r3, #0
 801189c:	d114      	bne.n	80118c8 <get_dht+0x35a>
 801189e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80118a2:	68db      	ldr	r3, [r3, #12]
 80118a4:	1d3a      	adds	r2, r7, #4
 80118a6:	6810      	ldr	r0, [r2, #0]
 80118a8:	4798      	blx	r3
 80118aa:	4603      	mov	r3, r0
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d101      	bne.n	80118b4 <get_dht+0x346>
 80118b0:	2300      	movs	r3, #0
 80118b2:	e0af      	b.n	8011a14 <get_dht+0x4a6>
 80118b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80118be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80118c2:	685b      	ldr	r3, [r3, #4]
 80118c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80118c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80118cc:	3b01      	subs	r3, #1
 80118ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80118d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80118d6:	1c5a      	adds	r2, r3, #1
 80118d8:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 80118dc:	7819      	ldrb	r1, [r3, #0]
 80118de:	f107 020c 	add.w	r2, r7, #12
 80118e2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80118e6:	4413      	add	r3, r2
 80118e8:	460a      	mov	r2, r1
 80118ea:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < count; i++)
 80118ec:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80118f0:	3301      	adds	r3, #1
 80118f2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80118f6:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80118fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80118fe:	429a      	cmp	r2, r3
 8011900:	dbc9      	blt.n	8011896 <get_dht+0x328>

    length -= count;
 8011902:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8011906:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801190a:	1ad3      	subs	r3, r2, r3
 801190c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

    if (index & 0x10) {		/* AC table definition */
 8011910:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8011914:	f003 0310 	and.w	r3, r3, #16
 8011918:	2b00      	cmp	r3, #0
 801191a:	d00f      	beq.n	801193c <get_dht+0x3ce>
      index -= 0x10;
 801191c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8011920:	3b10      	subs	r3, #16
 8011922:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
      htblptr = &cinfo->ac_huff_tbl_ptrs[index];
 8011926:	1d3a      	adds	r2, r7, #4
 8011928:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801192c:	3330      	adds	r3, #48	; 0x30
 801192e:	009b      	lsls	r3, r3, #2
 8011930:	6812      	ldr	r2, [r2, #0]
 8011932:	4413      	add	r3, r2
 8011934:	3304      	adds	r3, #4
 8011936:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 801193a:	e009      	b.n	8011950 <get_dht+0x3e2>
    } else {			/* DC table definition */
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 801193c:	1d3a      	adds	r2, r7, #4
 801193e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8011942:	332c      	adds	r3, #44	; 0x2c
 8011944:	009b      	lsls	r3, r3, #2
 8011946:	6812      	ldr	r2, [r2, #0]
 8011948:	4413      	add	r3, r2
 801194a:	3304      	adds	r3, #4
 801194c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    }

    if (index < 0 || index >= NUM_HUFF_TBLS)
 8011950:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8011954:	2b00      	cmp	r3, #0
 8011956:	db03      	blt.n	8011960 <get_dht+0x3f2>
 8011958:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801195c:	2b03      	cmp	r3, #3
 801195e:	dd11      	ble.n	8011984 <get_dht+0x416>
      ERREXIT1(cinfo, JERR_DHT_INDEX, index);
 8011960:	1d3b      	adds	r3, r7, #4
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	221f      	movs	r2, #31
 8011968:	615a      	str	r2, [r3, #20]
 801196a:	1d3b      	adds	r3, r7, #4
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8011974:	619a      	str	r2, [r3, #24]
 8011976:	1d3b      	adds	r3, r7, #4
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	1d3a      	adds	r2, r7, #4
 8011980:	6810      	ldr	r0, [r2, #0]
 8011982:	4798      	blx	r3

    if (*htblptr == NULL)
 8011984:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d107      	bne.n	801199e <get_dht+0x430>
      *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 801198e:	1d3b      	adds	r3, r7, #4
 8011990:	6818      	ldr	r0, [r3, #0]
 8011992:	f7f7 fcc1 	bl	8009318 <jpeg_alloc_huff_table>
 8011996:	4602      	mov	r2, r0
 8011998:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801199c:	601a      	str	r2, [r3, #0]
  
    MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
 801199e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	461d      	mov	r5, r3
 80119a6:	f507 7486 	add.w	r4, r7, #268	; 0x10c
 80119aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80119ac:	6028      	str	r0, [r5, #0]
 80119ae:	6069      	str	r1, [r5, #4]
 80119b0:	60aa      	str	r2, [r5, #8]
 80119b2:	60eb      	str	r3, [r5, #12]
 80119b4:	7823      	ldrb	r3, [r4, #0]
 80119b6:	742b      	strb	r3, [r5, #16]
    MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
 80119b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	f103 0211 	add.w	r2, r3, #17
 80119c2:	f107 030c 	add.w	r3, r7, #12
 80119c6:	4610      	mov	r0, r2
 80119c8:	4619      	mov	r1, r3
 80119ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80119ce:	461a      	mov	r2, r3
 80119d0:	f013 fabc 	bl	8024f4c <memcpy>
  while (length > 16) {
 80119d4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80119d8:	2b10      	cmp	r3, #16
 80119da:	f73f ae33 	bgt.w	8011644 <get_dht+0xd6>
  }

  if (length != 0)
 80119de:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d00b      	beq.n	80119fe <get_dht+0x490>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 80119e6:	1d3b      	adds	r3, r7, #4
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	220c      	movs	r2, #12
 80119ee:	615a      	str	r2, [r3, #20]
 80119f0:	1d3b      	adds	r3, r7, #4
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	1d3a      	adds	r2, r7, #4
 80119fa:	6810      	ldr	r0, [r2, #0]
 80119fc:	4798      	blx	r3

  INPUT_SYNC(cinfo);
 80119fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011a02:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8011a06:	601a      	str	r2, [r3, #0]
 8011a08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011a0c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8011a10:	605a      	str	r2, [r3, #4]
  return TRUE;
 8011a12:	2301      	movs	r3, #1
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08011a20 <get_dqt>:


LOCAL(boolean)
get_dqt (j_decompress_ptr cinfo)
/* Process a DQT marker */
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b08e      	sub	sp, #56	; 0x38
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
  INT32 length, count, i;
  int n, prec;
  unsigned int tmp;
  JQUANT_TBL *quant_ptr;
  const int *natural_order;
  INPUT_VARS(cinfo);
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	699b      	ldr	r3, [r3, #24]
 8011a2c:	61bb      	str	r3, [r7, #24]
 8011a2e:	69bb      	ldr	r3, [r7, #24]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	623b      	str	r3, [r7, #32]
 8011a34:	69bb      	ldr	r3, [r7, #24]
 8011a36:	685b      	ldr	r3, [r3, #4]
 8011a38:	61fb      	str	r3, [r7, #28]

  INPUT_2BYTES(cinfo, length, return FALSE);
 8011a3a:	69fb      	ldr	r3, [r7, #28]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d10e      	bne.n	8011a5e <get_dqt+0x3e>
 8011a40:	69bb      	ldr	r3, [r7, #24]
 8011a42:	68db      	ldr	r3, [r3, #12]
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	4798      	blx	r3
 8011a48:	4603      	mov	r3, r0
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d101      	bne.n	8011a52 <get_dqt+0x32>
 8011a4e:	2300      	movs	r3, #0
 8011a50:	e21e      	b.n	8011e90 <get_dqt+0x470>
 8011a52:	69bb      	ldr	r3, [r7, #24]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	623b      	str	r3, [r7, #32]
 8011a58:	69bb      	ldr	r3, [r7, #24]
 8011a5a:	685b      	ldr	r3, [r3, #4]
 8011a5c:	61fb      	str	r3, [r7, #28]
 8011a5e:	69fb      	ldr	r3, [r7, #28]
 8011a60:	3b01      	subs	r3, #1
 8011a62:	61fb      	str	r3, [r7, #28]
 8011a64:	6a3b      	ldr	r3, [r7, #32]
 8011a66:	1c5a      	adds	r2, r3, #1
 8011a68:	623a      	str	r2, [r7, #32]
 8011a6a:	781b      	ldrb	r3, [r3, #0]
 8011a6c:	021b      	lsls	r3, r3, #8
 8011a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8011a70:	69fb      	ldr	r3, [r7, #28]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d10e      	bne.n	8011a94 <get_dqt+0x74>
 8011a76:	69bb      	ldr	r3, [r7, #24]
 8011a78:	68db      	ldr	r3, [r3, #12]
 8011a7a:	6878      	ldr	r0, [r7, #4]
 8011a7c:	4798      	blx	r3
 8011a7e:	4603      	mov	r3, r0
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d101      	bne.n	8011a88 <get_dqt+0x68>
 8011a84:	2300      	movs	r3, #0
 8011a86:	e203      	b.n	8011e90 <get_dqt+0x470>
 8011a88:	69bb      	ldr	r3, [r7, #24]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	623b      	str	r3, [r7, #32]
 8011a8e:	69bb      	ldr	r3, [r7, #24]
 8011a90:	685b      	ldr	r3, [r3, #4]
 8011a92:	61fb      	str	r3, [r7, #28]
 8011a94:	69fb      	ldr	r3, [r7, #28]
 8011a96:	3b01      	subs	r3, #1
 8011a98:	61fb      	str	r3, [r7, #28]
 8011a9a:	6a3b      	ldr	r3, [r7, #32]
 8011a9c:	1c5a      	adds	r2, r3, #1
 8011a9e:	623a      	str	r2, [r7, #32]
 8011aa0:	781b      	ldrb	r3, [r3, #0]
 8011aa2:	461a      	mov	r2, r3
 8011aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011aa6:	4413      	add	r3, r2
 8011aa8:	637b      	str	r3, [r7, #52]	; 0x34
  length -= 2;
 8011aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011aac:	3b02      	subs	r3, #2
 8011aae:	637b      	str	r3, [r7, #52]	; 0x34

  while (length > 0) {
 8011ab0:	e1d7      	b.n	8011e62 <get_dqt+0x442>
    length--;
 8011ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ab4:	3b01      	subs	r3, #1
 8011ab6:	637b      	str	r3, [r7, #52]	; 0x34
    INPUT_BYTE(cinfo, n, return FALSE);
 8011ab8:	69fb      	ldr	r3, [r7, #28]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d10e      	bne.n	8011adc <get_dqt+0xbc>
 8011abe:	69bb      	ldr	r3, [r7, #24]
 8011ac0:	68db      	ldr	r3, [r3, #12]
 8011ac2:	6878      	ldr	r0, [r7, #4]
 8011ac4:	4798      	blx	r3
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d101      	bne.n	8011ad0 <get_dqt+0xb0>
 8011acc:	2300      	movs	r3, #0
 8011ace:	e1df      	b.n	8011e90 <get_dqt+0x470>
 8011ad0:	69bb      	ldr	r3, [r7, #24]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	623b      	str	r3, [r7, #32]
 8011ad6:	69bb      	ldr	r3, [r7, #24]
 8011ad8:	685b      	ldr	r3, [r3, #4]
 8011ada:	61fb      	str	r3, [r7, #28]
 8011adc:	69fb      	ldr	r3, [r7, #28]
 8011ade:	3b01      	subs	r3, #1
 8011ae0:	61fb      	str	r3, [r7, #28]
 8011ae2:	6a3b      	ldr	r3, [r7, #32]
 8011ae4:	1c5a      	adds	r2, r3, #1
 8011ae6:	623a      	str	r2, [r7, #32]
 8011ae8:	781b      	ldrb	r3, [r3, #0]
 8011aea:	617b      	str	r3, [r7, #20]
    prec = n >> 4;
 8011aec:	697b      	ldr	r3, [r7, #20]
 8011aee:	111b      	asrs	r3, r3, #4
 8011af0:	613b      	str	r3, [r7, #16]
    n &= 0x0F;
 8011af2:	697b      	ldr	r3, [r7, #20]
 8011af4:	f003 030f 	and.w	r3, r3, #15
 8011af8:	617b      	str	r3, [r7, #20]

    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	2253      	movs	r2, #83	; 0x53
 8011b00:	615a      	str	r2, [r3, #20]
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	697a      	ldr	r2, [r7, #20]
 8011b08:	619a      	str	r2, [r3, #24]
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	693a      	ldr	r2, [r7, #16]
 8011b10:	61da      	str	r2, [r3, #28]
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	685b      	ldr	r3, [r3, #4]
 8011b18:	2101      	movs	r1, #1
 8011b1a:	6878      	ldr	r0, [r7, #4]
 8011b1c:	4798      	blx	r3

    if (n >= NUM_QUANT_TBLS)
 8011b1e:	697b      	ldr	r3, [r7, #20]
 8011b20:	2b03      	cmp	r3, #3
 8011b22:	dd0c      	ble.n	8011b3e <get_dqt+0x11e>
      ERREXIT1(cinfo, JERR_DQT_INDEX, n);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	2220      	movs	r2, #32
 8011b2a:	615a      	str	r2, [r3, #20]
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	697a      	ldr	r2, [r7, #20]
 8011b32:	619a      	str	r2, [r3, #24]
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	6878      	ldr	r0, [r7, #4]
 8011b3c:	4798      	blx	r3
      
    if (cinfo->quant_tbl_ptrs[n] == NULL)
 8011b3e:	687a      	ldr	r2, [r7, #4]
 8011b40:	697b      	ldr	r3, [r7, #20]
 8011b42:	3328      	adds	r3, #40	; 0x28
 8011b44:	009b      	lsls	r3, r3, #2
 8011b46:	4413      	add	r3, r2
 8011b48:	685b      	ldr	r3, [r3, #4]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d109      	bne.n	8011b62 <get_dqt+0x142>
      cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
 8011b4e:	6878      	ldr	r0, [r7, #4]
 8011b50:	f7f7 fbcd 	bl	80092ee <jpeg_alloc_quant_table>
 8011b54:	4601      	mov	r1, r0
 8011b56:	687a      	ldr	r2, [r7, #4]
 8011b58:	697b      	ldr	r3, [r7, #20]
 8011b5a:	3328      	adds	r3, #40	; 0x28
 8011b5c:	009b      	lsls	r3, r3, #2
 8011b5e:	4413      	add	r3, r2
 8011b60:	6059      	str	r1, [r3, #4]
    quant_ptr = cinfo->quant_tbl_ptrs[n];
 8011b62:	687a      	ldr	r2, [r7, #4]
 8011b64:	697b      	ldr	r3, [r7, #20]
 8011b66:	3328      	adds	r3, #40	; 0x28
 8011b68:	009b      	lsls	r3, r3, #2
 8011b6a:	4413      	add	r3, r2
 8011b6c:	685b      	ldr	r3, [r3, #4]
 8011b6e:	60fb      	str	r3, [r7, #12]

    if (prec) {
 8011b70:	693b      	ldr	r3, [r7, #16]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d017      	beq.n	8011ba6 <get_dqt+0x186>
      if (length < DCTSIZE2 * 2) {
 8011b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b78:	2b7f      	cmp	r3, #127	; 0x7f
 8011b7a:	dc11      	bgt.n	8011ba0 <get_dqt+0x180>
	/* Initialize full table for safety. */
	for (i = 0; i < DCTSIZE2; i++) {
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011b80:	e007      	b.n	8011b92 <get_dqt+0x172>
	  quant_ptr->quantval[i] = 1;
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b86:	2101      	movs	r1, #1
 8011b88:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i = 0; i < DCTSIZE2; i++) {
 8011b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b8e:	3301      	adds	r3, #1
 8011b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b94:	2b3f      	cmp	r3, #63	; 0x3f
 8011b96:	ddf4      	ble.n	8011b82 <get_dqt+0x162>
	}
	count = length >> 1;
 8011b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b9a:	105b      	asrs	r3, r3, #1
 8011b9c:	633b      	str	r3, [r7, #48]	; 0x30
 8011b9e:	e018      	b.n	8011bd2 <get_dqt+0x1b2>
      } else
	count = DCTSIZE2;
 8011ba0:	2340      	movs	r3, #64	; 0x40
 8011ba2:	633b      	str	r3, [r7, #48]	; 0x30
 8011ba4:	e015      	b.n	8011bd2 <get_dqt+0x1b2>
    } else {
      if (length < DCTSIZE2) {
 8011ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ba8:	2b3f      	cmp	r3, #63	; 0x3f
 8011baa:	dc10      	bgt.n	8011bce <get_dqt+0x1ae>
	/* Initialize full table for safety. */
	for (i = 0; i < DCTSIZE2; i++) {
 8011bac:	2300      	movs	r3, #0
 8011bae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011bb0:	e007      	b.n	8011bc2 <get_dqt+0x1a2>
	  quant_ptr->quantval[i] = 1;
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bb6:	2101      	movs	r1, #1
 8011bb8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i = 0; i < DCTSIZE2; i++) {
 8011bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bbe:	3301      	adds	r3, #1
 8011bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bc4:	2b3f      	cmp	r3, #63	; 0x3f
 8011bc6:	ddf4      	ble.n	8011bb2 <get_dqt+0x192>
	}
	count = length;
 8011bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bca:	633b      	str	r3, [r7, #48]	; 0x30
 8011bcc:	e001      	b.n	8011bd2 <get_dqt+0x1b2>
      } else
	count = DCTSIZE2;
 8011bce:	2340      	movs	r3, #64	; 0x40
 8011bd0:	633b      	str	r3, [r7, #48]	; 0x30
 8011bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bd4:	3b04      	subs	r3, #4
 8011bd6:	2b2d      	cmp	r3, #45	; 0x2d
 8011bd8:	d870      	bhi.n	8011cbc <get_dqt+0x29c>
 8011bda:	a201      	add	r2, pc, #4	; (adr r2, 8011be0 <get_dqt+0x1c0>)
 8011bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011be0:	08011c99 	.word	0x08011c99
 8011be4:	08011cbd 	.word	0x08011cbd
 8011be8:	08011cbd 	.word	0x08011cbd
 8011bec:	08011cbd 	.word	0x08011cbd
 8011bf0:	08011cbd 	.word	0x08011cbd
 8011bf4:	08011c9f 	.word	0x08011c9f
 8011bf8:	08011cbd 	.word	0x08011cbd
 8011bfc:	08011cbd 	.word	0x08011cbd
 8011c00:	08011cbd 	.word	0x08011cbd
 8011c04:	08011cbd 	.word	0x08011cbd
 8011c08:	08011cbd 	.word	0x08011cbd
 8011c0c:	08011cbd 	.word	0x08011cbd
 8011c10:	08011ca5 	.word	0x08011ca5
 8011c14:	08011cbd 	.word	0x08011cbd
 8011c18:	08011cbd 	.word	0x08011cbd
 8011c1c:	08011cbd 	.word	0x08011cbd
 8011c20:	08011cbd 	.word	0x08011cbd
 8011c24:	08011cbd 	.word	0x08011cbd
 8011c28:	08011cbd 	.word	0x08011cbd
 8011c2c:	08011cbd 	.word	0x08011cbd
 8011c30:	08011cbd 	.word	0x08011cbd
 8011c34:	08011cab 	.word	0x08011cab
 8011c38:	08011cbd 	.word	0x08011cbd
 8011c3c:	08011cbd 	.word	0x08011cbd
 8011c40:	08011cbd 	.word	0x08011cbd
 8011c44:	08011cbd 	.word	0x08011cbd
 8011c48:	08011cbd 	.word	0x08011cbd
 8011c4c:	08011cbd 	.word	0x08011cbd
 8011c50:	08011cbd 	.word	0x08011cbd
 8011c54:	08011cbd 	.word	0x08011cbd
 8011c58:	08011cbd 	.word	0x08011cbd
 8011c5c:	08011cbd 	.word	0x08011cbd
 8011c60:	08011cb1 	.word	0x08011cb1
 8011c64:	08011cbd 	.word	0x08011cbd
 8011c68:	08011cbd 	.word	0x08011cbd
 8011c6c:	08011cbd 	.word	0x08011cbd
 8011c70:	08011cbd 	.word	0x08011cbd
 8011c74:	08011cbd 	.word	0x08011cbd
 8011c78:	08011cbd 	.word	0x08011cbd
 8011c7c:	08011cbd 	.word	0x08011cbd
 8011c80:	08011cbd 	.word	0x08011cbd
 8011c84:	08011cbd 	.word	0x08011cbd
 8011c88:	08011cbd 	.word	0x08011cbd
 8011c8c:	08011cbd 	.word	0x08011cbd
 8011c90:	08011cbd 	.word	0x08011cbd
 8011c94:	08011cb7 	.word	0x08011cb7
    }

    switch (count) {
    case (2*2): natural_order = jpeg_natural_order2; break;
 8011c98:	4b7f      	ldr	r3, [pc, #508]	; (8011e98 <get_dqt+0x478>)
 8011c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8011c9c:	e011      	b.n	8011cc2 <get_dqt+0x2a2>
    case (3*3): natural_order = jpeg_natural_order3; break;
 8011c9e:	4b7f      	ldr	r3, [pc, #508]	; (8011e9c <get_dqt+0x47c>)
 8011ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8011ca2:	e00e      	b.n	8011cc2 <get_dqt+0x2a2>
    case (4*4): natural_order = jpeg_natural_order4; break;
 8011ca4:	4b7e      	ldr	r3, [pc, #504]	; (8011ea0 <get_dqt+0x480>)
 8011ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8011ca8:	e00b      	b.n	8011cc2 <get_dqt+0x2a2>
    case (5*5): natural_order = jpeg_natural_order5; break;
 8011caa:	4b7e      	ldr	r3, [pc, #504]	; (8011ea4 <get_dqt+0x484>)
 8011cac:	627b      	str	r3, [r7, #36]	; 0x24
 8011cae:	e008      	b.n	8011cc2 <get_dqt+0x2a2>
    case (6*6): natural_order = jpeg_natural_order6; break;
 8011cb0:	4b7d      	ldr	r3, [pc, #500]	; (8011ea8 <get_dqt+0x488>)
 8011cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8011cb4:	e005      	b.n	8011cc2 <get_dqt+0x2a2>
    case (7*7): natural_order = jpeg_natural_order7; break;
 8011cb6:	4b7d      	ldr	r3, [pc, #500]	; (8011eac <get_dqt+0x48c>)
 8011cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8011cba:	e002      	b.n	8011cc2 <get_dqt+0x2a2>
    default:    natural_order = jpeg_natural_order;  break;
 8011cbc:	4b7c      	ldr	r3, [pc, #496]	; (8011eb0 <get_dqt+0x490>)
 8011cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8011cc0:	bf00      	nop
    }

    for (i = 0; i < count; i++) {
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011cc6:	e062      	b.n	8011d8e <get_dqt+0x36e>
      if (prec)
 8011cc8:	693b      	ldr	r3, [r7, #16]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d038      	beq.n	8011d40 <get_dqt+0x320>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 8011cce:	69fb      	ldr	r3, [r7, #28]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d10e      	bne.n	8011cf2 <get_dqt+0x2d2>
 8011cd4:	69bb      	ldr	r3, [r7, #24]
 8011cd6:	68db      	ldr	r3, [r3, #12]
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	4798      	blx	r3
 8011cdc:	4603      	mov	r3, r0
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d101      	bne.n	8011ce6 <get_dqt+0x2c6>
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	e0d4      	b.n	8011e90 <get_dqt+0x470>
 8011ce6:	69bb      	ldr	r3, [r7, #24]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	623b      	str	r3, [r7, #32]
 8011cec:	69bb      	ldr	r3, [r7, #24]
 8011cee:	685b      	ldr	r3, [r3, #4]
 8011cf0:	61fb      	str	r3, [r7, #28]
 8011cf2:	69fb      	ldr	r3, [r7, #28]
 8011cf4:	3b01      	subs	r3, #1
 8011cf6:	61fb      	str	r3, [r7, #28]
 8011cf8:	6a3b      	ldr	r3, [r7, #32]
 8011cfa:	1c5a      	adds	r2, r3, #1
 8011cfc:	623a      	str	r2, [r7, #32]
 8011cfe:	781b      	ldrb	r3, [r3, #0]
 8011d00:	021b      	lsls	r3, r3, #8
 8011d02:	62bb      	str	r3, [r7, #40]	; 0x28
 8011d04:	69fb      	ldr	r3, [r7, #28]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d10e      	bne.n	8011d28 <get_dqt+0x308>
 8011d0a:	69bb      	ldr	r3, [r7, #24]
 8011d0c:	68db      	ldr	r3, [r3, #12]
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	4798      	blx	r3
 8011d12:	4603      	mov	r3, r0
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d101      	bne.n	8011d1c <get_dqt+0x2fc>
 8011d18:	2300      	movs	r3, #0
 8011d1a:	e0b9      	b.n	8011e90 <get_dqt+0x470>
 8011d1c:	69bb      	ldr	r3, [r7, #24]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	623b      	str	r3, [r7, #32]
 8011d22:	69bb      	ldr	r3, [r7, #24]
 8011d24:	685b      	ldr	r3, [r3, #4]
 8011d26:	61fb      	str	r3, [r7, #28]
 8011d28:	69fb      	ldr	r3, [r7, #28]
 8011d2a:	3b01      	subs	r3, #1
 8011d2c:	61fb      	str	r3, [r7, #28]
 8011d2e:	6a3b      	ldr	r3, [r7, #32]
 8011d30:	1c5a      	adds	r2, r3, #1
 8011d32:	623a      	str	r2, [r7, #32]
 8011d34:	781b      	ldrb	r3, [r3, #0]
 8011d36:	461a      	mov	r2, r3
 8011d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d3a:	4413      	add	r3, r2
 8011d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8011d3e:	e019      	b.n	8011d74 <get_dqt+0x354>
      else
	INPUT_BYTE(cinfo, tmp, return FALSE);
 8011d40:	69fb      	ldr	r3, [r7, #28]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d10e      	bne.n	8011d64 <get_dqt+0x344>
 8011d46:	69bb      	ldr	r3, [r7, #24]
 8011d48:	68db      	ldr	r3, [r3, #12]
 8011d4a:	6878      	ldr	r0, [r7, #4]
 8011d4c:	4798      	blx	r3
 8011d4e:	4603      	mov	r3, r0
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d101      	bne.n	8011d58 <get_dqt+0x338>
 8011d54:	2300      	movs	r3, #0
 8011d56:	e09b      	b.n	8011e90 <get_dqt+0x470>
 8011d58:	69bb      	ldr	r3, [r7, #24]
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	623b      	str	r3, [r7, #32]
 8011d5e:	69bb      	ldr	r3, [r7, #24]
 8011d60:	685b      	ldr	r3, [r3, #4]
 8011d62:	61fb      	str	r3, [r7, #28]
 8011d64:	69fb      	ldr	r3, [r7, #28]
 8011d66:	3b01      	subs	r3, #1
 8011d68:	61fb      	str	r3, [r7, #28]
 8011d6a:	6a3b      	ldr	r3, [r7, #32]
 8011d6c:	1c5a      	adds	r2, r3, #1
 8011d6e:	623a      	str	r2, [r7, #32]
 8011d70:	781b      	ldrb	r3, [r3, #0]
 8011d72:	62bb      	str	r3, [r7, #40]	; 0x28
      /* We convert the zigzag-order table to natural array order. */
      quant_ptr->quantval[natural_order[i]] = (UINT16) tmp;
 8011d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d76:	009b      	lsls	r3, r3, #2
 8011d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d7a:	4413      	add	r3, r2
 8011d7c:	681a      	ldr	r2, [r3, #0]
 8011d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d80:	b299      	uxth	r1, r3
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (i = 0; i < count; i++) {
 8011d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d8a:	3301      	adds	r3, #1
 8011d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d92:	429a      	cmp	r2, r3
 8011d94:	db98      	blt.n	8011cc8 <get_dqt+0x2a8>
    }

    if (cinfo->err->trace_level >= 2) {
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011d9c:	2b01      	cmp	r3, #1
 8011d9e:	dd55      	ble.n	8011e4c <get_dqt+0x42c>
      for (i = 0; i < DCTSIZE2; i += 8) {
 8011da0:	2300      	movs	r3, #0
 8011da2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011da4:	e04f      	b.n	8011e46 <get_dqt+0x426>
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	3318      	adds	r3, #24
 8011dac:	60bb      	str	r3, [r7, #8]
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011db2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011db6:	461a      	mov	r2, r3
 8011db8:	68bb      	ldr	r3, [r7, #8]
 8011dba:	601a      	str	r2, [r3, #0]
 8011dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dbe:	1c5a      	adds	r2, r3, #1
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8011dc6:	68bb      	ldr	r3, [r7, #8]
 8011dc8:	3304      	adds	r3, #4
 8011dca:	601a      	str	r2, [r3, #0]
 8011dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dce:	1c9a      	adds	r2, r3, #2
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8011dd6:	68bb      	ldr	r3, [r7, #8]
 8011dd8:	3308      	adds	r3, #8
 8011dda:	601a      	str	r2, [r3, #0]
 8011ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dde:	1cda      	adds	r2, r3, #3
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8011de6:	68bb      	ldr	r3, [r7, #8]
 8011de8:	330c      	adds	r3, #12
 8011dea:	601a      	str	r2, [r3, #0]
 8011dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dee:	1d1a      	adds	r2, r3, #4
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8011df6:	68bb      	ldr	r3, [r7, #8]
 8011df8:	3310      	adds	r3, #16
 8011dfa:	601a      	str	r2, [r3, #0]
 8011dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dfe:	1d5a      	adds	r2, r3, #5
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8011e06:	68bb      	ldr	r3, [r7, #8]
 8011e08:	3314      	adds	r3, #20
 8011e0a:	601a      	str	r2, [r3, #0]
 8011e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e0e:	1d9a      	adds	r2, r3, #6
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8011e16:	68bb      	ldr	r3, [r7, #8]
 8011e18:	3318      	adds	r3, #24
 8011e1a:	601a      	str	r2, [r3, #0]
 8011e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e1e:	1dda      	adds	r2, r3, #7
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8011e26:	68bb      	ldr	r3, [r7, #8]
 8011e28:	331c      	adds	r3, #28
 8011e2a:	601a      	str	r2, [r3, #0]
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	225f      	movs	r2, #95	; 0x5f
 8011e32:	615a      	str	r2, [r3, #20]
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	685b      	ldr	r3, [r3, #4]
 8011e3a:	2102      	movs	r1, #2
 8011e3c:	6878      	ldr	r0, [r7, #4]
 8011e3e:	4798      	blx	r3
      for (i = 0; i < DCTSIZE2; i += 8) {
 8011e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e42:	3308      	adds	r3, #8
 8011e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e48:	2b3f      	cmp	r3, #63	; 0x3f
 8011e4a:	ddac      	ble.n	8011da6 <get_dqt+0x386>
		 quant_ptr->quantval[i+4], quant_ptr->quantval[i+5],
		 quant_ptr->quantval[i+6], quant_ptr->quantval[i+7]);
      }
    }

    length -= count;
 8011e4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e50:	1ad3      	subs	r3, r2, r3
 8011e52:	637b      	str	r3, [r7, #52]	; 0x34
    if (prec) length -= count;
 8011e54:	693b      	ldr	r3, [r7, #16]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d003      	beq.n	8011e62 <get_dqt+0x442>
 8011e5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e5e:	1ad3      	subs	r3, r2, r3
 8011e60:	637b      	str	r3, [r7, #52]	; 0x34
  while (length > 0) {
 8011e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	f73f ae24 	bgt.w	8011ab2 <get_dqt+0x92>
  }

  if (length != 0)
 8011e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d008      	beq.n	8011e82 <get_dqt+0x462>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	220c      	movs	r2, #12
 8011e76:	615a      	str	r2, [r3, #20]
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	6878      	ldr	r0, [r7, #4]
 8011e80:	4798      	blx	r3

  INPUT_SYNC(cinfo);
 8011e82:	69bb      	ldr	r3, [r7, #24]
 8011e84:	6a3a      	ldr	r2, [r7, #32]
 8011e86:	601a      	str	r2, [r3, #0]
 8011e88:	69bb      	ldr	r3, [r7, #24]
 8011e8a:	69fa      	ldr	r2, [r7, #28]
 8011e8c:	605a      	str	r2, [r3, #4]
  return TRUE;
 8011e8e:	2301      	movs	r3, #1
}
 8011e90:	4618      	mov	r0, r3
 8011e92:	3738      	adds	r7, #56	; 0x38
 8011e94:	46bd      	mov	sp, r7
 8011e96:	bd80      	pop	{r7, pc}
 8011e98:	08027ab4 	.word	0x08027ab4
 8011e9c:	08027a50 	.word	0x08027a50
 8011ea0:	080279d0 	.word	0x080279d0
 8011ea4:	0802792c 	.word	0x0802792c
 8011ea8:	0802785c 	.word	0x0802785c
 8011eac:	08027758 	.word	0x08027758
 8011eb0:	08027618 	.word	0x08027618

08011eb4 <get_dri>:


LOCAL(boolean)
get_dri (j_decompress_ptr cinfo)
/* Process a DRI marker */
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b088      	sub	sp, #32
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
  INT32 length;
  unsigned int tmp;
  INPUT_VARS(cinfo);
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	699b      	ldr	r3, [r3, #24]
 8011ec0:	617b      	str	r3, [r7, #20]
 8011ec2:	697b      	ldr	r3, [r7, #20]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	61fb      	str	r3, [r7, #28]
 8011ec8:	697b      	ldr	r3, [r7, #20]
 8011eca:	685b      	ldr	r3, [r3, #4]
 8011ecc:	61bb      	str	r3, [r7, #24]

  INPUT_2BYTES(cinfo, length, return FALSE);
 8011ece:	69bb      	ldr	r3, [r7, #24]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d10e      	bne.n	8011ef2 <get_dri+0x3e>
 8011ed4:	697b      	ldr	r3, [r7, #20]
 8011ed6:	68db      	ldr	r3, [r3, #12]
 8011ed8:	6878      	ldr	r0, [r7, #4]
 8011eda:	4798      	blx	r3
 8011edc:	4603      	mov	r3, r0
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d101      	bne.n	8011ee6 <get_dri+0x32>
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	e088      	b.n	8011ff8 <get_dri+0x144>
 8011ee6:	697b      	ldr	r3, [r7, #20]
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	61fb      	str	r3, [r7, #28]
 8011eec:	697b      	ldr	r3, [r7, #20]
 8011eee:	685b      	ldr	r3, [r3, #4]
 8011ef0:	61bb      	str	r3, [r7, #24]
 8011ef2:	69bb      	ldr	r3, [r7, #24]
 8011ef4:	3b01      	subs	r3, #1
 8011ef6:	61bb      	str	r3, [r7, #24]
 8011ef8:	69fb      	ldr	r3, [r7, #28]
 8011efa:	1c5a      	adds	r2, r3, #1
 8011efc:	61fa      	str	r2, [r7, #28]
 8011efe:	781b      	ldrb	r3, [r3, #0]
 8011f00:	021b      	lsls	r3, r3, #8
 8011f02:	613b      	str	r3, [r7, #16]
 8011f04:	69bb      	ldr	r3, [r7, #24]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d10e      	bne.n	8011f28 <get_dri+0x74>
 8011f0a:	697b      	ldr	r3, [r7, #20]
 8011f0c:	68db      	ldr	r3, [r3, #12]
 8011f0e:	6878      	ldr	r0, [r7, #4]
 8011f10:	4798      	blx	r3
 8011f12:	4603      	mov	r3, r0
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d101      	bne.n	8011f1c <get_dri+0x68>
 8011f18:	2300      	movs	r3, #0
 8011f1a:	e06d      	b.n	8011ff8 <get_dri+0x144>
 8011f1c:	697b      	ldr	r3, [r7, #20]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	61fb      	str	r3, [r7, #28]
 8011f22:	697b      	ldr	r3, [r7, #20]
 8011f24:	685b      	ldr	r3, [r3, #4]
 8011f26:	61bb      	str	r3, [r7, #24]
 8011f28:	69bb      	ldr	r3, [r7, #24]
 8011f2a:	3b01      	subs	r3, #1
 8011f2c:	61bb      	str	r3, [r7, #24]
 8011f2e:	69fb      	ldr	r3, [r7, #28]
 8011f30:	1c5a      	adds	r2, r3, #1
 8011f32:	61fa      	str	r2, [r7, #28]
 8011f34:	781b      	ldrb	r3, [r3, #0]
 8011f36:	461a      	mov	r2, r3
 8011f38:	693b      	ldr	r3, [r7, #16]
 8011f3a:	4413      	add	r3, r2
 8011f3c:	613b      	str	r3, [r7, #16]
  
  if (length != 4)
 8011f3e:	693b      	ldr	r3, [r7, #16]
 8011f40:	2b04      	cmp	r3, #4
 8011f42:	d008      	beq.n	8011f56 <get_dri+0xa2>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	220c      	movs	r2, #12
 8011f4a:	615a      	str	r2, [r3, #20]
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	6878      	ldr	r0, [r7, #4]
 8011f54:	4798      	blx	r3

  INPUT_2BYTES(cinfo, tmp, return FALSE);
 8011f56:	69bb      	ldr	r3, [r7, #24]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d10e      	bne.n	8011f7a <get_dri+0xc6>
 8011f5c:	697b      	ldr	r3, [r7, #20]
 8011f5e:	68db      	ldr	r3, [r3, #12]
 8011f60:	6878      	ldr	r0, [r7, #4]
 8011f62:	4798      	blx	r3
 8011f64:	4603      	mov	r3, r0
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d101      	bne.n	8011f6e <get_dri+0xba>
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	e044      	b.n	8011ff8 <get_dri+0x144>
 8011f6e:	697b      	ldr	r3, [r7, #20]
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	61fb      	str	r3, [r7, #28]
 8011f74:	697b      	ldr	r3, [r7, #20]
 8011f76:	685b      	ldr	r3, [r3, #4]
 8011f78:	61bb      	str	r3, [r7, #24]
 8011f7a:	69bb      	ldr	r3, [r7, #24]
 8011f7c:	3b01      	subs	r3, #1
 8011f7e:	61bb      	str	r3, [r7, #24]
 8011f80:	69fb      	ldr	r3, [r7, #28]
 8011f82:	1c5a      	adds	r2, r3, #1
 8011f84:	61fa      	str	r2, [r7, #28]
 8011f86:	781b      	ldrb	r3, [r3, #0]
 8011f88:	021b      	lsls	r3, r3, #8
 8011f8a:	60fb      	str	r3, [r7, #12]
 8011f8c:	69bb      	ldr	r3, [r7, #24]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d10e      	bne.n	8011fb0 <get_dri+0xfc>
 8011f92:	697b      	ldr	r3, [r7, #20]
 8011f94:	68db      	ldr	r3, [r3, #12]
 8011f96:	6878      	ldr	r0, [r7, #4]
 8011f98:	4798      	blx	r3
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d101      	bne.n	8011fa4 <get_dri+0xf0>
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	e029      	b.n	8011ff8 <get_dri+0x144>
 8011fa4:	697b      	ldr	r3, [r7, #20]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	61fb      	str	r3, [r7, #28]
 8011faa:	697b      	ldr	r3, [r7, #20]
 8011fac:	685b      	ldr	r3, [r3, #4]
 8011fae:	61bb      	str	r3, [r7, #24]
 8011fb0:	69bb      	ldr	r3, [r7, #24]
 8011fb2:	3b01      	subs	r3, #1
 8011fb4:	61bb      	str	r3, [r7, #24]
 8011fb6:	69fb      	ldr	r3, [r7, #28]
 8011fb8:	1c5a      	adds	r2, r3, #1
 8011fba:	61fa      	str	r2, [r7, #28]
 8011fbc:	781b      	ldrb	r3, [r3, #0]
 8011fbe:	461a      	mov	r2, r3
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	4413      	add	r3, r2
 8011fc4:	60fb      	str	r3, [r7, #12]

  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	2254      	movs	r2, #84	; 0x54
 8011fcc:	615a      	str	r2, [r3, #20]
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	68fa      	ldr	r2, [r7, #12]
 8011fd4:	619a      	str	r2, [r3, #24]
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	685b      	ldr	r3, [r3, #4]
 8011fdc:	2101      	movs	r1, #1
 8011fde:	6878      	ldr	r0, [r7, #4]
 8011fe0:	4798      	blx	r3

  cinfo->restart_interval = tmp;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	68fa      	ldr	r2, [r7, #12]
 8011fe6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

  INPUT_SYNC(cinfo);
 8011fea:	697b      	ldr	r3, [r7, #20]
 8011fec:	69fa      	ldr	r2, [r7, #28]
 8011fee:	601a      	str	r2, [r3, #0]
 8011ff0:	697b      	ldr	r3, [r7, #20]
 8011ff2:	69ba      	ldr	r2, [r7, #24]
 8011ff4:	605a      	str	r2, [r3, #4]
  return TRUE;
 8011ff6:	2301      	movs	r3, #1
}
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	3720      	adds	r7, #32
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bd80      	pop	{r7, pc}

08012000 <examine_app0>:
	      unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP0.
 * Take appropriate action if it is a JFIF marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b086      	sub	sp, #24
 8012004:	af00      	add	r7, sp, #0
 8012006:	60f8      	str	r0, [r7, #12]
 8012008:	60b9      	str	r1, [r7, #8]
 801200a:	607a      	str	r2, [r7, #4]
 801200c:	603b      	str	r3, [r7, #0]
  INT32 totallen = (INT32) datalen + remaining;
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	683a      	ldr	r2, [r7, #0]
 8012012:	4413      	add	r3, r2
 8012014:	617b      	str	r3, [r7, #20]

  if (datalen >= APP0_DATA_LEN &&
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	2b0d      	cmp	r3, #13
 801201a:	f240 80d8 	bls.w	80121ce <examine_app0+0x1ce>
      GETJOCTET(data[0]) == 0x4A &&
 801201e:	68bb      	ldr	r3, [r7, #8]
 8012020:	781b      	ldrb	r3, [r3, #0]
  if (datalen >= APP0_DATA_LEN &&
 8012022:	2b4a      	cmp	r3, #74	; 0x4a
 8012024:	f040 80d3 	bne.w	80121ce <examine_app0+0x1ce>
      GETJOCTET(data[1]) == 0x46 &&
 8012028:	68bb      	ldr	r3, [r7, #8]
 801202a:	3301      	adds	r3, #1
 801202c:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[0]) == 0x4A &&
 801202e:	2b46      	cmp	r3, #70	; 0x46
 8012030:	f040 80cd 	bne.w	80121ce <examine_app0+0x1ce>
      GETJOCTET(data[2]) == 0x49 &&
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	3302      	adds	r3, #2
 8012038:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[1]) == 0x46 &&
 801203a:	2b49      	cmp	r3, #73	; 0x49
 801203c:	f040 80c7 	bne.w	80121ce <examine_app0+0x1ce>
      GETJOCTET(data[3]) == 0x46 &&
 8012040:	68bb      	ldr	r3, [r7, #8]
 8012042:	3303      	adds	r3, #3
 8012044:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[2]) == 0x49 &&
 8012046:	2b46      	cmp	r3, #70	; 0x46
 8012048:	f040 80c1 	bne.w	80121ce <examine_app0+0x1ce>
      GETJOCTET(data[4]) == 0) {
 801204c:	68bb      	ldr	r3, [r7, #8]
 801204e:	3304      	adds	r3, #4
 8012050:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[3]) == 0x46 &&
 8012052:	2b00      	cmp	r3, #0
 8012054:	f040 80bb 	bne.w	80121ce <examine_app0+0x1ce>
    /* Found JFIF APP0 marker: save info */
    cinfo->saw_JFIF_marker = TRUE;
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	2201      	movs	r2, #1
 801205c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    cinfo->JFIF_major_version = GETJOCTET(data[5]);
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	795a      	ldrb	r2, [r3, #5]
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
    cinfo->JFIF_minor_version = GETJOCTET(data[6]);
 801206a:	68bb      	ldr	r3, [r7, #8]
 801206c:	799a      	ldrb	r2, [r3, #6]
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
    cinfo->density_unit = GETJOCTET(data[7]);
 8012074:	68bb      	ldr	r3, [r7, #8]
 8012076:	79da      	ldrb	r2, [r3, #7]
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
    cinfo->X_density = (GETJOCTET(data[8]) << 8) + GETJOCTET(data[9]);
 801207e:	68bb      	ldr	r3, [r7, #8]
 8012080:	3308      	adds	r3, #8
 8012082:	781b      	ldrb	r3, [r3, #0]
 8012084:	b29b      	uxth	r3, r3
 8012086:	021b      	lsls	r3, r3, #8
 8012088:	b29a      	uxth	r2, r3
 801208a:	68bb      	ldr	r3, [r7, #8]
 801208c:	3309      	adds	r3, #9
 801208e:	781b      	ldrb	r3, [r3, #0]
 8012090:	b29b      	uxth	r3, r3
 8012092:	4413      	add	r3, r2
 8012094:	b29a      	uxth	r2, r3
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    cinfo->Y_density = (GETJOCTET(data[10]) << 8) + GETJOCTET(data[11]);
 801209c:	68bb      	ldr	r3, [r7, #8]
 801209e:	330a      	adds	r3, #10
 80120a0:	781b      	ldrb	r3, [r3, #0]
 80120a2:	b29b      	uxth	r3, r3
 80120a4:	021b      	lsls	r3, r3, #8
 80120a6:	b29a      	uxth	r2, r3
 80120a8:	68bb      	ldr	r3, [r7, #8]
 80120aa:	330b      	adds	r3, #11
 80120ac:	781b      	ldrb	r3, [r3, #0]
 80120ae:	b29b      	uxth	r3, r3
 80120b0:	4413      	add	r3, r2
 80120b2:	b29a      	uxth	r2, r3
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
     * Major version must be 1, anything else signals an incompatible change.
     * (We used to treat this as an error, but now it's a nonfatal warning,
     * because some bozo at Hijaak couldn't read the spec.)
     * Minor version should be 0..2, but process anyway if newer.
     */
    if (cinfo->JFIF_major_version != 1)
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 80120c0:	2b01      	cmp	r3, #1
 80120c2:	d016      	beq.n	80120f2 <examine_app0+0xf2>
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	227a      	movs	r2, #122	; 0x7a
 80120ca:	615a      	str	r2, [r3, #20]
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	f893 2120 	ldrb.w	r2, [r3, #288]	; 0x120
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	619a      	str	r2, [r3, #24]
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	f893 2121 	ldrb.w	r2, [r3, #289]	; 0x121
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	61da      	str	r2, [r3, #28]
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	685b      	ldr	r3, [r3, #4]
 80120ea:	f04f 31ff 	mov.w	r1, #4294967295
 80120ee:	68f8      	ldr	r0, [r7, #12]
 80120f0:	4798      	blx	r3
	      cinfo->JFIF_major_version, cinfo->JFIF_minor_version);
    /* Generate trace messages */
    TRACEMS5(cinfo, 1, JTRC_JFIF,
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	3318      	adds	r3, #24
 80120f8:	613b      	str	r3, [r7, #16]
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8012100:	461a      	mov	r2, r3
 8012102:	693b      	ldr	r3, [r7, #16]
 8012104:	601a      	str	r2, [r3, #0]
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	f893 2121 	ldrb.w	r2, [r3, #289]	; 0x121
 801210c:	693b      	ldr	r3, [r7, #16]
 801210e:	3304      	adds	r3, #4
 8012110:	601a      	str	r2, [r3, #0]
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	f8b3 2124 	ldrh.w	r2, [r3, #292]	; 0x124
 8012118:	693b      	ldr	r3, [r7, #16]
 801211a:	3308      	adds	r3, #8
 801211c:	601a      	str	r2, [r3, #0]
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
 8012124:	693b      	ldr	r3, [r7, #16]
 8012126:	330c      	adds	r3, #12
 8012128:	601a      	str	r2, [r3, #0]
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	f893 2122 	ldrb.w	r2, [r3, #290]	; 0x122
 8012130:	693b      	ldr	r3, [r7, #16]
 8012132:	3310      	adds	r3, #16
 8012134:	601a      	str	r2, [r3, #0]
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	2259      	movs	r2, #89	; 0x59
 801213c:	615a      	str	r2, [r3, #20]
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	685b      	ldr	r3, [r3, #4]
 8012144:	2101      	movs	r1, #1
 8012146:	68f8      	ldr	r0, [r7, #12]
 8012148:	4798      	blx	r3
	     cinfo->JFIF_major_version, cinfo->JFIF_minor_version,
	     cinfo->X_density, cinfo->Y_density, cinfo->density_unit);
    /* Validate thumbnail dimensions and issue appropriate messages */
    if (GETJOCTET(data[12]) | GETJOCTET(data[13]))
 801214a:	68bb      	ldr	r3, [r7, #8]
 801214c:	330c      	adds	r3, #12
 801214e:	781a      	ldrb	r2, [r3, #0]
 8012150:	68bb      	ldr	r3, [r7, #8]
 8012152:	330d      	adds	r3, #13
 8012154:	781b      	ldrb	r3, [r3, #0]
 8012156:	4313      	orrs	r3, r2
 8012158:	b2db      	uxtb	r3, r3
 801215a:	2b00      	cmp	r3, #0
 801215c:	d015      	beq.n	801218a <examine_app0+0x18a>
      TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL,
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	225c      	movs	r2, #92	; 0x5c
 8012164:	615a      	str	r2, [r3, #20]
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	330c      	adds	r3, #12
 801216a:	781a      	ldrb	r2, [r3, #0]
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	619a      	str	r2, [r3, #24]
 8012172:	68bb      	ldr	r3, [r7, #8]
 8012174:	330d      	adds	r3, #13
 8012176:	781a      	ldrb	r2, [r3, #0]
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	61da      	str	r2, [r3, #28]
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	685b      	ldr	r3, [r3, #4]
 8012184:	2101      	movs	r1, #1
 8012186:	68f8      	ldr	r0, [r7, #12]
 8012188:	4798      	blx	r3
	       GETJOCTET(data[12]), GETJOCTET(data[13]));
    totallen -= APP0_DATA_LEN;
 801218a:	697b      	ldr	r3, [r7, #20]
 801218c:	3b0e      	subs	r3, #14
 801218e:	617b      	str	r3, [r7, #20]
    if (totallen !=
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 8012190:	68bb      	ldr	r3, [r7, #8]
 8012192:	330c      	adds	r3, #12
 8012194:	781b      	ldrb	r3, [r3, #0]
 8012196:	461a      	mov	r2, r3
 8012198:	68bb      	ldr	r3, [r7, #8]
 801219a:	330d      	adds	r3, #13
 801219c:	781b      	ldrb	r3, [r3, #0]
 801219e:	fb03 f202 	mul.w	r2, r3, r2
 80121a2:	4613      	mov	r3, r2
 80121a4:	005b      	lsls	r3, r3, #1
 80121a6:	4413      	add	r3, r2
    if (totallen !=
 80121a8:	697a      	ldr	r2, [r7, #20]
 80121aa:	429a      	cmp	r2, r3
 80121ac:	f000 8088 	beq.w	80122c0 <examine_app0+0x2c0>
      TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) totallen);
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	225a      	movs	r2, #90	; 0x5a
 80121b6:	615a      	str	r2, [r3, #20]
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	697a      	ldr	r2, [r7, #20]
 80121be:	619a      	str	r2, [r3, #24]
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	685b      	ldr	r3, [r3, #4]
 80121c6:	2101      	movs	r1, #1
 80121c8:	68f8      	ldr	r0, [r7, #12]
 80121ca:	4798      	blx	r3
    if (totallen !=
 80121cc:	e078      	b.n	80122c0 <examine_app0+0x2c0>
  } else if (datalen >= 6 &&
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	2b05      	cmp	r3, #5
 80121d2:	d966      	bls.n	80122a2 <examine_app0+0x2a2>
      GETJOCTET(data[0]) == 0x4A &&
 80121d4:	68bb      	ldr	r3, [r7, #8]
 80121d6:	781b      	ldrb	r3, [r3, #0]
  } else if (datalen >= 6 &&
 80121d8:	2b4a      	cmp	r3, #74	; 0x4a
 80121da:	d162      	bne.n	80122a2 <examine_app0+0x2a2>
      GETJOCTET(data[1]) == 0x46 &&
 80121dc:	68bb      	ldr	r3, [r7, #8]
 80121de:	3301      	adds	r3, #1
 80121e0:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[0]) == 0x4A &&
 80121e2:	2b46      	cmp	r3, #70	; 0x46
 80121e4:	d15d      	bne.n	80122a2 <examine_app0+0x2a2>
      GETJOCTET(data[2]) == 0x58 &&
 80121e6:	68bb      	ldr	r3, [r7, #8]
 80121e8:	3302      	adds	r3, #2
 80121ea:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[1]) == 0x46 &&
 80121ec:	2b58      	cmp	r3, #88	; 0x58
 80121ee:	d158      	bne.n	80122a2 <examine_app0+0x2a2>
      GETJOCTET(data[3]) == 0x58 &&
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	3303      	adds	r3, #3
 80121f4:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[2]) == 0x58 &&
 80121f6:	2b58      	cmp	r3, #88	; 0x58
 80121f8:	d153      	bne.n	80122a2 <examine_app0+0x2a2>
      GETJOCTET(data[4]) == 0) {
 80121fa:	68bb      	ldr	r3, [r7, #8]
 80121fc:	3304      	adds	r3, #4
 80121fe:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[3]) == 0x58 &&
 8012200:	2b00      	cmp	r3, #0
 8012202:	d14e      	bne.n	80122a2 <examine_app0+0x2a2>
    /* Found JFIF "JFXX" extension APP0 marker */
    /* The library doesn't actually do anything with these,
     * but we try to produce a helpful trace message.
     */
    switch (GETJOCTET(data[5])) {
 8012204:	68bb      	ldr	r3, [r7, #8]
 8012206:	3305      	adds	r3, #5
 8012208:	781b      	ldrb	r3, [r3, #0]
 801220a:	2b13      	cmp	r3, #19
 801220c:	d024      	beq.n	8012258 <examine_app0+0x258>
 801220e:	2b13      	cmp	r3, #19
 8012210:	dc31      	bgt.n	8012276 <examine_app0+0x276>
 8012212:	2b10      	cmp	r3, #16
 8012214:	d002      	beq.n	801221c <examine_app0+0x21c>
 8012216:	2b11      	cmp	r3, #17
 8012218:	d00f      	beq.n	801223a <examine_app0+0x23a>
 801221a:	e02c      	b.n	8012276 <examine_app0+0x276>
    case 0x10:
      TRACEMS1(cinfo, 1, JTRC_THUMB_JPEG, (int) totallen);
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	226e      	movs	r2, #110	; 0x6e
 8012222:	615a      	str	r2, [r3, #20]
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	697a      	ldr	r2, [r7, #20]
 801222a:	619a      	str	r2, [r3, #24]
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	685b      	ldr	r3, [r3, #4]
 8012232:	2101      	movs	r1, #1
 8012234:	68f8      	ldr	r0, [r7, #12]
 8012236:	4798      	blx	r3
      break;
 8012238:	e032      	b.n	80122a0 <examine_app0+0x2a0>
    case 0x11:
      TRACEMS1(cinfo, 1, JTRC_THUMB_PALETTE, (int) totallen);
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	226f      	movs	r2, #111	; 0x6f
 8012240:	615a      	str	r2, [r3, #20]
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	697a      	ldr	r2, [r7, #20]
 8012248:	619a      	str	r2, [r3, #24]
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	685b      	ldr	r3, [r3, #4]
 8012250:	2101      	movs	r1, #1
 8012252:	68f8      	ldr	r0, [r7, #12]
 8012254:	4798      	blx	r3
      break;
 8012256:	e023      	b.n	80122a0 <examine_app0+0x2a0>
    case 0x13:
      TRACEMS1(cinfo, 1, JTRC_THUMB_RGB, (int) totallen);
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	2270      	movs	r2, #112	; 0x70
 801225e:	615a      	str	r2, [r3, #20]
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	697a      	ldr	r2, [r7, #20]
 8012266:	619a      	str	r2, [r3, #24]
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	685b      	ldr	r3, [r3, #4]
 801226e:	2101      	movs	r1, #1
 8012270:	68f8      	ldr	r0, [r7, #12]
 8012272:	4798      	blx	r3
      break;
 8012274:	e014      	b.n	80122a0 <examine_app0+0x2a0>
    default:
      TRACEMS2(cinfo, 1, JTRC_JFIF_EXTENSION,
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	225b      	movs	r2, #91	; 0x5b
 801227c:	615a      	str	r2, [r3, #20]
 801227e:	68bb      	ldr	r3, [r7, #8]
 8012280:	3305      	adds	r3, #5
 8012282:	781a      	ldrb	r2, [r3, #0]
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	619a      	str	r2, [r3, #24]
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	697a      	ldr	r2, [r7, #20]
 8012290:	61da      	str	r2, [r3, #28]
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	685b      	ldr	r3, [r3, #4]
 8012298:	2101      	movs	r1, #1
 801229a:	68f8      	ldr	r0, [r7, #12]
 801229c:	4798      	blx	r3
	       GETJOCTET(data[5]), (int) totallen);
      break;
 801229e:	bf00      	nop
    switch (GETJOCTET(data[5])) {
 80122a0:	e00e      	b.n	80122c0 <examine_app0+0x2c0>
    }
  } else {
    /* Start of APP0 does not match "JFIF" or "JFXX", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	224f      	movs	r2, #79	; 0x4f
 80122a8:	615a      	str	r2, [r3, #20]
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	697a      	ldr	r2, [r7, #20]
 80122b0:	619a      	str	r2, [r3, #24]
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	685b      	ldr	r3, [r3, #4]
 80122b8:	2101      	movs	r1, #1
 80122ba:	68f8      	ldr	r0, [r7, #12]
 80122bc:	4798      	blx	r3
  }
}
 80122be:	bf00      	nop
 80122c0:	bf00      	nop
 80122c2:	3718      	adds	r7, #24
 80122c4:	46bd      	mov	sp, r7
 80122c6:	bd80      	pop	{r7, pc}

080122c8 <examine_app14>:
	       unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP14.
 * Take appropriate action if it is an Adobe marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b08a      	sub	sp, #40	; 0x28
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	60f8      	str	r0, [r7, #12]
 80122d0:	60b9      	str	r1, [r7, #8]
 80122d2:	607a      	str	r2, [r7, #4]
 80122d4:	603b      	str	r3, [r7, #0]
  unsigned int version, flags0, flags1, transform;

  if (datalen >= APP14_DATA_LEN &&
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	2b0b      	cmp	r3, #11
 80122da:	d95d      	bls.n	8012398 <examine_app14+0xd0>
      GETJOCTET(data[0]) == 0x41 &&
 80122dc:	68bb      	ldr	r3, [r7, #8]
 80122de:	781b      	ldrb	r3, [r3, #0]
  if (datalen >= APP14_DATA_LEN &&
 80122e0:	2b41      	cmp	r3, #65	; 0x41
 80122e2:	d159      	bne.n	8012398 <examine_app14+0xd0>
      GETJOCTET(data[1]) == 0x64 &&
 80122e4:	68bb      	ldr	r3, [r7, #8]
 80122e6:	3301      	adds	r3, #1
 80122e8:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[0]) == 0x41 &&
 80122ea:	2b64      	cmp	r3, #100	; 0x64
 80122ec:	d154      	bne.n	8012398 <examine_app14+0xd0>
      GETJOCTET(data[2]) == 0x6F &&
 80122ee:	68bb      	ldr	r3, [r7, #8]
 80122f0:	3302      	adds	r3, #2
 80122f2:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[1]) == 0x64 &&
 80122f4:	2b6f      	cmp	r3, #111	; 0x6f
 80122f6:	d14f      	bne.n	8012398 <examine_app14+0xd0>
      GETJOCTET(data[3]) == 0x62 &&
 80122f8:	68bb      	ldr	r3, [r7, #8]
 80122fa:	3303      	adds	r3, #3
 80122fc:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[2]) == 0x6F &&
 80122fe:	2b62      	cmp	r3, #98	; 0x62
 8012300:	d14a      	bne.n	8012398 <examine_app14+0xd0>
      GETJOCTET(data[4]) == 0x65) {
 8012302:	68bb      	ldr	r3, [r7, #8]
 8012304:	3304      	adds	r3, #4
 8012306:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[3]) == 0x62 &&
 8012308:	2b65      	cmp	r3, #101	; 0x65
 801230a:	d145      	bne.n	8012398 <examine_app14+0xd0>
    /* Found Adobe APP14 marker */
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 801230c:	68bb      	ldr	r3, [r7, #8]
 801230e:	3305      	adds	r3, #5
 8012310:	781b      	ldrb	r3, [r3, #0]
 8012312:	021b      	lsls	r3, r3, #8
 8012314:	68ba      	ldr	r2, [r7, #8]
 8012316:	3206      	adds	r2, #6
 8012318:	7812      	ldrb	r2, [r2, #0]
 801231a:	4413      	add	r3, r2
 801231c:	627b      	str	r3, [r7, #36]	; 0x24
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 801231e:	68bb      	ldr	r3, [r7, #8]
 8012320:	3307      	adds	r3, #7
 8012322:	781b      	ldrb	r3, [r3, #0]
 8012324:	021b      	lsls	r3, r3, #8
 8012326:	68ba      	ldr	r2, [r7, #8]
 8012328:	3208      	adds	r2, #8
 801232a:	7812      	ldrb	r2, [r2, #0]
 801232c:	4413      	add	r3, r2
 801232e:	623b      	str	r3, [r7, #32]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 8012330:	68bb      	ldr	r3, [r7, #8]
 8012332:	3309      	adds	r3, #9
 8012334:	781b      	ldrb	r3, [r3, #0]
 8012336:	021b      	lsls	r3, r3, #8
 8012338:	68ba      	ldr	r2, [r7, #8]
 801233a:	320a      	adds	r2, #10
 801233c:	7812      	ldrb	r2, [r2, #0]
 801233e:	4413      	add	r3, r2
 8012340:	61fb      	str	r3, [r7, #28]
    transform = GETJOCTET(data[11]);
 8012342:	68bb      	ldr	r3, [r7, #8]
 8012344:	330b      	adds	r3, #11
 8012346:	781b      	ldrb	r3, [r3, #0]
 8012348:	61bb      	str	r3, [r7, #24]
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	3318      	adds	r3, #24
 8012350:	617b      	str	r3, [r7, #20]
 8012352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012354:	697b      	ldr	r3, [r7, #20]
 8012356:	601a      	str	r2, [r3, #0]
 8012358:	697b      	ldr	r3, [r7, #20]
 801235a:	3304      	adds	r3, #4
 801235c:	6a3a      	ldr	r2, [r7, #32]
 801235e:	601a      	str	r2, [r3, #0]
 8012360:	697b      	ldr	r3, [r7, #20]
 8012362:	3308      	adds	r3, #8
 8012364:	69fa      	ldr	r2, [r7, #28]
 8012366:	601a      	str	r2, [r3, #0]
 8012368:	697b      	ldr	r3, [r7, #20]
 801236a:	330c      	adds	r3, #12
 801236c:	69ba      	ldr	r2, [r7, #24]
 801236e:	601a      	str	r2, [r3, #0]
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	224e      	movs	r2, #78	; 0x4e
 8012376:	615a      	str	r2, [r3, #20]
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	685b      	ldr	r3, [r3, #4]
 801237e:	2101      	movs	r1, #1
 8012380:	68f8      	ldr	r0, [r7, #12]
 8012382:	4798      	blx	r3
    cinfo->saw_Adobe_marker = TRUE;
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	2201      	movs	r2, #1
 8012388:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    cinfo->Adobe_transform = (UINT8) transform;
 801238c:	69bb      	ldr	r3, [r7, #24]
 801238e:	b2da      	uxtb	r2, r3
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
 8012396:	e010      	b.n	80123ba <examine_app14+0xf2>
  } else {
    /* Start of APP14 does not match "Adobe", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	2250      	movs	r2, #80	; 0x50
 801239e:	615a      	str	r2, [r3, #20]
 80123a0:	683a      	ldr	r2, [r7, #0]
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	441a      	add	r2, r3
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	619a      	str	r2, [r3, #24]
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	685b      	ldr	r3, [r3, #4]
 80123b2:	2101      	movs	r1, #1
 80123b4:	68f8      	ldr	r0, [r7, #12]
 80123b6:	4798      	blx	r3
  }
}
 80123b8:	bf00      	nop
 80123ba:	bf00      	nop
 80123bc:	3728      	adds	r7, #40	; 0x28
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}

080123c2 <get_interesting_appn>:


METHODDEF(boolean)
get_interesting_appn (j_decompress_ptr cinfo)
/* Process an APP0 or APP14 marker without saving it */
{
 80123c2:	b580      	push	{r7, lr}
 80123c4:	b08c      	sub	sp, #48	; 0x30
 80123c6:	af00      	add	r7, sp, #0
 80123c8:	6078      	str	r0, [r7, #4]
  INT32 length;
  JOCTET b[APPN_DATA_LEN];
  unsigned int i, numtoread;
  INPUT_VARS(cinfo);
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	699b      	ldr	r3, [r3, #24]
 80123ce:	61fb      	str	r3, [r7, #28]
 80123d0:	69fb      	ldr	r3, [r7, #28]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	627b      	str	r3, [r7, #36]	; 0x24
 80123d6:	69fb      	ldr	r3, [r7, #28]
 80123d8:	685b      	ldr	r3, [r3, #4]
 80123da:	623b      	str	r3, [r7, #32]

  INPUT_2BYTES(cinfo, length, return FALSE);
 80123dc:	6a3b      	ldr	r3, [r7, #32]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d10e      	bne.n	8012400 <get_interesting_appn+0x3e>
 80123e2:	69fb      	ldr	r3, [r7, #28]
 80123e4:	68db      	ldr	r3, [r3, #12]
 80123e6:	6878      	ldr	r0, [r7, #4]
 80123e8:	4798      	blx	r3
 80123ea:	4603      	mov	r3, r0
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d101      	bne.n	80123f4 <get_interesting_appn+0x32>
 80123f0:	2300      	movs	r3, #0
 80123f2:	e0a1      	b.n	8012538 <get_interesting_appn+0x176>
 80123f4:	69fb      	ldr	r3, [r7, #28]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	627b      	str	r3, [r7, #36]	; 0x24
 80123fa:	69fb      	ldr	r3, [r7, #28]
 80123fc:	685b      	ldr	r3, [r3, #4]
 80123fe:	623b      	str	r3, [r7, #32]
 8012400:	6a3b      	ldr	r3, [r7, #32]
 8012402:	3b01      	subs	r3, #1
 8012404:	623b      	str	r3, [r7, #32]
 8012406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012408:	1c5a      	adds	r2, r3, #1
 801240a:	627a      	str	r2, [r7, #36]	; 0x24
 801240c:	781b      	ldrb	r3, [r3, #0]
 801240e:	021b      	lsls	r3, r3, #8
 8012410:	61bb      	str	r3, [r7, #24]
 8012412:	6a3b      	ldr	r3, [r7, #32]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d10e      	bne.n	8012436 <get_interesting_appn+0x74>
 8012418:	69fb      	ldr	r3, [r7, #28]
 801241a:	68db      	ldr	r3, [r3, #12]
 801241c:	6878      	ldr	r0, [r7, #4]
 801241e:	4798      	blx	r3
 8012420:	4603      	mov	r3, r0
 8012422:	2b00      	cmp	r3, #0
 8012424:	d101      	bne.n	801242a <get_interesting_appn+0x68>
 8012426:	2300      	movs	r3, #0
 8012428:	e086      	b.n	8012538 <get_interesting_appn+0x176>
 801242a:	69fb      	ldr	r3, [r7, #28]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	627b      	str	r3, [r7, #36]	; 0x24
 8012430:	69fb      	ldr	r3, [r7, #28]
 8012432:	685b      	ldr	r3, [r3, #4]
 8012434:	623b      	str	r3, [r7, #32]
 8012436:	6a3b      	ldr	r3, [r7, #32]
 8012438:	3b01      	subs	r3, #1
 801243a:	623b      	str	r3, [r7, #32]
 801243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801243e:	1c5a      	adds	r2, r3, #1
 8012440:	627a      	str	r2, [r7, #36]	; 0x24
 8012442:	781b      	ldrb	r3, [r3, #0]
 8012444:	461a      	mov	r2, r3
 8012446:	69bb      	ldr	r3, [r7, #24]
 8012448:	4413      	add	r3, r2
 801244a:	61bb      	str	r3, [r7, #24]
  length -= 2;
 801244c:	69bb      	ldr	r3, [r7, #24]
 801244e:	3b02      	subs	r3, #2
 8012450:	61bb      	str	r3, [r7, #24]

  /* get the interesting part of the marker data */
  if (length >= APPN_DATA_LEN)
 8012452:	69bb      	ldr	r3, [r7, #24]
 8012454:	2b0d      	cmp	r3, #13
 8012456:	dd02      	ble.n	801245e <get_interesting_appn+0x9c>
    numtoread = APPN_DATA_LEN;
 8012458:	230e      	movs	r3, #14
 801245a:	62bb      	str	r3, [r7, #40]	; 0x28
 801245c:	e007      	b.n	801246e <get_interesting_appn+0xac>
  else if (length > 0)
 801245e:	69bb      	ldr	r3, [r7, #24]
 8012460:	2b00      	cmp	r3, #0
 8012462:	dd02      	ble.n	801246a <get_interesting_appn+0xa8>
    numtoread = (unsigned int) length;
 8012464:	69bb      	ldr	r3, [r7, #24]
 8012466:	62bb      	str	r3, [r7, #40]	; 0x28
 8012468:	e001      	b.n	801246e <get_interesting_appn+0xac>
  else
    numtoread = 0;
 801246a:	2300      	movs	r3, #0
 801246c:	62bb      	str	r3, [r7, #40]	; 0x28
  for (i = 0; i < numtoread; i++)
 801246e:	2300      	movs	r3, #0
 8012470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012472:	e021      	b.n	80124b8 <get_interesting_appn+0xf6>
    INPUT_BYTE(cinfo, b[i], return FALSE);
 8012474:	6a3b      	ldr	r3, [r7, #32]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d10e      	bne.n	8012498 <get_interesting_appn+0xd6>
 801247a:	69fb      	ldr	r3, [r7, #28]
 801247c:	68db      	ldr	r3, [r3, #12]
 801247e:	6878      	ldr	r0, [r7, #4]
 8012480:	4798      	blx	r3
 8012482:	4603      	mov	r3, r0
 8012484:	2b00      	cmp	r3, #0
 8012486:	d101      	bne.n	801248c <get_interesting_appn+0xca>
 8012488:	2300      	movs	r3, #0
 801248a:	e055      	b.n	8012538 <get_interesting_appn+0x176>
 801248c:	69fb      	ldr	r3, [r7, #28]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	627b      	str	r3, [r7, #36]	; 0x24
 8012492:	69fb      	ldr	r3, [r7, #28]
 8012494:	685b      	ldr	r3, [r3, #4]
 8012496:	623b      	str	r3, [r7, #32]
 8012498:	6a3b      	ldr	r3, [r7, #32]
 801249a:	3b01      	subs	r3, #1
 801249c:	623b      	str	r3, [r7, #32]
 801249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a0:	1c5a      	adds	r2, r3, #1
 80124a2:	627a      	str	r2, [r7, #36]	; 0x24
 80124a4:	7819      	ldrb	r1, [r3, #0]
 80124a6:	f107 0208 	add.w	r2, r7, #8
 80124aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ac:	4413      	add	r3, r2
 80124ae:	460a      	mov	r2, r1
 80124b0:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < numtoread; i++)
 80124b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124b4:	3301      	adds	r3, #1
 80124b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80124b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80124ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124bc:	429a      	cmp	r2, r3
 80124be:	d3d9      	bcc.n	8012474 <get_interesting_appn+0xb2>
  length -= numtoread;
 80124c0:	69ba      	ldr	r2, [r7, #24]
 80124c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124c4:	1ad3      	subs	r3, r2, r3
 80124c6:	61bb      	str	r3, [r7, #24]

  /* process it */
  switch (cinfo->unread_marker) {
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80124ce:	2be0      	cmp	r3, #224	; 0xe0
 80124d0:	d002      	beq.n	80124d8 <get_interesting_appn+0x116>
 80124d2:	2bee      	cmp	r3, #238	; 0xee
 80124d4:	d008      	beq.n	80124e8 <get_interesting_appn+0x126>
 80124d6:	e00f      	b.n	80124f8 <get_interesting_appn+0x136>
  case M_APP0:
    examine_app0(cinfo, (JOCTET FAR *) b, numtoread, length);
 80124d8:	f107 0108 	add.w	r1, r7, #8
 80124dc:	69bb      	ldr	r3, [r7, #24]
 80124de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80124e0:	6878      	ldr	r0, [r7, #4]
 80124e2:	f7ff fd8d 	bl	8012000 <examine_app0>
    break;
 80124e6:	e017      	b.n	8012518 <get_interesting_appn+0x156>
  case M_APP14:
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
 80124e8:	f107 0108 	add.w	r1, r7, #8
 80124ec:	69bb      	ldr	r3, [r7, #24]
 80124ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80124f0:	6878      	ldr	r0, [r7, #4]
 80124f2:	f7ff fee9 	bl	80122c8 <examine_app14>
    break;
 80124f6:	e00f      	b.n	8012518 <get_interesting_appn+0x156>
  default:
    /* can't get here unless jpeg_save_markers chooses wrong processor */
    ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	2246      	movs	r2, #70	; 0x46
 80124fe:	615a      	str	r2, [r3, #20]
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	687a      	ldr	r2, [r7, #4]
 8012506:	f8d2 21b4 	ldr.w	r2, [r2, #436]	; 0x1b4
 801250a:	619a      	str	r2, [r3, #24]
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	6878      	ldr	r0, [r7, #4]
 8012514:	4798      	blx	r3
    break;
 8012516:	bf00      	nop
  }

  /* skip any remaining data -- could be lots */
  INPUT_SYNC(cinfo);
 8012518:	69fb      	ldr	r3, [r7, #28]
 801251a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801251c:	601a      	str	r2, [r3, #0]
 801251e:	69fb      	ldr	r3, [r7, #28]
 8012520:	6a3a      	ldr	r2, [r7, #32]
 8012522:	605a      	str	r2, [r3, #4]
  if (length > 0)
 8012524:	69bb      	ldr	r3, [r7, #24]
 8012526:	2b00      	cmp	r3, #0
 8012528:	dd05      	ble.n	8012536 <get_interesting_appn+0x174>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	699b      	ldr	r3, [r3, #24]
 801252e:	691b      	ldr	r3, [r3, #16]
 8012530:	69b9      	ldr	r1, [r7, #24]
 8012532:	6878      	ldr	r0, [r7, #4]
 8012534:	4798      	blx	r3

  return TRUE;
 8012536:	2301      	movs	r3, #1
}
 8012538:	4618      	mov	r0, r3
 801253a:	3730      	adds	r7, #48	; 0x30
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}

08012540 <skip_variable>:


METHODDEF(boolean)
skip_variable (j_decompress_ptr cinfo)
/* Skip over an unknown or uninteresting variable-length marker */
{
 8012540:	b580      	push	{r7, lr}
 8012542:	b086      	sub	sp, #24
 8012544:	af00      	add	r7, sp, #0
 8012546:	6078      	str	r0, [r7, #4]
  INT32 length;
  INPUT_VARS(cinfo);
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	699b      	ldr	r3, [r3, #24]
 801254c:	60fb      	str	r3, [r7, #12]
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	617b      	str	r3, [r7, #20]
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	685b      	ldr	r3, [r3, #4]
 8012558:	613b      	str	r3, [r7, #16]

  INPUT_2BYTES(cinfo, length, return FALSE);
 801255a:	693b      	ldr	r3, [r7, #16]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d10e      	bne.n	801257e <skip_variable+0x3e>
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	68db      	ldr	r3, [r3, #12]
 8012564:	6878      	ldr	r0, [r7, #4]
 8012566:	4798      	blx	r3
 8012568:	4603      	mov	r3, r0
 801256a:	2b00      	cmp	r3, #0
 801256c:	d101      	bne.n	8012572 <skip_variable+0x32>
 801256e:	2300      	movs	r3, #0
 8012570:	e052      	b.n	8012618 <skip_variable+0xd8>
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	617b      	str	r3, [r7, #20]
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	685b      	ldr	r3, [r3, #4]
 801257c:	613b      	str	r3, [r7, #16]
 801257e:	693b      	ldr	r3, [r7, #16]
 8012580:	3b01      	subs	r3, #1
 8012582:	613b      	str	r3, [r7, #16]
 8012584:	697b      	ldr	r3, [r7, #20]
 8012586:	1c5a      	adds	r2, r3, #1
 8012588:	617a      	str	r2, [r7, #20]
 801258a:	781b      	ldrb	r3, [r3, #0]
 801258c:	021b      	lsls	r3, r3, #8
 801258e:	60bb      	str	r3, [r7, #8]
 8012590:	693b      	ldr	r3, [r7, #16]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d10e      	bne.n	80125b4 <skip_variable+0x74>
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	68db      	ldr	r3, [r3, #12]
 801259a:	6878      	ldr	r0, [r7, #4]
 801259c:	4798      	blx	r3
 801259e:	4603      	mov	r3, r0
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d101      	bne.n	80125a8 <skip_variable+0x68>
 80125a4:	2300      	movs	r3, #0
 80125a6:	e037      	b.n	8012618 <skip_variable+0xd8>
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	617b      	str	r3, [r7, #20]
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	685b      	ldr	r3, [r3, #4]
 80125b2:	613b      	str	r3, [r7, #16]
 80125b4:	693b      	ldr	r3, [r7, #16]
 80125b6:	3b01      	subs	r3, #1
 80125b8:	613b      	str	r3, [r7, #16]
 80125ba:	697b      	ldr	r3, [r7, #20]
 80125bc:	1c5a      	adds	r2, r3, #1
 80125be:	617a      	str	r2, [r7, #20]
 80125c0:	781b      	ldrb	r3, [r3, #0]
 80125c2:	461a      	mov	r2, r3
 80125c4:	68bb      	ldr	r3, [r7, #8]
 80125c6:	4413      	add	r3, r2
 80125c8:	60bb      	str	r3, [r7, #8]
  length -= 2;
 80125ca:	68bb      	ldr	r3, [r7, #8]
 80125cc:	3b02      	subs	r3, #2
 80125ce:	60bb      	str	r3, [r7, #8]
  
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	225d      	movs	r2, #93	; 0x5d
 80125d6:	615a      	str	r2, [r3, #20]
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	687a      	ldr	r2, [r7, #4]
 80125de:	f8d2 21b4 	ldr.w	r2, [r2, #436]	; 0x1b4
 80125e2:	619a      	str	r2, [r3, #24]
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	68ba      	ldr	r2, [r7, #8]
 80125ea:	61da      	str	r2, [r3, #28]
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	685b      	ldr	r3, [r3, #4]
 80125f2:	2101      	movs	r1, #1
 80125f4:	6878      	ldr	r0, [r7, #4]
 80125f6:	4798      	blx	r3

  INPUT_SYNC(cinfo);		/* do before skip_input_data */
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	697a      	ldr	r2, [r7, #20]
 80125fc:	601a      	str	r2, [r3, #0]
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	693a      	ldr	r2, [r7, #16]
 8012602:	605a      	str	r2, [r3, #4]
  if (length > 0)
 8012604:	68bb      	ldr	r3, [r7, #8]
 8012606:	2b00      	cmp	r3, #0
 8012608:	dd05      	ble.n	8012616 <skip_variable+0xd6>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	699b      	ldr	r3, [r3, #24]
 801260e:	691b      	ldr	r3, [r3, #16]
 8012610:	68b9      	ldr	r1, [r7, #8]
 8012612:	6878      	ldr	r0, [r7, #4]
 8012614:	4798      	blx	r3

  return TRUE;
 8012616:	2301      	movs	r3, #1
}
 8012618:	4618      	mov	r0, r3
 801261a:	3718      	adds	r7, #24
 801261c:	46bd      	mov	sp, r7
 801261e:	bd80      	pop	{r7, pc}

08012620 <next_marker>:
 * but it will never be 0 or FF.
 */

LOCAL(boolean)
next_marker (j_decompress_ptr cinfo)
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b086      	sub	sp, #24
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
  int c;
  INPUT_VARS(cinfo);
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	699b      	ldr	r3, [r3, #24]
 801262c:	60bb      	str	r3, [r7, #8]
 801262e:	68bb      	ldr	r3, [r7, #8]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	613b      	str	r3, [r7, #16]
 8012634:	68bb      	ldr	r3, [r7, #8]
 8012636:	685b      	ldr	r3, [r3, #4]
 8012638:	60fb      	str	r3, [r7, #12]

  for (;;) {
    INPUT_BYTE(cinfo, c, return FALSE);
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d10e      	bne.n	801265e <next_marker+0x3e>
 8012640:	68bb      	ldr	r3, [r7, #8]
 8012642:	68db      	ldr	r3, [r3, #12]
 8012644:	6878      	ldr	r0, [r7, #4]
 8012646:	4798      	blx	r3
 8012648:	4603      	mov	r3, r0
 801264a:	2b00      	cmp	r3, #0
 801264c:	d101      	bne.n	8012652 <next_marker+0x32>
 801264e:	2300      	movs	r3, #0
 8012650:	e094      	b.n	801277c <next_marker+0x15c>
 8012652:	68bb      	ldr	r3, [r7, #8]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	613b      	str	r3, [r7, #16]
 8012658:	68bb      	ldr	r3, [r7, #8]
 801265a:	685b      	ldr	r3, [r3, #4]
 801265c:	60fb      	str	r3, [r7, #12]
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	3b01      	subs	r3, #1
 8012662:	60fb      	str	r3, [r7, #12]
 8012664:	693b      	ldr	r3, [r7, #16]
 8012666:	1c5a      	adds	r2, r3, #1
 8012668:	613a      	str	r2, [r7, #16]
 801266a:	781b      	ldrb	r3, [r3, #0]
 801266c:	617b      	str	r3, [r7, #20]
    /* Skip any non-FF bytes.
     * This may look a bit inefficient, but it will not occur in a valid file.
     * We sync after each discarded byte so that a suspending data source
     * can discard the byte from its buffer.
     */
    while (c != 0xFF) {
 801266e:	e025      	b.n	80126bc <next_marker+0x9c>
      cinfo->marker->discarded_bytes++;
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8012676:	699a      	ldr	r2, [r3, #24]
 8012678:	3201      	adds	r2, #1
 801267a:	619a      	str	r2, [r3, #24]
      INPUT_SYNC(cinfo);
 801267c:	68bb      	ldr	r3, [r7, #8]
 801267e:	693a      	ldr	r2, [r7, #16]
 8012680:	601a      	str	r2, [r3, #0]
 8012682:	68bb      	ldr	r3, [r7, #8]
 8012684:	68fa      	ldr	r2, [r7, #12]
 8012686:	605a      	str	r2, [r3, #4]
      INPUT_BYTE(cinfo, c, return FALSE);
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d10e      	bne.n	80126ac <next_marker+0x8c>
 801268e:	68bb      	ldr	r3, [r7, #8]
 8012690:	68db      	ldr	r3, [r3, #12]
 8012692:	6878      	ldr	r0, [r7, #4]
 8012694:	4798      	blx	r3
 8012696:	4603      	mov	r3, r0
 8012698:	2b00      	cmp	r3, #0
 801269a:	d101      	bne.n	80126a0 <next_marker+0x80>
 801269c:	2300      	movs	r3, #0
 801269e:	e06d      	b.n	801277c <next_marker+0x15c>
 80126a0:	68bb      	ldr	r3, [r7, #8]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	613b      	str	r3, [r7, #16]
 80126a6:	68bb      	ldr	r3, [r7, #8]
 80126a8:	685b      	ldr	r3, [r3, #4]
 80126aa:	60fb      	str	r3, [r7, #12]
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	3b01      	subs	r3, #1
 80126b0:	60fb      	str	r3, [r7, #12]
 80126b2:	693b      	ldr	r3, [r7, #16]
 80126b4:	1c5a      	adds	r2, r3, #1
 80126b6:	613a      	str	r2, [r7, #16]
 80126b8:	781b      	ldrb	r3, [r3, #0]
 80126ba:	617b      	str	r3, [r7, #20]
    while (c != 0xFF) {
 80126bc:	697b      	ldr	r3, [r7, #20]
 80126be:	2bff      	cmp	r3, #255	; 0xff
 80126c0:	d1d6      	bne.n	8012670 <next_marker+0x50>
     * pad bytes, so don't count them in discarded_bytes.  We assume there
     * will not be so many consecutive FF bytes as to overflow a suspending
     * data source's input buffer.
     */
    do {
      INPUT_BYTE(cinfo, c, return FALSE);
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d10e      	bne.n	80126e6 <next_marker+0xc6>
 80126c8:	68bb      	ldr	r3, [r7, #8]
 80126ca:	68db      	ldr	r3, [r3, #12]
 80126cc:	6878      	ldr	r0, [r7, #4]
 80126ce:	4798      	blx	r3
 80126d0:	4603      	mov	r3, r0
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d101      	bne.n	80126da <next_marker+0xba>
 80126d6:	2300      	movs	r3, #0
 80126d8:	e050      	b.n	801277c <next_marker+0x15c>
 80126da:	68bb      	ldr	r3, [r7, #8]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	613b      	str	r3, [r7, #16]
 80126e0:	68bb      	ldr	r3, [r7, #8]
 80126e2:	685b      	ldr	r3, [r3, #4]
 80126e4:	60fb      	str	r3, [r7, #12]
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	3b01      	subs	r3, #1
 80126ea:	60fb      	str	r3, [r7, #12]
 80126ec:	693b      	ldr	r3, [r7, #16]
 80126ee:	1c5a      	adds	r2, r3, #1
 80126f0:	613a      	str	r2, [r7, #16]
 80126f2:	781b      	ldrb	r3, [r3, #0]
 80126f4:	617b      	str	r3, [r7, #20]
    } while (c == 0xFF);
 80126f6:	697b      	ldr	r3, [r7, #20]
 80126f8:	2bff      	cmp	r3, #255	; 0xff
 80126fa:	d0e2      	beq.n	80126c2 <next_marker+0xa2>
    if (c != 0)
 80126fc:	697b      	ldr	r3, [r7, #20]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d10f      	bne.n	8012722 <next_marker+0x102>
      break;			/* found a valid marker, exit loop */
    /* Reach here if we found a stuffed-zero data sequence (FF/00).
     * Discard it and loop back to try again.
     */
    cinfo->marker->discarded_bytes += 2;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8012708:	699a      	ldr	r2, [r3, #24]
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8012710:	3202      	adds	r2, #2
 8012712:	619a      	str	r2, [r3, #24]
    INPUT_SYNC(cinfo);
 8012714:	68bb      	ldr	r3, [r7, #8]
 8012716:	693a      	ldr	r2, [r7, #16]
 8012718:	601a      	str	r2, [r3, #0]
 801271a:	68bb      	ldr	r3, [r7, #8]
 801271c:	68fa      	ldr	r2, [r7, #12]
 801271e:	605a      	str	r2, [r3, #4]
    INPUT_BYTE(cinfo, c, return FALSE);
 8012720:	e78b      	b.n	801263a <next_marker+0x1a>
      break;			/* found a valid marker, exit loop */
 8012722:	bf00      	nop
  }

  if (cinfo->marker->discarded_bytes != 0) {
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 801272a:	699b      	ldr	r3, [r3, #24]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d01a      	beq.n	8012766 <next_marker+0x146>
    WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	2277      	movs	r2, #119	; 0x77
 8012736:	615a      	str	r2, [r3, #20]
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 801273e:	699a      	ldr	r2, [r3, #24]
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	619a      	str	r2, [r3, #24]
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	697a      	ldr	r2, [r7, #20]
 801274c:	61da      	str	r2, [r3, #28]
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	685b      	ldr	r3, [r3, #4]
 8012754:	f04f 31ff 	mov.w	r1, #4294967295
 8012758:	6878      	ldr	r0, [r7, #4]
 801275a:	4798      	blx	r3
    cinfo->marker->discarded_bytes = 0;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8012762:	2200      	movs	r2, #0
 8012764:	619a      	str	r2, [r3, #24]
  }

  cinfo->unread_marker = c;
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	697a      	ldr	r2, [r7, #20]
 801276a:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4

  INPUT_SYNC(cinfo);
 801276e:	68bb      	ldr	r3, [r7, #8]
 8012770:	693a      	ldr	r2, [r7, #16]
 8012772:	601a      	str	r2, [r3, #0]
 8012774:	68bb      	ldr	r3, [r7, #8]
 8012776:	68fa      	ldr	r2, [r7, #12]
 8012778:	605a      	str	r2, [r3, #4]
  return TRUE;
 801277a:	2301      	movs	r3, #1
}
 801277c:	4618      	mov	r0, r3
 801277e:	3718      	adds	r7, #24
 8012780:	46bd      	mov	sp, r7
 8012782:	bd80      	pop	{r7, pc}

08012784 <first_marker>:
/* For this marker, we do not allow preceding garbage or fill; otherwise,
 * we might well scan an entire input file before realizing it ain't JPEG.
 * If an application wants to process non-JFIF files, it must seek to the
 * SOI before calling the JPEG library.
 */
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b088      	sub	sp, #32
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
  int c, c2;
  INPUT_VARS(cinfo);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	699b      	ldr	r3, [r3, #24]
 8012790:	617b      	str	r3, [r7, #20]
 8012792:	697b      	ldr	r3, [r7, #20]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	61fb      	str	r3, [r7, #28]
 8012798:	697b      	ldr	r3, [r7, #20]
 801279a:	685b      	ldr	r3, [r3, #4]
 801279c:	61bb      	str	r3, [r7, #24]

  INPUT_BYTE(cinfo, c, return FALSE);
 801279e:	69bb      	ldr	r3, [r7, #24]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d10e      	bne.n	80127c2 <first_marker+0x3e>
 80127a4:	697b      	ldr	r3, [r7, #20]
 80127a6:	68db      	ldr	r3, [r3, #12]
 80127a8:	6878      	ldr	r0, [r7, #4]
 80127aa:	4798      	blx	r3
 80127ac:	4603      	mov	r3, r0
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d101      	bne.n	80127b6 <first_marker+0x32>
 80127b2:	2300      	movs	r3, #0
 80127b4:	e049      	b.n	801284a <first_marker+0xc6>
 80127b6:	697b      	ldr	r3, [r7, #20]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	61fb      	str	r3, [r7, #28]
 80127bc:	697b      	ldr	r3, [r7, #20]
 80127be:	685b      	ldr	r3, [r3, #4]
 80127c0:	61bb      	str	r3, [r7, #24]
 80127c2:	69bb      	ldr	r3, [r7, #24]
 80127c4:	3b01      	subs	r3, #1
 80127c6:	61bb      	str	r3, [r7, #24]
 80127c8:	69fb      	ldr	r3, [r7, #28]
 80127ca:	1c5a      	adds	r2, r3, #1
 80127cc:	61fa      	str	r2, [r7, #28]
 80127ce:	781b      	ldrb	r3, [r3, #0]
 80127d0:	613b      	str	r3, [r7, #16]
  INPUT_BYTE(cinfo, c2, return FALSE);
 80127d2:	69bb      	ldr	r3, [r7, #24]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d10e      	bne.n	80127f6 <first_marker+0x72>
 80127d8:	697b      	ldr	r3, [r7, #20]
 80127da:	68db      	ldr	r3, [r3, #12]
 80127dc:	6878      	ldr	r0, [r7, #4]
 80127de:	4798      	blx	r3
 80127e0:	4603      	mov	r3, r0
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d101      	bne.n	80127ea <first_marker+0x66>
 80127e6:	2300      	movs	r3, #0
 80127e8:	e02f      	b.n	801284a <first_marker+0xc6>
 80127ea:	697b      	ldr	r3, [r7, #20]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	61fb      	str	r3, [r7, #28]
 80127f0:	697b      	ldr	r3, [r7, #20]
 80127f2:	685b      	ldr	r3, [r3, #4]
 80127f4:	61bb      	str	r3, [r7, #24]
 80127f6:	69bb      	ldr	r3, [r7, #24]
 80127f8:	3b01      	subs	r3, #1
 80127fa:	61bb      	str	r3, [r7, #24]
 80127fc:	69fb      	ldr	r3, [r7, #28]
 80127fe:	1c5a      	adds	r2, r3, #1
 8012800:	61fa      	str	r2, [r7, #28]
 8012802:	781b      	ldrb	r3, [r3, #0]
 8012804:	60fb      	str	r3, [r7, #12]
  if (c != 0xFF || c2 != (int) M_SOI)
 8012806:	693b      	ldr	r3, [r7, #16]
 8012808:	2bff      	cmp	r3, #255	; 0xff
 801280a:	d102      	bne.n	8012812 <first_marker+0x8e>
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	2bd8      	cmp	r3, #216	; 0xd8
 8012810:	d010      	beq.n	8012834 <first_marker+0xb0>
    ERREXIT2(cinfo, JERR_NO_SOI, c, c2);
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	2237      	movs	r2, #55	; 0x37
 8012818:	615a      	str	r2, [r3, #20]
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	693a      	ldr	r2, [r7, #16]
 8012820:	619a      	str	r2, [r3, #24]
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	68fa      	ldr	r2, [r7, #12]
 8012828:	61da      	str	r2, [r3, #28]
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	6878      	ldr	r0, [r7, #4]
 8012832:	4798      	blx	r3

  cinfo->unread_marker = c2;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	68fa      	ldr	r2, [r7, #12]
 8012838:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4

  INPUT_SYNC(cinfo);
 801283c:	697b      	ldr	r3, [r7, #20]
 801283e:	69fa      	ldr	r2, [r7, #28]
 8012840:	601a      	str	r2, [r3, #0]
 8012842:	697b      	ldr	r3, [r7, #20]
 8012844:	69ba      	ldr	r2, [r7, #24]
 8012846:	605a      	str	r2, [r3, #4]
  return TRUE;
 8012848:	2301      	movs	r3, #1
}
 801284a:	4618      	mov	r0, r3
 801284c:	3720      	adds	r7, #32
 801284e:	46bd      	mov	sp, r7
 8012850:	bd80      	pop	{r7, pc}
	...

08012854 <read_markers>:
 * after processing for the caller.
 */

METHODDEF(int)
read_markers (j_decompress_ptr cinfo)
{
 8012854:	b580      	push	{r7, lr}
 8012856:	b082      	sub	sp, #8
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
  /* Outer loop repeats once for each marker. */
  for (;;) {
    /* Collect the marker proper, unless we already did. */
    /* NB: first_marker() enforces the requirement that SOI appear first. */
    if (cinfo->unread_marker == 0) {
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8012862:	2b00      	cmp	r3, #0
 8012864:	d115      	bne.n	8012892 <read_markers+0x3e>
      if (! cinfo->marker->saw_SOI) {
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 801286c:	68db      	ldr	r3, [r3, #12]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d107      	bne.n	8012882 <read_markers+0x2e>
	if (! first_marker(cinfo))
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	f7ff ff86 	bl	8012784 <first_marker>
 8012878:	4603      	mov	r3, r0
 801287a:	2b00      	cmp	r3, #0
 801287c:	d109      	bne.n	8012892 <read_markers+0x3e>
	  return JPEG_SUSPENDED;
 801287e:	2300      	movs	r3, #0
 8012880:	e192      	b.n	8012ba8 <read_markers+0x354>
      } else {
	if (! next_marker(cinfo))
 8012882:	6878      	ldr	r0, [r7, #4]
 8012884:	f7ff fecc 	bl	8012620 <next_marker>
 8012888:	4603      	mov	r3, r0
 801288a:	2b00      	cmp	r3, #0
 801288c:	d101      	bne.n	8012892 <read_markers+0x3e>
	  return JPEG_SUSPENDED;
 801288e:	2300      	movs	r3, #0
 8012890:	e18a      	b.n	8012ba8 <read_markers+0x354>
    }
    /* At this point cinfo->unread_marker contains the marker code and the
     * input point is just past the marker proper, but before any parameters.
     * A suspension will cause us to return with this state still true.
     */
    switch (cinfo->unread_marker) {
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8012898:	2b01      	cmp	r3, #1
 801289a:	f000 813e 	beq.w	8012b1a <read_markers+0x2c6>
 801289e:	2b00      	cmp	r3, #0
 80128a0:	f340 8154 	ble.w	8012b4c <read_markers+0x2f8>
 80128a4:	2bfe      	cmp	r3, #254	; 0xfe
 80128a6:	f300 8151 	bgt.w	8012b4c <read_markers+0x2f8>
 80128aa:	2bc0      	cmp	r3, #192	; 0xc0
 80128ac:	f2c0 814e 	blt.w	8012b4c <read_markers+0x2f8>
 80128b0:	3bc0      	subs	r3, #192	; 0xc0
 80128b2:	2b3e      	cmp	r3, #62	; 0x3e
 80128b4:	f200 814a 	bhi.w	8012b4c <read_markers+0x2f8>
 80128b8:	a201      	add	r2, pc, #4	; (adr r2, 80128c0 <read_markers+0x6c>)
 80128ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128be:	bf00      	nop
 80128c0:	080129cf 	.word	0x080129cf
 80128c4:	080129e7 	.word	0x080129e7
 80128c8:	080129ff 	.word	0x080129ff
 80128cc:	08012a47 	.word	0x08012a47
 80128d0:	08012ab3 	.word	0x08012ab3
 80128d4:	08012a47 	.word	0x08012a47
 80128d8:	08012a47 	.word	0x08012a47
 80128dc:	08012a47 	.word	0x08012a47
 80128e0:	08012a47 	.word	0x08012a47
 80128e4:	08012a17 	.word	0x08012a17
 80128e8:	08012a2f 	.word	0x08012a2f
 80128ec:	08012a47 	.word	0x08012a47
 80128f0:	08012aa3 	.word	0x08012aa3
 80128f4:	08012a47 	.word	0x08012a47
 80128f8:	08012a47 	.word	0x08012a47
 80128fc:	08012a47 	.word	0x08012a47
 8012900:	08012b1b 	.word	0x08012b1b
 8012904:	08012b1b 	.word	0x08012b1b
 8012908:	08012b1b 	.word	0x08012b1b
 801290c:	08012b1b 	.word	0x08012b1b
 8012910:	08012b1b 	.word	0x08012b1b
 8012914:	08012b1b 	.word	0x08012b1b
 8012918:	08012b1b 	.word	0x08012b1b
 801291c:	08012b1b 	.word	0x08012b1b
 8012920:	080129bd 	.word	0x080129bd
 8012924:	08012a83 	.word	0x08012a83
 8012928:	08012a67 	.word	0x08012a67
 801292c:	08012ac3 	.word	0x08012ac3
 8012930:	08012b3d 	.word	0x08012b3d
 8012934:	08012ad3 	.word	0x08012ad3
 8012938:	08012b4d 	.word	0x08012b4d
 801293c:	08012b4d 	.word	0x08012b4d
 8012940:	08012ae3 	.word	0x08012ae3
 8012944:	08012ae3 	.word	0x08012ae3
 8012948:	08012ae3 	.word	0x08012ae3
 801294c:	08012ae3 	.word	0x08012ae3
 8012950:	08012ae3 	.word	0x08012ae3
 8012954:	08012ae3 	.word	0x08012ae3
 8012958:	08012ae3 	.word	0x08012ae3
 801295c:	08012ae3 	.word	0x08012ae3
 8012960:	08012ae3 	.word	0x08012ae3
 8012964:	08012ae3 	.word	0x08012ae3
 8012968:	08012ae3 	.word	0x08012ae3
 801296c:	08012ae3 	.word	0x08012ae3
 8012970:	08012ae3 	.word	0x08012ae3
 8012974:	08012ae3 	.word	0x08012ae3
 8012978:	08012ae3 	.word	0x08012ae3
 801297c:	08012ae3 	.word	0x08012ae3
 8012980:	08012b4d 	.word	0x08012b4d
 8012984:	08012b4d 	.word	0x08012b4d
 8012988:	08012b4d 	.word	0x08012b4d
 801298c:	08012b4d 	.word	0x08012b4d
 8012990:	08012b4d 	.word	0x08012b4d
 8012994:	08012b4d 	.word	0x08012b4d
 8012998:	08012b4d 	.word	0x08012b4d
 801299c:	08012b4d 	.word	0x08012b4d
 80129a0:	08012b4d 	.word	0x08012b4d
 80129a4:	08012b4d 	.word	0x08012b4d
 80129a8:	08012b4d 	.word	0x08012b4d
 80129ac:	08012b4d 	.word	0x08012b4d
 80129b0:	08012b4d 	.word	0x08012b4d
 80129b4:	08012b4d 	.word	0x08012b4d
 80129b8:	08012b05 	.word	0x08012b05
    case M_SOI:
      if (! get_soi(cinfo))
 80129bc:	6878      	ldr	r0, [r7, #4]
 80129be:	f7fe f88b 	bl	8010ad8 <get_soi>
 80129c2:	4603      	mov	r3, r0
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	f040 80d1 	bne.w	8012b6c <read_markers+0x318>
	return JPEG_SUSPENDED;
 80129ca:	2300      	movs	r3, #0
 80129cc:	e0ec      	b.n	8012ba8 <read_markers+0x354>
      break;

    case M_SOF0:		/* Baseline */
      if (! get_sof(cinfo, TRUE, FALSE, FALSE))
 80129ce:	2300      	movs	r3, #0
 80129d0:	2200      	movs	r2, #0
 80129d2:	2101      	movs	r1, #1
 80129d4:	6878      	ldr	r0, [r7, #4]
 80129d6:	f7fe f8ee 	bl	8010bb6 <get_sof>
 80129da:	4603      	mov	r3, r0
 80129dc:	2b00      	cmp	r3, #0
 80129de:	f040 80c7 	bne.w	8012b70 <read_markers+0x31c>
	return JPEG_SUSPENDED;
 80129e2:	2300      	movs	r3, #0
 80129e4:	e0e0      	b.n	8012ba8 <read_markers+0x354>
      break;

    case M_SOF1:		/* Extended sequential, Huffman */
      if (! get_sof(cinfo, FALSE, FALSE, FALSE))
 80129e6:	2300      	movs	r3, #0
 80129e8:	2200      	movs	r2, #0
 80129ea:	2100      	movs	r1, #0
 80129ec:	6878      	ldr	r0, [r7, #4]
 80129ee:	f7fe f8e2 	bl	8010bb6 <get_sof>
 80129f2:	4603      	mov	r3, r0
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	f040 80bd 	bne.w	8012b74 <read_markers+0x320>
	return JPEG_SUSPENDED;
 80129fa:	2300      	movs	r3, #0
 80129fc:	e0d4      	b.n	8012ba8 <read_markers+0x354>
      break;

    case M_SOF2:		/* Progressive, Huffman */
      if (! get_sof(cinfo, FALSE, TRUE, FALSE))
 80129fe:	2300      	movs	r3, #0
 8012a00:	2201      	movs	r2, #1
 8012a02:	2100      	movs	r1, #0
 8012a04:	6878      	ldr	r0, [r7, #4]
 8012a06:	f7fe f8d6 	bl	8010bb6 <get_sof>
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	f040 80b3 	bne.w	8012b78 <read_markers+0x324>
	return JPEG_SUSPENDED;
 8012a12:	2300      	movs	r3, #0
 8012a14:	e0c8      	b.n	8012ba8 <read_markers+0x354>
      break;

    case M_SOF9:		/* Extended sequential, arithmetic */
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 8012a16:	2301      	movs	r3, #1
 8012a18:	2200      	movs	r2, #0
 8012a1a:	2100      	movs	r1, #0
 8012a1c:	6878      	ldr	r0, [r7, #4]
 8012a1e:	f7fe f8ca 	bl	8010bb6 <get_sof>
 8012a22:	4603      	mov	r3, r0
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	f040 80a9 	bne.w	8012b7c <read_markers+0x328>
	return JPEG_SUSPENDED;
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	e0bc      	b.n	8012ba8 <read_markers+0x354>
      break;

    case M_SOF10:		/* Progressive, arithmetic */
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 8012a2e:	2301      	movs	r3, #1
 8012a30:	2201      	movs	r2, #1
 8012a32:	2100      	movs	r1, #0
 8012a34:	6878      	ldr	r0, [r7, #4]
 8012a36:	f7fe f8be 	bl	8010bb6 <get_sof>
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	f040 809f 	bne.w	8012b80 <read_markers+0x32c>
	return JPEG_SUSPENDED;
 8012a42:	2300      	movs	r3, #0
 8012a44:	e0b0      	b.n	8012ba8 <read_markers+0x354>
    case M_JPG:			/* Reserved for JPEG extensions */
    case M_SOF11:		/* Lossless, arithmetic */
    case M_SOF13:		/* Differential sequential, arithmetic */
    case M_SOF14:		/* Differential progressive, arithmetic */
    case M_SOF15:		/* Differential lossless, arithmetic */
      ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	223e      	movs	r2, #62	; 0x3e
 8012a4c:	615a      	str	r2, [r3, #20]
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	687a      	ldr	r2, [r7, #4]
 8012a54:	f8d2 21b4 	ldr.w	r2, [r2, #436]	; 0x1b4
 8012a58:	619a      	str	r2, [r3, #24]
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	6878      	ldr	r0, [r7, #4]
 8012a62:	4798      	blx	r3
      break;
 8012a64:	e09b      	b.n	8012b9e <read_markers+0x34a>

    case M_SOS:
      if (! get_sos(cinfo))
 8012a66:	6878      	ldr	r0, [r7, #4]
 8012a68:	f7fe fab9 	bl	8010fde <get_sos>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d101      	bne.n	8012a76 <read_markers+0x222>
	return JPEG_SUSPENDED;
 8012a72:	2300      	movs	r3, #0
 8012a74:	e098      	b.n	8012ba8 <read_markers+0x354>
      cinfo->unread_marker = 0;	/* processed the marker */
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	2200      	movs	r2, #0
 8012a7a:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
      return JPEG_REACHED_SOS;
 8012a7e:	2301      	movs	r3, #1
 8012a80:	e092      	b.n	8012ba8 <read_markers+0x354>
    
    case M_EOI:
      TRACEMS(cinfo, 1, JTRC_EOI);
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	2257      	movs	r2, #87	; 0x57
 8012a88:	615a      	str	r2, [r3, #20]
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	685b      	ldr	r3, [r3, #4]
 8012a90:	2101      	movs	r1, #1
 8012a92:	6878      	ldr	r0, [r7, #4]
 8012a94:	4798      	blx	r3
      cinfo->unread_marker = 0;	/* processed the marker */
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	2200      	movs	r2, #0
 8012a9a:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
      return JPEG_REACHED_EOI;
 8012a9e:	2302      	movs	r3, #2
 8012aa0:	e082      	b.n	8012ba8 <read_markers+0x354>
      
    case M_DAC:
      if (! get_dac(cinfo))
 8012aa2:	6878      	ldr	r0, [r7, #4]
 8012aa4:	f7fe fc69 	bl	801137a <get_dac>
 8012aa8:	4603      	mov	r3, r0
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d16a      	bne.n	8012b84 <read_markers+0x330>
	return JPEG_SUSPENDED;
 8012aae:	2300      	movs	r3, #0
 8012ab0:	e07a      	b.n	8012ba8 <read_markers+0x354>
      break;
      
    case M_DHT:
      if (! get_dht(cinfo))
 8012ab2:	6878      	ldr	r0, [r7, #4]
 8012ab4:	f7fe fd5b 	bl	801156e <get_dht>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d164      	bne.n	8012b88 <read_markers+0x334>
	return JPEG_SUSPENDED;
 8012abe:	2300      	movs	r3, #0
 8012ac0:	e072      	b.n	8012ba8 <read_markers+0x354>
      break;
      
    case M_DQT:
      if (! get_dqt(cinfo))
 8012ac2:	6878      	ldr	r0, [r7, #4]
 8012ac4:	f7fe ffac 	bl	8011a20 <get_dqt>
 8012ac8:	4603      	mov	r3, r0
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d15e      	bne.n	8012b8c <read_markers+0x338>
	return JPEG_SUSPENDED;
 8012ace:	2300      	movs	r3, #0
 8012ad0:	e06a      	b.n	8012ba8 <read_markers+0x354>
      break;
      
    case M_DRI:
      if (! get_dri(cinfo))
 8012ad2:	6878      	ldr	r0, [r7, #4]
 8012ad4:	f7ff f9ee 	bl	8011eb4 <get_dri>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d158      	bne.n	8012b90 <read_markers+0x33c>
	return JPEG_SUSPENDED;
 8012ade:	2300      	movs	r3, #0
 8012ae0:	e062      	b.n	8012ba8 <read_markers+0x354>
    case M_APP11:
    case M_APP12:
    case M_APP13:
    case M_APP14:
    case M_APP15:
      if (! (*((my_marker_ptr) cinfo->marker)->process_APPn[
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
		cinfo->unread_marker - (int) M_APP0]) (cinfo))
 8012ae8:	687a      	ldr	r2, [r7, #4]
 8012aea:	f8d2 21b4 	ldr.w	r2, [r2, #436]	; 0x1b4
 8012aee:	3ae0      	subs	r2, #224	; 0xe0
      if (! (*((my_marker_ptr) cinfo->marker)->process_APPn[
 8012af0:	3208      	adds	r2, #8
 8012af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	4798      	blx	r3
 8012afa:	4603      	mov	r3, r0
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d149      	bne.n	8012b94 <read_markers+0x340>
	return JPEG_SUSPENDED;
 8012b00:	2300      	movs	r3, #0
 8012b02:	e051      	b.n	8012ba8 <read_markers+0x354>
      break;
      
    case M_COM:
      if (! (*((my_marker_ptr) cinfo->marker)->process_COM) (cinfo))
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8012b0a:	69db      	ldr	r3, [r3, #28]
 8012b0c:	6878      	ldr	r0, [r7, #4]
 8012b0e:	4798      	blx	r3
 8012b10:	4603      	mov	r3, r0
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d140      	bne.n	8012b98 <read_markers+0x344>
	return JPEG_SUSPENDED;
 8012b16:	2300      	movs	r3, #0
 8012b18:	e046      	b.n	8012ba8 <read_markers+0x354>
    case M_RST4:
    case M_RST5:
    case M_RST6:
    case M_RST7:
    case M_TEM:
      TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	225e      	movs	r2, #94	; 0x5e
 8012b20:	615a      	str	r2, [r3, #20]
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	687a      	ldr	r2, [r7, #4]
 8012b28:	f8d2 21b4 	ldr.w	r2, [r2, #436]	; 0x1b4
 8012b2c:	619a      	str	r2, [r3, #24]
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	685b      	ldr	r3, [r3, #4]
 8012b34:	2101      	movs	r1, #1
 8012b36:	6878      	ldr	r0, [r7, #4]
 8012b38:	4798      	blx	r3
      break;
 8012b3a:	e030      	b.n	8012b9e <read_markers+0x34a>

    case M_DNL:			/* Ignore DNL ... perhaps the wrong thing */
      if (! skip_variable(cinfo))
 8012b3c:	6878      	ldr	r0, [r7, #4]
 8012b3e:	f7ff fcff 	bl	8012540 <skip_variable>
 8012b42:	4603      	mov	r3, r0
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d129      	bne.n	8012b9c <read_markers+0x348>
	return JPEG_SUSPENDED;
 8012b48:	2300      	movs	r3, #0
 8012b4a:	e02d      	b.n	8012ba8 <read_markers+0x354>
      /* For now, we treat the reserved markers as fatal errors since they are
       * likely to be used to signal incompatible JPEG Part 3 extensions.
       * Once the JPEG 3 version-number marker is well defined, this code
       * ought to change!
       */
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	2246      	movs	r2, #70	; 0x46
 8012b52:	615a      	str	r2, [r3, #20]
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	687a      	ldr	r2, [r7, #4]
 8012b5a:	f8d2 21b4 	ldr.w	r2, [r2, #436]	; 0x1b4
 8012b5e:	619a      	str	r2, [r3, #24]
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	6878      	ldr	r0, [r7, #4]
 8012b68:	4798      	blx	r3
      break;
 8012b6a:	e018      	b.n	8012b9e <read_markers+0x34a>
      break;
 8012b6c:	bf00      	nop
 8012b6e:	e016      	b.n	8012b9e <read_markers+0x34a>
      break;
 8012b70:	bf00      	nop
 8012b72:	e014      	b.n	8012b9e <read_markers+0x34a>
      break;
 8012b74:	bf00      	nop
 8012b76:	e012      	b.n	8012b9e <read_markers+0x34a>
      break;
 8012b78:	bf00      	nop
 8012b7a:	e010      	b.n	8012b9e <read_markers+0x34a>
      break;
 8012b7c:	bf00      	nop
 8012b7e:	e00e      	b.n	8012b9e <read_markers+0x34a>
      break;
 8012b80:	bf00      	nop
 8012b82:	e00c      	b.n	8012b9e <read_markers+0x34a>
      break;
 8012b84:	bf00      	nop
 8012b86:	e00a      	b.n	8012b9e <read_markers+0x34a>
      break;
 8012b88:	bf00      	nop
 8012b8a:	e008      	b.n	8012b9e <read_markers+0x34a>
      break;
 8012b8c:	bf00      	nop
 8012b8e:	e006      	b.n	8012b9e <read_markers+0x34a>
      break;
 8012b90:	bf00      	nop
 8012b92:	e004      	b.n	8012b9e <read_markers+0x34a>
      break;
 8012b94:	bf00      	nop
 8012b96:	e002      	b.n	8012b9e <read_markers+0x34a>
      break;
 8012b98:	bf00      	nop
 8012b9a:	e000      	b.n	8012b9e <read_markers+0x34a>
      break;
 8012b9c:	bf00      	nop
    }
    /* Successfully processed marker, so reset state variable */
    cinfo->unread_marker = 0;
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	2200      	movs	r2, #0
 8012ba2:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    if (cinfo->unread_marker == 0) {
 8012ba6:	e659      	b.n	801285c <read_markers+0x8>
  } /* end loop */
}
 8012ba8:	4618      	mov	r0, r3
 8012baa:	3708      	adds	r7, #8
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bd80      	pop	{r7, pc}

08012bb0 <read_restart_marker>:
 * it holds a marker which the decoder will be unable to read past.
 */

METHODDEF(boolean)
read_restart_marker (j_decompress_ptr cinfo)
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b082      	sub	sp, #8
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
  /* Obtain a marker unless we already did. */
  /* Note that next_marker will complain if it skips any data. */
  if (cinfo->unread_marker == 0) {
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d107      	bne.n	8012bd2 <read_restart_marker+0x22>
    if (! next_marker(cinfo))
 8012bc2:	6878      	ldr	r0, [r7, #4]
 8012bc4:	f7ff fd2c 	bl	8012620 <next_marker>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d101      	bne.n	8012bd2 <read_restart_marker+0x22>
      return FALSE;
 8012bce:	2300      	movs	r3, #0
 8012bd0:	e03a      	b.n	8012c48 <read_restart_marker+0x98>
  }

  if (cinfo->unread_marker ==
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	f8d3 21b4 	ldr.w	r2, [r3, #436]	; 0x1b4
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8012bde:	695b      	ldr	r3, [r3, #20]
 8012be0:	33d0      	adds	r3, #208	; 0xd0
  if (cinfo->unread_marker ==
 8012be2:	429a      	cmp	r2, r3
 8012be4:	d115      	bne.n	8012c12 <read_restart_marker+0x62>
    /* Normal case --- swallow the marker and let entropy decoder continue */
    TRACEMS1(cinfo, 3, JTRC_RST, cinfo->marker->next_restart_num);
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	2264      	movs	r2, #100	; 0x64
 8012bec:	615a      	str	r2, [r3, #20]
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	6952      	ldr	r2, [r2, #20]
 8012bfa:	619a      	str	r2, [r3, #24]
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	685b      	ldr	r3, [r3, #4]
 8012c02:	2103      	movs	r1, #3
 8012c04:	6878      	ldr	r0, [r7, #4]
 8012c06:	4798      	blx	r3
    cinfo->unread_marker = 0;
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	2200      	movs	r2, #0
 8012c0c:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
 8012c10:	e00e      	b.n	8012c30 <read_restart_marker+0x80>
  } else {
    /* Uh-oh, the restart markers have been messed up. */
    /* Let the data source manager determine how to resync. */
    if (! (*cinfo->src->resync_to_restart) (cinfo,
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	699b      	ldr	r3, [r3, #24]
 8012c16:	695b      	ldr	r3, [r3, #20]
					    cinfo->marker->next_restart_num))
 8012c18:	687a      	ldr	r2, [r7, #4]
 8012c1a:	f8d2 21cc 	ldr.w	r2, [r2, #460]	; 0x1cc
    if (! (*cinfo->src->resync_to_restart) (cinfo,
 8012c1e:	6952      	ldr	r2, [r2, #20]
 8012c20:	4611      	mov	r1, r2
 8012c22:	6878      	ldr	r0, [r7, #4]
 8012c24:	4798      	blx	r3
 8012c26:	4603      	mov	r3, r0
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d101      	bne.n	8012c30 <read_restart_marker+0x80>
      return FALSE;
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	e00b      	b.n	8012c48 <read_restart_marker+0x98>
  }

  /* Update next-restart state */
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8012c36:	695b      	ldr	r3, [r3, #20]
 8012c38:	1c5a      	adds	r2, r3, #1
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8012c40:	f002 0207 	and.w	r2, r2, #7
 8012c44:	615a      	str	r2, [r3, #20]

  return TRUE;
 8012c46:	2301      	movs	r3, #1
}
 8012c48:	4618      	mov	r0, r3
 8012c4a:	3708      	adds	r7, #8
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	bd80      	pop	{r7, pc}

08012c50 <jpeg_resync_to_restart>:
 * any other marker would have to be bogus data in that case.
 */

GLOBAL(boolean)
jpeg_resync_to_restart (j_decompress_ptr cinfo, int desired)
{
 8012c50:	b580      	push	{r7, lr}
 8012c52:	b084      	sub	sp, #16
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	6078      	str	r0, [r7, #4]
 8012c58:	6039      	str	r1, [r7, #0]
  int marker = cinfo->unread_marker;
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8012c60:	60fb      	str	r3, [r7, #12]
  int action = 1;
 8012c62:	2301      	movs	r3, #1
 8012c64:	60bb      	str	r3, [r7, #8]
  
  /* Always put up a warning. */
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	227c      	movs	r2, #124	; 0x7c
 8012c6c:	615a      	str	r2, [r3, #20]
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	68fa      	ldr	r2, [r7, #12]
 8012c74:	619a      	str	r2, [r3, #24]
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	683a      	ldr	r2, [r7, #0]
 8012c7c:	61da      	str	r2, [r3, #28]
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	685b      	ldr	r3, [r3, #4]
 8012c84:	f04f 31ff 	mov.w	r1, #4294967295
 8012c88:	6878      	ldr	r0, [r7, #4]
 8012c8a:	4798      	blx	r3
  
  /* Outer loop handles repeated decision after scanning forward. */
  for (;;) {
    if (marker < (int) M_SOF0)
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	2bbf      	cmp	r3, #191	; 0xbf
 8012c90:	dc02      	bgt.n	8012c98 <jpeg_resync_to_restart+0x48>
      action = 2;		/* invalid marker */
 8012c92:	2302      	movs	r3, #2
 8012c94:	60bb      	str	r3, [r7, #8]
 8012c96:	e030      	b.n	8012cfa <jpeg_resync_to_restart+0xaa>
    else if (marker < (int) M_RST0 || marker > (int) M_RST7)
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	2bcf      	cmp	r3, #207	; 0xcf
 8012c9c:	dd02      	ble.n	8012ca4 <jpeg_resync_to_restart+0x54>
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	2bd7      	cmp	r3, #215	; 0xd7
 8012ca2:	dd02      	ble.n	8012caa <jpeg_resync_to_restart+0x5a>
      action = 3;		/* valid non-restart marker */
 8012ca4:	2303      	movs	r3, #3
 8012ca6:	60bb      	str	r3, [r7, #8]
 8012ca8:	e027      	b.n	8012cfa <jpeg_resync_to_restart+0xaa>
    else {
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 8012caa:	683b      	ldr	r3, [r7, #0]
 8012cac:	3301      	adds	r3, #1
 8012cae:	f003 0307 	and.w	r3, r3, #7
 8012cb2:	33d0      	adds	r3, #208	; 0xd0
 8012cb4:	68fa      	ldr	r2, [r7, #12]
 8012cb6:	429a      	cmp	r2, r3
 8012cb8:	d007      	beq.n	8012cca <jpeg_resync_to_restart+0x7a>
	  marker == ((int) M_RST0 + ((desired+2) & 7)))
 8012cba:	683b      	ldr	r3, [r7, #0]
 8012cbc:	3302      	adds	r3, #2
 8012cbe:	f003 0307 	and.w	r3, r3, #7
 8012cc2:	33d0      	adds	r3, #208	; 0xd0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 8012cc4:	68fa      	ldr	r2, [r7, #12]
 8012cc6:	429a      	cmp	r2, r3
 8012cc8:	d102      	bne.n	8012cd0 <jpeg_resync_to_restart+0x80>
	action = 3;		/* one of the next two expected restarts */
 8012cca:	2303      	movs	r3, #3
 8012ccc:	60bb      	str	r3, [r7, #8]
 8012cce:	e014      	b.n	8012cfa <jpeg_resync_to_restart+0xaa>
      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
 8012cd0:	683b      	ldr	r3, [r7, #0]
 8012cd2:	3b01      	subs	r3, #1
 8012cd4:	f003 0307 	and.w	r3, r3, #7
 8012cd8:	33d0      	adds	r3, #208	; 0xd0
 8012cda:	68fa      	ldr	r2, [r7, #12]
 8012cdc:	429a      	cmp	r2, r3
 8012cde:	d007      	beq.n	8012cf0 <jpeg_resync_to_restart+0xa0>
	       marker == ((int) M_RST0 + ((desired-2) & 7)))
 8012ce0:	683b      	ldr	r3, [r7, #0]
 8012ce2:	3b02      	subs	r3, #2
 8012ce4:	f003 0307 	and.w	r3, r3, #7
 8012ce8:	33d0      	adds	r3, #208	; 0xd0
      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
 8012cea:	68fa      	ldr	r2, [r7, #12]
 8012cec:	429a      	cmp	r2, r3
 8012cee:	d102      	bne.n	8012cf6 <jpeg_resync_to_restart+0xa6>
	action = 2;		/* a prior restart, so advance */
 8012cf0:	2302      	movs	r3, #2
 8012cf2:	60bb      	str	r3, [r7, #8]
 8012cf4:	e001      	b.n	8012cfa <jpeg_resync_to_restart+0xaa>
      else
	action = 1;		/* desired restart or too far away */
 8012cf6:	2301      	movs	r3, #1
 8012cf8:	60bb      	str	r3, [r7, #8]
    }
    TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	2263      	movs	r2, #99	; 0x63
 8012d00:	615a      	str	r2, [r3, #20]
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	68fa      	ldr	r2, [r7, #12]
 8012d08:	619a      	str	r2, [r3, #24]
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	68ba      	ldr	r2, [r7, #8]
 8012d10:	61da      	str	r2, [r3, #28]
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	685b      	ldr	r3, [r3, #4]
 8012d18:	2104      	movs	r1, #4
 8012d1a:	6878      	ldr	r0, [r7, #4]
 8012d1c:	4798      	blx	r3
    switch (action) {
 8012d1e:	68bb      	ldr	r3, [r7, #8]
 8012d20:	2b03      	cmp	r3, #3
 8012d22:	d01c      	beq.n	8012d5e <jpeg_resync_to_restart+0x10e>
 8012d24:	68bb      	ldr	r3, [r7, #8]
 8012d26:	2b03      	cmp	r3, #3
 8012d28:	dcb0      	bgt.n	8012c8c <jpeg_resync_to_restart+0x3c>
 8012d2a:	68bb      	ldr	r3, [r7, #8]
 8012d2c:	2b01      	cmp	r3, #1
 8012d2e:	d003      	beq.n	8012d38 <jpeg_resync_to_restart+0xe8>
 8012d30:	68bb      	ldr	r3, [r7, #8]
 8012d32:	2b02      	cmp	r3, #2
 8012d34:	d006      	beq.n	8012d44 <jpeg_resync_to_restart+0xf4>
 8012d36:	e014      	b.n	8012d62 <jpeg_resync_to_restart+0x112>
    case 1:
      /* Discard marker and let entropy decoder resume processing. */
      cinfo->unread_marker = 0;
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
      return TRUE;
 8012d40:	2301      	movs	r3, #1
 8012d42:	e00f      	b.n	8012d64 <jpeg_resync_to_restart+0x114>
    case 2:
      /* Scan to the next marker, and repeat the decision loop. */
      if (! next_marker(cinfo))
 8012d44:	6878      	ldr	r0, [r7, #4]
 8012d46:	f7ff fc6b 	bl	8012620 <next_marker>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d101      	bne.n	8012d54 <jpeg_resync_to_restart+0x104>
	return FALSE;
 8012d50:	2300      	movs	r3, #0
 8012d52:	e007      	b.n	8012d64 <jpeg_resync_to_restart+0x114>
      marker = cinfo->unread_marker;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8012d5a:	60fb      	str	r3, [r7, #12]
      break;
 8012d5c:	e001      	b.n	8012d62 <jpeg_resync_to_restart+0x112>
    case 3:
      /* Return without advancing past this marker. */
      /* Entropy decoder will be forced to process an empty segment. */
      return TRUE;
 8012d5e:	2301      	movs	r3, #1
 8012d60:	e000      	b.n	8012d64 <jpeg_resync_to_restart+0x114>
    if (marker < (int) M_SOF0)
 8012d62:	e793      	b.n	8012c8c <jpeg_resync_to_restart+0x3c>
    }
  } /* end loop */
}
 8012d64:	4618      	mov	r0, r3
 8012d66:	3710      	adds	r7, #16
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	bd80      	pop	{r7, pc}

08012d6c <reset_marker_reader>:
 * Reset marker processing state to begin a fresh datastream.
 */

METHODDEF(void)
reset_marker_reader (j_decompress_ptr cinfo)
{
 8012d6c:	b480      	push	{r7}
 8012d6e:	b085      	sub	sp, #20
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8012d7a:	60fb      	str	r3, [r7, #12]

  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	2200      	movs	r2, #0
 8012d80:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  cinfo->input_scan_number = 0;		/* no SOS seen yet */
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	2200      	movs	r2, #0
 8012d88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  cinfo->unread_marker = 0;		/* no pending marker */
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	2200      	movs	r2, #0
 8012d90:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  marker->pub.saw_SOI = FALSE;		/* set internal state too */
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	2200      	movs	r2, #0
 8012d98:	60da      	str	r2, [r3, #12]
  marker->pub.saw_SOF = FALSE;
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	611a      	str	r2, [r3, #16]
  marker->pub.discarded_bytes = 0;
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	2200      	movs	r2, #0
 8012da4:	619a      	str	r2, [r3, #24]
  marker->cur_marker = NULL;
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	2200      	movs	r2, #0
 8012daa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8012dae:	bf00      	nop
 8012db0:	3714      	adds	r7, #20
 8012db2:	46bd      	mov	sp, r7
 8012db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db8:	4770      	bx	lr
	...

08012dbc <jinit_marker_reader>:
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_marker_reader (j_decompress_ptr cinfo)
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b084      	sub	sp, #16
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
  my_marker_ptr marker;
  int i;

  /* Create subobject in permanent pool */
  marker = (my_marker_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	685b      	ldr	r3, [r3, #4]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	22ac      	movs	r2, #172	; 0xac
 8012dcc:	2100      	movs	r1, #0
 8012dce:	6878      	ldr	r0, [r7, #4]
 8012dd0:	4798      	blx	r3
 8012dd2:	60b8      	str	r0, [r7, #8]
				SIZEOF(my_marker_reader));
  cinfo->marker = (struct jpeg_marker_reader *) marker;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	68ba      	ldr	r2, [r7, #8]
 8012dd8:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  /* Initialize public method pointers */
  marker->pub.reset_marker_reader = reset_marker_reader;
 8012ddc:	68bb      	ldr	r3, [r7, #8]
 8012dde:	4a18      	ldr	r2, [pc, #96]	; (8012e40 <jinit_marker_reader+0x84>)
 8012de0:	601a      	str	r2, [r3, #0]
  marker->pub.read_markers = read_markers;
 8012de2:	68bb      	ldr	r3, [r7, #8]
 8012de4:	4a17      	ldr	r2, [pc, #92]	; (8012e44 <jinit_marker_reader+0x88>)
 8012de6:	605a      	str	r2, [r3, #4]
  marker->pub.read_restart_marker = read_restart_marker;
 8012de8:	68bb      	ldr	r3, [r7, #8]
 8012dea:	4a17      	ldr	r2, [pc, #92]	; (8012e48 <jinit_marker_reader+0x8c>)
 8012dec:	609a      	str	r2, [r3, #8]
  /* Initialize COM/APPn processing.
   * By default, we examine and then discard APP0 and APP14,
   * but simply discard COM and all other APPn.
   */
  marker->process_COM = skip_variable;
 8012dee:	68bb      	ldr	r3, [r7, #8]
 8012df0:	4a16      	ldr	r2, [pc, #88]	; (8012e4c <jinit_marker_reader+0x90>)
 8012df2:	61da      	str	r2, [r3, #28]
  marker->length_limit_COM = 0;
 8012df4:	68bb      	ldr	r3, [r7, #8]
 8012df6:	2200      	movs	r2, #0
 8012df8:	661a      	str	r2, [r3, #96]	; 0x60
  for (i = 0; i < 16; i++) {
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	60fb      	str	r3, [r7, #12]
 8012dfe:	e00f      	b.n	8012e20 <jinit_marker_reader+0x64>
    marker->process_APPn[i] = skip_variable;
 8012e00:	68bb      	ldr	r3, [r7, #8]
 8012e02:	68fa      	ldr	r2, [r7, #12]
 8012e04:	3208      	adds	r2, #8
 8012e06:	4911      	ldr	r1, [pc, #68]	; (8012e4c <jinit_marker_reader+0x90>)
 8012e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    marker->length_limit_APPn[i] = 0;
 8012e0c:	68ba      	ldr	r2, [r7, #8]
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	3318      	adds	r3, #24
 8012e12:	009b      	lsls	r3, r3, #2
 8012e14:	4413      	add	r3, r2
 8012e16:	2200      	movs	r2, #0
 8012e18:	605a      	str	r2, [r3, #4]
  for (i = 0; i < 16; i++) {
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	3301      	adds	r3, #1
 8012e1e:	60fb      	str	r3, [r7, #12]
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	2b0f      	cmp	r3, #15
 8012e24:	ddec      	ble.n	8012e00 <jinit_marker_reader+0x44>
  }
  marker->process_APPn[0] = get_interesting_appn;
 8012e26:	68bb      	ldr	r3, [r7, #8]
 8012e28:	4a09      	ldr	r2, [pc, #36]	; (8012e50 <jinit_marker_reader+0x94>)
 8012e2a:	621a      	str	r2, [r3, #32]
  marker->process_APPn[14] = get_interesting_appn;
 8012e2c:	68bb      	ldr	r3, [r7, #8]
 8012e2e:	4a08      	ldr	r2, [pc, #32]	; (8012e50 <jinit_marker_reader+0x94>)
 8012e30:	659a      	str	r2, [r3, #88]	; 0x58
  /* Reset marker processing state */
  reset_marker_reader(cinfo);
 8012e32:	6878      	ldr	r0, [r7, #4]
 8012e34:	f7ff ff9a 	bl	8012d6c <reset_marker_reader>
}
 8012e38:	bf00      	nop
 8012e3a:	3710      	adds	r7, #16
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	bd80      	pop	{r7, pc}
 8012e40:	08012d6d 	.word	0x08012d6d
 8012e44:	08012855 	.word	0x08012855
 8012e48:	08012bb1 	.word	0x08012bb1
 8012e4c:	08012541 	.word	0x08012541
 8012e50:	080123c3 	.word	0x080123c3

08012e54 <use_merged_upsample>:
 * CRUCIAL: this must match the actual capabilities of jdmerge.c!
 */

LOCAL(boolean)
use_merged_upsample (j_decompress_ptr cinfo)
{
 8012e54:	b480      	push	{r7}
 8012e56:	b083      	sub	sp, #12
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
#ifdef UPSAMPLE_MERGING_SUPPORTED
  /* Merging is the equivalent of plain box-filter upsampling */
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d104      	bne.n	8012e6e <use_merged_upsample+0x1a>
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d001      	beq.n	8012e72 <use_merged_upsample+0x1e>
    return FALSE;
 8012e6e:	2300      	movs	r3, #0
 8012e70:	e07a      	b.n	8012f68 <use_merged_upsample+0x114>
  /* jdmerge.c only supports YCC=>RGB color conversion */
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e78:	2b03      	cmp	r3, #3
 8012e7a:	d10c      	bne.n	8012e96 <use_merged_upsample+0x42>
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e80:	2b03      	cmp	r3, #3
 8012e82:	d108      	bne.n	8012e96 <use_merged_upsample+0x42>
      cinfo->out_color_space != JCS_RGB ||
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
 8012e8a:	2b02      	cmp	r3, #2
 8012e8c:	d103      	bne.n	8012e96 <use_merged_upsample+0x42>
      cinfo->out_color_components != RGB_PIXELSIZE)
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      cinfo->out_color_space != JCS_RGB ||
 8012e92:	2b03      	cmp	r3, #3
 8012e94:	d001      	beq.n	8012e9a <use_merged_upsample+0x46>
    return FALSE;
 8012e96:	2300      	movs	r3, #0
 8012e98:	e066      	b.n	8012f68 <use_merged_upsample+0x114>
  /* and it only handles 2h1v or 2h2v sampling ratios */
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012ea0:	689b      	ldr	r3, [r3, #8]
 8012ea2:	2b02      	cmp	r3, #2
 8012ea4:	d121      	bne.n	8012eea <use_merged_upsample+0x96>
      cinfo->comp_info[1].h_samp_factor != 1 ||
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012eac:	3358      	adds	r3, #88	; 0x58
 8012eae:	689b      	ldr	r3, [r3, #8]
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
 8012eb0:	2b01      	cmp	r3, #1
 8012eb2:	d11a      	bne.n	8012eea <use_merged_upsample+0x96>
      cinfo->comp_info[2].h_samp_factor != 1 ||
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012eba:	33b0      	adds	r3, #176	; 0xb0
 8012ebc:	689b      	ldr	r3, [r3, #8]
      cinfo->comp_info[1].h_samp_factor != 1 ||
 8012ebe:	2b01      	cmp	r3, #1
 8012ec0:	d113      	bne.n	8012eea <use_merged_upsample+0x96>
      cinfo->comp_info[0].v_samp_factor >  2 ||
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012ec8:	68db      	ldr	r3, [r3, #12]
      cinfo->comp_info[2].h_samp_factor != 1 ||
 8012eca:	2b02      	cmp	r3, #2
 8012ecc:	dc0d      	bgt.n	8012eea <use_merged_upsample+0x96>
      cinfo->comp_info[1].v_samp_factor != 1 ||
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012ed4:	3358      	adds	r3, #88	; 0x58
 8012ed6:	68db      	ldr	r3, [r3, #12]
      cinfo->comp_info[0].v_samp_factor >  2 ||
 8012ed8:	2b01      	cmp	r3, #1
 8012eda:	d106      	bne.n	8012eea <use_merged_upsample+0x96>
      cinfo->comp_info[2].v_samp_factor != 1)
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012ee2:	33b0      	adds	r3, #176	; 0xb0
 8012ee4:	68db      	ldr	r3, [r3, #12]
      cinfo->comp_info[1].v_samp_factor != 1 ||
 8012ee6:	2b01      	cmp	r3, #1
 8012ee8:	d001      	beq.n	8012eee <use_merged_upsample+0x9a>
    return FALSE;
 8012eea:	2300      	movs	r3, #0
 8012eec:	e03c      	b.n	8012f68 <use_merged_upsample+0x114>
  /* furthermore, it doesn't work if we've scaled the IDCTs differently */
  if (cinfo->comp_info[0].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012ef4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8012efc:	429a      	cmp	r2, r3
 8012efe:	d130      	bne.n	8012f62 <use_merged_upsample+0x10e>
      cinfo->comp_info[1].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012f06:	3358      	adds	r3, #88	; 0x58
 8012f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
  if (cinfo->comp_info[0].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 8012f10:	429a      	cmp	r2, r3
 8012f12:	d126      	bne.n	8012f62 <use_merged_upsample+0x10e>
      cinfo->comp_info[2].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012f1a:	33b0      	adds	r3, #176	; 0xb0
 8012f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
      cinfo->comp_info[1].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 8012f24:	429a      	cmp	r2, r3
 8012f26:	d11c      	bne.n	8012f62 <use_merged_upsample+0x10e>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012f2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
      cinfo->comp_info[2].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 8012f36:	429a      	cmp	r2, r3
 8012f38:	d113      	bne.n	8012f62 <use_merged_upsample+0x10e>
      cinfo->comp_info[1].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012f40:	3358      	adds	r3, #88	; 0x58
 8012f42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 8012f4a:	429a      	cmp	r2, r3
 8012f4c:	d109      	bne.n	8012f62 <use_merged_upsample+0x10e>
      cinfo->comp_info[2].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size)
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012f54:	33b0      	adds	r3, #176	; 0xb0
 8012f56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
      cinfo->comp_info[1].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 8012f5e:	429a      	cmp	r2, r3
 8012f60:	d001      	beq.n	8012f66 <use_merged_upsample+0x112>
    return FALSE;
 8012f62:	2300      	movs	r3, #0
 8012f64:	e000      	b.n	8012f68 <use_merged_upsample+0x114>
  /* ??? also need to test for upsample-time rescaling, when & if supported */
  return TRUE;			/* by golly, it'll work... */
 8012f66:	2301      	movs	r3, #1
#else
  return FALSE;
#endif
}
 8012f68:	4618      	mov	r0, r3
 8012f6a:	370c      	adds	r7, #12
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f72:	4770      	bx	lr

08012f74 <jpeg_calc_output_dimensions>:
GLOBAL(void)
jpeg_calc_output_dimensions (j_decompress_ptr cinfo)
/* Do computations that are needed before master selection phase.
 * This function is used for full decompression.
 */
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b086      	sub	sp, #24
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	6078      	str	r0, [r7, #4]
  int ci;
  jpeg_component_info *compptr;
#endif

  /* Prevent application from calling me at wrong times */
  if (cinfo->global_state != DSTATE_READY)
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	695b      	ldr	r3, [r3, #20]
 8012f80:	2bca      	cmp	r3, #202	; 0xca
 8012f82:	d00d      	beq.n	8012fa0 <jpeg_calc_output_dimensions+0x2c>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	2215      	movs	r2, #21
 8012f8a:	615a      	str	r2, [r3, #20]
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	687a      	ldr	r2, [r7, #4]
 8012f92:	6952      	ldr	r2, [r2, #20]
 8012f94:	619a      	str	r2, [r3, #24]
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	6878      	ldr	r0, [r7, #4]
 8012f9e:	4798      	blx	r3

  /* Compute core output image dimensions and DCT scaling choices. */
  jpeg_core_output_dimensions(cinfo);
 8012fa0:	6878      	ldr	r0, [r7, #4]
 8012fa2:	f7fc f871 	bl	800f088 <jpeg_core_output_dimensions>
  /* In selecting the actual DCT scaling for each component, we try to
   * scale up the chroma components via IDCT scaling rather than upsampling.
   * This saves time if the upsampler gets to use 1:1 scaling.
   * Note this code adapts subsampling ratios which are powers of 2.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	617b      	str	r3, [r7, #20]
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012fb0:	613b      	str	r3, [r7, #16]
 8012fb2:	e078      	b.n	80130a6 <jpeg_calc_output_dimensions+0x132>
       ci++, compptr++) {
    int ssize = 1;
 8012fb4:	2301      	movs	r3, #1
 8012fb6:	60fb      	str	r3, [r7, #12]
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 8012fb8:	e002      	b.n	8012fc0 <jpeg_calc_output_dimensions+0x4c>
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
      ssize = ssize * 2;
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	005b      	lsls	r3, r3, #1
 8012fbe:	60fb      	str	r3, [r7, #12]
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8012fc6:	68fa      	ldr	r2, [r7, #12]
 8012fc8:	fb02 f303 	mul.w	r3, r2, r3
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 8012fcc:	687a      	ldr	r2, [r7, #4]
 8012fce:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8012fd0:	2a00      	cmp	r2, #0
 8012fd2:	d001      	beq.n	8012fd8 <jpeg_calc_output_dimensions+0x64>
 8012fd4:	2208      	movs	r2, #8
 8012fd6:	e000      	b.n	8012fda <jpeg_calc_output_dimensions+0x66>
 8012fd8:	2204      	movs	r2, #4
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 8012fda:	429a      	cmp	r2, r3
 8012fdc:	db0f      	blt.n	8012ffe <jpeg_calc_output_dimensions+0x8a>
	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8012fe4:	693a      	ldr	r2, [r7, #16]
 8012fe6:	6892      	ldr	r2, [r2, #8]
 8012fe8:	68f9      	ldr	r1, [r7, #12]
 8012fea:	fb01 f202 	mul.w	r2, r1, r2
 8012fee:	0052      	lsls	r2, r2, #1
 8012ff0:	fb93 f1f2 	sdiv	r1, r3, r2
 8012ff4:	fb02 f201 	mul.w	r2, r2, r1
 8012ff8:	1a9b      	subs	r3, r3, r2
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d0dd      	beq.n	8012fba <jpeg_calc_output_dimensions+0x46>
    }
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size * ssize;
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8013004:	68fa      	ldr	r2, [r7, #12]
 8013006:	fb02 f203 	mul.w	r2, r2, r3
 801300a:	693b      	ldr	r3, [r7, #16]
 801300c:	625a      	str	r2, [r3, #36]	; 0x24
    ssize = 1;
 801300e:	2301      	movs	r3, #1
 8013010:	60fb      	str	r3, [r7, #12]
    while (cinfo->min_DCT_v_scaled_size * ssize <=
 8013012:	e002      	b.n	801301a <jpeg_calc_output_dimensions+0xa6>
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
      ssize = ssize * 2;
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	005b      	lsls	r3, r3, #1
 8013018:	60fb      	str	r3, [r7, #12]
    while (cinfo->min_DCT_v_scaled_size * ssize <=
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8013020:	68fa      	ldr	r2, [r7, #12]
 8013022:	fb02 f303 	mul.w	r3, r2, r3
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 8013026:	687a      	ldr	r2, [r7, #4]
 8013028:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801302a:	2a00      	cmp	r2, #0
 801302c:	d001      	beq.n	8013032 <jpeg_calc_output_dimensions+0xbe>
 801302e:	2208      	movs	r2, #8
 8013030:	e000      	b.n	8013034 <jpeg_calc_output_dimensions+0xc0>
 8013032:	2204      	movs	r2, #4
    while (cinfo->min_DCT_v_scaled_size * ssize <=
 8013034:	429a      	cmp	r2, r3
 8013036:	db0f      	blt.n	8013058 <jpeg_calc_output_dimensions+0xe4>
	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 801303e:	693a      	ldr	r2, [r7, #16]
 8013040:	68d2      	ldr	r2, [r2, #12]
 8013042:	68f9      	ldr	r1, [r7, #12]
 8013044:	fb01 f202 	mul.w	r2, r1, r2
 8013048:	0052      	lsls	r2, r2, #1
 801304a:	fb93 f1f2 	sdiv	r1, r3, r2
 801304e:	fb02 f201 	mul.w	r2, r2, r1
 8013052:	1a9b      	subs	r3, r3, r2
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 8013054:	2b00      	cmp	r3, #0
 8013056:	d0dd      	beq.n	8013014 <jpeg_calc_output_dimensions+0xa0>
    }
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size * ssize;
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 801305e:	68fa      	ldr	r2, [r7, #12]
 8013060:	fb02 f203 	mul.w	r2, r2, r3
 8013064:	693b      	ldr	r3, [r7, #16]
 8013066:	629a      	str	r2, [r3, #40]	; 0x28

    /* We don't support IDCT ratios larger than 2. */
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 8013068:	693b      	ldr	r3, [r7, #16]
 801306a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801306c:	693b      	ldr	r3, [r7, #16]
 801306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013070:	005b      	lsls	r3, r3, #1
 8013072:	429a      	cmp	r2, r3
 8013074:	dd05      	ble.n	8013082 <jpeg_calc_output_dimensions+0x10e>
	compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
 8013076:	693b      	ldr	r3, [r7, #16]
 8013078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801307a:	005a      	lsls	r2, r3, #1
 801307c:	693b      	ldr	r3, [r7, #16]
 801307e:	625a      	str	r2, [r3, #36]	; 0x24
 8013080:	e00b      	b.n	801309a <jpeg_calc_output_dimensions+0x126>
    else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
 8013082:	693b      	ldr	r3, [r7, #16]
 8013084:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013086:	693b      	ldr	r3, [r7, #16]
 8013088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801308a:	005b      	lsls	r3, r3, #1
 801308c:	429a      	cmp	r2, r3
 801308e:	dd04      	ble.n	801309a <jpeg_calc_output_dimensions+0x126>
	compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
 8013090:	693b      	ldr	r3, [r7, #16]
 8013092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013094:	005a      	lsls	r2, r3, #1
 8013096:	693b      	ldr	r3, [r7, #16]
 8013098:	629a      	str	r2, [r3, #40]	; 0x28
       ci++, compptr++) {
 801309a:	697b      	ldr	r3, [r7, #20]
 801309c:	3301      	adds	r3, #1
 801309e:	617b      	str	r3, [r7, #20]
 80130a0:	693b      	ldr	r3, [r7, #16]
 80130a2:	3358      	adds	r3, #88	; 0x58
 80130a4:	613b      	str	r3, [r7, #16]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130aa:	697a      	ldr	r2, [r7, #20]
 80130ac:	429a      	cmp	r2, r3
 80130ae:	db81      	blt.n	8012fb4 <jpeg_calc_output_dimensions+0x40>
  }

  /* Recompute downsampled dimensions of components;
   * application needs to know these if using raw downsampled data.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80130b0:	2300      	movs	r3, #0
 80130b2:	617b      	str	r3, [r7, #20]
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80130ba:	613b      	str	r3, [r7, #16]
 80130bc:	e039      	b.n	8013132 <jpeg_calc_output_dimensions+0x1be>
       ci++, compptr++) {
    /* Size in samples, after IDCT scaling */
    compptr->downsampled_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width *
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	69db      	ldr	r3, [r3, #28]
 80130c2:	4619      	mov	r1, r3
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 80130c4:	693b      	ldr	r3, [r7, #16]
 80130c6:	689b      	ldr	r3, [r3, #8]
 80130c8:	693a      	ldr	r2, [r7, #16]
 80130ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80130cc:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->image_width *
 80130d0:	fb03 f001 	mul.w	r0, r3, r1
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80130da:	687a      	ldr	r2, [r7, #4]
 80130dc:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 80130e0:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->image_width *
 80130e4:	4619      	mov	r1, r3
 80130e6:	f011 fe91 	bl	8024e0c <jdiv_round_up>
 80130ea:	4603      	mov	r3, r0
    compptr->downsampled_width = (JDIMENSION)
 80130ec:	461a      	mov	r2, r3
 80130ee:	693b      	ldr	r3, [r7, #16]
 80130f0:	62da      	str	r2, [r3, #44]	; 0x2c
    compptr->downsampled_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height *
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	6a1b      	ldr	r3, [r3, #32]
 80130f6:	4619      	mov	r1, r3
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 80130f8:	693b      	ldr	r3, [r7, #16]
 80130fa:	68db      	ldr	r3, [r3, #12]
 80130fc:	693a      	ldr	r2, [r7, #16]
 80130fe:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8013100:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->image_height *
 8013104:	fb03 f001 	mul.w	r0, r3, r1
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 801310e:	687a      	ldr	r2, [r7, #4]
 8013110:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 8013114:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->image_height *
 8013118:	4619      	mov	r1, r3
 801311a:	f011 fe77 	bl	8024e0c <jdiv_round_up>
 801311e:	4603      	mov	r3, r0
    compptr->downsampled_height = (JDIMENSION)
 8013120:	461a      	mov	r2, r3
 8013122:	693b      	ldr	r3, [r7, #16]
 8013124:	631a      	str	r2, [r3, #48]	; 0x30
       ci++, compptr++) {
 8013126:	697b      	ldr	r3, [r7, #20]
 8013128:	3301      	adds	r3, #1
 801312a:	617b      	str	r3, [r7, #20]
 801312c:	693b      	ldr	r3, [r7, #16]
 801312e:	3358      	adds	r3, #88	; 0x58
 8013130:	613b      	str	r3, [r7, #16]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013136:	697a      	ldr	r2, [r7, #20]
 8013138:	429a      	cmp	r2, r3
 801313a:	dbc0      	blt.n	80130be <jpeg_calc_output_dimensions+0x14a>

#endif /* IDCT_SCALING_SUPPORTED */

  /* Report number of components in selected colorspace. */
  /* Probably this should be in the color conversion module... */
  switch (cinfo->out_color_space) {
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8013142:	3b01      	subs	r3, #1
 8013144:	2b04      	cmp	r3, #4
 8013146:	d81d      	bhi.n	8013184 <jpeg_calc_output_dimensions+0x210>
 8013148:	a201      	add	r2, pc, #4	; (adr r2, 8013150 <jpeg_calc_output_dimensions+0x1dc>)
 801314a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801314e:	bf00      	nop
 8013150:	08013165 	.word	0x08013165
 8013154:	0801316d 	.word	0x0801316d
 8013158:	08013175 	.word	0x08013175
 801315c:	0801317d 	.word	0x0801317d
 8013160:	0801317d 	.word	0x0801317d
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	2201      	movs	r2, #1
 8013168:	679a      	str	r2, [r3, #120]	; 0x78
    break;
 801316a:	e010      	b.n	801318e <jpeg_calc_output_dimensions+0x21a>
  case JCS_RGB:
    cinfo->out_color_components = RGB_PIXELSIZE;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	2203      	movs	r2, #3
 8013170:	679a      	str	r2, [r3, #120]	; 0x78
    break;
 8013172:	e00c      	b.n	801318e <jpeg_calc_output_dimensions+0x21a>
  case JCS_YCbCr:
    cinfo->out_color_components = 3;
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	2203      	movs	r2, #3
 8013178:	679a      	str	r2, [r3, #120]	; 0x78
    break;
 801317a:	e008      	b.n	801318e <jpeg_calc_output_dimensions+0x21a>
  case JCS_CMYK:
  case JCS_YCCK:
    cinfo->out_color_components = 4;
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	2204      	movs	r2, #4
 8013180:	679a      	str	r2, [r3, #120]	; 0x78
    break;
 8013182:	e004      	b.n	801318e <jpeg_calc_output_dimensions+0x21a>
  default:			/* else must be same colorspace as in file */
    cinfo->out_color_components = cinfo->num_components;
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	679a      	str	r2, [r3, #120]	; 0x78
    break;
 801318c:	bf00      	nop
  }
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013192:	2b00      	cmp	r3, #0
 8013194:	d102      	bne.n	801319c <jpeg_calc_output_dimensions+0x228>
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801319a:	e000      	b.n	801319e <jpeg_calc_output_dimensions+0x22a>
 801319c:	2301      	movs	r3, #1
 801319e:	687a      	ldr	r2, [r7, #4]
 80131a0:	67d3      	str	r3, [r2, #124]	; 0x7c
			      cinfo->out_color_components);

  /* See if upsampler will want to emit more than one row at a time */
  if (use_merged_upsample(cinfo))
 80131a2:	6878      	ldr	r0, [r7, #4]
 80131a4:	f7ff fe56 	bl	8012e54 <use_merged_upsample>
 80131a8:	4603      	mov	r3, r0
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d006      	beq.n	80131bc <jpeg_calc_output_dimensions+0x248>
    cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  else
    cinfo->rec_outbuf_height = 1;
}
 80131ba:	e003      	b.n	80131c4 <jpeg_calc_output_dimensions+0x250>
    cinfo->rec_outbuf_height = 1;
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	2201      	movs	r2, #1
 80131c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80131c4:	bf00      	nop
 80131c6:	3718      	adds	r7, #24
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bd80      	pop	{r7, pc}

080131cc <prepare_range_limit_table>:
 */

LOCAL(void)
prepare_range_limit_table (j_decompress_ptr cinfo)
/* Allocate and fill in the sample_range_limit table */
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b084      	sub	sp, #16
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
  JSAMPLE * table;
  int i;

  table = (JSAMPLE *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	685b      	ldr	r3, [r3, #4]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 80131de:	2101      	movs	r1, #1
 80131e0:	6878      	ldr	r0, [r7, #4]
 80131e2:	4798      	blx	r3
 80131e4:	60b8      	str	r0, [r7, #8]
		(5 * (MAXJSAMPLE+1) + CENTERJSAMPLE) * SIZEOF(JSAMPLE));
  table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
 80131e6:	68bb      	ldr	r3, [r7, #8]
 80131e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80131ec:	60bb      	str	r3, [r7, #8]
  cinfo->sample_range_limit = table;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	68ba      	ldr	r2, [r7, #8]
 80131f2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
  /* First segment of "simple" table: limit[x] = 0 for x < 0 */
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 80131f6:	68bb      	ldr	r3, [r7, #8]
 80131f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80131fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013200:	2100      	movs	r1, #0
 8013202:	4618      	mov	r0, r3
 8013204:	f011 feb0 	bl	8024f68 <memset>
  /* Main part of "simple" table: limit[x] = x */
  for (i = 0; i <= MAXJSAMPLE; i++)
 8013208:	2300      	movs	r3, #0
 801320a:	60fb      	str	r3, [r7, #12]
 801320c:	e008      	b.n	8013220 <prepare_range_limit_table+0x54>
    table[i] = (JSAMPLE) i;
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	68ba      	ldr	r2, [r7, #8]
 8013212:	4413      	add	r3, r2
 8013214:	68fa      	ldr	r2, [r7, #12]
 8013216:	b2d2      	uxtb	r2, r2
 8013218:	701a      	strb	r2, [r3, #0]
  for (i = 0; i <= MAXJSAMPLE; i++)
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	3301      	adds	r3, #1
 801321e:	60fb      	str	r3, [r7, #12]
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	2bff      	cmp	r3, #255	; 0xff
 8013224:	ddf3      	ble.n	801320e <prepare_range_limit_table+0x42>
  table += CENTERJSAMPLE;	/* Point to where post-IDCT table starts */
 8013226:	68bb      	ldr	r3, [r7, #8]
 8013228:	3380      	adds	r3, #128	; 0x80
 801322a:	60bb      	str	r3, [r7, #8]
  /* End of simple table, rest of first half of post-IDCT table */
  for (i = CENTERJSAMPLE; i < 2*(MAXJSAMPLE+1); i++)
 801322c:	2380      	movs	r3, #128	; 0x80
 801322e:	60fb      	str	r3, [r7, #12]
 8013230:	e007      	b.n	8013242 <prepare_range_limit_table+0x76>
    table[i] = MAXJSAMPLE;
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	68ba      	ldr	r2, [r7, #8]
 8013236:	4413      	add	r3, r2
 8013238:	22ff      	movs	r2, #255	; 0xff
 801323a:	701a      	strb	r2, [r3, #0]
  for (i = CENTERJSAMPLE; i < 2*(MAXJSAMPLE+1); i++)
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	3301      	adds	r3, #1
 8013240:	60fb      	str	r3, [r7, #12]
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013248:	dbf3      	blt.n	8013232 <prepare_range_limit_table+0x66>
  /* Second half of post-IDCT table */
  MEMZERO(table + (2 * (MAXJSAMPLE+1)),
 801324a:	68bb      	ldr	r3, [r7, #8]
 801324c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8013250:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8013254:	2100      	movs	r1, #0
 8013256:	4618      	mov	r0, r3
 8013258:	f011 fe86 	bl	8024f68 <memset>
	  (2 * (MAXJSAMPLE+1) - CENTERJSAMPLE) * SIZEOF(JSAMPLE));
  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
 801325c:	68bb      	ldr	r3, [r7, #8]
 801325e:	f503 7060 	add.w	r0, r3, #896	; 0x380
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8013268:	2280      	movs	r2, #128	; 0x80
 801326a:	4619      	mov	r1, r3
 801326c:	f011 fe6e 	bl	8024f4c <memcpy>
	  cinfo->sample_range_limit, CENTERJSAMPLE * SIZEOF(JSAMPLE));
}
 8013270:	bf00      	nop
 8013272:	3710      	adds	r7, #16
 8013274:	46bd      	mov	sp, r7
 8013276:	bd80      	pop	{r7, pc}

08013278 <master_selection>:
 * settings.
 */

LOCAL(void)
master_selection (j_decompress_ptr cinfo)
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b088      	sub	sp, #32
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
  my_master_ptr master = (my_master_ptr) cinfo->master;
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8013286:	61bb      	str	r3, [r7, #24]
  boolean use_c_buffer;
  long samplesperrow;
  JDIMENSION jd_samplesperrow;

  /* Initialize dimensions and other stuff */
  jpeg_calc_output_dimensions(cinfo);
 8013288:	6878      	ldr	r0, [r7, #4]
 801328a:	f7ff fe73 	bl	8012f74 <jpeg_calc_output_dimensions>
  prepare_range_limit_table(cinfo);
 801328e:	6878      	ldr	r0, [r7, #4]
 8013290:	f7ff ff9c 	bl	80131cc <prepare_range_limit_table>

  /* Width of an output scanline must be representable as JDIMENSION. */
  samplesperrow = (long) cinfo->output_width * (long) cinfo->out_color_components;
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013298:	461a      	mov	r2, r3
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801329e:	fb03 f302 	mul.w	r3, r3, r2
 80132a2:	617b      	str	r3, [r7, #20]
  jd_samplesperrow = (JDIMENSION) samplesperrow;
 80132a4:	697b      	ldr	r3, [r7, #20]
 80132a6:	613b      	str	r3, [r7, #16]
  if ((long) jd_samplesperrow != samplesperrow)
 80132a8:	693b      	ldr	r3, [r7, #16]
 80132aa:	697a      	ldr	r2, [r7, #20]
 80132ac:	429a      	cmp	r2, r3
 80132ae:	d008      	beq.n	80132c2 <master_selection+0x4a>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	2248      	movs	r2, #72	; 0x48
 80132b6:	615a      	str	r2, [r3, #20]
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	6878      	ldr	r0, [r7, #4]
 80132c0:	4798      	blx	r3

  /* Initialize my private state */
  master->pass_number = 0;
 80132c2:	69bb      	ldr	r3, [r7, #24]
 80132c4:	2200      	movs	r2, #0
 80132c6:	60da      	str	r2, [r3, #12]
  master->using_merged_upsample = use_merged_upsample(cinfo);
 80132c8:	6878      	ldr	r0, [r7, #4]
 80132ca:	f7ff fdc3 	bl	8012e54 <use_merged_upsample>
 80132ce:	4602      	mov	r2, r0
 80132d0:	69bb      	ldr	r3, [r7, #24]
 80132d2:	611a      	str	r2, [r3, #16]

  /* Color quantizer selection */
  master->quantizer_1pass = NULL;
 80132d4:	69bb      	ldr	r3, [r7, #24]
 80132d6:	2200      	movs	r2, #0
 80132d8:	615a      	str	r2, [r3, #20]
  master->quantizer_2pass = NULL;
 80132da:	69bb      	ldr	r3, [r7, #24]
 80132dc:	2200      	movs	r2, #0
 80132de:	619a      	str	r2, [r3, #24]
  /* No mode changes if not using buffered-image mode. */
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d003      	beq.n	80132f0 <master_selection+0x78>
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d108      	bne.n	8013302 <master_selection+0x8a>
    cinfo->enable_1pass_quant = FALSE;
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	2200      	movs	r2, #0
 80132f4:	665a      	str	r2, [r3, #100]	; 0x64
    cinfo->enable_external_quant = FALSE;
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	2200      	movs	r2, #0
 80132fa:	669a      	str	r2, [r3, #104]	; 0x68
    cinfo->enable_2pass_quant = FALSE;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	2200      	movs	r2, #0
 8013300:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  if (cinfo->quantize_colors) {
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013306:	2b00      	cmp	r3, #0
 8013308:	d04e      	beq.n	80133a8 <master_selection+0x130>
    if (cinfo->raw_data_out)
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801330e:	2b00      	cmp	r3, #0
 8013310:	d008      	beq.n	8013324 <master_selection+0xac>
      ERREXIT(cinfo, JERR_NOTIMPL);
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	2230      	movs	r2, #48	; 0x30
 8013318:	615a      	str	r2, [r3, #20]
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	6878      	ldr	r0, [r7, #4]
 8013322:	4798      	blx	r3
    /* 2-pass quantizer only works in 3-component color space. */
    if (cinfo->out_color_components != 3) {
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013328:	2b03      	cmp	r3, #3
 801332a:	d00d      	beq.n	8013348 <master_selection+0xd0>
      cinfo->enable_1pass_quant = TRUE;
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	2201      	movs	r2, #1
 8013330:	665a      	str	r2, [r3, #100]	; 0x64
      cinfo->enable_external_quant = FALSE;
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	2200      	movs	r2, #0
 8013336:	669a      	str	r2, [r3, #104]	; 0x68
      cinfo->enable_2pass_quant = FALSE;
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	2200      	movs	r2, #0
 801333c:	66da      	str	r2, [r3, #108]	; 0x6c
      cinfo->colormap = NULL;
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	2200      	movs	r2, #0
 8013342:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8013346:	e013      	b.n	8013370 <master_selection+0xf8>
    } else if (cinfo->colormap != NULL) {
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801334e:	2b00      	cmp	r3, #0
 8013350:	d003      	beq.n	801335a <master_selection+0xe2>
      cinfo->enable_external_quant = TRUE;
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	2201      	movs	r2, #1
 8013356:	669a      	str	r2, [r3, #104]	; 0x68
 8013358:	e00a      	b.n	8013370 <master_selection+0xf8>
    } else if (cinfo->two_pass_quantize) {
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801335e:	2b00      	cmp	r3, #0
 8013360:	d003      	beq.n	801336a <master_selection+0xf2>
      cinfo->enable_2pass_quant = TRUE;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	2201      	movs	r2, #1
 8013366:	66da      	str	r2, [r3, #108]	; 0x6c
 8013368:	e002      	b.n	8013370 <master_selection+0xf8>
    } else {
      cinfo->enable_1pass_quant = TRUE;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	2201      	movs	r2, #1
 801336e:	665a      	str	r2, [r3, #100]	; 0x64
    }

    if (cinfo->enable_1pass_quant) {
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013374:	2b00      	cmp	r3, #0
 8013376:	d007      	beq.n	8013388 <master_selection+0x110>
#ifdef QUANT_1PASS_SUPPORTED
      jinit_1pass_quantizer(cinfo);
 8013378:	6878      	ldr	r0, [r7, #4]
 801337a:	f010 f933 	bl	80235e4 <jinit_1pass_quantizer>
      master->quantizer_1pass = cinfo->cquantize;
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8013384:	69bb      	ldr	r3, [r7, #24]
 8013386:	615a      	str	r2, [r3, #20]
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
    }

    /* We use the 2-pass code to map to external colormaps. */
    if (cinfo->enable_2pass_quant || cinfo->enable_external_quant) {
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801338c:	2b00      	cmp	r3, #0
 801338e:	d103      	bne.n	8013398 <master_selection+0x120>
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013394:	2b00      	cmp	r3, #0
 8013396:	d007      	beq.n	80133a8 <master_selection+0x130>
#ifdef QUANT_2PASS_SUPPORTED
      jinit_2pass_quantizer(cinfo);
 8013398:	6878      	ldr	r0, [r7, #4]
 801339a:	f011 fc83 	bl	8024ca4 <jinit_2pass_quantizer>
      master->quantizer_2pass = cinfo->cquantize;
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 80133a4:	69bb      	ldr	r3, [r7, #24]
 80133a6:	619a      	str	r2, [r3, #24]
     * this is necessary for starting with quantization to an external map.
     */
  }

  /* Post-processing: in particular, color conversion first */
  if (! cinfo->raw_data_out) {
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d113      	bne.n	80133d8 <master_selection+0x160>
    if (master->using_merged_upsample) {
 80133b0:	69bb      	ldr	r3, [r7, #24]
 80133b2:	691b      	ldr	r3, [r3, #16]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d003      	beq.n	80133c0 <master_selection+0x148>
#ifdef UPSAMPLE_MERGING_SUPPORTED
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 80133b8:	6878      	ldr	r0, [r7, #4]
 80133ba:	f000 fca1 	bl	8013d00 <jinit_merged_upsampler>
 80133be:	e005      	b.n	80133cc <master_selection+0x154>
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
    } else {
      jinit_color_deconverter(cinfo);
 80133c0:	6878      	ldr	r0, [r7, #4]
 80133c2:	f7f9 f991 	bl	800c6e8 <jinit_color_deconverter>
      jinit_upsampler(cinfo);
 80133c6:	6878      	ldr	r0, [r7, #4]
 80133c8:	f001 f88e 	bl	80144e8 <jinit_upsampler>
    }
    jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133d0:	4619      	mov	r1, r3
 80133d2:	6878      	ldr	r0, [r7, #4]
 80133d4:	f000 fe6e 	bl	80140b4 <jinit_d_post_controller>
  }
  /* Inverse DCT */
  jinit_inverse_dct(cinfo);
 80133d8:	6878      	ldr	r0, [r7, #4]
 80133da:	f7f9 fde7 	bl	800cfac <jinit_inverse_dct>
  /* Entropy decoding: either Huffman or arithmetic coding. */
  if (cinfo->arith_code)
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d003      	beq.n	80133f0 <master_selection+0x178>
    jinit_arith_decoder(cinfo);
 80133e8:	6878      	ldr	r0, [r7, #4]
 80133ea:	f7f7 fc21 	bl	800ac30 <jinit_arith_decoder>
 80133ee:	e002      	b.n	80133f6 <master_selection+0x17e>
  else {
    jinit_huff_decoder(cinfo);
 80133f0:	6878      	ldr	r0, [r7, #4]
 80133f2:	f7fb fdd5 	bl	800efa0 <jinit_huff_decoder>
  }

  /* Initialize principal buffer controllers. */
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80133fc:	691b      	ldr	r3, [r3, #16]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d103      	bne.n	801340a <master_selection+0x192>
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013406:	2b00      	cmp	r3, #0
 8013408:	d001      	beq.n	801340e <master_selection+0x196>
 801340a:	2301      	movs	r3, #1
 801340c:	e000      	b.n	8013410 <master_selection+0x198>
 801340e:	2300      	movs	r3, #0
 8013410:	60fb      	str	r3, [r7, #12]
  jinit_d_coef_controller(cinfo, use_c_buffer);
 8013412:	68f9      	ldr	r1, [r7, #12]
 8013414:	6878      	ldr	r0, [r7, #4]
 8013416:	f7f8 fd9b 	bl	800bf50 <jinit_d_coef_controller>

  if (! cinfo->raw_data_out)
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801341e:	2b00      	cmp	r3, #0
 8013420:	d103      	bne.n	801342a <master_selection+0x1b2>
    jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);
 8013422:	2100      	movs	r1, #0
 8013424:	6878      	ldr	r0, [r7, #4]
 8013426:	f7fd fad9 	bl	80109dc <jinit_d_main_controller>

  /* We can now tell the memory manager to allocate virtual arrays. */
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	685b      	ldr	r3, [r3, #4]
 801342e:	699b      	ldr	r3, [r3, #24]
 8013430:	6878      	ldr	r0, [r7, #4]
 8013432:	4798      	blx	r3

  /* Initialize input side of decompressor to consume first scan. */
  (*cinfo->inputctl->start_input_pass) (cinfo);
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 801343a:	689b      	ldr	r3, [r3, #8]
 801343c:	6878      	ldr	r0, [r7, #4]
 801343e:	4798      	blx	r3
#ifdef D_MULTISCAN_FILES_SUPPORTED
  /* If jpeg_start_decompress will read the whole file, initialize
   * progress monitoring appropriately.  The input step is counted
   * as one pass.
   */
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	689b      	ldr	r3, [r3, #8]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d03a      	beq.n	80134be <master_selection+0x246>
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801344c:	2b00      	cmp	r3, #0
 801344e:	d136      	bne.n	80134be <master_selection+0x246>
      cinfo->inputctl->has_multiple_scans) {
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8013456:	691b      	ldr	r3, [r3, #16]
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 8013458:	2b00      	cmp	r3, #0
 801345a:	d030      	beq.n	80134be <master_selection+0x246>
    int nscans;
    /* Estimate number of scans to set pass_limit. */
    if (cinfo->progressive_mode) {
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013462:	2b00      	cmp	r3, #0
 8013464:	d007      	beq.n	8013476 <master_selection+0x1fe>
      /* Arbitrarily estimate 2 interleaved DC scans + 3 AC scans/component. */
      nscans = 2 + 3 * cinfo->num_components;
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801346a:	4613      	mov	r3, r2
 801346c:	005b      	lsls	r3, r3, #1
 801346e:	4413      	add	r3, r2
 8013470:	3302      	adds	r3, #2
 8013472:	61fb      	str	r3, [r7, #28]
 8013474:	e002      	b.n	801347c <master_selection+0x204>
    } else {
      /* For a nonprogressive multiscan file, estimate 1 scan per component. */
      nscans = cinfo->num_components;
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801347a:	61fb      	str	r3, [r7, #28]
    }
    cinfo->progress->pass_counter = 0L;
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	689b      	ldr	r3, [r3, #8]
 8013480:	2200      	movs	r2, #0
 8013482:	605a      	str	r2, [r3, #4]
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 801348a:	4619      	mov	r1, r3
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	689b      	ldr	r3, [r3, #8]
 8013490:	69fa      	ldr	r2, [r7, #28]
 8013492:	fb02 f201 	mul.w	r2, r2, r1
 8013496:	609a      	str	r2, [r3, #8]
    cinfo->progress->completed_passes = 0;
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	689b      	ldr	r3, [r3, #8]
 801349c:	2200      	movs	r2, #0
 801349e:	60da      	str	r2, [r3, #12]
    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d001      	beq.n	80134ac <master_selection+0x234>
 80134a8:	2203      	movs	r2, #3
 80134aa:	e000      	b.n	80134ae <master_selection+0x236>
 80134ac:	2202      	movs	r2, #2
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	689b      	ldr	r3, [r3, #8]
 80134b2:	611a      	str	r2, [r3, #16]
    /* Count the input pass as done */
    master->pass_number++;
 80134b4:	69bb      	ldr	r3, [r7, #24]
 80134b6:	68db      	ldr	r3, [r3, #12]
 80134b8:	1c5a      	adds	r2, r3, #1
 80134ba:	69bb      	ldr	r3, [r7, #24]
 80134bc:	60da      	str	r2, [r3, #12]
  }
#endif /* D_MULTISCAN_FILES_SUPPORTED */
}
 80134be:	bf00      	nop
 80134c0:	3720      	adds	r7, #32
 80134c2:	46bd      	mov	sp, r7
 80134c4:	bd80      	pop	{r7, pc}

080134c6 <prepare_for_output_pass>:
 * (In the latter case, jdapistd.c will crank the pass to completion.)
 */

METHODDEF(void)
prepare_for_output_pass (j_decompress_ptr cinfo)
{
 80134c6:	b580      	push	{r7, lr}
 80134c8:	b084      	sub	sp, #16
 80134ca:	af00      	add	r7, sp, #0
 80134cc:	6078      	str	r0, [r7, #4]
  my_master_ptr master = (my_master_ptr) cinfo->master;
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80134d4:	60fb      	str	r3, [r7, #12]

  if (master->pub.is_dummy_pass) {
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	689b      	ldr	r3, [r3, #8]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d018      	beq.n	8013510 <prepare_for_output_pass+0x4a>
#ifdef QUANT_2PASS_SUPPORTED
    /* Final pass of 2-pass quantization */
    master->pub.is_dummy_pass = FALSE;
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	2200      	movs	r2, #0
 80134e2:	609a      	str	r2, [r3, #8]
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	2100      	movs	r1, #0
 80134ee:	6878      	ldr	r0, [r7, #4]
 80134f0:	4798      	blx	r3
    (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	2102      	movs	r1, #2
 80134fc:	6878      	ldr	r0, [r7, #4]
 80134fe:	4798      	blx	r3
    (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	2102      	movs	r1, #2
 801350a:	6878      	ldr	r0, [r7, #4]
 801350c:	4798      	blx	r3
 801350e:	e06e      	b.n	80135ee <prepare_for_output_pass+0x128>
#else
    ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif /* QUANT_2PASS_SUPPORTED */
  } else {
    if (cinfo->quantize_colors && cinfo->colormap == NULL) {
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013514:	2b00      	cmp	r3, #0
 8013516:	d028      	beq.n	801356a <prepare_for_output_pass+0xa4>
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801351e:	2b00      	cmp	r3, #0
 8013520:	d123      	bne.n	801356a <prepare_for_output_pass+0xa4>
      /* Select new quantization method */
      if (cinfo->two_pass_quantize && cinfo->enable_2pass_quant) {
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013526:	2b00      	cmp	r3, #0
 8013528:	d00c      	beq.n	8013544 <prepare_for_output_pass+0x7e>
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801352e:	2b00      	cmp	r3, #0
 8013530:	d008      	beq.n	8013544 <prepare_for_output_pass+0x7e>
	cinfo->cquantize = master->quantizer_2pass;
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	699a      	ldr	r2, [r3, #24]
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	master->pub.is_dummy_pass = TRUE;
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	2201      	movs	r2, #1
 8013540:	609a      	str	r2, [r3, #8]
 8013542:	e012      	b.n	801356a <prepare_for_output_pass+0xa4>
      } else if (cinfo->enable_1pass_quant) {
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013548:	2b00      	cmp	r3, #0
 801354a:	d005      	beq.n	8013558 <prepare_for_output_pass+0x92>
	cinfo->cquantize = master->quantizer_1pass;
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	695a      	ldr	r2, [r3, #20]
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
 8013556:	e008      	b.n	801356a <prepare_for_output_pass+0xa4>
      } else {
	ERREXIT(cinfo, JERR_MODE_CHANGE);
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	222f      	movs	r2, #47	; 0x2f
 801355e:	615a      	str	r2, [r3, #20]
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	6878      	ldr	r0, [r7, #4]
 8013568:	4798      	blx	r3
      }
    }
    (*cinfo->idct->start_pass) (cinfo);
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	6878      	ldr	r0, [r7, #4]
 8013574:	4798      	blx	r3
    (*cinfo->coef->start_output_pass) (cinfo);
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 801357c:	689b      	ldr	r3, [r3, #8]
 801357e:	6878      	ldr	r0, [r7, #4]
 8013580:	4798      	blx	r3
    if (! cinfo->raw_data_out) {
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013586:	2b00      	cmp	r3, #0
 8013588:	d131      	bne.n	80135ee <prepare_for_output_pass+0x128>
      if (! master->using_merged_upsample)
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	691b      	ldr	r3, [r3, #16]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d105      	bne.n	801359e <prepare_for_output_pass+0xd8>
	(*cinfo->cconvert->start_pass) (cinfo);
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	6878      	ldr	r0, [r7, #4]
 801359c:	4798      	blx	r3
      (*cinfo->upsample->start_pass) (cinfo);
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	6878      	ldr	r0, [r7, #4]
 80135a8:	4798      	blx	r3
      if (cinfo->quantize_colors)
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d008      	beq.n	80135c4 <prepare_for_output_pass+0xfe>
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	68fa      	ldr	r2, [r7, #12]
 80135bc:	6892      	ldr	r2, [r2, #8]
 80135be:	4611      	mov	r1, r2
 80135c0:	6878      	ldr	r0, [r7, #4]
 80135c2:	4798      	blx	r3
      (*cinfo->post->start_pass) (cinfo,
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80135ca:	681b      	ldr	r3, [r3, #0]
	    (master->pub.is_dummy_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
 80135cc:	68fa      	ldr	r2, [r7, #12]
 80135ce:	6892      	ldr	r2, [r2, #8]
      (*cinfo->post->start_pass) (cinfo,
 80135d0:	2a00      	cmp	r2, #0
 80135d2:	d001      	beq.n	80135d8 <prepare_for_output_pass+0x112>
 80135d4:	2203      	movs	r2, #3
 80135d6:	e000      	b.n	80135da <prepare_for_output_pass+0x114>
 80135d8:	2200      	movs	r2, #0
 80135da:	4611      	mov	r1, r2
 80135dc:	6878      	ldr	r0, [r7, #4]
 80135de:	4798      	blx	r3
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	2100      	movs	r1, #0
 80135ea:	6878      	ldr	r0, [r7, #4]
 80135ec:	4798      	blx	r3
    }
  }

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	689b      	ldr	r3, [r3, #8]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d029      	beq.n	801364a <prepare_for_output_pass+0x184>
    cinfo->progress->completed_passes = master->pass_number;
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	689b      	ldr	r3, [r3, #8]
 80135fa:	68fa      	ldr	r2, [r7, #12]
 80135fc:	68d2      	ldr	r2, [r2, #12]
 80135fe:	60da      	str	r2, [r3, #12]
    cinfo->progress->total_passes = master->pass_number +
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	68da      	ldr	r2, [r3, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	689b      	ldr	r3, [r3, #8]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d001      	beq.n	8013610 <prepare_for_output_pass+0x14a>
 801360c:	2102      	movs	r1, #2
 801360e:	e000      	b.n	8013612 <prepare_for_output_pass+0x14c>
 8013610:	2101      	movs	r1, #1
    cinfo->progress->total_passes = master->pass_number +
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	689b      	ldr	r3, [r3, #8]
 8013616:	440a      	add	r2, r1
 8013618:	611a      	str	r2, [r3, #16]
    /* In buffered-image mode, we assume one more output pass if EOI not
     * yet reached, but no more passes if EOI has been reached.
     */
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801361e:	2b00      	cmp	r3, #0
 8013620:	d013      	beq.n	801364a <prepare_for_output_pass+0x184>
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8013628:	695b      	ldr	r3, [r3, #20]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d10d      	bne.n	801364a <prepare_for_output_pass+0x184>
      cinfo->progress->total_passes += (cinfo->enable_2pass_quant ? 2 : 1);
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	689b      	ldr	r3, [r3, #8]
 8013632:	691a      	ldr	r2, [r3, #16]
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013638:	2b00      	cmp	r3, #0
 801363a:	d001      	beq.n	8013640 <prepare_for_output_pass+0x17a>
 801363c:	2102      	movs	r1, #2
 801363e:	e000      	b.n	8013642 <prepare_for_output_pass+0x17c>
 8013640:	2101      	movs	r1, #1
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	689b      	ldr	r3, [r3, #8]
 8013646:	440a      	add	r2, r1
 8013648:	611a      	str	r2, [r3, #16]
    }
  }
}
 801364a:	bf00      	nop
 801364c:	3710      	adds	r7, #16
 801364e:	46bd      	mov	sp, r7
 8013650:	bd80      	pop	{r7, pc}

08013652 <finish_output_pass>:
 * Finish up at end of an output pass.
 */

METHODDEF(void)
finish_output_pass (j_decompress_ptr cinfo)
{
 8013652:	b580      	push	{r7, lr}
 8013654:	b084      	sub	sp, #16
 8013656:	af00      	add	r7, sp, #0
 8013658:	6078      	str	r0, [r7, #4]
  my_master_ptr master = (my_master_ptr) cinfo->master;
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8013660:	60fb      	str	r3, [r7, #12]

  if (cinfo->quantize_colors)
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013666:	2b00      	cmp	r3, #0
 8013668:	d005      	beq.n	8013676 <finish_output_pass+0x24>
    (*cinfo->cquantize->finish_pass) (cinfo);
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8013670:	689b      	ldr	r3, [r3, #8]
 8013672:	6878      	ldr	r0, [r7, #4]
 8013674:	4798      	blx	r3
  master->pass_number++;
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	68db      	ldr	r3, [r3, #12]
 801367a:	1c5a      	adds	r2, r3, #1
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	60da      	str	r2, [r3, #12]
}
 8013680:	bf00      	nop
 8013682:	3710      	adds	r7, #16
 8013684:	46bd      	mov	sp, r7
 8013686:	bd80      	pop	{r7, pc}

08013688 <jinit_master_decompress>:
 * This is performed at the start of jpeg_start_decompress.
 */

GLOBAL(void)
jinit_master_decompress (j_decompress_ptr cinfo)
{
 8013688:	b580      	push	{r7, lr}
 801368a:	b084      	sub	sp, #16
 801368c:	af00      	add	r7, sp, #0
 801368e:	6078      	str	r0, [r7, #4]
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	685b      	ldr	r3, [r3, #4]
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	221c      	movs	r2, #28
 8013698:	2101      	movs	r1, #1
 801369a:	6878      	ldr	r0, [r7, #4]
 801369c:	4798      	blx	r3
 801369e:	60f8      	str	r0, [r7, #12]
				  SIZEOF(my_decomp_master));
  cinfo->master = (struct jpeg_decomp_master *) master;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	68fa      	ldr	r2, [r7, #12]
 80136a4:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	4a07      	ldr	r2, [pc, #28]	; (80136c8 <jinit_master_decompress+0x40>)
 80136ac:	601a      	str	r2, [r3, #0]
  master->pub.finish_output_pass = finish_output_pass;
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	4a06      	ldr	r2, [pc, #24]	; (80136cc <jinit_master_decompress+0x44>)
 80136b2:	605a      	str	r2, [r3, #4]

  master->pub.is_dummy_pass = FALSE;
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	2200      	movs	r2, #0
 80136b8:	609a      	str	r2, [r3, #8]

  master_selection(cinfo);
 80136ba:	6878      	ldr	r0, [r7, #4]
 80136bc:	f7ff fddc 	bl	8013278 <master_selection>
}
 80136c0:	bf00      	nop
 80136c2:	3710      	adds	r7, #16
 80136c4:	46bd      	mov	sp, r7
 80136c6:	bd80      	pop	{r7, pc}
 80136c8:	080134c7 	.word	0x080134c7
 80136cc:	08013653 	.word	0x08013653

080136d0 <build_ycc_rgb_table>:
 * This is taken directly from jdcolor.c; see that file for more info.
 */

LOCAL(void)
build_ycc_rgb_table (j_decompress_ptr cinfo)
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b086      	sub	sp, #24
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 80136de:	60fb      	str	r3, [r7, #12]
  int i;
  INT32 x;
  SHIFT_TEMPS

  upsample->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	685b      	ldr	r3, [r3, #4]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80136ea:	2101      	movs	r1, #1
 80136ec:	6878      	ldr	r0, [r7, #4]
 80136ee:	4798      	blx	r3
 80136f0:	4602      	mov	r2, r0
  upsample->Cr_r_tab = (int *)
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	611a      	str	r2, [r3, #16]
				(MAXJSAMPLE+1) * SIZEOF(int));
  upsample->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	685b      	ldr	r3, [r3, #4]
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013700:	2101      	movs	r1, #1
 8013702:	6878      	ldr	r0, [r7, #4]
 8013704:	4798      	blx	r3
 8013706:	4602      	mov	r2, r0
  upsample->Cb_b_tab = (int *)
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	615a      	str	r2, [r3, #20]
				(MAXJSAMPLE+1) * SIZEOF(int));
  upsample->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	685b      	ldr	r3, [r3, #4]
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013716:	2101      	movs	r1, #1
 8013718:	6878      	ldr	r0, [r7, #4]
 801371a:	4798      	blx	r3
 801371c:	4602      	mov	r2, r0
  upsample->Cr_g_tab = (INT32 *)
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	619a      	str	r2, [r3, #24]
				(MAXJSAMPLE+1) * SIZEOF(INT32));
  upsample->Cb_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	685b      	ldr	r3, [r3, #4]
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801372c:	2101      	movs	r1, #1
 801372e:	6878      	ldr	r0, [r7, #4]
 8013730:	4798      	blx	r3
 8013732:	4602      	mov	r2, r0
  upsample->Cb_g_tab = (INT32 *)
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	61da      	str	r2, [r3, #28]
				(MAXJSAMPLE+1) * SIZEOF(INT32));

  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 8013738:	2300      	movs	r3, #0
 801373a:	617b      	str	r3, [r7, #20]
 801373c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8013740:	613b      	str	r3, [r7, #16]
 8013742:	e035      	b.n	80137b0 <build_ycc_rgb_table+0xe0>
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    upsample->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 8013744:	693b      	ldr	r3, [r7, #16]
 8013746:	4a1e      	ldr	r2, [pc, #120]	; (80137c0 <build_ycc_rgb_table+0xf0>)
 8013748:	fb02 f303 	mul.w	r3, r2, r3
 801374c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
    upsample->Cr_r_tab[i] = (int)
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	6919      	ldr	r1, [r3, #16]
 8013754:	697b      	ldr	r3, [r7, #20]
 8013756:	009b      	lsls	r3, r3, #2
 8013758:	440b      	add	r3, r1
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 801375a:	1412      	asrs	r2, r2, #16
    upsample->Cr_r_tab[i] = (int)
 801375c:	601a      	str	r2, [r3, #0]
    /* Cb=>B value is nearest int to 1.77200 * x */
    upsample->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 801375e:	693b      	ldr	r3, [r7, #16]
 8013760:	4a18      	ldr	r2, [pc, #96]	; (80137c4 <build_ycc_rgb_table+0xf4>)
 8013762:	fb02 f303 	mul.w	r3, r2, r3
 8013766:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
    upsample->Cb_b_tab[i] = (int)
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	6959      	ldr	r1, [r3, #20]
 801376e:	697b      	ldr	r3, [r7, #20]
 8013770:	009b      	lsls	r3, r3, #2
 8013772:	440b      	add	r3, r1
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 8013774:	1412      	asrs	r2, r2, #16
    upsample->Cb_b_tab[i] = (int)
 8013776:	601a      	str	r2, [r3, #0]
    /* Cr=>G value is scaled-up -0.71414 * x */
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	699a      	ldr	r2, [r3, #24]
 801377c:	697b      	ldr	r3, [r7, #20]
 801377e:	009b      	lsls	r3, r3, #2
 8013780:	4413      	add	r3, r2
 8013782:	693a      	ldr	r2, [r7, #16]
 8013784:	4910      	ldr	r1, [pc, #64]	; (80137c8 <build_ycc_rgb_table+0xf8>)
 8013786:	fb01 f202 	mul.w	r2, r1, r2
 801378a:	601a      	str	r2, [r3, #0]
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 801378c:	693b      	ldr	r3, [r7, #16]
 801378e:	4a0f      	ldr	r2, [pc, #60]	; (80137cc <build_ycc_rgb_table+0xfc>)
 8013790:	fb02 f203 	mul.w	r2, r2, r3
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	69d9      	ldr	r1, [r3, #28]
 8013798:	697b      	ldr	r3, [r7, #20]
 801379a:	009b      	lsls	r3, r3, #2
 801379c:	440b      	add	r3, r1
 801379e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80137a2:	601a      	str	r2, [r3, #0]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 80137a4:	697b      	ldr	r3, [r7, #20]
 80137a6:	3301      	adds	r3, #1
 80137a8:	617b      	str	r3, [r7, #20]
 80137aa:	693b      	ldr	r3, [r7, #16]
 80137ac:	3301      	adds	r3, #1
 80137ae:	613b      	str	r3, [r7, #16]
 80137b0:	697b      	ldr	r3, [r7, #20]
 80137b2:	2bff      	cmp	r3, #255	; 0xff
 80137b4:	ddc6      	ble.n	8013744 <build_ycc_rgb_table+0x74>
  }
}
 80137b6:	bf00      	nop
 80137b8:	bf00      	nop
 80137ba:	3718      	adds	r7, #24
 80137bc:	46bd      	mov	sp, r7
 80137be:	bd80      	pop	{r7, pc}
 80137c0:	000166e9 	.word	0x000166e9
 80137c4:	0001c5a2 	.word	0x0001c5a2
 80137c8:	ffff492e 	.word	0xffff492e
 80137cc:	ffffa7e6 	.word	0xffffa7e6

080137d0 <start_pass_merged_upsample>:
 * Initialize for an upsampling pass.
 */

METHODDEF(void)
start_pass_merged_upsample (j_decompress_ptr cinfo)
{
 80137d0:	b480      	push	{r7}
 80137d2:	b085      	sub	sp, #20
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	6078      	str	r0, [r7, #4]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 80137de:	60fb      	str	r3, [r7, #12]

  /* Mark the spare buffer empty */
  upsample->spare_full = FALSE;
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	2200      	movs	r2, #0
 80137e4:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80137ee:	bf00      	nop
 80137f0:	3714      	adds	r7, #20
 80137f2:	46bd      	mov	sp, r7
 80137f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f8:	4770      	bx	lr

080137fa <merged_2v_upsample>:
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 2:1 vertical sampling case: may need a spare row. */
{
 80137fa:	b590      	push	{r4, r7, lr}
 80137fc:	b08b      	sub	sp, #44	; 0x2c
 80137fe:	af02      	add	r7, sp, #8
 8013800:	60f8      	str	r0, [r7, #12]
 8013802:	60b9      	str	r1, [r7, #8]
 8013804:	607a      	str	r2, [r7, #4]
 8013806:	603b      	str	r3, [r7, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 801380e:	61bb      	str	r3, [r7, #24]
  JSAMPROW work_ptrs[2];
  JDIMENSION num_rows;		/* number of rows returned to caller */

  if (upsample->spare_full) {
 8013810:	69bb      	ldr	r3, [r7, #24]
 8013812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013814:	2b00      	cmp	r3, #0
 8013816:	d016      	beq.n	8013846 <merged_2v_upsample+0x4c>
    /* If we have a spare row saved from a previous cycle, just return it. */
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 8013818:	69bb      	ldr	r3, [r7, #24]
 801381a:	f103 0020 	add.w	r0, r3, #32
 801381e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	009b      	lsls	r3, r3, #2
 8013824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013826:	441a      	add	r2, r3
 8013828:	69bb      	ldr	r3, [r7, #24]
 801382a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801382c:	9301      	str	r3, [sp, #4]
 801382e:	2301      	movs	r3, #1
 8013830:	9300      	str	r3, [sp, #0]
 8013832:	2300      	movs	r3, #0
 8013834:	2100      	movs	r1, #0
 8013836:	f011 fb15 	bl	8024e64 <jcopy_sample_rows>
		      1, upsample->out_row_width);
    num_rows = 1;
 801383a:	2301      	movs	r3, #1
 801383c:	61fb      	str	r3, [r7, #28]
    upsample->spare_full = FALSE;
 801383e:	69bb      	ldr	r3, [r7, #24]
 8013840:	2200      	movs	r2, #0
 8013842:	625a      	str	r2, [r3, #36]	; 0x24
 8013844:	e036      	b.n	80138b4 <merged_2v_upsample+0xba>
  } else {
    /* Figure number of rows to return to caller. */
    num_rows = 2;
 8013846:	2302      	movs	r3, #2
 8013848:	61fb      	str	r3, [r7, #28]
    /* Not more than the distance to the end of the image. */
    if (num_rows > upsample->rows_to_go)
 801384a:	69bb      	ldr	r3, [r7, #24]
 801384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801384e:	69fa      	ldr	r2, [r7, #28]
 8013850:	429a      	cmp	r2, r3
 8013852:	d902      	bls.n	801385a <merged_2v_upsample+0x60>
      num_rows = upsample->rows_to_go;
 8013854:	69bb      	ldr	r3, [r7, #24]
 8013856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013858:	61fb      	str	r3, [r7, #28]
    /* And not more than what the client can accept: */
    out_rows_avail -= *out_row_ctr;
 801385a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013860:	1ad3      	subs	r3, r2, r3
 8013862:	63bb      	str	r3, [r7, #56]	; 0x38
    if (num_rows > out_rows_avail)
 8013864:	69fa      	ldr	r2, [r7, #28]
 8013866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013868:	429a      	cmp	r2, r3
 801386a:	d901      	bls.n	8013870 <merged_2v_upsample+0x76>
      num_rows = out_rows_avail;
 801386c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801386e:	61fb      	str	r3, [r7, #28]
    /* Create output pointer array for upsampler. */
    work_ptrs[0] = output_buf[*out_row_ctr];
 8013870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	009b      	lsls	r3, r3, #2
 8013876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013878:	4413      	add	r3, r2
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	613b      	str	r3, [r7, #16]
    if (num_rows > 1) {
 801387e:	69fb      	ldr	r3, [r7, #28]
 8013880:	2b01      	cmp	r3, #1
 8013882:	d908      	bls.n	8013896 <merged_2v_upsample+0x9c>
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 8013884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	3301      	adds	r3, #1
 801388a:	009b      	lsls	r3, r3, #2
 801388c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801388e:	4413      	add	r3, r2
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	617b      	str	r3, [r7, #20]
 8013894:	e005      	b.n	80138a2 <merged_2v_upsample+0xa8>
    } else {
      work_ptrs[1] = upsample->spare_row;
 8013896:	69bb      	ldr	r3, [r7, #24]
 8013898:	6a1b      	ldr	r3, [r3, #32]
 801389a:	617b      	str	r3, [r7, #20]
      upsample->spare_full = TRUE;
 801389c:	69bb      	ldr	r3, [r7, #24]
 801389e:	2201      	movs	r2, #1
 80138a0:	625a      	str	r2, [r3, #36]	; 0x24
    }
    /* Now do the upsampling. */
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 80138a2:	69bb      	ldr	r3, [r7, #24]
 80138a4:	68dc      	ldr	r4, [r3, #12]
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	681a      	ldr	r2, [r3, #0]
 80138aa:	f107 0310 	add.w	r3, r7, #16
 80138ae:	68b9      	ldr	r1, [r7, #8]
 80138b0:	68f8      	ldr	r0, [r7, #12]
 80138b2:	47a0      	blx	r4
  }

  /* Adjust counts */
  *out_row_ctr += num_rows;
 80138b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138b6:	681a      	ldr	r2, [r3, #0]
 80138b8:	69fb      	ldr	r3, [r7, #28]
 80138ba:	441a      	add	r2, r3
 80138bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138be:	601a      	str	r2, [r3, #0]
  upsample->rows_to_go -= num_rows;
 80138c0:	69bb      	ldr	r3, [r7, #24]
 80138c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138c4:	69fb      	ldr	r3, [r7, #28]
 80138c6:	1ad2      	subs	r2, r2, r3
 80138c8:	69bb      	ldr	r3, [r7, #24]
 80138ca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* When the buffer is emptied, declare this input row group consumed */
  if (! upsample->spare_full)
 80138cc:	69bb      	ldr	r3, [r7, #24]
 80138ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d104      	bne.n	80138de <merged_2v_upsample+0xe4>
    (*in_row_group_ctr)++;
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	1c5a      	adds	r2, r3, #1
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	601a      	str	r2, [r3, #0]
}
 80138de:	bf00      	nop
 80138e0:	3724      	adds	r7, #36	; 0x24
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bd90      	pop	{r4, r7, pc}

080138e6 <merged_1v_upsample>:
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 1:1 vertical sampling case: much easier, never need a spare row. */
{
 80138e6:	b590      	push	{r4, r7, lr}
 80138e8:	b087      	sub	sp, #28
 80138ea:	af00      	add	r7, sp, #0
 80138ec:	60f8      	str	r0, [r7, #12]
 80138ee:	60b9      	str	r1, [r7, #8]
 80138f0:	607a      	str	r2, [r7, #4]
 80138f2:	603b      	str	r3, [r7, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 80138fa:	617b      	str	r3, [r7, #20]

  /* Just do the upsampling. */
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 80138fc:	697b      	ldr	r3, [r7, #20]
 80138fe:	68dc      	ldr	r4, [r3, #12]
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	6819      	ldr	r1, [r3, #0]
			 output_buf + *out_row_ctr);
 8013904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	009b      	lsls	r3, r3, #2
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 801390a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801390c:	4413      	add	r3, r2
 801390e:	460a      	mov	r2, r1
 8013910:	68b9      	ldr	r1, [r7, #8]
 8013912:	68f8      	ldr	r0, [r7, #12]
 8013914:	47a0      	blx	r4
  /* Adjust counts */
  (*out_row_ctr)++;
 8013916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	1c5a      	adds	r2, r3, #1
 801391c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801391e:	601a      	str	r2, [r3, #0]
  (*in_row_group_ctr)++;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	1c5a      	adds	r2, r3, #1
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	601a      	str	r2, [r3, #0]
}
 801392a:	bf00      	nop
 801392c:	371c      	adds	r7, #28
 801392e:	46bd      	mov	sp, r7
 8013930:	bd90      	pop	{r4, r7, pc}

08013932 <h2v1_merged_upsample>:

METHODDEF(void)
h2v1_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 8013932:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8013936:	b093      	sub	sp, #76	; 0x4c
 8013938:	af00      	add	r7, sp, #0
 801393a:	6178      	str	r0, [r7, #20]
 801393c:	6139      	str	r1, [r7, #16]
 801393e:	60fa      	str	r2, [r7, #12]
 8013940:	60bb      	str	r3, [r7, #8]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8013942:	697b      	ldr	r3, [r7, #20]
 8013944:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8013948:	637b      	str	r3, [r7, #52]	; 0x34
  int cb, cr;
  register JSAMPROW outptr;
  JSAMPROW inptr0, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 801394a:	697b      	ldr	r3, [r7, #20]
 801394c:	f8d3 514c 	ldr.w	r5, [r3, #332]	; 0x14c
  int * Crrtab = upsample->Cr_r_tab;
 8013950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013952:	691b      	ldr	r3, [r3, #16]
 8013954:	633b      	str	r3, [r7, #48]	; 0x30
  int * Cbbtab = upsample->Cb_b_tab;
 8013956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013958:	695b      	ldr	r3, [r3, #20]
 801395a:	62fb      	str	r3, [r7, #44]	; 0x2c
  INT32 * Crgtab = upsample->Cr_g_tab;
 801395c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801395e:	699b      	ldr	r3, [r3, #24]
 8013960:	62bb      	str	r3, [r7, #40]	; 0x28
  INT32 * Cbgtab = upsample->Cb_g_tab;
 8013962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013964:	69db      	ldr	r3, [r3, #28]
 8013966:	627b      	str	r3, [r7, #36]	; 0x24
  SHIFT_TEMPS

  inptr0 = input_buf[0][in_row_group_ctr];
 8013968:	693b      	ldr	r3, [r7, #16]
 801396a:	681a      	ldr	r2, [r3, #0]
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	009b      	lsls	r3, r3, #2
 8013970:	4413      	add	r3, r2
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	647b      	str	r3, [r7, #68]	; 0x44
  inptr1 = input_buf[1][in_row_group_ctr];
 8013976:	693b      	ldr	r3, [r7, #16]
 8013978:	3304      	adds	r3, #4
 801397a:	681a      	ldr	r2, [r3, #0]
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	009b      	lsls	r3, r3, #2
 8013980:	4413      	add	r3, r2
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	643b      	str	r3, [r7, #64]	; 0x40
  inptr2 = input_buf[2][in_row_group_ctr];
 8013986:	693b      	ldr	r3, [r7, #16]
 8013988:	3308      	adds	r3, #8
 801398a:	681a      	ldr	r2, [r3, #0]
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	009b      	lsls	r3, r3, #2
 8013990:	4413      	add	r3, r2
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	63fb      	str	r3, [r7, #60]	; 0x3c
  outptr = output_buf[0];
 8013996:	68bb      	ldr	r3, [r7, #8]
 8013998:	681c      	ldr	r4, [r3, #0]
  /* Loop for each pair of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 801399a:	697b      	ldr	r3, [r7, #20]
 801399c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801399e:	085b      	lsrs	r3, r3, #1
 80139a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80139a2:	e050      	b.n	8013a46 <h2v1_merged_upsample+0x114>
    /* Do the chroma part of the calculation */
    cb = GETJSAMPLE(*inptr1++);
 80139a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80139a6:	1c5a      	adds	r2, r3, #1
 80139a8:	643a      	str	r2, [r7, #64]	; 0x40
 80139aa:	781b      	ldrb	r3, [r3, #0]
 80139ac:	623b      	str	r3, [r7, #32]
    cr = GETJSAMPLE(*inptr2++);
 80139ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139b0:	1c5a      	adds	r2, r3, #1
 80139b2:	63fa      	str	r2, [r7, #60]	; 0x3c
 80139b4:	781b      	ldrb	r3, [r3, #0]
 80139b6:	61fb      	str	r3, [r7, #28]
    cred = Crrtab[cr];
 80139b8:	69fb      	ldr	r3, [r7, #28]
 80139ba:	009b      	lsls	r3, r3, #2
 80139bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139be:	4413      	add	r3, r2
 80139c0:	6818      	ldr	r0, [r3, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 80139c2:	6a3b      	ldr	r3, [r7, #32]
 80139c4:	009b      	lsls	r3, r3, #2
 80139c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80139c8:	4413      	add	r3, r2
 80139ca:	681a      	ldr	r2, [r3, #0]
 80139cc:	69fb      	ldr	r3, [r7, #28]
 80139ce:	009b      	lsls	r3, r3, #2
 80139d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80139d2:	440b      	add	r3, r1
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	4413      	add	r3, r2
 80139d8:	ea4f 4823 	mov.w	r8, r3, asr #16
    cblue = Cbbtab[cb];
 80139dc:	6a3b      	ldr	r3, [r7, #32]
 80139de:	009b      	lsls	r3, r3, #2
 80139e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80139e2:	4413      	add	r3, r2
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	607b      	str	r3, [r7, #4]
    /* Fetch 2 Y values and emit 2 pixels */
    y  = GETJSAMPLE(*inptr0++);
 80139e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139ea:	1c5a      	adds	r2, r3, #1
 80139ec:	647a      	str	r2, [r7, #68]	; 0x44
 80139ee:	781b      	ldrb	r3, [r3, #0]
 80139f0:	461e      	mov	r6, r3
    outptr[RGB_RED] =   range_limit[y + cred];
 80139f2:	4601      	mov	r1, r0
 80139f4:	1873      	adds	r3, r6, r1
 80139f6:	442b      	add	r3, r5
 80139f8:	781b      	ldrb	r3, [r3, #0]
 80139fa:	7023      	strb	r3, [r4, #0]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 80139fc:	eb06 0308 	add.w	r3, r6, r8
 8013a00:	18ea      	adds	r2, r5, r3
 8013a02:	1c63      	adds	r3, r4, #1
 8013a04:	7812      	ldrb	r2, [r2, #0]
 8013a06:	701a      	strb	r2, [r3, #0]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 8013a08:	6878      	ldr	r0, [r7, #4]
 8013a0a:	1833      	adds	r3, r6, r0
 8013a0c:	18ea      	adds	r2, r5, r3
 8013a0e:	1ca3      	adds	r3, r4, #2
 8013a10:	7812      	ldrb	r2, [r2, #0]
 8013a12:	701a      	strb	r2, [r3, #0]
    outptr += RGB_PIXELSIZE;
 8013a14:	3403      	adds	r4, #3
    y  = GETJSAMPLE(*inptr0++);
 8013a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a18:	1c5a      	adds	r2, r3, #1
 8013a1a:	647a      	str	r2, [r7, #68]	; 0x44
 8013a1c:	781b      	ldrb	r3, [r3, #0]
 8013a1e:	461e      	mov	r6, r3
    outptr[RGB_RED] =   range_limit[y + cred];
 8013a20:	1873      	adds	r3, r6, r1
 8013a22:	442b      	add	r3, r5
 8013a24:	781b      	ldrb	r3, [r3, #0]
 8013a26:	7023      	strb	r3, [r4, #0]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 8013a28:	eb06 0308 	add.w	r3, r6, r8
 8013a2c:	18ea      	adds	r2, r5, r3
 8013a2e:	1c63      	adds	r3, r4, #1
 8013a30:	7812      	ldrb	r2, [r2, #0]
 8013a32:	701a      	strb	r2, [r3, #0]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 8013a34:	1833      	adds	r3, r6, r0
 8013a36:	18ea      	adds	r2, r5, r3
 8013a38:	1ca3      	adds	r3, r4, #2
 8013a3a:	7812      	ldrb	r2, [r2, #0]
 8013a3c:	701a      	strb	r2, [r3, #0]
    outptr += RGB_PIXELSIZE;
 8013a3e:	3403      	adds	r4, #3
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 8013a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a42:	3b01      	subs	r3, #1
 8013a44:	63bb      	str	r3, [r7, #56]	; 0x38
 8013a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d1ab      	bne.n	80139a4 <h2v1_merged_upsample+0x72>
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 8013a4c:	697b      	ldr	r3, [r7, #20]
 8013a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a50:	f003 0301 	and.w	r3, r3, #1
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d02e      	beq.n	8013ab6 <h2v1_merged_upsample+0x184>
    cb = GETJSAMPLE(*inptr1);
 8013a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013a5a:	781b      	ldrb	r3, [r3, #0]
 8013a5c:	623b      	str	r3, [r7, #32]
    cr = GETJSAMPLE(*inptr2);
 8013a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a60:	781b      	ldrb	r3, [r3, #0]
 8013a62:	61fb      	str	r3, [r7, #28]
    cred = Crrtab[cr];
 8013a64:	69fb      	ldr	r3, [r7, #28]
 8013a66:	009b      	lsls	r3, r3, #2
 8013a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a6a:	4413      	add	r3, r2
 8013a6c:	6818      	ldr	r0, [r3, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8013a6e:	6a3b      	ldr	r3, [r7, #32]
 8013a70:	009b      	lsls	r3, r3, #2
 8013a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a74:	4413      	add	r3, r2
 8013a76:	681a      	ldr	r2, [r3, #0]
 8013a78:	69fb      	ldr	r3, [r7, #28]
 8013a7a:	009b      	lsls	r3, r3, #2
 8013a7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013a7e:	440b      	add	r3, r1
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	4413      	add	r3, r2
 8013a84:	ea4f 4823 	mov.w	r8, r3, asr #16
    cblue = Cbbtab[cb];
 8013a88:	6a3b      	ldr	r3, [r7, #32]
 8013a8a:	009b      	lsls	r3, r3, #2
 8013a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a8e:	4413      	add	r3, r2
 8013a90:	6819      	ldr	r1, [r3, #0]
    y  = GETJSAMPLE(*inptr0);
 8013a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a94:	781b      	ldrb	r3, [r3, #0]
 8013a96:	461e      	mov	r6, r3
    outptr[RGB_RED] =   range_limit[y + cred];
 8013a98:	1833      	adds	r3, r6, r0
 8013a9a:	442b      	add	r3, r5
 8013a9c:	781b      	ldrb	r3, [r3, #0]
 8013a9e:	7023      	strb	r3, [r4, #0]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 8013aa0:	eb06 0308 	add.w	r3, r6, r8
 8013aa4:	18ea      	adds	r2, r5, r3
 8013aa6:	1c63      	adds	r3, r4, #1
 8013aa8:	7812      	ldrb	r2, [r2, #0]
 8013aaa:	701a      	strb	r2, [r3, #0]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 8013aac:	1873      	adds	r3, r6, r1
 8013aae:	18ea      	adds	r2, r5, r3
 8013ab0:	1ca3      	adds	r3, r4, #2
 8013ab2:	7812      	ldrb	r2, [r2, #0]
 8013ab4:	701a      	strb	r2, [r3, #0]
  }
}
 8013ab6:	bf00      	nop
 8013ab8:	374c      	adds	r7, #76	; 0x4c
 8013aba:	46bd      	mov	sp, r7
 8013abc:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8013ac0:	4770      	bx	lr

08013ac2 <h2v2_merged_upsample>:

METHODDEF(void)
h2v2_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 8013ac2:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8013ac6:	b093      	sub	sp, #76	; 0x4c
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6178      	str	r0, [r7, #20]
 8013acc:	6139      	str	r1, [r7, #16]
 8013ace:	60fa      	str	r2, [r7, #12]
 8013ad0:	60bb      	str	r3, [r7, #8]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8013ad2:	697b      	ldr	r3, [r7, #20]
 8013ad4:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8013ad8:	633b      	str	r3, [r7, #48]	; 0x30
  int cb, cr;
  register JSAMPROW outptr0, outptr1;
  JSAMPROW inptr00, inptr01, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 8013ada:	697b      	ldr	r3, [r7, #20]
 8013adc:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
  int * Crrtab = upsample->Cr_r_tab;
 8013ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ae2:	691b      	ldr	r3, [r3, #16]
 8013ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int * Cbbtab = upsample->Cb_b_tab;
 8013ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ae8:	695b      	ldr	r3, [r3, #20]
 8013aea:	62bb      	str	r3, [r7, #40]	; 0x28
  INT32 * Crgtab = upsample->Cr_g_tab;
 8013aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aee:	699b      	ldr	r3, [r3, #24]
 8013af0:	627b      	str	r3, [r7, #36]	; 0x24
  INT32 * Cbgtab = upsample->Cb_g_tab;
 8013af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013af4:	69db      	ldr	r3, [r3, #28]
 8013af6:	623b      	str	r3, [r7, #32]
  SHIFT_TEMPS

  inptr00 = input_buf[0][in_row_group_ctr*2];
 8013af8:	693b      	ldr	r3, [r7, #16]
 8013afa:	681a      	ldr	r2, [r3, #0]
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	00db      	lsls	r3, r3, #3
 8013b00:	4413      	add	r3, r2
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	647b      	str	r3, [r7, #68]	; 0x44
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 8013b06:	693b      	ldr	r3, [r7, #16]
 8013b08:	681a      	ldr	r2, [r3, #0]
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	00db      	lsls	r3, r3, #3
 8013b0e:	3304      	adds	r3, #4
 8013b10:	4413      	add	r3, r2
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	643b      	str	r3, [r7, #64]	; 0x40
  inptr1 = input_buf[1][in_row_group_ctr];
 8013b16:	693b      	ldr	r3, [r7, #16]
 8013b18:	3304      	adds	r3, #4
 8013b1a:	681a      	ldr	r2, [r3, #0]
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	009b      	lsls	r3, r3, #2
 8013b20:	4413      	add	r3, r2
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	63fb      	str	r3, [r7, #60]	; 0x3c
  inptr2 = input_buf[2][in_row_group_ctr];
 8013b26:	693b      	ldr	r3, [r7, #16]
 8013b28:	3308      	adds	r3, #8
 8013b2a:	681a      	ldr	r2, [r3, #0]
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	009b      	lsls	r3, r3, #2
 8013b30:	4413      	add	r3, r2
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	63bb      	str	r3, [r7, #56]	; 0x38
  outptr0 = output_buf[0];
 8013b36:	68bb      	ldr	r3, [r7, #8]
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	607b      	str	r3, [r7, #4]
  outptr1 = output_buf[1];
 8013b3c:	68bb      	ldr	r3, [r7, #8]
 8013b3e:	685e      	ldr	r6, [r3, #4]
  /* Loop for each group of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 8013b40:	697b      	ldr	r3, [r7, #20]
 8013b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b44:	085b      	lsrs	r3, r3, #1
 8013b46:	637b      	str	r3, [r7, #52]	; 0x34
 8013b48:	e083      	b.n	8013c52 <h2v2_merged_upsample+0x190>
    /* Do the chroma part of the calculation */
    cb = GETJSAMPLE(*inptr1++);
 8013b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b4c:	1c5a      	adds	r2, r3, #1
 8013b4e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013b50:	781b      	ldrb	r3, [r3, #0]
 8013b52:	61fb      	str	r3, [r7, #28]
    cr = GETJSAMPLE(*inptr2++);
 8013b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b56:	1c5a      	adds	r2, r3, #1
 8013b58:	63ba      	str	r2, [r7, #56]	; 0x38
 8013b5a:	781b      	ldrb	r3, [r3, #0]
 8013b5c:	61bb      	str	r3, [r7, #24]
    cred = Crrtab[cr];
 8013b5e:	69bb      	ldr	r3, [r7, #24]
 8013b60:	009b      	lsls	r3, r3, #2
 8013b62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b64:	4413      	add	r3, r2
 8013b66:	6818      	ldr	r0, [r3, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8013b68:	69fb      	ldr	r3, [r7, #28]
 8013b6a:	009b      	lsls	r3, r3, #2
 8013b6c:	6a3a      	ldr	r2, [r7, #32]
 8013b6e:	4413      	add	r3, r2
 8013b70:	681a      	ldr	r2, [r3, #0]
 8013b72:	69bb      	ldr	r3, [r7, #24]
 8013b74:	009b      	lsls	r3, r3, #2
 8013b76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013b78:	440b      	add	r3, r1
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	4413      	add	r3, r2
 8013b7e:	ea4f 4823 	mov.w	r8, r3, asr #16
    cblue = Cbbtab[cb];
 8013b82:	69fb      	ldr	r3, [r7, #28]
 8013b84:	009b      	lsls	r3, r3, #2
 8013b86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b88:	4413      	add	r3, r2
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	603b      	str	r3, [r7, #0]
    /* Fetch 4 Y values and emit 4 pixels */
    y  = GETJSAMPLE(*inptr00++);
 8013b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b90:	1c5a      	adds	r2, r3, #1
 8013b92:	647a      	str	r2, [r7, #68]	; 0x44
 8013b94:	781b      	ldrb	r3, [r3, #0]
 8013b96:	461d      	mov	r5, r3
    outptr0[RGB_RED] =   range_limit[y + cred];
 8013b98:	4601      	mov	r1, r0
 8013b9a:	186b      	adds	r3, r5, r1
 8013b9c:	4423      	add	r3, r4
 8013b9e:	781b      	ldrb	r3, [r3, #0]
 8013ba0:	6878      	ldr	r0, [r7, #4]
 8013ba2:	4602      	mov	r2, r0
 8013ba4:	7013      	strb	r3, [r2, #0]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 8013ba6:	eb05 0308 	add.w	r3, r5, r8
 8013baa:	18e2      	adds	r2, r4, r3
 8013bac:	6078      	str	r0, [r7, #4]
 8013bae:	1c43      	adds	r3, r0, #1
 8013bb0:	7812      	ldrb	r2, [r2, #0]
 8013bb2:	701a      	strb	r2, [r3, #0]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 8013bb4:	6838      	ldr	r0, [r7, #0]
 8013bb6:	182b      	adds	r3, r5, r0
 8013bb8:	18e2      	adds	r2, r4, r3
 8013bba:	687d      	ldr	r5, [r7, #4]
 8013bbc:	1cab      	adds	r3, r5, #2
 8013bbe:	7812      	ldrb	r2, [r2, #0]
 8013bc0:	701a      	strb	r2, [r3, #0]
    outptr0 += RGB_PIXELSIZE;
 8013bc2:	3503      	adds	r5, #3
 8013bc4:	607d      	str	r5, [r7, #4]
    y  = GETJSAMPLE(*inptr00++);
 8013bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bc8:	1c5a      	adds	r2, r3, #1
 8013bca:	647a      	str	r2, [r7, #68]	; 0x44
 8013bcc:	781b      	ldrb	r3, [r3, #0]
 8013bce:	461d      	mov	r5, r3
    outptr0[RGB_RED] =   range_limit[y + cred];
 8013bd0:	186b      	adds	r3, r5, r1
 8013bd2:	4423      	add	r3, r4
 8013bd4:	781b      	ldrb	r3, [r3, #0]
 8013bd6:	687a      	ldr	r2, [r7, #4]
 8013bd8:	7013      	strb	r3, [r2, #0]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 8013bda:	eb05 0308 	add.w	r3, r5, r8
 8013bde:	18e2      	adds	r2, r4, r3
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	3301      	adds	r3, #1
 8013be4:	7812      	ldrb	r2, [r2, #0]
 8013be6:	701a      	strb	r2, [r3, #0]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 8013be8:	182b      	adds	r3, r5, r0
 8013bea:	18e2      	adds	r2, r4, r3
 8013bec:	687d      	ldr	r5, [r7, #4]
 8013bee:	1cab      	adds	r3, r5, #2
 8013bf0:	7812      	ldrb	r2, [r2, #0]
 8013bf2:	701a      	strb	r2, [r3, #0]
    outptr0 += RGB_PIXELSIZE;
 8013bf4:	1ceb      	adds	r3, r5, #3
 8013bf6:	607b      	str	r3, [r7, #4]
    y  = GETJSAMPLE(*inptr01++);
 8013bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bfa:	1c5a      	adds	r2, r3, #1
 8013bfc:	643a      	str	r2, [r7, #64]	; 0x40
 8013bfe:	781b      	ldrb	r3, [r3, #0]
 8013c00:	461d      	mov	r5, r3
    outptr1[RGB_RED] =   range_limit[y + cred];
 8013c02:	186b      	adds	r3, r5, r1
 8013c04:	4423      	add	r3, r4
 8013c06:	781b      	ldrb	r3, [r3, #0]
 8013c08:	7033      	strb	r3, [r6, #0]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 8013c0a:	eb05 0308 	add.w	r3, r5, r8
 8013c0e:	18e2      	adds	r2, r4, r3
 8013c10:	1c73      	adds	r3, r6, #1
 8013c12:	7812      	ldrb	r2, [r2, #0]
 8013c14:	701a      	strb	r2, [r3, #0]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 8013c16:	182b      	adds	r3, r5, r0
 8013c18:	18e2      	adds	r2, r4, r3
 8013c1a:	1cb3      	adds	r3, r6, #2
 8013c1c:	7812      	ldrb	r2, [r2, #0]
 8013c1e:	701a      	strb	r2, [r3, #0]
    outptr1 += RGB_PIXELSIZE;
 8013c20:	3603      	adds	r6, #3
    y  = GETJSAMPLE(*inptr01++);
 8013c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c24:	1c5a      	adds	r2, r3, #1
 8013c26:	643a      	str	r2, [r7, #64]	; 0x40
 8013c28:	781b      	ldrb	r3, [r3, #0]
 8013c2a:	461d      	mov	r5, r3
    outptr1[RGB_RED] =   range_limit[y + cred];
 8013c2c:	186b      	adds	r3, r5, r1
 8013c2e:	4423      	add	r3, r4
 8013c30:	781b      	ldrb	r3, [r3, #0]
 8013c32:	7033      	strb	r3, [r6, #0]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 8013c34:	eb05 0308 	add.w	r3, r5, r8
 8013c38:	18e2      	adds	r2, r4, r3
 8013c3a:	1c73      	adds	r3, r6, #1
 8013c3c:	7812      	ldrb	r2, [r2, #0]
 8013c3e:	701a      	strb	r2, [r3, #0]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 8013c40:	182b      	adds	r3, r5, r0
 8013c42:	18e2      	adds	r2, r4, r3
 8013c44:	1cb3      	adds	r3, r6, #2
 8013c46:	7812      	ldrb	r2, [r2, #0]
 8013c48:	701a      	strb	r2, [r3, #0]
    outptr1 += RGB_PIXELSIZE;
 8013c4a:	3603      	adds	r6, #3
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 8013c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c4e:	3b01      	subs	r3, #1
 8013c50:	637b      	str	r3, [r7, #52]	; 0x34
 8013c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	f47f af78 	bne.w	8013b4a <h2v2_merged_upsample+0x88>
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 8013c5a:	697b      	ldr	r3, [r7, #20]
 8013c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c5e:	f003 0301 	and.w	r3, r3, #1
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d045      	beq.n	8013cf2 <h2v2_merged_upsample+0x230>
    cb = GETJSAMPLE(*inptr1);
 8013c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c68:	781b      	ldrb	r3, [r3, #0]
 8013c6a:	61fb      	str	r3, [r7, #28]
    cr = GETJSAMPLE(*inptr2);
 8013c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c6e:	781b      	ldrb	r3, [r3, #0]
 8013c70:	61bb      	str	r3, [r7, #24]
    cred = Crrtab[cr];
 8013c72:	69bb      	ldr	r3, [r7, #24]
 8013c74:	009b      	lsls	r3, r3, #2
 8013c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c78:	4413      	add	r3, r2
 8013c7a:	6818      	ldr	r0, [r3, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 8013c7c:	69fb      	ldr	r3, [r7, #28]
 8013c7e:	009b      	lsls	r3, r3, #2
 8013c80:	6a3a      	ldr	r2, [r7, #32]
 8013c82:	4413      	add	r3, r2
 8013c84:	681a      	ldr	r2, [r3, #0]
 8013c86:	69bb      	ldr	r3, [r7, #24]
 8013c88:	009b      	lsls	r3, r3, #2
 8013c8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013c8c:	440b      	add	r3, r1
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	4413      	add	r3, r2
 8013c92:	ea4f 4823 	mov.w	r8, r3, asr #16
    cblue = Cbbtab[cb];
 8013c96:	69fb      	ldr	r3, [r7, #28]
 8013c98:	009b      	lsls	r3, r3, #2
 8013c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013c9c:	4413      	add	r3, r2
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	603b      	str	r3, [r7, #0]
    y  = GETJSAMPLE(*inptr00);
 8013ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ca4:	781b      	ldrb	r3, [r3, #0]
 8013ca6:	461d      	mov	r5, r3
    outptr0[RGB_RED] =   range_limit[y + cred];
 8013ca8:	182b      	adds	r3, r5, r0
 8013caa:	4423      	add	r3, r4
 8013cac:	781b      	ldrb	r3, [r3, #0]
 8013cae:	6879      	ldr	r1, [r7, #4]
 8013cb0:	460a      	mov	r2, r1
 8013cb2:	7013      	strb	r3, [r2, #0]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 8013cb4:	eb05 0308 	add.w	r3, r5, r8
 8013cb8:	18e2      	adds	r2, r4, r3
 8013cba:	1c4b      	adds	r3, r1, #1
 8013cbc:	7812      	ldrb	r2, [r2, #0]
 8013cbe:	701a      	strb	r2, [r3, #0]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 8013cc0:	683b      	ldr	r3, [r7, #0]
 8013cc2:	18eb      	adds	r3, r5, r3
 8013cc4:	18e2      	adds	r2, r4, r3
 8013cc6:	1c8b      	adds	r3, r1, #2
 8013cc8:	7812      	ldrb	r2, [r2, #0]
 8013cca:	701a      	strb	r2, [r3, #0]
    y  = GETJSAMPLE(*inptr01);
 8013ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013cce:	781b      	ldrb	r3, [r3, #0]
 8013cd0:	461d      	mov	r5, r3
    outptr1[RGB_RED] =   range_limit[y + cred];
 8013cd2:	182b      	adds	r3, r5, r0
 8013cd4:	4423      	add	r3, r4
 8013cd6:	781b      	ldrb	r3, [r3, #0]
 8013cd8:	7033      	strb	r3, [r6, #0]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 8013cda:	eb05 0308 	add.w	r3, r5, r8
 8013cde:	18e2      	adds	r2, r4, r3
 8013ce0:	1c73      	adds	r3, r6, #1
 8013ce2:	7812      	ldrb	r2, [r2, #0]
 8013ce4:	701a      	strb	r2, [r3, #0]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 8013ce6:	683b      	ldr	r3, [r7, #0]
 8013ce8:	18eb      	adds	r3, r5, r3
 8013cea:	18e2      	adds	r2, r4, r3
 8013cec:	1cb3      	adds	r3, r6, #2
 8013cee:	7812      	ldrb	r2, [r2, #0]
 8013cf0:	701a      	strb	r2, [r3, #0]
  }
}
 8013cf2:	bf00      	nop
 8013cf4:	374c      	adds	r7, #76	; 0x4c
 8013cf6:	46bd      	mov	sp, r7
 8013cf8:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8013cfc:	4770      	bx	lr
	...

08013d00 <jinit_merged_upsampler>:
 * of this module; no safety checks are made here.
 */

GLOBAL(void)
jinit_merged_upsampler (j_decompress_ptr cinfo)
{
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b084      	sub	sp, #16
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6078      	str	r0, [r7, #4]
  my_upsample_ptr upsample;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	685b      	ldr	r3, [r3, #4]
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	2230      	movs	r2, #48	; 0x30
 8013d10:	2101      	movs	r1, #1
 8013d12:	6878      	ldr	r0, [r7, #4]
 8013d14:	4798      	blx	r3
 8013d16:	60f8      	str	r0, [r7, #12]
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	68fa      	ldr	r2, [r7, #12]
 8013d1c:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
  upsample->pub.start_pass = start_pass_merged_upsample;
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	4a1a      	ldr	r2, [pc, #104]	; (8013d8c <jinit_merged_upsampler+0x8c>)
 8013d24:	601a      	str	r2, [r3, #0]
  upsample->pub.need_context_rows = FALSE;
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	2200      	movs	r2, #0
 8013d2a:	609a      	str	r2, [r3, #8]

  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d30:	687a      	ldr	r2, [r7, #4]
 8013d32:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8013d34:	fb02 f203 	mul.w	r2, r2, r3
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (cinfo->max_v_samp_factor == 2) {
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8013d42:	2b02      	cmp	r3, #2
 8013d44:	d111      	bne.n	8013d6a <jinit_merged_upsampler+0x6a>
    upsample->pub.upsample = merged_2v_upsample;
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	4a11      	ldr	r2, [pc, #68]	; (8013d90 <jinit_merged_upsampler+0x90>)
 8013d4a:	605a      	str	r2, [r3, #4]
    upsample->upmethod = h2v2_merged_upsample;
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	4a11      	ldr	r2, [pc, #68]	; (8013d94 <jinit_merged_upsampler+0x94>)
 8013d50:	60da      	str	r2, [r3, #12]
    /* Allocate a spare row buffer */
    upsample->spare_row = (JSAMPROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	685b      	ldr	r3, [r3, #4]
 8013d56:	685b      	ldr	r3, [r3, #4]
		(size_t) (upsample->out_row_width * SIZEOF(JSAMPLE)));
 8013d58:	68fa      	ldr	r2, [r7, #12]
 8013d5a:	6a92      	ldr	r2, [r2, #40]	; 0x28
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8013d5c:	2101      	movs	r1, #1
 8013d5e:	6878      	ldr	r0, [r7, #4]
 8013d60:	4798      	blx	r3
 8013d62:	4602      	mov	r2, r0
    upsample->spare_row = (JSAMPROW)
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	621a      	str	r2, [r3, #32]
 8013d68:	e008      	b.n	8013d7c <jinit_merged_upsampler+0x7c>
  } else {
    upsample->pub.upsample = merged_1v_upsample;
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	4a0a      	ldr	r2, [pc, #40]	; (8013d98 <jinit_merged_upsampler+0x98>)
 8013d6e:	605a      	str	r2, [r3, #4]
    upsample->upmethod = h2v1_merged_upsample;
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	4a0a      	ldr	r2, [pc, #40]	; (8013d9c <jinit_merged_upsampler+0x9c>)
 8013d74:	60da      	str	r2, [r3, #12]
    /* No spare row needed */
    upsample->spare_row = NULL;
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	2200      	movs	r2, #0
 8013d7a:	621a      	str	r2, [r3, #32]
  }

  build_ycc_rgb_table(cinfo);
 8013d7c:	6878      	ldr	r0, [r7, #4]
 8013d7e:	f7ff fca7 	bl	80136d0 <build_ycc_rgb_table>
}
 8013d82:	bf00      	nop
 8013d84:	3710      	adds	r7, #16
 8013d86:	46bd      	mov	sp, r7
 8013d88:	bd80      	pop	{r7, pc}
 8013d8a:	bf00      	nop
 8013d8c:	080137d1 	.word	0x080137d1
 8013d90:	080137fb 	.word	0x080137fb
 8013d94:	08013ac3 	.word	0x08013ac3
 8013d98:	080138e7 	.word	0x080138e7
 8013d9c:	08013933 	.word	0x08013933

08013da0 <start_pass_dpost>:
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_dpost (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
 8013da0:	b590      	push	{r4, r7, lr}
 8013da2:	b087      	sub	sp, #28
 8013da4:	af02      	add	r7, sp, #8
 8013da6:	6078      	str	r0, [r7, #4]
 8013da8:	460b      	mov	r3, r1
 8013daa:	70fb      	strb	r3, [r7, #3]
  my_post_ptr post = (my_post_ptr) cinfo->post;
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8013db2:	60fb      	str	r3, [r7, #12]

  switch (pass_mode) {
 8013db4:	78fb      	ldrb	r3, [r7, #3]
 8013db6:	2b03      	cmp	r3, #3
 8013db8:	d028      	beq.n	8013e0c <start_pass_dpost+0x6c>
 8013dba:	2b03      	cmp	r3, #3
 8013dbc:	dc48      	bgt.n	8013e50 <start_pass_dpost+0xb0>
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d002      	beq.n	8013dc8 <start_pass_dpost+0x28>
 8013dc2:	2b02      	cmp	r3, #2
 8013dc4:	d033      	beq.n	8013e2e <start_pass_dpost+0x8e>
 8013dc6:	e043      	b.n	8013e50 <start_pass_dpost+0xb0>
  case JBUF_PASS_THRU:
    if (cinfo->quantize_colors) {
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d016      	beq.n	8013dfe <start_pass_dpost+0x5e>
      /* Single-pass processing with color quantization. */
      post->pub.post_process_data = post_process_1pass;
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	4a2a      	ldr	r2, [pc, #168]	; (8013e7c <start_pass_dpost+0xdc>)
 8013dd4:	605a      	str	r2, [r3, #4]
      /* We could be doing buffered-image output before starting a 2-pass
       * color quantization; in that case, jinit_d_post_controller did not
       * allocate a strip buffer.  Use the virtual-array buffer as workspace.
       */
      if (post->buffer == NULL) {
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	68db      	ldr	r3, [r3, #12]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d142      	bne.n	8013e64 <start_pass_dpost+0xc4>
	post->buffer = (*cinfo->mem->access_virt_sarray)
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	685b      	ldr	r3, [r3, #4]
 8013de2:	69dc      	ldr	r4, [r3, #28]
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	6899      	ldr	r1, [r3, #8]
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	691b      	ldr	r3, [r3, #16]
 8013dec:	2201      	movs	r2, #1
 8013dee:	9200      	str	r2, [sp, #0]
 8013df0:	2200      	movs	r2, #0
 8013df2:	6878      	ldr	r0, [r7, #4]
 8013df4:	47a0      	blx	r4
 8013df6:	4602      	mov	r2, r0
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	60da      	str	r2, [r3, #12]
      /* For single-pass processing without color quantization,
       * I have no work to do; just call the upsampler directly.
       */
      post->pub.post_process_data = cinfo->upsample->upsample;
    }
    break;
 8013dfc:	e032      	b.n	8013e64 <start_pass_dpost+0xc4>
      post->pub.post_process_data = cinfo->upsample->upsample;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8013e04:	685a      	ldr	r2, [r3, #4]
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	605a      	str	r2, [r3, #4]
    break;
 8013e0a:	e02b      	b.n	8013e64 <start_pass_dpost+0xc4>
#ifdef QUANT_2PASS_SUPPORTED
  case JBUF_SAVE_AND_PASS:
    /* First pass of 2-pass quantization */
    if (post->whole_image == NULL)
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	689b      	ldr	r3, [r3, #8]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d108      	bne.n	8013e26 <start_pass_dpost+0x86>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	2203      	movs	r2, #3
 8013e1a:	615a      	str	r2, [r3, #20]
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	6878      	ldr	r0, [r7, #4]
 8013e24:	4798      	blx	r3
    post->pub.post_process_data = post_process_prepass;
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	4a15      	ldr	r2, [pc, #84]	; (8013e80 <start_pass_dpost+0xe0>)
 8013e2a:	605a      	str	r2, [r3, #4]
    break;
 8013e2c:	e01b      	b.n	8013e66 <start_pass_dpost+0xc6>
  case JBUF_CRANK_DEST:
    /* Second pass of 2-pass quantization */
    if (post->whole_image == NULL)
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	689b      	ldr	r3, [r3, #8]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d108      	bne.n	8013e48 <start_pass_dpost+0xa8>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	2203      	movs	r2, #3
 8013e3c:	615a      	str	r2, [r3, #20]
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	6878      	ldr	r0, [r7, #4]
 8013e46:	4798      	blx	r3
    post->pub.post_process_data = post_process_2pass;
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	4a0e      	ldr	r2, [pc, #56]	; (8013e84 <start_pass_dpost+0xe4>)
 8013e4c:	605a      	str	r2, [r3, #4]
    break;
 8013e4e:	e00a      	b.n	8013e66 <start_pass_dpost+0xc6>
#endif /* QUANT_2PASS_SUPPORTED */
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	2203      	movs	r2, #3
 8013e56:	615a      	str	r2, [r3, #20]
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	6878      	ldr	r0, [r7, #4]
 8013e60:	4798      	blx	r3
    break;
 8013e62:	e000      	b.n	8013e66 <start_pass_dpost+0xc6>
    break;
 8013e64:	bf00      	nop
  }
  post->starting_row = post->next_row = 0;
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	2200      	movs	r2, #0
 8013e6a:	619a      	str	r2, [r3, #24]
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	699a      	ldr	r2, [r3, #24]
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	615a      	str	r2, [r3, #20]
}
 8013e74:	bf00      	nop
 8013e76:	3714      	adds	r7, #20
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	bd90      	pop	{r4, r7, pc}
 8013e7c:	08013e89 	.word	0x08013e89
 8013e80:	08013f0f 	.word	0x08013f0f
 8013e84:	08013fd9 	.word	0x08013fd9

08013e88 <post_process_1pass>:
post_process_1pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 8013e88:	b590      	push	{r4, r7, lr}
 8013e8a:	b08d      	sub	sp, #52	; 0x34
 8013e8c:	af04      	add	r7, sp, #16
 8013e8e:	60f8      	str	r0, [r7, #12]
 8013e90:	60b9      	str	r1, [r7, #8]
 8013e92:	607a      	str	r2, [r7, #4]
 8013e94:	603b      	str	r3, [r7, #0]
  my_post_ptr post = (my_post_ptr) cinfo->post;
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8013e9c:	61bb      	str	r3, [r7, #24]
  JDIMENSION num_rows, max_rows;

  /* Fill the buffer, but not more than what we can dump out in one go. */
  /* Note we rely on the upsampler to detect bottom of image. */
  max_rows = out_rows_avail - *out_row_ctr;
 8013e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ea4:	1ad3      	subs	r3, r2, r3
 8013ea6:	61fb      	str	r3, [r7, #28]
  if (max_rows > post->strip_height)
 8013ea8:	69bb      	ldr	r3, [r7, #24]
 8013eaa:	691b      	ldr	r3, [r3, #16]
 8013eac:	69fa      	ldr	r2, [r7, #28]
 8013eae:	429a      	cmp	r2, r3
 8013eb0:	d902      	bls.n	8013eb8 <post_process_1pass+0x30>
    max_rows = post->strip_height;
 8013eb2:	69bb      	ldr	r3, [r7, #24]
 8013eb4:	691b      	ldr	r3, [r3, #16]
 8013eb6:	61fb      	str	r3, [r7, #28]
  num_rows = 0;
 8013eb8:	2300      	movs	r3, #0
 8013eba:	617b      	str	r3, [r7, #20]
  (*cinfo->upsample->upsample) (cinfo,
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8013ec2:	685c      	ldr	r4, [r3, #4]
 8013ec4:	69bb      	ldr	r3, [r7, #24]
 8013ec6:	68db      	ldr	r3, [r3, #12]
 8013ec8:	69fa      	ldr	r2, [r7, #28]
 8013eca:	9202      	str	r2, [sp, #8]
 8013ecc:	f107 0214 	add.w	r2, r7, #20
 8013ed0:	9201      	str	r2, [sp, #4]
 8013ed2:	9300      	str	r3, [sp, #0]
 8013ed4:	683b      	ldr	r3, [r7, #0]
 8013ed6:	687a      	ldr	r2, [r7, #4]
 8013ed8:	68b9      	ldr	r1, [r7, #8]
 8013eda:	68f8      	ldr	r0, [r7, #12]
 8013edc:	47a0      	blx	r4
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &num_rows, max_rows);
  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8013ee4:	685c      	ldr	r4, [r3, #4]
 8013ee6:	69bb      	ldr	r3, [r7, #24]
 8013ee8:	68d9      	ldr	r1, [r3, #12]
		post->buffer, output_buf + *out_row_ctr, (int) num_rows);
 8013eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	009b      	lsls	r3, r3, #2
  (*cinfo->cquantize->color_quantize) (cinfo,
 8013ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ef2:	441a      	add	r2, r3
 8013ef4:	697b      	ldr	r3, [r7, #20]
 8013ef6:	68f8      	ldr	r0, [r7, #12]
 8013ef8:	47a0      	blx	r4
  *out_row_ctr += num_rows;
 8013efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013efc:	681a      	ldr	r2, [r3, #0]
 8013efe:	697b      	ldr	r3, [r7, #20]
 8013f00:	441a      	add	r2, r3
 8013f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f04:	601a      	str	r2, [r3, #0]
}
 8013f06:	bf00      	nop
 8013f08:	3724      	adds	r7, #36	; 0x24
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	bd90      	pop	{r4, r7, pc}

08013f0e <post_process_prepass>:
post_process_prepass (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		      JDIMENSION in_row_groups_avail,
		      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		      JDIMENSION out_rows_avail)
{
 8013f0e:	b590      	push	{r4, r7, lr}
 8013f10:	b08d      	sub	sp, #52	; 0x34
 8013f12:	af04      	add	r7, sp, #16
 8013f14:	60f8      	str	r0, [r7, #12]
 8013f16:	60b9      	str	r1, [r7, #8]
 8013f18:	607a      	str	r2, [r7, #4]
 8013f1a:	603b      	str	r3, [r7, #0]
  my_post_ptr post = (my_post_ptr) cinfo->post;
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8013f22:	61fb      	str	r3, [r7, #28]
  JDIMENSION old_next_row, num_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 8013f24:	69fb      	ldr	r3, [r7, #28]
 8013f26:	699b      	ldr	r3, [r3, #24]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d10f      	bne.n	8013f4c <post_process_prepass+0x3e>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	685b      	ldr	r3, [r3, #4]
 8013f30:	69dc      	ldr	r4, [r3, #28]
 8013f32:	69fb      	ldr	r3, [r7, #28]
 8013f34:	6899      	ldr	r1, [r3, #8]
 8013f36:	69fb      	ldr	r3, [r7, #28]
 8013f38:	695a      	ldr	r2, [r3, #20]
 8013f3a:	69fb      	ldr	r3, [r7, #28]
 8013f3c:	691b      	ldr	r3, [r3, #16]
 8013f3e:	2001      	movs	r0, #1
 8013f40:	9000      	str	r0, [sp, #0]
 8013f42:	68f8      	ldr	r0, [r7, #12]
 8013f44:	47a0      	blx	r4
 8013f46:	4602      	mov	r2, r0
 8013f48:	69fb      	ldr	r3, [r7, #28]
 8013f4a:	60da      	str	r2, [r3, #12]
	((j_common_ptr) cinfo, post->whole_image,
	 post->starting_row, post->strip_height, TRUE);
  }

  /* Upsample some data (up to a strip height's worth). */
  old_next_row = post->next_row;
 8013f4c:	69fb      	ldr	r3, [r7, #28]
 8013f4e:	699b      	ldr	r3, [r3, #24]
 8013f50:	61bb      	str	r3, [r7, #24]
  (*cinfo->upsample->upsample) (cinfo,
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8013f58:	685c      	ldr	r4, [r3, #4]
 8013f5a:	69fb      	ldr	r3, [r7, #28]
 8013f5c:	68db      	ldr	r3, [r3, #12]
 8013f5e:	69fa      	ldr	r2, [r7, #28]
 8013f60:	3218      	adds	r2, #24
 8013f62:	69f9      	ldr	r1, [r7, #28]
 8013f64:	6909      	ldr	r1, [r1, #16]
 8013f66:	9102      	str	r1, [sp, #8]
 8013f68:	9201      	str	r2, [sp, #4]
 8013f6a:	9300      	str	r3, [sp, #0]
 8013f6c:	683b      	ldr	r3, [r7, #0]
 8013f6e:	687a      	ldr	r2, [r7, #4]
 8013f70:	68b9      	ldr	r1, [r7, #8]
 8013f72:	68f8      	ldr	r0, [r7, #12]
 8013f74:	47a0      	blx	r4
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &post->next_row, post->strip_height);

  /* Allow quantizer to scan new data.  No data is emitted, */
  /* but we advance out_row_ctr so outer loop can tell when we're done. */
  if (post->next_row > old_next_row) {
 8013f76:	69fb      	ldr	r3, [r7, #28]
 8013f78:	699b      	ldr	r3, [r3, #24]
 8013f7a:	69ba      	ldr	r2, [r7, #24]
 8013f7c:	429a      	cmp	r2, r3
 8013f7e:	d217      	bcs.n	8013fb0 <post_process_prepass+0xa2>
    num_rows = post->next_row - old_next_row;
 8013f80:	69fb      	ldr	r3, [r7, #28]
 8013f82:	699a      	ldr	r2, [r3, #24]
 8013f84:	69bb      	ldr	r3, [r7, #24]
 8013f86:	1ad3      	subs	r3, r2, r3
 8013f88:	617b      	str	r3, [r7, #20]
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8013f90:	685c      	ldr	r4, [r3, #4]
 8013f92:	69fb      	ldr	r3, [r7, #28]
 8013f94:	68da      	ldr	r2, [r3, #12]
 8013f96:	69bb      	ldr	r3, [r7, #24]
 8013f98:	009b      	lsls	r3, r3, #2
 8013f9a:	18d1      	adds	r1, r2, r3
 8013f9c:	697b      	ldr	r3, [r7, #20]
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	68f8      	ldr	r0, [r7, #12]
 8013fa2:	47a0      	blx	r4
					 (JSAMPARRAY) NULL, (int) num_rows);
    *out_row_ctr += num_rows;
 8013fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fa6:	681a      	ldr	r2, [r3, #0]
 8013fa8:	697b      	ldr	r3, [r7, #20]
 8013faa:	441a      	add	r2, r3
 8013fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fae:	601a      	str	r2, [r3, #0]
  }

  /* Advance if we filled the strip. */
  if (post->next_row >= post->strip_height) {
 8013fb0:	69fb      	ldr	r3, [r7, #28]
 8013fb2:	699a      	ldr	r2, [r3, #24]
 8013fb4:	69fb      	ldr	r3, [r7, #28]
 8013fb6:	691b      	ldr	r3, [r3, #16]
 8013fb8:	429a      	cmp	r2, r3
 8013fba:	d309      	bcc.n	8013fd0 <post_process_prepass+0xc2>
    post->starting_row += post->strip_height;
 8013fbc:	69fb      	ldr	r3, [r7, #28]
 8013fbe:	695a      	ldr	r2, [r3, #20]
 8013fc0:	69fb      	ldr	r3, [r7, #28]
 8013fc2:	691b      	ldr	r3, [r3, #16]
 8013fc4:	441a      	add	r2, r3
 8013fc6:	69fb      	ldr	r3, [r7, #28]
 8013fc8:	615a      	str	r2, [r3, #20]
    post->next_row = 0;
 8013fca:	69fb      	ldr	r3, [r7, #28]
 8013fcc:	2200      	movs	r2, #0
 8013fce:	619a      	str	r2, [r3, #24]
  }
}
 8013fd0:	bf00      	nop
 8013fd2:	3724      	adds	r7, #36	; 0x24
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	bd90      	pop	{r4, r7, pc}

08013fd8 <post_process_2pass>:
post_process_2pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 8013fd8:	b590      	push	{r4, r7, lr}
 8013fda:	b08b      	sub	sp, #44	; 0x2c
 8013fdc:	af02      	add	r7, sp, #8
 8013fde:	60f8      	str	r0, [r7, #12]
 8013fe0:	60b9      	str	r1, [r7, #8]
 8013fe2:	607a      	str	r2, [r7, #4]
 8013fe4:	603b      	str	r3, [r7, #0]
  my_post_ptr post = (my_post_ptr) cinfo->post;
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8013fec:	61bb      	str	r3, [r7, #24]
  JDIMENSION num_rows, max_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 8013fee:	69bb      	ldr	r3, [r7, #24]
 8013ff0:	699b      	ldr	r3, [r3, #24]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d10f      	bne.n	8014016 <post_process_2pass+0x3e>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	685b      	ldr	r3, [r3, #4]
 8013ffa:	69dc      	ldr	r4, [r3, #28]
 8013ffc:	69bb      	ldr	r3, [r7, #24]
 8013ffe:	6899      	ldr	r1, [r3, #8]
 8014000:	69bb      	ldr	r3, [r7, #24]
 8014002:	695a      	ldr	r2, [r3, #20]
 8014004:	69bb      	ldr	r3, [r7, #24]
 8014006:	691b      	ldr	r3, [r3, #16]
 8014008:	2000      	movs	r0, #0
 801400a:	9000      	str	r0, [sp, #0]
 801400c:	68f8      	ldr	r0, [r7, #12]
 801400e:	47a0      	blx	r4
 8014010:	4602      	mov	r2, r0
 8014012:	69bb      	ldr	r3, [r7, #24]
 8014014:	60da      	str	r2, [r3, #12]
	((j_common_ptr) cinfo, post->whole_image,
	 post->starting_row, post->strip_height, FALSE);
  }

  /* Determine number of rows to emit. */
  num_rows = post->strip_height - post->next_row; /* available in strip */
 8014016:	69bb      	ldr	r3, [r7, #24]
 8014018:	691a      	ldr	r2, [r3, #16]
 801401a:	69bb      	ldr	r3, [r7, #24]
 801401c:	699b      	ldr	r3, [r3, #24]
 801401e:	1ad3      	subs	r3, r2, r3
 8014020:	61fb      	str	r3, [r7, #28]
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 8014022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014028:	1ad3      	subs	r3, r2, r3
 801402a:	617b      	str	r3, [r7, #20]
  if (num_rows > max_rows)
 801402c:	69fa      	ldr	r2, [r7, #28]
 801402e:	697b      	ldr	r3, [r7, #20]
 8014030:	429a      	cmp	r2, r3
 8014032:	d901      	bls.n	8014038 <post_process_2pass+0x60>
    num_rows = max_rows;
 8014034:	697b      	ldr	r3, [r7, #20]
 8014036:	61fb      	str	r3, [r7, #28]
  /* We have to check bottom of image here, can't depend on upsampler. */
  max_rows = cinfo->output_height - post->starting_row;
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801403c:	69bb      	ldr	r3, [r7, #24]
 801403e:	695b      	ldr	r3, [r3, #20]
 8014040:	1ad3      	subs	r3, r2, r3
 8014042:	617b      	str	r3, [r7, #20]
  if (num_rows > max_rows)
 8014044:	69fa      	ldr	r2, [r7, #28]
 8014046:	697b      	ldr	r3, [r7, #20]
 8014048:	429a      	cmp	r2, r3
 801404a:	d901      	bls.n	8014050 <post_process_2pass+0x78>
    num_rows = max_rows;
 801404c:	697b      	ldr	r3, [r7, #20]
 801404e:	61fb      	str	r3, [r7, #28]

  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8014056:	685c      	ldr	r4, [r3, #4]
		post->buffer + post->next_row, output_buf + *out_row_ctr,
 8014058:	69bb      	ldr	r3, [r7, #24]
 801405a:	68da      	ldr	r2, [r3, #12]
 801405c:	69bb      	ldr	r3, [r7, #24]
 801405e:	699b      	ldr	r3, [r3, #24]
 8014060:	009b      	lsls	r3, r3, #2
  (*cinfo->cquantize->color_quantize) (cinfo,
 8014062:	18d1      	adds	r1, r2, r3
		post->buffer + post->next_row, output_buf + *out_row_ctr,
 8014064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	009b      	lsls	r3, r3, #2
  (*cinfo->cquantize->color_quantize) (cinfo,
 801406a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801406c:	441a      	add	r2, r3
 801406e:	69fb      	ldr	r3, [r7, #28]
 8014070:	68f8      	ldr	r0, [r7, #12]
 8014072:	47a0      	blx	r4
		(int) num_rows);
  *out_row_ctr += num_rows;
 8014074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014076:	681a      	ldr	r2, [r3, #0]
 8014078:	69fb      	ldr	r3, [r7, #28]
 801407a:	441a      	add	r2, r3
 801407c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801407e:	601a      	str	r2, [r3, #0]

  /* Advance if we filled the strip. */
  post->next_row += num_rows;
 8014080:	69bb      	ldr	r3, [r7, #24]
 8014082:	699a      	ldr	r2, [r3, #24]
 8014084:	69fb      	ldr	r3, [r7, #28]
 8014086:	441a      	add	r2, r3
 8014088:	69bb      	ldr	r3, [r7, #24]
 801408a:	619a      	str	r2, [r3, #24]
  if (post->next_row >= post->strip_height) {
 801408c:	69bb      	ldr	r3, [r7, #24]
 801408e:	699a      	ldr	r2, [r3, #24]
 8014090:	69bb      	ldr	r3, [r7, #24]
 8014092:	691b      	ldr	r3, [r3, #16]
 8014094:	429a      	cmp	r2, r3
 8014096:	d309      	bcc.n	80140ac <post_process_2pass+0xd4>
    post->starting_row += post->strip_height;
 8014098:	69bb      	ldr	r3, [r7, #24]
 801409a:	695a      	ldr	r2, [r3, #20]
 801409c:	69bb      	ldr	r3, [r7, #24]
 801409e:	691b      	ldr	r3, [r3, #16]
 80140a0:	441a      	add	r2, r3
 80140a2:	69bb      	ldr	r3, [r7, #24]
 80140a4:	615a      	str	r2, [r3, #20]
    post->next_row = 0;
 80140a6:	69bb      	ldr	r3, [r7, #24]
 80140a8:	2200      	movs	r2, #0
 80140aa:	619a      	str	r2, [r3, #24]
  }
}
 80140ac:	bf00      	nop
 80140ae:	3724      	adds	r7, #36	; 0x24
 80140b0:	46bd      	mov	sp, r7
 80140b2:	bd90      	pop	{r4, r7, pc}

080140b4 <jinit_d_post_controller>:
 * Initialize postprocessing controller.
 */

GLOBAL(void)
jinit_d_post_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 80140b4:	b5b0      	push	{r4, r5, r7, lr}
 80140b6:	b086      	sub	sp, #24
 80140b8:	af02      	add	r7, sp, #8
 80140ba:	6078      	str	r0, [r7, #4]
 80140bc:	6039      	str	r1, [r7, #0]
  my_post_ptr post;

  post = (my_post_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	685b      	ldr	r3, [r3, #4]
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	221c      	movs	r2, #28
 80140c6:	2101      	movs	r1, #1
 80140c8:	6878      	ldr	r0, [r7, #4]
 80140ca:	4798      	blx	r3
 80140cc:	60f8      	str	r0, [r7, #12]
				SIZEOF(my_post_controller));
  cinfo->post = (struct jpeg_d_post_controller *) post;
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	68fa      	ldr	r2, [r7, #12]
 80140d2:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
  post->pub.start_pass = start_pass_dpost;
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	4a25      	ldr	r2, [pc, #148]	; (8014170 <jinit_d_post_controller+0xbc>)
 80140da:	601a      	str	r2, [r3, #0]
  post->whole_image = NULL;	/* flag for no virtual arrays */
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	2200      	movs	r2, #0
 80140e0:	609a      	str	r2, [r3, #8]
  post->buffer = NULL;		/* flag for no strip buffer */
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	2200      	movs	r2, #0
 80140e6:	60da      	str	r2, [r3, #12]

  /* Create the quantization buffer, if needed */
  if (cinfo->quantize_colors) {
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d03a      	beq.n	8014166 <jinit_d_post_controller+0xb2>
    /* The buffer strip height is max_v_samp_factor, which is typically
     * an efficient number of rows for upsampling to return.
     * (In the presence of output rescaling, we might want to be smarter?)
     */
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80140f6:	461a      	mov	r2, r3
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	611a      	str	r2, [r3, #16]
    if (need_full_buffer) {
 80140fc:	683b      	ldr	r3, [r7, #0]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d020      	beq.n	8014144 <jinit_d_post_controller+0x90>
      /* Two-pass color quantization: need full-image storage. */
      /* We round up the number of rows to a multiple of the strip height. */
#ifdef QUANT_2PASS_SUPPORTED
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	685b      	ldr	r3, [r3, #4]
 8014106:	691c      	ldr	r4, [r3, #16]
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 cinfo->output_width * cinfo->out_color_components,
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801410c:	687a      	ldr	r2, [r7, #4]
 801410e:	6f92      	ldr	r2, [r2, #120]	; 0x78
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 8014110:	fb02 f503 	mul.w	r5, r2, r3
	 (JDIMENSION) jround_up((long) cinfo->output_height,
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014118:	461a      	mov	r2, r3
				(long) post->strip_height),
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	691b      	ldr	r3, [r3, #16]
	 (JDIMENSION) jround_up((long) cinfo->output_height,
 801411e:	4619      	mov	r1, r3
 8014120:	4610      	mov	r0, r2
 8014122:	f010 fe85 	bl	8024e30 <jround_up>
 8014126:	4603      	mov	r3, r0
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 8014128:	461a      	mov	r2, r3
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	691b      	ldr	r3, [r3, #16]
 801412e:	9301      	str	r3, [sp, #4]
 8014130:	9200      	str	r2, [sp, #0]
 8014132:	462b      	mov	r3, r5
 8014134:	2200      	movs	r2, #0
 8014136:	2101      	movs	r1, #1
 8014138:	6878      	ldr	r0, [r7, #4]
 801413a:	47a0      	blx	r4
 801413c:	4602      	mov	r2, r0
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	609a      	str	r2, [r3, #8]
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 cinfo->output_width * cinfo->out_color_components,
	 post->strip_height);
    }
  }
}
 8014142:	e010      	b.n	8014166 <jinit_d_post_controller+0xb2>
      post->buffer = (*cinfo->mem->alloc_sarray)
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	685b      	ldr	r3, [r3, #4]
 8014148:	689c      	ldr	r4, [r3, #8]
	 cinfo->output_width * cinfo->out_color_components,
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801414e:	687a      	ldr	r2, [r7, #4]
 8014150:	6f92      	ldr	r2, [r2, #120]	; 0x78
      post->buffer = (*cinfo->mem->alloc_sarray)
 8014152:	fb02 f203 	mul.w	r2, r2, r3
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	691b      	ldr	r3, [r3, #16]
 801415a:	2101      	movs	r1, #1
 801415c:	6878      	ldr	r0, [r7, #4]
 801415e:	47a0      	blx	r4
 8014160:	4602      	mov	r2, r0
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	60da      	str	r2, [r3, #12]
}
 8014166:	bf00      	nop
 8014168:	3710      	adds	r7, #16
 801416a:	46bd      	mov	sp, r7
 801416c:	bdb0      	pop	{r4, r5, r7, pc}
 801416e:	bf00      	nop
 8014170:	08013da1 	.word	0x08013da1

08014174 <start_pass_upsample>:
 * Initialize for an upsampling pass.
 */

METHODDEF(void)
start_pass_upsample (j_decompress_ptr cinfo)
{
 8014174:	b480      	push	{r7}
 8014176:	b085      	sub	sp, #20
 8014178:	af00      	add	r7, sp, #0
 801417a:	6078      	str	r0, [r7, #4]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8014182:	60fb      	str	r3, [r7, #12]

  /* Mark the conversion buffer empty */
  upsample->next_row_out = cinfo->max_v_samp_factor;
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	661a      	str	r2, [r3, #96]	; 0x60
}
 8014196:	bf00      	nop
 8014198:	3714      	adds	r7, #20
 801419a:	46bd      	mov	sp, r7
 801419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a0:	4770      	bx	lr

080141a2 <sep_upsample>:
sep_upsample (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	      JDIMENSION in_row_groups_avail,
	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	      JDIMENSION out_rows_avail)
{
 80141a2:	b590      	push	{r4, r7, lr}
 80141a4:	b08b      	sub	sp, #44	; 0x2c
 80141a6:	af02      	add	r7, sp, #8
 80141a8:	60f8      	str	r0, [r7, #12]
 80141aa:	60b9      	str	r1, [r7, #8]
 80141ac:	607a      	str	r2, [r7, #4]
 80141ae:	603b      	str	r3, [r7, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 80141b6:	613b      	str	r3, [r7, #16]
  int ci;
  jpeg_component_info * compptr;
  JDIMENSION num_rows;

  /* Fill the conversion buffer, if it's empty */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 80141b8:	693b      	ldr	r3, [r7, #16]
 80141ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80141c2:	429a      	cmp	r2, r3
 80141c4:	db35      	blt.n	8014232 <sep_upsample+0x90>
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80141c6:	2300      	movs	r3, #0
 80141c8:	61fb      	str	r3, [r7, #28]
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80141d0:	61bb      	str	r3, [r7, #24]
 80141d2:	e026      	b.n	8014222 <sep_upsample+0x80>
	 ci++, compptr++) {
      /* Invoke per-component upsample method.  Notice we pass a POINTER
       * to color_buf[ci], so that fullsize_upsample can change it.
       */
      (*upsample->methods[ci]) (cinfo, compptr,
 80141d4:	693a      	ldr	r2, [r7, #16]
 80141d6:	69fb      	ldr	r3, [r7, #28]
 80141d8:	330c      	adds	r3, #12
 80141da:	009b      	lsls	r3, r3, #2
 80141dc:	4413      	add	r3, r2
 80141de:	685c      	ldr	r4, [r3, #4]
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 80141e0:	69fb      	ldr	r3, [r7, #28]
 80141e2:	009b      	lsls	r3, r3, #2
 80141e4:	68ba      	ldr	r2, [r7, #8]
 80141e6:	4413      	add	r3, r2
 80141e8:	681a      	ldr	r2, [r3, #0]
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	6819      	ldr	r1, [r3, #0]
 80141ee:	6938      	ldr	r0, [r7, #16]
 80141f0:	69fb      	ldr	r3, [r7, #28]
 80141f2:	3318      	adds	r3, #24
 80141f4:	009b      	lsls	r3, r3, #2
 80141f6:	4403      	add	r3, r0
 80141f8:	685b      	ldr	r3, [r3, #4]
 80141fa:	fb03 f301 	mul.w	r3, r3, r1
 80141fe:	009b      	lsls	r3, r3, #2
      (*upsample->methods[ci]) (cinfo, compptr,
 8014200:	18d1      	adds	r1, r2, r3
	upsample->color_buf + ci);
 8014202:	693b      	ldr	r3, [r7, #16]
 8014204:	f103 020c 	add.w	r2, r3, #12
 8014208:	69fb      	ldr	r3, [r7, #28]
 801420a:	009b      	lsls	r3, r3, #2
      (*upsample->methods[ci]) (cinfo, compptr,
 801420c:	4413      	add	r3, r2
 801420e:	460a      	mov	r2, r1
 8014210:	69b9      	ldr	r1, [r7, #24]
 8014212:	68f8      	ldr	r0, [r7, #12]
 8014214:	47a0      	blx	r4
	 ci++, compptr++) {
 8014216:	69fb      	ldr	r3, [r7, #28]
 8014218:	3301      	adds	r3, #1
 801421a:	61fb      	str	r3, [r7, #28]
 801421c:	69bb      	ldr	r3, [r7, #24]
 801421e:	3358      	adds	r3, #88	; 0x58
 8014220:	61bb      	str	r3, [r7, #24]
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014226:	69fa      	ldr	r2, [r7, #28]
 8014228:	429a      	cmp	r2, r3
 801422a:	dbd3      	blt.n	80141d4 <sep_upsample+0x32>
    }
    upsample->next_row_out = 0;
 801422c:	693b      	ldr	r3, [r7, #16]
 801422e:	2200      	movs	r2, #0
 8014230:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Color-convert and emit rows */

  /* How many we have in the buffer: */
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8014238:	693b      	ldr	r3, [r7, #16]
 801423a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801423c:	1ad3      	subs	r3, r2, r3
 801423e:	617b      	str	r3, [r7, #20]
  /* Not more than the distance to the end of the image.  Need this test
   * in case the image height is not a multiple of max_v_samp_factor:
   */
  if (num_rows > upsample->rows_to_go) 
 8014240:	693b      	ldr	r3, [r7, #16]
 8014242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014244:	697a      	ldr	r2, [r7, #20]
 8014246:	429a      	cmp	r2, r3
 8014248:	d902      	bls.n	8014250 <sep_upsample+0xae>
    num_rows = upsample->rows_to_go;
 801424a:	693b      	ldr	r3, [r7, #16]
 801424c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801424e:	617b      	str	r3, [r7, #20]
  /* And not more than what the client can accept: */
  out_rows_avail -= *out_row_ctr;
 8014250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014256:	1ad3      	subs	r3, r2, r3
 8014258:	63bb      	str	r3, [r7, #56]	; 0x38
  if (num_rows > out_rows_avail)
 801425a:	697a      	ldr	r2, [r7, #20]
 801425c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801425e:	429a      	cmp	r2, r3
 8014260:	d901      	bls.n	8014266 <sep_upsample+0xc4>
    num_rows = out_rows_avail;
 8014262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014264:	617b      	str	r3, [r7, #20]

  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801426c:	685c      	ldr	r4, [r3, #4]
 801426e:	693b      	ldr	r3, [r7, #16]
 8014270:	f103 010c 	add.w	r1, r3, #12
				     (JDIMENSION) upsample->next_row_out,
 8014274:	693b      	ldr	r3, [r7, #16]
 8014276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 8014278:	4618      	mov	r0, r3
				     output_buf + *out_row_ctr,
 801427a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	009b      	lsls	r3, r3, #2
  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 8014280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014282:	441a      	add	r2, r3
 8014284:	697b      	ldr	r3, [r7, #20]
 8014286:	9300      	str	r3, [sp, #0]
 8014288:	4613      	mov	r3, r2
 801428a:	4602      	mov	r2, r0
 801428c:	68f8      	ldr	r0, [r7, #12]
 801428e:	47a0      	blx	r4
				     (int) num_rows);

  /* Adjust counts */
  *out_row_ctr += num_rows;
 8014290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014292:	681a      	ldr	r2, [r3, #0]
 8014294:	697b      	ldr	r3, [r7, #20]
 8014296:	441a      	add	r2, r3
 8014298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801429a:	601a      	str	r2, [r3, #0]
  upsample->rows_to_go -= num_rows;
 801429c:	693b      	ldr	r3, [r7, #16]
 801429e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80142a0:	697b      	ldr	r3, [r7, #20]
 80142a2:	1ad2      	subs	r2, r2, r3
 80142a4:	693b      	ldr	r3, [r7, #16]
 80142a6:	661a      	str	r2, [r3, #96]	; 0x60
  upsample->next_row_out += num_rows;
 80142a8:	693b      	ldr	r3, [r7, #16]
 80142aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80142ac:	461a      	mov	r2, r3
 80142ae:	697b      	ldr	r3, [r7, #20]
 80142b0:	4413      	add	r3, r2
 80142b2:	461a      	mov	r2, r3
 80142b4:	693b      	ldr	r3, [r7, #16]
 80142b6:	65da      	str	r2, [r3, #92]	; 0x5c
  /* When the buffer is emptied, declare this input row group consumed */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor)
 80142b8:	693b      	ldr	r3, [r7, #16]
 80142ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80142c2:	429a      	cmp	r2, r3
 80142c4:	db04      	blt.n	80142d0 <sep_upsample+0x12e>
    (*in_row_group_ctr)++;
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	1c5a      	adds	r2, r3, #1
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	601a      	str	r2, [r3, #0]
}
 80142d0:	bf00      	nop
 80142d2:	3724      	adds	r7, #36	; 0x24
 80142d4:	46bd      	mov	sp, r7
 80142d6:	bd90      	pop	{r4, r7, pc}

080142d8 <fullsize_upsample>:
 */

METHODDEF(void)
fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 80142d8:	b480      	push	{r7}
 80142da:	b085      	sub	sp, #20
 80142dc:	af00      	add	r7, sp, #0
 80142de:	60f8      	str	r0, [r7, #12]
 80142e0:	60b9      	str	r1, [r7, #8]
 80142e2:	607a      	str	r2, [r7, #4]
 80142e4:	603b      	str	r3, [r7, #0]
  *output_data_ptr = input_data;
 80142e6:	683b      	ldr	r3, [r7, #0]
 80142e8:	687a      	ldr	r2, [r7, #4]
 80142ea:	601a      	str	r2, [r3, #0]
}
 80142ec:	bf00      	nop
 80142ee:	3714      	adds	r7, #20
 80142f0:	46bd      	mov	sp, r7
 80142f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f6:	4770      	bx	lr

080142f8 <noop_upsample>:
 */

METHODDEF(void)
noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 80142f8:	b480      	push	{r7}
 80142fa:	b085      	sub	sp, #20
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	60f8      	str	r0, [r7, #12]
 8014300:	60b9      	str	r1, [r7, #8]
 8014302:	607a      	str	r2, [r7, #4]
 8014304:	603b      	str	r3, [r7, #0]
  *output_data_ptr = NULL;	/* safety check */
 8014306:	683b      	ldr	r3, [r7, #0]
 8014308:	2200      	movs	r2, #0
 801430a:	601a      	str	r2, [r3, #0]
}
 801430c:	bf00      	nop
 801430e:	3714      	adds	r7, #20
 8014310:	46bd      	mov	sp, r7
 8014312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014316:	4770      	bx	lr

08014318 <int_upsample>:
 */

METHODDEF(void)
int_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	      JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 8014318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801431c:	b08e      	sub	sp, #56	; 0x38
 801431e:	af02      	add	r7, sp, #8
 8014320:	60f8      	str	r0, [r7, #12]
 8014322:	60b9      	str	r1, [r7, #8]
 8014324:	607a      	str	r2, [r7, #4]
 8014326:	603b      	str	r3, [r7, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 801432e:	627b      	str	r3, [r7, #36]	; 0x24
  JSAMPARRAY output_data = *output_data_ptr;
 8014330:	683b      	ldr	r3, [r7, #0]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	623b      	str	r3, [r7, #32]
  register int h;
  JSAMPROW outend;
  int h_expand, v_expand;
  int inrow, outrow;

  h_expand = upsample->h_expand[compptr->component_index];
 8014336:	68bb      	ldr	r3, [r7, #8]
 8014338:	685b      	ldr	r3, [r3, #4]
 801433a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801433c:	4413      	add	r3, r2
 801433e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8014342:	61fb      	str	r3, [r7, #28]
  v_expand = upsample->v_expand[compptr->component_index];
 8014344:	68bb      	ldr	r3, [r7, #8]
 8014346:	685b      	ldr	r3, [r3, #4]
 8014348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801434a:	4413      	add	r3, r2
 801434c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8014350:	61bb      	str	r3, [r7, #24]

  inrow = outrow = 0;
 8014352:	2300      	movs	r3, #0
 8014354:	62bb      	str	r3, [r7, #40]	; 0x28
 8014356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014358:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (outrow < cinfo->max_v_samp_factor) {
 801435a:	e036      	b.n	80143ca <int_upsample+0xb2>
    /* Generate one output row with proper horizontal expansion */
    inptr = input_data[inrow];
 801435c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801435e:	009b      	lsls	r3, r3, #2
 8014360:	687a      	ldr	r2, [r7, #4]
 8014362:	4413      	add	r3, r2
 8014364:	681e      	ldr	r6, [r3, #0]
    outptr = output_data[outrow];
 8014366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014368:	009b      	lsls	r3, r3, #2
 801436a:	6a3a      	ldr	r2, [r7, #32]
 801436c:	4413      	add	r3, r2
 801436e:	681c      	ldr	r4, [r3, #0]
    outend = outptr + cinfo->output_width;
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014374:	4423      	add	r3, r4
 8014376:	617b      	str	r3, [r7, #20]
    while (outptr < outend) {
 8014378:	e00c      	b.n	8014394 <int_upsample+0x7c>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 801437a:	4633      	mov	r3, r6
 801437c:	1c5e      	adds	r6, r3, #1
 801437e:	f893 8000 	ldrb.w	r8, [r3]
      for (h = h_expand; h > 0; h--) {
 8014382:	69fd      	ldr	r5, [r7, #28]
 8014384:	e004      	b.n	8014390 <int_upsample+0x78>
	*outptr++ = invalue;
 8014386:	4623      	mov	r3, r4
 8014388:	1c5c      	adds	r4, r3, #1
 801438a:	4642      	mov	r2, r8
 801438c:	701a      	strb	r2, [r3, #0]
      for (h = h_expand; h > 0; h--) {
 801438e:	3d01      	subs	r5, #1
 8014390:	2d00      	cmp	r5, #0
 8014392:	dcf8      	bgt.n	8014386 <int_upsample+0x6e>
    while (outptr < outend) {
 8014394:	697b      	ldr	r3, [r7, #20]
 8014396:	429c      	cmp	r4, r3
 8014398:	d3ef      	bcc.n	801437a <int_upsample+0x62>
      }
    }
    /* Generate any additional output rows by duplicating the first one */
    if (v_expand > 1) {
 801439a:	69bb      	ldr	r3, [r7, #24]
 801439c:	2b01      	cmp	r3, #1
 801439e:	dd0d      	ble.n	80143bc <int_upsample+0xa4>
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 80143a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143a2:	1c59      	adds	r1, r3, #1
 80143a4:	69bb      	ldr	r3, [r7, #24]
 80143a6:	3b01      	subs	r3, #1
 80143a8:	68fa      	ldr	r2, [r7, #12]
 80143aa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80143ac:	9201      	str	r2, [sp, #4]
 80143ae:	9300      	str	r3, [sp, #0]
 80143b0:	460b      	mov	r3, r1
 80143b2:	6a3a      	ldr	r2, [r7, #32]
 80143b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80143b6:	6a38      	ldr	r0, [r7, #32]
 80143b8:	f010 fd54 	bl	8024e64 <jcopy_sample_rows>
			v_expand-1, cinfo->output_width);
    }
    inrow++;
 80143bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143be:	3301      	adds	r3, #1
 80143c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    outrow += v_expand;
 80143c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80143c4:	69bb      	ldr	r3, [r7, #24]
 80143c6:	4413      	add	r3, r2
 80143c8:	62bb      	str	r3, [r7, #40]	; 0x28
  while (outrow < cinfo->max_v_samp_factor) {
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80143d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80143d2:	429a      	cmp	r2, r3
 80143d4:	dbc2      	blt.n	801435c <int_upsample+0x44>
  }
}
 80143d6:	bf00      	nop
 80143d8:	bf00      	nop
 80143da:	3730      	adds	r7, #48	; 0x30
 80143dc:	46bd      	mov	sp, r7
 80143de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080143e2 <h2v1_upsample>:
 */

METHODDEF(void)
h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 80143e2:	b4f0      	push	{r4, r5, r6, r7}
 80143e4:	b088      	sub	sp, #32
 80143e6:	af00      	add	r7, sp, #0
 80143e8:	60f8      	str	r0, [r7, #12]
 80143ea:	60b9      	str	r1, [r7, #8]
 80143ec:	607a      	str	r2, [r7, #4]
 80143ee:	603b      	str	r3, [r7, #0]
  JSAMPARRAY output_data = *output_data_ptr;
 80143f0:	683b      	ldr	r3, [r7, #0]
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	61bb      	str	r3, [r7, #24]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int outrow;

  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 80143f6:	2300      	movs	r3, #0
 80143f8:	61fb      	str	r3, [r7, #28]
 80143fa:	e01f      	b.n	801443c <h2v1_upsample+0x5a>
    inptr = input_data[outrow];
 80143fc:	69fb      	ldr	r3, [r7, #28]
 80143fe:	009b      	lsls	r3, r3, #2
 8014400:	687a      	ldr	r2, [r7, #4]
 8014402:	4413      	add	r3, r2
 8014404:	681d      	ldr	r5, [r3, #0]
    outptr = output_data[outrow];
 8014406:	69fb      	ldr	r3, [r7, #28]
 8014408:	009b      	lsls	r3, r3, #2
 801440a:	69ba      	ldr	r2, [r7, #24]
 801440c:	4413      	add	r3, r2
 801440e:	681c      	ldr	r4, [r3, #0]
    outend = outptr + cinfo->output_width;
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014414:	4423      	add	r3, r4
 8014416:	617b      	str	r3, [r7, #20]
    while (outptr < outend) {
 8014418:	e00a      	b.n	8014430 <h2v1_upsample+0x4e>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 801441a:	462b      	mov	r3, r5
 801441c:	1c5d      	adds	r5, r3, #1
 801441e:	781e      	ldrb	r6, [r3, #0]
      *outptr++ = invalue;
 8014420:	4623      	mov	r3, r4
 8014422:	1c5c      	adds	r4, r3, #1
 8014424:	4632      	mov	r2, r6
 8014426:	701a      	strb	r2, [r3, #0]
      *outptr++ = invalue;
 8014428:	4623      	mov	r3, r4
 801442a:	1c5c      	adds	r4, r3, #1
 801442c:	4632      	mov	r2, r6
 801442e:	701a      	strb	r2, [r3, #0]
    while (outptr < outend) {
 8014430:	697b      	ldr	r3, [r7, #20]
 8014432:	429c      	cmp	r4, r3
 8014434:	d3f1      	bcc.n	801441a <h2v1_upsample+0x38>
  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 8014436:	69fb      	ldr	r3, [r7, #28]
 8014438:	3301      	adds	r3, #1
 801443a:	61fb      	str	r3, [r7, #28]
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8014442:	69fa      	ldr	r2, [r7, #28]
 8014444:	429a      	cmp	r2, r3
 8014446:	dbd9      	blt.n	80143fc <h2v1_upsample+0x1a>
    }
  }
}
 8014448:	bf00      	nop
 801444a:	bf00      	nop
 801444c:	3720      	adds	r7, #32
 801444e:	46bd      	mov	sp, r7
 8014450:	bcf0      	pop	{r4, r5, r6, r7}
 8014452:	4770      	bx	lr

08014454 <h2v2_upsample>:
 */

METHODDEF(void)
h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 8014454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014456:	b08b      	sub	sp, #44	; 0x2c
 8014458:	af02      	add	r7, sp, #8
 801445a:	60f8      	str	r0, [r7, #12]
 801445c:	60b9      	str	r1, [r7, #8]
 801445e:	607a      	str	r2, [r7, #4]
 8014460:	603b      	str	r3, [r7, #0]
  JSAMPARRAY output_data = *output_data_ptr;
 8014462:	683b      	ldr	r3, [r7, #0]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	617b      	str	r3, [r7, #20]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow, outrow;

  inrow = outrow = 0;
 8014468:	2300      	movs	r3, #0
 801446a:	61bb      	str	r3, [r7, #24]
 801446c:	69bb      	ldr	r3, [r7, #24]
 801446e:	61fb      	str	r3, [r7, #28]
  while (outrow < cinfo->max_v_samp_factor) {
 8014470:	e02f      	b.n	80144d2 <h2v2_upsample+0x7e>
    inptr = input_data[inrow];
 8014472:	69fb      	ldr	r3, [r7, #28]
 8014474:	009b      	lsls	r3, r3, #2
 8014476:	687a      	ldr	r2, [r7, #4]
 8014478:	4413      	add	r3, r2
 801447a:	681d      	ldr	r5, [r3, #0]
    outptr = output_data[outrow];
 801447c:	69bb      	ldr	r3, [r7, #24]
 801447e:	009b      	lsls	r3, r3, #2
 8014480:	697a      	ldr	r2, [r7, #20]
 8014482:	4413      	add	r3, r2
 8014484:	681c      	ldr	r4, [r3, #0]
    outend = outptr + cinfo->output_width;
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801448a:	4423      	add	r3, r4
 801448c:	613b      	str	r3, [r7, #16]
    while (outptr < outend) {
 801448e:	e00a      	b.n	80144a6 <h2v2_upsample+0x52>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 8014490:	462b      	mov	r3, r5
 8014492:	1c5d      	adds	r5, r3, #1
 8014494:	781e      	ldrb	r6, [r3, #0]
      *outptr++ = invalue;
 8014496:	4623      	mov	r3, r4
 8014498:	1c5c      	adds	r4, r3, #1
 801449a:	4632      	mov	r2, r6
 801449c:	701a      	strb	r2, [r3, #0]
      *outptr++ = invalue;
 801449e:	4623      	mov	r3, r4
 80144a0:	1c5c      	adds	r4, r3, #1
 80144a2:	4632      	mov	r2, r6
 80144a4:	701a      	strb	r2, [r3, #0]
    while (outptr < outend) {
 80144a6:	693b      	ldr	r3, [r7, #16]
 80144a8:	429c      	cmp	r4, r3
 80144aa:	d3f1      	bcc.n	8014490 <h2v2_upsample+0x3c>
    }
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 80144ac:	69bb      	ldr	r3, [r7, #24]
 80144ae:	1c5a      	adds	r2, r3, #1
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80144b4:	9301      	str	r3, [sp, #4]
 80144b6:	2301      	movs	r3, #1
 80144b8:	9300      	str	r3, [sp, #0]
 80144ba:	4613      	mov	r3, r2
 80144bc:	697a      	ldr	r2, [r7, #20]
 80144be:	69b9      	ldr	r1, [r7, #24]
 80144c0:	6978      	ldr	r0, [r7, #20]
 80144c2:	f010 fccf 	bl	8024e64 <jcopy_sample_rows>
		      1, cinfo->output_width);
    inrow++;
 80144c6:	69fb      	ldr	r3, [r7, #28]
 80144c8:	3301      	adds	r3, #1
 80144ca:	61fb      	str	r3, [r7, #28]
    outrow += 2;
 80144cc:	69bb      	ldr	r3, [r7, #24]
 80144ce:	3302      	adds	r3, #2
 80144d0:	61bb      	str	r3, [r7, #24]
  while (outrow < cinfo->max_v_samp_factor) {
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80144d8:	69ba      	ldr	r2, [r7, #24]
 80144da:	429a      	cmp	r2, r3
 80144dc:	dbc9      	blt.n	8014472 <h2v2_upsample+0x1e>
  }
}
 80144de:	bf00      	nop
 80144e0:	bf00      	nop
 80144e2:	3724      	adds	r7, #36	; 0x24
 80144e4:	46bd      	mov	sp, r7
 80144e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080144e8 <jinit_upsampler>:
 * Module initialization routine for upsampling.
 */

GLOBAL(void)
jinit_upsampler (j_decompress_ptr cinfo)
{
 80144e8:	b590      	push	{r4, r7, lr}
 80144ea:	b08b      	sub	sp, #44	; 0x2c
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	6078      	str	r0, [r7, #4]
  jpeg_component_info * compptr;
  boolean need_buffer;
  int h_in_group, v_in_group, h_out_group, v_out_group;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	685b      	ldr	r3, [r3, #4]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	22a0      	movs	r2, #160	; 0xa0
 80144f8:	2101      	movs	r1, #1
 80144fa:	6878      	ldr	r0, [r7, #4]
 80144fc:	4798      	blx	r3
 80144fe:	61b8      	str	r0, [r7, #24]
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	69ba      	ldr	r2, [r7, #24]
 8014504:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
  upsample->pub.start_pass = start_pass_upsample;
 8014508:	69bb      	ldr	r3, [r7, #24]
 801450a:	4a7a      	ldr	r2, [pc, #488]	; (80146f4 <jinit_upsampler+0x20c>)
 801450c:	601a      	str	r2, [r3, #0]
  upsample->pub.upsample = sep_upsample;
 801450e:	69bb      	ldr	r3, [r7, #24]
 8014510:	4a79      	ldr	r2, [pc, #484]	; (80146f8 <jinit_upsampler+0x210>)
 8014512:	605a      	str	r2, [r3, #4]
  upsample->pub.need_context_rows = FALSE; /* until we find out differently */
 8014514:	69bb      	ldr	r3, [r7, #24]
 8014516:	2200      	movs	r2, #0
 8014518:	609a      	str	r2, [r3, #8]

  if (cinfo->CCIR601_sampling)	/* this isn't supported */
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8014520:	2b00      	cmp	r3, #0
 8014522:	d008      	beq.n	8014536 <jinit_upsampler+0x4e>
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	221a      	movs	r2, #26
 801452a:	615a      	str	r2, [r3, #20]
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	6878      	ldr	r0, [r7, #4]
 8014534:	4798      	blx	r3

  /* Verify we can handle the sampling factors, select per-component methods,
   * and create storage as needed.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8014536:	2300      	movs	r3, #0
 8014538:	627b      	str	r3, [r7, #36]	; 0x24
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014540:	623b      	str	r3, [r7, #32]
 8014542:	e0cb      	b.n	80146dc <jinit_upsampler+0x1f4>
       ci++, compptr++) {
    /* Compute size of an "input group" after IDCT scaling.  This many samples
     * are to be converted to max_h_samp_factor * max_v_samp_factor pixels.
     */
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 8014544:	6a3b      	ldr	r3, [r7, #32]
 8014546:	689b      	ldr	r3, [r3, #8]
 8014548:	6a3a      	ldr	r2, [r7, #32]
 801454a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801454c:	fb02 f203 	mul.w	r2, r2, r3
		 cinfo->min_DCT_h_scaled_size;
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 8014556:	fb92 f3f3 	sdiv	r3, r2, r3
 801455a:	617b      	str	r3, [r7, #20]
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 801455c:	6a3b      	ldr	r3, [r7, #32]
 801455e:	68db      	ldr	r3, [r3, #12]
 8014560:	6a3a      	ldr	r2, [r7, #32]
 8014562:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8014564:	fb02 f203 	mul.w	r2, r2, r3
		 cinfo->min_DCT_v_scaled_size;
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 801456e:	fb92 f3f3 	sdiv	r3, r2, r3
 8014572:	613b      	str	r3, [r7, #16]
    h_out_group = cinfo->max_h_samp_factor;
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 801457a:	60fb      	str	r3, [r7, #12]
    v_out_group = cinfo->max_v_samp_factor;
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8014582:	60bb      	str	r3, [r7, #8]
    upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
 8014584:	69ba      	ldr	r2, [r7, #24]
 8014586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014588:	3318      	adds	r3, #24
 801458a:	009b      	lsls	r3, r3, #2
 801458c:	4413      	add	r3, r2
 801458e:	693a      	ldr	r2, [r7, #16]
 8014590:	605a      	str	r2, [r3, #4]
    need_buffer = TRUE;
 8014592:	2301      	movs	r3, #1
 8014594:	61fb      	str	r3, [r7, #28]
    if (! compptr->component_needed) {
 8014596:	6a3b      	ldr	r3, [r7, #32]
 8014598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801459a:	2b00      	cmp	r3, #0
 801459c:	d109      	bne.n	80145b2 <jinit_upsampler+0xca>
      /* Don't bother to upsample an uninteresting component. */
      upsample->methods[ci] = noop_upsample;
 801459e:	69ba      	ldr	r2, [r7, #24]
 80145a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145a2:	330c      	adds	r3, #12
 80145a4:	009b      	lsls	r3, r3, #2
 80145a6:	4413      	add	r3, r2
 80145a8:	4a54      	ldr	r2, [pc, #336]	; (80146fc <jinit_upsampler+0x214>)
 80145aa:	605a      	str	r2, [r3, #4]
      need_buffer = FALSE;
 80145ac:	2300      	movs	r3, #0
 80145ae:	61fb      	str	r3, [r7, #28]
 80145b0:	e06f      	b.n	8014692 <jinit_upsampler+0x1aa>
    } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
 80145b2:	697a      	ldr	r2, [r7, #20]
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	429a      	cmp	r2, r3
 80145b8:	d10d      	bne.n	80145d6 <jinit_upsampler+0xee>
 80145ba:	693a      	ldr	r2, [r7, #16]
 80145bc:	68bb      	ldr	r3, [r7, #8]
 80145be:	429a      	cmp	r2, r3
 80145c0:	d109      	bne.n	80145d6 <jinit_upsampler+0xee>
      /* Fullsize components can be processed without any work. */
      upsample->methods[ci] = fullsize_upsample;
 80145c2:	69ba      	ldr	r2, [r7, #24]
 80145c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145c6:	330c      	adds	r3, #12
 80145c8:	009b      	lsls	r3, r3, #2
 80145ca:	4413      	add	r3, r2
 80145cc:	4a4c      	ldr	r2, [pc, #304]	; (8014700 <jinit_upsampler+0x218>)
 80145ce:	605a      	str	r2, [r3, #4]
      need_buffer = FALSE;
 80145d0:	2300      	movs	r3, #0
 80145d2:	61fb      	str	r3, [r7, #28]
 80145d4:	e05d      	b.n	8014692 <jinit_upsampler+0x1aa>
    } else if (h_in_group * 2 == h_out_group &&
 80145d6:	697b      	ldr	r3, [r7, #20]
 80145d8:	005b      	lsls	r3, r3, #1
 80145da:	68fa      	ldr	r2, [r7, #12]
 80145dc:	429a      	cmp	r2, r3
 80145de:	d10b      	bne.n	80145f8 <jinit_upsampler+0x110>
 80145e0:	693a      	ldr	r2, [r7, #16]
 80145e2:	68bb      	ldr	r3, [r7, #8]
 80145e4:	429a      	cmp	r2, r3
 80145e6:	d107      	bne.n	80145f8 <jinit_upsampler+0x110>
	       v_in_group == v_out_group) {
      /* Special case for 2h1v upsampling */
      upsample->methods[ci] = h2v1_upsample;
 80145e8:	69ba      	ldr	r2, [r7, #24]
 80145ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145ec:	330c      	adds	r3, #12
 80145ee:	009b      	lsls	r3, r3, #2
 80145f0:	4413      	add	r3, r2
 80145f2:	4a44      	ldr	r2, [pc, #272]	; (8014704 <jinit_upsampler+0x21c>)
 80145f4:	605a      	str	r2, [r3, #4]
 80145f6:	e04c      	b.n	8014692 <jinit_upsampler+0x1aa>
    } else if (h_in_group * 2 == h_out_group &&
 80145f8:	697b      	ldr	r3, [r7, #20]
 80145fa:	005b      	lsls	r3, r3, #1
 80145fc:	68fa      	ldr	r2, [r7, #12]
 80145fe:	429a      	cmp	r2, r3
 8014600:	d10c      	bne.n	801461c <jinit_upsampler+0x134>
	       v_in_group * 2 == v_out_group) {
 8014602:	693b      	ldr	r3, [r7, #16]
 8014604:	005b      	lsls	r3, r3, #1
    } else if (h_in_group * 2 == h_out_group &&
 8014606:	68ba      	ldr	r2, [r7, #8]
 8014608:	429a      	cmp	r2, r3
 801460a:	d107      	bne.n	801461c <jinit_upsampler+0x134>
      /* Special case for 2h2v upsampling */
      upsample->methods[ci] = h2v2_upsample;
 801460c:	69ba      	ldr	r2, [r7, #24]
 801460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014610:	330c      	adds	r3, #12
 8014612:	009b      	lsls	r3, r3, #2
 8014614:	4413      	add	r3, r2
 8014616:	4a3c      	ldr	r2, [pc, #240]	; (8014708 <jinit_upsampler+0x220>)
 8014618:	605a      	str	r2, [r3, #4]
 801461a:	e03a      	b.n	8014692 <jinit_upsampler+0x1aa>
    } else if ((h_out_group % h_in_group) == 0 &&
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	697a      	ldr	r2, [r7, #20]
 8014620:	fb93 f2f2 	sdiv	r2, r3, r2
 8014624:	6979      	ldr	r1, [r7, #20]
 8014626:	fb01 f202 	mul.w	r2, r1, r2
 801462a:	1a9b      	subs	r3, r3, r2
 801462c:	2b00      	cmp	r3, #0
 801462e:	d127      	bne.n	8014680 <jinit_upsampler+0x198>
	       (v_out_group % v_in_group) == 0) {
 8014630:	68bb      	ldr	r3, [r7, #8]
 8014632:	693a      	ldr	r2, [r7, #16]
 8014634:	fb93 f2f2 	sdiv	r2, r3, r2
 8014638:	6939      	ldr	r1, [r7, #16]
 801463a:	fb01 f202 	mul.w	r2, r1, r2
 801463e:	1a9b      	subs	r3, r3, r2
    } else if ((h_out_group % h_in_group) == 0 &&
 8014640:	2b00      	cmp	r3, #0
 8014642:	d11d      	bne.n	8014680 <jinit_upsampler+0x198>
      /* Generic integral-factors upsampling method */
      upsample->methods[ci] = int_upsample;
 8014644:	69ba      	ldr	r2, [r7, #24]
 8014646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014648:	330c      	adds	r3, #12
 801464a:	009b      	lsls	r3, r3, #2
 801464c:	4413      	add	r3, r2
 801464e:	4a2f      	ldr	r2, [pc, #188]	; (801470c <jinit_upsampler+0x224>)
 8014650:	605a      	str	r2, [r3, #4]
      upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
 8014652:	68fa      	ldr	r2, [r7, #12]
 8014654:	697b      	ldr	r3, [r7, #20]
 8014656:	fb92 f3f3 	sdiv	r3, r2, r3
 801465a:	b2d9      	uxtb	r1, r3
 801465c:	69ba      	ldr	r2, [r7, #24]
 801465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014660:	4413      	add	r3, r2
 8014662:	338c      	adds	r3, #140	; 0x8c
 8014664:	460a      	mov	r2, r1
 8014666:	701a      	strb	r2, [r3, #0]
      upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
 8014668:	68ba      	ldr	r2, [r7, #8]
 801466a:	693b      	ldr	r3, [r7, #16]
 801466c:	fb92 f3f3 	sdiv	r3, r2, r3
 8014670:	b2d9      	uxtb	r1, r3
 8014672:	69ba      	ldr	r2, [r7, #24]
 8014674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014676:	4413      	add	r3, r2
 8014678:	3396      	adds	r3, #150	; 0x96
 801467a:	460a      	mov	r2, r1
 801467c:	701a      	strb	r2, [r3, #0]
 801467e:	e008      	b.n	8014692 <jinit_upsampler+0x1aa>
    } else
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	2227      	movs	r2, #39	; 0x27
 8014686:	615a      	str	r2, [r3, #20]
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	6878      	ldr	r0, [r7, #4]
 8014690:	4798      	blx	r3
    if (need_buffer) {
 8014692:	69fb      	ldr	r3, [r7, #28]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d01b      	beq.n	80146d0 <jinit_upsampler+0x1e8>
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	685b      	ldr	r3, [r3, #4]
 801469c:	689c      	ldr	r4, [r3, #8]
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146a2:	461a      	mov	r2, r3
				(long) cinfo->max_h_samp_factor),
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 80146aa:	4619      	mov	r1, r3
 80146ac:	4610      	mov	r0, r2
 80146ae:	f010 fbbf 	bl	8024e30 <jround_up>
 80146b2:	4603      	mov	r3, r0
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 80146b4:	461a      	mov	r2, r3
	 (JDIMENSION) cinfo->max_v_samp_factor);
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 80146bc:	2101      	movs	r1, #1
 80146be:	6878      	ldr	r0, [r7, #4]
 80146c0:	47a0      	blx	r4
 80146c2:	4601      	mov	r1, r0
 80146c4:	69ba      	ldr	r2, [r7, #24]
 80146c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146c8:	3302      	adds	r3, #2
 80146ca:	009b      	lsls	r3, r3, #2
 80146cc:	4413      	add	r3, r2
 80146ce:	6059      	str	r1, [r3, #4]
       ci++, compptr++) {
 80146d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146d2:	3301      	adds	r3, #1
 80146d4:	627b      	str	r3, [r7, #36]	; 0x24
 80146d6:	6a3b      	ldr	r3, [r7, #32]
 80146d8:	3358      	adds	r3, #88	; 0x58
 80146da:	623b      	str	r3, [r7, #32]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146e2:	429a      	cmp	r2, r3
 80146e4:	f6ff af2e 	blt.w	8014544 <jinit_upsampler+0x5c>
    }
  }
}
 80146e8:	bf00      	nop
 80146ea:	bf00      	nop
 80146ec:	372c      	adds	r7, #44	; 0x2c
 80146ee:	46bd      	mov	sp, r7
 80146f0:	bd90      	pop	{r4, r7, pc}
 80146f2:	bf00      	nop
 80146f4:	08014175 	.word	0x08014175
 80146f8:	080141a3 	.word	0x080141a3
 80146fc:	080142f9 	.word	0x080142f9
 8014700:	080142d9 	.word	0x080142d9
 8014704:	080143e3 	.word	0x080143e3
 8014708:	08014455 	.word	0x08014455
 801470c:	08014319 	.word	0x08014319

08014710 <error_exit>:
 * or jpeg_destroy) at some point.
 */

METHODDEF(void)
error_exit (j_common_ptr cinfo)
{
 8014710:	b580      	push	{r7, lr}
 8014712:	b082      	sub	sp, #8
 8014714:	af00      	add	r7, sp, #0
 8014716:	6078      	str	r0, [r7, #4]
  /* Always display the message */
  (*cinfo->err->output_message) (cinfo);
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	689b      	ldr	r3, [r3, #8]
 801471e:	6878      	ldr	r0, [r7, #4]
 8014720:	4798      	blx	r3

  /* Let the memory manager delete any temp files before we die */
  jpeg_destroy(cinfo);
 8014722:	6878      	ldr	r0, [r7, #4]
 8014724:	f7f4 fdcc 	bl	80092c0 <jpeg_destroy>

  //exit(EXIT_FAILURE);
}
 8014728:	bf00      	nop
 801472a:	3708      	adds	r7, #8
 801472c:	46bd      	mov	sp, r7
 801472e:	bd80      	pop	{r7, pc}

08014730 <output_message>:
 * not just not use this routine.
 */

METHODDEF(void)
output_message (j_common_ptr cinfo)
{
 8014730:	b580      	push	{r7, lr}
 8014732:	b0b4      	sub	sp, #208	; 0xd0
 8014734:	af00      	add	r7, sp, #0
 8014736:	6078      	str	r0, [r7, #4]
  char buffer[JMSG_LENGTH_MAX];

  /* Create the message */
  (*cinfo->err->format_message) (cinfo, buffer);
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	68db      	ldr	r3, [r3, #12]
 801473e:	f107 0208 	add.w	r2, r7, #8
 8014742:	4611      	mov	r1, r2
 8014744:	6878      	ldr	r0, [r7, #4]
 8014746:	4798      	blx	r3
#else
  /* Send it to stderr, adding a newline */
//  fprintf(stderr, "%s\n", buffer);
//  printf( "%s\n", buffer);
#endif
}
 8014748:	bf00      	nop
 801474a:	37d0      	adds	r7, #208	; 0xd0
 801474c:	46bd      	mov	sp, r7
 801474e:	bd80      	pop	{r7, pc}

08014750 <emit_message>:
 * or change the policy about which messages to display.
 */

METHODDEF(void)
emit_message (j_common_ptr cinfo, int msg_level)
{
 8014750:	b580      	push	{r7, lr}
 8014752:	b084      	sub	sp, #16
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
 8014758:	6039      	str	r1, [r7, #0]
  struct jpeg_error_mgr * err = cinfo->err;
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	60fb      	str	r3, [r7, #12]

  if (msg_level < 0) {
 8014760:	683b      	ldr	r3, [r7, #0]
 8014762:	2b00      	cmp	r3, #0
 8014764:	da11      	bge.n	801478a <emit_message+0x3a>
    /* It's a warning message.  Since corrupt files may generate many warnings,
     * the policy implemented here is to show only the first warning,
     * unless trace_level >= 3.
     */
    if (err->num_warnings == 0 || err->trace_level >= 3)
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801476a:	2b00      	cmp	r3, #0
 801476c:	d003      	beq.n	8014776 <emit_message+0x26>
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014772:	2b02      	cmp	r3, #2
 8014774:	dd03      	ble.n	801477e <emit_message+0x2e>
      (*err->output_message) (cinfo);
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	689b      	ldr	r3, [r3, #8]
 801477a:	6878      	ldr	r0, [r7, #4]
 801477c:	4798      	blx	r3
    /* Always count warnings in num_warnings. */
    err->num_warnings++;
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014782:	1c5a      	adds	r2, r3, #1
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	66da      	str	r2, [r3, #108]	; 0x6c
  } else {
    /* It's a trace message.  Show it if trace_level >= msg_level. */
    if (err->trace_level >= msg_level)
      (*err->output_message) (cinfo);
  }
}
 8014788:	e008      	b.n	801479c <emit_message+0x4c>
    if (err->trace_level >= msg_level)
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801478e:	683a      	ldr	r2, [r7, #0]
 8014790:	429a      	cmp	r2, r3
 8014792:	dc03      	bgt.n	801479c <emit_message+0x4c>
      (*err->output_message) (cinfo);
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	689b      	ldr	r3, [r3, #8]
 8014798:	6878      	ldr	r0, [r7, #4]
 801479a:	4798      	blx	r3
}
 801479c:	bf00      	nop
 801479e:	3710      	adds	r7, #16
 80147a0:	46bd      	mov	sp, r7
 80147a2:	bd80      	pop	{r7, pc}

080147a4 <format_message>:
 * Few applications should need to override this method.
 */

METHODDEF(void)
format_message (j_common_ptr cinfo, char * buffer)
{
 80147a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147a6:	b091      	sub	sp, #68	; 0x44
 80147a8:	af06      	add	r7, sp, #24
 80147aa:	60f8      	str	r0, [r7, #12]
 80147ac:	60b9      	str	r1, [r7, #8]
  struct jpeg_error_mgr * err = cinfo->err;
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	61bb      	str	r3, [r7, #24]
  int msg_code = err->msg_code;
 80147b4:	69bb      	ldr	r3, [r7, #24]
 80147b6:	695b      	ldr	r3, [r3, #20]
 80147b8:	617b      	str	r3, [r7, #20]
  const char * msgtext = NULL;
 80147ba:	2300      	movs	r3, #0
 80147bc:	627b      	str	r3, [r7, #36]	; 0x24
  const char * msgptr;
  char ch;
  boolean isstring;

  /* Look up message string in proper table */
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 80147be:	697b      	ldr	r3, [r7, #20]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	dd0c      	ble.n	80147de <format_message+0x3a>
 80147c4:	69bb      	ldr	r3, [r7, #24]
 80147c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80147c8:	697a      	ldr	r2, [r7, #20]
 80147ca:	429a      	cmp	r2, r3
 80147cc:	dc07      	bgt.n	80147de <format_message+0x3a>
    msgtext = err->jpeg_message_table[msg_code];
 80147ce:	69bb      	ldr	r3, [r7, #24]
 80147d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80147d2:	697b      	ldr	r3, [r7, #20]
 80147d4:	009b      	lsls	r3, r3, #2
 80147d6:	4413      	add	r3, r2
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	627b      	str	r3, [r7, #36]	; 0x24
 80147dc:	e018      	b.n	8014810 <format_message+0x6c>
  } else if (err->addon_message_table != NULL &&
 80147de:	69bb      	ldr	r3, [r7, #24]
 80147e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d014      	beq.n	8014810 <format_message+0x6c>
	     msg_code >= err->first_addon_message &&
 80147e6:	69bb      	ldr	r3, [r7, #24]
 80147e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
  } else if (err->addon_message_table != NULL &&
 80147ea:	697a      	ldr	r2, [r7, #20]
 80147ec:	429a      	cmp	r2, r3
 80147ee:	db0f      	blt.n	8014810 <format_message+0x6c>
	     msg_code <= err->last_addon_message) {
 80147f0:	69bb      	ldr	r3, [r7, #24]
 80147f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	     msg_code >= err->first_addon_message &&
 80147f6:	697a      	ldr	r2, [r7, #20]
 80147f8:	429a      	cmp	r2, r3
 80147fa:	dc09      	bgt.n	8014810 <format_message+0x6c>
    msgtext = err->addon_message_table[msg_code - err->first_addon_message];
 80147fc:	69bb      	ldr	r3, [r7, #24]
 80147fe:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8014800:	69bb      	ldr	r3, [r7, #24]
 8014802:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014804:	6979      	ldr	r1, [r7, #20]
 8014806:	1acb      	subs	r3, r1, r3
 8014808:	009b      	lsls	r3, r3, #2
 801480a:	4413      	add	r3, r2
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Defend against bogus message number */
  if (msgtext == NULL) {
 8014810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014812:	2b00      	cmp	r3, #0
 8014814:	d106      	bne.n	8014824 <format_message+0x80>
    err->msg_parm.i[0] = msg_code;
 8014816:	69bb      	ldr	r3, [r7, #24]
 8014818:	697a      	ldr	r2, [r7, #20]
 801481a:	619a      	str	r2, [r3, #24]
    msgtext = err->jpeg_message_table[0];
 801481c:	69bb      	ldr	r3, [r7, #24]
 801481e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check for string parameter, as indicated by %s in the message text */
  isstring = FALSE;
 8014824:	2300      	movs	r3, #0
 8014826:	61fb      	str	r3, [r7, #28]
  msgptr = msgtext;
 8014828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801482a:	623b      	str	r3, [r7, #32]
  while ((ch = *msgptr++) != '\0') {
 801482c:	e009      	b.n	8014842 <format_message+0x9e>
    if (ch == '%') {
 801482e:	7cfb      	ldrb	r3, [r7, #19]
 8014830:	2b25      	cmp	r3, #37	; 0x25
 8014832:	d106      	bne.n	8014842 <format_message+0x9e>
      if (*msgptr == 's') isstring = TRUE;
 8014834:	6a3b      	ldr	r3, [r7, #32]
 8014836:	781b      	ldrb	r3, [r3, #0]
 8014838:	2b73      	cmp	r3, #115	; 0x73
 801483a:	d10b      	bne.n	8014854 <format_message+0xb0>
 801483c:	2301      	movs	r3, #1
 801483e:	61fb      	str	r3, [r7, #28]
      break;
 8014840:	e008      	b.n	8014854 <format_message+0xb0>
  while ((ch = *msgptr++) != '\0') {
 8014842:	6a3b      	ldr	r3, [r7, #32]
 8014844:	1c5a      	adds	r2, r3, #1
 8014846:	623a      	str	r2, [r7, #32]
 8014848:	781b      	ldrb	r3, [r3, #0]
 801484a:	74fb      	strb	r3, [r7, #19]
 801484c:	7cfb      	ldrb	r3, [r7, #19]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d1ed      	bne.n	801482e <format_message+0x8a>
 8014852:	e000      	b.n	8014856 <format_message+0xb2>
      break;
 8014854:	bf00      	nop
    }
  }

  /* Format the message into the passed buffer */
  if (isstring)
 8014856:	69fb      	ldr	r3, [r7, #28]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d007      	beq.n	801486c <format_message+0xc8>
    sprintf(buffer, msgtext, err->msg_parm.s);
 801485c:	69bb      	ldr	r3, [r7, #24]
 801485e:	3318      	adds	r3, #24
 8014860:	461a      	mov	r2, r3
 8014862:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014864:	68b8      	ldr	r0, [r7, #8]
 8014866:	f010 fc41 	bl	80250ec <siprintf>
    sprintf(buffer, msgtext,
	    err->msg_parm.i[0], err->msg_parm.i[1],
	    err->msg_parm.i[2], err->msg_parm.i[3],
	    err->msg_parm.i[4], err->msg_parm.i[5],
	    err->msg_parm.i[6], err->msg_parm.i[7]);
}
 801486a:	e01c      	b.n	80148a6 <format_message+0x102>
    sprintf(buffer, msgtext,
 801486c:	69bb      	ldr	r3, [r7, #24]
 801486e:	699e      	ldr	r6, [r3, #24]
 8014870:	69bb      	ldr	r3, [r7, #24]
 8014872:	69db      	ldr	r3, [r3, #28]
 8014874:	607b      	str	r3, [r7, #4]
 8014876:	69bb      	ldr	r3, [r7, #24]
 8014878:	6a1b      	ldr	r3, [r3, #32]
 801487a:	69ba      	ldr	r2, [r7, #24]
 801487c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801487e:	69b9      	ldr	r1, [r7, #24]
 8014880:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8014882:	69b8      	ldr	r0, [r7, #24]
 8014884:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8014886:	69bc      	ldr	r4, [r7, #24]
 8014888:	6b24      	ldr	r4, [r4, #48]	; 0x30
 801488a:	69bd      	ldr	r5, [r7, #24]
 801488c:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 801488e:	9505      	str	r5, [sp, #20]
 8014890:	9404      	str	r4, [sp, #16]
 8014892:	9003      	str	r0, [sp, #12]
 8014894:	9102      	str	r1, [sp, #8]
 8014896:	9201      	str	r2, [sp, #4]
 8014898:	9300      	str	r3, [sp, #0]
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	4632      	mov	r2, r6
 801489e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80148a0:	68b8      	ldr	r0, [r7, #8]
 80148a2:	f010 fc23 	bl	80250ec <siprintf>
}
 80148a6:	bf00      	nop
 80148a8:	372c      	adds	r7, #44	; 0x2c
 80148aa:	46bd      	mov	sp, r7
 80148ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080148ae <reset_error_mgr>:
 * this method if it has additional error processing state.
 */

METHODDEF(void)
reset_error_mgr (j_common_ptr cinfo)
{
 80148ae:	b480      	push	{r7}
 80148b0:	b083      	sub	sp, #12
 80148b2:	af00      	add	r7, sp, #0
 80148b4:	6078      	str	r0, [r7, #4]
  cinfo->err->num_warnings = 0;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	2200      	movs	r2, #0
 80148bc:	66da      	str	r2, [r3, #108]	; 0x6c
  /* trace_level is not reset since it is an application-supplied parameter */
  cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	2200      	movs	r2, #0
 80148c4:	615a      	str	r2, [r3, #20]
}
 80148c6:	bf00      	nop
 80148c8:	370c      	adds	r7, #12
 80148ca:	46bd      	mov	sp, r7
 80148cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d0:	4770      	bx	lr
	...

080148d4 <jpeg_std_error>:
 * after which the application may override some of the methods.
 */

GLOBAL(struct jpeg_error_mgr *)
jpeg_std_error (struct jpeg_error_mgr * err)
{
 80148d4:	b480      	push	{r7}
 80148d6:	b083      	sub	sp, #12
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
  err->error_exit = error_exit;
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	4a17      	ldr	r2, [pc, #92]	; (801493c <jpeg_std_error+0x68>)
 80148e0:	601a      	str	r2, [r3, #0]
  err->emit_message = emit_message;
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	4a16      	ldr	r2, [pc, #88]	; (8014940 <jpeg_std_error+0x6c>)
 80148e6:	605a      	str	r2, [r3, #4]
  err->output_message = output_message;
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	4a16      	ldr	r2, [pc, #88]	; (8014944 <jpeg_std_error+0x70>)
 80148ec:	609a      	str	r2, [r3, #8]
  err->format_message = format_message;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	4a15      	ldr	r2, [pc, #84]	; (8014948 <jpeg_std_error+0x74>)
 80148f2:	60da      	str	r2, [r3, #12]
  err->reset_error_mgr = reset_error_mgr;
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	4a15      	ldr	r2, [pc, #84]	; (801494c <jpeg_std_error+0x78>)
 80148f8:	611a      	str	r2, [r3, #16]

  err->trace_level = 0;		/* default = no tracing */
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	2200      	movs	r2, #0
 80148fe:	669a      	str	r2, [r3, #104]	; 0x68
  err->num_warnings = 0;	/* no warnings emitted yet */
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	2200      	movs	r2, #0
 8014904:	66da      	str	r2, [r3, #108]	; 0x6c
  err->msg_code = 0;		/* may be useful as a flag for "no error" */
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	2200      	movs	r2, #0
 801490a:	615a      	str	r2, [r3, #20]

  /* Initialize message table pointers */
  err->jpeg_message_table = jpeg_std_message_table;
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	4a10      	ldr	r2, [pc, #64]	; (8014950 <jpeg_std_error+0x7c>)
 8014910:	671a      	str	r2, [r3, #112]	; 0x70
  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	227e      	movs	r2, #126	; 0x7e
 8014916:	675a      	str	r2, [r3, #116]	; 0x74

  err->addon_message_table = NULL;
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	2200      	movs	r2, #0
 801491c:	679a      	str	r2, [r3, #120]	; 0x78
  err->first_addon_message = 0;	/* for safety */
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	2200      	movs	r2, #0
 8014922:	67da      	str	r2, [r3, #124]	; 0x7c
  err->last_addon_message = 0;
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	2200      	movs	r2, #0
 8014928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return err;
 801492c:	687b      	ldr	r3, [r7, #4]
}
 801492e:	4618      	mov	r0, r3
 8014930:	370c      	adds	r7, #12
 8014932:	46bd      	mov	sp, r7
 8014934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014938:	4770      	bx	lr
 801493a:	bf00      	nop
 801493c:	08014711 	.word	0x08014711
 8014940:	08014751 	.word	0x08014751
 8014944:	08014731 	.word	0x08014731
 8014948:	080147a5 	.word	0x080147a5
 801494c:	080148af 	.word	0x080148af
 8014950:	080272fc 	.word	0x080272fc

08014954 <jpeg_idct_float>:

GLOBAL(void)
jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014954:	b490      	push	{r4, r7}
 8014956:	b0dc      	sub	sp, #368	; 0x170
 8014958:	af00      	add	r7, sp, #0
 801495a:	f107 040c 	add.w	r4, r7, #12
 801495e:	6020      	str	r0, [r4, #0]
 8014960:	f107 0008 	add.w	r0, r7, #8
 8014964:	6001      	str	r1, [r0, #0]
 8014966:	1d39      	adds	r1, r7, #4
 8014968:	600a      	str	r2, [r1, #0]
 801496a:	463a      	mov	r2, r7
 801496c:	6013      	str	r3, [r2, #0]
  FAST_FLOAT z5, z10, z11, z12, z13;
  JCOEFPTR inptr;
  FLOAT_MULT_TYPE * quantptr;
  FAST_FLOAT * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 801496e:	f107 030c 	add.w	r3, r7, #12
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8014978:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  int ctr;
  FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 801497c:	1d3b      	adds	r3, r7, #4
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
 8014984:	f107 0308 	add.w	r3, r7, #8
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801498c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  wsptr = workspace;
 8014990:	f107 0310 	add.w	r3, r7, #16
 8014994:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8014998:	2308      	movs	r3, #8
 801499a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 801499e:	e230      	b.n	8014e02 <jpeg_idct_float+0x4ae>
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80149a0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80149a4:	3310      	adds	r3, #16
 80149a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d178      	bne.n	8014aa0 <jpeg_idct_float+0x14c>
 80149ae:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80149b2:	3320      	adds	r3, #32
 80149b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d171      	bne.n	8014aa0 <jpeg_idct_float+0x14c>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 80149bc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80149c0:	3330      	adds	r3, #48	; 0x30
 80149c2:	f9b3 3000 	ldrsh.w	r3, [r3]
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d16a      	bne.n	8014aa0 <jpeg_idct_float+0x14c>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 80149ca:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80149ce:	3340      	adds	r3, #64	; 0x40
 80149d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d163      	bne.n	8014aa0 <jpeg_idct_float+0x14c>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80149d8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80149dc:	3350      	adds	r3, #80	; 0x50
 80149de:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d15c      	bne.n	8014aa0 <jpeg_idct_float+0x14c>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80149e6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80149ea:	3360      	adds	r3, #96	; 0x60
 80149ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d155      	bne.n	8014aa0 <jpeg_idct_float+0x14c>
	inptr[DCTSIZE*7] == 0) {
 80149f4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80149f8:	3370      	adds	r3, #112	; 0x70
 80149fa:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d14e      	bne.n	8014aa0 <jpeg_idct_float+0x14c>
      /* AC terms all zero */
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014a02:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8014a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014a0a:	ee07 3a90 	vmov	s15, r3
 8014a0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014a12:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8014a16:	edd3 7a00 	vldr	s15, [r3]
 8014a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014a1e:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110
      
      wsptr[DCTSIZE*0] = dcval;
 8014a22:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014a26:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8014a2a:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*1] = dcval;
 8014a2c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014a30:	3320      	adds	r3, #32
 8014a32:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8014a36:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*2] = dcval;
 8014a38:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014a3c:	3340      	adds	r3, #64	; 0x40
 8014a3e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8014a42:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*3] = dcval;
 8014a44:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014a48:	3360      	adds	r3, #96	; 0x60
 8014a4a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8014a4e:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*4] = dcval;
 8014a50:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014a54:	3380      	adds	r3, #128	; 0x80
 8014a56:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8014a5a:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*5] = dcval;
 8014a5c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014a60:	33a0      	adds	r3, #160	; 0xa0
 8014a62:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8014a66:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*6] = dcval;
 8014a68:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014a6c:	33c0      	adds	r3, #192	; 0xc0
 8014a6e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8014a72:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*7] = dcval;
 8014a74:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014a78:	33e0      	adds	r3, #224	; 0xe0
 8014a7a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8014a7e:	601a      	str	r2, [r3, #0]
      
      inptr++;			/* advance pointers to next column */
 8014a80:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8014a84:	3302      	adds	r3, #2
 8014a86:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
      quantptr++;
 8014a8a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8014a8e:	3304      	adds	r3, #4
 8014a90:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
      wsptr++;
 8014a94:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014a98:	3304      	adds	r3, #4
 8014a9a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
      continue;
 8014a9e:	e1ab      	b.n	8014df8 <jpeg_idct_float+0x4a4>
    }
    
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014aa0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8014aa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014aa8:	ee07 3a90 	vmov	s15, r3
 8014aac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014ab0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8014ab4:	edd3 7a00 	vldr	s15, [r3]
 8014ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014abc:	edc7 7a50 	vstr	s15, [r7, #320]	; 0x140
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014ac0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8014ac4:	3320      	adds	r3, #32
 8014ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014aca:	ee07 3a90 	vmov	s15, r3
 8014ace:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014ad2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8014ad6:	3340      	adds	r3, #64	; 0x40
 8014ad8:	edd3 7a00 	vldr	s15, [r3]
 8014adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014ae0:	edc7 7a4e 	vstr	s15, [r7, #312]	; 0x138
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014ae4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8014ae8:	3340      	adds	r3, #64	; 0x40
 8014aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014aee:	ee07 3a90 	vmov	s15, r3
 8014af2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014af6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8014afa:	3380      	adds	r3, #128	; 0x80
 8014afc:	edd3 7a00 	vldr	s15, [r3]
 8014b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014b04:	edc7 7a4d 	vstr	s15, [r7, #308]	; 0x134
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014b08:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8014b0c:	3360      	adds	r3, #96	; 0x60
 8014b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014b12:	ee07 3a90 	vmov	s15, r3
 8014b16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014b1a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8014b1e:	33c0      	adds	r3, #192	; 0xc0
 8014b20:	edd3 7a00 	vldr	s15, [r3]
 8014b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014b28:	edc7 7a4f 	vstr	s15, [r7, #316]	; 0x13c

    tmp10 = tmp0 + tmp2;	/* phase 3 */
 8014b2c:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 8014b30:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 8014b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014b38:	edc7 7a54 	vstr	s15, [r7, #336]	; 0x150
    tmp11 = tmp0 - tmp2;
 8014b3c:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 8014b40:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 8014b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b48:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 8014b4c:	ed97 7a4e 	vldr	s14, [r7, #312]	; 0x138
 8014b50:	edd7 7a4f 	vldr	s15, [r7, #316]	; 0x13c
 8014b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014b58:	edc7 7a52 	vstr	s15, [r7, #328]	; 0x148
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 8014b5c:	ed97 7a4e 	vldr	s14, [r7, #312]	; 0x138
 8014b60:	edd7 7a4f 	vldr	s15, [r7, #316]	; 0x13c
 8014b64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b68:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8014e20 <jpeg_idct_float+0x4cc>
 8014b6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014b70:	edd7 7a52 	vldr	s15, [r7, #328]	; 0x148
 8014b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b78:	edc7 7a51 	vstr	s15, [r7, #324]	; 0x144

    tmp0 = tmp10 + tmp13;	/* phase 2 */
 8014b7c:	ed97 7a54 	vldr	s14, [r7, #336]	; 0x150
 8014b80:	edd7 7a52 	vldr	s15, [r7, #328]	; 0x148
 8014b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014b88:	edc7 7a50 	vstr	s15, [r7, #320]	; 0x140
    tmp3 = tmp10 - tmp13;
 8014b8c:	ed97 7a54 	vldr	s14, [r7, #336]	; 0x150
 8014b90:	edd7 7a52 	vldr	s15, [r7, #328]	; 0x148
 8014b94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b98:	edc7 7a4f 	vstr	s15, [r7, #316]	; 0x13c
    tmp1 = tmp11 + tmp12;
 8014b9c:	ed97 7a53 	vldr	s14, [r7, #332]	; 0x14c
 8014ba0:	edd7 7a51 	vldr	s15, [r7, #324]	; 0x144
 8014ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ba8:	edc7 7a4e 	vstr	s15, [r7, #312]	; 0x138
    tmp2 = tmp11 - tmp12;
 8014bac:	ed97 7a53 	vldr	s14, [r7, #332]	; 0x14c
 8014bb0:	edd7 7a51 	vldr	s15, [r7, #324]	; 0x144
 8014bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014bb8:	edc7 7a4d 	vstr	s15, [r7, #308]	; 0x134
    
    /* Odd part */

    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014bbc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8014bc0:	3310      	adds	r3, #16
 8014bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014bc6:	ee07 3a90 	vmov	s15, r3
 8014bca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014bce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8014bd2:	3320      	adds	r3, #32
 8014bd4:	edd3 7a00 	vldr	s15, [r3]
 8014bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014bdc:	edc7 7a45 	vstr	s15, [r7, #276]	; 0x114
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014be0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8014be4:	3330      	adds	r3, #48	; 0x30
 8014be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014bea:	ee07 3a90 	vmov	s15, r3
 8014bee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014bf2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8014bf6:	3360      	adds	r3, #96	; 0x60
 8014bf8:	edd3 7a00 	vldr	s15, [r3]
 8014bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c00:	edc7 7a46 	vstr	s15, [r7, #280]	; 0x118
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014c04:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8014c08:	3350      	adds	r3, #80	; 0x50
 8014c0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c0e:	ee07 3a90 	vmov	s15, r3
 8014c12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014c16:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8014c1a:	33a0      	adds	r3, #160	; 0xa0
 8014c1c:	edd3 7a00 	vldr	s15, [r3]
 8014c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c24:	edc7 7a47 	vstr	s15, [r7, #284]	; 0x11c
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014c28:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8014c2c:	3370      	adds	r3, #112	; 0x70
 8014c2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c32:	ee07 3a90 	vmov	s15, r3
 8014c36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014c3a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8014c3e:	33e0      	adds	r3, #224	; 0xe0
 8014c40:	edd3 7a00 	vldr	s15, [r3]
 8014c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c48:	edc7 7a48 	vstr	s15, [r7, #288]	; 0x120

    z13 = tmp6 + tmp5;		/* phase 6 */
 8014c4c:	ed97 7a47 	vldr	s14, [r7, #284]	; 0x11c
 8014c50:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 8014c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014c58:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130
    z10 = tmp6 - tmp5;
 8014c5c:	ed97 7a47 	vldr	s14, [r7, #284]	; 0x11c
 8014c60:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 8014c64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014c68:	edc7 7a4b 	vstr	s15, [r7, #300]	; 0x12c
    z11 = tmp4 + tmp7;
 8014c6c:	ed97 7a45 	vldr	s14, [r7, #276]	; 0x114
 8014c70:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 8014c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014c78:	edc7 7a4a 	vstr	s15, [r7, #296]	; 0x128
    z12 = tmp4 - tmp7;
 8014c7c:	ed97 7a45 	vldr	s14, [r7, #276]	; 0x114
 8014c80:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 8014c84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014c88:	edc7 7a49 	vstr	s15, [r7, #292]	; 0x124

    tmp7 = z11 + z13;		/* phase 5 */
 8014c8c:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 8014c90:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 8014c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014c98:	edc7 7a48 	vstr	s15, [r7, #288]	; 0x120
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */
 8014c9c:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 8014ca0:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 8014ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014ca8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8014e20 <jpeg_idct_float+0x4cc>
 8014cac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014cb0:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 8014cb4:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 8014cb8:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 8014cbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014cc0:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8014e24 <jpeg_idct_float+0x4d0>
 8014cc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014cc8:	edc7 7a55 	vstr	s15, [r7, #340]	; 0x154
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 8014ccc:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 8014cd0:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8014e28 <jpeg_idct_float+0x4d4>
 8014cd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014cd8:	ed97 7a55 	vldr	s14, [r7, #340]	; 0x154
 8014cdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014ce0:	edc7 7a54 	vstr	s15, [r7, #336]	; 0x150
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8014ce4:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8014ce8:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8014e2c <jpeg_idct_float+0x4d8>
 8014cec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014cf0:	ed97 7a55 	vldr	s14, [r7, #340]	; 0x154
 8014cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014cf8:	edc7 7a51 	vstr	s15, [r7, #324]	; 0x144

    tmp6 = tmp12 - tmp7;	/* phase 2 */
 8014cfc:	ed97 7a51 	vldr	s14, [r7, #324]	; 0x144
 8014d00:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 8014d04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d08:	edc7 7a47 	vstr	s15, [r7, #284]	; 0x11c
    tmp5 = tmp11 - tmp6;
 8014d0c:	ed97 7a53 	vldr	s14, [r7, #332]	; 0x14c
 8014d10:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 8014d14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d18:	edc7 7a46 	vstr	s15, [r7, #280]	; 0x118
    tmp4 = tmp10 - tmp5;
 8014d1c:	ed97 7a54 	vldr	s14, [r7, #336]	; 0x150
 8014d20:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 8014d24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d28:	edc7 7a45 	vstr	s15, [r7, #276]	; 0x114

    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 8014d2c:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 8014d30:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 8014d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014d38:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014d3c:	edc3 7a00 	vstr	s15, [r3]
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 8014d40:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014d44:	33e0      	adds	r3, #224	; 0xe0
 8014d46:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 8014d4a:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 8014d4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d52:	edc3 7a00 	vstr	s15, [r3]
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 8014d56:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014d5a:	3320      	adds	r3, #32
 8014d5c:	ed97 7a4e 	vldr	s14, [r7, #312]	; 0x138
 8014d60:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 8014d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014d68:	edc3 7a00 	vstr	s15, [r3]
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 8014d6c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014d70:	33c0      	adds	r3, #192	; 0xc0
 8014d72:	ed97 7a4e 	vldr	s14, [r7, #312]	; 0x138
 8014d76:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 8014d7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d7e:	edc3 7a00 	vstr	s15, [r3]
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 8014d82:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014d86:	3340      	adds	r3, #64	; 0x40
 8014d88:	ed97 7a4d 	vldr	s14, [r7, #308]	; 0x134
 8014d8c:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 8014d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014d94:	edc3 7a00 	vstr	s15, [r3]
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 8014d98:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014d9c:	33a0      	adds	r3, #160	; 0xa0
 8014d9e:	ed97 7a4d 	vldr	s14, [r7, #308]	; 0x134
 8014da2:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 8014da6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014daa:	edc3 7a00 	vstr	s15, [r3]
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 8014dae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014db2:	3360      	adds	r3, #96	; 0x60
 8014db4:	ed97 7a4f 	vldr	s14, [r7, #316]	; 0x13c
 8014db8:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8014dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014dc0:	edc3 7a00 	vstr	s15, [r3]
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 8014dc4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014dc8:	3380      	adds	r3, #128	; 0x80
 8014dca:	ed97 7a4f 	vldr	s14, [r7, #316]	; 0x13c
 8014dce:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8014dd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014dd6:	edc3 7a00 	vstr	s15, [r3]

    inptr++;			/* advance pointers to next column */
 8014dda:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8014dde:	3302      	adds	r3, #2
 8014de0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    quantptr++;
 8014de4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8014de8:	3304      	adds	r3, #4
 8014dea:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    wsptr++;
 8014dee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014df2:	3304      	adds	r3, #4
 8014df4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8014df8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8014dfc:	3b01      	subs	r3, #1
 8014dfe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8014e02:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	f73f adca 	bgt.w	80149a0 <jpeg_idct_float+0x4c>
  }
  
  /* Pass 2: process rows from work array, store into output array. */

  wsptr = workspace;
 8014e0c:	f107 0310 	add.w	r3, r7, #16
 8014e10:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8014e14:	2300      	movs	r3, #0
 8014e16:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8014e1a:	e1aa      	b.n	8015172 <jpeg_idct_float+0x81e>
 8014e1c:	43008000 	.word	0x43008000
 8014e20:	3fb504f3 	.word	0x3fb504f3
 8014e24:	3fec835e 	.word	0x3fec835e
 8014e28:	3f8a8bd4 	.word	0x3f8a8bd4
 8014e2c:	40273d75 	.word	0x40273d75
    outptr = output_buf[ctr] + output_col;
 8014e30:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8014e34:	009b      	lsls	r3, r3, #2
 8014e36:	463a      	mov	r2, r7
 8014e38:	6812      	ldr	r2, [r2, #0]
 8014e3a:	4413      	add	r3, r2
 8014e3c:	681a      	ldr	r2, [r3, #0]
 8014e3e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8014e42:	4413      	add	r3, r2
 8014e44:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
     */
    
    /* Even part */

    /* Apply signed->unsigned and prepare float->int conversion */
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 8014e48:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014e4c:	edd3 7a00 	vldr	s15, [r3]
 8014e50:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 8014e1c <jpeg_idct_float+0x4c8>
 8014e54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014e58:	edc7 7a55 	vstr	s15, [r7, #340]	; 0x154
    tmp10 = z5 + wsptr[4];
 8014e5c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014e60:	3310      	adds	r3, #16
 8014e62:	edd3 7a00 	vldr	s15, [r3]
 8014e66:	ed97 7a55 	vldr	s14, [r7, #340]	; 0x154
 8014e6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014e6e:	edc7 7a54 	vstr	s15, [r7, #336]	; 0x150
    tmp11 = z5 - wsptr[4];
 8014e72:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014e76:	3310      	adds	r3, #16
 8014e78:	edd3 7a00 	vldr	s15, [r3]
 8014e7c:	ed97 7a55 	vldr	s14, [r7, #340]	; 0x154
 8014e80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014e84:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c

    tmp13 = wsptr[2] + wsptr[6];
 8014e88:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014e8c:	3308      	adds	r3, #8
 8014e8e:	ed93 7a00 	vldr	s14, [r3]
 8014e92:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014e96:	3318      	adds	r3, #24
 8014e98:	edd3 7a00 	vldr	s15, [r3]
 8014e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ea0:	edc7 7a52 	vstr	s15, [r7, #328]	; 0x148
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 8014ea4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014ea8:	3308      	adds	r3, #8
 8014eaa:	ed93 7a00 	vldr	s14, [r3]
 8014eae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014eb2:	3318      	adds	r3, #24
 8014eb4:	edd3 7a00 	vldr	s15, [r3]
 8014eb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014ebc:	ed1f 7a28 	vldr	s14, [pc, #-160]	; 8014e20 <jpeg_idct_float+0x4cc>
 8014ec0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014ec4:	edd7 7a52 	vldr	s15, [r7, #328]	; 0x148
 8014ec8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014ecc:	edc7 7a51 	vstr	s15, [r7, #324]	; 0x144

    tmp0 = tmp10 + tmp13;
 8014ed0:	ed97 7a54 	vldr	s14, [r7, #336]	; 0x150
 8014ed4:	edd7 7a52 	vldr	s15, [r7, #328]	; 0x148
 8014ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014edc:	edc7 7a50 	vstr	s15, [r7, #320]	; 0x140
    tmp3 = tmp10 - tmp13;
 8014ee0:	ed97 7a54 	vldr	s14, [r7, #336]	; 0x150
 8014ee4:	edd7 7a52 	vldr	s15, [r7, #328]	; 0x148
 8014ee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014eec:	edc7 7a4f 	vstr	s15, [r7, #316]	; 0x13c
    tmp1 = tmp11 + tmp12;
 8014ef0:	ed97 7a53 	vldr	s14, [r7, #332]	; 0x14c
 8014ef4:	edd7 7a51 	vldr	s15, [r7, #324]	; 0x144
 8014ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014efc:	edc7 7a4e 	vstr	s15, [r7, #312]	; 0x138
    tmp2 = tmp11 - tmp12;
 8014f00:	ed97 7a53 	vldr	s14, [r7, #332]	; 0x14c
 8014f04:	edd7 7a51 	vldr	s15, [r7, #324]	; 0x144
 8014f08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014f0c:	edc7 7a4d 	vstr	s15, [r7, #308]	; 0x134

    /* Odd part */

    z13 = wsptr[5] + wsptr[3];
 8014f10:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014f14:	3314      	adds	r3, #20
 8014f16:	ed93 7a00 	vldr	s14, [r3]
 8014f1a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014f1e:	330c      	adds	r3, #12
 8014f20:	edd3 7a00 	vldr	s15, [r3]
 8014f24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014f28:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130
    z10 = wsptr[5] - wsptr[3];
 8014f2c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014f30:	3314      	adds	r3, #20
 8014f32:	ed93 7a00 	vldr	s14, [r3]
 8014f36:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014f3a:	330c      	adds	r3, #12
 8014f3c:	edd3 7a00 	vldr	s15, [r3]
 8014f40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014f44:	edc7 7a4b 	vstr	s15, [r7, #300]	; 0x12c
    z11 = wsptr[1] + wsptr[7];
 8014f48:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014f4c:	3304      	adds	r3, #4
 8014f4e:	ed93 7a00 	vldr	s14, [r3]
 8014f52:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014f56:	331c      	adds	r3, #28
 8014f58:	edd3 7a00 	vldr	s15, [r3]
 8014f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014f60:	edc7 7a4a 	vstr	s15, [r7, #296]	; 0x128
    z12 = wsptr[1] - wsptr[7];
 8014f64:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014f68:	3304      	adds	r3, #4
 8014f6a:	ed93 7a00 	vldr	s14, [r3]
 8014f6e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014f72:	331c      	adds	r3, #28
 8014f74:	edd3 7a00 	vldr	s15, [r3]
 8014f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014f7c:	edc7 7a49 	vstr	s15, [r7, #292]	; 0x124

    tmp7 = z11 + z13;
 8014f80:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 8014f84:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 8014f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014f8c:	edc7 7a48 	vstr	s15, [r7, #288]	; 0x120
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);
 8014f90:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 8014f94:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 8014f98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014f9c:	ed1f 7a60 	vldr	s14, [pc, #-384]	; 8014e20 <jpeg_idct_float+0x4cc>
 8014fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014fa4:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 8014fa8:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 8014fac:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 8014fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014fb4:	ed1f 7a65 	vldr	s14, [pc, #-404]	; 8014e24 <jpeg_idct_float+0x4d0>
 8014fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014fbc:	edc7 7a55 	vstr	s15, [r7, #340]	; 0x154
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 8014fc0:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 8014fc4:	ed1f 7a68 	vldr	s14, [pc, #-416]	; 8014e28 <jpeg_idct_float+0x4d4>
 8014fc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014fcc:	ed97 7a55 	vldr	s14, [r7, #340]	; 0x154
 8014fd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014fd4:	edc7 7a54 	vstr	s15, [r7, #336]	; 0x150
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8014fd8:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8014fdc:	ed1f 7a6d 	vldr	s14, [pc, #-436]	; 8014e2c <jpeg_idct_float+0x4d8>
 8014fe0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014fe4:	ed97 7a55 	vldr	s14, [r7, #340]	; 0x154
 8014fe8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014fec:	edc7 7a51 	vstr	s15, [r7, #324]	; 0x144

    tmp6 = tmp12 - tmp7;
 8014ff0:	ed97 7a51 	vldr	s14, [r7, #324]	; 0x144
 8014ff4:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 8014ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014ffc:	edc7 7a47 	vstr	s15, [r7, #284]	; 0x11c
    tmp5 = tmp11 - tmp6;
 8015000:	ed97 7a53 	vldr	s14, [r7, #332]	; 0x14c
 8015004:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 8015008:	ee77 7a67 	vsub.f32	s15, s14, s15
 801500c:	edc7 7a46 	vstr	s15, [r7, #280]	; 0x118
    tmp4 = tmp10 - tmp5;
 8015010:	ed97 7a54 	vldr	s14, [r7, #336]	; 0x150
 8015014:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 8015018:	ee77 7a67 	vsub.f32	s15, s14, s15
 801501c:	edc7 7a45 	vstr	s15, [r7, #276]	; 0x114

    /* Final output stage: float->int conversion and range-limit */

    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 8015020:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 8015024:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 8015028:	ee77 7a27 	vadd.f32	s15, s14, s15
 801502c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015030:	ee17 3a90 	vmov	r3, s15
 8015034:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015038:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 801503c:	4413      	add	r3, r2
 801503e:	781a      	ldrb	r2, [r3, #0]
 8015040:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8015044:	701a      	strb	r2, [r3, #0]
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8015046:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 801504a:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 801504e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015052:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015056:	ee17 3a90 	vmov	r3, s15
 801505a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801505e:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8015062:	441a      	add	r2, r3
 8015064:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8015068:	3307      	adds	r3, #7
 801506a:	7812      	ldrb	r2, [r2, #0]
 801506c:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 801506e:	ed97 7a4e 	vldr	s14, [r7, #312]	; 0x138
 8015072:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 8015076:	ee77 7a27 	vadd.f32	s15, s14, s15
 801507a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801507e:	ee17 3a90 	vmov	r3, s15
 8015082:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015086:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 801508a:	441a      	add	r2, r3
 801508c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8015090:	3301      	adds	r3, #1
 8015092:	7812      	ldrb	r2, [r2, #0]
 8015094:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 8015096:	ed97 7a4e 	vldr	s14, [r7, #312]	; 0x138
 801509a:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 801509e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80150a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80150a6:	ee17 3a90 	vmov	r3, s15
 80150aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80150ae:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80150b2:	441a      	add	r2, r3
 80150b4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80150b8:	3306      	adds	r3, #6
 80150ba:	7812      	ldrb	r2, [r2, #0]
 80150bc:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 80150be:	ed97 7a4d 	vldr	s14, [r7, #308]	; 0x134
 80150c2:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 80150c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80150ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80150ce:	ee17 3a90 	vmov	r3, s15
 80150d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80150d6:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80150da:	441a      	add	r2, r3
 80150dc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80150e0:	3302      	adds	r3, #2
 80150e2:	7812      	ldrb	r2, [r2, #0]
 80150e4:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 80150e6:	ed97 7a4d 	vldr	s14, [r7, #308]	; 0x134
 80150ea:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 80150ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80150f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80150f6:	ee17 3a90 	vmov	r3, s15
 80150fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80150fe:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8015102:	441a      	add	r2, r3
 8015104:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8015108:	3305      	adds	r3, #5
 801510a:	7812      	ldrb	r2, [r2, #0]
 801510c:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 801510e:	ed97 7a4f 	vldr	s14, [r7, #316]	; 0x13c
 8015112:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8015116:	ee77 7a27 	vadd.f32	s15, s14, s15
 801511a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801511e:	ee17 3a90 	vmov	r3, s15
 8015122:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015126:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 801512a:	441a      	add	r2, r3
 801512c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8015130:	3303      	adds	r3, #3
 8015132:	7812      	ldrb	r2, [r2, #0]
 8015134:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 8015136:	ed97 7a4f 	vldr	s14, [r7, #316]	; 0x13c
 801513a:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 801513e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015142:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015146:	ee17 3a90 	vmov	r3, s15
 801514a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801514e:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8015152:	441a      	add	r2, r3
 8015154:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8015158:	3304      	adds	r3, #4
 801515a:	7812      	ldrb	r2, [r2, #0]
 801515c:	701a      	strb	r2, [r3, #0]
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 801515e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015162:	3320      	adds	r3, #32
 8015164:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8015168:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801516c:	3301      	adds	r3, #1
 801516e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8015172:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015176:	2b07      	cmp	r3, #7
 8015178:	f77f ae5a 	ble.w	8014e30 <jpeg_idct_float+0x4dc>
  }
}
 801517c:	bf00      	nop
 801517e:	bf00      	nop
 8015180:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 8015184:	46bd      	mov	sp, r7
 8015186:	bc90      	pop	{r4, r7}
 8015188:	4770      	bx	lr
 801518a:	bf00      	nop

0801518c <jpeg_idct_ifast>:

GLOBAL(void)
jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801518c:	b490      	push	{r4, r7}
 801518e:	b0de      	sub	sp, #376	; 0x178
 8015190:	af00      	add	r7, sp, #0
 8015192:	f107 040c 	add.w	r4, r7, #12
 8015196:	6020      	str	r0, [r4, #0]
 8015198:	f107 0008 	add.w	r0, r7, #8
 801519c:	6001      	str	r1, [r0, #0]
 801519e:	1d39      	adds	r1, r7, #4
 80151a0:	600a      	str	r2, [r1, #0]
 80151a2:	463a      	mov	r2, r7
 80151a4:	6013      	str	r3, [r2, #0]
  DCTELEM z5, z10, z11, z12, z13;
  JCOEFPTR inptr;
  IFAST_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80151a6:	f107 030c 	add.w	r3, r7, #12
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80151b0:	3380      	adds	r3, #128	; 0x80
 80151b2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  SHIFT_TEMPS			/* for DESCALE */
  ISHIFT_TEMPS			/* for IDESCALE */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 80151b6:	1d3b      	adds	r3, r7, #4
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
 80151be:	f107 0308 	add.w	r3, r7, #8
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80151c6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  wsptr = workspace;
 80151ca:	f107 0314 	add.w	r3, r7, #20
 80151ce:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 80151d2:	2308      	movs	r3, #8
 80151d4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80151d8:	e1ec      	b.n	80155b4 <jpeg_idct_ifast+0x428>
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80151da:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80151de:	3310      	adds	r3, #16
 80151e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d174      	bne.n	80152d2 <jpeg_idct_ifast+0x146>
 80151e8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80151ec:	3320      	adds	r3, #32
 80151ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d16d      	bne.n	80152d2 <jpeg_idct_ifast+0x146>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 80151f6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80151fa:	3330      	adds	r3, #48	; 0x30
 80151fc:	f9b3 3000 	ldrsh.w	r3, [r3]
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8015200:	2b00      	cmp	r3, #0
 8015202:	d166      	bne.n	80152d2 <jpeg_idct_ifast+0x146>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8015204:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015208:	3340      	adds	r3, #64	; 0x40
 801520a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d15f      	bne.n	80152d2 <jpeg_idct_ifast+0x146>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8015212:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015216:	3350      	adds	r3, #80	; 0x50
 8015218:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 801521c:	2b00      	cmp	r3, #0
 801521e:	d158      	bne.n	80152d2 <jpeg_idct_ifast+0x146>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8015220:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015224:	3360      	adds	r3, #96	; 0x60
 8015226:	f9b3 3000 	ldrsh.w	r3, [r3]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d151      	bne.n	80152d2 <jpeg_idct_ifast+0x146>
	inptr[DCTSIZE*7] == 0) {
 801522e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015232:	3370      	adds	r3, #112	; 0x70
 8015234:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8015238:	2b00      	cmp	r3, #0
 801523a:	d14a      	bne.n	80152d2 <jpeg_idct_ifast+0x146>
      /* AC terms all zero */
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801523c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015240:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015244:	461a      	mov	r2, r3
 8015246:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	fb03 f302 	mul.w	r3, r3, r2
 8015250:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

      wsptr[DCTSIZE*0] = dcval;
 8015254:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015258:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801525c:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*1] = dcval;
 801525e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015262:	3320      	adds	r3, #32
 8015264:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8015268:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*2] = dcval;
 801526a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801526e:	3340      	adds	r3, #64	; 0x40
 8015270:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8015274:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*3] = dcval;
 8015276:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801527a:	3360      	adds	r3, #96	; 0x60
 801527c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8015280:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*4] = dcval;
 8015282:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015286:	3380      	adds	r3, #128	; 0x80
 8015288:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801528c:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*5] = dcval;
 801528e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015292:	33a0      	adds	r3, #160	; 0xa0
 8015294:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8015298:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*6] = dcval;
 801529a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801529e:	33c0      	adds	r3, #192	; 0xc0
 80152a0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80152a4:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*7] = dcval;
 80152a6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80152aa:	33e0      	adds	r3, #224	; 0xe0
 80152ac:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80152b0:	601a      	str	r2, [r3, #0]
      
      inptr++;			/* advance pointers to next column */
 80152b2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80152b6:	3302      	adds	r3, #2
 80152b8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
      quantptr++;
 80152bc:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80152c0:	3304      	adds	r3, #4
 80152c2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
      wsptr++;
 80152c6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80152ca:	3304      	adds	r3, #4
 80152cc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
      continue;
 80152d0:	e16b      	b.n	80155aa <jpeg_idct_ifast+0x41e>
    }
    
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80152d2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80152d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80152da:	461a      	mov	r2, r3
 80152dc:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	fb03 f302 	mul.w	r3, r3, r2
 80152e6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80152ea:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80152ee:	3320      	adds	r3, #32
 80152f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80152f4:	461a      	mov	r2, r3
 80152f6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80152fa:	3340      	adds	r3, #64	; 0x40
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	fb03 f302 	mul.w	r3, r3, r2
 8015302:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015306:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801530a:	3340      	adds	r3, #64	; 0x40
 801530c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015310:	461a      	mov	r2, r3
 8015312:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8015316:	3380      	adds	r3, #128	; 0x80
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	fb03 f302 	mul.w	r3, r3, r2
 801531e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8015322:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015326:	3360      	adds	r3, #96	; 0x60
 8015328:	f9b3 3000 	ldrsh.w	r3, [r3]
 801532c:	461a      	mov	r2, r3
 801532e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8015332:	33c0      	adds	r3, #192	; 0xc0
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	fb03 f302 	mul.w	r3, r3, r2
 801533a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

    tmp10 = tmp0 + tmp2;	/* phase 3 */
 801533e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8015342:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015346:	4413      	add	r3, r2
 8015348:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    tmp11 = tmp0 - tmp2;
 801534c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8015350:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015354:	1ad3      	subs	r3, r2, r3
 8015356:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 801535a:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801535e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8015362:	4413      	add	r3, r2
 8015364:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 8015368:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801536c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8015370:	1ad3      	subs	r3, r2, r3
 8015372:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8015376:	fb02 f303 	mul.w	r3, r2, r3
 801537a:	121a      	asrs	r2, r3, #8
 801537c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8015380:	1ad3      	subs	r3, r2, r3
 8015382:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

    tmp0 = tmp10 + tmp13;	/* phase 2 */
 8015386:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 801538a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801538e:	4413      	add	r3, r2
 8015390:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    tmp3 = tmp10 - tmp13;
 8015394:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8015398:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801539c:	1ad3      	subs	r3, r2, r3
 801539e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    tmp1 = tmp11 + tmp12;
 80153a2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80153a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80153aa:	4413      	add	r3, r2
 80153ac:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    tmp2 = tmp11 - tmp12;
 80153b0:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80153b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80153b8:	1ad3      	subs	r3, r2, r3
 80153ba:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    
    /* Odd part */

    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80153be:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80153c2:	3310      	adds	r3, #16
 80153c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153c8:	461a      	mov	r2, r3
 80153ca:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80153ce:	3320      	adds	r3, #32
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	fb03 f302 	mul.w	r3, r3, r2
 80153d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80153da:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80153de:	3330      	adds	r3, #48	; 0x30
 80153e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80153e4:	461a      	mov	r2, r3
 80153e6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80153ea:	3360      	adds	r3, #96	; 0x60
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	fb03 f302 	mul.w	r3, r3, r2
 80153f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80153f6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80153fa:	3350      	adds	r3, #80	; 0x50
 80153fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015400:	461a      	mov	r2, r3
 8015402:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8015406:	33a0      	adds	r3, #160	; 0xa0
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	fb03 f302 	mul.w	r3, r3, r2
 801540e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015412:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015416:	3370      	adds	r3, #112	; 0x70
 8015418:	f9b3 3000 	ldrsh.w	r3, [r3]
 801541c:	461a      	mov	r2, r3
 801541e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8015422:	33e0      	adds	r3, #224	; 0xe0
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	fb03 f302 	mul.w	r3, r3, r2
 801542a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

    z13 = tmp6 + tmp5;		/* phase 6 */
 801542e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8015432:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015436:	4413      	add	r3, r2
 8015438:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    z10 = tmp6 - tmp5;
 801543c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8015440:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015444:	1ad3      	subs	r3, r2, r3
 8015446:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    z11 = tmp4 + tmp7;
 801544a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801544e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015452:	4413      	add	r3, r2
 8015454:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    z12 = tmp4 - tmp7;
 8015458:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801545c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015460:	1ad3      	subs	r3, r2, r3
 8015462:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    tmp7 = z11 + z13;		/* phase 5 */
 8015466:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801546a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801546e:	4413      	add	r3, r2
 8015470:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 8015474:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8015478:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801547c:	1ad3      	subs	r3, r2, r3
 801547e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8015482:	fb02 f303 	mul.w	r3, r2, r3
 8015486:	121b      	asrs	r3, r3, #8
 8015488:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 801548c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8015490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015494:	4413      	add	r3, r2
 8015496:	f240 12d9 	movw	r2, #473	; 0x1d9
 801549a:	fb02 f303 	mul.w	r3, r2, r3
 801549e:	121b      	asrs	r3, r3, #8
 80154a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 80154a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80154a8:	f240 1215 	movw	r2, #277	; 0x115
 80154ac:	fb02 f303 	mul.w	r3, r2, r3
 80154b0:	121a      	asrs	r2, r3, #8
 80154b2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80154b6:	1ad3      	subs	r3, r2, r3
 80154b8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 80154bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80154c0:	f46f 7227 	mvn.w	r2, #668	; 0x29c
 80154c4:	fb02 f303 	mul.w	r3, r2, r3
 80154c8:	121b      	asrs	r3, r3, #8
 80154ca:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80154ce:	4413      	add	r3, r2
 80154d0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

    tmp6 = tmp12 - tmp7;	/* phase 2 */
 80154d4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80154d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80154dc:	1ad3      	subs	r3, r2, r3
 80154de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    tmp5 = tmp11 - tmp6;
 80154e2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80154e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80154ea:	1ad3      	subs	r3, r2, r3
 80154ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    tmp4 = tmp10 + tmp5;
 80154f0:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80154f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80154f8:	4413      	add	r3, r2
 80154fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 80154fe:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8015502:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015506:	441a      	add	r2, r3
 8015508:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801550c:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 801550e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015512:	33e0      	adds	r3, #224	; 0xe0
 8015514:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8015518:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801551c:	1a8a      	subs	r2, r1, r2
 801551e:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 8015520:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015524:	3320      	adds	r3, #32
 8015526:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 801552a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801552e:	440a      	add	r2, r1
 8015530:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 8015532:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015536:	33c0      	adds	r3, #192	; 0xc0
 8015538:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 801553c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8015540:	1a8a      	subs	r2, r1, r2
 8015542:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 8015544:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015548:	3340      	adds	r3, #64	; 0x40
 801554a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 801554e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8015552:	440a      	add	r2, r1
 8015554:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 8015556:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801555a:	33a0      	adds	r3, #160	; 0xa0
 801555c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8015560:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8015564:	1a8a      	subs	r2, r1, r2
 8015566:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 8015568:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801556c:	3380      	adds	r3, #128	; 0x80
 801556e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8015572:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8015576:	440a      	add	r2, r1
 8015578:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 801557a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801557e:	3360      	adds	r3, #96	; 0x60
 8015580:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8015584:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8015588:	1a8a      	subs	r2, r1, r2
 801558a:	601a      	str	r2, [r3, #0]

    inptr++;			/* advance pointers to next column */
 801558c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015590:	3302      	adds	r3, #2
 8015592:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    quantptr++;
 8015596:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801559a:	3304      	adds	r3, #4
 801559c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    wsptr++;
 80155a0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80155a4:	3304      	adds	r3, #4
 80155a6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 80155aa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80155ae:	3b01      	subs	r3, #1
 80155b0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80155b4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	f73f ae0e 	bgt.w	80151da <jpeg_idct_ifast+0x4e>
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 80155be:	f107 0314 	add.w	r3, r7, #20
 80155c2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 80155c6:	2300      	movs	r3, #0
 80155c8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80155cc:	e1c5      	b.n	801595a <jpeg_idct_ifast+0x7ce>
    outptr = output_buf[ctr] + output_col;
 80155ce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80155d2:	009b      	lsls	r3, r3, #2
 80155d4:	463a      	mov	r2, r7
 80155d6:	6812      	ldr	r2, [r2, #0]
 80155d8:	4413      	add	r3, r2
 80155da:	681a      	ldr	r2, [r3, #0]
 80155dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80155e0:	4413      	add	r3, r2
 80155e2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
     * test takes more time than it's worth.  In that case this section
     * may be commented out.
     */
    
#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 80155e6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80155ea:	3304      	adds	r3, #4
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d164      	bne.n	80156bc <jpeg_idct_ifast+0x530>
 80155f2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80155f6:	3308      	adds	r3, #8
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d15e      	bne.n	80156bc <jpeg_idct_ifast+0x530>
 80155fe:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015602:	330c      	adds	r3, #12
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	2b00      	cmp	r3, #0
 8015608:	d158      	bne.n	80156bc <jpeg_idct_ifast+0x530>
 801560a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801560e:	3310      	adds	r3, #16
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d152      	bne.n	80156bc <jpeg_idct_ifast+0x530>
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8015616:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801561a:	3314      	adds	r3, #20
 801561c:	681b      	ldr	r3, [r3, #0]
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 801561e:	2b00      	cmp	r3, #0
 8015620:	d14c      	bne.n	80156bc <jpeg_idct_ifast+0x530>
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8015622:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015626:	3318      	adds	r3, #24
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d146      	bne.n	80156bc <jpeg_idct_ifast+0x530>
 801562e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015632:	331c      	adds	r3, #28
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	2b00      	cmp	r3, #0
 8015638:	d140      	bne.n	80156bc <jpeg_idct_ifast+0x530>
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 801563a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	115b      	asrs	r3, r3, #5
				  & RANGE_MASK];
 8015642:	f3c3 0309 	ubfx	r3, r3, #0, #10
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 8015646:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801564a:	4413      	add	r3, r2
 801564c:	781b      	ldrb	r3, [r3, #0]
 801564e:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
      
      outptr[0] = dcval;
 8015652:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015656:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 801565a:	701a      	strb	r2, [r3, #0]
      outptr[1] = dcval;
 801565c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015660:	3301      	adds	r3, #1
 8015662:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 8015666:	701a      	strb	r2, [r3, #0]
      outptr[2] = dcval;
 8015668:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801566c:	3302      	adds	r3, #2
 801566e:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 8015672:	701a      	strb	r2, [r3, #0]
      outptr[3] = dcval;
 8015674:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015678:	3303      	adds	r3, #3
 801567a:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 801567e:	701a      	strb	r2, [r3, #0]
      outptr[4] = dcval;
 8015680:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015684:	3304      	adds	r3, #4
 8015686:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 801568a:	701a      	strb	r2, [r3, #0]
      outptr[5] = dcval;
 801568c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015690:	3305      	adds	r3, #5
 8015692:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 8015696:	701a      	strb	r2, [r3, #0]
      outptr[6] = dcval;
 8015698:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801569c:	3306      	adds	r3, #6
 801569e:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 80156a2:	701a      	strb	r2, [r3, #0]
      outptr[7] = dcval;
 80156a4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80156a8:	3307      	adds	r3, #7
 80156aa:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 80156ae:	701a      	strb	r2, [r3, #0]

      wsptr += DCTSIZE;		/* advance pointer to next row */
 80156b0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80156b4:	3320      	adds	r3, #32
 80156b6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
      continue;
 80156ba:	e149      	b.n	8015950 <jpeg_idct_ifast+0x7c4>
    }
#endif
    
    /* Even part */

    tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
 80156bc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80156c0:	681a      	ldr	r2, [r3, #0]
 80156c2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80156c6:	3310      	adds	r3, #16
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	4413      	add	r3, r2
 80156cc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);
 80156d0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80156d4:	681a      	ldr	r2, [r3, #0]
 80156d6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80156da:	3310      	adds	r3, #16
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	1ad3      	subs	r3, r2, r3
 80156e0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

    tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
 80156e4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80156e8:	3308      	adds	r3, #8
 80156ea:	681a      	ldr	r2, [r3, #0]
 80156ec:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80156f0:	3318      	adds	r3, #24
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	4413      	add	r3, r2
 80156f6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 80156fa:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80156fe:	3308      	adds	r3, #8
 8015700:	681a      	ldr	r2, [r3, #0]
 8015702:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015706:	3318      	adds	r3, #24
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	1ad3      	subs	r3, r2, r3
 801570c:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8015710:	fb02 f303 	mul.w	r3, r2, r3
 8015714:	121a      	asrs	r2, r3, #8
 8015716:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801571a:	1ad3      	subs	r3, r2, r3
 801571c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	    - tmp13;

    tmp0 = tmp10 + tmp13;
 8015720:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8015724:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8015728:	4413      	add	r3, r2
 801572a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    tmp3 = tmp10 - tmp13;
 801572e:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8015732:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8015736:	1ad3      	subs	r3, r2, r3
 8015738:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    tmp1 = tmp11 + tmp12;
 801573c:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8015740:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8015744:	4413      	add	r3, r2
 8015746:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    tmp2 = tmp11 - tmp12;
 801574a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801574e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8015752:	1ad3      	subs	r3, r2, r3
 8015754:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    /* Odd part */

    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 8015758:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801575c:	3314      	adds	r3, #20
 801575e:	681a      	ldr	r2, [r3, #0]
 8015760:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015764:	330c      	adds	r3, #12
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	4413      	add	r3, r2
 801576a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
 801576e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015772:	3314      	adds	r3, #20
 8015774:	681a      	ldr	r2, [r3, #0]
 8015776:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801577a:	330c      	adds	r3, #12
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	1ad3      	subs	r3, r2, r3
 8015780:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
 8015784:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015788:	3304      	adds	r3, #4
 801578a:	681a      	ldr	r2, [r3, #0]
 801578c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015790:	331c      	adds	r3, #28
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	4413      	add	r3, r2
 8015796:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
 801579a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801579e:	3304      	adds	r3, #4
 80157a0:	681a      	ldr	r2, [r3, #0]
 80157a2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80157a6:	331c      	adds	r3, #28
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	1ad3      	subs	r3, r2, r3
 80157ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    tmp7 = z11 + z13;		/* phase 5 */
 80157b0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80157b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80157b8:	4413      	add	r3, r2
 80157ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 80157be:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80157c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80157c6:	1ad3      	subs	r3, r2, r3
 80157c8:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80157cc:	fb02 f303 	mul.w	r3, r2, r3
 80157d0:	121b      	asrs	r3, r3, #8
 80157d2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 80157d6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80157da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80157de:	4413      	add	r3, r2
 80157e0:	f240 12d9 	movw	r2, #473	; 0x1d9
 80157e4:	fb02 f303 	mul.w	r3, r2, r3
 80157e8:	121b      	asrs	r3, r3, #8
 80157ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 80157ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80157f2:	f240 1215 	movw	r2, #277	; 0x115
 80157f6:	fb02 f303 	mul.w	r3, r2, r3
 80157fa:	121a      	asrs	r2, r3, #8
 80157fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8015800:	1ad3      	subs	r3, r2, r3
 8015802:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8015806:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801580a:	f46f 7227 	mvn.w	r2, #668	; 0x29c
 801580e:	fb02 f303 	mul.w	r3, r2, r3
 8015812:	121b      	asrs	r3, r3, #8
 8015814:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8015818:	4413      	add	r3, r2
 801581a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

    tmp6 = tmp12 - tmp7;	/* phase 2 */
 801581e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8015822:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015826:	1ad3      	subs	r3, r2, r3
 8015828:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    tmp5 = tmp11 - tmp6;
 801582c:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8015830:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8015834:	1ad3      	subs	r3, r2, r3
 8015836:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    tmp4 = tmp10 + tmp5;
 801583a:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 801583e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015842:	4413      	add	r3, r2
 8015844:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    /* Final output stage: scale down by a factor of 8 and range-limit */

    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 8015848:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801584c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015850:	4413      	add	r3, r2
 8015852:	115b      	asrs	r3, r3, #5
			    & RANGE_MASK];
 8015854:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 8015858:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801585c:	4413      	add	r3, r2
 801585e:	781a      	ldrb	r2, [r3, #0]
 8015860:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015864:	701a      	strb	r2, [r3, #0]
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 8015866:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801586a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801586e:	1ad3      	subs	r3, r2, r3
 8015870:	115b      	asrs	r3, r3, #5
			    & RANGE_MASK];
 8015872:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 8015876:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801587a:	441a      	add	r2, r3
 801587c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015880:	3307      	adds	r3, #7
 8015882:	7812      	ldrb	r2, [r2, #0]
 8015884:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 8015886:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801588a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801588e:	4413      	add	r3, r2
 8015890:	115b      	asrs	r3, r3, #5
			    & RANGE_MASK];
 8015892:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 8015896:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801589a:	441a      	add	r2, r3
 801589c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80158a0:	3301      	adds	r3, #1
 80158a2:	7812      	ldrb	r2, [r2, #0]
 80158a4:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 80158a6:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80158aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80158ae:	1ad3      	subs	r3, r2, r3
 80158b0:	115b      	asrs	r3, r3, #5
			    & RANGE_MASK];
 80158b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 80158b6:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80158ba:	441a      	add	r2, r3
 80158bc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80158c0:	3306      	adds	r3, #6
 80158c2:	7812      	ldrb	r2, [r2, #0]
 80158c4:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 80158c6:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80158ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80158ce:	4413      	add	r3, r2
 80158d0:	115b      	asrs	r3, r3, #5
			    & RANGE_MASK];
 80158d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 80158d6:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80158da:	441a      	add	r2, r3
 80158dc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80158e0:	3302      	adds	r3, #2
 80158e2:	7812      	ldrb	r2, [r2, #0]
 80158e4:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 80158e6:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80158ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80158ee:	1ad3      	subs	r3, r2, r3
 80158f0:	115b      	asrs	r3, r3, #5
			    & RANGE_MASK];
 80158f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 80158f6:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80158fa:	441a      	add	r2, r3
 80158fc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015900:	3305      	adds	r3, #5
 8015902:	7812      	ldrb	r2, [r2, #0]
 8015904:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 8015906:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801590a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801590e:	4413      	add	r3, r2
 8015910:	115b      	asrs	r3, r3, #5
			    & RANGE_MASK];
 8015912:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 8015916:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801591a:	441a      	add	r2, r3
 801591c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015920:	3304      	adds	r3, #4
 8015922:	7812      	ldrb	r2, [r2, #0]
 8015924:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 8015926:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801592a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801592e:	1ad3      	subs	r3, r2, r3
 8015930:	115b      	asrs	r3, r3, #5
			    & RANGE_MASK];
 8015932:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 8015936:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801593a:	441a      	add	r2, r3
 801593c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8015940:	3303      	adds	r3, #3
 8015942:	7812      	ldrb	r2, [r2, #0]
 8015944:	701a      	strb	r2, [r3, #0]

    wsptr += DCTSIZE;		/* advance pointer to next row */
 8015946:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801594a:	3320      	adds	r3, #32
 801594c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8015950:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015954:	3301      	adds	r3, #1
 8015956:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 801595a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801595e:	2b07      	cmp	r3, #7
 8015960:	f77f ae35 	ble.w	80155ce <jpeg_idct_ifast+0x442>
  }
}
 8015964:	bf00      	nop
 8015966:	bf00      	nop
 8015968:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 801596c:	46bd      	mov	sp, r7
 801596e:	bc90      	pop	{r4, r7}
 8015970:	4770      	bx	lr
	...

08015974 <jpeg_idct_islow>:

GLOBAL(void)
jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8015974:	b490      	push	{r4, r7}
 8015976:	b0d8      	sub	sp, #352	; 0x160
 8015978:	af00      	add	r7, sp, #0
 801597a:	f107 040c 	add.w	r4, r7, #12
 801597e:	6020      	str	r0, [r4, #0]
 8015980:	f107 0008 	add.w	r0, r7, #8
 8015984:	6001      	str	r1, [r0, #0]
 8015986:	1d39      	adds	r1, r7, #4
 8015988:	600a      	str	r2, [r1, #0]
 801598a:	463a      	mov	r2, r7
 801598c:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801598e:	f107 030c 	add.w	r3, r7, #12
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8015998:	3380      	adds	r3, #128	; 0x80
 801599a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
 801599e:	1d3b      	adds	r3, r7, #4
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80159a6:	f107 0308 	add.w	r3, r7, #8
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80159ae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  wsptr = workspace;
 80159b2:	f107 0314 	add.w	r3, r7, #20
 80159b6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 80159ba:	2308      	movs	r3, #8
 80159bc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80159c0:	e238      	b.n	8015e34 <jpeg_idct_islow+0x4c0>
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80159c2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80159c6:	3310      	adds	r3, #16
 80159c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d175      	bne.n	8015abc <jpeg_idct_islow+0x148>
 80159d0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80159d4:	3320      	adds	r3, #32
 80159d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d16e      	bne.n	8015abc <jpeg_idct_islow+0x148>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 80159de:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80159e2:	3330      	adds	r3, #48	; 0x30
 80159e4:	f9b3 3000 	ldrsh.w	r3, [r3]
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d167      	bne.n	8015abc <jpeg_idct_islow+0x148>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 80159ec:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80159f0:	3340      	adds	r3, #64	; 0x40
 80159f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d160      	bne.n	8015abc <jpeg_idct_islow+0x148>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80159fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80159fe:	3350      	adds	r3, #80	; 0x50
 8015a00:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d159      	bne.n	8015abc <jpeg_idct_islow+0x148>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8015a08:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8015a0c:	3360      	adds	r3, #96	; 0x60
 8015a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d152      	bne.n	8015abc <jpeg_idct_islow+0x148>
	inptr[DCTSIZE*7] == 0) {
 8015a16:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8015a1a:	3370      	adds	r3, #112	; 0x70
 8015a1c:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d14b      	bne.n	8015abc <jpeg_idct_islow+0x148>
      /* AC terms all zero */
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8015a24:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8015a28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015a2c:	461a      	mov	r2, r3
 8015a2e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	fb03 f302 	mul.w	r3, r3, r2
 8015a38:	009b      	lsls	r3, r3, #2
 8015a3a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

      wsptr[DCTSIZE*0] = dcval;
 8015a3e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015a42:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8015a46:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*1] = dcval;
 8015a48:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015a4c:	3320      	adds	r3, #32
 8015a4e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8015a52:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*2] = dcval;
 8015a54:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015a58:	3340      	adds	r3, #64	; 0x40
 8015a5a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8015a5e:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*3] = dcval;
 8015a60:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015a64:	3360      	adds	r3, #96	; 0x60
 8015a66:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8015a6a:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*4] = dcval;
 8015a6c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015a70:	3380      	adds	r3, #128	; 0x80
 8015a72:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8015a76:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*5] = dcval;
 8015a78:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015a7c:	33a0      	adds	r3, #160	; 0xa0
 8015a7e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8015a82:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*6] = dcval;
 8015a84:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015a88:	33c0      	adds	r3, #192	; 0xc0
 8015a8a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8015a8e:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*7] = dcval;
 8015a90:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015a94:	33e0      	adds	r3, #224	; 0xe0
 8015a96:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8015a9a:	601a      	str	r2, [r3, #0]

      inptr++;			/* advance pointers to next column */
 8015a9c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8015aa0:	3302      	adds	r3, #2
 8015aa2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
      quantptr++;
 8015aa6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8015aaa:	3304      	adds	r3, #4
 8015aac:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
      wsptr++;
 8015ab0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015ab4:	3304      	adds	r3, #4
 8015ab6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
      continue;
 8015aba:	e1b6      	b.n	8015e2a <jpeg_idct_islow+0x4b6>
    }

    /* Even part: reverse the even part of the forward DCT. */
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015abc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8015ac0:	3320      	adds	r3, #32
 8015ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015ac6:	461a      	mov	r2, r3
 8015ac8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8015acc:	3340      	adds	r3, #64	; 0x40
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	fb03 f302 	mul.w	r3, r3, r2
 8015ad4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8015ad8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8015adc:	3360      	adds	r3, #96	; 0x60
 8015ade:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015ae2:	461a      	mov	r2, r3
 8015ae4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8015ae8:	33c0      	adds	r3, #192	; 0xc0
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	fb03 f302 	mul.w	r3, r3, r2
 8015af0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8015af4:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8015af8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015afc:	4413      	add	r3, r2
 8015afe:	f241 1251 	movw	r2, #4433	; 0x1151
 8015b02:	fb02 f303 	mul.w	r3, r2, r3
 8015b06:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8015b0a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8015b0e:	f641 027e 	movw	r2, #6270	; 0x187e
 8015b12:	fb02 f303 	mul.w	r3, r2, r3
 8015b16:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8015b1a:	4413      	add	r3, r2
 8015b1c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8015b20:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015b24:	4aca      	ldr	r2, [pc, #808]	; (8015e50 <jpeg_idct_islow+0x4dc>)
 8015b26:	fb02 f303 	mul.w	r3, r2, r3
 8015b2a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8015b2e:	4413      	add	r3, r2
 8015b30:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    z2 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015b34:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8015b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015b3c:	461a      	mov	r2, r3
 8015b3e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	fb03 f302 	mul.w	r3, r3, r2
 8015b48:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015b4c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8015b50:	3340      	adds	r3, #64	; 0x40
 8015b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015b56:	461a      	mov	r2, r3
 8015b58:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8015b5c:	3380      	adds	r3, #128	; 0x80
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	fb03 f302 	mul.w	r3, r3, r2
 8015b64:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    z2 <<= CONST_BITS;
 8015b68:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8015b6c:	035b      	lsls	r3, r3, #13
 8015b6e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z3 <<= CONST_BITS;
 8015b72:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015b76:	035b      	lsls	r3, r3, #13
 8015b78:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    /* Add fudge factor here for final descale. */
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8015b7c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8015b80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015b84:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

    tmp0 = z2 + z3;
 8015b88:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8015b8c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015b90:	4413      	add	r3, r2
 8015b92:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    tmp1 = z2 - z3;
 8015b96:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8015b9a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015b9e:	1ad3      	subs	r3, r2, r3
 8015ba0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

    tmp10 = tmp0 + tmp2;
 8015ba4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8015ba8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015bac:	4413      	add	r3, r2
 8015bae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    tmp13 = tmp0 - tmp2;
 8015bb2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8015bb6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015bba:	1ad3      	subs	r3, r2, r3
 8015bbc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    tmp11 = tmp1 + tmp3;
 8015bc0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8015bc4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8015bc8:	4413      	add	r3, r2
 8015bca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    tmp12 = tmp1 - tmp3;
 8015bce:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8015bd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8015bd6:	1ad3      	subs	r3, r2, r3
 8015bd8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    /* Odd part per figure 8; the matrix is unitary and hence its
     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
     */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015bdc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8015be0:	3370      	adds	r3, #112	; 0x70
 8015be2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015be6:	461a      	mov	r2, r3
 8015be8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8015bec:	33e0      	adds	r3, #224	; 0xe0
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	fb03 f302 	mul.w	r3, r3, r2
 8015bf4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015bf8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8015bfc:	3350      	adds	r3, #80	; 0x50
 8015bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c02:	461a      	mov	r2, r3
 8015c04:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8015c08:	33a0      	adds	r3, #160	; 0xa0
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	fb03 f302 	mul.w	r3, r3, r2
 8015c10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015c14:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8015c18:	3330      	adds	r3, #48	; 0x30
 8015c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c1e:	461a      	mov	r2, r3
 8015c20:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8015c24:	3360      	adds	r3, #96	; 0x60
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	fb03 f302 	mul.w	r3, r3, r2
 8015c2c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015c30:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8015c34:	3310      	adds	r3, #16
 8015c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015c3a:	461a      	mov	r2, r3
 8015c3c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8015c40:	3320      	adds	r3, #32
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	fb03 f302 	mul.w	r3, r3, r2
 8015c48:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    
    z2 = tmp0 + tmp2;
 8015c4c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8015c50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015c54:	4413      	add	r3, r2
 8015c56:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z3 = tmp1 + tmp3;
 8015c5a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8015c5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8015c62:	4413      	add	r3, r2
 8015c64:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8015c68:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8015c6c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015c70:	4413      	add	r3, r2
 8015c72:	f242 52a1 	movw	r2, #9633	; 0x25a1
 8015c76:	fb02 f303 	mul.w	r3, r2, r3
 8015c7a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
 8015c7e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8015c82:	4a74      	ldr	r2, [pc, #464]	; (8015e54 <jpeg_idct_islow+0x4e0>)
 8015c84:	fb02 f303 	mul.w	r3, r2, r3
 8015c88:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
 8015c8c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015c90:	4a71      	ldr	r2, [pc, #452]	; (8015e58 <jpeg_idct_islow+0x4e4>)
 8015c92:	fb02 f303 	mul.w	r3, r2, r3
 8015c96:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    z2 += z1;
 8015c9a:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8015c9e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8015ca2:	4413      	add	r3, r2
 8015ca4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z3 += z1;
 8015ca8:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8015cac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8015cb0:	4413      	add	r3, r2
 8015cb2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8015cb6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8015cba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8015cbe:	4413      	add	r3, r2
 8015cc0:	4a66      	ldr	r2, [pc, #408]	; (8015e5c <jpeg_idct_islow+0x4e8>)
 8015cc2:	fb02 f303 	mul.w	r3, r2, r3
 8015cc6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
 8015cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015cce:	f640 128e 	movw	r2, #2446	; 0x98e
 8015cd2:	fb02 f303 	mul.w	r3, r2, r3
 8015cd6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
 8015cda:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8015cde:	f243 020b 	movw	r2, #12299	; 0x300b
 8015ce2:	fb02 f303 	mul.w	r3, r2, r3
 8015ce6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    tmp0 += z1 + z2;
 8015cea:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8015cee:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8015cf2:	4413      	add	r3, r2
 8015cf4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8015cf8:	4413      	add	r3, r2
 8015cfa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    tmp3 += z1 + z3;
 8015cfe:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8015d02:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015d06:	4413      	add	r3, r2
 8015d08:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8015d0c:	4413      	add	r3, r2
 8015d0e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8015d12:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8015d16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015d1a:	4413      	add	r3, r2
 8015d1c:	4a50      	ldr	r2, [pc, #320]	; (8015e60 <jpeg_idct_islow+0x4ec>)
 8015d1e:	fb02 f303 	mul.w	r3, r2, r3
 8015d22:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
 8015d26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015d2a:	f244 12b3 	movw	r2, #16819	; 0x41b3
 8015d2e:	fb02 f303 	mul.w	r3, r2, r3
 8015d32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
 8015d36:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015d3a:	f246 2254 	movw	r2, #25172	; 0x6254
 8015d3e:	fb02 f303 	mul.w	r3, r2, r3
 8015d42:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    tmp1 += z1 + z3;
 8015d46:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8015d4a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015d4e:	4413      	add	r3, r2
 8015d50:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8015d54:	4413      	add	r3, r2
 8015d56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    tmp2 += z1 + z2;
 8015d5a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8015d5e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8015d62:	4413      	add	r3, r2
 8015d64:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8015d68:	4413      	add	r3, r2
 8015d6a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */

    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8015d6e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8015d72:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8015d76:	4413      	add	r3, r2
 8015d78:	12da      	asrs	r2, r3, #11
 8015d7a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015d7e:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8015d80:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8015d84:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8015d88:	1ad2      	subs	r2, r2, r3
 8015d8a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015d8e:	33e0      	adds	r3, #224	; 0xe0
 8015d90:	12d2      	asrs	r2, r2, #11
 8015d92:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8015d94:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8015d98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015d9c:	441a      	add	r2, r3
 8015d9e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015da2:	3320      	adds	r3, #32
 8015da4:	12d2      	asrs	r2, r2, #11
 8015da6:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8015da8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8015dac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015db0:	1ad2      	subs	r2, r2, r3
 8015db2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015db6:	33c0      	adds	r3, #192	; 0xc0
 8015db8:	12d2      	asrs	r2, r2, #11
 8015dba:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8015dbc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8015dc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015dc4:	441a      	add	r2, r3
 8015dc6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015dca:	3340      	adds	r3, #64	; 0x40
 8015dcc:	12d2      	asrs	r2, r2, #11
 8015dce:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8015dd0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8015dd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015dd8:	1ad2      	subs	r2, r2, r3
 8015dda:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015dde:	33a0      	adds	r3, #160	; 0xa0
 8015de0:	12d2      	asrs	r2, r2, #11
 8015de2:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8015de4:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8015de8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015dec:	441a      	add	r2, r3
 8015dee:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015df2:	3360      	adds	r3, #96	; 0x60
 8015df4:	12d2      	asrs	r2, r2, #11
 8015df6:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 8015df8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8015dfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015e00:	1ad2      	subs	r2, r2, r3
 8015e02:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015e06:	3380      	adds	r3, #128	; 0x80
 8015e08:	12d2      	asrs	r2, r2, #11
 8015e0a:	601a      	str	r2, [r3, #0]
    
    inptr++;			/* advance pointers to next column */
 8015e0c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8015e10:	3302      	adds	r3, #2
 8015e12:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    quantptr++;
 8015e16:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8015e1a:	3304      	adds	r3, #4
 8015e1c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    wsptr++;
 8015e20:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015e24:	3304      	adds	r3, #4
 8015e26:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8015e2a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8015e2e:	3b01      	subs	r3, #1
 8015e30:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8015e34:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	f73f adc2 	bgt.w	80159c2 <jpeg_idct_islow+0x4e>

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8015e3e:	f107 0314 	add.w	r3, r7, #20
 8015e42:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8015e46:	2300      	movs	r3, #0
 8015e48:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8015e4c:	e218      	b.n	8016280 <jpeg_idct_islow+0x90c>
 8015e4e:	bf00      	nop
 8015e50:	ffffc4df 	.word	0xffffc4df
 8015e54:	ffffc13b 	.word	0xffffc13b
 8015e58:	fffff384 	.word	0xfffff384
 8015e5c:	ffffe333 	.word	0xffffe333
 8015e60:	ffffadfd 	.word	0xffffadfd
    outptr = output_buf[ctr] + output_col;
 8015e64:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8015e68:	009b      	lsls	r3, r3, #2
 8015e6a:	463a      	mov	r2, r7
 8015e6c:	6812      	ldr	r2, [r2, #0]
 8015e6e:	4413      	add	r3, r2
 8015e70:	681a      	ldr	r2, [r3, #0]
 8015e72:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015e76:	4413      	add	r3, r2
 8015e78:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
     * test takes more time than it's worth.  In that case this section
     * may be commented out.
     */

#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 8015e7c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015e80:	3304      	adds	r3, #4
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d165      	bne.n	8015f54 <jpeg_idct_islow+0x5e0>
 8015e88:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015e8c:	3308      	adds	r3, #8
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d15f      	bne.n	8015f54 <jpeg_idct_islow+0x5e0>
 8015e94:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015e98:	330c      	adds	r3, #12
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d159      	bne.n	8015f54 <jpeg_idct_islow+0x5e0>
 8015ea0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015ea4:	3310      	adds	r3, #16
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d153      	bne.n	8015f54 <jpeg_idct_islow+0x5e0>
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8015eac:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015eb0:	3314      	adds	r3, #20
 8015eb2:	681b      	ldr	r3, [r3, #0]
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d14d      	bne.n	8015f54 <jpeg_idct_islow+0x5e0>
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8015eb8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015ebc:	3318      	adds	r3, #24
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d147      	bne.n	8015f54 <jpeg_idct_islow+0x5e0>
 8015ec4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015ec8:	331c      	adds	r3, #28
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d141      	bne.n	8015f54 <jpeg_idct_islow+0x5e0>
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 8015ed0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	3310      	adds	r3, #16
 8015ed8:	115b      	asrs	r3, r3, #5
				  & RANGE_MASK];
 8015eda:	f3c3 0309 	ubfx	r3, r3, #0, #10
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 8015ede:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8015ee2:	4413      	add	r3, r2
 8015ee4:	781b      	ldrb	r3, [r3, #0]
 8015ee6:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

      outptr[0] = dcval;
 8015eea:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015eee:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 8015ef2:	701a      	strb	r2, [r3, #0]
      outptr[1] = dcval;
 8015ef4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015ef8:	3301      	adds	r3, #1
 8015efa:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 8015efe:	701a      	strb	r2, [r3, #0]
      outptr[2] = dcval;
 8015f00:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015f04:	3302      	adds	r3, #2
 8015f06:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 8015f0a:	701a      	strb	r2, [r3, #0]
      outptr[3] = dcval;
 8015f0c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015f10:	3303      	adds	r3, #3
 8015f12:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 8015f16:	701a      	strb	r2, [r3, #0]
      outptr[4] = dcval;
 8015f18:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015f1c:	3304      	adds	r3, #4
 8015f1e:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 8015f22:	701a      	strb	r2, [r3, #0]
      outptr[5] = dcval;
 8015f24:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015f28:	3305      	adds	r3, #5
 8015f2a:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 8015f2e:	701a      	strb	r2, [r3, #0]
      outptr[6] = dcval;
 8015f30:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015f34:	3306      	adds	r3, #6
 8015f36:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 8015f3a:	701a      	strb	r2, [r3, #0]
      outptr[7] = dcval;
 8015f3c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015f40:	3307      	adds	r3, #7
 8015f42:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 8015f46:	701a      	strb	r2, [r3, #0]

      wsptr += DCTSIZE;		/* advance pointer to next row */
 8015f48:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015f4c:	3320      	adds	r3, #32
 8015f4e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
      continue;
 8015f52:	e190      	b.n	8016276 <jpeg_idct_islow+0x902>
#endif

    /* Even part: reverse the even part of the forward DCT. */
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = (INT32) wsptr[2];
 8015f54:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015f58:	3308      	adds	r3, #8
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z3 = (INT32) wsptr[6];
 8015f60:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015f64:	3318      	adds	r3, #24
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8015f6c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8015f70:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015f74:	4413      	add	r3, r2
 8015f76:	f241 1251 	movw	r2, #4433	; 0x1151
 8015f7a:	fb02 f303 	mul.w	r3, r2, r3
 8015f7e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8015f82:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8015f86:	f641 027e 	movw	r2, #6270	; 0x187e
 8015f8a:	fb02 f303 	mul.w	r3, r2, r3
 8015f8e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8015f92:	4413      	add	r3, r2
 8015f94:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8015f98:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015f9c:	4abe      	ldr	r2, [pc, #760]	; (8016298 <jpeg_idct_islow+0x924>)
 8015f9e:	fb02 f303 	mul.w	r3, r2, r3
 8015fa2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8015fa6:	4413      	add	r3, r2
 8015fa8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    /* Add fudge factor here for final descale. */
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015fac:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	3310      	adds	r3, #16
 8015fb4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z3 = (INT32) wsptr[4];
 8015fb8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015fbc:	3310      	adds	r3, #16
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    tmp0 = (z2 + z3) << CONST_BITS;
 8015fc4:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8015fc8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015fcc:	4413      	add	r3, r2
 8015fce:	035b      	lsls	r3, r3, #13
 8015fd0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    tmp1 = (z2 - z3) << CONST_BITS;
 8015fd4:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8015fd8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015fdc:	1ad3      	subs	r3, r2, r3
 8015fde:	035b      	lsls	r3, r3, #13
 8015fe0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    
    tmp10 = tmp0 + tmp2;
 8015fe4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8015fe8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015fec:	4413      	add	r3, r2
 8015fee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    tmp13 = tmp0 - tmp2;
 8015ff2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8015ff6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015ffa:	1ad3      	subs	r3, r2, r3
 8015ffc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    tmp11 = tmp1 + tmp3;
 8016000:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8016004:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016008:	4413      	add	r3, r2
 801600a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    tmp12 = tmp1 - tmp3;
 801600e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8016012:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016016:	1ad3      	subs	r3, r2, r3
 8016018:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    /* Odd part per figure 8; the matrix is unitary and hence its
     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
     */

    tmp0 = (INT32) wsptr[7];
 801601c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8016020:	331c      	adds	r3, #28
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    tmp1 = (INT32) wsptr[5];
 8016028:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801602c:	3314      	adds	r3, #20
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    tmp2 = (INT32) wsptr[3];
 8016034:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8016038:	330c      	adds	r3, #12
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    tmp3 = (INT32) wsptr[1];
 8016040:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8016044:	3304      	adds	r3, #4
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    z2 = tmp0 + tmp2;
 801604c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8016050:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8016054:	4413      	add	r3, r2
 8016056:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z3 = tmp1 + tmp3;
 801605a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801605e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016062:	4413      	add	r3, r2
 8016064:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8016068:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801606c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8016070:	4413      	add	r3, r2
 8016072:	f242 52a1 	movw	r2, #9633	; 0x25a1
 8016076:	fb02 f303 	mul.w	r3, r2, r3
 801607a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
 801607e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8016082:	4a86      	ldr	r2, [pc, #536]	; (801629c <jpeg_idct_islow+0x928>)
 8016084:	fb02 f303 	mul.w	r3, r2, r3
 8016088:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
 801608c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8016090:	4a83      	ldr	r2, [pc, #524]	; (80162a0 <jpeg_idct_islow+0x92c>)
 8016092:	fb02 f303 	mul.w	r3, r2, r3
 8016096:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    z2 += z1;
 801609a:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801609e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80160a2:	4413      	add	r3, r2
 80160a4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z3 += z1;
 80160a8:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80160ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80160b0:	4413      	add	r3, r2
 80160b2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 80160b6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80160ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80160be:	4413      	add	r3, r2
 80160c0:	4a78      	ldr	r2, [pc, #480]	; (80162a4 <jpeg_idct_islow+0x930>)
 80160c2:	fb02 f303 	mul.w	r3, r2, r3
 80160c6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
 80160ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80160ce:	f640 128e 	movw	r2, #2446	; 0x98e
 80160d2:	fb02 f303 	mul.w	r3, r2, r3
 80160d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
 80160da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80160de:	f243 020b 	movw	r2, #12299	; 0x300b
 80160e2:	fb02 f303 	mul.w	r3, r2, r3
 80160e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    tmp0 += z1 + z2;
 80160ea:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80160ee:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80160f2:	4413      	add	r3, r2
 80160f4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80160f8:	4413      	add	r3, r2
 80160fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    tmp3 += z1 + z3;
 80160fe:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8016102:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8016106:	4413      	add	r3, r2
 8016108:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801610c:	4413      	add	r3, r2
 801610e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8016112:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8016116:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801611a:	4413      	add	r3, r2
 801611c:	4a62      	ldr	r2, [pc, #392]	; (80162a8 <jpeg_idct_islow+0x934>)
 801611e:	fb02 f303 	mul.w	r3, r2, r3
 8016122:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
 8016126:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801612a:	f244 12b3 	movw	r2, #16819	; 0x41b3
 801612e:	fb02 f303 	mul.w	r3, r2, r3
 8016132:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
 8016136:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801613a:	f246 2254 	movw	r2, #25172	; 0x6254
 801613e:	fb02 f303 	mul.w	r3, r2, r3
 8016142:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    tmp1 += z1 + z3;
 8016146:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801614a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801614e:	4413      	add	r3, r2
 8016150:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8016154:	4413      	add	r3, r2
 8016156:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    tmp2 += z1 + z2;
 801615a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801615e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8016162:	4413      	add	r3, r2
 8016164:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8016168:	4413      	add	r3, r2
 801616a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801616e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8016172:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016176:	4413      	add	r3, r2
 8016178:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801617a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801617e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8016182:	4413      	add	r3, r2
 8016184:	781a      	ldrb	r2, [r3, #0]
 8016186:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801618a:	701a      	strb	r2, [r3, #0]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801618c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8016190:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016194:	1ad3      	subs	r3, r2, r3
 8016196:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8016198:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801619c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80161a0:	441a      	add	r2, r3
 80161a2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80161a6:	3307      	adds	r3, #7
 80161a8:	7812      	ldrb	r2, [r2, #0]
 80161aa:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 80161ac:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80161b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80161b4:	4413      	add	r3, r2
 80161b6:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80161b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 80161bc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80161c0:	441a      	add	r2, r3
 80161c2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80161c6:	3301      	adds	r3, #1
 80161c8:	7812      	ldrb	r2, [r2, #0]
 80161ca:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 80161cc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80161d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80161d4:	1ad3      	subs	r3, r2, r3
 80161d6:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80161d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 80161dc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80161e0:	441a      	add	r2, r3
 80161e2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80161e6:	3306      	adds	r3, #6
 80161e8:	7812      	ldrb	r2, [r2, #0]
 80161ea:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80161ec:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80161f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80161f4:	4413      	add	r3, r2
 80161f6:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80161f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80161fc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8016200:	441a      	add	r2, r3
 8016202:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8016206:	3302      	adds	r3, #2
 8016208:	7812      	ldrb	r2, [r2, #0]
 801620a:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 801620c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8016210:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016214:	1ad3      	subs	r3, r2, r3
 8016216:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8016218:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 801621c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8016220:	441a      	add	r2, r3
 8016222:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8016226:	3305      	adds	r3, #5
 8016228:	7812      	ldrb	r2, [r2, #0]
 801622a:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 801622c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8016230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016234:	4413      	add	r3, r2
 8016236:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8016238:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 801623c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8016240:	441a      	add	r2, r3
 8016242:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8016246:	3303      	adds	r3, #3
 8016248:	7812      	ldrb	r2, [r2, #0]
 801624a:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 801624c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8016250:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016254:	1ad3      	subs	r3, r2, r3
 8016256:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8016258:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 801625c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8016260:	441a      	add	r2, r3
 8016262:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8016266:	3304      	adds	r3, #4
 8016268:	7812      	ldrb	r2, [r2, #0]
 801626a:	701a      	strb	r2, [r3, #0]

    wsptr += DCTSIZE;		/* advance pointer to next row */
 801626c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8016270:	3320      	adds	r3, #32
 8016272:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8016276:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801627a:	3301      	adds	r3, #1
 801627c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8016280:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8016284:	2b07      	cmp	r3, #7
 8016286:	f77f aded 	ble.w	8015e64 <jpeg_idct_islow+0x4f0>
  }
}
 801628a:	bf00      	nop
 801628c:	bf00      	nop
 801628e:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8016292:	46bd      	mov	sp, r7
 8016294:	bc90      	pop	{r4, r7}
 8016296:	4770      	bx	lr
 8016298:	ffffc4df 	.word	0xffffc4df
 801629c:	ffffc13b 	.word	0xffffc13b
 80162a0:	fffff384 	.word	0xfffff384
 80162a4:	ffffe333 	.word	0xffffe333
 80162a8:	ffffadfd 	.word	0xffffadfd

080162ac <jpeg_idct_7x7>:

GLOBAL(void)
jpeg_idct_7x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80162ac:	b490      	push	{r4, r7}
 80162ae:	b0c6      	sub	sp, #280	; 0x118
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	f107 040c 	add.w	r4, r7, #12
 80162b6:	6020      	str	r0, [r4, #0]
 80162b8:	f107 0008 	add.w	r0, r7, #8
 80162bc:	6001      	str	r1, [r0, #0]
 80162be:	1d39      	adds	r1, r7, #4
 80162c0:	600a      	str	r2, [r1, #0]
 80162c2:	463a      	mov	r2, r7
 80162c4:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80162c6:	f107 030c 	add.w	r3, r7, #12
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80162d0:	3380      	adds	r3, #128	; 0x80
 80162d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  int workspace[7*7];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 80162d6:	1d3b      	adds	r3, r7, #4
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80162de:	f107 0308 	add.w	r3, r7, #8
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80162e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  wsptr = workspace;
 80162ea:	f107 0314 	add.w	r3, r7, #20
 80162ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80162f2:	2300      	movs	r3, #0
 80162f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80162f8:	e17a      	b.n	80165f0 <jpeg_idct_7x7+0x344>
    /* Even part */

    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80162fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80162fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016302:	461a      	mov	r2, r3
 8016304:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	fb03 f302 	mul.w	r3, r3, r2
 801630e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    tmp13 <<= CONST_BITS;
 8016312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8016316:	035b      	lsls	r3, r3, #13
 8016318:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    /* Add fudge factor here for final descale. */
    tmp13 += ONE << (CONST_BITS-PASS1_BITS-1);
 801631c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8016320:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8016324:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8016328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801632c:	3320      	adds	r3, #32
 801632e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016332:	461a      	mov	r2, r3
 8016334:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8016338:	3340      	adds	r3, #64	; 0x40
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	fb03 f302 	mul.w	r3, r3, r2
 8016340:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8016344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016348:	3340      	adds	r3, #64	; 0x40
 801634a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801634e:	461a      	mov	r2, r3
 8016350:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8016354:	3380      	adds	r3, #128	; 0x80
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	fb03 f302 	mul.w	r3, r3, r2
 801635c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8016360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016364:	3360      	adds	r3, #96	; 0x60
 8016366:	f9b3 3000 	ldrsh.w	r3, [r3]
 801636a:	461a      	mov	r2, r3
 801636c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8016370:	33c0      	adds	r3, #192	; 0xc0
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	fb03 f302 	mul.w	r3, r3, r2
 8016378:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 801637c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8016380:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8016384:	1ad3      	subs	r3, r2, r3
 8016386:	f641 4237 	movw	r2, #7223	; 0x1c37
 801638a:	fb02 f303 	mul.w	r3, r2, r3
 801638e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8016392:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8016396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801639a:	1ad3      	subs	r3, r2, r3
 801639c:	f640 2212 	movw	r2, #2578	; 0xa12
 80163a0:	fb02 f303 	mul.w	r3, r2, r3
 80163a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 80163a8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80163ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80163b0:	441a      	add	r2, r3
 80163b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80163b6:	441a      	add	r2, r3
 80163b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80163bc:	4993      	ldr	r1, [pc, #588]	; (801660c <jpeg_idct_7x7+0x360>)
 80163be:	fb01 f303 	mul.w	r3, r1, r3
 80163c2:	4413      	add	r3, r2
 80163c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    tmp0 = z1 + z3;
 80163c8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80163cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80163d0:	4413      	add	r3, r2
 80163d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    z2 -= tmp0;
 80163d6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80163da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80163de:	1ad3      	subs	r3, r2, r3
 80163e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 80163e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80163e8:	f642 02c6 	movw	r2, #10438	; 0x28c6
 80163ec:	fb02 f303 	mul.w	r3, r2, r3
 80163f0:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80163f4:	4413      	add	r3, r2
 80163f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 80163fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80163fe:	f46f 721f 	mvn.w	r2, #636	; 0x27c
 8016402:	fb02 f203 	mul.w	r2, r2, r3
 8016406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801640a:	4413      	add	r3, r2
 801640c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8016410:	4413      	add	r3, r2
 8016412:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8016416:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801641a:	4a7d      	ldr	r2, [pc, #500]	; (8016610 <jpeg_idct_7x7+0x364>)
 801641c:	fb02 f203 	mul.w	r2, r2, r3
 8016420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016424:	4413      	add	r3, r2
 8016426:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801642a:	4413      	add	r3, r2
 801642c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8016430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016434:	f642 5241 	movw	r2, #11585	; 0x2d41
 8016438:	fb02 f303 	mul.w	r3, r2, r3
 801643c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8016440:	4413      	add	r3, r2
 8016442:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8016446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801644a:	3310      	adds	r3, #16
 801644c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016450:	461a      	mov	r2, r3
 8016452:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8016456:	3320      	adds	r3, #32
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	fb03 f302 	mul.w	r3, r3, r2
 801645e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8016462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016466:	3330      	adds	r3, #48	; 0x30
 8016468:	f9b3 3000 	ldrsh.w	r3, [r3]
 801646c:	461a      	mov	r2, r3
 801646e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8016472:	3360      	adds	r3, #96	; 0x60
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	fb03 f302 	mul.w	r3, r3, r2
 801647a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801647e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016482:	3350      	adds	r3, #80	; 0x50
 8016484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016488:	461a      	mov	r2, r3
 801648a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801648e:	33a0      	adds	r3, #160	; 0xa0
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	fb03 f302 	mul.w	r3, r3, r2
 8016496:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 801649a:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 801649e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80164a2:	4413      	add	r3, r2
 80164a4:	f641 52ef 	movw	r2, #7663	; 0x1def
 80164a8:	fb02 f303 	mul.w	r3, r2, r3
 80164ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 80164b0:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80164b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80164b8:	1ad3      	subs	r3, r2, r3
 80164ba:	f240 5273 	movw	r2, #1395	; 0x573
 80164be:	fb02 f303 	mul.w	r3, r2, r3
 80164c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    tmp0 = tmp1 - tmp2;
 80164c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80164ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80164ce:	1ad3      	subs	r3, r2, r3
 80164d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    tmp1 += tmp2;
 80164d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80164d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80164dc:	4413      	add	r3, r2
 80164de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 80164e2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80164e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80164ea:	4413      	add	r3, r2
 80164ec:	4a49      	ldr	r2, [pc, #292]	; (8016614 <jpeg_idct_7x7+0x368>)
 80164ee:	fb02 f303 	mul.w	r3, r2, r3
 80164f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    tmp1 += tmp2;
 80164f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80164fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80164fe:	4413      	add	r3, r2
 8016500:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8016504:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8016508:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801650c:	4413      	add	r3, r2
 801650e:	f241 32a3 	movw	r2, #5027	; 0x13a3
 8016512:	fb02 f303 	mul.w	r3, r2, r3
 8016516:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    tmp0 += z2;
 801651a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801651e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016522:	4413      	add	r3, r2
 8016524:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8016528:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801652c:	f643 32de 	movw	r2, #15326	; 0x3bde
 8016530:	fb02 f203 	mul.w	r2, r2, r3
 8016534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016538:	4413      	add	r3, r2
 801653a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801653e:	4413      	add	r3, r2
 8016540:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    /* Final output stage */

    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8016544:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8016548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801654c:	4413      	add	r3, r2
 801654e:	12da      	asrs	r2, r3, #11
 8016550:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016554:	601a      	str	r2, [r3, #0]
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8016556:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801655a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801655e:	1ad2      	subs	r2, r2, r3
 8016560:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016564:	33a8      	adds	r3, #168	; 0xa8
 8016566:	12d2      	asrs	r2, r2, #11
 8016568:	601a      	str	r2, [r3, #0]
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 801656a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801656e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016572:	441a      	add	r2, r3
 8016574:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016578:	331c      	adds	r3, #28
 801657a:	12d2      	asrs	r2, r2, #11
 801657c:	601a      	str	r2, [r3, #0]
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 801657e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8016582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016586:	1ad2      	subs	r2, r2, r3
 8016588:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801658c:	338c      	adds	r3, #140	; 0x8c
 801658e:	12d2      	asrs	r2, r2, #11
 8016590:	601a      	str	r2, [r3, #0]
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8016592:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8016596:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801659a:	441a      	add	r2, r3
 801659c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80165a0:	3338      	adds	r3, #56	; 0x38
 80165a2:	12d2      	asrs	r2, r2, #11
 80165a4:	601a      	str	r2, [r3, #0]
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80165a6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80165aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80165ae:	1ad2      	subs	r2, r2, r3
 80165b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80165b4:	3370      	adds	r3, #112	; 0x70
 80165b6:	12d2      	asrs	r2, r2, #11
 80165b8:	601a      	str	r2, [r3, #0]
    wsptr[7*3] = (int) RIGHT_SHIFT(tmp13, CONST_BITS-PASS1_BITS);
 80165ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80165be:	3354      	adds	r3, #84	; 0x54
 80165c0:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80165c4:	12d2      	asrs	r2, r2, #11
 80165c6:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80165c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80165cc:	3301      	adds	r3, #1
 80165ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80165d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80165d6:	3302      	adds	r3, #2
 80165d8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80165dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80165e0:	3304      	adds	r3, #4
 80165e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80165e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80165ea:	3304      	adds	r3, #4
 80165ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80165f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80165f4:	2b06      	cmp	r3, #6
 80165f6:	f77f ae80 	ble.w	80162fa <jpeg_idct_7x7+0x4e>
  }

  /* Pass 2: process 7 rows from work array, store into output array. */

  wsptr = workspace;
 80165fa:	f107 0314 	add.w	r3, r7, #20
 80165fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  for (ctr = 0; ctr < 7; ctr++) {
 8016602:	2300      	movs	r3, #0
 8016604:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8016608:	e171      	b.n	80168ee <jpeg_idct_7x7+0x642>
 801660a:	bf00      	nop
 801660c:	ffffc515 	.word	0xffffc515
 8016610:	ffffb0f1 	.word	0xffffb0f1
 8016614:	ffffd3e1 	.word	0xffffd3e1
    outptr = output_buf[ctr] + output_col;
 8016618:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801661c:	009b      	lsls	r3, r3, #2
 801661e:	463a      	mov	r2, r7
 8016620:	6812      	ldr	r2, [r2, #0]
 8016622:	4413      	add	r3, r2
 8016624:	681a      	ldr	r2, [r3, #0]
 8016626:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801662a:	4413      	add	r3, r2
 801662c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8016630:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016634:	681b      	ldr	r3, [r3, #0]
 8016636:	3310      	adds	r3, #16
 8016638:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    tmp13 <<= CONST_BITS;
 801663c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8016640:	035b      	lsls	r3, r3, #13
 8016642:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

    z1 = (INT32) wsptr[2];
 8016646:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801664a:	3308      	adds	r3, #8
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    z2 = (INT32) wsptr[4];
 8016652:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016656:	3310      	adds	r3, #16
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    z3 = (INT32) wsptr[6];
 801665e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016662:	3318      	adds	r3, #24
 8016664:	681b      	ldr	r3, [r3, #0]
 8016666:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 801666a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801666e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8016672:	1ad3      	subs	r3, r2, r3
 8016674:	f641 4237 	movw	r2, #7223	; 0x1c37
 8016678:	fb02 f303 	mul.w	r3, r2, r3
 801667c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8016680:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8016684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016688:	1ad3      	subs	r3, r2, r3
 801668a:	f640 2212 	movw	r2, #2578	; 0xa12
 801668e:	fb02 f303 	mul.w	r3, r2, r3
 8016692:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8016696:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801669a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801669e:	441a      	add	r2, r3
 80166a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80166a4:	441a      	add	r2, r3
 80166a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80166aa:	4997      	ldr	r1, [pc, #604]	; (8016908 <jpeg_idct_7x7+0x65c>)
 80166ac:	fb01 f303 	mul.w	r3, r1, r3
 80166b0:	4413      	add	r3, r2
 80166b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    tmp0 = z1 + z3;
 80166b6:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80166ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80166be:	4413      	add	r3, r2
 80166c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    z2 -= tmp0;
 80166c4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80166c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80166cc:	1ad3      	subs	r3, r2, r3
 80166ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 80166d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80166d6:	f642 02c6 	movw	r2, #10438	; 0x28c6
 80166da:	fb02 f303 	mul.w	r3, r2, r3
 80166de:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80166e2:	4413      	add	r3, r2
 80166e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 80166e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80166ec:	f46f 721f 	mvn.w	r2, #636	; 0x27c
 80166f0:	fb02 f203 	mul.w	r2, r2, r3
 80166f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80166f8:	4413      	add	r3, r2
 80166fa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80166fe:	4413      	add	r3, r2
 8016700:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8016704:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8016708:	4a80      	ldr	r2, [pc, #512]	; (801690c <jpeg_idct_7x7+0x660>)
 801670a:	fb02 f203 	mul.w	r2, r2, r3
 801670e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016712:	4413      	add	r3, r2
 8016714:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8016718:	4413      	add	r3, r2
 801671a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 801671e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016722:	f642 5241 	movw	r2, #11585	; 0x2d41
 8016726:	fb02 f303 	mul.w	r3, r2, r3
 801672a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801672e:	4413      	add	r3, r2
 8016730:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

    /* Odd part */

    z1 = (INT32) wsptr[1];
 8016734:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016738:	3304      	adds	r3, #4
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    z2 = (INT32) wsptr[3];
 8016740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016744:	330c      	adds	r3, #12
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    z3 = (INT32) wsptr[5];
 801674c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016750:	3314      	adds	r3, #20
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8016758:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 801675c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016760:	4413      	add	r3, r2
 8016762:	f641 52ef 	movw	r2, #7663	; 0x1def
 8016766:	fb02 f303 	mul.w	r3, r2, r3
 801676a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 801676e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8016772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016776:	1ad3      	subs	r3, r2, r3
 8016778:	f240 5273 	movw	r2, #1395	; 0x573
 801677c:	fb02 f303 	mul.w	r3, r2, r3
 8016780:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    tmp0 = tmp1 - tmp2;
 8016784:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8016788:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801678c:	1ad3      	subs	r3, r2, r3
 801678e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    tmp1 += tmp2;
 8016792:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8016796:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801679a:	4413      	add	r3, r2
 801679c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 80167a0:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80167a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80167a8:	4413      	add	r3, r2
 80167aa:	4a59      	ldr	r2, [pc, #356]	; (8016910 <jpeg_idct_7x7+0x664>)
 80167ac:	fb02 f303 	mul.w	r3, r2, r3
 80167b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    tmp1 += tmp2;
 80167b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80167b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80167bc:	4413      	add	r3, r2
 80167be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 80167c2:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80167c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80167ca:	4413      	add	r3, r2
 80167cc:	f241 32a3 	movw	r2, #5027	; 0x13a3
 80167d0:	fb02 f303 	mul.w	r3, r2, r3
 80167d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    tmp0 += z2;
 80167d8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80167dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80167e0:	4413      	add	r3, r2
 80167e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 80167e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80167ea:	f643 32de 	movw	r2, #15326	; 0x3bde
 80167ee:	fb02 f203 	mul.w	r2, r2, r3
 80167f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80167f6:	4413      	add	r3, r2
 80167f8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80167fc:	4413      	add	r3, r2
 80167fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8016802:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8016806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801680a:	4413      	add	r3, r2
 801680c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801680e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8016812:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8016816:	4413      	add	r3, r2
 8016818:	781a      	ldrb	r2, [r3, #0]
 801681a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801681e:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8016820:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8016824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016828:	1ad3      	subs	r3, r2, r3
 801682a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801682c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8016830:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8016834:	441a      	add	r2, r3
 8016836:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801683a:	3306      	adds	r3, #6
 801683c:	7812      	ldrb	r2, [r2, #0]
 801683e:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8016840:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8016844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016848:	4413      	add	r3, r2
 801684a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801684c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8016850:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8016854:	441a      	add	r2, r3
 8016856:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801685a:	3301      	adds	r3, #1
 801685c:	7812      	ldrb	r2, [r2, #0]
 801685e:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8016860:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8016864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016868:	1ad3      	subs	r3, r2, r3
 801686a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801686c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8016870:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8016874:	441a      	add	r2, r3
 8016876:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801687a:	3305      	adds	r3, #5
 801687c:	7812      	ldrb	r2, [r2, #0]
 801687e:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8016880:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8016884:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016888:	4413      	add	r3, r2
 801688a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801688c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8016890:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8016894:	441a      	add	r2, r3
 8016896:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801689a:	3302      	adds	r3, #2
 801689c:	7812      	ldrb	r2, [r2, #0]
 801689e:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80168a0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80168a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80168a8:	1ad3      	subs	r3, r2, r3
 80168aa:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80168ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80168b0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80168b4:	441a      	add	r2, r3
 80168b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80168ba:	3304      	adds	r3, #4
 80168bc:	7812      	ldrb	r2, [r2, #0]
 80168be:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 80168c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80168c4:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80168c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 80168ca:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80168ce:	441a      	add	r2, r3
 80168d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80168d4:	3303      	adds	r3, #3
 80168d6:	7812      	ldrb	r2, [r2, #0]
 80168d8:	701a      	strb	r2, [r3, #0]

    wsptr += 7;		/* advance pointer to next row */
 80168da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80168de:	331c      	adds	r3, #28
 80168e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  for (ctr = 0; ctr < 7; ctr++) {
 80168e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80168e8:	3301      	adds	r3, #1
 80168ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80168ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80168f2:	2b06      	cmp	r3, #6
 80168f4:	f77f ae90 	ble.w	8016618 <jpeg_idct_7x7+0x36c>
  }
}
 80168f8:	bf00      	nop
 80168fa:	bf00      	nop
 80168fc:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8016900:	46bd      	mov	sp, r7
 8016902:	bc90      	pop	{r4, r7}
 8016904:	4770      	bx	lr
 8016906:	bf00      	nop
 8016908:	ffffc515 	.word	0xffffc515
 801690c:	ffffb0f1 	.word	0xffffb0f1
 8016910:	ffffd3e1 	.word	0xffffd3e1

08016914 <jpeg_idct_6x6>:

GLOBAL(void)
jpeg_idct_6x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8016914:	b480      	push	{r7}
 8016916:	b0b9      	sub	sp, #228	; 0xe4
 8016918:	af00      	add	r7, sp, #0
 801691a:	60f8      	str	r0, [r7, #12]
 801691c:	60b9      	str	r1, [r7, #8]
 801691e:	607a      	str	r2, [r7, #4]
 8016920:	603b      	str	r3, [r7, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8016928:	3380      	adds	r3, #128	; 0x80
 801692a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  int workspace[6*6];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8016934:	68bb      	ldr	r3, [r7, #8]
 8016936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016938:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  wsptr = workspace;
 801693c:	f107 0314 	add.w	r3, r7, #20
 8016940:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8016944:	2300      	movs	r3, #0
 8016946:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801694a:	e105      	b.n	8016b58 <jpeg_idct_6x6+0x244>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801694c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016950:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016954:	461a      	mov	r2, r3
 8016956:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	fb03 f302 	mul.w	r3, r3, r2
 8016960:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    tmp0 <<= CONST_BITS;
 8016964:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016968:	035b      	lsls	r3, r3, #13
 801696a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 801696e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016972:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8016976:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801697a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801697e:	3340      	adds	r3, #64	; 0x40
 8016980:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016984:	461a      	mov	r2, r3
 8016986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801698a:	3380      	adds	r3, #128	; 0x80
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	fb03 f302 	mul.w	r3, r3, r2
 8016992:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8016996:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801699a:	f241 62a1 	movw	r2, #5793	; 0x16a1
 801699e:	fb02 f303 	mul.w	r3, r2, r3
 80169a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    tmp1 = tmp0 + tmp10;
 80169a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80169aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80169ae:	4413      	add	r3, r2
 80169b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 80169b4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80169b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80169bc:	1ad2      	subs	r2, r2, r3
 80169be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80169c2:	1ad3      	subs	r3, r2, r3
 80169c4:	12db      	asrs	r3, r3, #11
 80169c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80169ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80169ce:	3320      	adds	r3, #32
 80169d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169d4:	461a      	mov	r2, r3
 80169d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80169da:	3340      	adds	r3, #64	; 0x40
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	fb03 f302 	mul.w	r3, r3, r2
 80169e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80169e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80169ea:	f242 7231 	movw	r2, #10033	; 0x2731
 80169ee:	fb02 f303 	mul.w	r3, r2, r3
 80169f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    tmp10 = tmp1 + tmp0;
 80169f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80169fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80169fe:	4413      	add	r3, r2
 8016a00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    tmp12 = tmp1 - tmp0;
 8016a04:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8016a08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016a0c:	1ad3      	subs	r3, r2, r3
 8016a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8016a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016a16:	3310      	adds	r3, #16
 8016a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a1c:	461a      	mov	r2, r3
 8016a1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016a22:	3320      	adds	r3, #32
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	fb03 f302 	mul.w	r3, r3, r2
 8016a2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8016a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016a32:	3330      	adds	r3, #48	; 0x30
 8016a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a38:	461a      	mov	r2, r3
 8016a3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016a3e:	3360      	adds	r3, #96	; 0x60
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	fb03 f302 	mul.w	r3, r3, r2
 8016a46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8016a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016a4e:	3350      	adds	r3, #80	; 0x50
 8016a50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a54:	461a      	mov	r2, r3
 8016a56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016a5a:	33a0      	adds	r3, #160	; 0xa0
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	fb03 f302 	mul.w	r3, r3, r2
 8016a62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8016a66:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8016a6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016a6e:	4413      	add	r3, r2
 8016a70:	f640 32b6 	movw	r2, #2998	; 0xbb6
 8016a74:	fb02 f303 	mul.w	r3, r2, r3
 8016a78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8016a7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8016a80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016a84:	4413      	add	r3, r2
 8016a86:	035b      	lsls	r3, r3, #13
 8016a88:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8016a8c:	4413      	add	r3, r2
 8016a8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8016a92:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8016a96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016a9a:	1ad3      	subs	r3, r2, r3
 8016a9c:	035b      	lsls	r3, r3, #13
 8016a9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8016aa2:	4413      	add	r3, r2
 8016aa4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8016aa8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8016aac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016ab0:	1ad2      	subs	r2, r2, r3
 8016ab2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016ab6:	1ad3      	subs	r3, r2, r3
 8016ab8:	009b      	lsls	r3, r3, #2
 8016aba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8016abe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8016ac2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016ac6:	4413      	add	r3, r2
 8016ac8:	12da      	asrs	r2, r3, #11
 8016aca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016ace:	601a      	str	r2, [r3, #0]
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8016ad0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8016ad4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016ad8:	1ad2      	subs	r2, r2, r3
 8016ada:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016ade:	3378      	adds	r3, #120	; 0x78
 8016ae0:	12d2      	asrs	r2, r2, #11
 8016ae2:	601a      	str	r2, [r3, #0]
    wsptr[6*1] = (int) (tmp11 + tmp1);
 8016ae4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016ae8:	3318      	adds	r3, #24
 8016aea:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8016aee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8016af2:	440a      	add	r2, r1
 8016af4:	601a      	str	r2, [r3, #0]
    wsptr[6*4] = (int) (tmp11 - tmp1);
 8016af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016afa:	3360      	adds	r3, #96	; 0x60
 8016afc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8016b00:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8016b04:	1a8a      	subs	r2, r1, r2
 8016b06:	601a      	str	r2, [r3, #0]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8016b08:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8016b0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016b10:	441a      	add	r2, r3
 8016b12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016b16:	3330      	adds	r3, #48	; 0x30
 8016b18:	12d2      	asrs	r2, r2, #11
 8016b1a:	601a      	str	r2, [r3, #0]
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8016b1c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8016b20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016b24:	1ad2      	subs	r2, r2, r3
 8016b26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016b2a:	3348      	adds	r3, #72	; 0x48
 8016b2c:	12d2      	asrs	r2, r2, #11
 8016b2e:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8016b30:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016b34:	3301      	adds	r3, #1
 8016b36:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8016b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016b3e:	3302      	adds	r3, #2
 8016b40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8016b44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016b48:	3304      	adds	r3, #4
 8016b4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8016b4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016b52:	3304      	adds	r3, #4
 8016b54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8016b58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016b5c:	2b05      	cmp	r3, #5
 8016b5e:	f77f aef5 	ble.w	801694c <jpeg_idct_6x6+0x38>
  }

  /* Pass 2: process 6 rows from work array, store into output array. */

  wsptr = workspace;
 8016b62:	f107 0314 	add.w	r3, r7, #20
 8016b66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  for (ctr = 0; ctr < 6; ctr++) {
 8016b6a:	2300      	movs	r3, #0
 8016b6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8016b70:	e0f7      	b.n	8016d62 <jpeg_idct_6x6+0x44e>
    outptr = output_buf[ctr] + output_col;
 8016b72:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016b76:	009b      	lsls	r3, r3, #2
 8016b78:	683a      	ldr	r2, [r7, #0]
 8016b7a:	4413      	add	r3, r2
 8016b7c:	681a      	ldr	r2, [r3, #0]
 8016b7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016b82:	4413      	add	r3, r2
 8016b84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8016b88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	3310      	adds	r3, #16
 8016b90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    tmp0 <<= CONST_BITS;
 8016b94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016b98:	035b      	lsls	r3, r3, #13
 8016b9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    tmp2 = (INT32) wsptr[4];
 8016b9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016ba2:	3310      	adds	r3, #16
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8016baa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016bae:	f241 62a1 	movw	r2, #5793	; 0x16a1
 8016bb2:	fb02 f303 	mul.w	r3, r2, r3
 8016bb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    tmp1 = tmp0 + tmp10;
 8016bba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8016bbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016bc2:	4413      	add	r3, r2
 8016bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    tmp11 = tmp0 - tmp10 - tmp10;
 8016bc8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8016bcc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016bd0:	1ad2      	subs	r2, r2, r3
 8016bd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016bd6:	1ad3      	subs	r3, r2, r3
 8016bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    tmp10 = (INT32) wsptr[2];
 8016bdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016be0:	3308      	adds	r3, #8
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8016be8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016bec:	f242 7231 	movw	r2, #10033	; 0x2731
 8016bf0:	fb02 f303 	mul.w	r3, r2, r3
 8016bf4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    tmp10 = tmp1 + tmp0;
 8016bf8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8016bfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016c00:	4413      	add	r3, r2
 8016c02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    tmp12 = tmp1 - tmp0;
 8016c06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8016c0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016c0e:	1ad3      	subs	r3, r2, r3
 8016c10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    /* Odd part */

    z1 = (INT32) wsptr[1];
 8016c14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016c18:	3304      	adds	r3, #4
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    z2 = (INT32) wsptr[3];
 8016c20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016c24:	330c      	adds	r3, #12
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    z3 = (INT32) wsptr[5];
 8016c2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016c30:	3314      	adds	r3, #20
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8016c38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8016c3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016c40:	4413      	add	r3, r2
 8016c42:	f640 32b6 	movw	r2, #2998	; 0xbb6
 8016c46:	fb02 f303 	mul.w	r3, r2, r3
 8016c4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8016c4e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8016c52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016c56:	4413      	add	r3, r2
 8016c58:	035b      	lsls	r3, r3, #13
 8016c5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8016c5e:	4413      	add	r3, r2
 8016c60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8016c64:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8016c68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016c6c:	1ad3      	subs	r3, r2, r3
 8016c6e:	035b      	lsls	r3, r3, #13
 8016c70:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8016c74:	4413      	add	r3, r2
 8016c76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8016c7a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8016c7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016c82:	1ad2      	subs	r2, r2, r3
 8016c84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016c88:	1ad3      	subs	r3, r2, r3
 8016c8a:	035b      	lsls	r3, r3, #13
 8016c8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8016c90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8016c94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016c98:	4413      	add	r3, r2
 8016c9a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8016c9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8016ca0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8016ca4:	4413      	add	r3, r2
 8016ca6:	781a      	ldrb	r2, [r3, #0]
 8016ca8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016cac:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8016cae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8016cb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016cb6:	1ad3      	subs	r3, r2, r3
 8016cb8:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8016cba:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8016cbe:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8016cc2:	441a      	add	r2, r3
 8016cc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016cc8:	3305      	adds	r3, #5
 8016cca:	7812      	ldrb	r2, [r2, #0]
 8016ccc:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8016cce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8016cd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016cd6:	4413      	add	r3, r2
 8016cd8:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8016cda:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8016cde:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8016ce2:	441a      	add	r2, r3
 8016ce4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016ce8:	3301      	adds	r3, #1
 8016cea:	7812      	ldrb	r2, [r2, #0]
 8016cec:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8016cee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8016cf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016cf6:	1ad3      	subs	r3, r2, r3
 8016cf8:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8016cfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8016cfe:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8016d02:	441a      	add	r2, r3
 8016d04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016d08:	3304      	adds	r3, #4
 8016d0a:	7812      	ldrb	r2, [r2, #0]
 8016d0c:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8016d0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8016d12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016d16:	4413      	add	r3, r2
 8016d18:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8016d1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8016d1e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8016d22:	441a      	add	r2, r3
 8016d24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016d28:	3302      	adds	r3, #2
 8016d2a:	7812      	ldrb	r2, [r2, #0]
 8016d2c:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8016d2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8016d32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016d36:	1ad3      	subs	r3, r2, r3
 8016d38:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8016d3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8016d3e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8016d42:	441a      	add	r2, r3
 8016d44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016d48:	3303      	adds	r3, #3
 8016d4a:	7812      	ldrb	r2, [r2, #0]
 8016d4c:	701a      	strb	r2, [r3, #0]

    wsptr += 6;		/* advance pointer to next row */
 8016d4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016d52:	3318      	adds	r3, #24
 8016d54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  for (ctr = 0; ctr < 6; ctr++) {
 8016d58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016d5c:	3301      	adds	r3, #1
 8016d5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8016d62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016d66:	2b05      	cmp	r3, #5
 8016d68:	f77f af03 	ble.w	8016b72 <jpeg_idct_6x6+0x25e>
  }
}
 8016d6c:	bf00      	nop
 8016d6e:	bf00      	nop
 8016d70:	37e4      	adds	r7, #228	; 0xe4
 8016d72:	46bd      	mov	sp, r7
 8016d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d78:	4770      	bx	lr
	...

08016d7c <jpeg_idct_5x5>:

GLOBAL(void)
jpeg_idct_5x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8016d7c:	b480      	push	{r7}
 8016d7e:	b0ad      	sub	sp, #180	; 0xb4
 8016d80:	af00      	add	r7, sp, #0
 8016d82:	60f8      	str	r0, [r7, #12]
 8016d84:	60b9      	str	r1, [r7, #8]
 8016d86:	607a      	str	r2, [r7, #4]
 8016d88:	603b      	str	r3, [r7, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8016d90:	3380      	adds	r3, #128	; 0x80
 8016d92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  int workspace[5*5];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8016d9c:	68bb      	ldr	r3, [r7, #8]
 8016d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016da0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  wsptr = workspace;
 8016da4:	f107 0314 	add.w	r3, r7, #20
 8016da8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8016dac:	2300      	movs	r3, #0
 8016dae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8016db2:	e0dd      	b.n	8016f70 <jpeg_idct_5x5+0x1f4>
    /* Even part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8016db4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016db8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016dbc:	461a      	mov	r2, r3
 8016dbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	fb03 f302 	mul.w	r3, r3, r2
 8016dc8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    tmp12 <<= CONST_BITS;
 8016dcc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016dd0:	035b      	lsls	r3, r3, #13
 8016dd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 8016dd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016dda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8016dde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8016de2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016de6:	3320      	adds	r3, #32
 8016de8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016dec:	461a      	mov	r2, r3
 8016dee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016df2:	3340      	adds	r3, #64	; 0x40
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	fb03 f302 	mul.w	r3, r3, r2
 8016dfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8016dfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016e02:	3340      	adds	r3, #64	; 0x40
 8016e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e08:	461a      	mov	r2, r3
 8016e0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016e0e:	3380      	adds	r3, #128	; 0x80
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	fb03 f302 	mul.w	r3, r3, r2
 8016e16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8016e1a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8016e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016e22:	4413      	add	r3, r2
 8016e24:	f641 124c 	movw	r2, #6476	; 0x194c
 8016e28:	fb02 f303 	mul.w	r3, r2, r3
 8016e2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8016e30:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8016e34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016e38:	1ad3      	subs	r3, r2, r3
 8016e3a:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 8016e3e:	fb02 f303 	mul.w	r3, r2, r3
 8016e42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    z3 = tmp12 + z2;
 8016e46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016e4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016e4e:	4413      	add	r3, r2
 8016e50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    tmp10 = z3 + z1;
 8016e54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016e58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016e5c:	4413      	add	r3, r2
 8016e5e:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp11 = z3 - z1;
 8016e60:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016e64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016e68:	1ad3      	subs	r3, r2, r3
 8016e6a:	67bb      	str	r3, [r7, #120]	; 0x78
    tmp12 -= z2 << 2;
 8016e6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016e70:	009b      	lsls	r3, r3, #2
 8016e72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016e76:	1ad3      	subs	r3, r2, r3
 8016e78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8016e7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016e80:	3310      	adds	r3, #16
 8016e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e86:	461a      	mov	r2, r3
 8016e88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016e8c:	3320      	adds	r3, #32
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	fb03 f302 	mul.w	r3, r3, r2
 8016e94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8016e98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016e9c:	3330      	adds	r3, #48	; 0x30
 8016e9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ea2:	461a      	mov	r2, r3
 8016ea4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016ea8:	3360      	adds	r3, #96	; 0x60
 8016eaa:	681b      	ldr	r3, [r3, #0]
 8016eac:	fb03 f302 	mul.w	r3, r3, r2
 8016eb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8016eb4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016eb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016ebc:	4413      	add	r3, r2
 8016ebe:	f641 229a 	movw	r2, #6810	; 0x1a9a
 8016ec2:	fb02 f303 	mul.w	r3, r2, r3
 8016ec6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8016eca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016ece:	f241 0271 	movw	r2, #4209	; 0x1071
 8016ed2:	fb02 f303 	mul.w	r3, r2, r3
 8016ed6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016eda:	4413      	add	r3, r2
 8016edc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8016ee0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016ee4:	4a97      	ldr	r2, [pc, #604]	; (8017144 <jpeg_idct_5x5+0x3c8>)
 8016ee6:	fb02 f303 	mul.w	r3, r2, r3
 8016eea:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016eee:	4413      	add	r3, r2
 8016ef0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    /* Final output stage */

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8016ef4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016ef6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016efa:	4413      	add	r3, r2
 8016efc:	12da      	asrs	r2, r3, #11
 8016efe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016f02:	601a      	str	r2, [r3, #0]
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8016f04:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016f06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016f0a:	1ad2      	subs	r2, r2, r3
 8016f0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016f10:	3350      	adds	r3, #80	; 0x50
 8016f12:	12d2      	asrs	r2, r2, #11
 8016f14:	601a      	str	r2, [r3, #0]
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8016f16:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016f18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016f1c:	441a      	add	r2, r3
 8016f1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016f22:	3314      	adds	r3, #20
 8016f24:	12d2      	asrs	r2, r2, #11
 8016f26:	601a      	str	r2, [r3, #0]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8016f28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016f2e:	1ad2      	subs	r2, r2, r3
 8016f30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016f34:	333c      	adds	r3, #60	; 0x3c
 8016f36:	12d2      	asrs	r2, r2, #11
 8016f38:	601a      	str	r2, [r3, #0]
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8016f3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016f3e:	3328      	adds	r3, #40	; 0x28
 8016f40:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016f44:	12d2      	asrs	r2, r2, #11
 8016f46:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8016f48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016f4c:	3301      	adds	r3, #1
 8016f4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8016f52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016f56:	3302      	adds	r3, #2
 8016f58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8016f5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016f60:	3304      	adds	r3, #4
 8016f62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8016f66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016f6a:	3304      	adds	r3, #4
 8016f6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8016f70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016f74:	2b04      	cmp	r3, #4
 8016f76:	f77f af1d 	ble.w	8016db4 <jpeg_idct_5x5+0x38>
  }

  /* Pass 2: process 5 rows from work array, store into output array. */

  wsptr = workspace;
 8016f7a:	f107 0314 	add.w	r3, r7, #20
 8016f7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  for (ctr = 0; ctr < 5; ctr++) {
 8016f82:	2300      	movs	r3, #0
 8016f84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8016f88:	e0d0      	b.n	801712c <jpeg_idct_5x5+0x3b0>
    outptr = output_buf[ctr] + output_col;
 8016f8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016f8e:	009b      	lsls	r3, r3, #2
 8016f90:	683a      	ldr	r2, [r7, #0]
 8016f92:	4413      	add	r3, r2
 8016f94:	681a      	ldr	r2, [r3, #0]
 8016f96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016f9a:	4413      	add	r3, r2
 8016f9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8016fa0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	3310      	adds	r3, #16
 8016fa8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    tmp12 <<= CONST_BITS;
 8016fac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016fb0:	035b      	lsls	r3, r3, #13
 8016fb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    tmp0 = (INT32) wsptr[2];
 8016fb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016fba:	3308      	adds	r3, #8
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    tmp1 = (INT32) wsptr[4];
 8016fc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016fc6:	3310      	adds	r3, #16
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8016fce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8016fd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016fd6:	4413      	add	r3, r2
 8016fd8:	f641 124c 	movw	r2, #6476	; 0x194c
 8016fdc:	fb02 f303 	mul.w	r3, r2, r3
 8016fe0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8016fe4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8016fe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016fec:	1ad3      	subs	r3, r2, r3
 8016fee:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 8016ff2:	fb02 f303 	mul.w	r3, r2, r3
 8016ff6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    z3 = tmp12 + z2;
 8016ffa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016ffe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017002:	4413      	add	r3, r2
 8017004:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    tmp10 = z3 + z1;
 8017008:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801700c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017010:	4413      	add	r3, r2
 8017012:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp11 = z3 - z1;
 8017014:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8017018:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801701c:	1ad3      	subs	r3, r2, r3
 801701e:	67bb      	str	r3, [r7, #120]	; 0x78
    tmp12 -= z2 << 2;
 8017020:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017024:	009b      	lsls	r3, r3, #2
 8017026:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801702a:	1ad3      	subs	r3, r2, r3
 801702c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Odd part */

    z2 = (INT32) wsptr[1];
 8017030:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017034:	3304      	adds	r3, #4
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    z3 = (INT32) wsptr[3];
 801703c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017040:	330c      	adds	r3, #12
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8017048:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801704c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017050:	4413      	add	r3, r2
 8017052:	f641 229a 	movw	r2, #6810	; 0x1a9a
 8017056:	fb02 f303 	mul.w	r3, r2, r3
 801705a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 801705e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017062:	f241 0271 	movw	r2, #4209	; 0x1071
 8017066:	fb02 f303 	mul.w	r3, r2, r3
 801706a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801706e:	4413      	add	r3, r2
 8017070:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8017074:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017078:	4a32      	ldr	r2, [pc, #200]	; (8017144 <jpeg_idct_5x5+0x3c8>)
 801707a:	fb02 f303 	mul.w	r3, r2, r3
 801707e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8017082:	4413      	add	r3, r2
 8017084:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8017088:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801708a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801708e:	4413      	add	r3, r2
 8017090:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8017092:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8017096:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801709a:	4413      	add	r3, r2
 801709c:	781a      	ldrb	r2, [r3, #0]
 801709e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80170a2:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80170a4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80170a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80170aa:	1ad3      	subs	r3, r2, r3
 80170ac:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80170ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80170b2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80170b6:	441a      	add	r2, r3
 80170b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80170bc:	3304      	adds	r3, #4
 80170be:	7812      	ldrb	r2, [r2, #0]
 80170c0:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80170c2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80170c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80170c8:	4413      	add	r3, r2
 80170ca:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80170cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80170d0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80170d4:	441a      	add	r2, r3
 80170d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80170da:	3301      	adds	r3, #1
 80170dc:	7812      	ldrb	r2, [r2, #0]
 80170de:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80170e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80170e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80170e6:	1ad3      	subs	r3, r2, r3
 80170e8:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80170ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80170ee:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80170f2:	441a      	add	r2, r3
 80170f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80170f8:	3303      	adds	r3, #3
 80170fa:	7812      	ldrb	r2, [r2, #0]
 80170fc:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 80170fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017102:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8017104:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8017108:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801710c:	441a      	add	r2, r3
 801710e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8017112:	3302      	adds	r3, #2
 8017114:	7812      	ldrb	r2, [r2, #0]
 8017116:	701a      	strb	r2, [r3, #0]

    wsptr += 5;		/* advance pointer to next row */
 8017118:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801711c:	3314      	adds	r3, #20
 801711e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  for (ctr = 0; ctr < 5; ctr++) {
 8017122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017126:	3301      	adds	r3, #1
 8017128:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801712c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017130:	2b04      	cmp	r3, #4
 8017132:	f77f af2a 	ble.w	8016f8a <jpeg_idct_5x5+0x20e>
  }
}
 8017136:	bf00      	nop
 8017138:	bf00      	nop
 801713a:	37b4      	adds	r7, #180	; 0xb4
 801713c:	46bd      	mov	sp, r7
 801713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017142:	4770      	bx	lr
 8017144:	ffffba5c 	.word	0xffffba5c

08017148 <jpeg_idct_4x4>:

GLOBAL(void)
jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8017148:	b480      	push	{r7}
 801714a:	b0a3      	sub	sp, #140	; 0x8c
 801714c:	af00      	add	r7, sp, #0
 801714e:	60f8      	str	r0, [r7, #12]
 8017150:	60b9      	str	r1, [r7, #8]
 8017152:	607a      	str	r2, [r7, #4]
 8017154:	603b      	str	r3, [r7, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801715c:	3380      	adds	r3, #128	; 0x80
 801715e:	677b      	str	r3, [r7, #116]	; 0x74
  int workspace[4*4];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8017166:	68bb      	ldr	r3, [r7, #8]
 8017168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801716a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  wsptr = workspace;
 801716e:	f107 0314 	add.w	r3, r7, #20
 8017172:	67fb      	str	r3, [r7, #124]	; 0x7c
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8017174:	2300      	movs	r3, #0
 8017176:	67bb      	str	r3, [r7, #120]	; 0x78
 8017178:	e07f      	b.n	801727a <jpeg_idct_4x4+0x132>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801717a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801717e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017182:	461a      	mov	r2, r3
 8017184:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	fb03 f302 	mul.w	r3, r3, r2
 801718e:	66fb      	str	r3, [r7, #108]	; 0x6c
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8017190:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017194:	3320      	adds	r3, #32
 8017196:	f9b3 3000 	ldrsh.w	r3, [r3]
 801719a:	461a      	mov	r2, r3
 801719c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80171a0:	3340      	adds	r3, #64	; 0x40
 80171a2:	681b      	ldr	r3, [r3, #0]
 80171a4:	fb03 f302 	mul.w	r3, r3, r2
 80171a8:	66bb      	str	r3, [r7, #104]	; 0x68
    
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 80171aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80171ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80171ae:	4413      	add	r3, r2
 80171b0:	009b      	lsls	r3, r3, #2
 80171b2:	667b      	str	r3, [r7, #100]	; 0x64
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 80171b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80171b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80171b8:	1ad3      	subs	r3, r2, r3
 80171ba:	009b      	lsls	r3, r3, #2
 80171bc:	663b      	str	r3, [r7, #96]	; 0x60

    /* Odd part */
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80171be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80171c2:	3310      	adds	r3, #16
 80171c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171c8:	461a      	mov	r2, r3
 80171ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80171ce:	3320      	adds	r3, #32
 80171d0:	681b      	ldr	r3, [r3, #0]
 80171d2:	fb03 f302 	mul.w	r3, r3, r2
 80171d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80171d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80171dc:	3330      	adds	r3, #48	; 0x30
 80171de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171e2:	461a      	mov	r2, r3
 80171e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80171e8:	3360      	adds	r3, #96	; 0x60
 80171ea:	681b      	ldr	r3, [r3, #0]
 80171ec:	fb03 f302 	mul.w	r3, r3, r2
 80171f0:	65bb      	str	r3, [r7, #88]	; 0x58

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 80171f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80171f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80171f6:	4413      	add	r3, r2
 80171f8:	f241 1251 	movw	r2, #4433	; 0x1151
 80171fc:	fb02 f303 	mul.w	r3, r2, r3
 8017200:	657b      	str	r3, [r7, #84]	; 0x54
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8017202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017204:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8017208:	657b      	str	r3, [r7, #84]	; 0x54
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 801720a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801720c:	f641 027e 	movw	r2, #6270	; 0x187e
 8017210:	fb02 f203 	mul.w	r2, r2, r3
 8017214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017216:	4413      	add	r3, r2
 8017218:	12db      	asrs	r3, r3, #11
 801721a:	66fb      	str	r3, [r7, #108]	; 0x6c
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 801721c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801721e:	4a58      	ldr	r2, [pc, #352]	; (8017380 <jpeg_idct_4x4+0x238>)
 8017220:	fb02 f203 	mul.w	r2, r2, r3
 8017224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017226:	4413      	add	r3, r2
 8017228:	12db      	asrs	r3, r3, #11
 801722a:	66bb      	str	r3, [r7, #104]	; 0x68
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[4*0] = (int) (tmp10 + tmp0);
 801722c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801722e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017230:	441a      	add	r2, r3
 8017232:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017234:	601a      	str	r2, [r3, #0]
    wsptr[4*3] = (int) (tmp10 - tmp0);
 8017236:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017238:	3330      	adds	r3, #48	; 0x30
 801723a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801723c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801723e:	1a8a      	subs	r2, r1, r2
 8017240:	601a      	str	r2, [r3, #0]
    wsptr[4*1] = (int) (tmp12 + tmp2);
 8017242:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017244:	3310      	adds	r3, #16
 8017246:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8017248:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801724a:	440a      	add	r2, r1
 801724c:	601a      	str	r2, [r3, #0]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 801724e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017250:	3320      	adds	r3, #32
 8017252:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8017254:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017256:	1a8a      	subs	r2, r1, r2
 8017258:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 801725a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801725c:	3301      	adds	r3, #1
 801725e:	67bb      	str	r3, [r7, #120]	; 0x78
 8017260:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017264:	3302      	adds	r3, #2
 8017266:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801726a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801726e:	3304      	adds	r3, #4
 8017270:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8017274:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017276:	3304      	adds	r3, #4
 8017278:	67fb      	str	r3, [r7, #124]	; 0x7c
 801727a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801727c:	2b03      	cmp	r3, #3
 801727e:	f77f af7c 	ble.w	801717a <jpeg_idct_4x4+0x32>
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 8017282:	f107 0314 	add.w	r3, r7, #20
 8017286:	67fb      	str	r3, [r7, #124]	; 0x7c
  for (ctr = 0; ctr < 4; ctr++) {
 8017288:	2300      	movs	r3, #0
 801728a:	67bb      	str	r3, [r7, #120]	; 0x78
 801728c:	e06e      	b.n	801736c <jpeg_idct_4x4+0x224>
    outptr = output_buf[ctr] + output_col;
 801728e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017290:	009b      	lsls	r3, r3, #2
 8017292:	683a      	ldr	r2, [r7, #0]
 8017294:	4413      	add	r3, r2
 8017296:	681a      	ldr	r2, [r3, #0]
 8017298:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801729c:	4413      	add	r3, r2
 801729e:	673b      	str	r3, [r7, #112]	; 0x70

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80172a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	3310      	adds	r3, #16
 80172a6:	66fb      	str	r3, [r7, #108]	; 0x6c
    tmp2 = (INT32) wsptr[2];
 80172a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80172aa:	3308      	adds	r3, #8
 80172ac:	681b      	ldr	r3, [r3, #0]
 80172ae:	66bb      	str	r3, [r7, #104]	; 0x68

    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 80172b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80172b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80172b4:	4413      	add	r3, r2
 80172b6:	035b      	lsls	r3, r3, #13
 80172b8:	667b      	str	r3, [r7, #100]	; 0x64
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 80172ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80172bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80172be:	1ad3      	subs	r3, r2, r3
 80172c0:	035b      	lsls	r3, r3, #13
 80172c2:	663b      	str	r3, [r7, #96]	; 0x60

    /* Odd part */
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
 80172c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80172c6:	3304      	adds	r3, #4
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    z3 = (INT32) wsptr[3];
 80172cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80172ce:	330c      	adds	r3, #12
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	65bb      	str	r3, [r7, #88]	; 0x58

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80172d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80172d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80172d8:	4413      	add	r3, r2
 80172da:	f241 1251 	movw	r2, #4433	; 0x1151
 80172de:	fb02 f303 	mul.w	r3, r2, r3
 80172e2:	657b      	str	r3, [r7, #84]	; 0x54
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 80172e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80172e6:	f641 027e 	movw	r2, #6270	; 0x187e
 80172ea:	fb02 f303 	mul.w	r3, r2, r3
 80172ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80172f0:	4413      	add	r3, r2
 80172f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 80172f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80172f6:	4a22      	ldr	r2, [pc, #136]	; (8017380 <jpeg_idct_4x4+0x238>)
 80172f8:	fb02 f303 	mul.w	r3, r2, r3
 80172fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80172fe:	4413      	add	r3, r2
 8017300:	66bb      	str	r3, [r7, #104]	; 0x68

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8017302:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017306:	4413      	add	r3, r2
 8017308:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801730a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801730e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8017310:	4413      	add	r3, r2
 8017312:	781a      	ldrb	r2, [r3, #0]
 8017314:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017316:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8017318:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801731a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801731c:	1ad3      	subs	r3, r2, r3
 801731e:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8017320:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8017324:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8017326:	441a      	add	r2, r3
 8017328:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801732a:	3303      	adds	r3, #3
 801732c:	7812      	ldrb	r2, [r2, #0]
 801732e:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8017330:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017332:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017334:	4413      	add	r3, r2
 8017336:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8017338:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801733c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801733e:	441a      	add	r2, r3
 8017340:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017342:	3301      	adds	r3, #1
 8017344:	7812      	ldrb	r2, [r2, #0]
 8017346:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8017348:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801734a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801734c:	1ad3      	subs	r3, r2, r3
 801734e:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8017350:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8017354:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8017356:	441a      	add	r2, r3
 8017358:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801735a:	3302      	adds	r3, #2
 801735c:	7812      	ldrb	r2, [r2, #0]
 801735e:	701a      	strb	r2, [r3, #0]

    wsptr += 4;		/* advance pointer to next row */
 8017360:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017362:	3310      	adds	r3, #16
 8017364:	67fb      	str	r3, [r7, #124]	; 0x7c
  for (ctr = 0; ctr < 4; ctr++) {
 8017366:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017368:	3301      	adds	r3, #1
 801736a:	67bb      	str	r3, [r7, #120]	; 0x78
 801736c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801736e:	2b03      	cmp	r3, #3
 8017370:	dd8d      	ble.n	801728e <jpeg_idct_4x4+0x146>
  }
}
 8017372:	bf00      	nop
 8017374:	bf00      	nop
 8017376:	378c      	adds	r7, #140	; 0x8c
 8017378:	46bd      	mov	sp, r7
 801737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801737e:	4770      	bx	lr
 8017380:	ffffc4df 	.word	0xffffc4df

08017384 <jpeg_idct_3x3>:

GLOBAL(void)
jpeg_idct_3x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8017384:	b480      	push	{r7}
 8017386:	b099      	sub	sp, #100	; 0x64
 8017388:	af00      	add	r7, sp, #0
 801738a:	60f8      	str	r0, [r7, #12]
 801738c:	60b9      	str	r1, [r7, #8]
 801738e:	607a      	str	r2, [r7, #4]
 8017390:	603b      	str	r3, [r7, #0]
  INT32 tmp0, tmp2, tmp10, tmp12;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8017392:	68fb      	ldr	r3, [r7, #12]
 8017394:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8017398:	3380      	adds	r3, #128	; 0x80
 801739a:	64fb      	str	r3, [r7, #76]	; 0x4c
  int workspace[3*3];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	65fb      	str	r3, [r7, #92]	; 0x5c
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80173a0:	68bb      	ldr	r3, [r7, #8]
 80173a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80173a4:	65bb      	str	r3, [r7, #88]	; 0x58
  wsptr = workspace;
 80173a6:	f107 0314 	add.w	r3, r7, #20
 80173aa:	657b      	str	r3, [r7, #84]	; 0x54
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80173ac:	2300      	movs	r3, #0
 80173ae:	653b      	str	r3, [r7, #80]	; 0x50
 80173b0:	e059      	b.n	8017466 <jpeg_idct_3x3+0xe2>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80173b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80173b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80173b8:	461a      	mov	r2, r3
 80173ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80173bc:	681b      	ldr	r3, [r3, #0]
 80173be:	fb03 f302 	mul.w	r3, r3, r2
 80173c2:	647b      	str	r3, [r7, #68]	; 0x44
    tmp0 <<= CONST_BITS;
 80173c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80173c6:	035b      	lsls	r3, r3, #13
 80173c8:	647b      	str	r3, [r7, #68]	; 0x44
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 80173ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80173cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80173d0:	647b      	str	r3, [r7, #68]	; 0x44
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80173d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80173d4:	3320      	adds	r3, #32
 80173d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80173da:	461a      	mov	r2, r3
 80173dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80173de:	3340      	adds	r3, #64	; 0x40
 80173e0:	681b      	ldr	r3, [r3, #0]
 80173e2:	fb03 f302 	mul.w	r3, r3, r2
 80173e6:	643b      	str	r3, [r7, #64]	; 0x40
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80173e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80173ea:	f241 62a1 	movw	r2, #5793	; 0x16a1
 80173ee:	fb02 f303 	mul.w	r3, r2, r3
 80173f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    tmp10 = tmp0 + tmp12;
 80173f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80173f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80173f8:	4413      	add	r3, r2
 80173fa:	63bb      	str	r3, [r7, #56]	; 0x38
    tmp2 = tmp0 - tmp12 - tmp12;
 80173fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80173fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017400:	1ad2      	subs	r2, r2, r3
 8017402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017404:	1ad3      	subs	r3, r2, r3
 8017406:	643b      	str	r3, [r7, #64]	; 0x40

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8017408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801740a:	3310      	adds	r3, #16
 801740c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017410:	461a      	mov	r2, r3
 8017412:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017414:	3320      	adds	r3, #32
 8017416:	681b      	ldr	r3, [r3, #0]
 8017418:	fb03 f302 	mul.w	r3, r3, r2
 801741c:	63fb      	str	r3, [r7, #60]	; 0x3c
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 801741e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017420:	f242 7231 	movw	r2, #10033	; 0x2731
 8017424:	fb02 f303 	mul.w	r3, r2, r3
 8017428:	647b      	str	r3, [r7, #68]	; 0x44

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801742a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801742c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801742e:	4413      	add	r3, r2
 8017430:	12da      	asrs	r2, r3, #11
 8017432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017434:	601a      	str	r2, [r3, #0]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8017436:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801743a:	1ad2      	subs	r2, r2, r3
 801743c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801743e:	3318      	adds	r3, #24
 8017440:	12d2      	asrs	r2, r2, #11
 8017442:	601a      	str	r2, [r3, #0]
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8017444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017446:	330c      	adds	r3, #12
 8017448:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801744a:	12d2      	asrs	r2, r2, #11
 801744c:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 801744e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017450:	3301      	adds	r3, #1
 8017452:	653b      	str	r3, [r7, #80]	; 0x50
 8017454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017456:	3302      	adds	r3, #2
 8017458:	65fb      	str	r3, [r7, #92]	; 0x5c
 801745a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801745c:	3304      	adds	r3, #4
 801745e:	65bb      	str	r3, [r7, #88]	; 0x58
 8017460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017462:	3304      	adds	r3, #4
 8017464:	657b      	str	r3, [r7, #84]	; 0x54
 8017466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017468:	2b02      	cmp	r3, #2
 801746a:	dda2      	ble.n	80173b2 <jpeg_idct_3x3+0x2e>
  }

  /* Pass 2: process 3 rows from work array, store into output array. */

  wsptr = workspace;
 801746c:	f107 0314 	add.w	r3, r7, #20
 8017470:	657b      	str	r3, [r7, #84]	; 0x54
  for (ctr = 0; ctr < 3; ctr++) {
 8017472:	2300      	movs	r3, #0
 8017474:	653b      	str	r3, [r7, #80]	; 0x50
 8017476:	e053      	b.n	8017520 <jpeg_idct_3x3+0x19c>
    outptr = output_buf[ctr] + output_col;
 8017478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801747a:	009b      	lsls	r3, r3, #2
 801747c:	683a      	ldr	r2, [r7, #0]
 801747e:	4413      	add	r3, r2
 8017480:	681a      	ldr	r2, [r3, #0]
 8017482:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017484:	4413      	add	r3, r2
 8017486:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8017488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	3310      	adds	r3, #16
 801748e:	647b      	str	r3, [r7, #68]	; 0x44
    tmp0 <<= CONST_BITS;
 8017490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017492:	035b      	lsls	r3, r3, #13
 8017494:	647b      	str	r3, [r7, #68]	; 0x44
    tmp2 = (INT32) wsptr[2];
 8017496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017498:	3308      	adds	r3, #8
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	643b      	str	r3, [r7, #64]	; 0x40
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801749e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80174a0:	f241 62a1 	movw	r2, #5793	; 0x16a1
 80174a4:	fb02 f303 	mul.w	r3, r2, r3
 80174a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    tmp10 = tmp0 + tmp12;
 80174aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80174ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80174ae:	4413      	add	r3, r2
 80174b0:	63bb      	str	r3, [r7, #56]	; 0x38
    tmp2 = tmp0 - tmp12 - tmp12;
 80174b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80174b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80174b6:	1ad2      	subs	r2, r2, r3
 80174b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80174ba:	1ad3      	subs	r3, r2, r3
 80174bc:	643b      	str	r3, [r7, #64]	; 0x40

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
 80174be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80174c0:	3304      	adds	r3, #4
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80174c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80174c8:	f242 7231 	movw	r2, #10033	; 0x2731
 80174cc:	fb02 f303 	mul.w	r3, r2, r3
 80174d0:	647b      	str	r3, [r7, #68]	; 0x44

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80174d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80174d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80174d6:	4413      	add	r3, r2
 80174d8:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80174da:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80174de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80174e0:	4413      	add	r3, r2
 80174e2:	781a      	ldrb	r2, [r3, #0]
 80174e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80174e6:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80174e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80174ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80174ec:	1ad3      	subs	r3, r2, r3
 80174ee:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80174f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80174f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80174f6:	441a      	add	r2, r3
 80174f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80174fa:	3302      	adds	r3, #2
 80174fc:	7812      	ldrb	r2, [r2, #0]
 80174fe:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 8017500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017502:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8017504:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 8017508:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801750a:	441a      	add	r2, r3
 801750c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801750e:	3301      	adds	r3, #1
 8017510:	7812      	ldrb	r2, [r2, #0]
 8017512:	701a      	strb	r2, [r3, #0]

    wsptr += 3;		/* advance pointer to next row */
 8017514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017516:	330c      	adds	r3, #12
 8017518:	657b      	str	r3, [r7, #84]	; 0x54
  for (ctr = 0; ctr < 3; ctr++) {
 801751a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801751c:	3301      	adds	r3, #1
 801751e:	653b      	str	r3, [r7, #80]	; 0x50
 8017520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017522:	2b02      	cmp	r3, #2
 8017524:	dda8      	ble.n	8017478 <jpeg_idct_3x3+0xf4>
  }
}
 8017526:	bf00      	nop
 8017528:	bf00      	nop
 801752a:	3764      	adds	r7, #100	; 0x64
 801752c:	46bd      	mov	sp, r7
 801752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017532:	4770      	bx	lr

08017534 <jpeg_idct_2x2>:

GLOBAL(void)
jpeg_idct_2x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8017534:	b480      	push	{r7}
 8017536:	b08f      	sub	sp, #60	; 0x3c
 8017538:	af00      	add	r7, sp, #0
 801753a:	60f8      	str	r0, [r7, #12]
 801753c:	60b9      	str	r1, [r7, #8]
 801753e:	607a      	str	r2, [r7, #4]
 8017540:	603b      	str	r3, [r7, #0]
  INT32 tmp0, tmp1, tmp2, tmp3, tmp4, tmp5;
  ISLOW_MULT_TYPE * quantptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8017548:	3380      	adds	r3, #128	; 0x80
 801754a:	637b      	str	r3, [r7, #52]	; 0x34
  SHIFT_TEMPS

  /* Pass 1: process columns from input. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801754c:	68bb      	ldr	r3, [r7, #8]
 801754e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017550:	633b      	str	r3, [r7, #48]	; 0x30

  /* Column 0 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017558:	461a      	mov	r2, r3
 801755a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	fb03 f302 	mul.w	r3, r3, r2
 8017562:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	3310      	adds	r3, #16
 8017568:	f9b3 3000 	ldrsh.w	r3, [r3]
 801756c:	461a      	mov	r2, r3
 801756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017570:	3320      	adds	r3, #32
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	fb03 f302 	mul.w	r3, r3, r2
 8017578:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Add fudge factor here for final descale. */
  tmp4 += ONE << 2;
 801757a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801757c:	3304      	adds	r3, #4
 801757e:	62fb      	str	r3, [r7, #44]	; 0x2c

  tmp0 = tmp4 + tmp5;
 8017580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017584:	4413      	add	r3, r2
 8017586:	627b      	str	r3, [r7, #36]	; 0x24
  tmp2 = tmp4 - tmp5;
 8017588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801758a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801758c:	1ad3      	subs	r3, r2, r3
 801758e:	623b      	str	r3, [r7, #32]

  /* Column 1 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	3302      	adds	r3, #2
 8017594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017598:	461a      	mov	r2, r3
 801759a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801759c:	3304      	adds	r3, #4
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	fb03 f302 	mul.w	r3, r3, r2
 80175a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	3312      	adds	r3, #18
 80175aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80175ae:	461a      	mov	r2, r3
 80175b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175b2:	3324      	adds	r3, #36	; 0x24
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	fb03 f302 	mul.w	r3, r3, r2
 80175ba:	62bb      	str	r3, [r7, #40]	; 0x28

  tmp1 = tmp4 + tmp5;
 80175bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80175be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175c0:	4413      	add	r3, r2
 80175c2:	61fb      	str	r3, [r7, #28]
  tmp3 = tmp4 - tmp5;
 80175c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80175c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175c8:	1ad3      	subs	r3, r2, r3
 80175ca:	61bb      	str	r3, [r7, #24]

  /* Pass 2: process 2 rows, store into output array. */

  /* Row 0 */
  outptr = output_buf[0] + output_col;
 80175cc:	683b      	ldr	r3, [r7, #0]
 80175ce:	681a      	ldr	r2, [r3, #0]
 80175d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80175d2:	4413      	add	r3, r2
 80175d4:	617b      	str	r3, [r7, #20]

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 80175d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80175d8:	69fb      	ldr	r3, [r7, #28]
 80175da:	4413      	add	r3, r2
 80175dc:	10db      	asrs	r3, r3, #3
 80175de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80175e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80175e4:	4413      	add	r3, r2
 80175e6:	781a      	ldrb	r2, [r3, #0]
 80175e8:	697b      	ldr	r3, [r7, #20]
 80175ea:	701a      	strb	r2, [r3, #0]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 80175ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80175ee:	69fb      	ldr	r3, [r7, #28]
 80175f0:	1ad3      	subs	r3, r2, r3
 80175f2:	10db      	asrs	r3, r3, #3
 80175f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80175f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80175fa:	441a      	add	r2, r3
 80175fc:	697b      	ldr	r3, [r7, #20]
 80175fe:	3301      	adds	r3, #1
 8017600:	7812      	ldrb	r2, [r2, #0]
 8017602:	701a      	strb	r2, [r3, #0]

  /* Row 1 */
  outptr = output_buf[1] + output_col;
 8017604:	683b      	ldr	r3, [r7, #0]
 8017606:	3304      	adds	r3, #4
 8017608:	681a      	ldr	r2, [r3, #0]
 801760a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801760c:	4413      	add	r3, r2
 801760e:	617b      	str	r3, [r7, #20]

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8017610:	6a3a      	ldr	r2, [r7, #32]
 8017612:	69bb      	ldr	r3, [r7, #24]
 8017614:	4413      	add	r3, r2
 8017616:	10db      	asrs	r3, r3, #3
 8017618:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801761c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801761e:	4413      	add	r3, r2
 8017620:	781a      	ldrb	r2, [r3, #0]
 8017622:	697b      	ldr	r3, [r7, #20]
 8017624:	701a      	strb	r2, [r3, #0]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8017626:	6a3a      	ldr	r2, [r7, #32]
 8017628:	69bb      	ldr	r3, [r7, #24]
 801762a:	1ad3      	subs	r3, r2, r3
 801762c:	10db      	asrs	r3, r3, #3
 801762e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8017632:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017634:	441a      	add	r2, r3
 8017636:	697b      	ldr	r3, [r7, #20]
 8017638:	3301      	adds	r3, #1
 801763a:	7812      	ldrb	r2, [r2, #0]
 801763c:	701a      	strb	r2, [r3, #0]
}
 801763e:	bf00      	nop
 8017640:	373c      	adds	r7, #60	; 0x3c
 8017642:	46bd      	mov	sp, r7
 8017644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017648:	4770      	bx	lr

0801764a <jpeg_idct_1x1>:

GLOBAL(void)
jpeg_idct_1x1 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801764a:	b480      	push	{r7}
 801764c:	b089      	sub	sp, #36	; 0x24
 801764e:	af00      	add	r7, sp, #0
 8017650:	60f8      	str	r0, [r7, #12]
 8017652:	60b9      	str	r1, [r7, #8]
 8017654:	607a      	str	r2, [r7, #4]
 8017656:	603b      	str	r3, [r7, #0]
  int dcval;
  ISLOW_MULT_TYPE * quantptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801765e:	3380      	adds	r3, #128	; 0x80
 8017660:	61fb      	str	r3, [r7, #28]
  SHIFT_TEMPS

  /* 1x1 is trivial: just take the DC coefficient divided by 8. */
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8017662:	68bb      	ldr	r3, [r7, #8]
 8017664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017666:	61bb      	str	r3, [r7, #24]
  dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801766e:	461a      	mov	r2, r3
 8017670:	69bb      	ldr	r3, [r7, #24]
 8017672:	681b      	ldr	r3, [r3, #0]
 8017674:	fb03 f302 	mul.w	r3, r3, r2
 8017678:	617b      	str	r3, [r7, #20]
  dcval = (int) DESCALE((INT32) dcval, 3);
 801767a:	697b      	ldr	r3, [r7, #20]
 801767c:	3304      	adds	r3, #4
 801767e:	10db      	asrs	r3, r3, #3
 8017680:	617b      	str	r3, [r7, #20]

  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 8017682:	697b      	ldr	r3, [r7, #20]
 8017684:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8017688:	69fa      	ldr	r2, [r7, #28]
 801768a:	441a      	add	r2, r3
 801768c:	683b      	ldr	r3, [r7, #0]
 801768e:	6819      	ldr	r1, [r3, #0]
 8017690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017692:	440b      	add	r3, r1
 8017694:	7812      	ldrb	r2, [r2, #0]
 8017696:	701a      	strb	r2, [r3, #0]
}
 8017698:	bf00      	nop
 801769a:	3724      	adds	r7, #36	; 0x24
 801769c:	46bd      	mov	sp, r7
 801769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176a2:	4770      	bx	lr

080176a4 <jpeg_idct_9x9>:

GLOBAL(void)
jpeg_idct_9x9 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80176a4:	b490      	push	{r4, r7}
 80176a6:	b0e0      	sub	sp, #384	; 0x180
 80176a8:	af00      	add	r7, sp, #0
 80176aa:	f107 040c 	add.w	r4, r7, #12
 80176ae:	6020      	str	r0, [r4, #0]
 80176b0:	f107 0008 	add.w	r0, r7, #8
 80176b4:	6001      	str	r1, [r0, #0]
 80176b6:	1d39      	adds	r1, r7, #4
 80176b8:	600a      	str	r2, [r1, #0]
 80176ba:	463a      	mov	r2, r7
 80176bc:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80176be:	f107 030c 	add.w	r3, r7, #12
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80176c8:	3380      	adds	r3, #128	; 0x80
 80176ca:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  int workspace[8*9];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 80176ce:	1d3b      	adds	r3, r7, #4
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80176d6:	f107 0308 	add.w	r3, r7, #8
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80176de:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  wsptr = workspace;
 80176e2:	f107 0314 	add.w	r3, r7, #20
 80176e6:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80176ea:	2300      	movs	r3, #0
 80176ec:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80176f0:	e1a5      	b.n	8017a3e <jpeg_idct_9x9+0x39a>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80176f2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80176f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80176fa:	461a      	mov	r2, r3
 80176fc:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	fb03 f302 	mul.w	r3, r3, r2
 8017706:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp0 <<= CONST_BITS;
 801770a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801770e:	035b      	lsls	r3, r3, #13
 8017710:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8017714:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8017718:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801771c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8017720:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8017724:	3320      	adds	r3, #32
 8017726:	f9b3 3000 	ldrsh.w	r3, [r3]
 801772a:	461a      	mov	r2, r3
 801772c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8017730:	3340      	adds	r3, #64	; 0x40
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	fb03 f302 	mul.w	r3, r3, r2
 8017738:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801773c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8017740:	3340      	adds	r3, #64	; 0x40
 8017742:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017746:	461a      	mov	r2, r3
 8017748:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801774c:	3380      	adds	r3, #128	; 0x80
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	fb03 f302 	mul.w	r3, r3, r2
 8017754:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8017758:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801775c:	3360      	adds	r3, #96	; 0x60
 801775e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017762:	461a      	mov	r2, r3
 8017764:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8017768:	33c0      	adds	r3, #192	; 0xc0
 801776a:	681b      	ldr	r3, [r3, #0]
 801776c:	fb03 f302 	mul.w	r3, r3, r2
 8017770:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8017774:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017778:	f241 62a1 	movw	r2, #5793	; 0x16a1
 801777c:	fb02 f303 	mul.w	r3, r2, r3
 8017780:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    tmp1 = tmp0 + tmp3;
 8017784:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8017788:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801778c:	4413      	add	r3, r2
 801778e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    tmp2 = tmp0 - tmp3 - tmp3;
 8017792:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8017796:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801779a:	1ad2      	subs	r2, r2, r3
 801779c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80177a0:	1ad3      	subs	r3, r2, r3
 80177a2:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 80177a6:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80177aa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80177ae:	1ad3      	subs	r3, r2, r3
 80177b0:	f241 62a1 	movw	r2, #5793	; 0x16a1
 80177b4:	fb02 f303 	mul.w	r3, r2, r3
 80177b8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp11 = tmp2 + tmp0;
 80177bc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80177c0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80177c4:	4413      	add	r3, r2
 80177c6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    tmp14 = tmp2 - tmp0 - tmp0;
 80177ca:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80177ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80177d2:	1ad2      	subs	r2, r2, r3
 80177d4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80177d8:	1ad3      	subs	r3, r2, r3
 80177da:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 80177de:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80177e2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80177e6:	4413      	add	r3, r2
 80177e8:	f642 2287 	movw	r2, #10887	; 0x2a87
 80177ec:	fb02 f303 	mul.w	r3, r2, r3
 80177f0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 80177f4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80177f8:	f242 22ab 	movw	r2, #8875	; 0x22ab
 80177fc:	fb02 f303 	mul.w	r3, r2, r3
 8017800:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 8017804:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8017808:	f240 72dc 	movw	r2, #2012	; 0x7dc
 801780c:	fb02 f303 	mul.w	r3, r2, r3
 8017810:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

    tmp10 = tmp1 + tmp0 - tmp3;
 8017814:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8017818:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801781c:	441a      	add	r2, r3
 801781e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8017822:	1ad3      	subs	r3, r2, r3
 8017824:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    tmp12 = tmp1 - tmp0 + tmp2;
 8017828:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 801782c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8017830:	1ad3      	subs	r3, r2, r3
 8017832:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8017836:	4413      	add	r3, r2
 8017838:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    tmp13 = tmp1 - tmp2 + tmp3;
 801783c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8017840:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8017844:	1ad3      	subs	r3, r2, r3
 8017846:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801784a:	4413      	add	r3, r2
 801784c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8017850:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8017854:	3310      	adds	r3, #16
 8017856:	f9b3 3000 	ldrsh.w	r3, [r3]
 801785a:	461a      	mov	r2, r3
 801785c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8017860:	3320      	adds	r3, #32
 8017862:	681b      	ldr	r3, [r3, #0]
 8017864:	fb03 f302 	mul.w	r3, r3, r2
 8017868:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801786c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8017870:	3330      	adds	r3, #48	; 0x30
 8017872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017876:	461a      	mov	r2, r3
 8017878:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801787c:	3360      	adds	r3, #96	; 0x60
 801787e:	681b      	ldr	r3, [r3, #0]
 8017880:	fb03 f302 	mul.w	r3, r3, r2
 8017884:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8017888:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801788c:	3350      	adds	r3, #80	; 0x50
 801788e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017892:	461a      	mov	r2, r3
 8017894:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8017898:	33a0      	adds	r3, #160	; 0xa0
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	fb03 f302 	mul.w	r3, r3, r2
 80178a0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80178a4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80178a8:	3370      	adds	r3, #112	; 0x70
 80178aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80178ae:	461a      	mov	r2, r3
 80178b0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80178b4:	33e0      	adds	r3, #224	; 0xe0
 80178b6:	681b      	ldr	r3, [r3, #0]
 80178b8:	fb03 f302 	mul.w	r3, r3, r2
 80178bc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 80178c0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80178c4:	4a64      	ldr	r2, [pc, #400]	; (8017a58 <jpeg_idct_9x9+0x3b4>)
 80178c6:	fb02 f303 	mul.w	r3, r2, r3
 80178ca:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 80178ce:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80178d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80178d6:	4413      	add	r3, r2
 80178d8:	f641 5217 	movw	r2, #7447	; 0x1d17
 80178dc:	fb02 f303 	mul.w	r3, r2, r3
 80178e0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 80178e4:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80178e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80178ec:	4413      	add	r3, r2
 80178ee:	f640 727a 	movw	r2, #3962	; 0xf7a
 80178f2:	fb02 f303 	mul.w	r3, r2, r3
 80178f6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    tmp0 = tmp2 + tmp3 - z2;
 80178fa:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80178fe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8017902:	441a      	add	r2, r3
 8017904:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8017908:	1ad3      	subs	r3, r2, r3
 801790a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 801790e:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8017912:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8017916:	1ad3      	subs	r3, r2, r3
 8017918:	f642 4291 	movw	r2, #11409	; 0x2c91
 801791c:	fb02 f303 	mul.w	r3, r2, r3
 8017920:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    tmp2 += z2 - tmp1;
 8017924:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8017928:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801792c:	1ad3      	subs	r3, r2, r3
 801792e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8017932:	4413      	add	r3, r2
 8017934:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    tmp3 += z2 + tmp1;
 8017938:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 801793c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8017940:	4413      	add	r3, r2
 8017942:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8017946:	4413      	add	r3, r2
 8017948:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 801794c:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8017950:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017954:	1ad2      	subs	r2, r2, r3
 8017956:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801795a:	1ad3      	subs	r3, r2, r3
 801795c:	f242 7231 	movw	r2, #10033	; 0x2731
 8017960:	fb02 f303 	mul.w	r3, r2, r3
 8017964:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8017968:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801796c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8017970:	4413      	add	r3, r2
 8017972:	12da      	asrs	r2, r3, #11
 8017974:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8017978:	601a      	str	r2, [r3, #0]
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801797a:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801797e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8017982:	1ad2      	subs	r2, r2, r3
 8017984:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8017988:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801798c:	12d2      	asrs	r2, r2, #11
 801798e:	601a      	str	r2, [r3, #0]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8017990:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8017994:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8017998:	441a      	add	r2, r3
 801799a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801799e:	3320      	adds	r3, #32
 80179a0:	12d2      	asrs	r2, r2, #11
 80179a2:	601a      	str	r2, [r3, #0]
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80179a4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80179a8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80179ac:	1ad2      	subs	r2, r2, r3
 80179ae:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80179b2:	33e0      	adds	r3, #224	; 0xe0
 80179b4:	12d2      	asrs	r2, r2, #11
 80179b6:	601a      	str	r2, [r3, #0]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80179b8:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80179bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80179c0:	441a      	add	r2, r3
 80179c2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80179c6:	3340      	adds	r3, #64	; 0x40
 80179c8:	12d2      	asrs	r2, r2, #11
 80179ca:	601a      	str	r2, [r3, #0]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80179cc:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80179d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80179d4:	1ad2      	subs	r2, r2, r3
 80179d6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80179da:	33c0      	adds	r3, #192	; 0xc0
 80179dc:	12d2      	asrs	r2, r2, #11
 80179de:	601a      	str	r2, [r3, #0]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp13 + tmp3, CONST_BITS-PASS1_BITS);
 80179e0:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80179e4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80179e8:	441a      	add	r2, r3
 80179ea:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80179ee:	3360      	adds	r3, #96	; 0x60
 80179f0:	12d2      	asrs	r2, r2, #11
 80179f2:	601a      	str	r2, [r3, #0]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp13 - tmp3, CONST_BITS-PASS1_BITS);
 80179f4:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80179f8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80179fc:	1ad2      	subs	r2, r2, r3
 80179fe:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8017a02:	33a0      	adds	r3, #160	; 0xa0
 8017a04:	12d2      	asrs	r2, r2, #11
 8017a06:	601a      	str	r2, [r3, #0]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp14, CONST_BITS-PASS1_BITS);
 8017a08:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8017a0c:	3380      	adds	r3, #128	; 0x80
 8017a0e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8017a12:	12d2      	asrs	r2, r2, #11
 8017a14:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8017a16:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8017a1a:	3301      	adds	r3, #1
 8017a1c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8017a20:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8017a24:	3302      	adds	r3, #2
 8017a26:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8017a2a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8017a2e:	3304      	adds	r3, #4
 8017a30:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8017a34:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8017a38:	3304      	adds	r3, #4
 8017a3a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8017a3e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8017a42:	2b07      	cmp	r3, #7
 8017a44:	f77f ae55 	ble.w	80176f2 <jpeg_idct_9x9+0x4e>
  }

  /* Pass 2: process 9 rows from work array, store into output array. */

  wsptr = workspace;
 8017a48:	f107 0314 	add.w	r3, r7, #20
 8017a4c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  for (ctr = 0; ctr < 9; ctr++) {
 8017a50:	2300      	movs	r3, #0
 8017a52:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8017a56:	e19a      	b.n	8017d8e <jpeg_idct_9x9+0x6ea>
 8017a58:	ffffd8cf 	.word	0xffffd8cf
    outptr = output_buf[ctr] + output_col;
 8017a5c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8017a60:	009b      	lsls	r3, r3, #2
 8017a62:	463a      	mov	r2, r7
 8017a64:	6812      	ldr	r2, [r2, #0]
 8017a66:	4413      	add	r3, r2
 8017a68:	681a      	ldr	r2, [r3, #0]
 8017a6a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8017a6e:	4413      	add	r3, r2
 8017a70:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8017a74:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	3310      	adds	r3, #16
 8017a7c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp0 <<= CONST_BITS;
 8017a80:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8017a84:	035b      	lsls	r3, r3, #13
 8017a86:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

    z1 = (INT32) wsptr[2];
 8017a8a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8017a8e:	3308      	adds	r3, #8
 8017a90:	681b      	ldr	r3, [r3, #0]
 8017a92:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    z2 = (INT32) wsptr[4];
 8017a96:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8017a9a:	3310      	adds	r3, #16
 8017a9c:	681b      	ldr	r3, [r3, #0]
 8017a9e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    z3 = (INT32) wsptr[6];
 8017aa2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8017aa6:	3318      	adds	r3, #24
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8017aae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017ab2:	f241 62a1 	movw	r2, #5793	; 0x16a1
 8017ab6:	fb02 f303 	mul.w	r3, r2, r3
 8017aba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    tmp1 = tmp0 + tmp3;
 8017abe:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8017ac2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8017ac6:	4413      	add	r3, r2
 8017ac8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    tmp2 = tmp0 - tmp3 - tmp3;
 8017acc:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8017ad0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8017ad4:	1ad2      	subs	r2, r2, r3
 8017ad6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8017ada:	1ad3      	subs	r3, r2, r3
 8017adc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8017ae0:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8017ae4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8017ae8:	1ad3      	subs	r3, r2, r3
 8017aea:	f241 62a1 	movw	r2, #5793	; 0x16a1
 8017aee:	fb02 f303 	mul.w	r3, r2, r3
 8017af2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp11 = tmp2 + tmp0;
 8017af6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8017afa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8017afe:	4413      	add	r3, r2
 8017b00:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    tmp14 = tmp2 - tmp0 - tmp0;
 8017b04:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8017b08:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8017b0c:	1ad2      	subs	r2, r2, r3
 8017b0e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8017b12:	1ad3      	subs	r3, r2, r3
 8017b14:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8017b18:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8017b1c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8017b20:	4413      	add	r3, r2
 8017b22:	f642 2287 	movw	r2, #10887	; 0x2a87
 8017b26:	fb02 f303 	mul.w	r3, r2, r3
 8017b2a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 8017b2e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8017b32:	f242 22ab 	movw	r2, #8875	; 0x22ab
 8017b36:	fb02 f303 	mul.w	r3, r2, r3
 8017b3a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 8017b3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8017b42:	f240 72dc 	movw	r2, #2012	; 0x7dc
 8017b46:	fb02 f303 	mul.w	r3, r2, r3
 8017b4a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

    tmp10 = tmp1 + tmp0 - tmp3;
 8017b4e:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8017b52:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8017b56:	441a      	add	r2, r3
 8017b58:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8017b5c:	1ad3      	subs	r3, r2, r3
 8017b5e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    tmp12 = tmp1 - tmp0 + tmp2;
 8017b62:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8017b66:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8017b6a:	1ad3      	subs	r3, r2, r3
 8017b6c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8017b70:	4413      	add	r3, r2
 8017b72:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    tmp13 = tmp1 - tmp2 + tmp3;
 8017b76:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8017b7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8017b7e:	1ad3      	subs	r3, r2, r3
 8017b80:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8017b84:	4413      	add	r3, r2
 8017b86:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    /* Odd part */

    z1 = (INT32) wsptr[1];
 8017b8a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8017b8e:	3304      	adds	r3, #4
 8017b90:	681b      	ldr	r3, [r3, #0]
 8017b92:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    z2 = (INT32) wsptr[3];
 8017b96:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8017b9a:	330c      	adds	r3, #12
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    z3 = (INT32) wsptr[5];
 8017ba2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8017ba6:	3314      	adds	r3, #20
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    z4 = (INT32) wsptr[7];
 8017bae:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8017bb2:	331c      	adds	r3, #28
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8017bba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8017bbe:	4a7a      	ldr	r2, [pc, #488]	; (8017da8 <jpeg_idct_9x9+0x704>)
 8017bc0:	fb02 f303 	mul.w	r3, r2, r3
 8017bc4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8017bc8:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8017bcc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017bd0:	4413      	add	r3, r2
 8017bd2:	f641 5217 	movw	r2, #7447	; 0x1d17
 8017bd6:	fb02 f303 	mul.w	r3, r2, r3
 8017bda:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8017bde:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8017be2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8017be6:	4413      	add	r3, r2
 8017be8:	f640 727a 	movw	r2, #3962	; 0xf7a
 8017bec:	fb02 f303 	mul.w	r3, r2, r3
 8017bf0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    tmp0 = tmp2 + tmp3 - z2;
 8017bf4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8017bf8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8017bfc:	441a      	add	r2, r3
 8017bfe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8017c02:	1ad3      	subs	r3, r2, r3
 8017c04:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8017c08:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8017c0c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8017c10:	1ad3      	subs	r3, r2, r3
 8017c12:	f642 4291 	movw	r2, #11409	; 0x2c91
 8017c16:	fb02 f303 	mul.w	r3, r2, r3
 8017c1a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    tmp2 += z2 - tmp1;
 8017c1e:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8017c22:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8017c26:	1ad3      	subs	r3, r2, r3
 8017c28:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8017c2c:	4413      	add	r3, r2
 8017c2e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    tmp3 += z2 + tmp1;
 8017c32:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8017c36:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8017c3a:	4413      	add	r3, r2
 8017c3c:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8017c40:	4413      	add	r3, r2
 8017c42:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8017c46:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8017c4a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017c4e:	1ad2      	subs	r2, r2, r3
 8017c50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8017c54:	1ad3      	subs	r3, r2, r3
 8017c56:	f242 7231 	movw	r2, #10033	; 0x2731
 8017c5a:	fb02 f303 	mul.w	r3, r2, r3
 8017c5e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8017c62:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8017c66:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8017c6a:	4413      	add	r3, r2
 8017c6c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8017c6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8017c72:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8017c76:	4413      	add	r3, r2
 8017c78:	781a      	ldrb	r2, [r3, #0]
 8017c7a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8017c7e:	701a      	strb	r2, [r3, #0]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8017c80:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8017c84:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8017c88:	1ad3      	subs	r3, r2, r3
 8017c8a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8017c8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8017c90:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8017c94:	441a      	add	r2, r3
 8017c96:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8017c9a:	3308      	adds	r3, #8
 8017c9c:	7812      	ldrb	r2, [r2, #0]
 8017c9e:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8017ca0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8017ca4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8017ca8:	4413      	add	r3, r2
 8017caa:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8017cac:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8017cb0:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8017cb4:	441a      	add	r2, r3
 8017cb6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8017cba:	3301      	adds	r3, #1
 8017cbc:	7812      	ldrb	r2, [r2, #0]
 8017cbe:	701a      	strb	r2, [r3, #0]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8017cc0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8017cc4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8017cc8:	1ad3      	subs	r3, r2, r3
 8017cca:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8017ccc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8017cd0:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8017cd4:	441a      	add	r2, r3
 8017cd6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8017cda:	3307      	adds	r3, #7
 8017cdc:	7812      	ldrb	r2, [r2, #0]
 8017cde:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8017ce0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8017ce4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8017ce8:	4413      	add	r3, r2
 8017cea:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8017cec:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8017cf0:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8017cf4:	441a      	add	r2, r3
 8017cf6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8017cfa:	3302      	adds	r3, #2
 8017cfc:	7812      	ldrb	r2, [r2, #0]
 8017cfe:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8017d00:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8017d04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8017d08:	1ad3      	subs	r3, r2, r3
 8017d0a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8017d0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8017d10:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8017d14:	441a      	add	r2, r3
 8017d16:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8017d1a:	3306      	adds	r3, #6
 8017d1c:	7812      	ldrb	r2, [r2, #0]
 8017d1e:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 8017d20:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8017d24:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8017d28:	4413      	add	r3, r2
 8017d2a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8017d2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 8017d30:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8017d34:	441a      	add	r2, r3
 8017d36:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8017d3a:	3303      	adds	r3, #3
 8017d3c:	7812      	ldrb	r2, [r2, #0]
 8017d3e:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 8017d40:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8017d44:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8017d48:	1ad3      	subs	r3, r2, r3
 8017d4a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8017d4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 8017d50:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8017d54:	441a      	add	r2, r3
 8017d56:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8017d5a:	3305      	adds	r3, #5
 8017d5c:	7812      	ldrb	r2, [r2, #0]
 8017d5e:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
 8017d60:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8017d64:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8017d66:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
 8017d6a:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8017d6e:	441a      	add	r2, r3
 8017d70:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8017d74:	3304      	adds	r3, #4
 8017d76:	7812      	ldrb	r2, [r2, #0]
 8017d78:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 8017d7a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8017d7e:	3320      	adds	r3, #32
 8017d80:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  for (ctr = 0; ctr < 9; ctr++) {
 8017d84:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8017d88:	3301      	adds	r3, #1
 8017d8a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8017d8e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8017d92:	2b08      	cmp	r3, #8
 8017d94:	f77f ae62 	ble.w	8017a5c <jpeg_idct_9x9+0x3b8>
  }
}
 8017d98:	bf00      	nop
 8017d9a:	bf00      	nop
 8017d9c:	f507 77c0 	add.w	r7, r7, #384	; 0x180
 8017da0:	46bd      	mov	sp, r7
 8017da2:	bc90      	pop	{r4, r7}
 8017da4:	4770      	bx	lr
 8017da6:	bf00      	nop
 8017da8:	ffffd8cf 	.word	0xffffd8cf

08017dac <jpeg_idct_10x10>:

GLOBAL(void)
jpeg_idct_10x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8017dac:	b490      	push	{r4, r7}
 8017dae:	b0ea      	sub	sp, #424	; 0x1a8
 8017db0:	af00      	add	r7, sp, #0
 8017db2:	f107 040c 	add.w	r4, r7, #12
 8017db6:	6020      	str	r0, [r4, #0]
 8017db8:	f107 0008 	add.w	r0, r7, #8
 8017dbc:	6001      	str	r1, [r0, #0]
 8017dbe:	1d39      	adds	r1, r7, #4
 8017dc0:	600a      	str	r2, [r1, #0]
 8017dc2:	463a      	mov	r2, r7
 8017dc4:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8017dc6:	f107 030c 	add.w	r3, r7, #12
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8017dd0:	3380      	adds	r3, #128	; 0x80
 8017dd2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
  int workspace[8*10];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 8017dd6:	1d3b      	adds	r3, r7, #4
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8017dde:	f107 0308 	add.w	r3, r7, #8
 8017de2:	681b      	ldr	r3, [r3, #0]
 8017de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017de6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  wsptr = workspace;
 8017dea:	f107 0314 	add.w	r3, r7, #20
 8017dee:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8017df2:	2300      	movs	r3, #0
 8017df4:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8017df8:	e1d5      	b.n	80181a6 <jpeg_idct_10x10+0x3fa>
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8017dfa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8017dfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017e02:	461a      	mov	r2, r3
 8017e04:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	fb03 f302 	mul.w	r3, r3, r2
 8017e0e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    z3 <<= CONST_BITS;
 8017e12:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8017e16:	035b      	lsls	r3, r3, #13
 8017e18:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    /* Add fudge factor here for final descale. */
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8017e1c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8017e20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8017e24:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8017e28:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8017e2c:	3340      	adds	r3, #64	; 0x40
 8017e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017e32:	461a      	mov	r2, r3
 8017e34:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8017e38:	3380      	adds	r3, #128	; 0x80
 8017e3a:	681b      	ldr	r3, [r3, #0]
 8017e3c:	fb03 f302 	mul.w	r3, r3, r2
 8017e40:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8017e44:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8017e48:	f242 429d 	movw	r2, #9373	; 0x249d
 8017e4c:	fb02 f303 	mul.w	r3, r2, r3
 8017e50:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8017e54:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8017e58:	f640 52fc 	movw	r2, #3580	; 0xdfc
 8017e5c:	fb02 f303 	mul.w	r3, r2, r3
 8017e60:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    tmp10 = z3 + z1;
 8017e64:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8017e68:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8017e6c:	4413      	add	r3, r2
 8017e6e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    tmp11 = z3 - z2;
 8017e72:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8017e76:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8017e7a:	1ad3      	subs	r3, r2, r3
 8017e7c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178

    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8017e80:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8017e84:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8017e88:	1ad3      	subs	r3, r2, r3
 8017e8a:	005b      	lsls	r3, r3, #1
 8017e8c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8017e90:	1ad3      	subs	r3, r2, r3
 8017e92:	12db      	asrs	r3, r3, #11
 8017e94:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8017e98:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8017e9c:	3320      	adds	r3, #32
 8017e9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ea2:	461a      	mov	r2, r3
 8017ea4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8017ea8:	3340      	adds	r3, #64	; 0x40
 8017eaa:	681b      	ldr	r3, [r3, #0]
 8017eac:	fb03 f302 	mul.w	r3, r3, r2
 8017eb0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8017eb4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8017eb8:	3360      	adds	r3, #96	; 0x60
 8017eba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ebe:	461a      	mov	r2, r3
 8017ec0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8017ec4:	33c0      	adds	r3, #192	; 0xc0
 8017ec6:	681b      	ldr	r3, [r3, #0]
 8017ec8:	fb03 f302 	mul.w	r3, r3, r2
 8017ecc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8017ed0:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8017ed4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8017ed8:	4413      	add	r3, r2
 8017eda:	f641 229a 	movw	r2, #6810	; 0x1a9a
 8017ede:	fb02 f303 	mul.w	r3, r2, r3
 8017ee2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8017ee6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8017eea:	f241 0271 	movw	r2, #4209	; 0x1071
 8017eee:	fb02 f303 	mul.w	r3, r2, r3
 8017ef2:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8017ef6:	4413      	add	r3, r2
 8017ef8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8017efc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8017f00:	4aaf      	ldr	r2, [pc, #700]	; (80181c0 <jpeg_idct_10x10+0x414>)
 8017f02:	fb02 f303 	mul.w	r3, r2, r3
 8017f06:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8017f0a:	4413      	add	r3, r2
 8017f0c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

    tmp20 = tmp10 + tmp12;
 8017f10:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8017f14:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8017f18:	4413      	add	r3, r2
 8017f1a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    tmp24 = tmp10 - tmp12;
 8017f1e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8017f22:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8017f26:	1ad3      	subs	r3, r2, r3
 8017f28:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp21 = tmp11 + tmp13;
 8017f2c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8017f30:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8017f34:	4413      	add	r3, r2
 8017f36:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    tmp23 = tmp11 - tmp13;
 8017f3a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8017f3e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8017f42:	1ad3      	subs	r3, r2, r3
 8017f44:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8017f48:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8017f4c:	3310      	adds	r3, #16
 8017f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017f52:	461a      	mov	r2, r3
 8017f54:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8017f58:	3320      	adds	r3, #32
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	fb03 f302 	mul.w	r3, r3, r2
 8017f60:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8017f64:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8017f68:	3330      	adds	r3, #48	; 0x30
 8017f6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017f6e:	461a      	mov	r2, r3
 8017f70:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8017f74:	3360      	adds	r3, #96	; 0x60
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	fb03 f302 	mul.w	r3, r3, r2
 8017f7c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8017f80:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8017f84:	3350      	adds	r3, #80	; 0x50
 8017f86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017f8a:	461a      	mov	r2, r3
 8017f8c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8017f90:	33a0      	adds	r3, #160	; 0xa0
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	fb03 f302 	mul.w	r3, r3, r2
 8017f98:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8017f9c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8017fa0:	3370      	adds	r3, #112	; 0x70
 8017fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017fa6:	461a      	mov	r2, r3
 8017fa8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8017fac:	33e0      	adds	r3, #224	; 0xe0
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	fb03 f302 	mul.w	r3, r3, r2
 8017fb4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

    tmp11 = z2 + z4;
 8017fb8:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8017fbc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8017fc0:	4413      	add	r3, r2
 8017fc2:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    tmp13 = z2 - z4;
 8017fc6:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8017fca:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8017fce:	1ad3      	subs	r3, r2, r3
 8017fd0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8017fd4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8017fd8:	f640 12e3 	movw	r2, #2531	; 0x9e3
 8017fdc:	fb02 f303 	mul.w	r3, r2, r3
 8017fe0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    z5 = z3 << CONST_BITS;
 8017fe4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8017fe8:	035b      	lsls	r3, r3, #13
 8017fea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8017fee:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8017ff2:	f641 626f 	movw	r2, #7791	; 0x1e6f
 8017ff6:	fb02 f303 	mul.w	r3, r2, r3
 8017ffa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    z4 = z5 + tmp12;
 8017ffe:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8018002:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8018006:	4413      	add	r3, r2
 8018008:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 801800c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8018010:	f642 42b3 	movw	r2, #11443	; 0x2cb3
 8018014:	fb02 f203 	mul.w	r2, r2, r3
 8018018:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801801c:	4413      	add	r3, r2
 801801e:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8018022:	4413      	add	r3, r2
 8018024:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8018028:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801802c:	f240 7214 	movw	r2, #1812	; 0x714
 8018030:	fb02 f203 	mul.w	r2, r2, r3
 8018034:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8018038:	1ad3      	subs	r3, r2, r3
 801803a:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 801803e:	4413      	add	r3, r2
 8018040:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8018044:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8018048:	f241 22cf 	movw	r2, #4815	; 0x12cf
 801804c:	fb02 f303 	mul.w	r3, r2, r3
 8018050:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8018054:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8018058:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801805c:	1ad2      	subs	r2, r2, r3
 801805e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8018062:	031b      	lsls	r3, r3, #12
 8018064:	1ad3      	subs	r3, r2, r3
 8018066:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 801806a:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 801806e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8018072:	1ad2      	subs	r2, r2, r3
 8018074:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8018078:	1ad3      	subs	r3, r2, r3
 801807a:	009b      	lsls	r3, r3, #2
 801807c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8018080:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8018084:	f642 0253 	movw	r2, #10323	; 0x2853
 8018088:	fb02 f203 	mul.w	r2, r2, r3
 801808c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8018090:	1ad2      	subs	r2, r2, r3
 8018092:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8018096:	1ad3      	subs	r3, r2, r3
 8018098:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801809c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80180a0:	f241 428c 	movw	r2, #5260	; 0x148c
 80180a4:	fb02 f203 	mul.w	r2, r2, r3
 80180a8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80180ac:	1ad3      	subs	r3, r2, r3
 80180ae:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 80180b2:	4413      	add	r3, r2
 80180b4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80180b8:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80180bc:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80180c0:	4413      	add	r3, r2
 80180c2:	12da      	asrs	r2, r3, #11
 80180c4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80180c8:	601a      	str	r2, [r3, #0]
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80180ca:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80180ce:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80180d2:	1ad2      	subs	r2, r2, r3
 80180d4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80180d8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80180dc:	12d2      	asrs	r2, r2, #11
 80180de:	601a      	str	r2, [r3, #0]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80180e0:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80180e4:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80180e8:	441a      	add	r2, r3
 80180ea:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80180ee:	3320      	adds	r3, #32
 80180f0:	12d2      	asrs	r2, r2, #11
 80180f2:	601a      	str	r2, [r3, #0]
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80180f4:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80180f8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80180fc:	1ad2      	subs	r2, r2, r3
 80180fe:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8018102:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018106:	12d2      	asrs	r2, r2, #11
 8018108:	601a      	str	r2, [r3, #0]
    wsptr[8*2] = (int) (tmp22 + tmp12);
 801810a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801810e:	3340      	adds	r3, #64	; 0x40
 8018110:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8018114:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8018118:	440a      	add	r2, r1
 801811a:	601a      	str	r2, [r3, #0]
    wsptr[8*7] = (int) (tmp22 - tmp12);
 801811c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8018120:	33e0      	adds	r3, #224	; 0xe0
 8018122:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8018126:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 801812a:	1a8a      	subs	r2, r1, r2
 801812c:	601a      	str	r2, [r3, #0]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801812e:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8018132:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8018136:	441a      	add	r2, r3
 8018138:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801813c:	3360      	adds	r3, #96	; 0x60
 801813e:	12d2      	asrs	r2, r2, #11
 8018140:	601a      	str	r2, [r3, #0]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8018142:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8018146:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801814a:	1ad2      	subs	r2, r2, r3
 801814c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8018150:	33c0      	adds	r3, #192	; 0xc0
 8018152:	12d2      	asrs	r2, r2, #11
 8018154:	601a      	str	r2, [r3, #0]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8018156:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801815a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801815e:	441a      	add	r2, r3
 8018160:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8018164:	3380      	adds	r3, #128	; 0x80
 8018166:	12d2      	asrs	r2, r2, #11
 8018168:	601a      	str	r2, [r3, #0]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801816a:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801816e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8018172:	1ad2      	subs	r2, r2, r3
 8018174:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8018178:	33a0      	adds	r3, #160	; 0xa0
 801817a:	12d2      	asrs	r2, r2, #11
 801817c:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801817e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8018182:	3301      	adds	r3, #1
 8018184:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8018188:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 801818c:	3302      	adds	r3, #2
 801818e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8018192:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8018196:	3304      	adds	r3, #4
 8018198:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 801819c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80181a0:	3304      	adds	r3, #4
 80181a2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80181a6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80181aa:	2b07      	cmp	r3, #7
 80181ac:	f77f ae25 	ble.w	8017dfa <jpeg_idct_10x10+0x4e>
  }

  /* Pass 2: process 10 rows from work array, store into output array. */

  wsptr = workspace;
 80181b0:	f107 0314 	add.w	r3, r7, #20
 80181b4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  for (ctr = 0; ctr < 10; ctr++) {
 80181b8:	2300      	movs	r3, #0
 80181ba:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80181be:	e1d0      	b.n	8018562 <jpeg_idct_10x10+0x7b6>
 80181c0:	ffffba5c 	.word	0xffffba5c
    outptr = output_buf[ctr] + output_col;
 80181c4:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80181c8:	009b      	lsls	r3, r3, #2
 80181ca:	463a      	mov	r2, r7
 80181cc:	6812      	ldr	r2, [r2, #0]
 80181ce:	4413      	add	r3, r2
 80181d0:	681a      	ldr	r2, [r3, #0]
 80181d2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80181d6:	4413      	add	r3, r2
 80181d8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

    /* Even part */

    /* Add fudge factor here for final descale. */
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80181dc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	3310      	adds	r3, #16
 80181e4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    z3 <<= CONST_BITS;
 80181e8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80181ec:	035b      	lsls	r3, r3, #13
 80181ee:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    z4 = (INT32) wsptr[4];
 80181f2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80181f6:	3310      	adds	r3, #16
 80181f8:	681b      	ldr	r3, [r3, #0]
 80181fa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80181fe:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8018202:	f242 429d 	movw	r2, #9373	; 0x249d
 8018206:	fb02 f303 	mul.w	r3, r2, r3
 801820a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 801820e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8018212:	f640 52fc 	movw	r2, #3580	; 0xdfc
 8018216:	fb02 f303 	mul.w	r3, r2, r3
 801821a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    tmp10 = z3 + z1;
 801821e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8018222:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8018226:	4413      	add	r3, r2
 8018228:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    tmp11 = z3 - z2;
 801822c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8018230:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8018234:	1ad3      	subs	r3, r2, r3
 8018236:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178

    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 801823a:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 801823e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8018242:	1ad3      	subs	r3, r2, r3
 8018244:	005b      	lsls	r3, r3, #1
 8018246:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 801824a:	1ad3      	subs	r3, r2, r3
 801824c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

    z2 = (INT32) wsptr[2];
 8018250:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8018254:	3308      	adds	r3, #8
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    z3 = (INT32) wsptr[6];
 801825c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8018260:	3318      	adds	r3, #24
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8018268:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 801826c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8018270:	4413      	add	r3, r2
 8018272:	f641 229a 	movw	r2, #6810	; 0x1a9a
 8018276:	fb02 f303 	mul.w	r3, r2, r3
 801827a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 801827e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8018282:	f241 0271 	movw	r2, #4209	; 0x1071
 8018286:	fb02 f303 	mul.w	r3, r2, r3
 801828a:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 801828e:	4413      	add	r3, r2
 8018290:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8018294:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8018298:	4ab8      	ldr	r2, [pc, #736]	; (801857c <jpeg_idct_10x10+0x7d0>)
 801829a:	fb02 f303 	mul.w	r3, r2, r3
 801829e:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 80182a2:	4413      	add	r3, r2
 80182a4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

    tmp20 = tmp10 + tmp12;
 80182a8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80182ac:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80182b0:	4413      	add	r3, r2
 80182b2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    tmp24 = tmp10 - tmp12;
 80182b6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80182ba:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80182be:	1ad3      	subs	r3, r2, r3
 80182c0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp21 = tmp11 + tmp13;
 80182c4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80182c8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80182cc:	4413      	add	r3, r2
 80182ce:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    tmp23 = tmp11 - tmp13;
 80182d2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80182d6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80182da:	1ad3      	subs	r3, r2, r3
 80182dc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

    /* Odd part */

    z1 = (INT32) wsptr[1];
 80182e0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80182e4:	3304      	adds	r3, #4
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    z2 = (INT32) wsptr[3];
 80182ec:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80182f0:	330c      	adds	r3, #12
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    z3 = (INT32) wsptr[5];
 80182f8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80182fc:	3314      	adds	r3, #20
 80182fe:	681b      	ldr	r3, [r3, #0]
 8018300:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    z3 <<= CONST_BITS;
 8018304:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8018308:	035b      	lsls	r3, r3, #13
 801830a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    z4 = (INT32) wsptr[7];
 801830e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8018312:	331c      	adds	r3, #28
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

    tmp11 = z2 + z4;
 801831a:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 801831e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8018322:	4413      	add	r3, r2
 8018324:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    tmp13 = z2 - z4;
 8018328:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 801832c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8018330:	1ad3      	subs	r3, r2, r3
 8018332:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8018336:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801833a:	f640 12e3 	movw	r2, #2531	; 0x9e3
 801833e:	fb02 f303 	mul.w	r3, r2, r3
 8018342:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8018346:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801834a:	f641 626f 	movw	r2, #7791	; 0x1e6f
 801834e:	fb02 f303 	mul.w	r3, r2, r3
 8018352:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    z4 = z3 + tmp12;
 8018356:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 801835a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801835e:	4413      	add	r3, r2
 8018360:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8018364:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8018368:	f642 42b3 	movw	r2, #11443	; 0x2cb3
 801836c:	fb02 f203 	mul.w	r2, r2, r3
 8018370:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8018374:	4413      	add	r3, r2
 8018376:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 801837a:	4413      	add	r3, r2
 801837c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8018380:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8018384:	f240 7214 	movw	r2, #1812	; 0x714
 8018388:	fb02 f203 	mul.w	r2, r2, r3
 801838c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8018390:	1ad3      	subs	r3, r2, r3
 8018392:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8018396:	4413      	add	r3, r2
 8018398:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801839c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80183a0:	f241 22cf 	movw	r2, #4815	; 0x12cf
 80183a4:	fb02 f303 	mul.w	r3, r2, r3
 80183a8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 80183ac:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80183b0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80183b4:	1ad2      	subs	r2, r2, r3
 80183b6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80183ba:	031b      	lsls	r3, r3, #12
 80183bc:	1ad3      	subs	r3, r2, r3
 80183be:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 80183c2:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 80183c6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80183ca:	1ad3      	subs	r3, r2, r3
 80183cc:	035a      	lsls	r2, r3, #13
 80183ce:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80183d2:	1ad3      	subs	r3, r2, r3
 80183d4:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80183d8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80183dc:	f642 0253 	movw	r2, #10323	; 0x2853
 80183e0:	fb02 f203 	mul.w	r2, r2, r3
 80183e4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80183e8:	1ad2      	subs	r2, r2, r3
 80183ea:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80183ee:	1ad3      	subs	r3, r2, r3
 80183f0:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80183f4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80183f8:	f241 428c 	movw	r2, #5260	; 0x148c
 80183fc:	fb02 f203 	mul.w	r2, r2, r3
 8018400:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8018404:	1ad3      	subs	r3, r2, r3
 8018406:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 801840a:	4413      	add	r3, r2
 801840c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8018410:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8018414:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8018418:	4413      	add	r3, r2
 801841a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801841c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8018420:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8018424:	4413      	add	r3, r2
 8018426:	781a      	ldrb	r2, [r3, #0]
 8018428:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 801842c:	701a      	strb	r2, [r3, #0]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801842e:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8018432:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8018436:	1ad3      	subs	r3, r2, r3
 8018438:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801843a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801843e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8018442:	441a      	add	r2, r3
 8018444:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8018448:	3309      	adds	r3, #9
 801844a:	7812      	ldrb	r2, [r2, #0]
 801844c:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801844e:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8018452:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8018456:	4413      	add	r3, r2
 8018458:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801845a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801845e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8018462:	441a      	add	r2, r3
 8018464:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8018468:	3301      	adds	r3, #1
 801846a:	7812      	ldrb	r2, [r2, #0]
 801846c:	701a      	strb	r2, [r3, #0]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801846e:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8018472:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8018476:	1ad3      	subs	r3, r2, r3
 8018478:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801847a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801847e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8018482:	441a      	add	r2, r3
 8018484:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8018488:	3308      	adds	r3, #8
 801848a:	7812      	ldrb	r2, [r2, #0]
 801848c:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801848e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8018492:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8018496:	4413      	add	r3, r2
 8018498:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801849a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801849e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80184a2:	441a      	add	r2, r3
 80184a4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80184a8:	3302      	adds	r3, #2
 80184aa:	7812      	ldrb	r2, [r2, #0]
 80184ac:	701a      	strb	r2, [r3, #0]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80184ae:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80184b2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80184b6:	1ad3      	subs	r3, r2, r3
 80184b8:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80184ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80184be:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80184c2:	441a      	add	r2, r3
 80184c4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80184c8:	3307      	adds	r3, #7
 80184ca:	7812      	ldrb	r2, [r2, #0]
 80184cc:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80184ce:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80184d2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80184d6:	4413      	add	r3, r2
 80184d8:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80184da:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80184de:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80184e2:	441a      	add	r2, r3
 80184e4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80184e8:	3303      	adds	r3, #3
 80184ea:	7812      	ldrb	r2, [r2, #0]
 80184ec:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80184ee:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80184f2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80184f6:	1ad3      	subs	r3, r2, r3
 80184f8:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80184fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80184fe:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8018502:	441a      	add	r2, r3
 8018504:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8018508:	3306      	adds	r3, #6
 801850a:	7812      	ldrb	r2, [r2, #0]
 801850c:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801850e:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8018512:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8018516:	4413      	add	r3, r2
 8018518:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801851a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801851e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8018522:	441a      	add	r2, r3
 8018524:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8018528:	3304      	adds	r3, #4
 801852a:	7812      	ldrb	r2, [r2, #0]
 801852c:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801852e:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8018532:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8018536:	1ad3      	subs	r3, r2, r3
 8018538:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801853a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801853e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8018542:	441a      	add	r2, r3
 8018544:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8018548:	3305      	adds	r3, #5
 801854a:	7812      	ldrb	r2, [r2, #0]
 801854c:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 801854e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8018552:	3320      	adds	r3, #32
 8018554:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  for (ctr = 0; ctr < 10; ctr++) {
 8018558:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801855c:	3301      	adds	r3, #1
 801855e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8018562:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8018566:	2b09      	cmp	r3, #9
 8018568:	f77f ae2c 	ble.w	80181c4 <jpeg_idct_10x10+0x418>
  }
}
 801856c:	bf00      	nop
 801856e:	bf00      	nop
 8018570:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 8018574:	46bd      	mov	sp, r7
 8018576:	bc90      	pop	{r4, r7}
 8018578:	4770      	bx	lr
 801857a:	bf00      	nop
 801857c:	ffffba5c 	.word	0xffffba5c

08018580 <jpeg_idct_11x11>:

GLOBAL(void)
jpeg_idct_11x11 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8018580:	b490      	push	{r4, r7}
 8018582:	b0f2      	sub	sp, #456	; 0x1c8
 8018584:	af00      	add	r7, sp, #0
 8018586:	f107 040c 	add.w	r4, r7, #12
 801858a:	6020      	str	r0, [r4, #0]
 801858c:	f107 0008 	add.w	r0, r7, #8
 8018590:	6001      	str	r1, [r0, #0]
 8018592:	1d39      	adds	r1, r7, #4
 8018594:	600a      	str	r2, [r1, #0]
 8018596:	463a      	mov	r2, r7
 8018598:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801859a:	f107 030c 	add.w	r3, r7, #12
 801859e:	681b      	ldr	r3, [r3, #0]
 80185a0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80185a4:	3380      	adds	r3, #128	; 0x80
 80185a6:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  int workspace[8*11];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 80185aa:	1d3b      	adds	r3, r7, #4
 80185ac:	681b      	ldr	r3, [r3, #0]
 80185ae:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80185b2:	f107 0308 	add.w	r3, r7, #8
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80185ba:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
  wsptr = workspace;
 80185be:	f107 0314 	add.w	r3, r7, #20
 80185c2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80185c6:	2300      	movs	r3, #0
 80185c8:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80185cc:	e22b      	b.n	8018a26 <jpeg_idct_11x11+0x4a6>
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80185ce:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80185d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80185d6:	461a      	mov	r2, r3
 80185d8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	fb03 f302 	mul.w	r3, r3, r2
 80185e2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    tmp10 <<= CONST_BITS;
 80185e6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80185ea:	035b      	lsls	r3, r3, #13
 80185ec:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    /* Add fudge factor here for final descale. */
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 80185f0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80185f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80185f8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80185fc:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8018600:	3320      	adds	r3, #32
 8018602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018606:	461a      	mov	r2, r3
 8018608:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801860c:	3340      	adds	r3, #64	; 0x40
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	fb03 f302 	mul.w	r3, r3, r2
 8018614:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8018618:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 801861c:	3340      	adds	r3, #64	; 0x40
 801861e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018622:	461a      	mov	r2, r3
 8018624:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8018628:	3380      	adds	r3, #128	; 0x80
 801862a:	681b      	ldr	r3, [r3, #0]
 801862c:	fb03 f302 	mul.w	r3, r3, r2
 8018630:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8018634:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8018638:	3360      	adds	r3, #96	; 0x60
 801863a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801863e:	461a      	mov	r2, r3
 8018640:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8018644:	33c0      	adds	r3, #192	; 0xc0
 8018646:	681b      	ldr	r3, [r3, #0]
 8018648:	fb03 f302 	mul.w	r3, r3, r2
 801864c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0

    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8018650:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8018654:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8018658:	1ad3      	subs	r3, r2, r3
 801865a:	f245 127e 	movw	r2, #20862	; 0x517e
 801865e:	fb02 f303 	mul.w	r3, r2, r3
 8018662:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8018666:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 801866a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 801866e:	1ad3      	subs	r3, r2, r3
 8018670:	f640 52c9 	movw	r2, #3529	; 0xdc9
 8018674:	fb02 f303 	mul.w	r3, r2, r3
 8018678:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    z4 = z1 + z3;
 801867c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8018680:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8018684:	4413      	add	r3, r2
 8018686:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
 801868a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801868e:	4aec      	ldr	r2, [pc, #944]	; (8018a40 <jpeg_idct_11x11+0x4c0>)
 8018690:	fb02 f303 	mul.w	r3, r2, r3
 8018694:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    z4 -= z2;
 8018698:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 801869c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80186a0:	1ad3      	subs	r3, r2, r3
 80186a2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 80186a6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80186aa:	f642 326c 	movw	r2, #11116	; 0x2b6c
 80186ae:	fb02 f303 	mul.w	r3, r2, r3
 80186b2:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80186b6:	4413      	add	r3, r2
 80186b8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    tmp21 = tmp20 + tmp23 + tmp25 -
 80186bc:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80186c0:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80186c4:	441a      	add	r2, r3
 80186c6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80186ca:	441a      	add	r2, r3
	    MULTIPLY(z2, FIX(1.821790775));          /* c2+c4+c10-c6 */
 80186cc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80186d0:	49dc      	ldr	r1, [pc, #880]	; (8018a44 <jpeg_idct_11x11+0x4c4>)
 80186d2:	fb01 f303 	mul.w	r3, r1, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 80186d6:	4413      	add	r3, r2
 80186d8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80186dc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80186e0:	f244 32b5 	movw	r2, #17333	; 0x43b5
 80186e4:	fb02 f203 	mul.w	r2, r2, r3
 80186e8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80186ec:	4413      	add	r3, r2
 80186ee:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80186f2:	4413      	add	r3, r2
 80186f4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 80186f8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80186fc:	4ad2      	ldr	r2, [pc, #840]	; (8018a48 <jpeg_idct_11x11+0x4c8>)
 80186fe:	fb02 f203 	mul.w	r2, r2, r3
 8018702:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8018706:	4413      	add	r3, r2
 8018708:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 801870c:	4413      	add	r3, r2
 801870e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    tmp24 += tmp25;
 8018712:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8018716:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801871a:	4413      	add	r3, r2
 801871c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8018720:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8018724:	4ac9      	ldr	r2, [pc, #804]	; (8018a4c <jpeg_idct_11x11+0x4cc>)
 8018726:	fb02 f303 	mul.w	r3, r2, r3
 801872a:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 801872e:	4413      	add	r3, r2
 8018730:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8018734:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8018738:	f643 6239 	movw	r2, #15929	; 0x3e39
 801873c:	fb02 f203 	mul.w	r2, r2, r3
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 8018740:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8018744:	49c2      	ldr	r1, [pc, #776]	; (8018a50 <jpeg_idct_11x11+0x4d0>)
 8018746:	fb01 f303 	mul.w	r3, r1, r3
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 801874a:	4413      	add	r3, r2
 801874c:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8018750:	4413      	add	r3, r2
 8018752:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8018756:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801875a:	f46f 5235 	mvn.w	r2, #11584	; 0x2d40
 801875e:	fb02 f303 	mul.w	r3, r2, r3
 8018762:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8018766:	4413      	add	r3, r2
 8018768:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801876c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8018770:	3310      	adds	r3, #16
 8018772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018776:	461a      	mov	r2, r3
 8018778:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801877c:	3320      	adds	r3, #32
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	fb03 f302 	mul.w	r3, r3, r2
 8018784:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8018788:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 801878c:	3330      	adds	r3, #48	; 0x30
 801878e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018792:	461a      	mov	r2, r3
 8018794:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8018798:	3360      	adds	r3, #96	; 0x60
 801879a:	681b      	ldr	r3, [r3, #0]
 801879c:	fb03 f302 	mul.w	r3, r3, r2
 80187a0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80187a4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80187a8:	3350      	adds	r3, #80	; 0x50
 80187aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80187ae:	461a      	mov	r2, r3
 80187b0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80187b4:	33a0      	adds	r3, #160	; 0xa0
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	fb03 f302 	mul.w	r3, r3, r2
 80187bc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80187c0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80187c4:	3370      	adds	r3, #112	; 0x70
 80187c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80187ca:	461a      	mov	r2, r3
 80187cc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80187d0:	33e0      	adds	r3, #224	; 0xe0
 80187d2:	681b      	ldr	r3, [r3, #0]
 80187d4:	fb03 f302 	mul.w	r3, r3, r2
 80187d8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

    tmp11 = z1 + z2;
 80187dc:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 80187e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80187e4:	4413      	add	r3, r2
 80187e6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80187ea:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80187ee:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80187f2:	441a      	add	r2, r3
 80187f4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80187f8:	4413      	add	r3, r2
 80187fa:	f44f 624c 	mov.w	r2, #3264	; 0xcc0
 80187fe:	fb02 f303 	mul.w	r3, r2, r3
 8018802:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 8018806:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801880a:	f641 426a 	movw	r2, #7274	; 0x1c6a
 801880e:	fb02 f303 	mul.w	r3, r2, r3
 8018812:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8018816:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801881a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801881e:	4413      	add	r3, r2
 8018820:	f241 5274 	movw	r2, #5492	; 0x1574
 8018824:	fb02 f303 	mul.w	r3, r2, r3
 8018828:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 801882c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8018830:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8018834:	4413      	add	r3, r2
 8018836:	f640 32b8 	movw	r2, #3000	; 0xbb8
 801883a:	fb02 f303 	mul.w	r3, r2, r3
 801883e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8018842:	4413      	add	r3, r2
 8018844:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    tmp10 = tmp11 + tmp12 + tmp13 -
 8018848:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 801884c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8018850:	441a      	add	r2, r3
 8018852:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8018856:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
 8018858:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 801885c:	497d      	ldr	r1, [pc, #500]	; (8018a54 <jpeg_idct_11x11+0x4d4>)
 801885e:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = tmp11 + tmp12 + tmp13 -
 8018862:	4413      	add	r3, r2
 8018864:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8018868:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 801886c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8018870:	4413      	add	r3, r2
 8018872:	4a79      	ldr	r2, [pc, #484]	; (8018a58 <jpeg_idct_11x11+0x4d8>)
 8018874:	fb02 f303 	mul.w	r3, r2, r3
 8018878:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801887c:	4413      	add	r3, r2
 801887e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8018882:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8018886:	f244 2258 	movw	r2, #16984	; 0x4258
 801888a:	fb02 f203 	mul.w	r2, r2, r3
 801888e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8018892:	4413      	add	r3, r2
 8018894:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8018898:	4413      	add	r3, r2
 801889a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 801889e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80188a2:	4a6e      	ldr	r2, [pc, #440]	; (8018a5c <jpeg_idct_11x11+0x4dc>)
 80188a4:	fb02 f203 	mul.w	r2, r2, r3
 80188a8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80188ac:	4413      	add	r3, r2
 80188ae:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80188b2:	4413      	add	r3, r2
 80188b4:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 80188b8:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80188bc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80188c0:	4413      	add	r3, r2
 80188c2:	4a67      	ldr	r2, [pc, #412]	; (8018a60 <jpeg_idct_11x11+0x4e0>)
 80188c4:	fb02 f303 	mul.w	r3, r2, r3
 80188c8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    tmp11 += z1;
 80188cc:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80188d0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80188d4:	4413      	add	r3, r2
 80188d6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 80188da:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80188de:	f244 3247 	movw	r2, #17223	; 0x4347
 80188e2:	fb02 f203 	mul.w	r2, r2, r3
 80188e6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80188ea:	4413      	add	r3, r2
 80188ec:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80188f0:	4413      	add	r3, r2
 80188f2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 80188f6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80188fa:	4a5a      	ldr	r2, [pc, #360]	; (8018a64 <jpeg_idct_11x11+0x4e4>)
 80188fc:	fb02 f203 	mul.w	r2, r2, r3
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8018900:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8018904:	f242 010b 	movw	r1, #8203	; 0x200b
 8018908:	fb01 f303 	mul.w	r3, r1, r3
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 801890c:	441a      	add	r2, r3
	     MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */
 801890e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8018912:	4955      	ldr	r1, [pc, #340]	; (8018a68 <jpeg_idct_11x11+0x4e8>)
 8018914:	fb01 f303 	mul.w	r3, r1, r3
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8018918:	4413      	add	r3, r2
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 801891a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801891e:	4413      	add	r3, r2
 8018920:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8018924:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8018928:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801892c:	4413      	add	r3, r2
 801892e:	12da      	asrs	r2, r3, #11
 8018930:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8018934:	601a      	str	r2, [r3, #0]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8018936:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801893a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801893e:	1ad2      	subs	r2, r2, r3
 8018940:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8018944:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8018948:	12d2      	asrs	r2, r2, #11
 801894a:	601a      	str	r2, [r3, #0]
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801894c:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8018950:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8018954:	441a      	add	r2, r3
 8018956:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801895a:	3320      	adds	r3, #32
 801895c:	12d2      	asrs	r2, r2, #11
 801895e:	601a      	str	r2, [r3, #0]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8018960:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8018964:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8018968:	1ad2      	subs	r2, r2, r3
 801896a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801896e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8018972:	12d2      	asrs	r2, r2, #11
 8018974:	601a      	str	r2, [r3, #0]
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8018976:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 801897a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801897e:	441a      	add	r2, r3
 8018980:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8018984:	3340      	adds	r3, #64	; 0x40
 8018986:	12d2      	asrs	r2, r2, #11
 8018988:	601a      	str	r2, [r3, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801898a:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 801898e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8018992:	1ad2      	subs	r2, r2, r3
 8018994:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8018998:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801899c:	12d2      	asrs	r2, r2, #11
 801899e:	601a      	str	r2, [r3, #0]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80189a0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80189a4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80189a8:	441a      	add	r2, r3
 80189aa:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80189ae:	3360      	adds	r3, #96	; 0x60
 80189b0:	12d2      	asrs	r2, r2, #11
 80189b2:	601a      	str	r2, [r3, #0]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80189b4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80189b8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80189bc:	1ad2      	subs	r2, r2, r3
 80189be:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80189c2:	33e0      	adds	r3, #224	; 0xe0
 80189c4:	12d2      	asrs	r2, r2, #11
 80189c6:	601a      	str	r2, [r3, #0]
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80189c8:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80189cc:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80189d0:	441a      	add	r2, r3
 80189d2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80189d6:	3380      	adds	r3, #128	; 0x80
 80189d8:	12d2      	asrs	r2, r2, #11
 80189da:	601a      	str	r2, [r3, #0]
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80189dc:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80189e0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80189e4:	1ad2      	subs	r2, r2, r3
 80189e6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80189ea:	33c0      	adds	r3, #192	; 0xc0
 80189ec:	12d2      	asrs	r2, r2, #11
 80189ee:	601a      	str	r2, [r3, #0]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25, CONST_BITS-PASS1_BITS);
 80189f0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80189f4:	33a0      	adds	r3, #160	; 0xa0
 80189f6:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80189fa:	12d2      	asrs	r2, r2, #11
 80189fc:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80189fe:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8018a02:	3301      	adds	r3, #1
 8018a04:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8018a08:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8018a0c:	3302      	adds	r3, #2
 8018a0e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8018a12:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8018a16:	3304      	adds	r3, #4
 8018a18:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8018a1c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8018a20:	3304      	adds	r3, #4
 8018a22:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8018a26:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8018a2a:	2b07      	cmp	r3, #7
 8018a2c:	f77f adcf 	ble.w	80185ce <jpeg_idct_11x11+0x4e>
  }

  /* Pass 2: process 11 rows from work array, store into output array. */

  wsptr = workspace;
 8018a30:	f107 0314 	add.w	r3, r7, #20
 8018a34:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
  for (ctr = 0; ctr < 11; ctr++) {
 8018a38:	2300      	movs	r3, #0
 8018a3a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8018a3e:	e255      	b.n	8018eec <jpeg_idct_11x11+0x96c>
 8018a40:	ffffdb05 	.word	0xffffdb05
 8018a44:	ffffc5b4 	.word	0xffffc5b4
 8018a48:	ffffcf91 	.word	0xffffcf91
 8018a4c:	ffffe6c3 	.word	0xffffe6c3
 8018a50:	ffffd37d 	.word	0xffffd37d
 8018a54:	ffffe276 	.word	0xffffe276
 8018a58:	ffffdac9 	.word	0xffffdac9
 8018a5c:	ffffd9da 	.word	0xffffd9da
 8018a60:	ffffc675 	.word	0xffffc675
 8018a64:	ffffd10d 	.word	0xffffd10d
 8018a68:	ffffca16 	.word	0xffffca16
    outptr = output_buf[ctr] + output_col;
 8018a6c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8018a70:	009b      	lsls	r3, r3, #2
 8018a72:	463a      	mov	r2, r7
 8018a74:	6812      	ldr	r2, [r2, #0]
 8018a76:	4413      	add	r3, r2
 8018a78:	681a      	ldr	r2, [r3, #0]
 8018a7a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8018a7e:	4413      	add	r3, r2
 8018a80:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8018a84:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8018a88:	681b      	ldr	r3, [r3, #0]
 8018a8a:	3310      	adds	r3, #16
 8018a8c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    tmp10 <<= CONST_BITS;
 8018a90:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8018a94:	035b      	lsls	r3, r3, #13
 8018a96:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

    z1 = (INT32) wsptr[2];
 8018a9a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8018a9e:	3308      	adds	r3, #8
 8018aa0:	681b      	ldr	r3, [r3, #0]
 8018aa2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    z2 = (INT32) wsptr[4];
 8018aa6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8018aaa:	3310      	adds	r3, #16
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    z3 = (INT32) wsptr[6];
 8018ab2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8018ab6:	3318      	adds	r3, #24
 8018ab8:	681b      	ldr	r3, [r3, #0]
 8018aba:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0

    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8018abe:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8018ac2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8018ac6:	1ad3      	subs	r3, r2, r3
 8018ac8:	f245 127e 	movw	r2, #20862	; 0x517e
 8018acc:	fb02 f303 	mul.w	r3, r2, r3
 8018ad0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8018ad4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8018ad8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8018adc:	1ad3      	subs	r3, r2, r3
 8018ade:	f640 52c9 	movw	r2, #3529	; 0xdc9
 8018ae2:	fb02 f303 	mul.w	r3, r2, r3
 8018ae6:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    z4 = z1 + z3;
 8018aea:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8018aee:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8018af2:	4413      	add	r3, r2
 8018af4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
 8018af8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8018afc:	4af0      	ldr	r2, [pc, #960]	; (8018ec0 <jpeg_idct_11x11+0x940>)
 8018afe:	fb02 f303 	mul.w	r3, r2, r3
 8018b02:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    z4 -= z2;
 8018b06:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8018b0a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8018b0e:	1ad3      	subs	r3, r2, r3
 8018b10:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8018b14:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8018b18:	f642 326c 	movw	r2, #11116	; 0x2b6c
 8018b1c:	fb02 f303 	mul.w	r3, r2, r3
 8018b20:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8018b24:	4413      	add	r3, r2
 8018b26:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    tmp21 = tmp20 + tmp23 + tmp25 -
 8018b2a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8018b2e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8018b32:	441a      	add	r2, r3
 8018b34:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8018b38:	441a      	add	r2, r3
	    MULTIPLY(z2, FIX(1.821790775));          /* c2+c4+c10-c6 */
 8018b3a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8018b3e:	49e1      	ldr	r1, [pc, #900]	; (8018ec4 <jpeg_idct_11x11+0x944>)
 8018b40:	fb01 f303 	mul.w	r3, r1, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8018b44:	4413      	add	r3, r2
 8018b46:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8018b4a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8018b4e:	f244 32b5 	movw	r2, #17333	; 0x43b5
 8018b52:	fb02 f203 	mul.w	r2, r2, r3
 8018b56:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8018b5a:	4413      	add	r3, r2
 8018b5c:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8018b60:	4413      	add	r3, r2
 8018b62:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8018b66:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8018b6a:	4ad7      	ldr	r2, [pc, #860]	; (8018ec8 <jpeg_idct_11x11+0x948>)
 8018b6c:	fb02 f203 	mul.w	r2, r2, r3
 8018b70:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8018b74:	4413      	add	r3, r2
 8018b76:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8018b7a:	4413      	add	r3, r2
 8018b7c:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    tmp24 += tmp25;
 8018b80:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8018b84:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8018b88:	4413      	add	r3, r2
 8018b8a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8018b8e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8018b92:	4ace      	ldr	r2, [pc, #824]	; (8018ecc <jpeg_idct_11x11+0x94c>)
 8018b94:	fb02 f303 	mul.w	r3, r2, r3
 8018b98:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8018b9c:	4413      	add	r3, r2
 8018b9e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8018ba2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8018ba6:	f643 6239 	movw	r2, #15929	; 0x3e39
 8018baa:	fb02 f203 	mul.w	r2, r2, r3
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 8018bae:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8018bb2:	49c7      	ldr	r1, [pc, #796]	; (8018ed0 <jpeg_idct_11x11+0x950>)
 8018bb4:	fb01 f303 	mul.w	r3, r1, r3
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8018bb8:	4413      	add	r3, r2
 8018bba:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8018bbe:	4413      	add	r3, r2
 8018bc0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8018bc4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8018bc8:	f46f 5235 	mvn.w	r2, #11584	; 0x2d40
 8018bcc:	fb02 f303 	mul.w	r3, r2, r3
 8018bd0:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8018bd4:	4413      	add	r3, r2
 8018bd6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

    /* Odd part */

    z1 = (INT32) wsptr[1];
 8018bda:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8018bde:	3304      	adds	r3, #4
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    z2 = (INT32) wsptr[3];
 8018be6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8018bea:	330c      	adds	r3, #12
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    z3 = (INT32) wsptr[5];
 8018bf2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8018bf6:	3314      	adds	r3, #20
 8018bf8:	681b      	ldr	r3, [r3, #0]
 8018bfa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    z4 = (INT32) wsptr[7];
 8018bfe:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8018c02:	331c      	adds	r3, #28
 8018c04:	681b      	ldr	r3, [r3, #0]
 8018c06:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

    tmp11 = z1 + z2;
 8018c0a:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8018c0e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8018c12:	4413      	add	r3, r2
 8018c14:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8018c18:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8018c1c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8018c20:	441a      	add	r2, r3
 8018c22:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8018c26:	4413      	add	r3, r2
 8018c28:	f44f 624c 	mov.w	r2, #3264	; 0xcc0
 8018c2c:	fb02 f303 	mul.w	r3, r2, r3
 8018c30:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 8018c34:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8018c38:	f641 426a 	movw	r2, #7274	; 0x1c6a
 8018c3c:	fb02 f303 	mul.w	r3, r2, r3
 8018c40:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8018c44:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8018c48:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8018c4c:	4413      	add	r3, r2
 8018c4e:	f241 5274 	movw	r2, #5492	; 0x1574
 8018c52:	fb02 f303 	mul.w	r3, r2, r3
 8018c56:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8018c5a:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8018c5e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8018c62:	4413      	add	r3, r2
 8018c64:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8018c68:	fb02 f303 	mul.w	r3, r2, r3
 8018c6c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8018c70:	4413      	add	r3, r2
 8018c72:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    tmp10 = tmp11 + tmp12 + tmp13 -
 8018c76:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8018c7a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8018c7e:	441a      	add	r2, r3
 8018c80:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8018c84:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
 8018c86:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8018c8a:	4992      	ldr	r1, [pc, #584]	; (8018ed4 <jpeg_idct_11x11+0x954>)
 8018c8c:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = tmp11 + tmp12 + tmp13 -
 8018c90:	4413      	add	r3, r2
 8018c92:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8018c96:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8018c9a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8018c9e:	4413      	add	r3, r2
 8018ca0:	4a8d      	ldr	r2, [pc, #564]	; (8018ed8 <jpeg_idct_11x11+0x958>)
 8018ca2:	fb02 f303 	mul.w	r3, r2, r3
 8018ca6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8018caa:	4413      	add	r3, r2
 8018cac:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8018cb0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8018cb4:	f244 2258 	movw	r2, #16984	; 0x4258
 8018cb8:	fb02 f203 	mul.w	r2, r2, r3
 8018cbc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8018cc0:	4413      	add	r3, r2
 8018cc2:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8018cc6:	4413      	add	r3, r2
 8018cc8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8018ccc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8018cd0:	4a82      	ldr	r2, [pc, #520]	; (8018edc <jpeg_idct_11x11+0x95c>)
 8018cd2:	fb02 f203 	mul.w	r2, r2, r3
 8018cd6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8018cda:	4413      	add	r3, r2
 8018cdc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8018ce0:	4413      	add	r3, r2
 8018ce2:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8018ce6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8018cea:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8018cee:	4413      	add	r3, r2
 8018cf0:	4a7b      	ldr	r2, [pc, #492]	; (8018ee0 <jpeg_idct_11x11+0x960>)
 8018cf2:	fb02 f303 	mul.w	r3, r2, r3
 8018cf6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    tmp11 += z1;
 8018cfa:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8018cfe:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8018d02:	4413      	add	r3, r2
 8018d04:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8018d08:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8018d0c:	f244 3247 	movw	r2, #17223	; 0x4347
 8018d10:	fb02 f203 	mul.w	r2, r2, r3
 8018d14:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8018d18:	4413      	add	r3, r2
 8018d1a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8018d1e:	4413      	add	r3, r2
 8018d20:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8018d24:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8018d28:	4a6e      	ldr	r2, [pc, #440]	; (8018ee4 <jpeg_idct_11x11+0x964>)
 8018d2a:	fb02 f203 	mul.w	r2, r2, r3
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8018d2e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8018d32:	f242 010b 	movw	r1, #8203	; 0x200b
 8018d36:	fb01 f303 	mul.w	r3, r1, r3
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8018d3a:	441a      	add	r2, r3
	     MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */
 8018d3c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8018d40:	4969      	ldr	r1, [pc, #420]	; (8018ee8 <jpeg_idct_11x11+0x968>)
 8018d42:	fb01 f303 	mul.w	r3, r1, r3
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8018d46:	4413      	add	r3, r2
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8018d48:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8018d4c:	4413      	add	r3, r2
 8018d4e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8018d52:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8018d56:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8018d5a:	4413      	add	r3, r2
 8018d5c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8018d5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8018d62:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8018d66:	4413      	add	r3, r2
 8018d68:	781a      	ldrb	r2, [r3, #0]
 8018d6a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8018d6e:	701a      	strb	r2, [r3, #0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8018d70:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8018d74:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8018d78:	1ad3      	subs	r3, r2, r3
 8018d7a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8018d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8018d80:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8018d84:	441a      	add	r2, r3
 8018d86:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8018d8a:	330a      	adds	r3, #10
 8018d8c:	7812      	ldrb	r2, [r2, #0]
 8018d8e:	701a      	strb	r2, [r3, #0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8018d90:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8018d94:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8018d98:	4413      	add	r3, r2
 8018d9a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8018d9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8018da0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8018da4:	441a      	add	r2, r3
 8018da6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8018daa:	3301      	adds	r3, #1
 8018dac:	7812      	ldrb	r2, [r2, #0]
 8018dae:	701a      	strb	r2, [r3, #0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8018db0:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8018db4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8018db8:	1ad3      	subs	r3, r2, r3
 8018dba:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8018dbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8018dc0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8018dc4:	441a      	add	r2, r3
 8018dc6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8018dca:	3309      	adds	r3, #9
 8018dcc:	7812      	ldrb	r2, [r2, #0]
 8018dce:	701a      	strb	r2, [r3, #0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8018dd0:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8018dd4:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8018dd8:	4413      	add	r3, r2
 8018dda:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8018ddc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8018de0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8018de4:	441a      	add	r2, r3
 8018de6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8018dea:	3302      	adds	r3, #2
 8018dec:	7812      	ldrb	r2, [r2, #0]
 8018dee:	701a      	strb	r2, [r3, #0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8018df0:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8018df4:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8018df8:	1ad3      	subs	r3, r2, r3
 8018dfa:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8018dfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8018e00:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8018e04:	441a      	add	r2, r3
 8018e06:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8018e0a:	3308      	adds	r3, #8
 8018e0c:	7812      	ldrb	r2, [r2, #0]
 8018e0e:	701a      	strb	r2, [r3, #0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8018e10:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8018e14:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8018e18:	4413      	add	r3, r2
 8018e1a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8018e1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8018e20:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8018e24:	441a      	add	r2, r3
 8018e26:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8018e2a:	3303      	adds	r3, #3
 8018e2c:	7812      	ldrb	r2, [r2, #0]
 8018e2e:	701a      	strb	r2, [r3, #0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8018e30:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8018e34:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8018e38:	1ad3      	subs	r3, r2, r3
 8018e3a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8018e3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8018e40:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8018e44:	441a      	add	r2, r3
 8018e46:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8018e4a:	3307      	adds	r3, #7
 8018e4c:	7812      	ldrb	r2, [r2, #0]
 8018e4e:	701a      	strb	r2, [r3, #0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8018e50:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8018e54:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8018e58:	4413      	add	r3, r2
 8018e5a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8018e5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8018e60:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8018e64:	441a      	add	r2, r3
 8018e66:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8018e6a:	3304      	adds	r3, #4
 8018e6c:	7812      	ldrb	r2, [r2, #0]
 8018e6e:	701a      	strb	r2, [r3, #0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8018e70:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8018e74:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8018e78:	1ad3      	subs	r3, r2, r3
 8018e7a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8018e7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8018e80:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8018e84:	441a      	add	r2, r3
 8018e86:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8018e8a:	3306      	adds	r3, #6
 8018e8c:	7812      	ldrb	r2, [r2, #0]
 8018e8e:	701a      	strb	r2, [r3, #0]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 8018e90:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8018e94:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8018e96:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 8018e9a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8018e9e:	441a      	add	r2, r3
 8018ea0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8018ea4:	3305      	adds	r3, #5
 8018ea6:	7812      	ldrb	r2, [r2, #0]
 8018ea8:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 8018eaa:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8018eae:	3320      	adds	r3, #32
 8018eb0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
  for (ctr = 0; ctr < 11; ctr++) {
 8018eb4:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8018eb8:	3301      	adds	r3, #1
 8018eba:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8018ebe:	e015      	b.n	8018eec <jpeg_idct_11x11+0x96c>
 8018ec0:	ffffdb05 	.word	0xffffdb05
 8018ec4:	ffffc5b4 	.word	0xffffc5b4
 8018ec8:	ffffcf91 	.word	0xffffcf91
 8018ecc:	ffffe6c3 	.word	0xffffe6c3
 8018ed0:	ffffd37d 	.word	0xffffd37d
 8018ed4:	ffffe276 	.word	0xffffe276
 8018ed8:	ffffdac9 	.word	0xffffdac9
 8018edc:	ffffd9da 	.word	0xffffd9da
 8018ee0:	ffffc675 	.word	0xffffc675
 8018ee4:	ffffd10d 	.word	0xffffd10d
 8018ee8:	ffffca16 	.word	0xffffca16
 8018eec:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8018ef0:	2b0a      	cmp	r3, #10
 8018ef2:	f77f adbb 	ble.w	8018a6c <jpeg_idct_11x11+0x4ec>
  }
}
 8018ef6:	bf00      	nop
 8018ef8:	bf00      	nop
 8018efa:	f507 77e4 	add.w	r7, r7, #456	; 0x1c8
 8018efe:	46bd      	mov	sp, r7
 8018f00:	bc90      	pop	{r4, r7}
 8018f02:	4770      	bx	lr

08018f04 <jpeg_idct_12x12>:

GLOBAL(void)
jpeg_idct_12x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8018f04:	b490      	push	{r4, r7}
 8018f06:	b0fa      	sub	sp, #488	; 0x1e8
 8018f08:	af00      	add	r7, sp, #0
 8018f0a:	f107 040c 	add.w	r4, r7, #12
 8018f0e:	6020      	str	r0, [r4, #0]
 8018f10:	f107 0008 	add.w	r0, r7, #8
 8018f14:	6001      	str	r1, [r0, #0]
 8018f16:	1d39      	adds	r1, r7, #4
 8018f18:	600a      	str	r2, [r1, #0]
 8018f1a:	463a      	mov	r2, r7
 8018f1c:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8018f1e:	f107 030c 	add.w	r3, r7, #12
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8018f28:	3380      	adds	r3, #128	; 0x80
 8018f2a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
  int workspace[8*12];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 8018f2e:	1d3b      	adds	r3, r7, #4
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8018f36:	f107 0308 	add.w	r3, r7, #8
 8018f3a:	681b      	ldr	r3, [r3, #0]
 8018f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018f3e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
  wsptr = workspace;
 8018f42:	f107 0310 	add.w	r3, r7, #16
 8018f46:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8018f4a:	2300      	movs	r3, #0
 8018f4c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8018f50:	e218      	b.n	8019384 <jpeg_idct_12x12+0x480>
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8018f52:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8018f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018f5a:	461a      	mov	r2, r3
 8018f5c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8018f60:	681b      	ldr	r3, [r3, #0]
 8018f62:	fb03 f302 	mul.w	r3, r3, r2
 8018f66:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    z3 <<= CONST_BITS;
 8018f6a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8018f6e:	035b      	lsls	r3, r3, #13
 8018f70:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    /* Add fudge factor here for final descale. */
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8018f74:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8018f78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8018f7c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc

    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8018f80:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8018f84:	3340      	adds	r3, #64	; 0x40
 8018f86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018f8a:	461a      	mov	r2, r3
 8018f8c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8018f90:	3380      	adds	r3, #128	; 0x80
 8018f92:	681b      	ldr	r3, [r3, #0]
 8018f94:	fb03 f302 	mul.w	r3, r3, r2
 8018f98:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8018f9c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8018fa0:	f242 7231 	movw	r2, #10033	; 0x2731
 8018fa4:	fb02 f303 	mul.w	r3, r2, r3
 8018fa8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8

    tmp10 = z3 + z4;
 8018fac:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8018fb0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8018fb4:	4413      	add	r3, r2
 8018fb6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    tmp11 = z3 - z4;
 8018fba:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8018fbe:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8018fc2:	1ad3      	subs	r3, r2, r3
 8018fc4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8018fc8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8018fcc:	3320      	adds	r3, #32
 8018fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018fd2:	461a      	mov	r2, r3
 8018fd4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8018fd8:	3340      	adds	r3, #64	; 0x40
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	fb03 f302 	mul.w	r3, r3, r2
 8018fe0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8018fe4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8018fe8:	f642 32b6 	movw	r2, #11190	; 0x2bb6
 8018fec:	fb02 f303 	mul.w	r3, r2, r3
 8018ff0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    z1 <<= CONST_BITS;
 8018ff4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8018ff8:	035b      	lsls	r3, r3, #13
 8018ffa:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8018ffe:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8019002:	3360      	adds	r3, #96	; 0x60
 8019004:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019008:	461a      	mov	r2, r3
 801900a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801900e:	33c0      	adds	r3, #192	; 0xc0
 8019010:	681b      	ldr	r3, [r3, #0]
 8019012:	fb03 f302 	mul.w	r3, r3, r2
 8019016:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    z2 <<= CONST_BITS;
 801901a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801901e:	035b      	lsls	r3, r3, #13
 8019020:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

    tmp12 = z1 - z2;
 8019024:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8019028:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801902c:	1ad3      	subs	r3, r2, r3
 801902e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

    tmp21 = z3 + tmp12;
 8019032:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8019036:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801903a:	4413      	add	r3, r2
 801903c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
    tmp24 = z3 - tmp12;
 8019040:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8019044:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8019048:	1ad3      	subs	r3, r2, r3
 801904a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

    tmp12 = z4 + z2;
 801904e:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8019052:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8019056:	4413      	add	r3, r2
 8019058:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

    tmp20 = tmp10 + tmp12;
 801905c:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8019060:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8019064:	4413      	add	r3, r2
 8019066:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    tmp25 = tmp10 - tmp12;
 801906a:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 801906e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8019072:	1ad3      	subs	r3, r2, r3
 8019074:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

    tmp12 = z4 - z1 - z2;
 8019078:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 801907c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8019080:	1ad2      	subs	r2, r2, r3
 8019082:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8019086:	1ad3      	subs	r3, r2, r3
 8019088:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

    tmp22 = tmp11 + tmp12;
 801908c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8019090:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8019094:	4413      	add	r3, r2
 8019096:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    tmp23 = tmp11 - tmp12;
 801909a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801909e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80190a2:	1ad3      	subs	r3, r2, r3
 80190a4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80190a8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80190ac:	3310      	adds	r3, #16
 80190ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80190b2:	461a      	mov	r2, r3
 80190b4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80190b8:	3320      	adds	r3, #32
 80190ba:	681b      	ldr	r3, [r3, #0]
 80190bc:	fb03 f302 	mul.w	r3, r3, r2
 80190c0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80190c4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80190c8:	3330      	adds	r3, #48	; 0x30
 80190ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80190ce:	461a      	mov	r2, r3
 80190d0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80190d4:	3360      	adds	r3, #96	; 0x60
 80190d6:	681b      	ldr	r3, [r3, #0]
 80190d8:	fb03 f302 	mul.w	r3, r3, r2
 80190dc:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80190e0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80190e4:	3350      	adds	r3, #80	; 0x50
 80190e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80190ea:	461a      	mov	r2, r3
 80190ec:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80190f0:	33a0      	adds	r3, #160	; 0xa0
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	fb03 f302 	mul.w	r3, r3, r2
 80190f8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80190fc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8019100:	3370      	adds	r3, #112	; 0x70
 8019102:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019106:	461a      	mov	r2, r3
 8019108:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801910c:	33e0      	adds	r3, #224	; 0xe0
 801910e:	681b      	ldr	r3, [r3, #0]
 8019110:	fb03 f302 	mul.w	r3, r3, r2
 8019114:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8019118:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801911c:	f642 12cf 	movw	r2, #10703	; 0x29cf
 8019120:	fb02 f303 	mul.w	r3, r2, r3
 8019124:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8019128:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801912c:	4a9c      	ldr	r2, [pc, #624]	; (80193a0 <jpeg_idct_12x12+0x49c>)
 801912e:	fb02 f303 	mul.w	r3, r2, r3
 8019132:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198

    tmp10 = z1 + z3;
 8019136:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 801913a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 801913e:	4413      	add	r3, r2
 8019140:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8019144:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8019148:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 801914c:	4413      	add	r3, r2
 801914e:	f641 328d 	movw	r2, #7053	; 0x1b8d
 8019152:	fb02 f303 	mul.w	r3, r2, r3
 8019156:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801915a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 801915e:	f640 025b 	movw	r2, #2139	; 0x85b
 8019162:	fb02 f303 	mul.w	r3, r2, r3
 8019166:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 801916a:	4413      	add	r3, r2
 801916c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8019170:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8019174:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8019178:	18d1      	adds	r1, r2, r3
 801917a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 801917e:	4613      	mov	r3, r2
 8019180:	00db      	lsls	r3, r3, #3
 8019182:	4413      	add	r3, r2
 8019184:	021a      	lsls	r2, r3, #8
 8019186:	1ad3      	subs	r3, r2, r3
 8019188:	440b      	add	r3, r1
 801918a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801918e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8019192:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8019196:	4413      	add	r3, r2
 8019198:	4a82      	ldr	r2, [pc, #520]	; (80193a4 <jpeg_idct_12x12+0x4a0>)
 801919a:	fb02 f303 	mul.w	r3, r2, r3
 801919e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80191a2:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80191a6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80191aa:	441a      	add	r2, r3
 80191ac:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80191b0:	497d      	ldr	r1, [pc, #500]	; (80193a8 <jpeg_idct_12x12+0x4a4>)
 80191b2:	fb01 f303 	mul.w	r3, r1, r3
 80191b6:	4413      	add	r3, r2
 80191b8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80191bc:	4413      	add	r3, r2
 80191be:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80191c2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80191c6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80191ca:	1ad2      	subs	r2, r2, r3
 80191cc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80191d0:	f243 21c6 	movw	r1, #12998	; 0x32c6
 80191d4:	fb01 f303 	mul.w	r3, r1, r3
 80191d8:	4413      	add	r3, r2
 80191da:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80191de:	4413      	add	r3, r2
 80191e0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80191e4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80191e8:	4a70      	ldr	r2, [pc, #448]	; (80193ac <jpeg_idct_12x12+0x4a8>)
 80191ea:	fb02 f203 	mul.w	r2, r2, r3
 80191ee:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80191f2:	441a      	add	r2, r3
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */
 80191f4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80191f8:	496d      	ldr	r1, [pc, #436]	; (80193b0 <jpeg_idct_12x12+0x4ac>)
 80191fa:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80191fe:	4413      	add	r3, r2
 8019200:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8019204:	4413      	add	r3, r2
 8019206:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

    z1 -= z4;
 801920a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 801920e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8019212:	1ad3      	subs	r3, r2, r3
 8019214:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    z2 -= z3;
 8019218:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 801921c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8019220:	1ad3      	subs	r3, r2, r3
 8019222:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8019226:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 801922a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801922e:	4413      	add	r3, r2
 8019230:	f241 1251 	movw	r2, #4433	; 0x1151
 8019234:	fb02 f303 	mul.w	r3, r2, r3
 8019238:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 801923c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8019240:	f641 027e 	movw	r2, #6270	; 0x187e
 8019244:	fb02 f303 	mul.w	r3, r2, r3
 8019248:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 801924c:	4413      	add	r3, r2
 801924e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8019252:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8019256:	4a57      	ldr	r2, [pc, #348]	; (80193b4 <jpeg_idct_12x12+0x4b0>)
 8019258:	fb02 f303 	mul.w	r3, r2, r3
 801925c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8019260:	4413      	add	r3, r2
 8019262:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8019266:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801926a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 801926e:	4413      	add	r3, r2
 8019270:	12da      	asrs	r2, r3, #11
 8019272:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8019276:	601a      	str	r2, [r3, #0]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8019278:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801927c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8019280:	1ad2      	subs	r2, r2, r3
 8019282:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8019286:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801928a:	12d2      	asrs	r2, r2, #11
 801928c:	601a      	str	r2, [r3, #0]
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801928e:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8019292:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8019296:	441a      	add	r2, r3
 8019298:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 801929c:	3320      	adds	r3, #32
 801929e:	12d2      	asrs	r2, r2, #11
 80192a0:	601a      	str	r2, [r3, #0]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80192a2:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 80192a6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80192aa:	1ad2      	subs	r2, r2, r3
 80192ac:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80192b0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80192b4:	12d2      	asrs	r2, r2, #11
 80192b6:	601a      	str	r2, [r3, #0]
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80192b8:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80192bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80192c0:	441a      	add	r2, r3
 80192c2:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80192c6:	3340      	adds	r3, #64	; 0x40
 80192c8:	12d2      	asrs	r2, r2, #11
 80192ca:	601a      	str	r2, [r3, #0]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80192cc:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80192d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80192d4:	1ad2      	subs	r2, r2, r3
 80192d6:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80192da:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80192de:	12d2      	asrs	r2, r2, #11
 80192e0:	601a      	str	r2, [r3, #0]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80192e2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80192e6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80192ea:	441a      	add	r2, r3
 80192ec:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80192f0:	3360      	adds	r3, #96	; 0x60
 80192f2:	12d2      	asrs	r2, r2, #11
 80192f4:	601a      	str	r2, [r3, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80192f6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80192fa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80192fe:	1ad2      	subs	r2, r2, r3
 8019300:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8019304:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019308:	12d2      	asrs	r2, r2, #11
 801930a:	601a      	str	r2, [r3, #0]
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801930c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8019310:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8019314:	441a      	add	r2, r3
 8019316:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 801931a:	3380      	adds	r3, #128	; 0x80
 801931c:	12d2      	asrs	r2, r2, #11
 801931e:	601a      	str	r2, [r3, #0]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8019320:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8019324:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8019328:	1ad2      	subs	r2, r2, r3
 801932a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 801932e:	33e0      	adds	r3, #224	; 0xe0
 8019330:	12d2      	asrs	r2, r2, #11
 8019332:	601a      	str	r2, [r3, #0]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8019334:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8019338:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801933c:	441a      	add	r2, r3
 801933e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8019342:	33a0      	adds	r3, #160	; 0xa0
 8019344:	12d2      	asrs	r2, r2, #11
 8019346:	601a      	str	r2, [r3, #0]
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8019348:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 801934c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8019350:	1ad2      	subs	r2, r2, r3
 8019352:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8019356:	33c0      	adds	r3, #192	; 0xc0
 8019358:	12d2      	asrs	r2, r2, #11
 801935a:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801935c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8019360:	3301      	adds	r3, #1
 8019362:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8019366:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801936a:	3302      	adds	r3, #2
 801936c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8019370:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8019374:	3304      	adds	r3, #4
 8019376:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 801937a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 801937e:	3304      	adds	r3, #4
 8019380:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8019384:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8019388:	2b07      	cmp	r3, #7
 801938a:	f77f ade2 	ble.w	8018f52 <jpeg_idct_12x12+0x4e>
  }

  /* Pass 2: process 12 rows from work array, store into output array. */

  wsptr = workspace;
 801938e:	f107 0310 	add.w	r3, r7, #16
 8019392:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
  for (ctr = 0; ctr < 12; ctr++) {
 8019396:	2300      	movs	r3, #0
 8019398:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 801939c:	e227      	b.n	80197ee <jpeg_idct_12x12+0x8ea>
 801939e:	bf00      	nop
 80193a0:	ffffeeaf 	.word	0xffffeeaf
 80193a4:	ffffde8b 	.word	0xffffde8b
 80193a8:	ffffd0b0 	.word	0xffffd0b0
 80193ac:	ffffea5c 	.word	0xffffea5c
 80193b0:	ffffc08c 	.word	0xffffc08c
 80193b4:	ffffc4df 	.word	0xffffc4df
    outptr = output_buf[ctr] + output_col;
 80193b8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80193bc:	009b      	lsls	r3, r3, #2
 80193be:	463a      	mov	r2, r7
 80193c0:	6812      	ldr	r2, [r2, #0]
 80193c2:	4413      	add	r3, r2
 80193c4:	681a      	ldr	r2, [r3, #0]
 80193c6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80193ca:	4413      	add	r3, r2
 80193cc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

    /* Even part */

    /* Add fudge factor here for final descale. */
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80193d0:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80193d4:	681b      	ldr	r3, [r3, #0]
 80193d6:	3310      	adds	r3, #16
 80193d8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    z3 <<= CONST_BITS;
 80193dc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80193e0:	035b      	lsls	r3, r3, #13
 80193e2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc

    z4 = (INT32) wsptr[4];
 80193e6:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80193ea:	3310      	adds	r3, #16
 80193ec:	681b      	ldr	r3, [r3, #0]
 80193ee:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80193f2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80193f6:	f242 7231 	movw	r2, #10033	; 0x2731
 80193fa:	fb02 f303 	mul.w	r3, r2, r3
 80193fe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8

    tmp10 = z3 + z4;
 8019402:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8019406:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 801940a:	4413      	add	r3, r2
 801940c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    tmp11 = z3 - z4;
 8019410:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8019414:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8019418:	1ad3      	subs	r3, r2, r3
 801941a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

    z1 = (INT32) wsptr[2];
 801941e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8019422:	3308      	adds	r3, #8
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 801942a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801942e:	f642 32b6 	movw	r2, #11190	; 0x2bb6
 8019432:	fb02 f303 	mul.w	r3, r2, r3
 8019436:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    z1 <<= CONST_BITS;
 801943a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801943e:	035b      	lsls	r3, r3, #13
 8019440:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    z2 = (INT32) wsptr[6];
 8019444:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8019448:	3318      	adds	r3, #24
 801944a:	681b      	ldr	r3, [r3, #0]
 801944c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    z2 <<= CONST_BITS;
 8019450:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8019454:	035b      	lsls	r3, r3, #13
 8019456:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

    tmp12 = z1 - z2;
 801945a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 801945e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8019462:	1ad3      	subs	r3, r2, r3
 8019464:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

    tmp21 = z3 + tmp12;
 8019468:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 801946c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8019470:	4413      	add	r3, r2
 8019472:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
    tmp24 = z3 - tmp12;
 8019476:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 801947a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801947e:	1ad3      	subs	r3, r2, r3
 8019480:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

    tmp12 = z4 + z2;
 8019484:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8019488:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801948c:	4413      	add	r3, r2
 801948e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

    tmp20 = tmp10 + tmp12;
 8019492:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8019496:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801949a:	4413      	add	r3, r2
 801949c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    tmp25 = tmp10 - tmp12;
 80194a0:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 80194a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80194a8:	1ad3      	subs	r3, r2, r3
 80194aa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

    tmp12 = z4 - z1 - z2;
 80194ae:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 80194b2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80194b6:	1ad2      	subs	r2, r2, r3
 80194b8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80194bc:	1ad3      	subs	r3, r2, r3
 80194be:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

    tmp22 = tmp11 + tmp12;
 80194c2:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80194c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80194ca:	4413      	add	r3, r2
 80194cc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    tmp23 = tmp11 - tmp12;
 80194d0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80194d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80194d8:	1ad3      	subs	r3, r2, r3
 80194da:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

    /* Odd part */

    z1 = (INT32) wsptr[1];
 80194de:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80194e2:	3304      	adds	r3, #4
 80194e4:	681b      	ldr	r3, [r3, #0]
 80194e6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    z2 = (INT32) wsptr[3];
 80194ea:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80194ee:	330c      	adds	r3, #12
 80194f0:	681b      	ldr	r3, [r3, #0]
 80194f2:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    z3 = (INT32) wsptr[5];
 80194f6:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80194fa:	3314      	adds	r3, #20
 80194fc:	681b      	ldr	r3, [r3, #0]
 80194fe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    z4 = (INT32) wsptr[7];
 8019502:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8019506:	331c      	adds	r3, #28
 8019508:	681b      	ldr	r3, [r3, #0]
 801950a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801950e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8019512:	f642 12cf 	movw	r2, #10703	; 0x29cf
 8019516:	fb02 f303 	mul.w	r3, r2, r3
 801951a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801951e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8019522:	4ab9      	ldr	r2, [pc, #740]	; (8019808 <jpeg_idct_12x12+0x904>)
 8019524:	fb02 f303 	mul.w	r3, r2, r3
 8019528:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198

    tmp10 = z1 + z3;
 801952c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8019530:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8019534:	4413      	add	r3, r2
 8019536:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801953a:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 801953e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8019542:	4413      	add	r3, r2
 8019544:	f641 328d 	movw	r2, #7053	; 0x1b8d
 8019548:	fb02 f303 	mul.w	r3, r2, r3
 801954c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8019550:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8019554:	f640 025b 	movw	r2, #2139	; 0x85b
 8019558:	fb02 f303 	mul.w	r3, r2, r3
 801955c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8019560:	4413      	add	r3, r2
 8019562:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8019566:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 801956a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801956e:	18d1      	adds	r1, r2, r3
 8019570:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8019574:	4613      	mov	r3, r2
 8019576:	00db      	lsls	r3, r3, #3
 8019578:	4413      	add	r3, r2
 801957a:	021a      	lsls	r2, r3, #8
 801957c:	1ad3      	subs	r3, r2, r3
 801957e:	440b      	add	r3, r1
 8019580:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8019584:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8019588:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 801958c:	4413      	add	r3, r2
 801958e:	4a9f      	ldr	r2, [pc, #636]	; (801980c <jpeg_idct_12x12+0x908>)
 8019590:	fb02 f303 	mul.w	r3, r2, r3
 8019594:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8019598:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 801959c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80195a0:	441a      	add	r2, r3
 80195a2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80195a6:	499a      	ldr	r1, [pc, #616]	; (8019810 <jpeg_idct_12x12+0x90c>)
 80195a8:	fb01 f303 	mul.w	r3, r1, r3
 80195ac:	4413      	add	r3, r2
 80195ae:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80195b2:	4413      	add	r3, r2
 80195b4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80195b8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80195bc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80195c0:	1ad2      	subs	r2, r2, r3
 80195c2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80195c6:	f243 21c6 	movw	r1, #12998	; 0x32c6
 80195ca:	fb01 f303 	mul.w	r3, r1, r3
 80195ce:	4413      	add	r3, r2
 80195d0:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80195d4:	4413      	add	r3, r2
 80195d6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80195da:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80195de:	4a8d      	ldr	r2, [pc, #564]	; (8019814 <jpeg_idct_12x12+0x910>)
 80195e0:	fb02 f203 	mul.w	r2, r2, r3
 80195e4:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80195e8:	441a      	add	r2, r3
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */
 80195ea:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80195ee:	498a      	ldr	r1, [pc, #552]	; (8019818 <jpeg_idct_12x12+0x914>)
 80195f0:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80195f4:	4413      	add	r3, r2
 80195f6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80195fa:	4413      	add	r3, r2
 80195fc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

    z1 -= z4;
 8019600:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8019604:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8019608:	1ad3      	subs	r3, r2, r3
 801960a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    z2 -= z3;
 801960e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8019612:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8019616:	1ad3      	subs	r3, r2, r3
 8019618:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801961c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8019620:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8019624:	4413      	add	r3, r2
 8019626:	f241 1251 	movw	r2, #4433	; 0x1151
 801962a:	fb02 f303 	mul.w	r3, r2, r3
 801962e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8019632:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8019636:	f641 027e 	movw	r2, #6270	; 0x187e
 801963a:	fb02 f303 	mul.w	r3, r2, r3
 801963e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8019642:	4413      	add	r3, r2
 8019644:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8019648:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801964c:	4a73      	ldr	r2, [pc, #460]	; (801981c <jpeg_idct_12x12+0x918>)
 801964e:	fb02 f303 	mul.w	r3, r2, r3
 8019652:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8019656:	4413      	add	r3, r2
 8019658:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801965c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8019660:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8019664:	4413      	add	r3, r2
 8019666:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8019668:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801966c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8019670:	4413      	add	r3, r2
 8019672:	781a      	ldrb	r2, [r3, #0]
 8019674:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8019678:	701a      	strb	r2, [r3, #0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801967a:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801967e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8019682:	1ad3      	subs	r3, r2, r3
 8019684:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8019686:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801968a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 801968e:	441a      	add	r2, r3
 8019690:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8019694:	330b      	adds	r3, #11
 8019696:	7812      	ldrb	r2, [r2, #0]
 8019698:	701a      	strb	r2, [r3, #0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801969a:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 801969e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80196a2:	4413      	add	r3, r2
 80196a4:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80196a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80196aa:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80196ae:	441a      	add	r2, r3
 80196b0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80196b4:	3301      	adds	r3, #1
 80196b6:	7812      	ldrb	r2, [r2, #0]
 80196b8:	701a      	strb	r2, [r3, #0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80196ba:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 80196be:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80196c2:	1ad3      	subs	r3, r2, r3
 80196c4:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80196c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80196ca:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80196ce:	441a      	add	r2, r3
 80196d0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80196d4:	330a      	adds	r3, #10
 80196d6:	7812      	ldrb	r2, [r2, #0]
 80196d8:	701a      	strb	r2, [r3, #0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80196da:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80196de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80196e2:	4413      	add	r3, r2
 80196e4:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80196e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80196ea:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80196ee:	441a      	add	r2, r3
 80196f0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80196f4:	3302      	adds	r3, #2
 80196f6:	7812      	ldrb	r2, [r2, #0]
 80196f8:	701a      	strb	r2, [r3, #0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80196fa:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80196fe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8019702:	1ad3      	subs	r3, r2, r3
 8019704:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8019706:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801970a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 801970e:	441a      	add	r2, r3
 8019710:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8019714:	3309      	adds	r3, #9
 8019716:	7812      	ldrb	r2, [r2, #0]
 8019718:	701a      	strb	r2, [r3, #0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801971a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801971e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8019722:	4413      	add	r3, r2
 8019724:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8019726:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801972a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 801972e:	441a      	add	r2, r3
 8019730:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8019734:	3303      	adds	r3, #3
 8019736:	7812      	ldrb	r2, [r2, #0]
 8019738:	701a      	strb	r2, [r3, #0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801973a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801973e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8019742:	1ad3      	subs	r3, r2, r3
 8019744:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8019746:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801974a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 801974e:	441a      	add	r2, r3
 8019750:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8019754:	3308      	adds	r3, #8
 8019756:	7812      	ldrb	r2, [r2, #0]
 8019758:	701a      	strb	r2, [r3, #0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801975a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 801975e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8019762:	4413      	add	r3, r2
 8019764:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8019766:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801976a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 801976e:	441a      	add	r2, r3
 8019770:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8019774:	3304      	adds	r3, #4
 8019776:	7812      	ldrb	r2, [r2, #0]
 8019778:	701a      	strb	r2, [r3, #0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801977a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 801977e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8019782:	1ad3      	subs	r3, r2, r3
 8019784:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8019786:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801978a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 801978e:	441a      	add	r2, r3
 8019790:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8019794:	3307      	adds	r3, #7
 8019796:	7812      	ldrb	r2, [r2, #0]
 8019798:	701a      	strb	r2, [r3, #0]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801979a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 801979e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80197a2:	4413      	add	r3, r2
 80197a4:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80197a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80197aa:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80197ae:	441a      	add	r2, r3
 80197b0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80197b4:	3305      	adds	r3, #5
 80197b6:	7812      	ldrb	r2, [r2, #0]
 80197b8:	701a      	strb	r2, [r3, #0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80197ba:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80197be:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80197c2:	1ad3      	subs	r3, r2, r3
 80197c4:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80197c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80197ca:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80197ce:	441a      	add	r2, r3
 80197d0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80197d4:	3306      	adds	r3, #6
 80197d6:	7812      	ldrb	r2, [r2, #0]
 80197d8:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 80197da:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80197de:	3320      	adds	r3, #32
 80197e0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
  for (ctr = 0; ctr < 12; ctr++) {
 80197e4:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80197e8:	3301      	adds	r3, #1
 80197ea:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80197ee:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80197f2:	2b0b      	cmp	r3, #11
 80197f4:	f77f ade0 	ble.w	80193b8 <jpeg_idct_12x12+0x4b4>
  }
}
 80197f8:	bf00      	nop
 80197fa:	bf00      	nop
 80197fc:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 8019800:	46bd      	mov	sp, r7
 8019802:	bc90      	pop	{r4, r7}
 8019804:	4770      	bx	lr
 8019806:	bf00      	nop
 8019808:	ffffeeaf 	.word	0xffffeeaf
 801980c:	ffffde8b 	.word	0xffffde8b
 8019810:	ffffd0b0 	.word	0xffffd0b0
 8019814:	ffffea5c 	.word	0xffffea5c
 8019818:	ffffc08c 	.word	0xffffc08c
 801981c:	ffffc4df 	.word	0xffffc4df

08019820 <jpeg_idct_13x13>:

GLOBAL(void)
jpeg_idct_13x13 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8019820:	b490      	push	{r4, r7}
 8019822:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8019826:	af00      	add	r7, sp, #0
 8019828:	f107 040c 	add.w	r4, r7, #12
 801982c:	6020      	str	r0, [r4, #0]
 801982e:	f107 0008 	add.w	r0, r7, #8
 8019832:	6001      	str	r1, [r0, #0]
 8019834:	1d39      	adds	r1, r7, #4
 8019836:	600a      	str	r2, [r1, #0]
 8019838:	463a      	mov	r2, r7
 801983a:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801983c:	f107 030c 	add.w	r3, r7, #12
 8019840:	681b      	ldr	r3, [r3, #0]
 8019842:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8019846:	3380      	adds	r3, #128	; 0x80
 8019848:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
  int workspace[8*13];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 801984c:	1d3b      	adds	r3, r7, #4
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8019854:	f107 0308 	add.w	r3, r7, #8
 8019858:	681b      	ldr	r3, [r3, #0]
 801985a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801985c:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
  wsptr = workspace;
 8019860:	f107 0314 	add.w	r3, r7, #20
 8019864:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8019868:	2300      	movs	r3, #0
 801986a:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 801986e:	e29a      	b.n	8019da6 <jpeg_idct_13x13+0x586>
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8019870:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8019874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019878:	461a      	mov	r2, r3
 801987a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801987e:	681b      	ldr	r3, [r3, #0]
 8019880:	fb03 f302 	mul.w	r3, r3, r2
 8019884:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    z1 <<= CONST_BITS;
 8019888:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801988c:	035b      	lsls	r3, r3, #13
 801988e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8019892:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8019896:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801989a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801989e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80198a2:	3320      	adds	r3, #32
 80198a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80198a8:	461a      	mov	r2, r3
 80198aa:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80198ae:	3340      	adds	r3, #64	; 0x40
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	fb03 f302 	mul.w	r3, r3, r2
 80198b6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80198ba:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80198be:	3340      	adds	r3, #64	; 0x40
 80198c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80198c4:	461a      	mov	r2, r3
 80198c6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80198ca:	3380      	adds	r3, #128	; 0x80
 80198cc:	681b      	ldr	r3, [r3, #0]
 80198ce:	fb03 f302 	mul.w	r3, r3, r2
 80198d2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80198d6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80198da:	3360      	adds	r3, #96	; 0x60
 80198dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80198e0:	461a      	mov	r2, r3
 80198e2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80198e6:	33c0      	adds	r3, #192	; 0xc0
 80198e8:	681b      	ldr	r3, [r3, #0]
 80198ea:	fb03 f302 	mul.w	r3, r3, r2
 80198ee:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

    tmp10 = z3 + z4;
 80198f2:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 80198f6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80198fa:	4413      	add	r3, r2
 80198fc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
    tmp11 = z3 - z4;
 8019900:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8019904:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8019908:	1ad3      	subs	r3, r2, r3
 801990a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 801990e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8019912:	f242 42f9 	movw	r2, #9465	; 0x24f9
 8019916:	fb02 f303 	mul.w	r3, r2, r3
 801991a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 801991e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8019922:	f240 3219 	movw	r2, #793	; 0x319
 8019926:	fb02 f303 	mul.w	r3, r2, r3
 801992a:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 801992e:	4413      	add	r3, r2
 8019930:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8019934:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8019938:	f642 32f1 	movw	r2, #11249	; 0x2bf1
 801993c:	fb02 f203 	mul.w	r2, r2, r3
 8019940:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8019944:	4413      	add	r3, r2
 8019946:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801994a:	4413      	add	r3, r2
 801994c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8019950:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8019954:	f241 020c 	movw	r2, #4108	; 0x100c
 8019958:	fb02 f203 	mul.w	r2, r2, r3
 801995c:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8019960:	1ad3      	subs	r3, r2, r3
 8019962:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8019966:	4413      	add	r3, r2
 8019968:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 801996c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8019970:	f44f 6222 	mov.w	r2, #2592	; 0xa20
 8019974:	fb02 f303 	mul.w	r3, r2, r3
 8019978:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 801997c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8019980:	f640 7295 	movw	r2, #3989	; 0xf95
 8019984:	fb02 f303 	mul.w	r3, r2, r3
 8019988:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 801998c:	4413      	add	r3, r2
 801998e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8019992:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8019996:	f242 12e0 	movw	r2, #8672	; 0x21e0
 801999a:	fb02 f203 	mul.w	r2, r2, r3
 801999e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80199a2:	1ad3      	subs	r3, r2, r3
 80199a4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80199a8:	4413      	add	r3, r2
 80199aa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 80199ae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80199b2:	4af1      	ldr	r2, [pc, #964]	; (8019d78 <jpeg_idct_13x13+0x558>)
 80199b4:	fb02 f203 	mul.w	r2, r2, r3
 80199b8:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80199bc:	4413      	add	r3, r2
 80199be:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80199c2:	4413      	add	r3, r2
 80199c4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8

    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 80199c8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80199cc:	f640 52f2 	movw	r2, #3570	; 0xdf2
 80199d0:	fb02 f303 	mul.w	r3, r2, r3
 80199d4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 80199d8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80199dc:	f641 52fe 	movw	r2, #7678	; 0x1dfe
 80199e0:	fb02 f203 	mul.w	r2, r2, r3
 80199e4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80199e8:	1ad3      	subs	r3, r2, r3
 80199ea:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 80199ee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80199f2:	4ae2      	ldr	r2, [pc, #904]	; (8019d7c <jpeg_idct_13x13+0x55c>)
 80199f4:	fb02 f203 	mul.w	r2, r2, r3
 80199f8:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80199fc:	1ad2      	subs	r2, r2, r3
 80199fe:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8019a02:	1ad3      	subs	r3, r2, r3
 8019a04:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8019a08:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8019a0c:	4adc      	ldr	r2, [pc, #880]	; (8019d80 <jpeg_idct_13x13+0x560>)
 8019a0e:	fb02 f203 	mul.w	r2, r2, r3
 8019a12:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8019a16:	441a      	add	r2, r3
 8019a18:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8019a1c:	1ad3      	subs	r3, r2, r3
 8019a1e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8019a22:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8019a26:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8019a2a:	1ad3      	subs	r3, r2, r3
 8019a2c:	f642 5241 	movw	r2, #11585	; 0x2d41
 8019a30:	fb02 f303 	mul.w	r3, r2, r3
 8019a34:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8019a38:	4413      	add	r3, r2
 8019a3a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8019a3e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8019a42:	3310      	adds	r3, #16
 8019a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019a48:	461a      	mov	r2, r3
 8019a4a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8019a4e:	3320      	adds	r3, #32
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	fb03 f302 	mul.w	r3, r3, r2
 8019a56:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8019a5a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8019a5e:	3330      	adds	r3, #48	; 0x30
 8019a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019a64:	461a      	mov	r2, r3
 8019a66:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8019a6a:	3360      	adds	r3, #96	; 0x60
 8019a6c:	681b      	ldr	r3, [r3, #0]
 8019a6e:	fb03 f302 	mul.w	r3, r3, r2
 8019a72:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8019a76:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8019a7a:	3350      	adds	r3, #80	; 0x50
 8019a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019a80:	461a      	mov	r2, r3
 8019a82:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8019a86:	33a0      	adds	r3, #160	; 0xa0
 8019a88:	681b      	ldr	r3, [r3, #0]
 8019a8a:	fb03 f302 	mul.w	r3, r3, r2
 8019a8e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8019a92:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8019a96:	3370      	adds	r3, #112	; 0x70
 8019a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019a9c:	461a      	mov	r2, r3
 8019a9e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8019aa2:	33e0      	adds	r3, #224	; 0xe0
 8019aa4:	681b      	ldr	r3, [r3, #0]
 8019aa6:	fb03 f302 	mul.w	r3, r3, r2
 8019aaa:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8019aae:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8019ab2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8019ab6:	4413      	add	r3, r2
 8019ab8:	f642 2250 	movw	r2, #10832	; 0x2a50
 8019abc:	fb02 f303 	mul.w	r3, r2, r3
 8019ac0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8019ac4:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8019ac8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8019acc:	4413      	add	r3, r2
 8019ace:	f242 523e 	movw	r2, #9534	; 0x253e
 8019ad2:	fb02 f303 	mul.w	r3, r2, r3
 8019ad6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp15 = z1 + z4;
 8019ada:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8019ade:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8019ae2:	4413      	add	r3, r2
 8019ae4:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8019ae8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8019aec:	f641 6202 	movw	r2, #7682	; 0x1e02
 8019af0:	fb02 f303 	mul.w	r3, r2, r3
 8019af4:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    tmp10 = tmp11 + tmp12 + tmp13 -
 8019af8:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8019afc:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8019b00:	441a      	add	r2, r3
 8019b02:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8019b06:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
 8019b08:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8019b0c:	499d      	ldr	r1, [pc, #628]	; (8019d84 <jpeg_idct_13x13+0x564>)
 8019b0e:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = tmp11 + tmp12 + tmp13 -
 8019b12:	4413      	add	r3, r2
 8019b14:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8019b18:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8019b1c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8019b20:	4413      	add	r3, r2
 8019b22:	4a99      	ldr	r2, [pc, #612]	; (8019d88 <jpeg_idct_13x13+0x568>)
 8019b24:	fb02 f303 	mul.w	r3, r2, r3
 8019b28:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8019b2c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8019b30:	f641 22cb 	movw	r2, #6859	; 0x1acb
 8019b34:	fb02 f203 	mul.w	r2, r2, r3
 8019b38:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8019b3c:	4413      	add	r3, r2
 8019b3e:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8019b42:	4413      	add	r3, r2
 8019b44:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8019b48:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8019b4c:	4a8f      	ldr	r2, [pc, #572]	; (8019d8c <jpeg_idct_13x13+0x56c>)
 8019b4e:	fb02 f203 	mul.w	r2, r2, r3
 8019b52:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8019b56:	4413      	add	r3, r2
 8019b58:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8019b5c:	4413      	add	r3, r2
 8019b5e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8019b62:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8019b66:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8019b6a:	4413      	add	r3, r2
 8019b6c:	4a88      	ldr	r2, [pc, #544]	; (8019d90 <jpeg_idct_13x13+0x570>)
 8019b6e:	fb02 f303 	mul.w	r3, r2, r3
 8019b72:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp11 += tmp14;
 8019b76:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8019b7a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8019b7e:	4413      	add	r3, r2
 8019b80:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8019b84:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8019b88:	f244 6294 	movw	r2, #18068	; 0x4694
 8019b8c:	fb02 f203 	mul.w	r2, r2, r3
 8019b90:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8019b94:	4413      	add	r3, r2
 8019b96:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8019b9a:	4413      	add	r3, r2
 8019b9c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8019ba0:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8019ba4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8019ba8:	4413      	add	r3, r2
 8019baa:	4a7a      	ldr	r2, [pc, #488]	; (8019d94 <jpeg_idct_13x13+0x574>)
 8019bac:	fb02 f303 	mul.w	r3, r2, r3
 8019bb0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp12 += tmp14;
 8019bb4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8019bb8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8019bbc:	4413      	add	r3, r2
 8019bbe:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp13 += tmp14;
 8019bc2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8019bc6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8019bca:	4413      	add	r3, r2
 8019bcc:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8019bd0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8019bd4:	f640 22d5 	movw	r2, #2773	; 0xad5
 8019bd8:	fb02 f303 	mul.w	r3, r2, r3
 8019bdc:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8019be0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8019be4:	f640 2233 	movw	r2, #2611	; 0xa33
 8019be8:	fb02 f203 	mul.w	r2, r2, r3
 8019bec:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8019bf0:	441a      	add	r2, r3
	    MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
 8019bf2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8019bf6:	4968      	ldr	r1, [pc, #416]	; (8019d98 <jpeg_idct_13x13+0x578>)
 8019bf8:	fb01 f303 	mul.w	r3, r1, r3
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8019bfc:	4413      	add	r3, r2
 8019bfe:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8019c02:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8019c06:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8019c0a:	1ad3      	subs	r3, r2, r3
 8019c0c:	f641 6202 	movw	r2, #7682	; 0x1e02
 8019c10:	fb02 f303 	mul.w	r3, r2, r3
 8019c14:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    tmp14 += z1;
 8019c18:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8019c1c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8019c20:	4413      	add	r3, r2
 8019c22:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8019c26:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8019c2a:	f640 424e 	movw	r2, #3150	; 0xc4e
 8019c2e:	fb02 f203 	mul.w	r2, r2, r3
 8019c32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8019c36:	441a      	add	r2, r3
	     MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */
 8019c38:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8019c3c:	f46f 515f 	mvn.w	r1, #14272	; 0x37c0
 8019c40:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8019c44:	4413      	add	r3, r2
 8019c46:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8019c4a:	4413      	add	r3, r2
 8019c4c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8019c50:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8019c54:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8019c58:	4413      	add	r3, r2
 8019c5a:	12da      	asrs	r2, r3, #11
 8019c5c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019c60:	601a      	str	r2, [r3, #0]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8019c62:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8019c66:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8019c6a:	1ad2      	subs	r2, r2, r3
 8019c6c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019c70:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8019c74:	12d2      	asrs	r2, r2, #11
 8019c76:	601a      	str	r2, [r3, #0]
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8019c78:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8019c7c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8019c80:	441a      	add	r2, r3
 8019c82:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019c86:	3320      	adds	r3, #32
 8019c88:	12d2      	asrs	r2, r2, #11
 8019c8a:	601a      	str	r2, [r3, #0]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8019c8c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8019c90:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8019c94:	1ad2      	subs	r2, r2, r3
 8019c96:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019c9a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8019c9e:	12d2      	asrs	r2, r2, #11
 8019ca0:	601a      	str	r2, [r3, #0]
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8019ca2:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8019ca6:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8019caa:	441a      	add	r2, r3
 8019cac:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019cb0:	3340      	adds	r3, #64	; 0x40
 8019cb2:	12d2      	asrs	r2, r2, #11
 8019cb4:	601a      	str	r2, [r3, #0]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8019cb6:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8019cba:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8019cbe:	1ad2      	subs	r2, r2, r3
 8019cc0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019cc4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8019cc8:	12d2      	asrs	r2, r2, #11
 8019cca:	601a      	str	r2, [r3, #0]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8019ccc:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8019cd0:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8019cd4:	441a      	add	r2, r3
 8019cd6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019cda:	3360      	adds	r3, #96	; 0x60
 8019cdc:	12d2      	asrs	r2, r2, #11
 8019cde:	601a      	str	r2, [r3, #0]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8019ce0:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8019ce4:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8019ce8:	1ad2      	subs	r2, r2, r3
 8019cea:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019cee:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8019cf2:	12d2      	asrs	r2, r2, #11
 8019cf4:	601a      	str	r2, [r3, #0]
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8019cf6:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8019cfa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8019cfe:	441a      	add	r2, r3
 8019d00:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019d04:	3380      	adds	r3, #128	; 0x80
 8019d06:	12d2      	asrs	r2, r2, #11
 8019d08:	601a      	str	r2, [r3, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8019d0a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8019d0e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8019d12:	1ad2      	subs	r2, r2, r3
 8019d14:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019d18:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019d1c:	12d2      	asrs	r2, r2, #11
 8019d1e:	601a      	str	r2, [r3, #0]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8019d20:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8019d24:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8019d28:	441a      	add	r2, r3
 8019d2a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019d2e:	33a0      	adds	r3, #160	; 0xa0
 8019d30:	12d2      	asrs	r2, r2, #11
 8019d32:	601a      	str	r2, [r3, #0]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8019d34:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8019d38:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8019d3c:	1ad2      	subs	r2, r2, r3
 8019d3e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019d42:	33e0      	adds	r3, #224	; 0xe0
 8019d44:	12d2      	asrs	r2, r2, #11
 8019d46:	601a      	str	r2, [r3, #0]
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 8019d48:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019d4c:	33c0      	adds	r3, #192	; 0xc0
 8019d4e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8019d52:	12d2      	asrs	r2, r2, #11
 8019d54:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8019d56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8019d5a:	3301      	adds	r3, #1
 8019d5c:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8019d60:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8019d64:	3302      	adds	r3, #2
 8019d66:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8019d6a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8019d6e:	3304      	adds	r3, #4
 8019d70:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8019d74:	e012      	b.n	8019d9c <jpeg_idct_13x13+0x57c>
 8019d76:	bf00      	nop
 8019d78:	ffffd7ee 	.word	0xffffd7ee
 8019d7c:	fffffa8c 	.word	0xfffffa8c
 8019d80:	ffffe64b 	.word	0xffffe64b
 8019d84:	ffffbf5b 	.word	0xffffbf5b
 8019d88:	fffff52b 	.word	0xfffff52b
 8019d8c:	ffffcdb1 	.word	0xffffcdb1
 8019d90:	ffffdac2 	.word	0xffffdac2
 8019d94:	ffffeaf8 	.word	0xffffeaf8
 8019d98:	fffff116 	.word	0xfffff116
 8019d9c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019da0:	3304      	adds	r3, #4
 8019da2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8019da6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8019daa:	2b07      	cmp	r3, #7
 8019dac:	f77f ad60 	ble.w	8019870 <jpeg_idct_13x13+0x50>
  }

  /* Pass 2: process 13 rows from work array, store into output array. */

  wsptr = workspace;
 8019db0:	f107 0314 	add.w	r3, r7, #20
 8019db4:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  for (ctr = 0; ctr < 13; ctr++) {
 8019db8:	2300      	movs	r3, #0
 8019dba:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8019dbe:	e2a0      	b.n	801a302 <jpeg_idct_13x13+0xae2>
    outptr = output_buf[ctr] + output_col;
 8019dc0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8019dc4:	009b      	lsls	r3, r3, #2
 8019dc6:	463a      	mov	r2, r7
 8019dc8:	6812      	ldr	r2, [r2, #0]
 8019dca:	4413      	add	r3, r2
 8019dcc:	681a      	ldr	r2, [r3, #0]
 8019dce:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8019dd2:	4413      	add	r3, r2
 8019dd4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

    /* Even part */

    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8019dd8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019ddc:	681b      	ldr	r3, [r3, #0]
 8019dde:	3310      	adds	r3, #16
 8019de0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    z1 <<= CONST_BITS;
 8019de4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8019de8:	035b      	lsls	r3, r3, #13
 8019dea:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

    z2 = (INT32) wsptr[2];
 8019dee:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019df2:	3308      	adds	r3, #8
 8019df4:	681b      	ldr	r3, [r3, #0]
 8019df6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    z3 = (INT32) wsptr[4];
 8019dfa:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019dfe:	3310      	adds	r3, #16
 8019e00:	681b      	ldr	r3, [r3, #0]
 8019e02:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    z4 = (INT32) wsptr[6];
 8019e06:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019e0a:	3318      	adds	r3, #24
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

    tmp10 = z3 + z4;
 8019e12:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8019e16:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8019e1a:	4413      	add	r3, r2
 8019e1c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
    tmp11 = z3 - z4;
 8019e20:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8019e24:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8019e28:	1ad3      	subs	r3, r2, r3
 8019e2a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8019e2e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8019e32:	f242 42f9 	movw	r2, #9465	; 0x24f9
 8019e36:	fb02 f303 	mul.w	r3, r2, r3
 8019e3a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8019e3e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8019e42:	f240 3219 	movw	r2, #793	; 0x319
 8019e46:	fb02 f303 	mul.w	r3, r2, r3
 8019e4a:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8019e4e:	4413      	add	r3, r2
 8019e50:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8019e54:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8019e58:	f642 32f1 	movw	r2, #11249	; 0x2bf1
 8019e5c:	fb02 f203 	mul.w	r2, r2, r3
 8019e60:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8019e64:	4413      	add	r3, r2
 8019e66:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8019e6a:	4413      	add	r3, r2
 8019e6c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8019e70:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8019e74:	f241 020c 	movw	r2, #4108	; 0x100c
 8019e78:	fb02 f203 	mul.w	r2, r2, r3
 8019e7c:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8019e80:	1ad3      	subs	r3, r2, r3
 8019e82:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8019e86:	4413      	add	r3, r2
 8019e88:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8019e8c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8019e90:	f44f 6222 	mov.w	r2, #2592	; 0xa20
 8019e94:	fb02 f303 	mul.w	r3, r2, r3
 8019e98:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8019e9c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8019ea0:	f640 7295 	movw	r2, #3989	; 0xf95
 8019ea4:	fb02 f303 	mul.w	r3, r2, r3
 8019ea8:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8019eac:	4413      	add	r3, r2
 8019eae:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8019eb2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8019eb6:	f242 12e0 	movw	r2, #8672	; 0x21e0
 8019eba:	fb02 f203 	mul.w	r2, r2, r3
 8019ebe:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8019ec2:	1ad3      	subs	r3, r2, r3
 8019ec4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8019ec8:	4413      	add	r3, r2
 8019eca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8019ece:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8019ed2:	4af2      	ldr	r2, [pc, #968]	; (801a29c <jpeg_idct_13x13+0xa7c>)
 8019ed4:	fb02 f203 	mul.w	r2, r2, r3
 8019ed8:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8019edc:	4413      	add	r3, r2
 8019ede:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8019ee2:	4413      	add	r3, r2
 8019ee4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8

    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 8019ee8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8019eec:	f640 52f2 	movw	r2, #3570	; 0xdf2
 8019ef0:	fb02 f303 	mul.w	r3, r2, r3
 8019ef4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8019ef8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8019efc:	f641 52fe 	movw	r2, #7678	; 0x1dfe
 8019f00:	fb02 f203 	mul.w	r2, r2, r3
 8019f04:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8019f08:	1ad3      	subs	r3, r2, r3
 8019f0a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 8019f0e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8019f12:	4ae3      	ldr	r2, [pc, #908]	; (801a2a0 <jpeg_idct_13x13+0xa80>)
 8019f14:	fb02 f203 	mul.w	r2, r2, r3
 8019f18:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8019f1c:	1ad2      	subs	r2, r2, r3
 8019f1e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8019f22:	1ad3      	subs	r3, r2, r3
 8019f24:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8019f28:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8019f2c:	4add      	ldr	r2, [pc, #884]	; (801a2a4 <jpeg_idct_13x13+0xa84>)
 8019f2e:	fb02 f203 	mul.w	r2, r2, r3
 8019f32:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8019f36:	441a      	add	r2, r3
 8019f38:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8019f3c:	1ad3      	subs	r3, r2, r3
 8019f3e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8019f42:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8019f46:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8019f4a:	1ad3      	subs	r3, r2, r3
 8019f4c:	f642 5241 	movw	r2, #11585	; 0x2d41
 8019f50:	fb02 f303 	mul.w	r3, r2, r3
 8019f54:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8019f58:	4413      	add	r3, r2
 8019f5a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

    /* Odd part */

    z1 = (INT32) wsptr[1];
 8019f5e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019f62:	3304      	adds	r3, #4
 8019f64:	681b      	ldr	r3, [r3, #0]
 8019f66:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    z2 = (INT32) wsptr[3];
 8019f6a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019f6e:	330c      	adds	r3, #12
 8019f70:	681b      	ldr	r3, [r3, #0]
 8019f72:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    z3 = (INT32) wsptr[5];
 8019f76:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019f7a:	3314      	adds	r3, #20
 8019f7c:	681b      	ldr	r3, [r3, #0]
 8019f7e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    z4 = (INT32) wsptr[7];
 8019f82:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8019f86:	331c      	adds	r3, #28
 8019f88:	681b      	ldr	r3, [r3, #0]
 8019f8a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8019f8e:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8019f92:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8019f96:	4413      	add	r3, r2
 8019f98:	f642 2250 	movw	r2, #10832	; 0x2a50
 8019f9c:	fb02 f303 	mul.w	r3, r2, r3
 8019fa0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8019fa4:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8019fa8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8019fac:	4413      	add	r3, r2
 8019fae:	f242 523e 	movw	r2, #9534	; 0x253e
 8019fb2:	fb02 f303 	mul.w	r3, r2, r3
 8019fb6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp15 = z1 + z4;
 8019fba:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8019fbe:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8019fc2:	4413      	add	r3, r2
 8019fc4:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8019fc8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8019fcc:	f641 6202 	movw	r2, #7682	; 0x1e02
 8019fd0:	fb02 f303 	mul.w	r3, r2, r3
 8019fd4:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    tmp10 = tmp11 + tmp12 + tmp13 -
 8019fd8:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8019fdc:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8019fe0:	441a      	add	r2, r3
 8019fe2:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8019fe6:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
 8019fe8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8019fec:	49ae      	ldr	r1, [pc, #696]	; (801a2a8 <jpeg_idct_13x13+0xa88>)
 8019fee:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = tmp11 + tmp12 + tmp13 -
 8019ff2:	4413      	add	r3, r2
 8019ff4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8019ff8:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8019ffc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a000:	4413      	add	r3, r2
 801a002:	4aaa      	ldr	r2, [pc, #680]	; (801a2ac <jpeg_idct_13x13+0xa8c>)
 801a004:	fb02 f303 	mul.w	r3, r2, r3
 801a008:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 801a00c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801a010:	f641 22cb 	movw	r2, #6859	; 0x1acb
 801a014:	fb02 f203 	mul.w	r2, r2, r3
 801a018:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801a01c:	4413      	add	r3, r2
 801a01e:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 801a022:	4413      	add	r3, r2
 801a024:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 801a028:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a02c:	4aa0      	ldr	r2, [pc, #640]	; (801a2b0 <jpeg_idct_13x13+0xa90>)
 801a02e:	fb02 f203 	mul.w	r2, r2, r3
 801a032:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801a036:	4413      	add	r3, r2
 801a038:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 801a03c:	4413      	add	r3, r2
 801a03e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 801a042:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 801a046:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 801a04a:	4413      	add	r3, r2
 801a04c:	4a99      	ldr	r2, [pc, #612]	; (801a2b4 <jpeg_idct_13x13+0xa94>)
 801a04e:	fb02 f303 	mul.w	r3, r2, r3
 801a052:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp11 += tmp14;
 801a056:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 801a05a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801a05e:	4413      	add	r3, r2
 801a060:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 801a064:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 801a068:	f244 6294 	movw	r2, #18068	; 0x4694
 801a06c:	fb02 f203 	mul.w	r2, r2, r3
 801a070:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801a074:	4413      	add	r3, r2
 801a076:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801a07a:	4413      	add	r3, r2
 801a07c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 801a080:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801a084:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 801a088:	4413      	add	r3, r2
 801a08a:	4a8b      	ldr	r2, [pc, #556]	; (801a2b8 <jpeg_idct_13x13+0xa98>)
 801a08c:	fb02 f303 	mul.w	r3, r2, r3
 801a090:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp12 += tmp14;
 801a094:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 801a098:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801a09c:	4413      	add	r3, r2
 801a09e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp13 += tmp14;
 801a0a2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801a0a6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801a0aa:	4413      	add	r3, r2
 801a0ac:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 801a0b0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801a0b4:	f640 22d5 	movw	r2, #2773	; 0xad5
 801a0b8:	fb02 f303 	mul.w	r3, r2, r3
 801a0bc:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 801a0c0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801a0c4:	f640 2233 	movw	r2, #2611	; 0xa33
 801a0c8:	fb02 f203 	mul.w	r2, r2, r3
 801a0cc:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801a0d0:	441a      	add	r2, r3
	    MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
 801a0d2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801a0d6:	4979      	ldr	r1, [pc, #484]	; (801a2bc <jpeg_idct_13x13+0xa9c>)
 801a0d8:	fb01 f303 	mul.w	r3, r1, r3
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 801a0dc:	4413      	add	r3, r2
 801a0de:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 801a0e2:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801a0e6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801a0ea:	1ad3      	subs	r3, r2, r3
 801a0ec:	f641 6202 	movw	r2, #7682	; 0x1e02
 801a0f0:	fb02 f303 	mul.w	r3, r2, r3
 801a0f4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    tmp14 += z1;
 801a0f8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 801a0fc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801a100:	4413      	add	r3, r2
 801a102:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 801a106:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a10a:	f640 424e 	movw	r2, #3150	; 0xc4e
 801a10e:	fb02 f203 	mul.w	r2, r2, r3
 801a112:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801a116:	441a      	add	r2, r3
	     MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */
 801a118:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 801a11c:	f46f 515f 	mvn.w	r1, #14272	; 0x37c0
 801a120:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 801a124:	4413      	add	r3, r2
 801a126:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 801a12a:	4413      	add	r3, r2
 801a12c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801a130:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 801a134:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801a138:	4413      	add	r3, r2
 801a13a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801a13c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801a140:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801a144:	4413      	add	r3, r2
 801a146:	781a      	ldrb	r2, [r3, #0]
 801a148:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a14c:	701a      	strb	r2, [r3, #0]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801a14e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 801a152:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801a156:	1ad3      	subs	r3, r2, r3
 801a158:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801a15a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801a15e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801a162:	441a      	add	r2, r3
 801a164:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a168:	330c      	adds	r3, #12
 801a16a:	7812      	ldrb	r2, [r2, #0]
 801a16c:	701a      	strb	r2, [r3, #0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801a16e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 801a172:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801a176:	4413      	add	r3, r2
 801a178:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801a17a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801a17e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801a182:	441a      	add	r2, r3
 801a184:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a188:	3301      	adds	r3, #1
 801a18a:	7812      	ldrb	r2, [r2, #0]
 801a18c:	701a      	strb	r2, [r3, #0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801a18e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 801a192:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801a196:	1ad3      	subs	r3, r2, r3
 801a198:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801a19a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801a19e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801a1a2:	441a      	add	r2, r3
 801a1a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a1a8:	330b      	adds	r3, #11
 801a1aa:	7812      	ldrb	r2, [r2, #0]
 801a1ac:	701a      	strb	r2, [r3, #0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801a1ae:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 801a1b2:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 801a1b6:	4413      	add	r3, r2
 801a1b8:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801a1ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801a1be:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801a1c2:	441a      	add	r2, r3
 801a1c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a1c8:	3302      	adds	r3, #2
 801a1ca:	7812      	ldrb	r2, [r2, #0]
 801a1cc:	701a      	strb	r2, [r3, #0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801a1ce:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 801a1d2:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 801a1d6:	1ad3      	subs	r3, r2, r3
 801a1d8:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801a1da:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801a1de:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801a1e2:	441a      	add	r2, r3
 801a1e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a1e8:	330a      	adds	r3, #10
 801a1ea:	7812      	ldrb	r2, [r2, #0]
 801a1ec:	701a      	strb	r2, [r3, #0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801a1ee:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 801a1f2:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 801a1f6:	4413      	add	r3, r2
 801a1f8:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801a1fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801a1fe:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801a202:	441a      	add	r2, r3
 801a204:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a208:	3303      	adds	r3, #3
 801a20a:	7812      	ldrb	r2, [r2, #0]
 801a20c:	701a      	strb	r2, [r3, #0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801a20e:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 801a212:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 801a216:	1ad3      	subs	r3, r2, r3
 801a218:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801a21a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801a21e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801a222:	441a      	add	r2, r3
 801a224:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a228:	3309      	adds	r3, #9
 801a22a:	7812      	ldrb	r2, [r2, #0]
 801a22c:	701a      	strb	r2, [r3, #0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801a22e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801a232:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801a236:	4413      	add	r3, r2
 801a238:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801a23a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801a23e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801a242:	441a      	add	r2, r3
 801a244:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a248:	3304      	adds	r3, #4
 801a24a:	7812      	ldrb	r2, [r2, #0]
 801a24c:	701a      	strb	r2, [r3, #0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801a24e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801a252:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801a256:	1ad3      	subs	r3, r2, r3
 801a258:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801a25a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801a25e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801a262:	441a      	add	r2, r3
 801a264:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a268:	3308      	adds	r3, #8
 801a26a:	7812      	ldrb	r2, [r2, #0]
 801a26c:	701a      	strb	r2, [r3, #0]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801a26e:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 801a272:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801a276:	4413      	add	r3, r2
 801a278:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801a27a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801a27e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801a282:	441a      	add	r2, r3
 801a284:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a288:	3305      	adds	r3, #5
 801a28a:	7812      	ldrb	r2, [r2, #0]
 801a28c:	701a      	strb	r2, [r3, #0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801a28e:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 801a292:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801a296:	1ad3      	subs	r3, r2, r3
 801a298:	149b      	asrs	r3, r3, #18
 801a29a:	e011      	b.n	801a2c0 <jpeg_idct_13x13+0xaa0>
 801a29c:	ffffd7ee 	.word	0xffffd7ee
 801a2a0:	fffffa8c 	.word	0xfffffa8c
 801a2a4:	ffffe64b 	.word	0xffffe64b
 801a2a8:	ffffbf5b 	.word	0xffffbf5b
 801a2ac:	fffff52b 	.word	0xfffff52b
 801a2b0:	ffffcdb1 	.word	0xffffcdb1
 801a2b4:	ffffdac2 	.word	0xffffdac2
 801a2b8:	ffffeaf8 	.word	0xffffeaf8
 801a2bc:	fffff116 	.word	0xfffff116
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801a2c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801a2c4:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801a2c8:	441a      	add	r2, r3
 801a2ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a2ce:	3307      	adds	r3, #7
 801a2d0:	7812      	ldrb	r2, [r2, #0]
 801a2d2:	701a      	strb	r2, [r3, #0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
 801a2d4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801a2d8:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801a2da:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
 801a2de:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801a2e2:	441a      	add	r2, r3
 801a2e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801a2e8:	3306      	adds	r3, #6
 801a2ea:	7812      	ldrb	r2, [r2, #0]
 801a2ec:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 801a2ee:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801a2f2:	3320      	adds	r3, #32
 801a2f4:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  for (ctr = 0; ctr < 13; ctr++) {
 801a2f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801a2fc:	3301      	adds	r3, #1
 801a2fe:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 801a302:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801a306:	2b0c      	cmp	r3, #12
 801a308:	f77f ad5a 	ble.w	8019dc0 <jpeg_idct_13x13+0x5a0>
  }
}
 801a30c:	bf00      	nop
 801a30e:	bf00      	nop
 801a310:	f507 7704 	add.w	r7, r7, #528	; 0x210
 801a314:	46bd      	mov	sp, r7
 801a316:	bc90      	pop	{r4, r7}
 801a318:	4770      	bx	lr
 801a31a:	bf00      	nop

0801a31c <jpeg_idct_14x14>:

GLOBAL(void)
jpeg_idct_14x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801a31c:	b490      	push	{r4, r7}
 801a31e:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 801a322:	af00      	add	r7, sp, #0
 801a324:	f107 040c 	add.w	r4, r7, #12
 801a328:	6020      	str	r0, [r4, #0]
 801a32a:	f107 0008 	add.w	r0, r7, #8
 801a32e:	6001      	str	r1, [r0, #0]
 801a330:	1d39      	adds	r1, r7, #4
 801a332:	600a      	str	r2, [r1, #0]
 801a334:	463a      	mov	r2, r7
 801a336:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801a338:	f107 030c 	add.w	r3, r7, #12
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801a342:	3380      	adds	r3, #128	; 0x80
 801a344:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
  int workspace[8*14];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 801a348:	1d3b      	adds	r3, r7, #4
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801a350:	f107 0308 	add.w	r3, r7, #8
 801a354:	681b      	ldr	r3, [r3, #0]
 801a356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a358:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
  wsptr = workspace;
 801a35c:	f107 0310 	add.w	r3, r7, #16
 801a360:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801a364:	2300      	movs	r3, #0
 801a366:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 801a36a:	e269      	b.n	801a840 <jpeg_idct_14x14+0x524>
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801a36c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801a370:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a374:	461a      	mov	r2, r3
 801a376:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801a37a:	681b      	ldr	r3, [r3, #0]
 801a37c:	fb03 f302 	mul.w	r3, r3, r2
 801a380:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    z1 <<= CONST_BITS;
 801a384:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801a388:	035b      	lsls	r3, r3, #13
 801a38a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801a38e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801a392:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801a396:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801a39a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801a39e:	3340      	adds	r3, #64	; 0x40
 801a3a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a3a4:	461a      	mov	r2, r3
 801a3a6:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801a3aa:	3380      	adds	r3, #128	; 0x80
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	fb03 f302 	mul.w	r3, r3, r2
 801a3b2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801a3b6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801a3ba:	f642 02c6 	movw	r2, #10438	; 0x28c6
 801a3be:	fb02 f303 	mul.w	r3, r2, r3
 801a3c2:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 801a3c6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801a3ca:	f640 2212 	movw	r2, #2578	; 0xa12
 801a3ce:	fb02 f303 	mul.w	r3, r2, r3
 801a3d2:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801a3d6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801a3da:	f641 4237 	movw	r2, #7223	; 0x1c37
 801a3de:	fb02 f303 	mul.w	r3, r2, r3
 801a3e2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    tmp10 = z1 + z2;
 801a3e6:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801a3ea:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801a3ee:	4413      	add	r3, r2
 801a3f0:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    tmp11 = z1 + z3;
 801a3f4:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801a3f8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801a3fc:	4413      	add	r3, r2
 801a3fe:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
    tmp12 = z1 - z4;
 801a402:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801a406:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801a40a:	1ad3      	subs	r3, r2, r3
 801a40c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc

    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 801a410:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 801a414:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801a418:	441a      	add	r2, r3
 801a41a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801a41e:	1ad3      	subs	r3, r2, r3
 801a420:	005b      	lsls	r3, r3, #1
 801a422:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801a426:	1ad3      	subs	r3, r2, r3
 801a428:	12db      	asrs	r3, r3, #11
 801a42a:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
			CONST_BITS-PASS1_BITS);

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801a42e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801a432:	3320      	adds	r3, #32
 801a434:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a438:	461a      	mov	r2, r3
 801a43a:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801a43e:	3340      	adds	r3, #64	; 0x40
 801a440:	681b      	ldr	r3, [r3, #0]
 801a442:	fb03 f302 	mul.w	r3, r3, r2
 801a446:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801a44a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801a44e:	3360      	adds	r3, #96	; 0x60
 801a450:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a454:	461a      	mov	r2, r3
 801a456:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801a45a:	33c0      	adds	r3, #192	; 0xc0
 801a45c:	681b      	ldr	r3, [r3, #0]
 801a45e:	fb03 f302 	mul.w	r3, r3, r2
 801a462:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801a466:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801a46a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801a46e:	4413      	add	r3, r2
 801a470:	f242 3262 	movw	r2, #9058	; 0x2362
 801a474:	fb02 f303 	mul.w	r3, r2, r3
 801a478:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 801a47c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801a480:	f640 02bd 	movw	r2, #2237	; 0x8bd
 801a484:	fb02 f303 	mul.w	r3, r2, r3
 801a488:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 801a48c:	4413      	add	r3, r2
 801a48e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 801a492:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801a496:	4af1      	ldr	r2, [pc, #964]	; (801a85c <jpeg_idct_14x14+0x540>)
 801a498:	fb02 f303 	mul.w	r3, r2, r3
 801a49c:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 801a4a0:	4413      	add	r3, r2
 801a4a2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 801a4a6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801a4aa:	f241 32a3 	movw	r2, #5027	; 0x13a3
 801a4ae:	fb02 f203 	mul.w	r2, r2, r3
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 801a4b2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801a4b6:	49ea      	ldr	r1, [pc, #936]	; (801a860 <jpeg_idct_14x14+0x544>)
 801a4b8:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 801a4bc:	4413      	add	r3, r2
 801a4be:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec

    tmp20 = tmp10 + tmp13;
 801a4c2:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 801a4c6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801a4ca:	4413      	add	r3, r2
 801a4cc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
    tmp26 = tmp10 - tmp13;
 801a4d0:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 801a4d4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801a4d8:	1ad3      	subs	r3, r2, r3
 801a4da:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
    tmp21 = tmp11 + tmp14;
 801a4de:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 801a4e2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801a4e6:	4413      	add	r3, r2
 801a4e8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    tmp25 = tmp11 - tmp14;
 801a4ec:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 801a4f0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801a4f4:	1ad3      	subs	r3, r2, r3
 801a4f6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp22 = tmp12 + tmp15;
 801a4fa:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801a4fe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a502:	4413      	add	r3, r2
 801a504:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    tmp24 = tmp12 - tmp15;
 801a508:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801a50c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a510:	1ad3      	subs	r3, r2, r3
 801a512:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801a516:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801a51a:	3310      	adds	r3, #16
 801a51c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a520:	461a      	mov	r2, r3
 801a522:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801a526:	3320      	adds	r3, #32
 801a528:	681b      	ldr	r3, [r3, #0]
 801a52a:	fb03 f302 	mul.w	r3, r3, r2
 801a52e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801a532:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801a536:	3330      	adds	r3, #48	; 0x30
 801a538:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a53c:	461a      	mov	r2, r3
 801a53e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801a542:	3360      	adds	r3, #96	; 0x60
 801a544:	681b      	ldr	r3, [r3, #0]
 801a546:	fb03 f302 	mul.w	r3, r3, r2
 801a54a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801a54e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801a552:	3350      	adds	r3, #80	; 0x50
 801a554:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a558:	461a      	mov	r2, r3
 801a55a:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801a55e:	33a0      	adds	r3, #160	; 0xa0
 801a560:	681b      	ldr	r3, [r3, #0]
 801a562:	fb03 f302 	mul.w	r3, r3, r2
 801a566:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801a56a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801a56e:	3370      	adds	r3, #112	; 0x70
 801a570:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a574:	461a      	mov	r2, r3
 801a576:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801a57a:	33e0      	adds	r3, #224	; 0xe0
 801a57c:	681b      	ldr	r3, [r3, #0]
 801a57e:	fb03 f302 	mul.w	r3, r3, r2
 801a582:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    tmp13 = z4 << CONST_BITS;
 801a586:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801a58a:	035b      	lsls	r3, r3, #13
 801a58c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

    tmp14 = z1 + z3;
 801a590:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801a594:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801a598:	4413      	add	r3, r2
 801a59a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801a59e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801a5a2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801a5a6:	4413      	add	r3, r2
 801a5a8:	f642 22b7 	movw	r2, #10935	; 0x2ab7
 801a5ac:	fb02 f303 	mul.w	r3, r2, r3
 801a5b0:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 801a5b4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801a5b8:	f242 6252 	movw	r2, #9810	; 0x2652
 801a5bc:	fb02 f303 	mul.w	r3, r2, r3
 801a5c0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 801a5c4:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 801a5c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801a5cc:	441a      	add	r2, r3
 801a5ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801a5d2:	441a      	add	r2, r3
 801a5d4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801a5d8:	49a2      	ldr	r1, [pc, #648]	; (801a864 <jpeg_idct_14x14+0x548>)
 801a5da:	fb01 f303 	mul.w	r3, r1, r3
 801a5de:	4413      	add	r3, r2
 801a5e0:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 801a5e4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801a5e8:	f641 0214 	movw	r2, #6164	; 0x1814
 801a5ec:	fb02 f303 	mul.w	r3, r2, r3
 801a5f0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 801a5f4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801a5f8:	4a9b      	ldr	r2, [pc, #620]	; (801a868 <jpeg_idct_14x14+0x54c>)
 801a5fa:	fb02 f303 	mul.w	r3, r2, r3
 801a5fe:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 801a602:	4413      	add	r3, r2
 801a604:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    z1    -= z2;
 801a608:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801a60c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801a610:	1ad3      	subs	r3, r2, r3
 801a612:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 801a616:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801a61a:	f640 62f2 	movw	r2, #3826	; 0xef2
 801a61e:	fb02 f203 	mul.w	r2, r2, r3
 801a622:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801a626:	1ad3      	subs	r3, r2, r3
 801a628:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    tmp16 += tmp15;
 801a62c:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 801a630:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a634:	4413      	add	r3, r2
 801a636:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    z1    += z4;
 801a63a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801a63e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801a642:	4413      	add	r3, r2
 801a644:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 801a648:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 801a64c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801a650:	4413      	add	r3, r2
 801a652:	f46f 62a2 	mvn.w	r2, #1296	; 0x510
 801a656:	fb02 f203 	mul.w	r2, r2, r3
 801a65a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801a65e:	1ad3      	subs	r3, r2, r3
 801a660:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 801a664:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801a668:	4a80      	ldr	r2, [pc, #512]	; (801a86c <jpeg_idct_14x14+0x550>)
 801a66a:	fb02 f203 	mul.w	r2, r2, r3
 801a66e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801a672:	4413      	add	r3, r2
 801a674:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 801a678:	4413      	add	r3, r2
 801a67a:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 801a67e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801a682:	4a7b      	ldr	r2, [pc, #492]	; (801a870 <jpeg_idct_14x14+0x554>)
 801a684:	fb02 f203 	mul.w	r2, r2, r3
 801a688:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801a68c:	4413      	add	r3, r2
 801a68e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801a692:	4413      	add	r3, r2
 801a694:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801a698:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 801a69c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801a6a0:	1ad3      	subs	r3, r2, r3
 801a6a2:	f642 42f8 	movw	r2, #11512	; 0x2cf8
 801a6a6:	fb02 f303 	mul.w	r3, r2, r3
 801a6aa:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801a6ae:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 801a6b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801a6b6:	441a      	add	r2, r3
 801a6b8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801a6bc:	496d      	ldr	r1, [pc, #436]	; (801a874 <jpeg_idct_14x14+0x558>)
 801a6be:	fb01 f303 	mul.w	r3, r1, r3
 801a6c2:	4413      	add	r3, r2
 801a6c4:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 801a6c8:	4413      	add	r3, r2
 801a6ca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 801a6ce:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801a6d2:	f241 5299 	movw	r2, #5529	; 0x1599
 801a6d6:	fb02 f203 	mul.w	r2, r2, r3
 801a6da:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801a6de:	4413      	add	r3, r2
 801a6e0:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801a6e4:	4413      	add	r3, r2
 801a6e6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec

    tmp13 = (z1 - z3) << PASS1_BITS;
 801a6ea:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801a6ee:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801a6f2:	1ad3      	subs	r3, r2, r3
 801a6f4:	009b      	lsls	r3, r3, #2
 801a6f6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801a6fa:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 801a6fe:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801a702:	4413      	add	r3, r2
 801a704:	12da      	asrs	r2, r3, #11
 801a706:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801a70a:	601a      	str	r2, [r3, #0]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801a70c:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 801a710:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801a714:	1ad2      	subs	r2, r2, r3
 801a716:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801a71a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 801a71e:	12d2      	asrs	r2, r2, #11
 801a720:	601a      	str	r2, [r3, #0]
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801a722:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 801a726:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801a72a:	441a      	add	r2, r3
 801a72c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801a730:	3320      	adds	r3, #32
 801a732:	12d2      	asrs	r2, r2, #11
 801a734:	601a      	str	r2, [r3, #0]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801a736:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 801a73a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801a73e:	1ad2      	subs	r2, r2, r3
 801a740:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801a744:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 801a748:	12d2      	asrs	r2, r2, #11
 801a74a:	601a      	str	r2, [r3, #0]
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801a74c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801a750:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801a754:	441a      	add	r2, r3
 801a756:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801a75a:	3340      	adds	r3, #64	; 0x40
 801a75c:	12d2      	asrs	r2, r2, #11
 801a75e:	601a      	str	r2, [r3, #0]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801a760:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801a764:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801a768:	1ad2      	subs	r2, r2, r3
 801a76a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801a76e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801a772:	12d2      	asrs	r2, r2, #11
 801a774:	601a      	str	r2, [r3, #0]
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 801a776:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801a77a:	3360      	adds	r3, #96	; 0x60
 801a77c:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 801a780:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 801a784:	440a      	add	r2, r1
 801a786:	601a      	str	r2, [r3, #0]
    wsptr[8*10] = (int) (tmp23 - tmp13);
 801a788:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801a78c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801a790:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 801a794:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 801a798:	1a8a      	subs	r2, r1, r2
 801a79a:	601a      	str	r2, [r3, #0]
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801a79c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 801a7a0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801a7a4:	441a      	add	r2, r3
 801a7a6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801a7aa:	3380      	adds	r3, #128	; 0x80
 801a7ac:	12d2      	asrs	r2, r2, #11
 801a7ae:	601a      	str	r2, [r3, #0]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801a7b0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 801a7b4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801a7b8:	1ad2      	subs	r2, r2, r3
 801a7ba:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801a7be:	f503 7390 	add.w	r3, r3, #288	; 0x120
 801a7c2:	12d2      	asrs	r2, r2, #11
 801a7c4:	601a      	str	r2, [r3, #0]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801a7c6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 801a7ca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a7ce:	441a      	add	r2, r3
 801a7d0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801a7d4:	33a0      	adds	r3, #160	; 0xa0
 801a7d6:	12d2      	asrs	r2, r2, #11
 801a7d8:	601a      	str	r2, [r3, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801a7da:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 801a7de:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a7e2:	1ad2      	subs	r2, r2, r3
 801a7e4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801a7e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801a7ec:	12d2      	asrs	r2, r2, #11
 801a7ee:	601a      	str	r2, [r3, #0]
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 801a7f0:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 801a7f4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801a7f8:	441a      	add	r2, r3
 801a7fa:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801a7fe:	33c0      	adds	r3, #192	; 0xc0
 801a800:	12d2      	asrs	r2, r2, #11
 801a802:	601a      	str	r2, [r3, #0]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 801a804:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 801a808:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801a80c:	1ad2      	subs	r2, r2, r3
 801a80e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801a812:	33e0      	adds	r3, #224	; 0xe0
 801a814:	12d2      	asrs	r2, r2, #11
 801a816:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801a818:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 801a81c:	3301      	adds	r3, #1
 801a81e:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 801a822:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801a826:	3302      	adds	r3, #2
 801a828:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 801a82c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801a830:	3304      	adds	r3, #4
 801a832:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 801a836:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801a83a:	3304      	adds	r3, #4
 801a83c:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 801a840:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 801a844:	2b07      	cmp	r3, #7
 801a846:	f77f ad91 	ble.w	801a36c <jpeg_idct_14x14+0x50>
  }

  /* Pass 2: process 14 rows from work array, store into output array. */

  wsptr = workspace;
 801a84a:	f107 0310 	add.w	r3, r7, #16
 801a84e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
  for (ctr = 0; ctr < 14; ctr++) {
 801a852:	2300      	movs	r3, #0
 801a854:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 801a858:	e290      	b.n	801ad7c <jpeg_idct_14x14+0xa60>
 801a85a:	bf00      	nop
 801a85c:	ffffc8fc 	.word	0xffffc8fc
 801a860:	ffffd3e1 	.word	0xffffd3e1
 801a864:	ffffdbf0 	.word	0xffffdbf0
 801a868:	ffffde0b 	.word	0xffffde0b
 801a86c:	fffff26e 	.word	0xfffff26e
 801a870:	ffffb409 	.word	0xffffb409
 801a874:	ffffc9e6 	.word	0xffffc9e6
    outptr = output_buf[ctr] + output_col;
 801a878:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 801a87c:	009b      	lsls	r3, r3, #2
 801a87e:	463a      	mov	r2, r7
 801a880:	6812      	ldr	r2, [r2, #0]
 801a882:	4413      	add	r3, r2
 801a884:	681a      	ldr	r2, [r3, #0]
 801a886:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801a88a:	4413      	add	r3, r2
 801a88c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218

    /* Even part */

    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801a890:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801a894:	681b      	ldr	r3, [r3, #0]
 801a896:	3310      	adds	r3, #16
 801a898:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    z1 <<= CONST_BITS;
 801a89c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801a8a0:	035b      	lsls	r3, r3, #13
 801a8a2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    z4 = (INT32) wsptr[4];
 801a8a6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801a8aa:	3310      	adds	r3, #16
 801a8ac:	681b      	ldr	r3, [r3, #0]
 801a8ae:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801a8b2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801a8b6:	f642 02c6 	movw	r2, #10438	; 0x28c6
 801a8ba:	fb02 f303 	mul.w	r3, r2, r3
 801a8be:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 801a8c2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801a8c6:	f640 2212 	movw	r2, #2578	; 0xa12
 801a8ca:	fb02 f303 	mul.w	r3, r2, r3
 801a8ce:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801a8d2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801a8d6:	f641 4237 	movw	r2, #7223	; 0x1c37
 801a8da:	fb02 f303 	mul.w	r3, r2, r3
 801a8de:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    tmp10 = z1 + z2;
 801a8e2:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801a8e6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801a8ea:	4413      	add	r3, r2
 801a8ec:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    tmp11 = z1 + z3;
 801a8f0:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801a8f4:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801a8f8:	4413      	add	r3, r2
 801a8fa:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
    tmp12 = z1 - z4;
 801a8fe:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801a902:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801a906:	1ad3      	subs	r3, r2, r3
 801a908:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc

    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 801a90c:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 801a910:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801a914:	441a      	add	r2, r3
 801a916:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801a91a:	1ad3      	subs	r3, r2, r3
 801a91c:	005b      	lsls	r3, r3, #1
 801a91e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801a922:	1ad3      	subs	r3, r2, r3
 801a924:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

    z1 = (INT32) wsptr[2];
 801a928:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801a92c:	3308      	adds	r3, #8
 801a92e:	681b      	ldr	r3, [r3, #0]
 801a930:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    z2 = (INT32) wsptr[6];
 801a934:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801a938:	3318      	adds	r3, #24
 801a93a:	681b      	ldr	r3, [r3, #0]
 801a93c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801a940:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801a944:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801a948:	4413      	add	r3, r2
 801a94a:	f242 3262 	movw	r2, #9058	; 0x2362
 801a94e:	fb02 f303 	mul.w	r3, r2, r3
 801a952:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 801a956:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801a95a:	f640 02bd 	movw	r2, #2237	; 0x8bd
 801a95e:	fb02 f303 	mul.w	r3, r2, r3
 801a962:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 801a966:	4413      	add	r3, r2
 801a968:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 801a96c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801a970:	4af1      	ldr	r2, [pc, #964]	; (801ad38 <jpeg_idct_14x14+0xa1c>)
 801a972:	fb02 f303 	mul.w	r3, r2, r3
 801a976:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 801a97a:	4413      	add	r3, r2
 801a97c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 801a980:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801a984:	f241 32a3 	movw	r2, #5027	; 0x13a3
 801a988:	fb02 f203 	mul.w	r2, r2, r3
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 801a98c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801a990:	49ea      	ldr	r1, [pc, #936]	; (801ad3c <jpeg_idct_14x14+0xa20>)
 801a992:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 801a996:	4413      	add	r3, r2
 801a998:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec

    tmp20 = tmp10 + tmp13;
 801a99c:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 801a9a0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801a9a4:	4413      	add	r3, r2
 801a9a6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
    tmp26 = tmp10 - tmp13;
 801a9aa:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 801a9ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801a9b2:	1ad3      	subs	r3, r2, r3
 801a9b4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
    tmp21 = tmp11 + tmp14;
 801a9b8:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 801a9bc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801a9c0:	4413      	add	r3, r2
 801a9c2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    tmp25 = tmp11 - tmp14;
 801a9c6:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 801a9ca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801a9ce:	1ad3      	subs	r3, r2, r3
 801a9d0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp22 = tmp12 + tmp15;
 801a9d4:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801a9d8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a9dc:	4413      	add	r3, r2
 801a9de:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    tmp24 = tmp12 - tmp15;
 801a9e2:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801a9e6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a9ea:	1ad3      	subs	r3, r2, r3
 801a9ec:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

    /* Odd part */

    z1 = (INT32) wsptr[1];
 801a9f0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801a9f4:	3304      	adds	r3, #4
 801a9f6:	681b      	ldr	r3, [r3, #0]
 801a9f8:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    z2 = (INT32) wsptr[3];
 801a9fc:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801aa00:	330c      	adds	r3, #12
 801aa02:	681b      	ldr	r3, [r3, #0]
 801aa04:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    z3 = (INT32) wsptr[5];
 801aa08:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801aa0c:	3314      	adds	r3, #20
 801aa0e:	681b      	ldr	r3, [r3, #0]
 801aa10:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
    z4 = (INT32) wsptr[7];
 801aa14:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801aa18:	331c      	adds	r3, #28
 801aa1a:	681b      	ldr	r3, [r3, #0]
 801aa1c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    z4 <<= CONST_BITS;
 801aa20:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801aa24:	035b      	lsls	r3, r3, #13
 801aa26:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    tmp14 = z1 + z3;
 801aa2a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801aa2e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801aa32:	4413      	add	r3, r2
 801aa34:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801aa38:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801aa3c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801aa40:	4413      	add	r3, r2
 801aa42:	f642 22b7 	movw	r2, #10935	; 0x2ab7
 801aa46:	fb02 f303 	mul.w	r3, r2, r3
 801aa4a:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 801aa4e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801aa52:	f242 6252 	movw	r2, #9810	; 0x2652
 801aa56:	fb02 f303 	mul.w	r3, r2, r3
 801aa5a:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 801aa5e:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 801aa62:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801aa66:	441a      	add	r2, r3
 801aa68:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801aa6c:	441a      	add	r2, r3
 801aa6e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801aa72:	49b3      	ldr	r1, [pc, #716]	; (801ad40 <jpeg_idct_14x14+0xa24>)
 801aa74:	fb01 f303 	mul.w	r3, r1, r3
 801aa78:	4413      	add	r3, r2
 801aa7a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 801aa7e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801aa82:	f641 0214 	movw	r2, #6164	; 0x1814
 801aa86:	fb02 f303 	mul.w	r3, r2, r3
 801aa8a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 801aa8e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801aa92:	4aac      	ldr	r2, [pc, #688]	; (801ad44 <jpeg_idct_14x14+0xa28>)
 801aa94:	fb02 f303 	mul.w	r3, r2, r3
 801aa98:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 801aa9c:	4413      	add	r3, r2
 801aa9e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    z1    -= z2;
 801aaa2:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801aaa6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801aaaa:	1ad3      	subs	r3, r2, r3
 801aaac:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 801aab0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801aab4:	f640 62f2 	movw	r2, #3826	; 0xef2
 801aab8:	fb02 f203 	mul.w	r2, r2, r3
 801aabc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801aac0:	1ad3      	subs	r3, r2, r3
 801aac2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    tmp16 += tmp15;
 801aac6:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 801aaca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801aace:	4413      	add	r3, r2
 801aad0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 801aad4:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 801aad8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801aadc:	4413      	add	r3, r2
 801aade:	f46f 62a2 	mvn.w	r2, #1296	; 0x510
 801aae2:	fb02 f203 	mul.w	r2, r2, r3
 801aae6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801aaea:	1ad3      	subs	r3, r2, r3
 801aaec:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 801aaf0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801aaf4:	4a94      	ldr	r2, [pc, #592]	; (801ad48 <jpeg_idct_14x14+0xa2c>)
 801aaf6:	fb02 f203 	mul.w	r2, r2, r3
 801aafa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801aafe:	4413      	add	r3, r2
 801ab00:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 801ab04:	4413      	add	r3, r2
 801ab06:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 801ab0a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801ab0e:	4a8f      	ldr	r2, [pc, #572]	; (801ad4c <jpeg_idct_14x14+0xa30>)
 801ab10:	fb02 f203 	mul.w	r2, r2, r3
 801ab14:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801ab18:	4413      	add	r3, r2
 801ab1a:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801ab1e:	4413      	add	r3, r2
 801ab20:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801ab24:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 801ab28:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801ab2c:	1ad3      	subs	r3, r2, r3
 801ab2e:	f642 42f8 	movw	r2, #11512	; 0x2cf8
 801ab32:	fb02 f303 	mul.w	r3, r2, r3
 801ab36:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801ab3a:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 801ab3e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801ab42:	441a      	add	r2, r3
 801ab44:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801ab48:	4981      	ldr	r1, [pc, #516]	; (801ad50 <jpeg_idct_14x14+0xa34>)
 801ab4a:	fb01 f303 	mul.w	r3, r1, r3
 801ab4e:	4413      	add	r3, r2
 801ab50:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 801ab54:	4413      	add	r3, r2
 801ab56:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 801ab5a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801ab5e:	f241 5299 	movw	r2, #5529	; 0x1599
 801ab62:	fb02 f203 	mul.w	r2, r2, r3
 801ab66:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801ab6a:	4413      	add	r3, r2
 801ab6c:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 801ab70:	4413      	add	r3, r2
 801ab72:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec

    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 801ab76:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801ab7a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801ab7e:	1ad3      	subs	r3, r2, r3
 801ab80:	035b      	lsls	r3, r3, #13
 801ab82:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 801ab86:	4413      	add	r3, r2
 801ab88:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801ab8c:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 801ab90:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801ab94:	4413      	add	r3, r2
 801ab96:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801ab98:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801ab9c:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801aba0:	4413      	add	r3, r2
 801aba2:	781a      	ldrb	r2, [r3, #0]
 801aba4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801aba8:	701a      	strb	r2, [r3, #0]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801abaa:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 801abae:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801abb2:	1ad3      	subs	r3, r2, r3
 801abb4:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801abb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801abba:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801abbe:	441a      	add	r2, r3
 801abc0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801abc4:	330d      	adds	r3, #13
 801abc6:	7812      	ldrb	r2, [r2, #0]
 801abc8:	701a      	strb	r2, [r3, #0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801abca:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 801abce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801abd2:	4413      	add	r3, r2
 801abd4:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801abd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801abda:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801abde:	441a      	add	r2, r3
 801abe0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801abe4:	3301      	adds	r3, #1
 801abe6:	7812      	ldrb	r2, [r2, #0]
 801abe8:	701a      	strb	r2, [r3, #0]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801abea:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 801abee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801abf2:	1ad3      	subs	r3, r2, r3
 801abf4:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801abf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801abfa:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801abfe:	441a      	add	r2, r3
 801ac00:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801ac04:	330c      	adds	r3, #12
 801ac06:	7812      	ldrb	r2, [r2, #0]
 801ac08:	701a      	strb	r2, [r3, #0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801ac0a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801ac0e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801ac12:	4413      	add	r3, r2
 801ac14:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801ac16:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801ac1a:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801ac1e:	441a      	add	r2, r3
 801ac20:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801ac24:	3302      	adds	r3, #2
 801ac26:	7812      	ldrb	r2, [r2, #0]
 801ac28:	701a      	strb	r2, [r3, #0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801ac2a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801ac2e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801ac32:	1ad3      	subs	r3, r2, r3
 801ac34:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801ac36:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801ac3a:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801ac3e:	441a      	add	r2, r3
 801ac40:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801ac44:	330b      	adds	r3, #11
 801ac46:	7812      	ldrb	r2, [r2, #0]
 801ac48:	701a      	strb	r2, [r3, #0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801ac4a:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 801ac4e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801ac52:	4413      	add	r3, r2
 801ac54:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801ac56:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801ac5a:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801ac5e:	441a      	add	r2, r3
 801ac60:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801ac64:	3303      	adds	r3, #3
 801ac66:	7812      	ldrb	r2, [r2, #0]
 801ac68:	701a      	strb	r2, [r3, #0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801ac6a:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 801ac6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801ac72:	1ad3      	subs	r3, r2, r3
 801ac74:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801ac76:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801ac7a:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801ac7e:	441a      	add	r2, r3
 801ac80:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801ac84:	330a      	adds	r3, #10
 801ac86:	7812      	ldrb	r2, [r2, #0]
 801ac88:	701a      	strb	r2, [r3, #0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801ac8a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 801ac8e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801ac92:	4413      	add	r3, r2
 801ac94:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801ac96:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801ac9a:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801ac9e:	441a      	add	r2, r3
 801aca0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801aca4:	3304      	adds	r3, #4
 801aca6:	7812      	ldrb	r2, [r2, #0]
 801aca8:	701a      	strb	r2, [r3, #0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801acaa:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 801acae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801acb2:	1ad3      	subs	r3, r2, r3
 801acb4:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801acb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801acba:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801acbe:	441a      	add	r2, r3
 801acc0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801acc4:	3309      	adds	r3, #9
 801acc6:	7812      	ldrb	r2, [r2, #0]
 801acc8:	701a      	strb	r2, [r3, #0]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801acca:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 801acce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801acd2:	4413      	add	r3, r2
 801acd4:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801acd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801acda:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801acde:	441a      	add	r2, r3
 801ace0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801ace4:	3305      	adds	r3, #5
 801ace6:	7812      	ldrb	r2, [r2, #0]
 801ace8:	701a      	strb	r2, [r3, #0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801acea:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 801acee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801acf2:	1ad3      	subs	r3, r2, r3
 801acf4:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801acf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801acfa:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801acfe:	441a      	add	r2, r3
 801ad00:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801ad04:	3308      	adds	r3, #8
 801ad06:	7812      	ldrb	r2, [r2, #0]
 801ad08:	701a      	strb	r2, [r3, #0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801ad0a:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 801ad0e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801ad12:	4413      	add	r3, r2
 801ad14:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801ad16:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801ad1a:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801ad1e:	441a      	add	r2, r3
 801ad20:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801ad24:	3306      	adds	r3, #6
 801ad26:	7812      	ldrb	r2, [r2, #0]
 801ad28:	701a      	strb	r2, [r3, #0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801ad2a:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 801ad2e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801ad32:	1ad3      	subs	r3, r2, r3
 801ad34:	149b      	asrs	r3, r3, #18
 801ad36:	e00d      	b.n	801ad54 <jpeg_idct_14x14+0xa38>
 801ad38:	ffffc8fc 	.word	0xffffc8fc
 801ad3c:	ffffd3e1 	.word	0xffffd3e1
 801ad40:	ffffdbf0 	.word	0xffffdbf0
 801ad44:	ffffde0b 	.word	0xffffde0b
 801ad48:	fffff26e 	.word	0xfffff26e
 801ad4c:	ffffb409 	.word	0xffffb409
 801ad50:	ffffc9e6 	.word	0xffffc9e6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801ad54:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801ad58:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801ad5c:	441a      	add	r2, r3
 801ad5e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801ad62:	3307      	adds	r3, #7
 801ad64:	7812      	ldrb	r2, [r2, #0]
 801ad66:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 801ad68:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801ad6c:	3320      	adds	r3, #32
 801ad6e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
  for (ctr = 0; ctr < 14; ctr++) {
 801ad72:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 801ad76:	3301      	adds	r3, #1
 801ad78:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 801ad7c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 801ad80:	2b0d      	cmp	r3, #13
 801ad82:	f77f ad79 	ble.w	801a878 <jpeg_idct_14x14+0x55c>
  }
}
 801ad86:	bf00      	nop
 801ad88:	bf00      	nop
 801ad8a:	f507 770c 	add.w	r7, r7, #560	; 0x230
 801ad8e:	46bd      	mov	sp, r7
 801ad90:	bc90      	pop	{r4, r7}
 801ad92:	4770      	bx	lr

0801ad94 <jpeg_idct_15x15>:

GLOBAL(void)
jpeg_idct_15x15 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801ad94:	b490      	push	{r4, r7}
 801ad96:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 801ad9a:	af00      	add	r7, sp, #0
 801ad9c:	f107 040c 	add.w	r4, r7, #12
 801ada0:	6020      	str	r0, [r4, #0]
 801ada2:	f107 0008 	add.w	r0, r7, #8
 801ada6:	6001      	str	r1, [r0, #0]
 801ada8:	1d39      	adds	r1, r7, #4
 801adaa:	600a      	str	r2, [r1, #0]
 801adac:	463a      	mov	r2, r7
 801adae:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801adb0:	f107 030c 	add.w	r3, r7, #12
 801adb4:	681b      	ldr	r3, [r3, #0]
 801adb6:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801adba:	3380      	adds	r3, #128	; 0x80
 801adbc:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
  int workspace[8*15];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 801adc0:	1d3b      	adds	r3, r7, #4
 801adc2:	681b      	ldr	r3, [r3, #0]
 801adc4:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801adc8:	f107 0308 	add.w	r3, r7, #8
 801adcc:	681b      	ldr	r3, [r3, #0]
 801adce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801add0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
  wsptr = workspace;
 801add4:	f107 0314 	add.w	r3, r7, #20
 801add8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801addc:	2300      	movs	r3, #0
 801adde:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 801ade2:	e28d      	b.n	801b300 <jpeg_idct_15x15+0x56c>
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801ade4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801ade8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801adec:	461a      	mov	r2, r3
 801adee:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801adf2:	681b      	ldr	r3, [r3, #0]
 801adf4:	fb03 f302 	mul.w	r3, r3, r2
 801adf8:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    z1 <<= CONST_BITS;
 801adfc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801ae00:	035b      	lsls	r3, r3, #13
 801ae02:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801ae06:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801ae0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801ae0e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801ae12:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801ae16:	3320      	adds	r3, #32
 801ae18:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ae1c:	461a      	mov	r2, r3
 801ae1e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801ae22:	3340      	adds	r3, #64	; 0x40
 801ae24:	681b      	ldr	r3, [r3, #0]
 801ae26:	fb03 f302 	mul.w	r3, r3, r2
 801ae2a:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801ae2e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801ae32:	3340      	adds	r3, #64	; 0x40
 801ae34:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ae38:	461a      	mov	r2, r3
 801ae3a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801ae3e:	3380      	adds	r3, #128	; 0x80
 801ae40:	681b      	ldr	r3, [r3, #0]
 801ae42:	fb03 f302 	mul.w	r3, r3, r2
 801ae46:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801ae4a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801ae4e:	3360      	adds	r3, #96	; 0x60
 801ae50:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ae54:	461a      	mov	r2, r3
 801ae56:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801ae5a:	33c0      	adds	r3, #192	; 0xc0
 801ae5c:	681b      	ldr	r3, [r3, #0]
 801ae5e:	fb03 f302 	mul.w	r3, r3, r2
 801ae62:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230

    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 801ae66:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801ae6a:	f640 52fc 	movw	r2, #3580	; 0xdfc
 801ae6e:	fb02 f303 	mul.w	r3, r2, r3
 801ae72:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 801ae76:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801ae7a:	f242 429d 	movw	r2, #9373	; 0x249d
 801ae7e:	fb02 f303 	mul.w	r3, r2, r3
 801ae82:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

    tmp12 = z1 - tmp10;
 801ae86:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801ae8a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801ae8e:	1ad3      	subs	r3, r2, r3
 801ae90:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
    tmp13 = z1 + tmp11;
 801ae94:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801ae98:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801ae9c:	4413      	add	r3, r2
 801ae9e:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 801aea2:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 801aea6:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801aeaa:	1ad3      	subs	r3, r2, r3
 801aeac:	005b      	lsls	r3, r3, #1
 801aeae:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801aeb2:	1ad3      	subs	r3, r2, r3
 801aeb4:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

    z4 = z2 - z3;
 801aeb8:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801aebc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801aec0:	1ad3      	subs	r3, r2, r3
 801aec2:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    z3 += z2;
 801aec6:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 801aeca:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801aece:	4413      	add	r3, r2
 801aed0:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 801aed4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801aed8:	f642 22ce 	movw	r2, #10958	; 0x2ace
 801aedc:	fb02 f303 	mul.w	r3, r2, r3
 801aee0:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 801aee4:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801aee8:	f44f 72bb 	mov.w	r2, #374	; 0x176
 801aeec:	fb02 f303 	mul.w	r3, r2, r3
 801aef0:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 801aef4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801aef8:	f642 6213 	movw	r2, #11795	; 0x2e13
 801aefc:	fb02 f303 	mul.w	r3, r2, r3
 801af00:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

    tmp20 = tmp13 + tmp10 + tmp11;
 801af04:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 801af08:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801af0c:	4413      	add	r3, r2
 801af0e:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 801af12:	4413      	add	r3, r2
 801af14:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 801af18:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 801af1c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801af20:	1ad2      	subs	r2, r2, r3
 801af22:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801af26:	4413      	add	r3, r2
 801af28:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801af2c:	4413      	add	r3, r2
 801af2e:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218

    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 801af32:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801af36:	f241 1282 	movw	r2, #4482	; 0x1182
 801af3a:	fb02 f303 	mul.w	r3, r2, r3
 801af3e:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 801af42:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801af46:	f640 42c7 	movw	r2, #3271	; 0xcc7
 801af4a:	fb02 f303 	mul.w	r3, r2, r3
 801af4e:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

    tmp25 = tmp13 - tmp10 - tmp11;
 801af52:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 801af56:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801af5a:	1ad2      	subs	r2, r2, r3
 801af5c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801af60:	1ad3      	subs	r3, r2, r3
 801af62:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 801af66:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 801af6a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801af6e:	441a      	add	r2, r3
 801af70:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801af74:	1ad2      	subs	r2, r2, r3
 801af76:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801af7a:	1ad3      	subs	r3, r2, r3
 801af7c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 801af80:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801af84:	f641 124c 	movw	r2, #6476	; 0x194c
 801af88:	fb02 f303 	mul.w	r3, r2, r3
 801af8c:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 801af90:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801af94:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 801af98:	fb02 f303 	mul.w	r3, r2, r3
 801af9c:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

    tmp21 = tmp12 + tmp10 + tmp11;
 801afa0:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 801afa4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801afa8:	4413      	add	r3, r2
 801afaa:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 801afae:	4413      	add	r3, r2
 801afb0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    tmp24 = tmp13 - tmp10 + tmp11;
 801afb4:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 801afb8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801afbc:	1ad3      	subs	r3, r2, r3
 801afbe:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 801afc2:	4413      	add	r3, r2
 801afc4:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
    tmp11 += tmp11;
 801afc8:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801afcc:	005b      	lsls	r3, r3, #1
 801afce:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 801afd2:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801afd6:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801afda:	4413      	add	r3, r2
 801afdc:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 801afe0:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801afe4:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801afe8:	1ad2      	subs	r2, r2, r3
 801afea:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801afee:	1ad3      	subs	r3, r2, r3
 801aff0:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801aff4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801aff8:	3310      	adds	r3, #16
 801affa:	f9b3 3000 	ldrsh.w	r3, [r3]
 801affe:	461a      	mov	r2, r3
 801b000:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801b004:	3320      	adds	r3, #32
 801b006:	681b      	ldr	r3, [r3, #0]
 801b008:	fb03 f302 	mul.w	r3, r3, r2
 801b00c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801b010:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801b014:	3330      	adds	r3, #48	; 0x30
 801b016:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b01a:	461a      	mov	r2, r3
 801b01c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801b020:	3360      	adds	r3, #96	; 0x60
 801b022:	681b      	ldr	r3, [r3, #0]
 801b024:	fb03 f302 	mul.w	r3, r3, r2
 801b028:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801b02c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801b030:	3350      	adds	r3, #80	; 0x50
 801b032:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b036:	461a      	mov	r2, r3
 801b038:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801b03c:	33a0      	adds	r3, #160	; 0xa0
 801b03e:	681b      	ldr	r3, [r3, #0]
 801b040:	fb03 f302 	mul.w	r3, r3, r2
 801b044:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 801b048:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801b04c:	f242 7231 	movw	r2, #10033	; 0x2731
 801b050:	fb02 f303 	mul.w	r3, r2, r3
 801b054:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801b058:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801b05c:	3370      	adds	r3, #112	; 0x70
 801b05e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b062:	461a      	mov	r2, r3
 801b064:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801b068:	33e0      	adds	r3, #224	; 0xe0
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	fb03 f302 	mul.w	r3, r3, r2
 801b070:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230

    tmp13 = z2 - z4;
 801b074:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801b078:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801b07c:	1ad3      	subs	r3, r2, r3
 801b07e:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 801b082:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801b086:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 801b08a:	4413      	add	r3, r2
 801b08c:	f641 229a 	movw	r2, #6810	; 0x1a9a
 801b090:	fb02 f303 	mul.w	r3, r2, r3
 801b094:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 801b098:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801b09c:	f241 0271 	movw	r2, #4209	; 0x1071
 801b0a0:	fb02 f303 	mul.w	r3, r2, r3
 801b0a4:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801b0a8:	4413      	add	r3, r2
 801b0aa:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 801b0ae:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 801b0b2:	4a9a      	ldr	r2, [pc, #616]	; (801b31c <jpeg_idct_15x15+0x588>)
 801b0b4:	fb02 f303 	mul.w	r3, r2, r3
 801b0b8:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801b0bc:	4413      	add	r3, r2
 801b0be:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 801b0c2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801b0c6:	4a96      	ldr	r2, [pc, #600]	; (801b320 <jpeg_idct_15x15+0x58c>)
 801b0c8:	fb02 f303 	mul.w	r3, r2, r3
 801b0cc:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 801b0d0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801b0d4:	4a93      	ldr	r2, [pc, #588]	; (801b324 <jpeg_idct_15x15+0x590>)
 801b0d6:	fb02 f303 	mul.w	r3, r2, r3
 801b0da:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    z2 = z1 - z4;
 801b0de:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801b0e2:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801b0e6:	1ad3      	subs	r3, r2, r3
 801b0e8:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 801b0ec:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801b0f0:	f642 5202 	movw	r2, #11522	; 0x2d02
 801b0f4:	fb02 f303 	mul.w	r3, r2, r3
 801b0f8:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 801b0fc:	4413      	add	r3, r2
 801b0fe:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801b102:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801b106:	f644 62a3 	movw	r2, #20131	; 0x4ea3
 801b10a:	fb02 f203 	mul.w	r2, r2, r3
 801b10e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801b112:	441a      	add	r2, r3
 801b114:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801b118:	1ad3      	subs	r3, r2, r3
 801b11a:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801b11e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801b122:	4a81      	ldr	r2, [pc, #516]	; (801b328 <jpeg_idct_15x15+0x594>)
 801b124:	fb02 f203 	mul.w	r2, r2, r3
 801b128:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801b12c:	4413      	add	r3, r2
 801b12e:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 801b132:	4413      	add	r3, r2
 801b134:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 801b138:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801b13c:	f242 7231 	movw	r2, #10033	; 0x2731
 801b140:	fb02 f203 	mul.w	r2, r2, r3
 801b144:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801b148:	1ad3      	subs	r3, r2, r3
 801b14a:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 801b14e:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801b152:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801b156:	4413      	add	r3, r2
 801b158:	f241 2268 	movw	r2, #4712	; 0x1268
 801b15c:	fb02 f303 	mul.w	r3, r2, r3
 801b160:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 801b164:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801b168:	f640 7239 	movw	r2, #3897	; 0xf39
 801b16c:	fb02 f203 	mul.w	r2, r2, r3
 801b170:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801b174:	441a      	add	r2, r3
 801b176:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801b17a:	1ad3      	subs	r3, r2, r3
 801b17c:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 801b180:	4413      	add	r3, r2
 801b182:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 801b186:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801b18a:	4a68      	ldr	r2, [pc, #416]	; (801b32c <jpeg_idct_15x15+0x598>)
 801b18c:	fb02 f203 	mul.w	r2, r2, r3
 801b190:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801b194:	441a      	add	r2, r3
 801b196:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801b19a:	4413      	add	r3, r2
 801b19c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801b1a0:	4413      	add	r3, r2
 801b1a2:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801b1a6:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801b1aa:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801b1ae:	4413      	add	r3, r2
 801b1b0:	12da      	asrs	r2, r3, #11
 801b1b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b1b6:	601a      	str	r2, [r3, #0]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801b1b8:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801b1bc:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801b1c0:	1ad2      	subs	r2, r2, r3
 801b1c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b1c6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 801b1ca:	12d2      	asrs	r2, r2, #11
 801b1cc:	601a      	str	r2, [r3, #0]
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801b1ce:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 801b1d2:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801b1d6:	441a      	add	r2, r3
 801b1d8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b1dc:	3320      	adds	r3, #32
 801b1de:	12d2      	asrs	r2, r2, #11
 801b1e0:	601a      	str	r2, [r3, #0]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801b1e2:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 801b1e6:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801b1ea:	1ad2      	subs	r2, r2, r3
 801b1ec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b1f0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 801b1f4:	12d2      	asrs	r2, r2, #11
 801b1f6:	601a      	str	r2, [r3, #0]
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801b1f8:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 801b1fc:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801b200:	441a      	add	r2, r3
 801b202:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b206:	3340      	adds	r3, #64	; 0x40
 801b208:	12d2      	asrs	r2, r2, #11
 801b20a:	601a      	str	r2, [r3, #0]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801b20c:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 801b210:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801b214:	1ad2      	subs	r2, r2, r3
 801b216:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b21a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 801b21e:	12d2      	asrs	r2, r2, #11
 801b220:	601a      	str	r2, [r3, #0]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801b222:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 801b226:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 801b22a:	441a      	add	r2, r3
 801b22c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b230:	3360      	adds	r3, #96	; 0x60
 801b232:	12d2      	asrs	r2, r2, #11
 801b234:	601a      	str	r2, [r3, #0]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801b236:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 801b23a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 801b23e:	1ad2      	subs	r2, r2, r3
 801b240:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b244:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801b248:	12d2      	asrs	r2, r2, #11
 801b24a:	601a      	str	r2, [r3, #0]
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801b24c:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 801b250:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801b254:	441a      	add	r2, r3
 801b256:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b25a:	3380      	adds	r3, #128	; 0x80
 801b25c:	12d2      	asrs	r2, r2, #11
 801b25e:	601a      	str	r2, [r3, #0]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801b260:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 801b264:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801b268:	1ad2      	subs	r2, r2, r3
 801b26a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b26e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801b272:	12d2      	asrs	r2, r2, #11
 801b274:	601a      	str	r2, [r3, #0]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801b276:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801b27a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801b27e:	441a      	add	r2, r3
 801b280:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b284:	33a0      	adds	r3, #160	; 0xa0
 801b286:	12d2      	asrs	r2, r2, #11
 801b288:	601a      	str	r2, [r3, #0]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801b28a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801b28e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801b292:	1ad2      	subs	r2, r2, r3
 801b294:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b298:	f503 7390 	add.w	r3, r3, #288	; 0x120
 801b29c:	12d2      	asrs	r2, r2, #11
 801b29e:	601a      	str	r2, [r3, #0]
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 801b2a0:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 801b2a4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801b2a8:	441a      	add	r2, r3
 801b2aa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b2ae:	33c0      	adds	r3, #192	; 0xc0
 801b2b0:	12d2      	asrs	r2, r2, #11
 801b2b2:	601a      	str	r2, [r3, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 801b2b4:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 801b2b8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801b2bc:	1ad2      	subs	r2, r2, r3
 801b2be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b2c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801b2c6:	12d2      	asrs	r2, r2, #11
 801b2c8:	601a      	str	r2, [r3, #0]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 801b2ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b2ce:	33e0      	adds	r3, #224	; 0xe0
 801b2d0:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 801b2d4:	12d2      	asrs	r2, r2, #11
 801b2d6:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801b2d8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801b2dc:	3301      	adds	r3, #1
 801b2de:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 801b2e2:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801b2e6:	3302      	adds	r3, #2
 801b2e8:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 801b2ec:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801b2f0:	3304      	adds	r3, #4
 801b2f2:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 801b2f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b2fa:	3304      	adds	r3, #4
 801b2fc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 801b300:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801b304:	2b07      	cmp	r3, #7
 801b306:	f77f ad6d 	ble.w	801ade4 <jpeg_idct_15x15+0x50>
  }

  /* Pass 2: process 15 rows from work array, store into output array. */

  wsptr = workspace;
 801b30a:	f107 0314 	add.w	r3, r7, #20
 801b30e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
  for (ctr = 0; ctr < 15; ctr++) {
 801b312:	2300      	movs	r3, #0
 801b314:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 801b318:	e2a9      	b.n	801b86e <jpeg_idct_15x15+0xada>
 801b31a:	bf00      	nop
 801b31c:	ffffba5c 	.word	0xffffba5c
 801b320:	ffffe566 	.word	0xffffe566
 801b324:	ffffd4f6 	.word	0xffffd4f6
 801b328:	ffffdc67 	.word	0xffffdc67
 801b32c:	ffffe42f 	.word	0xffffe42f
    outptr = output_buf[ctr] + output_col;
 801b330:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801b334:	009b      	lsls	r3, r3, #2
 801b336:	463a      	mov	r2, r7
 801b338:	6812      	ldr	r2, [r2, #0]
 801b33a:	4413      	add	r3, r2
 801b33c:	681a      	ldr	r2, [r3, #0]
 801b33e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801b342:	4413      	add	r3, r2
 801b344:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240

    /* Even part */

    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801b348:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b34c:	681b      	ldr	r3, [r3, #0]
 801b34e:	3310      	adds	r3, #16
 801b350:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    z1 <<= CONST_BITS;
 801b354:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801b358:	035b      	lsls	r3, r3, #13
 801b35a:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

    z2 = (INT32) wsptr[2];
 801b35e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b362:	3308      	adds	r3, #8
 801b364:	681b      	ldr	r3, [r3, #0]
 801b366:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    z3 = (INT32) wsptr[4];
 801b36a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b36e:	3310      	adds	r3, #16
 801b370:	681b      	ldr	r3, [r3, #0]
 801b372:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    z4 = (INT32) wsptr[6];
 801b376:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b37a:	3318      	adds	r3, #24
 801b37c:	681b      	ldr	r3, [r3, #0]
 801b37e:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230

    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 801b382:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801b386:	f640 52fc 	movw	r2, #3580	; 0xdfc
 801b38a:	fb02 f303 	mul.w	r3, r2, r3
 801b38e:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 801b392:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801b396:	f242 429d 	movw	r2, #9373	; 0x249d
 801b39a:	fb02 f303 	mul.w	r3, r2, r3
 801b39e:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

    tmp12 = z1 - tmp10;
 801b3a2:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801b3a6:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801b3aa:	1ad3      	subs	r3, r2, r3
 801b3ac:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
    tmp13 = z1 + tmp11;
 801b3b0:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801b3b4:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801b3b8:	4413      	add	r3, r2
 801b3ba:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 801b3be:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 801b3c2:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801b3c6:	1ad3      	subs	r3, r2, r3
 801b3c8:	005b      	lsls	r3, r3, #1
 801b3ca:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801b3ce:	1ad3      	subs	r3, r2, r3
 801b3d0:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

    z4 = z2 - z3;
 801b3d4:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801b3d8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801b3dc:	1ad3      	subs	r3, r2, r3
 801b3de:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    z3 += z2;
 801b3e2:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 801b3e6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801b3ea:	4413      	add	r3, r2
 801b3ec:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 801b3f0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801b3f4:	f642 22ce 	movw	r2, #10958	; 0x2ace
 801b3f8:	fb02 f303 	mul.w	r3, r2, r3
 801b3fc:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 801b400:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801b404:	f44f 72bb 	mov.w	r2, #374	; 0x176
 801b408:	fb02 f303 	mul.w	r3, r2, r3
 801b40c:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 801b410:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801b414:	f642 6213 	movw	r2, #11795	; 0x2e13
 801b418:	fb02 f303 	mul.w	r3, r2, r3
 801b41c:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

    tmp20 = tmp13 + tmp10 + tmp11;
 801b420:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 801b424:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801b428:	4413      	add	r3, r2
 801b42a:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 801b42e:	4413      	add	r3, r2
 801b430:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 801b434:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 801b438:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801b43c:	1ad2      	subs	r2, r2, r3
 801b43e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801b442:	4413      	add	r3, r2
 801b444:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801b448:	4413      	add	r3, r2
 801b44a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218

    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 801b44e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801b452:	f241 1282 	movw	r2, #4482	; 0x1182
 801b456:	fb02 f303 	mul.w	r3, r2, r3
 801b45a:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 801b45e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801b462:	f640 42c7 	movw	r2, #3271	; 0xcc7
 801b466:	fb02 f303 	mul.w	r3, r2, r3
 801b46a:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

    tmp25 = tmp13 - tmp10 - tmp11;
 801b46e:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 801b472:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801b476:	1ad2      	subs	r2, r2, r3
 801b478:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801b47c:	1ad3      	subs	r3, r2, r3
 801b47e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 801b482:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 801b486:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801b48a:	441a      	add	r2, r3
 801b48c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801b490:	1ad2      	subs	r2, r2, r3
 801b492:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801b496:	1ad3      	subs	r3, r2, r3
 801b498:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 801b49c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801b4a0:	f641 124c 	movw	r2, #6476	; 0x194c
 801b4a4:	fb02 f303 	mul.w	r3, r2, r3
 801b4a8:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 801b4ac:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801b4b0:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 801b4b4:	fb02 f303 	mul.w	r3, r2, r3
 801b4b8:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

    tmp21 = tmp12 + tmp10 + tmp11;
 801b4bc:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 801b4c0:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801b4c4:	4413      	add	r3, r2
 801b4c6:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 801b4ca:	4413      	add	r3, r2
 801b4cc:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    tmp24 = tmp13 - tmp10 + tmp11;
 801b4d0:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 801b4d4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801b4d8:	1ad3      	subs	r3, r2, r3
 801b4da:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 801b4de:	4413      	add	r3, r2
 801b4e0:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
    tmp11 += tmp11;
 801b4e4:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801b4e8:	005b      	lsls	r3, r3, #1
 801b4ea:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 801b4ee:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801b4f2:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801b4f6:	4413      	add	r3, r2
 801b4f8:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 801b4fc:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801b500:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801b504:	1ad2      	subs	r2, r2, r3
 801b506:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801b50a:	1ad3      	subs	r3, r2, r3
 801b50c:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

    /* Odd part */

    z1 = (INT32) wsptr[1];
 801b510:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b514:	3304      	adds	r3, #4
 801b516:	681b      	ldr	r3, [r3, #0]
 801b518:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    z2 = (INT32) wsptr[3];
 801b51c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b520:	330c      	adds	r3, #12
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    z4 = (INT32) wsptr[5];
 801b528:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b52c:	3314      	adds	r3, #20
 801b52e:	681b      	ldr	r3, [r3, #0]
 801b530:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 801b534:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801b538:	f242 7231 	movw	r2, #10033	; 0x2731
 801b53c:	fb02 f303 	mul.w	r3, r2, r3
 801b540:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    z4 = (INT32) wsptr[7];
 801b544:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b548:	331c      	adds	r3, #28
 801b54a:	681b      	ldr	r3, [r3, #0]
 801b54c:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230

    tmp13 = z2 - z4;
 801b550:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801b554:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801b558:	1ad3      	subs	r3, r2, r3
 801b55a:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 801b55e:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801b562:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 801b566:	4413      	add	r3, r2
 801b568:	f641 229a 	movw	r2, #6810	; 0x1a9a
 801b56c:	fb02 f303 	mul.w	r3, r2, r3
 801b570:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 801b574:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801b578:	f241 0271 	movw	r2, #4209	; 0x1071
 801b57c:	fb02 f303 	mul.w	r3, r2, r3
 801b580:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801b584:	4413      	add	r3, r2
 801b586:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 801b58a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 801b58e:	4abe      	ldr	r2, [pc, #760]	; (801b888 <jpeg_idct_15x15+0xaf4>)
 801b590:	fb02 f303 	mul.w	r3, r2, r3
 801b594:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801b598:	4413      	add	r3, r2
 801b59a:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 801b59e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801b5a2:	4aba      	ldr	r2, [pc, #744]	; (801b88c <jpeg_idct_15x15+0xaf8>)
 801b5a4:	fb02 f303 	mul.w	r3, r2, r3
 801b5a8:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 801b5ac:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801b5b0:	4ab7      	ldr	r2, [pc, #732]	; (801b890 <jpeg_idct_15x15+0xafc>)
 801b5b2:	fb02 f303 	mul.w	r3, r2, r3
 801b5b6:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    z2 = z1 - z4;
 801b5ba:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801b5be:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801b5c2:	1ad3      	subs	r3, r2, r3
 801b5c4:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 801b5c8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801b5cc:	f642 5202 	movw	r2, #11522	; 0x2d02
 801b5d0:	fb02 f303 	mul.w	r3, r2, r3
 801b5d4:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 801b5d8:	4413      	add	r3, r2
 801b5da:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801b5de:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801b5e2:	f644 62a3 	movw	r2, #20131	; 0x4ea3
 801b5e6:	fb02 f203 	mul.w	r2, r2, r3
 801b5ea:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801b5ee:	441a      	add	r2, r3
 801b5f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801b5f4:	1ad3      	subs	r3, r2, r3
 801b5f6:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801b5fa:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801b5fe:	4aa5      	ldr	r2, [pc, #660]	; (801b894 <jpeg_idct_15x15+0xb00>)
 801b600:	fb02 f203 	mul.w	r2, r2, r3
 801b604:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801b608:	4413      	add	r3, r2
 801b60a:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 801b60e:	4413      	add	r3, r2
 801b610:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 801b614:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801b618:	f242 7231 	movw	r2, #10033	; 0x2731
 801b61c:	fb02 f203 	mul.w	r2, r2, r3
 801b620:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801b624:	1ad3      	subs	r3, r2, r3
 801b626:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 801b62a:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801b62e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801b632:	4413      	add	r3, r2
 801b634:	f241 2268 	movw	r2, #4712	; 0x1268
 801b638:	fb02 f303 	mul.w	r3, r2, r3
 801b63c:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 801b640:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801b644:	f640 7239 	movw	r2, #3897	; 0xf39
 801b648:	fb02 f203 	mul.w	r2, r2, r3
 801b64c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801b650:	441a      	add	r2, r3
 801b652:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801b656:	1ad3      	subs	r3, r2, r3
 801b658:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 801b65c:	4413      	add	r3, r2
 801b65e:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 801b662:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801b666:	4a8c      	ldr	r2, [pc, #560]	; (801b898 <jpeg_idct_15x15+0xb04>)
 801b668:	fb02 f203 	mul.w	r2, r2, r3
 801b66c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801b670:	441a      	add	r2, r3
 801b672:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801b676:	4413      	add	r3, r2
 801b678:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801b67c:	4413      	add	r3, r2
 801b67e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801b682:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801b686:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801b68a:	4413      	add	r3, r2
 801b68c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801b68e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801b692:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801b696:	4413      	add	r3, r2
 801b698:	781a      	ldrb	r2, [r3, #0]
 801b69a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801b69e:	701a      	strb	r2, [r3, #0]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801b6a0:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801b6a4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801b6a8:	1ad3      	subs	r3, r2, r3
 801b6aa:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801b6ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801b6b0:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801b6b4:	441a      	add	r2, r3
 801b6b6:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801b6ba:	330e      	adds	r3, #14
 801b6bc:	7812      	ldrb	r2, [r2, #0]
 801b6be:	701a      	strb	r2, [r3, #0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801b6c0:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 801b6c4:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801b6c8:	4413      	add	r3, r2
 801b6ca:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801b6cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801b6d0:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801b6d4:	441a      	add	r2, r3
 801b6d6:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801b6da:	3301      	adds	r3, #1
 801b6dc:	7812      	ldrb	r2, [r2, #0]
 801b6de:	701a      	strb	r2, [r3, #0]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801b6e0:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 801b6e4:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801b6e8:	1ad3      	subs	r3, r2, r3
 801b6ea:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801b6ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801b6f0:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801b6f4:	441a      	add	r2, r3
 801b6f6:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801b6fa:	330d      	adds	r3, #13
 801b6fc:	7812      	ldrb	r2, [r2, #0]
 801b6fe:	701a      	strb	r2, [r3, #0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801b700:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 801b704:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801b708:	4413      	add	r3, r2
 801b70a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801b70c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801b710:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801b714:	441a      	add	r2, r3
 801b716:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801b71a:	3302      	adds	r3, #2
 801b71c:	7812      	ldrb	r2, [r2, #0]
 801b71e:	701a      	strb	r2, [r3, #0]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801b720:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 801b724:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801b728:	1ad3      	subs	r3, r2, r3
 801b72a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801b72c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801b730:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801b734:	441a      	add	r2, r3
 801b736:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801b73a:	330c      	adds	r3, #12
 801b73c:	7812      	ldrb	r2, [r2, #0]
 801b73e:	701a      	strb	r2, [r3, #0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801b740:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 801b744:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 801b748:	4413      	add	r3, r2
 801b74a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801b74c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801b750:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801b754:	441a      	add	r2, r3
 801b756:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801b75a:	3303      	adds	r3, #3
 801b75c:	7812      	ldrb	r2, [r2, #0]
 801b75e:	701a      	strb	r2, [r3, #0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801b760:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 801b764:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 801b768:	1ad3      	subs	r3, r2, r3
 801b76a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801b76c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801b770:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801b774:	441a      	add	r2, r3
 801b776:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801b77a:	330b      	adds	r3, #11
 801b77c:	7812      	ldrb	r2, [r2, #0]
 801b77e:	701a      	strb	r2, [r3, #0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801b780:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 801b784:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801b788:	4413      	add	r3, r2
 801b78a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801b78c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801b790:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801b794:	441a      	add	r2, r3
 801b796:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801b79a:	3304      	adds	r3, #4
 801b79c:	7812      	ldrb	r2, [r2, #0]
 801b79e:	701a      	strb	r2, [r3, #0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801b7a0:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 801b7a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801b7a8:	1ad3      	subs	r3, r2, r3
 801b7aa:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801b7ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801b7b0:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801b7b4:	441a      	add	r2, r3
 801b7b6:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801b7ba:	330a      	adds	r3, #10
 801b7bc:	7812      	ldrb	r2, [r2, #0]
 801b7be:	701a      	strb	r2, [r3, #0]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801b7c0:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801b7c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801b7c8:	4413      	add	r3, r2
 801b7ca:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801b7cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801b7d0:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801b7d4:	441a      	add	r2, r3
 801b7d6:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801b7da:	3305      	adds	r3, #5
 801b7dc:	7812      	ldrb	r2, [r2, #0]
 801b7de:	701a      	strb	r2, [r3, #0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801b7e0:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801b7e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801b7e8:	1ad3      	subs	r3, r2, r3
 801b7ea:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801b7ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801b7f0:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801b7f4:	441a      	add	r2, r3
 801b7f6:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801b7fa:	3309      	adds	r3, #9
 801b7fc:	7812      	ldrb	r2, [r2, #0]
 801b7fe:	701a      	strb	r2, [r3, #0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801b800:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 801b804:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801b808:	4413      	add	r3, r2
 801b80a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801b80c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801b810:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801b814:	441a      	add	r2, r3
 801b816:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801b81a:	3306      	adds	r3, #6
 801b81c:	7812      	ldrb	r2, [r2, #0]
 801b81e:	701a      	strb	r2, [r3, #0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801b820:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 801b824:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801b828:	1ad3      	subs	r3, r2, r3
 801b82a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801b82c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801b830:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801b834:	441a      	add	r2, r3
 801b836:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801b83a:	3308      	adds	r3, #8
 801b83c:	7812      	ldrb	r2, [r2, #0]
 801b83e:	701a      	strb	r2, [r3, #0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
 801b840:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801b844:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801b846:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
 801b84a:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801b84e:	441a      	add	r2, r3
 801b850:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801b854:	3307      	adds	r3, #7
 801b856:	7812      	ldrb	r2, [r2, #0]
 801b858:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 801b85a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801b85e:	3320      	adds	r3, #32
 801b860:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
  for (ctr = 0; ctr < 15; ctr++) {
 801b864:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801b868:	3301      	adds	r3, #1
 801b86a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 801b86e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801b872:	2b0e      	cmp	r3, #14
 801b874:	f77f ad5c 	ble.w	801b330 <jpeg_idct_15x15+0x59c>
  }
}
 801b878:	bf00      	nop
 801b87a:	bf00      	nop
 801b87c:	f507 7716 	add.w	r7, r7, #600	; 0x258
 801b880:	46bd      	mov	sp, r7
 801b882:	bc90      	pop	{r4, r7}
 801b884:	4770      	bx	lr
 801b886:	bf00      	nop
 801b888:	ffffba5c 	.word	0xffffba5c
 801b88c:	ffffe566 	.word	0xffffe566
 801b890:	ffffd4f6 	.word	0xffffd4f6
 801b894:	ffffdc67 	.word	0xffffdc67
 801b898:	ffffe42f 	.word	0xffffe42f

0801b89c <jpeg_idct_16x16>:

GLOBAL(void)
jpeg_idct_16x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801b89c:	b490      	push	{r4, r7}
 801b89e:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
 801b8a2:	af00      	add	r7, sp, #0
 801b8a4:	f107 040c 	add.w	r4, r7, #12
 801b8a8:	6020      	str	r0, [r4, #0]
 801b8aa:	f107 0008 	add.w	r0, r7, #8
 801b8ae:	6001      	str	r1, [r0, #0]
 801b8b0:	1d39      	adds	r1, r7, #4
 801b8b2:	600a      	str	r2, [r1, #0]
 801b8b4:	463a      	mov	r2, r7
 801b8b6:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801b8b8:	f107 030c 	add.w	r3, r7, #12
 801b8bc:	681b      	ldr	r3, [r3, #0]
 801b8be:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801b8c2:	3380      	adds	r3, #128	; 0x80
 801b8c4:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
  int workspace[8*16];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 801b8c8:	1d3b      	adds	r3, r7, #4
 801b8ca:	681b      	ldr	r3, [r3, #0]
 801b8cc:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801b8d0:	f107 0308 	add.w	r3, r7, #8
 801b8d4:	681b      	ldr	r3, [r3, #0]
 801b8d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b8d8:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
  wsptr = workspace;
 801b8dc:	f107 0310 	add.w	r3, r7, #16
 801b8e0:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801b8e4:	2300      	movs	r3, #0
 801b8e6:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 801b8ea:	e30b      	b.n	801bf04 <jpeg_idct_16x16+0x668>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801b8ec:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801b8f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b8f4:	461a      	mov	r2, r3
 801b8f6:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 801b8fa:	681b      	ldr	r3, [r3, #0]
 801b8fc:	fb03 f302 	mul.w	r3, r3, r2
 801b900:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    tmp0 <<= CONST_BITS;
 801b904:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801b908:	035b      	lsls	r3, r3, #13
 801b90a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    /* Add fudge factor here for final descale. */
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);
 801b90e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801b912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801b916:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801b91a:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801b91e:	3340      	adds	r3, #64	; 0x40
 801b920:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b924:	461a      	mov	r2, r3
 801b926:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 801b92a:	3380      	adds	r3, #128	; 0x80
 801b92c:	681b      	ldr	r3, [r3, #0]
 801b92e:	fb03 f302 	mul.w	r3, r3, r2
 801b932:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801b936:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801b93a:	f642 12cf 	movw	r2, #10703	; 0x29cf
 801b93e:	fb02 f303 	mul.w	r3, r2, r3
 801b942:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801b946:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801b94a:	f241 1251 	movw	r2, #4433	; 0x1151
 801b94e:	fb02 f303 	mul.w	r3, r2, r3
 801b952:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250

    tmp10 = tmp0 + tmp1;
 801b956:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801b95a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801b95e:	4413      	add	r3, r2
 801b960:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    tmp11 = tmp0 - tmp1;
 801b964:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801b968:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801b96c:	1ad3      	subs	r3, r2, r3
 801b96e:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    tmp12 = tmp0 + tmp2;
 801b972:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801b976:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801b97a:	4413      	add	r3, r2
 801b97c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    tmp13 = tmp0 - tmp2;
 801b980:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801b984:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801b988:	1ad3      	subs	r3, r2, r3
 801b98a:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801b98e:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801b992:	3320      	adds	r3, #32
 801b994:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b998:	461a      	mov	r2, r3
 801b99a:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 801b99e:	3340      	adds	r3, #64	; 0x40
 801b9a0:	681b      	ldr	r3, [r3, #0]
 801b9a2:	fb03 f302 	mul.w	r3, r3, r2
 801b9a6:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801b9aa:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801b9ae:	3360      	adds	r3, #96	; 0x60
 801b9b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b9b4:	461a      	mov	r2, r3
 801b9b6:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 801b9ba:	33c0      	adds	r3, #192	; 0xc0
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	fb03 f302 	mul.w	r3, r3, r2
 801b9c2:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    z3 = z1 - z2;
 801b9c6:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 801b9ca:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801b9ce:	1ad3      	subs	r3, r2, r3
 801b9d0:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 801b9d4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801b9d8:	f640 02d4 	movw	r2, #2260	; 0x8d4
 801b9dc:	fb02 f303 	mul.w	r3, r2, r3
 801b9e0:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 801b9e4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801b9e8:	f642 4263 	movw	r2, #11363	; 0x2c63
 801b9ec:	fb02 f303 	mul.w	r3, r2, r3
 801b9f0:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801b9f4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801b9f8:	f245 2203 	movw	r2, #20995	; 0x5203
 801b9fc:	fb02 f303 	mul.w	r3, r2, r3
 801ba00:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801ba04:	4413      	add	r3, r2
 801ba06:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 801ba0a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801ba0e:	f641 42cd 	movw	r2, #7373	; 0x1ccd
 801ba12:	fb02 f303 	mul.w	r3, r2, r3
 801ba16:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 801ba1a:	4413      	add	r3, r2
 801ba1c:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801ba20:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801ba24:	4af4      	ldr	r2, [pc, #976]	; (801bdf8 <jpeg_idct_16x16+0x55c>)
 801ba26:	fb02 f303 	mul.w	r3, r2, r3
 801ba2a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801ba2e:	4413      	add	r3, r2
 801ba30:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801ba34:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801ba38:	4af0      	ldr	r2, [pc, #960]	; (801bdfc <jpeg_idct_16x16+0x560>)
 801ba3a:	fb02 f303 	mul.w	r3, r2, r3
 801ba3e:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 801ba42:	4413      	add	r3, r2
 801ba44:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230

    tmp20 = tmp10 + tmp0;
 801ba48:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 801ba4c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801ba50:	4413      	add	r3, r2
 801ba52:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    tmp27 = tmp10 - tmp0;
 801ba56:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 801ba5a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801ba5e:	1ad3      	subs	r3, r2, r3
 801ba60:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    tmp21 = tmp12 + tmp1;
 801ba64:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801ba68:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801ba6c:	4413      	add	r3, r2
 801ba6e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
    tmp26 = tmp12 - tmp1;
 801ba72:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801ba76:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801ba7a:	1ad3      	subs	r3, r2, r3
 801ba7c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
    tmp22 = tmp13 + tmp2;
 801ba80:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801ba84:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801ba88:	4413      	add	r3, r2
 801ba8a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    tmp25 = tmp13 - tmp2;
 801ba8e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801ba92:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801ba96:	1ad3      	subs	r3, r2, r3
 801ba98:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    tmp23 = tmp11 + tmp3;
 801ba9c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801baa0:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801baa4:	4413      	add	r3, r2
 801baa6:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    tmp24 = tmp11 - tmp3;
 801baaa:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801baae:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801bab2:	1ad3      	subs	r3, r2, r3
 801bab4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801bab8:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801babc:	3310      	adds	r3, #16
 801babe:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bac2:	461a      	mov	r2, r3
 801bac4:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 801bac8:	3320      	adds	r3, #32
 801baca:	681b      	ldr	r3, [r3, #0]
 801bacc:	fb03 f302 	mul.w	r3, r3, r2
 801bad0:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801bad4:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801bad8:	3330      	adds	r3, #48	; 0x30
 801bada:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bade:	461a      	mov	r2, r3
 801bae0:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 801bae4:	3360      	adds	r3, #96	; 0x60
 801bae6:	681b      	ldr	r3, [r3, #0]
 801bae8:	fb03 f302 	mul.w	r3, r3, r2
 801baec:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801baf0:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801baf4:	3350      	adds	r3, #80	; 0x50
 801baf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bafa:	461a      	mov	r2, r3
 801bafc:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 801bb00:	33a0      	adds	r3, #160	; 0xa0
 801bb02:	681b      	ldr	r3, [r3, #0]
 801bb04:	fb03 f302 	mul.w	r3, r3, r2
 801bb08:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801bb0c:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801bb10:	3370      	adds	r3, #112	; 0x70
 801bb12:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bb16:	461a      	mov	r2, r3
 801bb18:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 801bb1c:	33e0      	adds	r3, #224	; 0xe0
 801bb1e:	681b      	ldr	r3, [r3, #0]
 801bb20:	fb03 f302 	mul.w	r3, r3, r2
 801bb24:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234

    tmp11 = z1 + z3;
 801bb28:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 801bb2c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801bb30:	4413      	add	r3, r2
 801bb32:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801bb36:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 801bb3a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801bb3e:	4413      	add	r3, r2
 801bb40:	f642 324e 	movw	r2, #11086	; 0x2b4e
 801bb44:	fb02 f303 	mul.w	r3, r2, r3
 801bb48:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801bb4c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801bb50:	f242 72e9 	movw	r2, #10217	; 0x27e9
 801bb54:	fb02 f303 	mul.w	r3, r2, r3
 801bb58:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 801bb5c:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 801bb60:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801bb64:	4413      	add	r3, r2
 801bb66:	f242 22fc 	movw	r2, #8956	; 0x22fc
 801bb6a:	fb02 f303 	mul.w	r3, r2, r3
 801bb6e:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801bb72:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 801bb76:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801bb7a:	1ad3      	subs	r3, r2, r3
 801bb7c:	f641 42b6 	movw	r2, #7350	; 0x1cb6
 801bb80:	fb02 f303 	mul.w	r3, r2, r3
 801bb84:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 801bb88:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801bb8c:	f241 5255 	movw	r2, #5461	; 0x1555
 801bb90:	fb02 f303 	mul.w	r3, r2, r3
 801bb94:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801bb98:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 801bb9c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801bba0:	1ad3      	subs	r3, r2, r3
 801bba2:	f640 5223 	movw	r2, #3363	; 0xd23
 801bba6:	fb02 f303 	mul.w	r3, r2, r3
 801bbaa:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    tmp0  = tmp1 + tmp2 + tmp3 -
 801bbae:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 801bbb2:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801bbb6:	441a      	add	r2, r3
 801bbb8:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801bbbc:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
 801bbbe:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801bbc2:	498f      	ldr	r1, [pc, #572]	; (801be00 <jpeg_idct_16x16+0x564>)
 801bbc4:	fb01 f303 	mul.w	r3, r1, r3
    tmp0  = tmp1 + tmp2 + tmp3 -
 801bbc8:	4413      	add	r3, r2
 801bbca:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    tmp13 = tmp10 + tmp11 + tmp12 -
 801bbce:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 801bbd2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801bbd6:	441a      	add	r2, r3
 801bbd8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801bbdc:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
 801bbde:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801bbe2:	4988      	ldr	r1, [pc, #544]	; (801be04 <jpeg_idct_16x16+0x568>)
 801bbe4:	fb01 f303 	mul.w	r3, r1, r3
    tmp13 = tmp10 + tmp11 + tmp12 -
 801bbe8:	4413      	add	r3, r2
 801bbea:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801bbee:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801bbf2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801bbf6:	4413      	add	r3, r2
 801bbf8:	f44f 628e 	mov.w	r2, #1136	; 0x470
 801bbfc:	fb02 f303 	mul.w	r3, r2, r3
 801bc00:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 801bc04:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801bc08:	f240 224d 	movw	r2, #589	; 0x24d
 801bc0c:	fb02 f203 	mul.w	r2, r2, r3
 801bc10:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801bc14:	4413      	add	r3, r2
 801bc16:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 801bc1a:	4413      	add	r3, r2
 801bc1c:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801bc20:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801bc24:	4a78      	ldr	r2, [pc, #480]	; (801be08 <jpeg_idct_16x16+0x56c>)
 801bc26:	fb02 f203 	mul.w	r2, r2, r3
 801bc2a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801bc2e:	4413      	add	r3, r2
 801bc30:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 801bc34:	4413      	add	r3, r2
 801bc36:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801bc3a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801bc3e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801bc42:	1ad3      	subs	r3, r2, r3
 801bc44:	f642 5209 	movw	r2, #11529	; 0x2d09
 801bc48:	fb02 f303 	mul.w	r3, r2, r3
 801bc4c:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 801bc50:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801bc54:	4a6d      	ldr	r2, [pc, #436]	; (801be0c <jpeg_idct_16x16+0x570>)
 801bc56:	fb02 f203 	mul.w	r2, r2, r3
 801bc5a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801bc5e:	4413      	add	r3, r2
 801bc60:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801bc64:	4413      	add	r3, r2
 801bc66:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801bc6a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801bc6e:	f643 721a 	movw	r2, #16154	; 0x3f1a
 801bc72:	fb02 f203 	mul.w	r2, r2, r3
 801bc76:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801bc7a:	4413      	add	r3, r2
 801bc7c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801bc80:	4413      	add	r3, r2
 801bc82:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    z2    += z4;
 801bc86:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801bc8a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801bc8e:	4413      	add	r3, r2
 801bc90:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 801bc94:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801bc98:	4a5d      	ldr	r2, [pc, #372]	; (801be10 <jpeg_idct_16x16+0x574>)
 801bc9a:	fb02 f303 	mul.w	r3, r2, r3
 801bc9e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    tmp1  += z1;
 801bca2:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 801bca6:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801bcaa:	4413      	add	r3, r2
 801bcac:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801bcb0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801bcb4:	f242 2218 	movw	r2, #8728	; 0x2218
 801bcb8:	fb02 f203 	mul.w	r2, r2, r3
 801bcbc:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801bcc0:	4413      	add	r3, r2
 801bcc2:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 801bcc6:	4413      	add	r3, r2
 801bcc8:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 801bccc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801bcd0:	4a50      	ldr	r2, [pc, #320]	; (801be14 <jpeg_idct_16x16+0x578>)
 801bcd2:	fb02 f303 	mul.w	r3, r2, r3
 801bcd6:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801bcda:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801bcde:	f246 4285 	movw	r2, #25733	; 0x6485
 801bce2:	fb02 f203 	mul.w	r2, r2, r3
 801bce6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801bcea:	4413      	add	r3, r2
 801bcec:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 801bcf0:	4413      	add	r3, r2
 801bcf2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    tmp12 += z2;
 801bcf6:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801bcfa:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801bcfe:	4413      	add	r3, r2
 801bd00:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 801bd04:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801bd08:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801bd0c:	4413      	add	r3, r2
 801bd0e:	4a42      	ldr	r2, [pc, #264]	; (801be18 <jpeg_idct_16x16+0x57c>)
 801bd10:	fb02 f303 	mul.w	r3, r2, r3
 801bd14:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    tmp2  += z2;
 801bd18:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 801bd1c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801bd20:	4413      	add	r3, r2
 801bd22:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    tmp3  += z2;
 801bd26:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 801bd2a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801bd2e:	4413      	add	r3, r2
 801bd30:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 801bd34:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 801bd38:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801bd3c:	1ad3      	subs	r3, r2, r3
 801bd3e:	f640 5223 	movw	r2, #3363	; 0xd23
 801bd42:	fb02 f303 	mul.w	r3, r2, r3
 801bd46:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    tmp10 += z2;
 801bd4a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 801bd4e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801bd52:	4413      	add	r3, r2
 801bd54:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    tmp11 += z2;
 801bd58:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801bd5c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801bd60:	4413      	add	r3, r2
 801bd62:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 801bd66:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 801bd6a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801bd6e:	4413      	add	r3, r2
 801bd70:	12da      	asrs	r2, r3, #11
 801bd72:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801bd76:	601a      	str	r2, [r3, #0]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 801bd78:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 801bd7c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801bd80:	1ad2      	subs	r2, r2, r3
 801bd82:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801bd86:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801bd8a:	12d2      	asrs	r2, r2, #11
 801bd8c:	601a      	str	r2, [r3, #0]
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 801bd8e:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 801bd92:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801bd96:	441a      	add	r2, r3
 801bd98:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801bd9c:	3320      	adds	r3, #32
 801bd9e:	12d2      	asrs	r2, r2, #11
 801bda0:	601a      	str	r2, [r3, #0]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 801bda2:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 801bda6:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801bdaa:	1ad2      	subs	r2, r2, r3
 801bdac:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801bdb0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 801bdb4:	12d2      	asrs	r2, r2, #11
 801bdb6:	601a      	str	r2, [r3, #0]
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 801bdb8:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801bdbc:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801bdc0:	441a      	add	r2, r3
 801bdc2:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801bdc6:	3340      	adds	r3, #64	; 0x40
 801bdc8:	12d2      	asrs	r2, r2, #11
 801bdca:	601a      	str	r2, [r3, #0]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 801bdcc:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801bdd0:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801bdd4:	1ad2      	subs	r2, r2, r3
 801bdd6:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801bdda:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 801bdde:	12d2      	asrs	r2, r2, #11
 801bde0:	601a      	str	r2, [r3, #0]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 801bde2:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801bde6:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801bdea:	441a      	add	r2, r3
 801bdec:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801bdf0:	3360      	adds	r3, #96	; 0x60
 801bdf2:	12d2      	asrs	r2, r2, #11
 801bdf4:	e012      	b.n	801be1c <jpeg_idct_16x16+0x580>
 801bdf6:	bf00      	nop
 801bdf8:	ffffecc2 	.word	0xffffecc2
 801bdfc:	ffffefb0 	.word	0xffffefb0
 801be00:	ffffb6d6 	.word	0xffffb6d6
 801be04:	ffffc542 	.word	0xffffc542
 801be08:	ffffdbfa 	.word	0xffffdbfa
 801be0c:	ffffe77a 	.word	0xffffe77a
 801be10:	ffffeaab 	.word	0xffffeaab
 801be14:	ffffd817 	.word	0xffffd817
 801be18:	ffffd4b2 	.word	0xffffd4b2
 801be1c:	601a      	str	r2, [r3, #0]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 801be1e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801be22:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801be26:	1ad2      	subs	r2, r2, r3
 801be28:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801be2c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 801be30:	12d2      	asrs	r2, r2, #11
 801be32:	601a      	str	r2, [r3, #0]
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 801be34:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 801be38:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801be3c:	441a      	add	r2, r3
 801be3e:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801be42:	3380      	adds	r3, #128	; 0x80
 801be44:	12d2      	asrs	r2, r2, #11
 801be46:	601a      	str	r2, [r3, #0]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 801be48:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 801be4c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801be50:	1ad2      	subs	r2, r2, r3
 801be52:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801be56:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801be5a:	12d2      	asrs	r2, r2, #11
 801be5c:	601a      	str	r2, [r3, #0]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 801be5e:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 801be62:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801be66:	441a      	add	r2, r3
 801be68:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801be6c:	33a0      	adds	r3, #160	; 0xa0
 801be6e:	12d2      	asrs	r2, r2, #11
 801be70:	601a      	str	r2, [r3, #0]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 801be72:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 801be76:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801be7a:	1ad2      	subs	r2, r2, r3
 801be7c:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801be80:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801be84:	12d2      	asrs	r2, r2, #11
 801be86:	601a      	str	r2, [r3, #0]
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 801be88:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 801be8c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801be90:	441a      	add	r2, r3
 801be92:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801be96:	33c0      	adds	r3, #192	; 0xc0
 801be98:	12d2      	asrs	r2, r2, #11
 801be9a:	601a      	str	r2, [r3, #0]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 801be9c:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 801bea0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801bea4:	1ad2      	subs	r2, r2, r3
 801bea6:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801beaa:	f503 7390 	add.w	r3, r3, #288	; 0x120
 801beae:	12d2      	asrs	r2, r2, #11
 801beb0:	601a      	str	r2, [r3, #0]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 801beb2:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 801beb6:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801beba:	441a      	add	r2, r3
 801bebc:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801bec0:	33e0      	adds	r3, #224	; 0xe0
 801bec2:	12d2      	asrs	r2, r2, #11
 801bec4:	601a      	str	r2, [r3, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 801bec6:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 801beca:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801bece:	1ad2      	subs	r2, r2, r3
 801bed0:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801bed4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801bed8:	12d2      	asrs	r2, r2, #11
 801beda:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801bedc:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 801bee0:	3301      	adds	r3, #1
 801bee2:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 801bee6:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801beea:	3302      	adds	r3, #2
 801beec:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 801bef0:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 801bef4:	3304      	adds	r3, #4
 801bef6:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 801befa:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801befe:	3304      	adds	r3, #4
 801bf00:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 801bf04:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 801bf08:	2b07      	cmp	r3, #7
 801bf0a:	f77f acef 	ble.w	801b8ec <jpeg_idct_16x16+0x50>
  }

  /* Pass 2: process 16 rows from work array, store into output array. */

  wsptr = workspace;
 801bf0e:	f107 0310 	add.w	r3, r7, #16
 801bf12:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
  for (ctr = 0; ctr < 16; ctr++) {
 801bf16:	2300      	movs	r3, #0
 801bf18:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 801bf1c:	e320      	b.n	801c560 <jpeg_idct_16x16+0xcc4>
    outptr = output_buf[ctr] + output_col;
 801bf1e:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 801bf22:	009b      	lsls	r3, r3, #2
 801bf24:	463a      	mov	r2, r7
 801bf26:	6812      	ldr	r2, [r2, #0]
 801bf28:	4413      	add	r3, r2
 801bf2a:	681a      	ldr	r2, [r3, #0]
 801bf2c:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 801bf30:	4413      	add	r3, r2
 801bf32:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801bf36:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801bf3a:	681b      	ldr	r3, [r3, #0]
 801bf3c:	3310      	adds	r3, #16
 801bf3e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    tmp0 <<= CONST_BITS;
 801bf42:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801bf46:	035b      	lsls	r3, r3, #13
 801bf48:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

    z1 = (INT32) wsptr[4];
 801bf4c:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801bf50:	3310      	adds	r3, #16
 801bf52:	681b      	ldr	r3, [r3, #0]
 801bf54:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801bf58:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801bf5c:	f642 12cf 	movw	r2, #10703	; 0x29cf
 801bf60:	fb02 f303 	mul.w	r3, r2, r3
 801bf64:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801bf68:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801bf6c:	f241 1251 	movw	r2, #4433	; 0x1151
 801bf70:	fb02 f303 	mul.w	r3, r2, r3
 801bf74:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250

    tmp10 = tmp0 + tmp1;
 801bf78:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801bf7c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801bf80:	4413      	add	r3, r2
 801bf82:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    tmp11 = tmp0 - tmp1;
 801bf86:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801bf8a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801bf8e:	1ad3      	subs	r3, r2, r3
 801bf90:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    tmp12 = tmp0 + tmp2;
 801bf94:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801bf98:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801bf9c:	4413      	add	r3, r2
 801bf9e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    tmp13 = tmp0 - tmp2;
 801bfa2:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801bfa6:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801bfaa:	1ad3      	subs	r3, r2, r3
 801bfac:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240

    z1 = (INT32) wsptr[2];
 801bfb0:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801bfb4:	3308      	adds	r3, #8
 801bfb6:	681b      	ldr	r3, [r3, #0]
 801bfb8:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    z2 = (INT32) wsptr[6];
 801bfbc:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801bfc0:	3318      	adds	r3, #24
 801bfc2:	681b      	ldr	r3, [r3, #0]
 801bfc4:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    z3 = z1 - z2;
 801bfc8:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 801bfcc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801bfd0:	1ad3      	subs	r3, r2, r3
 801bfd2:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 801bfd6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801bfda:	f640 02d4 	movw	r2, #2260	; 0x8d4
 801bfde:	fb02 f303 	mul.w	r3, r2, r3
 801bfe2:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 801bfe6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801bfea:	f642 4263 	movw	r2, #11363	; 0x2c63
 801bfee:	fb02 f303 	mul.w	r3, r2, r3
 801bff2:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801bff6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801bffa:	f245 2203 	movw	r2, #20995	; 0x5203
 801bffe:	fb02 f303 	mul.w	r3, r2, r3
 801c002:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801c006:	4413      	add	r3, r2
 801c008:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 801c00c:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801c010:	f641 42cd 	movw	r2, #7373	; 0x1ccd
 801c014:	fb02 f303 	mul.w	r3, r2, r3
 801c018:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 801c01c:	4413      	add	r3, r2
 801c01e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801c022:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801c026:	4af4      	ldr	r2, [pc, #976]	; (801c3f8 <jpeg_idct_16x16+0xb5c>)
 801c028:	fb02 f303 	mul.w	r3, r2, r3
 801c02c:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801c030:	4413      	add	r3, r2
 801c032:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801c036:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801c03a:	4af0      	ldr	r2, [pc, #960]	; (801c3fc <jpeg_idct_16x16+0xb60>)
 801c03c:	fb02 f303 	mul.w	r3, r2, r3
 801c040:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 801c044:	4413      	add	r3, r2
 801c046:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230

    tmp20 = tmp10 + tmp0;
 801c04a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 801c04e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801c052:	4413      	add	r3, r2
 801c054:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    tmp27 = tmp10 - tmp0;
 801c058:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 801c05c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801c060:	1ad3      	subs	r3, r2, r3
 801c062:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    tmp21 = tmp12 + tmp1;
 801c066:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801c06a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801c06e:	4413      	add	r3, r2
 801c070:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
    tmp26 = tmp12 - tmp1;
 801c074:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801c078:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801c07c:	1ad3      	subs	r3, r2, r3
 801c07e:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
    tmp22 = tmp13 + tmp2;
 801c082:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801c086:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801c08a:	4413      	add	r3, r2
 801c08c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    tmp25 = tmp13 - tmp2;
 801c090:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801c094:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801c098:	1ad3      	subs	r3, r2, r3
 801c09a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    tmp23 = tmp11 + tmp3;
 801c09e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801c0a2:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801c0a6:	4413      	add	r3, r2
 801c0a8:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    tmp24 = tmp11 - tmp3;
 801c0ac:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801c0b0:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801c0b4:	1ad3      	subs	r3, r2, r3
 801c0b6:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    /* Odd part */

    z1 = (INT32) wsptr[1];
 801c0ba:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801c0be:	3304      	adds	r3, #4
 801c0c0:	681b      	ldr	r3, [r3, #0]
 801c0c2:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    z2 = (INT32) wsptr[3];
 801c0c6:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801c0ca:	330c      	adds	r3, #12
 801c0cc:	681b      	ldr	r3, [r3, #0]
 801c0ce:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    z3 = (INT32) wsptr[5];
 801c0d2:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801c0d6:	3314      	adds	r3, #20
 801c0d8:	681b      	ldr	r3, [r3, #0]
 801c0da:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    z4 = (INT32) wsptr[7];
 801c0de:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801c0e2:	331c      	adds	r3, #28
 801c0e4:	681b      	ldr	r3, [r3, #0]
 801c0e6:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234

    tmp11 = z1 + z3;
 801c0ea:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 801c0ee:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801c0f2:	4413      	add	r3, r2
 801c0f4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801c0f8:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 801c0fc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801c100:	4413      	add	r3, r2
 801c102:	f642 324e 	movw	r2, #11086	; 0x2b4e
 801c106:	fb02 f303 	mul.w	r3, r2, r3
 801c10a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801c10e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801c112:	f242 72e9 	movw	r2, #10217	; 0x27e9
 801c116:	fb02 f303 	mul.w	r3, r2, r3
 801c11a:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 801c11e:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 801c122:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801c126:	4413      	add	r3, r2
 801c128:	f242 22fc 	movw	r2, #8956	; 0x22fc
 801c12c:	fb02 f303 	mul.w	r3, r2, r3
 801c130:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801c134:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 801c138:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801c13c:	1ad3      	subs	r3, r2, r3
 801c13e:	f641 42b6 	movw	r2, #7350	; 0x1cb6
 801c142:	fb02 f303 	mul.w	r3, r2, r3
 801c146:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 801c14a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801c14e:	f241 5255 	movw	r2, #5461	; 0x1555
 801c152:	fb02 f303 	mul.w	r3, r2, r3
 801c156:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801c15a:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 801c15e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801c162:	1ad3      	subs	r3, r2, r3
 801c164:	f640 5223 	movw	r2, #3363	; 0xd23
 801c168:	fb02 f303 	mul.w	r3, r2, r3
 801c16c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    tmp0  = tmp1 + tmp2 + tmp3 -
 801c170:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 801c174:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801c178:	441a      	add	r2, r3
 801c17a:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801c17e:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
 801c180:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801c184:	499e      	ldr	r1, [pc, #632]	; (801c400 <jpeg_idct_16x16+0xb64>)
 801c186:	fb01 f303 	mul.w	r3, r1, r3
    tmp0  = tmp1 + tmp2 + tmp3 -
 801c18a:	4413      	add	r3, r2
 801c18c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    tmp13 = tmp10 + tmp11 + tmp12 -
 801c190:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 801c194:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801c198:	441a      	add	r2, r3
 801c19a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801c19e:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
 801c1a0:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801c1a4:	4997      	ldr	r1, [pc, #604]	; (801c404 <jpeg_idct_16x16+0xb68>)
 801c1a6:	fb01 f303 	mul.w	r3, r1, r3
    tmp13 = tmp10 + tmp11 + tmp12 -
 801c1aa:	4413      	add	r3, r2
 801c1ac:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801c1b0:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801c1b4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801c1b8:	4413      	add	r3, r2
 801c1ba:	f44f 628e 	mov.w	r2, #1136	; 0x470
 801c1be:	fb02 f303 	mul.w	r3, r2, r3
 801c1c2:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 801c1c6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801c1ca:	f240 224d 	movw	r2, #589	; 0x24d
 801c1ce:	fb02 f203 	mul.w	r2, r2, r3
 801c1d2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801c1d6:	4413      	add	r3, r2
 801c1d8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 801c1dc:	4413      	add	r3, r2
 801c1de:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801c1e2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801c1e6:	4a88      	ldr	r2, [pc, #544]	; (801c408 <jpeg_idct_16x16+0xb6c>)
 801c1e8:	fb02 f203 	mul.w	r2, r2, r3
 801c1ec:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801c1f0:	4413      	add	r3, r2
 801c1f2:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 801c1f6:	4413      	add	r3, r2
 801c1f8:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801c1fc:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801c200:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801c204:	1ad3      	subs	r3, r2, r3
 801c206:	f642 5209 	movw	r2, #11529	; 0x2d09
 801c20a:	fb02 f303 	mul.w	r3, r2, r3
 801c20e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 801c212:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801c216:	4a7d      	ldr	r2, [pc, #500]	; (801c40c <jpeg_idct_16x16+0xb70>)
 801c218:	fb02 f203 	mul.w	r2, r2, r3
 801c21c:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801c220:	4413      	add	r3, r2
 801c222:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801c226:	4413      	add	r3, r2
 801c228:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801c22c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801c230:	f643 721a 	movw	r2, #16154	; 0x3f1a
 801c234:	fb02 f203 	mul.w	r2, r2, r3
 801c238:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801c23c:	4413      	add	r3, r2
 801c23e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801c242:	4413      	add	r3, r2
 801c244:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    z2    += z4;
 801c248:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801c24c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801c250:	4413      	add	r3, r2
 801c252:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 801c256:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801c25a:	4a6d      	ldr	r2, [pc, #436]	; (801c410 <jpeg_idct_16x16+0xb74>)
 801c25c:	fb02 f303 	mul.w	r3, r2, r3
 801c260:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    tmp1  += z1;
 801c264:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 801c268:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801c26c:	4413      	add	r3, r2
 801c26e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801c272:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801c276:	f242 2218 	movw	r2, #8728	; 0x2218
 801c27a:	fb02 f203 	mul.w	r2, r2, r3
 801c27e:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801c282:	4413      	add	r3, r2
 801c284:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 801c288:	4413      	add	r3, r2
 801c28a:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 801c28e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801c292:	4a60      	ldr	r2, [pc, #384]	; (801c414 <jpeg_idct_16x16+0xb78>)
 801c294:	fb02 f303 	mul.w	r3, r2, r3
 801c298:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801c29c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801c2a0:	f246 4285 	movw	r2, #25733	; 0x6485
 801c2a4:	fb02 f203 	mul.w	r2, r2, r3
 801c2a8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801c2ac:	4413      	add	r3, r2
 801c2ae:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 801c2b2:	4413      	add	r3, r2
 801c2b4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    tmp12 += z2;
 801c2b8:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801c2bc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801c2c0:	4413      	add	r3, r2
 801c2c2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 801c2c6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801c2ca:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801c2ce:	4413      	add	r3, r2
 801c2d0:	4a51      	ldr	r2, [pc, #324]	; (801c418 <jpeg_idct_16x16+0xb7c>)
 801c2d2:	fb02 f303 	mul.w	r3, r2, r3
 801c2d6:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    tmp2  += z2;
 801c2da:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 801c2de:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801c2e2:	4413      	add	r3, r2
 801c2e4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    tmp3  += z2;
 801c2e8:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 801c2ec:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801c2f0:	4413      	add	r3, r2
 801c2f2:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 801c2f6:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 801c2fa:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801c2fe:	1ad3      	subs	r3, r2, r3
 801c300:	f640 5223 	movw	r2, #3363	; 0xd23
 801c304:	fb02 f303 	mul.w	r3, r2, r3
 801c308:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    tmp10 += z2;
 801c30c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 801c310:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801c314:	4413      	add	r3, r2
 801c316:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    tmp11 += z2;
 801c31a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801c31e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801c322:	4413      	add	r3, r2
 801c324:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 801c328:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 801c32c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801c330:	4413      	add	r3, r2
 801c332:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801c334:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 801c338:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801c33c:	4413      	add	r3, r2
 801c33e:	781a      	ldrb	r2, [r3, #0]
 801c340:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801c344:	701a      	strb	r2, [r3, #0]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 801c346:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 801c34a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801c34e:	1ad3      	subs	r3, r2, r3
 801c350:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801c352:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 801c356:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801c35a:	441a      	add	r2, r3
 801c35c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801c360:	330f      	adds	r3, #15
 801c362:	7812      	ldrb	r2, [r2, #0]
 801c364:	701a      	strb	r2, [r3, #0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 801c366:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 801c36a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801c36e:	4413      	add	r3, r2
 801c370:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801c372:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 801c376:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801c37a:	441a      	add	r2, r3
 801c37c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801c380:	3301      	adds	r3, #1
 801c382:	7812      	ldrb	r2, [r2, #0]
 801c384:	701a      	strb	r2, [r3, #0]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 801c386:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 801c38a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801c38e:	1ad3      	subs	r3, r2, r3
 801c390:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801c392:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 801c396:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801c39a:	441a      	add	r2, r3
 801c39c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801c3a0:	330e      	adds	r3, #14
 801c3a2:	7812      	ldrb	r2, [r2, #0]
 801c3a4:	701a      	strb	r2, [r3, #0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 801c3a6:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801c3aa:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801c3ae:	4413      	add	r3, r2
 801c3b0:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801c3b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 801c3b6:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801c3ba:	441a      	add	r2, r3
 801c3bc:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801c3c0:	3302      	adds	r3, #2
 801c3c2:	7812      	ldrb	r2, [r2, #0]
 801c3c4:	701a      	strb	r2, [r3, #0]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 801c3c6:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801c3ca:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801c3ce:	1ad3      	subs	r3, r2, r3
 801c3d0:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801c3d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 801c3d6:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801c3da:	441a      	add	r2, r3
 801c3dc:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801c3e0:	330d      	adds	r3, #13
 801c3e2:	7812      	ldrb	r2, [r2, #0]
 801c3e4:	701a      	strb	r2, [r3, #0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 801c3e6:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801c3ea:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801c3ee:	4413      	add	r3, r2
 801c3f0:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801c3f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c3f6:	e011      	b.n	801c41c <jpeg_idct_16x16+0xb80>
 801c3f8:	ffffecc2 	.word	0xffffecc2
 801c3fc:	ffffefb0 	.word	0xffffefb0
 801c400:	ffffb6d6 	.word	0xffffb6d6
 801c404:	ffffc542 	.word	0xffffc542
 801c408:	ffffdbfa 	.word	0xffffdbfa
 801c40c:	ffffe77a 	.word	0xffffe77a
 801c410:	ffffeaab 	.word	0xffffeaab
 801c414:	ffffd817 	.word	0xffffd817
 801c418:	ffffd4b2 	.word	0xffffd4b2
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 801c41c:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801c420:	441a      	add	r2, r3
 801c422:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801c426:	3303      	adds	r3, #3
 801c428:	7812      	ldrb	r2, [r2, #0]
 801c42a:	701a      	strb	r2, [r3, #0]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 801c42c:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801c430:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801c434:	1ad3      	subs	r3, r2, r3
 801c436:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801c438:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 801c43c:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801c440:	441a      	add	r2, r3
 801c442:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801c446:	330c      	adds	r3, #12
 801c448:	7812      	ldrb	r2, [r2, #0]
 801c44a:	701a      	strb	r2, [r3, #0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 801c44c:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 801c450:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801c454:	4413      	add	r3, r2
 801c456:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801c458:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 801c45c:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801c460:	441a      	add	r2, r3
 801c462:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801c466:	3304      	adds	r3, #4
 801c468:	7812      	ldrb	r2, [r2, #0]
 801c46a:	701a      	strb	r2, [r3, #0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 801c46c:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 801c470:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801c474:	1ad3      	subs	r3, r2, r3
 801c476:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801c478:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 801c47c:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801c480:	441a      	add	r2, r3
 801c482:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801c486:	330b      	adds	r3, #11
 801c488:	7812      	ldrb	r2, [r2, #0]
 801c48a:	701a      	strb	r2, [r3, #0]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 801c48c:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 801c490:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801c494:	4413      	add	r3, r2
 801c496:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801c498:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 801c49c:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801c4a0:	441a      	add	r2, r3
 801c4a2:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801c4a6:	3305      	adds	r3, #5
 801c4a8:	7812      	ldrb	r2, [r2, #0]
 801c4aa:	701a      	strb	r2, [r3, #0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 801c4ac:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 801c4b0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801c4b4:	1ad3      	subs	r3, r2, r3
 801c4b6:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801c4b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 801c4bc:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801c4c0:	441a      	add	r2, r3
 801c4c2:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801c4c6:	330a      	adds	r3, #10
 801c4c8:	7812      	ldrb	r2, [r2, #0]
 801c4ca:	701a      	strb	r2, [r3, #0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 801c4cc:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 801c4d0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801c4d4:	4413      	add	r3, r2
 801c4d6:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801c4d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 801c4dc:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801c4e0:	441a      	add	r2, r3
 801c4e2:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801c4e6:	3306      	adds	r3, #6
 801c4e8:	7812      	ldrb	r2, [r2, #0]
 801c4ea:	701a      	strb	r2, [r3, #0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 801c4ec:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 801c4f0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801c4f4:	1ad3      	subs	r3, r2, r3
 801c4f6:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801c4f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 801c4fc:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801c500:	441a      	add	r2, r3
 801c502:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801c506:	3309      	adds	r3, #9
 801c508:	7812      	ldrb	r2, [r2, #0]
 801c50a:	701a      	strb	r2, [r3, #0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 801c50c:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 801c510:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801c514:	4413      	add	r3, r2
 801c516:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801c518:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 801c51c:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801c520:	441a      	add	r2, r3
 801c522:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801c526:	3307      	adds	r3, #7
 801c528:	7812      	ldrb	r2, [r2, #0]
 801c52a:	701a      	strb	r2, [r3, #0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 801c52c:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 801c530:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801c534:	1ad3      	subs	r3, r2, r3
 801c536:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801c538:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 801c53c:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801c540:	441a      	add	r2, r3
 801c542:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801c546:	3308      	adds	r3, #8
 801c548:	7812      	ldrb	r2, [r2, #0]
 801c54a:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 801c54c:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801c550:	3320      	adds	r3, #32
 801c552:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
  for (ctr = 0; ctr < 16; ctr++) {
 801c556:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 801c55a:	3301      	adds	r3, #1
 801c55c:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 801c560:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 801c564:	2b0f      	cmp	r3, #15
 801c566:	f77f acda 	ble.w	801bf1e <jpeg_idct_16x16+0x682>
  }
}
 801c56a:	bf00      	nop
 801c56c:	bf00      	nop
 801c56e:	f507 771e 	add.w	r7, r7, #632	; 0x278
 801c572:	46bd      	mov	sp, r7
 801c574:	bc90      	pop	{r4, r7}
 801c576:	4770      	bx	lr

0801c578 <jpeg_idct_16x8>:

GLOBAL(void)
jpeg_idct_16x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801c578:	b490      	push	{r4, r7}
 801c57a:	b0e0      	sub	sp, #384	; 0x180
 801c57c:	af00      	add	r7, sp, #0
 801c57e:	f107 040c 	add.w	r4, r7, #12
 801c582:	6020      	str	r0, [r4, #0]
 801c584:	f107 0008 	add.w	r0, r7, #8
 801c588:	6001      	str	r1, [r0, #0]
 801c58a:	1d39      	adds	r1, r7, #4
 801c58c:	600a      	str	r2, [r1, #0]
 801c58e:	463a      	mov	r2, r7
 801c590:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801c592:	f107 030c 	add.w	r3, r7, #12
 801c596:	681b      	ldr	r3, [r3, #0]
 801c598:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801c59c:	3380      	adds	r3, #128	; 0x80
 801c59e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
 801c5a2:	1d3b      	adds	r3, r7, #4
 801c5a4:	681b      	ldr	r3, [r3, #0]
 801c5a6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801c5aa:	f107 0308 	add.w	r3, r7, #8
 801c5ae:	681b      	ldr	r3, [r3, #0]
 801c5b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c5b2:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  wsptr = workspace;
 801c5b6:	f107 0314 	add.w	r3, r7, #20
 801c5ba:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 801c5be:	2308      	movs	r3, #8
 801c5c0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 801c5c4:	e238      	b.n	801ca38 <jpeg_idct_16x8+0x4c0>
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 801c5c6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801c5ca:	3310      	adds	r3, #16
 801c5cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c5d0:	2b00      	cmp	r3, #0
 801c5d2:	d175      	bne.n	801c6c0 <jpeg_idct_16x8+0x148>
 801c5d4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801c5d8:	3320      	adds	r3, #32
 801c5da:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c5de:	2b00      	cmp	r3, #0
 801c5e0:	d16e      	bne.n	801c6c0 <jpeg_idct_16x8+0x148>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 801c5e2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801c5e6:	3330      	adds	r3, #48	; 0x30
 801c5e8:	f9b3 3000 	ldrsh.w	r3, [r3]
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 801c5ec:	2b00      	cmp	r3, #0
 801c5ee:	d167      	bne.n	801c6c0 <jpeg_idct_16x8+0x148>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 801c5f0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801c5f4:	3340      	adds	r3, #64	; 0x40
 801c5f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c5fa:	2b00      	cmp	r3, #0
 801c5fc:	d160      	bne.n	801c6c0 <jpeg_idct_16x8+0x148>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801c5fe:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801c602:	3350      	adds	r3, #80	; 0x50
 801c604:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 801c608:	2b00      	cmp	r3, #0
 801c60a:	d159      	bne.n	801c6c0 <jpeg_idct_16x8+0x148>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801c60c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801c610:	3360      	adds	r3, #96	; 0x60
 801c612:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c616:	2b00      	cmp	r3, #0
 801c618:	d152      	bne.n	801c6c0 <jpeg_idct_16x8+0x148>
	inptr[DCTSIZE*7] == 0) {
 801c61a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801c61e:	3370      	adds	r3, #112	; 0x70
 801c620:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801c624:	2b00      	cmp	r3, #0
 801c626:	d14b      	bne.n	801c6c0 <jpeg_idct_16x8+0x148>
      /* AC terms all zero */
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801c628:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801c62c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c630:	461a      	mov	r2, r3
 801c632:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801c636:	681b      	ldr	r3, [r3, #0]
 801c638:	fb03 f302 	mul.w	r3, r3, r2
 801c63c:	009b      	lsls	r3, r3, #2
 801c63e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      
      wsptr[DCTSIZE*0] = dcval;
 801c642:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801c646:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801c64a:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*1] = dcval;
 801c64c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801c650:	3320      	adds	r3, #32
 801c652:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801c656:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*2] = dcval;
 801c658:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801c65c:	3340      	adds	r3, #64	; 0x40
 801c65e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801c662:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*3] = dcval;
 801c664:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801c668:	3360      	adds	r3, #96	; 0x60
 801c66a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801c66e:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*4] = dcval;
 801c670:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801c674:	3380      	adds	r3, #128	; 0x80
 801c676:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801c67a:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*5] = dcval;
 801c67c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801c680:	33a0      	adds	r3, #160	; 0xa0
 801c682:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801c686:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*6] = dcval;
 801c688:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801c68c:	33c0      	adds	r3, #192	; 0xc0
 801c68e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801c692:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*7] = dcval;
 801c694:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801c698:	33e0      	adds	r3, #224	; 0xe0
 801c69a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801c69e:	601a      	str	r2, [r3, #0]
      
      inptr++;			/* advance pointers to next column */
 801c6a0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801c6a4:	3302      	adds	r3, #2
 801c6a6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
      quantptr++;
 801c6aa:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801c6ae:	3304      	adds	r3, #4
 801c6b0:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
      wsptr++;
 801c6b4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801c6b8:	3304      	adds	r3, #4
 801c6ba:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
      continue;
 801c6be:	e1b6      	b.n	801ca2e <jpeg_idct_16x8+0x4b6>
    }
    
    /* Even part: reverse the even part of the forward DCT. */
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801c6c0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801c6c4:	3320      	adds	r3, #32
 801c6c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c6ca:	461a      	mov	r2, r3
 801c6cc:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801c6d0:	3340      	adds	r3, #64	; 0x40
 801c6d2:	681b      	ldr	r3, [r3, #0]
 801c6d4:	fb03 f302 	mul.w	r3, r3, r2
 801c6d8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801c6dc:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801c6e0:	3360      	adds	r3, #96	; 0x60
 801c6e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c6e6:	461a      	mov	r2, r3
 801c6e8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801c6ec:	33c0      	adds	r3, #192	; 0xc0
 801c6ee:	681b      	ldr	r3, [r3, #0]
 801c6f0:	fb03 f302 	mul.w	r3, r3, r2
 801c6f4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801c6f8:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801c6fc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801c700:	4413      	add	r3, r2
 801c702:	f241 1251 	movw	r2, #4433	; 0x1151
 801c706:	fb02 f303 	mul.w	r3, r2, r3
 801c70a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 801c70e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801c712:	f641 027e 	movw	r2, #6270	; 0x187e
 801c716:	fb02 f303 	mul.w	r3, r2, r3
 801c71a:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 801c71e:	4413      	add	r3, r2
 801c720:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 801c724:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801c728:	4aca      	ldr	r2, [pc, #808]	; (801ca54 <jpeg_idct_16x8+0x4dc>)
 801c72a:	fb02 f303 	mul.w	r3, r2, r3
 801c72e:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 801c732:	4413      	add	r3, r2
 801c734:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    
    z2 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801c738:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801c73c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c740:	461a      	mov	r2, r3
 801c742:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801c746:	681b      	ldr	r3, [r3, #0]
 801c748:	fb03 f302 	mul.w	r3, r3, r2
 801c74c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801c750:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801c754:	3340      	adds	r3, #64	; 0x40
 801c756:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c75a:	461a      	mov	r2, r3
 801c75c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801c760:	3380      	adds	r3, #128	; 0x80
 801c762:	681b      	ldr	r3, [r3, #0]
 801c764:	fb03 f302 	mul.w	r3, r3, r2
 801c768:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z2 <<= CONST_BITS;
 801c76c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801c770:	035b      	lsls	r3, r3, #13
 801c772:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    z3 <<= CONST_BITS;
 801c776:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801c77a:	035b      	lsls	r3, r3, #13
 801c77c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    /* Add fudge factor here for final descale. */
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 801c780:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801c784:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801c788:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

    tmp0 = z2 + z3;
 801c78c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801c790:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801c794:	4413      	add	r3, r2
 801c796:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp1 = z2 - z3;
 801c79a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801c79e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801c7a2:	1ad3      	subs	r3, r2, r3
 801c7a4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    
    tmp10 = tmp0 + tmp2;
 801c7a8:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801c7ac:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801c7b0:	4413      	add	r3, r2
 801c7b2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    tmp13 = tmp0 - tmp2;
 801c7b6:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801c7ba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801c7be:	1ad3      	subs	r3, r2, r3
 801c7c0:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    tmp11 = tmp1 + tmp3;
 801c7c4:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 801c7c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801c7cc:	4413      	add	r3, r2
 801c7ce:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    tmp12 = tmp1 - tmp3;
 801c7d2:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 801c7d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801c7da:	1ad3      	subs	r3, r2, r3
 801c7dc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    
    /* Odd part per figure 8; the matrix is unitary and hence its
     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
     */
    
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801c7e0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801c7e4:	3370      	adds	r3, #112	; 0x70
 801c7e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c7ea:	461a      	mov	r2, r3
 801c7ec:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801c7f0:	33e0      	adds	r3, #224	; 0xe0
 801c7f2:	681b      	ldr	r3, [r3, #0]
 801c7f4:	fb03 f302 	mul.w	r3, r3, r2
 801c7f8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801c7fc:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801c800:	3350      	adds	r3, #80	; 0x50
 801c802:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c806:	461a      	mov	r2, r3
 801c808:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801c80c:	33a0      	adds	r3, #160	; 0xa0
 801c80e:	681b      	ldr	r3, [r3, #0]
 801c810:	fb03 f302 	mul.w	r3, r3, r2
 801c814:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801c818:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801c81c:	3330      	adds	r3, #48	; 0x30
 801c81e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c822:	461a      	mov	r2, r3
 801c824:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801c828:	3360      	adds	r3, #96	; 0x60
 801c82a:	681b      	ldr	r3, [r3, #0]
 801c82c:	fb03 f302 	mul.w	r3, r3, r2
 801c830:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801c834:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801c838:	3310      	adds	r3, #16
 801c83a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c83e:	461a      	mov	r2, r3
 801c840:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801c844:	3320      	adds	r3, #32
 801c846:	681b      	ldr	r3, [r3, #0]
 801c848:	fb03 f302 	mul.w	r3, r3, r2
 801c84c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    
    z2 = tmp0 + tmp2;
 801c850:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801c854:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801c858:	4413      	add	r3, r2
 801c85a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    z3 = tmp1 + tmp3;
 801c85e:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 801c862:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801c866:	4413      	add	r3, r2
 801c868:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801c86c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801c870:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801c874:	4413      	add	r3, r2
 801c876:	f242 52a1 	movw	r2, #9633	; 0x25a1
 801c87a:	fb02 f303 	mul.w	r3, r2, r3
 801c87e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
 801c882:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801c886:	4a74      	ldr	r2, [pc, #464]	; (801ca58 <jpeg_idct_16x8+0x4e0>)
 801c888:	fb02 f303 	mul.w	r3, r2, r3
 801c88c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
 801c890:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801c894:	4a71      	ldr	r2, [pc, #452]	; (801ca5c <jpeg_idct_16x8+0x4e4>)
 801c896:	fb02 f303 	mul.w	r3, r2, r3
 801c89a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z2 += z1;
 801c89e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801c8a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801c8a6:	4413      	add	r3, r2
 801c8a8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    z3 += z1;
 801c8ac:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801c8b0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801c8b4:	4413      	add	r3, r2
 801c8b6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 801c8ba:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801c8be:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801c8c2:	4413      	add	r3, r2
 801c8c4:	4a66      	ldr	r2, [pc, #408]	; (801ca60 <jpeg_idct_16x8+0x4e8>)
 801c8c6:	fb02 f303 	mul.w	r3, r2, r3
 801c8ca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
 801c8ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801c8d2:	f640 128e 	movw	r2, #2446	; 0x98e
 801c8d6:	fb02 f303 	mul.w	r3, r2, r3
 801c8da:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
 801c8de:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801c8e2:	f243 020b 	movw	r2, #12299	; 0x300b
 801c8e6:	fb02 f303 	mul.w	r3, r2, r3
 801c8ea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    tmp0 += z1 + z2;
 801c8ee:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 801c8f2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801c8f6:	4413      	add	r3, r2
 801c8f8:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801c8fc:	4413      	add	r3, r2
 801c8fe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp3 += z1 + z3;
 801c902:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 801c906:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801c90a:	4413      	add	r3, r2
 801c90c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801c910:	4413      	add	r3, r2
 801c912:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801c916:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 801c91a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801c91e:	4413      	add	r3, r2
 801c920:	4a50      	ldr	r2, [pc, #320]	; (801ca64 <jpeg_idct_16x8+0x4ec>)
 801c922:	fb02 f303 	mul.w	r3, r2, r3
 801c926:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
 801c92a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 801c92e:	f244 12b3 	movw	r2, #16819	; 0x41b3
 801c932:	fb02 f303 	mul.w	r3, r2, r3
 801c936:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
 801c93a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801c93e:	f246 2254 	movw	r2, #25172	; 0x6254
 801c942:	fb02 f303 	mul.w	r3, r2, r3
 801c946:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    tmp1 += z1 + z3;
 801c94a:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 801c94e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801c952:	4413      	add	r3, r2
 801c954:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 801c958:	4413      	add	r3, r2
 801c95a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    tmp2 += z1 + z2;
 801c95e:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 801c962:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801c966:	4413      	add	r3, r2
 801c968:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 801c96c:	4413      	add	r3, r2
 801c96e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    
    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
    
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 801c972:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801c976:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801c97a:	4413      	add	r3, r2
 801c97c:	12da      	asrs	r2, r3, #11
 801c97e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801c982:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 801c984:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801c988:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801c98c:	1ad2      	subs	r2, r2, r3
 801c98e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801c992:	33e0      	adds	r3, #224	; 0xe0
 801c994:	12d2      	asrs	r2, r2, #11
 801c996:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801c998:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 801c99c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801c9a0:	441a      	add	r2, r3
 801c9a2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801c9a6:	3320      	adds	r3, #32
 801c9a8:	12d2      	asrs	r2, r2, #11
 801c9aa:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 801c9ac:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 801c9b0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801c9b4:	1ad2      	subs	r2, r2, r3
 801c9b6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801c9ba:	33c0      	adds	r3, #192	; 0xc0
 801c9bc:	12d2      	asrs	r2, r2, #11
 801c9be:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 801c9c0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801c9c4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 801c9c8:	441a      	add	r2, r3
 801c9ca:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801c9ce:	3340      	adds	r3, #64	; 0x40
 801c9d0:	12d2      	asrs	r2, r2, #11
 801c9d2:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 801c9d4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801c9d8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 801c9dc:	1ad2      	subs	r2, r2, r3
 801c9de:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801c9e2:	33a0      	adds	r3, #160	; 0xa0
 801c9e4:	12d2      	asrs	r2, r2, #11
 801c9e6:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 801c9e8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801c9ec:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801c9f0:	441a      	add	r2, r3
 801c9f2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801c9f6:	3360      	adds	r3, #96	; 0x60
 801c9f8:	12d2      	asrs	r2, r2, #11
 801c9fa:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 801c9fc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801ca00:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801ca04:	1ad2      	subs	r2, r2, r3
 801ca06:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801ca0a:	3380      	adds	r3, #128	; 0x80
 801ca0c:	12d2      	asrs	r2, r2, #11
 801ca0e:	601a      	str	r2, [r3, #0]
    
    inptr++;			/* advance pointers to next column */
 801ca10:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801ca14:	3302      	adds	r3, #2
 801ca16:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    quantptr++;
 801ca1a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801ca1e:	3304      	adds	r3, #4
 801ca20:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    wsptr++;
 801ca24:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801ca28:	3304      	adds	r3, #4
 801ca2a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 801ca2e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801ca32:	3b01      	subs	r3, #1
 801ca34:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 801ca38:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801ca3c:	2b00      	cmp	r3, #0
 801ca3e:	f73f adc2 	bgt.w	801c5c6 <jpeg_idct_16x8+0x4e>
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  wsptr = workspace;
 801ca42:	f107 0314 	add.w	r3, r7, #20
 801ca46:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  for (ctr = 0; ctr < 8; ctr++) {
 801ca4a:	2300      	movs	r3, #0
 801ca4c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 801ca50:	e32c      	b.n	801d0ac <jpeg_idct_16x8+0xb34>
 801ca52:	bf00      	nop
 801ca54:	ffffc4df 	.word	0xffffc4df
 801ca58:	ffffc13b 	.word	0xffffc13b
 801ca5c:	fffff384 	.word	0xfffff384
 801ca60:	ffffe333 	.word	0xffffe333
 801ca64:	ffffadfd 	.word	0xffffadfd
    outptr = output_buf[ctr] + output_col;
 801ca68:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801ca6c:	009b      	lsls	r3, r3, #2
 801ca6e:	463a      	mov	r2, r7
 801ca70:	6812      	ldr	r2, [r2, #0]
 801ca72:	4413      	add	r3, r2
 801ca74:	681a      	ldr	r2, [r3, #0]
 801ca76:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801ca7a:	4413      	add	r3, r2
 801ca7c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801ca80:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801ca84:	681b      	ldr	r3, [r3, #0]
 801ca86:	3310      	adds	r3, #16
 801ca88:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp0 <<= CONST_BITS;
 801ca8c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801ca90:	035b      	lsls	r3, r3, #13
 801ca92:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

    z1 = (INT32) wsptr[4];
 801ca96:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801ca9a:	3310      	adds	r3, #16
 801ca9c:	681b      	ldr	r3, [r3, #0]
 801ca9e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801caa2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801caa6:	f642 12cf 	movw	r2, #10703	; 0x29cf
 801caaa:	fb02 f303 	mul.w	r3, r2, r3
 801caae:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801cab2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801cab6:	f241 1251 	movw	r2, #4433	; 0x1151
 801caba:	fb02 f303 	mul.w	r3, r2, r3
 801cabe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

    tmp10 = tmp0 + tmp1;
 801cac2:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801cac6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 801caca:	4413      	add	r3, r2
 801cacc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    tmp11 = tmp0 - tmp1;
 801cad0:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801cad4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 801cad8:	1ad3      	subs	r3, r2, r3
 801cada:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    tmp12 = tmp0 + tmp2;
 801cade:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801cae2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801cae6:	4413      	add	r3, r2
 801cae8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    tmp13 = tmp0 - tmp2;
 801caec:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801caf0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801caf4:	1ad3      	subs	r3, r2, r3
 801caf6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

    z1 = (INT32) wsptr[2];
 801cafa:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801cafe:	3308      	adds	r3, #8
 801cb00:	681b      	ldr	r3, [r3, #0]
 801cb02:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    z2 = (INT32) wsptr[6];
 801cb06:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801cb0a:	3318      	adds	r3, #24
 801cb0c:	681b      	ldr	r3, [r3, #0]
 801cb0e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    z3 = z1 - z2;
 801cb12:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 801cb16:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801cb1a:	1ad3      	subs	r3, r2, r3
 801cb1c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 801cb20:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801cb24:	f640 02d4 	movw	r2, #2260	; 0x8d4
 801cb28:	fb02 f303 	mul.w	r3, r2, r3
 801cb2c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 801cb30:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801cb34:	f642 4263 	movw	r2, #11363	; 0x2c63
 801cb38:	fb02 f303 	mul.w	r3, r2, r3
 801cb3c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801cb40:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801cb44:	f245 2203 	movw	r2, #20995	; 0x5203
 801cb48:	fb02 f303 	mul.w	r3, r2, r3
 801cb4c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801cb50:	4413      	add	r3, r2
 801cb52:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 801cb56:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801cb5a:	f641 42cd 	movw	r2, #7373	; 0x1ccd
 801cb5e:	fb02 f303 	mul.w	r3, r2, r3
 801cb62:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801cb66:	4413      	add	r3, r2
 801cb68:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801cb6c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801cb70:	4af4      	ldr	r2, [pc, #976]	; (801cf44 <jpeg_idct_16x8+0x9cc>)
 801cb72:	fb02 f303 	mul.w	r3, r2, r3
 801cb76:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801cb7a:	4413      	add	r3, r2
 801cb7c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801cb80:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801cb84:	4af0      	ldr	r2, [pc, #960]	; (801cf48 <jpeg_idct_16x8+0x9d0>)
 801cb86:	fb02 f303 	mul.w	r3, r2, r3
 801cb8a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801cb8e:	4413      	add	r3, r2
 801cb90:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    tmp20 = tmp10 + tmp0;
 801cb94:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801cb98:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801cb9c:	4413      	add	r3, r2
 801cb9e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    tmp27 = tmp10 - tmp0;
 801cba2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801cba6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801cbaa:	1ad3      	subs	r3, r2, r3
 801cbac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    tmp21 = tmp12 + tmp1;
 801cbb0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801cbb4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 801cbb8:	4413      	add	r3, r2
 801cbba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    tmp26 = tmp12 - tmp1;
 801cbbe:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801cbc2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 801cbc6:	1ad3      	subs	r3, r2, r3
 801cbc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    tmp22 = tmp13 + tmp2;
 801cbcc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801cbd0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801cbd4:	4413      	add	r3, r2
 801cbd6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    tmp25 = tmp13 - tmp2;
 801cbda:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801cbde:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801cbe2:	1ad3      	subs	r3, r2, r3
 801cbe4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    tmp23 = tmp11 + tmp3;
 801cbe8:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 801cbec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801cbf0:	4413      	add	r3, r2
 801cbf2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    tmp24 = tmp11 - tmp3;
 801cbf6:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 801cbfa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801cbfe:	1ad3      	subs	r3, r2, r3
 801cc00:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    /* Odd part */

    z1 = (INT32) wsptr[1];
 801cc04:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801cc08:	3304      	adds	r3, #4
 801cc0a:	681b      	ldr	r3, [r3, #0]
 801cc0c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    z2 = (INT32) wsptr[3];
 801cc10:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801cc14:	330c      	adds	r3, #12
 801cc16:	681b      	ldr	r3, [r3, #0]
 801cc18:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    z3 = (INT32) wsptr[5];
 801cc1c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801cc20:	3314      	adds	r3, #20
 801cc22:	681b      	ldr	r3, [r3, #0]
 801cc24:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z4 = (INT32) wsptr[7];
 801cc28:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801cc2c:	331c      	adds	r3, #28
 801cc2e:	681b      	ldr	r3, [r3, #0]
 801cc30:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    tmp11 = z1 + z3;
 801cc34:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 801cc38:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801cc3c:	4413      	add	r3, r2
 801cc3e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801cc42:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 801cc46:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801cc4a:	4413      	add	r3, r2
 801cc4c:	f642 324e 	movw	r2, #11086	; 0x2b4e
 801cc50:	fb02 f303 	mul.w	r3, r2, r3
 801cc54:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801cc58:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801cc5c:	f242 72e9 	movw	r2, #10217	; 0x27e9
 801cc60:	fb02 f303 	mul.w	r3, r2, r3
 801cc64:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 801cc68:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 801cc6c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801cc70:	4413      	add	r3, r2
 801cc72:	f242 22fc 	movw	r2, #8956	; 0x22fc
 801cc76:	fb02 f303 	mul.w	r3, r2, r3
 801cc7a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801cc7e:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 801cc82:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801cc86:	1ad3      	subs	r3, r2, r3
 801cc88:	f641 42b6 	movw	r2, #7350	; 0x1cb6
 801cc8c:	fb02 f303 	mul.w	r3, r2, r3
 801cc90:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 801cc94:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801cc98:	f241 5255 	movw	r2, #5461	; 0x1555
 801cc9c:	fb02 f303 	mul.w	r3, r2, r3
 801cca0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801cca4:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 801cca8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801ccac:	1ad3      	subs	r3, r2, r3
 801ccae:	f640 5223 	movw	r2, #3363	; 0xd23
 801ccb2:	fb02 f303 	mul.w	r3, r2, r3
 801ccb6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    tmp0  = tmp1 + tmp2 + tmp3 -
 801ccba:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 801ccbe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801ccc2:	441a      	add	r2, r3
 801ccc4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801ccc8:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
 801ccca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801ccce:	499f      	ldr	r1, [pc, #636]	; (801cf4c <jpeg_idct_16x8+0x9d4>)
 801ccd0:	fb01 f303 	mul.w	r3, r1, r3
    tmp0  = tmp1 + tmp2 + tmp3 -
 801ccd4:	4413      	add	r3, r2
 801ccd6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp13 = tmp10 + tmp11 + tmp12 -
 801ccda:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801ccde:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801cce2:	441a      	add	r2, r3
 801cce4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801cce8:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
 801ccea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801ccee:	4998      	ldr	r1, [pc, #608]	; (801cf50 <jpeg_idct_16x8+0x9d8>)
 801ccf0:	fb01 f303 	mul.w	r3, r1, r3
    tmp13 = tmp10 + tmp11 + tmp12 -
 801ccf4:	4413      	add	r3, r2
 801ccf6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801ccfa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801ccfe:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801cd02:	4413      	add	r3, r2
 801cd04:	f44f 628e 	mov.w	r2, #1136	; 0x470
 801cd08:	fb02 f303 	mul.w	r3, r2, r3
 801cd0c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 801cd10:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801cd14:	f240 224d 	movw	r2, #589	; 0x24d
 801cd18:	fb02 f203 	mul.w	r2, r2, r3
 801cd1c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801cd20:	4413      	add	r3, r2
 801cd22:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 801cd26:	4413      	add	r3, r2
 801cd28:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801cd2c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801cd30:	4a88      	ldr	r2, [pc, #544]	; (801cf54 <jpeg_idct_16x8+0x9dc>)
 801cd32:	fb02 f203 	mul.w	r2, r2, r3
 801cd36:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801cd3a:	4413      	add	r3, r2
 801cd3c:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 801cd40:	4413      	add	r3, r2
 801cd42:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801cd46:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801cd4a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801cd4e:	1ad3      	subs	r3, r2, r3
 801cd50:	f642 5209 	movw	r2, #11529	; 0x2d09
 801cd54:	fb02 f303 	mul.w	r3, r2, r3
 801cd58:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 801cd5c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801cd60:	4a7d      	ldr	r2, [pc, #500]	; (801cf58 <jpeg_idct_16x8+0x9e0>)
 801cd62:	fb02 f203 	mul.w	r2, r2, r3
 801cd66:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801cd6a:	4413      	add	r3, r2
 801cd6c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 801cd70:	4413      	add	r3, r2
 801cd72:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801cd76:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801cd7a:	f643 721a 	movw	r2, #16154	; 0x3f1a
 801cd7e:	fb02 f203 	mul.w	r2, r2, r3
 801cd82:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801cd86:	4413      	add	r3, r2
 801cd88:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801cd8c:	4413      	add	r3, r2
 801cd8e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    z2    += z4;
 801cd92:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801cd96:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801cd9a:	4413      	add	r3, r2
 801cd9c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 801cda0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801cda4:	4a6d      	ldr	r2, [pc, #436]	; (801cf5c <jpeg_idct_16x8+0x9e4>)
 801cda6:	fb02 f303 	mul.w	r3, r2, r3
 801cdaa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    tmp1  += z1;
 801cdae:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 801cdb2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801cdb6:	4413      	add	r3, r2
 801cdb8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801cdbc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801cdc0:	f242 2218 	movw	r2, #8728	; 0x2218
 801cdc4:	fb02 f203 	mul.w	r2, r2, r3
 801cdc8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801cdcc:	4413      	add	r3, r2
 801cdce:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801cdd2:	4413      	add	r3, r2
 801cdd4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 801cdd8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801cddc:	4a60      	ldr	r2, [pc, #384]	; (801cf60 <jpeg_idct_16x8+0x9e8>)
 801cdde:	fb02 f303 	mul.w	r3, r2, r3
 801cde2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801cde6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801cdea:	f246 4285 	movw	r2, #25733	; 0x6485
 801cdee:	fb02 f203 	mul.w	r2, r2, r3
 801cdf2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801cdf6:	4413      	add	r3, r2
 801cdf8:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801cdfc:	4413      	add	r3, r2
 801cdfe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    tmp12 += z2;
 801ce02:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801ce06:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801ce0a:	4413      	add	r3, r2
 801ce0c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 801ce10:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801ce14:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801ce18:	4413      	add	r3, r2
 801ce1a:	4a52      	ldr	r2, [pc, #328]	; (801cf64 <jpeg_idct_16x8+0x9ec>)
 801ce1c:	fb02 f303 	mul.w	r3, r2, r3
 801ce20:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    tmp2  += z2;
 801ce24:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 801ce28:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801ce2c:	4413      	add	r3, r2
 801ce2e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    tmp3  += z2;
 801ce32:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801ce36:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801ce3a:	4413      	add	r3, r2
 801ce3c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 801ce40:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801ce44:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801ce48:	1ad3      	subs	r3, r2, r3
 801ce4a:	f640 5223 	movw	r2, #3363	; 0xd23
 801ce4e:	fb02 f303 	mul.w	r3, r2, r3
 801ce52:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    tmp10 += z2;
 801ce56:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801ce5a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801ce5e:	4413      	add	r3, r2
 801ce60:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    tmp11 += z2;
 801ce64:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 801ce68:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801ce6c:	4413      	add	r3, r2
 801ce6e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 801ce72:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801ce76:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801ce7a:	4413      	add	r3, r2
 801ce7c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801ce7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 801ce82:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 801ce86:	4413      	add	r3, r2
 801ce88:	781a      	ldrb	r2, [r3, #0]
 801ce8a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801ce8e:	701a      	strb	r2, [r3, #0]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 801ce90:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801ce94:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801ce98:	1ad3      	subs	r3, r2, r3
 801ce9a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801ce9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 801cea0:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 801cea4:	441a      	add	r2, r3
 801cea6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801ceaa:	330f      	adds	r3, #15
 801ceac:	7812      	ldrb	r2, [r2, #0]
 801ceae:	701a      	strb	r2, [r3, #0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 801ceb0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 801ceb4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 801ceb8:	4413      	add	r3, r2
 801ceba:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801cebc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 801cec0:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 801cec4:	441a      	add	r2, r3
 801cec6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801ceca:	3301      	adds	r3, #1
 801cecc:	7812      	ldrb	r2, [r2, #0]
 801cece:	701a      	strb	r2, [r3, #0]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 801ced0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 801ced4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 801ced8:	1ad3      	subs	r3, r2, r3
 801ceda:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801cedc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 801cee0:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 801cee4:	441a      	add	r2, r3
 801cee6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801ceea:	330e      	adds	r3, #14
 801ceec:	7812      	ldrb	r2, [r2, #0]
 801ceee:	701a      	strb	r2, [r3, #0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 801cef0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801cef4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801cef8:	4413      	add	r3, r2
 801cefa:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801cefc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 801cf00:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 801cf04:	441a      	add	r2, r3
 801cf06:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801cf0a:	3302      	adds	r3, #2
 801cf0c:	7812      	ldrb	r2, [r2, #0]
 801cf0e:	701a      	strb	r2, [r3, #0]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 801cf10:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801cf14:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801cf18:	1ad3      	subs	r3, r2, r3
 801cf1a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801cf1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 801cf20:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 801cf24:	441a      	add	r2, r3
 801cf26:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801cf2a:	330d      	adds	r3, #13
 801cf2c:	7812      	ldrb	r2, [r2, #0]
 801cf2e:	701a      	strb	r2, [r3, #0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 801cf30:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801cf34:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801cf38:	4413      	add	r3, r2
 801cf3a:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801cf3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801cf40:	e012      	b.n	801cf68 <jpeg_idct_16x8+0x9f0>
 801cf42:	bf00      	nop
 801cf44:	ffffecc2 	.word	0xffffecc2
 801cf48:	ffffefb0 	.word	0xffffefb0
 801cf4c:	ffffb6d6 	.word	0xffffb6d6
 801cf50:	ffffc542 	.word	0xffffc542
 801cf54:	ffffdbfa 	.word	0xffffdbfa
 801cf58:	ffffe77a 	.word	0xffffe77a
 801cf5c:	ffffeaab 	.word	0xffffeaab
 801cf60:	ffffd817 	.word	0xffffd817
 801cf64:	ffffd4b2 	.word	0xffffd4b2
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 801cf68:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 801cf6c:	441a      	add	r2, r3
 801cf6e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801cf72:	3303      	adds	r3, #3
 801cf74:	7812      	ldrb	r2, [r2, #0]
 801cf76:	701a      	strb	r2, [r3, #0]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 801cf78:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801cf7c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801cf80:	1ad3      	subs	r3, r2, r3
 801cf82:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801cf84:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 801cf88:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 801cf8c:	441a      	add	r2, r3
 801cf8e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801cf92:	330c      	adds	r3, #12
 801cf94:	7812      	ldrb	r2, [r2, #0]
 801cf96:	701a      	strb	r2, [r3, #0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 801cf98:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801cf9c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801cfa0:	4413      	add	r3, r2
 801cfa2:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801cfa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 801cfa8:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 801cfac:	441a      	add	r2, r3
 801cfae:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801cfb2:	3304      	adds	r3, #4
 801cfb4:	7812      	ldrb	r2, [r2, #0]
 801cfb6:	701a      	strb	r2, [r3, #0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 801cfb8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801cfbc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801cfc0:	1ad3      	subs	r3, r2, r3
 801cfc2:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801cfc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 801cfc8:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 801cfcc:	441a      	add	r2, r3
 801cfce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801cfd2:	330b      	adds	r3, #11
 801cfd4:	7812      	ldrb	r2, [r2, #0]
 801cfd6:	701a      	strb	r2, [r3, #0]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 801cfd8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801cfdc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801cfe0:	4413      	add	r3, r2
 801cfe2:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801cfe4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 801cfe8:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 801cfec:	441a      	add	r2, r3
 801cfee:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801cff2:	3305      	adds	r3, #5
 801cff4:	7812      	ldrb	r2, [r2, #0]
 801cff6:	701a      	strb	r2, [r3, #0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 801cff8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801cffc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801d000:	1ad3      	subs	r3, r2, r3
 801d002:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801d004:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 801d008:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 801d00c:	441a      	add	r2, r3
 801d00e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801d012:	330a      	adds	r3, #10
 801d014:	7812      	ldrb	r2, [r2, #0]
 801d016:	701a      	strb	r2, [r3, #0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 801d018:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801d01c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801d020:	4413      	add	r3, r2
 801d022:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801d024:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 801d028:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 801d02c:	441a      	add	r2, r3
 801d02e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801d032:	3306      	adds	r3, #6
 801d034:	7812      	ldrb	r2, [r2, #0]
 801d036:	701a      	strb	r2, [r3, #0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 801d038:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801d03c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801d040:	1ad3      	subs	r3, r2, r3
 801d042:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801d044:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 801d048:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 801d04c:	441a      	add	r2, r3
 801d04e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801d052:	3309      	adds	r3, #9
 801d054:	7812      	ldrb	r2, [r2, #0]
 801d056:	701a      	strb	r2, [r3, #0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 801d058:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801d05c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801d060:	4413      	add	r3, r2
 801d062:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801d064:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 801d068:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 801d06c:	441a      	add	r2, r3
 801d06e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801d072:	3307      	adds	r3, #7
 801d074:	7812      	ldrb	r2, [r2, #0]
 801d076:	701a      	strb	r2, [r3, #0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 801d078:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801d07c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801d080:	1ad3      	subs	r3, r2, r3
 801d082:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801d084:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 801d088:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 801d08c:	441a      	add	r2, r3
 801d08e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801d092:	3308      	adds	r3, #8
 801d094:	7812      	ldrb	r2, [r2, #0]
 801d096:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 801d098:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801d09c:	3320      	adds	r3, #32
 801d09e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  for (ctr = 0; ctr < 8; ctr++) {
 801d0a2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801d0a6:	3301      	adds	r3, #1
 801d0a8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 801d0ac:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801d0b0:	2b07      	cmp	r3, #7
 801d0b2:	f77f acd9 	ble.w	801ca68 <jpeg_idct_16x8+0x4f0>
  }
}
 801d0b6:	bf00      	nop
 801d0b8:	bf00      	nop
 801d0ba:	f507 77c0 	add.w	r7, r7, #384	; 0x180
 801d0be:	46bd      	mov	sp, r7
 801d0c0:	bc90      	pop	{r4, r7}
 801d0c2:	4770      	bx	lr

0801d0c4 <jpeg_idct_14x7>:

GLOBAL(void)
jpeg_idct_14x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801d0c4:	b490      	push	{r4, r7}
 801d0c6:	b0d4      	sub	sp, #336	; 0x150
 801d0c8:	af00      	add	r7, sp, #0
 801d0ca:	f107 040c 	add.w	r4, r7, #12
 801d0ce:	6020      	str	r0, [r4, #0]
 801d0d0:	f107 0008 	add.w	r0, r7, #8
 801d0d4:	6001      	str	r1, [r0, #0]
 801d0d6:	1d39      	adds	r1, r7, #4
 801d0d8:	600a      	str	r2, [r1, #0]
 801d0da:	463a      	mov	r2, r7
 801d0dc:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801d0de:	f107 030c 	add.w	r3, r7, #12
 801d0e2:	681b      	ldr	r3, [r3, #0]
 801d0e4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801d0e8:	3380      	adds	r3, #128	; 0x80
 801d0ea:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  inptr = coef_block;
 801d0ee:	1d3b      	adds	r3, r7, #4
 801d0f0:	681b      	ldr	r3, [r3, #0]
 801d0f2:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801d0f6:	f107 0308 	add.w	r3, r7, #8
 801d0fa:	681b      	ldr	r3, [r3, #0]
 801d0fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d0fe:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  wsptr = workspace;
 801d102:	f107 0310 	add.w	r3, r7, #16
 801d106:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801d10a:	2300      	movs	r3, #0
 801d10c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 801d110:	e17a      	b.n	801d408 <jpeg_idct_14x7+0x344>
    /* Even part */

    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801d112:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801d116:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d11a:	461a      	mov	r2, r3
 801d11c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801d120:	681b      	ldr	r3, [r3, #0]
 801d122:	fb03 f302 	mul.w	r3, r3, r2
 801d126:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    tmp23 <<= CONST_BITS;
 801d12a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801d12e:	035b      	lsls	r3, r3, #13
 801d130:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    /* Add fudge factor here for final descale. */
    tmp23 += ONE << (CONST_BITS-PASS1_BITS-1);
 801d134:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801d138:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801d13c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801d140:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801d144:	3320      	adds	r3, #32
 801d146:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d14a:	461a      	mov	r2, r3
 801d14c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801d150:	3340      	adds	r3, #64	; 0x40
 801d152:	681b      	ldr	r3, [r3, #0]
 801d154:	fb03 f302 	mul.w	r3, r3, r2
 801d158:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801d15c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801d160:	3340      	adds	r3, #64	; 0x40
 801d162:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d166:	461a      	mov	r2, r3
 801d168:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801d16c:	3380      	adds	r3, #128	; 0x80
 801d16e:	681b      	ldr	r3, [r3, #0]
 801d170:	fb03 f302 	mul.w	r3, r3, r2
 801d174:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801d178:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801d17c:	3360      	adds	r3, #96	; 0x60
 801d17e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d182:	461a      	mov	r2, r3
 801d184:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801d188:	33c0      	adds	r3, #192	; 0xc0
 801d18a:	681b      	ldr	r3, [r3, #0]
 801d18c:	fb03 f302 	mul.w	r3, r3, r2
 801d190:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 801d194:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 801d198:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d19c:	1ad3      	subs	r3, r2, r3
 801d19e:	f641 4237 	movw	r2, #7223	; 0x1c37
 801d1a2:	fb02 f303 	mul.w	r3, r2, r3
 801d1a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 801d1aa:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801d1ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d1b2:	1ad3      	subs	r3, r2, r3
 801d1b4:	f640 2212 	movw	r2, #2578	; 0xa12
 801d1b8:	fb02 f303 	mul.w	r3, r2, r3
 801d1bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801d1c0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801d1c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d1c8:	441a      	add	r2, r3
 801d1ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801d1ce:	441a      	add	r2, r3
 801d1d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d1d4:	4993      	ldr	r1, [pc, #588]	; (801d424 <jpeg_idct_14x7+0x360>)
 801d1d6:	fb01 f303 	mul.w	r3, r1, r3
 801d1da:	4413      	add	r3, r2
 801d1dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    tmp10 = z1 + z3;
 801d1e0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801d1e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d1e8:	4413      	add	r3, r2
 801d1ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    z2 -= tmp10;
 801d1ee:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 801d1f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801d1f6:	1ad3      	subs	r3, r2, r3
 801d1f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 801d1fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801d200:	f642 02c6 	movw	r2, #10438	; 0x28c6
 801d204:	fb02 f303 	mul.w	r3, r2, r3
 801d208:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801d20c:	4413      	add	r3, r2
 801d20e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 801d212:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d216:	f46f 721f 	mvn.w	r2, #636	; 0x27c
 801d21a:	fb02 f203 	mul.w	r2, r2, r3
 801d21e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801d222:	4413      	add	r3, r2
 801d224:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801d228:	4413      	add	r3, r2
 801d22a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 801d22e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801d232:	4a7d      	ldr	r2, [pc, #500]	; (801d428 <jpeg_idct_14x7+0x364>)
 801d234:	fb02 f203 	mul.w	r2, r2, r3
 801d238:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801d23c:	4413      	add	r3, r2
 801d23e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 801d242:	4413      	add	r3, r2
 801d244:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 801d248:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d24c:	f642 5241 	movw	r2, #11585	; 0x2d41
 801d250:	fb02 f303 	mul.w	r3, r2, r3
 801d254:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801d258:	4413      	add	r3, r2
 801d25a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801d25e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801d262:	3310      	adds	r3, #16
 801d264:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d268:	461a      	mov	r2, r3
 801d26a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801d26e:	3320      	adds	r3, #32
 801d270:	681b      	ldr	r3, [r3, #0]
 801d272:	fb03 f302 	mul.w	r3, r3, r2
 801d276:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801d27a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801d27e:	3330      	adds	r3, #48	; 0x30
 801d280:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d284:	461a      	mov	r2, r3
 801d286:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801d28a:	3360      	adds	r3, #96	; 0x60
 801d28c:	681b      	ldr	r3, [r3, #0]
 801d28e:	fb03 f302 	mul.w	r3, r3, r2
 801d292:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801d296:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801d29a:	3350      	adds	r3, #80	; 0x50
 801d29c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d2a0:	461a      	mov	r2, r3
 801d2a2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801d2a6:	33a0      	adds	r3, #160	; 0xa0
 801d2a8:	681b      	ldr	r3, [r3, #0]
 801d2aa:	fb03 f302 	mul.w	r3, r3, r2
 801d2ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 801d2b2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801d2b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d2ba:	4413      	add	r3, r2
 801d2bc:	f641 52ef 	movw	r2, #7663	; 0x1def
 801d2c0:	fb02 f303 	mul.w	r3, r2, r3
 801d2c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 801d2c8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801d2cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d2d0:	1ad3      	subs	r3, r2, r3
 801d2d2:	f240 5273 	movw	r2, #1395	; 0x573
 801d2d6:	fb02 f303 	mul.w	r3, r2, r3
 801d2da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    tmp10 = tmp11 - tmp12;
 801d2de:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801d2e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d2e6:	1ad3      	subs	r3, r2, r3
 801d2e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    tmp11 += tmp12;
 801d2ec:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801d2f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d2f4:	4413      	add	r3, r2
 801d2f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 801d2fa:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 801d2fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d302:	4413      	add	r3, r2
 801d304:	4a49      	ldr	r2, [pc, #292]	; (801d42c <jpeg_idct_14x7+0x368>)
 801d306:	fb02 f303 	mul.w	r3, r2, r3
 801d30a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    tmp11 += tmp12;
 801d30e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801d312:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d316:	4413      	add	r3, r2
 801d318:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 801d31c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801d320:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d324:	4413      	add	r3, r2
 801d326:	f241 32a3 	movw	r2, #5027	; 0x13a3
 801d32a:	fb02 f303 	mul.w	r3, r2, r3
 801d32e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    tmp10 += z2;
 801d332:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801d336:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d33a:	4413      	add	r3, r2
 801d33c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 801d340:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d344:	f643 32de 	movw	r2, #15326	; 0x3bde
 801d348:	fb02 f203 	mul.w	r2, r2, r3
 801d34c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d350:	4413      	add	r3, r2
 801d352:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801d356:	4413      	add	r3, r2
 801d358:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801d35c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801d360:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801d364:	4413      	add	r3, r2
 801d366:	12da      	asrs	r2, r3, #11
 801d368:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801d36c:	601a      	str	r2, [r3, #0]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801d36e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801d372:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801d376:	1ad2      	subs	r2, r2, r3
 801d378:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801d37c:	33c0      	adds	r3, #192	; 0xc0
 801d37e:	12d2      	asrs	r2, r2, #11
 801d380:	601a      	str	r2, [r3, #0]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801d382:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801d386:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801d38a:	441a      	add	r2, r3
 801d38c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801d390:	3320      	adds	r3, #32
 801d392:	12d2      	asrs	r2, r2, #11
 801d394:	601a      	str	r2, [r3, #0]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801d396:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801d39a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801d39e:	1ad2      	subs	r2, r2, r3
 801d3a0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801d3a4:	33a0      	adds	r3, #160	; 0xa0
 801d3a6:	12d2      	asrs	r2, r2, #11
 801d3a8:	601a      	str	r2, [r3, #0]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801d3aa:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 801d3ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d3b2:	441a      	add	r2, r3
 801d3b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801d3b8:	3340      	adds	r3, #64	; 0x40
 801d3ba:	12d2      	asrs	r2, r2, #11
 801d3bc:	601a      	str	r2, [r3, #0]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801d3be:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 801d3c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d3c6:	1ad2      	subs	r2, r2, r3
 801d3c8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801d3cc:	3380      	adds	r3, #128	; 0x80
 801d3ce:	12d2      	asrs	r2, r2, #11
 801d3d0:	601a      	str	r2, [r3, #0]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
 801d3d2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801d3d6:	3360      	adds	r3, #96	; 0x60
 801d3d8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801d3dc:	12d2      	asrs	r2, r2, #11
 801d3de:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801d3e0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801d3e4:	3301      	adds	r3, #1
 801d3e6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 801d3ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801d3ee:	3302      	adds	r3, #2
 801d3f0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 801d3f4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801d3f8:	3304      	adds	r3, #4
 801d3fa:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801d3fe:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801d402:	3304      	adds	r3, #4
 801d404:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 801d408:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801d40c:	2b07      	cmp	r3, #7
 801d40e:	f77f ae80 	ble.w	801d112 <jpeg_idct_14x7+0x4e>
  }

  /* Pass 2: process 7 rows from work array, store into output array.
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  wsptr = workspace;
 801d412:	f107 0310 	add.w	r3, r7, #16
 801d416:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  for (ctr = 0; ctr < 7; ctr++) {
 801d41a:	2300      	movs	r3, #0
 801d41c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 801d420:	e288      	b.n	801d934 <jpeg_idct_14x7+0x870>
 801d422:	bf00      	nop
 801d424:	ffffc515 	.word	0xffffc515
 801d428:	ffffb0f1 	.word	0xffffb0f1
 801d42c:	ffffd3e1 	.word	0xffffd3e1
    outptr = output_buf[ctr] + output_col;
 801d430:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801d434:	009b      	lsls	r3, r3, #2
 801d436:	463a      	mov	r2, r7
 801d438:	6812      	ldr	r2, [r2, #0]
 801d43a:	4413      	add	r3, r2
 801d43c:	681a      	ldr	r2, [r3, #0]
 801d43e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801d442:	4413      	add	r3, r2
 801d444:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    /* Even part */

    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801d448:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801d44c:	681b      	ldr	r3, [r3, #0]
 801d44e:	3310      	adds	r3, #16
 801d450:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    z1 <<= CONST_BITS;
 801d454:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801d458:	035b      	lsls	r3, r3, #13
 801d45a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    z4 = (INT32) wsptr[4];
 801d45e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801d462:	3310      	adds	r3, #16
 801d464:	681b      	ldr	r3, [r3, #0]
 801d466:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801d46a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801d46e:	f642 02c6 	movw	r2, #10438	; 0x28c6
 801d472:	fb02 f303 	mul.w	r3, r2, r3
 801d476:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 801d47a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801d47e:	f640 2212 	movw	r2, #2578	; 0xa12
 801d482:	fb02 f303 	mul.w	r3, r2, r3
 801d486:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801d48a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801d48e:	f641 4237 	movw	r2, #7223	; 0x1c37
 801d492:	fb02 f303 	mul.w	r3, r2, r3
 801d496:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    tmp10 = z1 + z2;
 801d49a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801d49e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d4a2:	4413      	add	r3, r2
 801d4a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    tmp11 = z1 + z3;
 801d4a8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801d4ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d4b0:	4413      	add	r3, r2
 801d4b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    tmp12 = z1 - z4;
 801d4b6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801d4ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801d4be:	1ad3      	subs	r3, r2, r3
 801d4c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 801d4c4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 801d4c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d4cc:	441a      	add	r2, r3
 801d4ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801d4d2:	1ad3      	subs	r3, r2, r3
 801d4d4:	005b      	lsls	r3, r3, #1
 801d4d6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801d4da:	1ad3      	subs	r3, r2, r3
 801d4dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    z1 = (INT32) wsptr[2];
 801d4e0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801d4e4:	3308      	adds	r3, #8
 801d4e6:	681b      	ldr	r3, [r3, #0]
 801d4e8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    z2 = (INT32) wsptr[6];
 801d4ec:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801d4f0:	3318      	adds	r3, #24
 801d4f2:	681b      	ldr	r3, [r3, #0]
 801d4f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801d4f8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801d4fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d500:	4413      	add	r3, r2
 801d502:	f242 3262 	movw	r2, #9058	; 0x2362
 801d506:	fb02 f303 	mul.w	r3, r2, r3
 801d50a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 801d50e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801d512:	f640 02bd 	movw	r2, #2237	; 0x8bd
 801d516:	fb02 f303 	mul.w	r3, r2, r3
 801d51a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801d51e:	4413      	add	r3, r2
 801d520:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 801d524:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d528:	4af1      	ldr	r2, [pc, #964]	; (801d8f0 <jpeg_idct_14x7+0x82c>)
 801d52a:	fb02 f303 	mul.w	r3, r2, r3
 801d52e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801d532:	4413      	add	r3, r2
 801d534:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 801d538:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801d53c:	f241 32a3 	movw	r2, #5027	; 0x13a3
 801d540:	fb02 f203 	mul.w	r2, r2, r3
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 801d544:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d548:	49ea      	ldr	r1, [pc, #936]	; (801d8f4 <jpeg_idct_14x7+0x830>)
 801d54a:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 801d54e:	4413      	add	r3, r2
 801d550:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

    tmp20 = tmp10 + tmp13;
 801d554:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801d558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801d55c:	4413      	add	r3, r2
 801d55e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    tmp26 = tmp10 - tmp13;
 801d562:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801d566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801d56a:	1ad3      	subs	r3, r2, r3
 801d56c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    tmp21 = tmp11 + tmp14;
 801d570:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801d574:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801d578:	4413      	add	r3, r2
 801d57a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    tmp25 = tmp11 - tmp14;
 801d57e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801d582:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801d586:	1ad3      	subs	r3, r2, r3
 801d588:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    tmp22 = tmp12 + tmp15;
 801d58c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801d590:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801d594:	4413      	add	r3, r2
 801d596:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    tmp24 = tmp12 - tmp15;
 801d59a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801d59e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801d5a2:	1ad3      	subs	r3, r2, r3
 801d5a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* Odd part */

    z1 = (INT32) wsptr[1];
 801d5a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801d5ac:	3304      	adds	r3, #4
 801d5ae:	681b      	ldr	r3, [r3, #0]
 801d5b0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    z2 = (INT32) wsptr[3];
 801d5b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801d5b8:	330c      	adds	r3, #12
 801d5ba:	681b      	ldr	r3, [r3, #0]
 801d5bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    z3 = (INT32) wsptr[5];
 801d5c0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801d5c4:	3314      	adds	r3, #20
 801d5c6:	681b      	ldr	r3, [r3, #0]
 801d5c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    z4 = (INT32) wsptr[7];
 801d5cc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801d5d0:	331c      	adds	r3, #28
 801d5d2:	681b      	ldr	r3, [r3, #0]
 801d5d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    z4 <<= CONST_BITS;
 801d5d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801d5dc:	035b      	lsls	r3, r3, #13
 801d5de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    tmp14 = z1 + z3;
 801d5e2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801d5e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d5ea:	4413      	add	r3, r2
 801d5ec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801d5f0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801d5f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d5f8:	4413      	add	r3, r2
 801d5fa:	f642 22b7 	movw	r2, #10935	; 0x2ab7
 801d5fe:	fb02 f303 	mul.w	r3, r2, r3
 801d602:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 801d606:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801d60a:	f242 6252 	movw	r2, #9810	; 0x2652
 801d60e:	fb02 f303 	mul.w	r3, r2, r3
 801d612:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 801d616:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801d61a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d61e:	441a      	add	r2, r3
 801d620:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801d624:	441a      	add	r2, r3
 801d626:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801d62a:	49b3      	ldr	r1, [pc, #716]	; (801d8f8 <jpeg_idct_14x7+0x834>)
 801d62c:	fb01 f303 	mul.w	r3, r1, r3
 801d630:	4413      	add	r3, r2
 801d632:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 801d636:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801d63a:	f641 0214 	movw	r2, #6164	; 0x1814
 801d63e:	fb02 f303 	mul.w	r3, r2, r3
 801d642:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 801d646:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801d64a:	4aac      	ldr	r2, [pc, #688]	; (801d8fc <jpeg_idct_14x7+0x838>)
 801d64c:	fb02 f303 	mul.w	r3, r2, r3
 801d650:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801d654:	4413      	add	r3, r2
 801d656:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    z1    -= z2;
 801d65a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801d65e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d662:	1ad3      	subs	r3, r2, r3
 801d664:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 801d668:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801d66c:	f640 62f2 	movw	r2, #3826	; 0xef2
 801d670:	fb02 f203 	mul.w	r2, r2, r3
 801d674:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801d678:	1ad3      	subs	r3, r2, r3
 801d67a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    tmp16 += tmp15;
 801d67e:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801d682:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801d686:	4413      	add	r3, r2
 801d688:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 801d68c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 801d690:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d694:	4413      	add	r3, r2
 801d696:	f46f 62a2 	mvn.w	r2, #1296	; 0x510
 801d69a:	fb02 f203 	mul.w	r2, r2, r3
 801d69e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801d6a2:	1ad3      	subs	r3, r2, r3
 801d6a4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 801d6a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d6ac:	4a94      	ldr	r2, [pc, #592]	; (801d900 <jpeg_idct_14x7+0x83c>)
 801d6ae:	fb02 f203 	mul.w	r2, r2, r3
 801d6b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801d6b6:	4413      	add	r3, r2
 801d6b8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801d6bc:	4413      	add	r3, r2
 801d6be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 801d6c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d6c6:	4a8f      	ldr	r2, [pc, #572]	; (801d904 <jpeg_idct_14x7+0x840>)
 801d6c8:	fb02 f203 	mul.w	r2, r2, r3
 801d6cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801d6d0:	4413      	add	r3, r2
 801d6d2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801d6d6:	4413      	add	r3, r2
 801d6d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801d6dc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801d6e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d6e4:	1ad3      	subs	r3, r2, r3
 801d6e6:	f642 42f8 	movw	r2, #11512	; 0x2cf8
 801d6ea:	fb02 f303 	mul.w	r3, r2, r3
 801d6ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801d6f2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801d6f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801d6fa:	441a      	add	r2, r3
 801d6fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d700:	4981      	ldr	r1, [pc, #516]	; (801d908 <jpeg_idct_14x7+0x844>)
 801d702:	fb01 f303 	mul.w	r3, r1, r3
 801d706:	4413      	add	r3, r2
 801d708:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801d70c:	4413      	add	r3, r2
 801d70e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 801d712:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d716:	f241 5299 	movw	r2, #5529	; 0x1599
 801d71a:	fb02 f203 	mul.w	r2, r2, r3
 801d71e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801d722:	4413      	add	r3, r2
 801d724:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801d728:	4413      	add	r3, r2
 801d72a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 801d72e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801d732:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d736:	1ad3      	subs	r3, r2, r3
 801d738:	035b      	lsls	r3, r3, #13
 801d73a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801d73e:	4413      	add	r3, r2
 801d740:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801d744:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801d748:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801d74c:	4413      	add	r3, r2
 801d74e:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801d750:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801d754:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801d758:	4413      	add	r3, r2
 801d75a:	781a      	ldrb	r2, [r3, #0]
 801d75c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801d760:	701a      	strb	r2, [r3, #0]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801d762:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801d766:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801d76a:	1ad3      	subs	r3, r2, r3
 801d76c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801d76e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801d772:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801d776:	441a      	add	r2, r3
 801d778:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801d77c:	330d      	adds	r3, #13
 801d77e:	7812      	ldrb	r2, [r2, #0]
 801d780:	701a      	strb	r2, [r3, #0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801d782:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801d786:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801d78a:	4413      	add	r3, r2
 801d78c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801d78e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801d792:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801d796:	441a      	add	r2, r3
 801d798:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801d79c:	3301      	adds	r3, #1
 801d79e:	7812      	ldrb	r2, [r2, #0]
 801d7a0:	701a      	strb	r2, [r3, #0]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801d7a2:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801d7a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801d7aa:	1ad3      	subs	r3, r2, r3
 801d7ac:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801d7ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801d7b2:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801d7b6:	441a      	add	r2, r3
 801d7b8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801d7bc:	330c      	adds	r3, #12
 801d7be:	7812      	ldrb	r2, [r2, #0]
 801d7c0:	701a      	strb	r2, [r3, #0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801d7c2:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 801d7c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d7ca:	4413      	add	r3, r2
 801d7cc:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801d7ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801d7d2:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801d7d6:	441a      	add	r2, r3
 801d7d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801d7dc:	3302      	adds	r3, #2
 801d7de:	7812      	ldrb	r2, [r2, #0]
 801d7e0:	701a      	strb	r2, [r3, #0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801d7e2:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 801d7e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801d7ea:	1ad3      	subs	r3, r2, r3
 801d7ec:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801d7ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801d7f2:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801d7f6:	441a      	add	r2, r3
 801d7f8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801d7fc:	330b      	adds	r3, #11
 801d7fe:	7812      	ldrb	r2, [r2, #0]
 801d800:	701a      	strb	r2, [r3, #0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801d802:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801d806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801d80a:	4413      	add	r3, r2
 801d80c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801d80e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801d812:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801d816:	441a      	add	r2, r3
 801d818:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801d81c:	3303      	adds	r3, #3
 801d81e:	7812      	ldrb	r2, [r2, #0]
 801d820:	701a      	strb	r2, [r3, #0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801d822:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801d826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801d82a:	1ad3      	subs	r3, r2, r3
 801d82c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801d82e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801d832:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801d836:	441a      	add	r2, r3
 801d838:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801d83c:	330a      	adds	r3, #10
 801d83e:	7812      	ldrb	r2, [r2, #0]
 801d840:	701a      	strb	r2, [r3, #0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801d842:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801d846:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801d84a:	4413      	add	r3, r2
 801d84c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801d84e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801d852:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801d856:	441a      	add	r2, r3
 801d858:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801d85c:	3304      	adds	r3, #4
 801d85e:	7812      	ldrb	r2, [r2, #0]
 801d860:	701a      	strb	r2, [r3, #0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801d862:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801d866:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801d86a:	1ad3      	subs	r3, r2, r3
 801d86c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801d86e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801d872:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801d876:	441a      	add	r2, r3
 801d878:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801d87c:	3309      	adds	r3, #9
 801d87e:	7812      	ldrb	r2, [r2, #0]
 801d880:	701a      	strb	r2, [r3, #0]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801d882:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801d886:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801d88a:	4413      	add	r3, r2
 801d88c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801d88e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801d892:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801d896:	441a      	add	r2, r3
 801d898:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801d89c:	3305      	adds	r3, #5
 801d89e:	7812      	ldrb	r2, [r2, #0]
 801d8a0:	701a      	strb	r2, [r3, #0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801d8a2:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801d8a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801d8aa:	1ad3      	subs	r3, r2, r3
 801d8ac:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801d8ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801d8b2:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801d8b6:	441a      	add	r2, r3
 801d8b8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801d8bc:	3308      	adds	r3, #8
 801d8be:	7812      	ldrb	r2, [r2, #0]
 801d8c0:	701a      	strb	r2, [r3, #0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801d8c2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801d8c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801d8ca:	4413      	add	r3, r2
 801d8cc:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801d8ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801d8d2:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801d8d6:	441a      	add	r2, r3
 801d8d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801d8dc:	3306      	adds	r3, #6
 801d8de:	7812      	ldrb	r2, [r2, #0]
 801d8e0:	701a      	strb	r2, [r3, #0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801d8e2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801d8e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801d8ea:	1ad3      	subs	r3, r2, r3
 801d8ec:	149b      	asrs	r3, r3, #18
 801d8ee:	e00d      	b.n	801d90c <jpeg_idct_14x7+0x848>
 801d8f0:	ffffc8fc 	.word	0xffffc8fc
 801d8f4:	ffffd3e1 	.word	0xffffd3e1
 801d8f8:	ffffdbf0 	.word	0xffffdbf0
 801d8fc:	ffffde0b 	.word	0xffffde0b
 801d900:	fffff26e 	.word	0xfffff26e
 801d904:	ffffb409 	.word	0xffffb409
 801d908:	ffffc9e6 	.word	0xffffc9e6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801d90c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801d910:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801d914:	441a      	add	r2, r3
 801d916:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801d91a:	3307      	adds	r3, #7
 801d91c:	7812      	ldrb	r2, [r2, #0]
 801d91e:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 801d920:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801d924:	3320      	adds	r3, #32
 801d926:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  for (ctr = 0; ctr < 7; ctr++) {
 801d92a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801d92e:	3301      	adds	r3, #1
 801d930:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 801d934:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801d938:	2b06      	cmp	r3, #6
 801d93a:	f77f ad79 	ble.w	801d430 <jpeg_idct_14x7+0x36c>
  }
}
 801d93e:	bf00      	nop
 801d940:	bf00      	nop
 801d942:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 801d946:	46bd      	mov	sp, r7
 801d948:	bc90      	pop	{r4, r7}
 801d94a:	4770      	bx	lr

0801d94c <jpeg_idct_12x6>:

GLOBAL(void)
jpeg_idct_12x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801d94c:	b490      	push	{r4, r7}
 801d94e:	b0ca      	sub	sp, #296	; 0x128
 801d950:	af00      	add	r7, sp, #0
 801d952:	f107 040c 	add.w	r4, r7, #12
 801d956:	6020      	str	r0, [r4, #0]
 801d958:	f107 0008 	add.w	r0, r7, #8
 801d95c:	6001      	str	r1, [r0, #0]
 801d95e:	1d39      	adds	r1, r7, #4
 801d960:	600a      	str	r2, [r1, #0]
 801d962:	463a      	mov	r2, r7
 801d964:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801d966:	f107 030c 	add.w	r3, r7, #12
 801d96a:	681b      	ldr	r3, [r3, #0]
 801d96c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801d970:	3380      	adds	r3, #128	; 0x80
 801d972:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
 801d976:	1d3b      	adds	r3, r7, #4
 801d978:	681b      	ldr	r3, [r3, #0]
 801d97a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801d97e:	f107 0308 	add.w	r3, r7, #8
 801d982:	681b      	ldr	r3, [r3, #0]
 801d984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d986:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  wsptr = workspace;
 801d98a:	f107 0310 	add.w	r3, r7, #16
 801d98e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801d992:	2300      	movs	r3, #0
 801d994:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 801d998:	e105      	b.n	801dba6 <jpeg_idct_12x6+0x25a>
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801d99a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801d99e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d9a2:	461a      	mov	r2, r3
 801d9a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801d9a8:	681b      	ldr	r3, [r3, #0]
 801d9aa:	fb03 f302 	mul.w	r3, r3, r2
 801d9ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    tmp10 <<= CONST_BITS;
 801d9b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d9b6:	035b      	lsls	r3, r3, #13
 801d9b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    /* Add fudge factor here for final descale. */
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 801d9bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d9c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801d9c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801d9c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801d9cc:	3340      	adds	r3, #64	; 0x40
 801d9ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d9d2:	461a      	mov	r2, r3
 801d9d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801d9d8:	3380      	adds	r3, #128	; 0x80
 801d9da:	681b      	ldr	r3, [r3, #0]
 801d9dc:	fb03 f302 	mul.w	r3, r3, r2
 801d9e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 801d9e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801d9e8:	f241 62a1 	movw	r2, #5793	; 0x16a1
 801d9ec:	fb02 f303 	mul.w	r3, r2, r3
 801d9f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    tmp11 = tmp10 + tmp20;
 801d9f4:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801d9f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801d9fc:	4413      	add	r3, r2
 801d9fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
 801da02:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801da06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801da0a:	1ad2      	subs	r2, r2, r3
 801da0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801da10:	1ad3      	subs	r3, r2, r3
 801da12:	12db      	asrs	r3, r3, #11
 801da14:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801da18:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801da1c:	3320      	adds	r3, #32
 801da1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801da22:	461a      	mov	r2, r3
 801da24:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801da28:	3340      	adds	r3, #64	; 0x40
 801da2a:	681b      	ldr	r3, [r3, #0]
 801da2c:	fb03 f302 	mul.w	r3, r3, r2
 801da30:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 801da34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801da38:	f242 7231 	movw	r2, #10033	; 0x2731
 801da3c:	fb02 f303 	mul.w	r3, r2, r3
 801da40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    tmp20 = tmp11 + tmp10;
 801da44:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801da48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801da4c:	4413      	add	r3, r2
 801da4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    tmp22 = tmp11 - tmp10;
 801da52:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801da56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801da5a:	1ad3      	subs	r3, r2, r3
 801da5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801da60:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801da64:	3310      	adds	r3, #16
 801da66:	f9b3 3000 	ldrsh.w	r3, [r3]
 801da6a:	461a      	mov	r2, r3
 801da6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801da70:	3320      	adds	r3, #32
 801da72:	681b      	ldr	r3, [r3, #0]
 801da74:	fb03 f302 	mul.w	r3, r3, r2
 801da78:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801da7c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801da80:	3330      	adds	r3, #48	; 0x30
 801da82:	f9b3 3000 	ldrsh.w	r3, [r3]
 801da86:	461a      	mov	r2, r3
 801da88:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801da8c:	3360      	adds	r3, #96	; 0x60
 801da8e:	681b      	ldr	r3, [r3, #0]
 801da90:	fb03 f302 	mul.w	r3, r3, r2
 801da94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801da98:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801da9c:	3350      	adds	r3, #80	; 0x50
 801da9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801daa2:	461a      	mov	r2, r3
 801daa4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801daa8:	33a0      	adds	r3, #160	; 0xa0
 801daaa:	681b      	ldr	r3, [r3, #0]
 801daac:	fb03 f302 	mul.w	r3, r3, r2
 801dab0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801dab4:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801dab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801dabc:	4413      	add	r3, r2
 801dabe:	f640 32b6 	movw	r2, #2998	; 0xbb6
 801dac2:	fb02 f303 	mul.w	r3, r2, r3
 801dac6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 801daca:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801dace:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801dad2:	4413      	add	r3, r2
 801dad4:	035b      	lsls	r3, r3, #13
 801dad6:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801dada:	4413      	add	r3, r2
 801dadc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 801dae0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801dae4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801dae8:	1ad3      	subs	r3, r2, r3
 801daea:	035b      	lsls	r3, r3, #13
 801daec:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801daf0:	4413      	add	r3, r2
 801daf2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 801daf6:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801dafa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801dafe:	1ad2      	subs	r2, r2, r3
 801db00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801db04:	1ad3      	subs	r3, r2, r3
 801db06:	009b      	lsls	r3, r3, #2
 801db08:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801db0c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801db10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801db14:	4413      	add	r3, r2
 801db16:	12da      	asrs	r2, r3, #11
 801db18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801db1c:	601a      	str	r2, [r3, #0]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801db1e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801db22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801db26:	1ad2      	subs	r2, r2, r3
 801db28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801db2c:	33a0      	adds	r3, #160	; 0xa0
 801db2e:	12d2      	asrs	r2, r2, #11
 801db30:	601a      	str	r2, [r3, #0]
    wsptr[8*1] = (int) (tmp21 + tmp11);
 801db32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801db36:	3320      	adds	r3, #32
 801db38:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 801db3c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801db40:	440a      	add	r2, r1
 801db42:	601a      	str	r2, [r3, #0]
    wsptr[8*4] = (int) (tmp21 - tmp11);
 801db44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801db48:	3380      	adds	r3, #128	; 0x80
 801db4a:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 801db4e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801db52:	1a8a      	subs	r2, r1, r2
 801db54:	601a      	str	r2, [r3, #0]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801db56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801db5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801db5e:	441a      	add	r2, r3
 801db60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801db64:	3340      	adds	r3, #64	; 0x40
 801db66:	12d2      	asrs	r2, r2, #11
 801db68:	601a      	str	r2, [r3, #0]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801db6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801db6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801db72:	1ad2      	subs	r2, r2, r3
 801db74:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801db78:	3360      	adds	r3, #96	; 0x60
 801db7a:	12d2      	asrs	r2, r2, #11
 801db7c:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801db7e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801db82:	3301      	adds	r3, #1
 801db84:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 801db88:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801db8c:	3302      	adds	r3, #2
 801db8e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801db92:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801db96:	3304      	adds	r3, #4
 801db98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801db9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801dba0:	3304      	adds	r3, #4
 801dba2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801dba6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801dbaa:	2b07      	cmp	r3, #7
 801dbac:	f77f aef5 	ble.w	801d99a <jpeg_idct_12x6+0x4e>
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  wsptr = workspace;
 801dbb0:	f107 0310 	add.w	r3, r7, #16
 801dbb4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  for (ctr = 0; ctr < 6; ctr++) {
 801dbb8:	2300      	movs	r3, #0
 801dbba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 801dbbe:	e21a      	b.n	801dff6 <jpeg_idct_12x6+0x6aa>
    outptr = output_buf[ctr] + output_col;
 801dbc0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801dbc4:	009b      	lsls	r3, r3, #2
 801dbc6:	463a      	mov	r2, r7
 801dbc8:	6812      	ldr	r2, [r2, #0]
 801dbca:	4413      	add	r3, r2
 801dbcc:	681a      	ldr	r2, [r3, #0]
 801dbce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801dbd2:	4413      	add	r3, r2
 801dbd4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    /* Even part */

    /* Add fudge factor here for final descale. */
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801dbd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801dbdc:	681b      	ldr	r3, [r3, #0]
 801dbde:	3310      	adds	r3, #16
 801dbe0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    z3 <<= CONST_BITS;
 801dbe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801dbe8:	035b      	lsls	r3, r3, #13
 801dbea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

    z4 = (INT32) wsptr[4];
 801dbee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801dbf2:	3310      	adds	r3, #16
 801dbf4:	681b      	ldr	r3, [r3, #0]
 801dbf6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801dbfa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801dbfe:	f242 7231 	movw	r2, #10033	; 0x2731
 801dc02:	fb02 f303 	mul.w	r3, r2, r3
 801dc06:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

    tmp10 = z3 + z4;
 801dc0a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801dc0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801dc12:	4413      	add	r3, r2
 801dc14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    tmp11 = z3 - z4;
 801dc18:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801dc1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801dc20:	1ad3      	subs	r3, r2, r3
 801dc22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    z1 = (INT32) wsptr[2];
 801dc26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801dc2a:	3308      	adds	r3, #8
 801dc2c:	681b      	ldr	r3, [r3, #0]
 801dc2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 801dc32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801dc36:	f642 32b6 	movw	r2, #11190	; 0x2bb6
 801dc3a:	fb02 f303 	mul.w	r3, r2, r3
 801dc3e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    z1 <<= CONST_BITS;
 801dc42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801dc46:	035b      	lsls	r3, r3, #13
 801dc48:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    z2 = (INT32) wsptr[6];
 801dc4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801dc50:	3318      	adds	r3, #24
 801dc52:	681b      	ldr	r3, [r3, #0]
 801dc54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    z2 <<= CONST_BITS;
 801dc58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801dc5c:	035b      	lsls	r3, r3, #13
 801dc5e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

    tmp12 = z1 - z2;
 801dc62:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801dc66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801dc6a:	1ad3      	subs	r3, r2, r3
 801dc6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    tmp21 = z3 + tmp12;
 801dc70:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801dc74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801dc78:	4413      	add	r3, r2
 801dc7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    tmp24 = z3 - tmp12;
 801dc7e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801dc82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801dc86:	1ad3      	subs	r3, r2, r3
 801dc88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

    tmp12 = z4 + z2;
 801dc8c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801dc90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801dc94:	4413      	add	r3, r2
 801dc96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    tmp20 = tmp10 + tmp12;
 801dc9a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801dc9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801dca2:	4413      	add	r3, r2
 801dca4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    tmp25 = tmp10 - tmp12;
 801dca8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801dcac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801dcb0:	1ad3      	subs	r3, r2, r3
 801dcb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    tmp12 = z4 - z1 - z2;
 801dcb6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801dcba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801dcbe:	1ad2      	subs	r2, r2, r3
 801dcc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801dcc4:	1ad3      	subs	r3, r2, r3
 801dcc6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    tmp22 = tmp11 + tmp12;
 801dcca:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801dcce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801dcd2:	4413      	add	r3, r2
 801dcd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    tmp23 = tmp11 - tmp12;
 801dcd8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801dcdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801dce0:	1ad3      	subs	r3, r2, r3
 801dce2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

    /* Odd part */

    z1 = (INT32) wsptr[1];
 801dce6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801dcea:	3304      	adds	r3, #4
 801dcec:	681b      	ldr	r3, [r3, #0]
 801dcee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    z2 = (INT32) wsptr[3];
 801dcf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801dcf6:	330c      	adds	r3, #12
 801dcf8:	681b      	ldr	r3, [r3, #0]
 801dcfa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    z3 = (INT32) wsptr[5];
 801dcfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801dd02:	3314      	adds	r3, #20
 801dd04:	681b      	ldr	r3, [r3, #0]
 801dd06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    z4 = (INT32) wsptr[7];
 801dd0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801dd0e:	331c      	adds	r3, #28
 801dd10:	681b      	ldr	r3, [r3, #0]
 801dd12:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801dd16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801dd1a:	f642 12cf 	movw	r2, #10703	; 0x29cf
 801dd1e:	fb02 f303 	mul.w	r3, r2, r3
 801dd22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801dd26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801dd2a:	4ab9      	ldr	r2, [pc, #740]	; (801e010 <jpeg_idct_12x6+0x6c4>)
 801dd2c:	fb02 f303 	mul.w	r3, r2, r3
 801dd30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    tmp10 = z1 + z3;
 801dd34:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801dd38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801dd3c:	4413      	add	r3, r2
 801dd3e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801dd42:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801dd46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801dd4a:	4413      	add	r3, r2
 801dd4c:	f641 328d 	movw	r2, #7053	; 0x1b8d
 801dd50:	fb02 f303 	mul.w	r3, r2, r3
 801dd54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801dd58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801dd5c:	f640 025b 	movw	r2, #2139	; 0x85b
 801dd60:	fb02 f303 	mul.w	r3, r2, r3
 801dd64:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801dd68:	4413      	add	r3, r2
 801dd6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801dd6e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801dd72:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801dd76:	18d1      	adds	r1, r2, r3
 801dd78:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801dd7c:	4613      	mov	r3, r2
 801dd7e:	00db      	lsls	r3, r3, #3
 801dd80:	4413      	add	r3, r2
 801dd82:	021a      	lsls	r2, r3, #8
 801dd84:	1ad3      	subs	r3, r2, r3
 801dd86:	440b      	add	r3, r1
 801dd88:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801dd8c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801dd90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801dd94:	4413      	add	r3, r2
 801dd96:	4a9f      	ldr	r2, [pc, #636]	; (801e014 <jpeg_idct_12x6+0x6c8>)
 801dd98:	fb02 f303 	mul.w	r3, r2, r3
 801dd9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801dda0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801dda4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801dda8:	441a      	add	r2, r3
 801ddaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801ddae:	499a      	ldr	r1, [pc, #616]	; (801e018 <jpeg_idct_12x6+0x6cc>)
 801ddb0:	fb01 f303 	mul.w	r3, r1, r3
 801ddb4:	4413      	add	r3, r2
 801ddb6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801ddba:	4413      	add	r3, r2
 801ddbc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801ddc0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801ddc4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801ddc8:	1ad2      	subs	r2, r2, r3
 801ddca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ddce:	f243 21c6 	movw	r1, #12998	; 0x32c6
 801ddd2:	fb01 f303 	mul.w	r3, r1, r3
 801ddd6:	4413      	add	r3, r2
 801ddd8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801dddc:	4413      	add	r3, r2
 801ddde:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801dde2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801dde6:	4a8d      	ldr	r2, [pc, #564]	; (801e01c <jpeg_idct_12x6+0x6d0>)
 801dde8:	fb02 f203 	mul.w	r2, r2, r3
 801ddec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801ddf0:	441a      	add	r2, r3
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */
 801ddf2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ddf6:	498a      	ldr	r1, [pc, #552]	; (801e020 <jpeg_idct_12x6+0x6d4>)
 801ddf8:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801ddfc:	4413      	add	r3, r2
 801ddfe:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801de02:	4413      	add	r3, r2
 801de04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

    z1 -= z4;
 801de08:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801de0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801de10:	1ad3      	subs	r3, r2, r3
 801de12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    z2 -= z3;
 801de16:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 801de1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801de1e:	1ad3      	subs	r3, r2, r3
 801de20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801de24:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801de28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801de2c:	4413      	add	r3, r2
 801de2e:	f241 1251 	movw	r2, #4433	; 0x1151
 801de32:	fb02 f303 	mul.w	r3, r2, r3
 801de36:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 801de3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801de3e:	f641 027e 	movw	r2, #6270	; 0x187e
 801de42:	fb02 f303 	mul.w	r3, r2, r3
 801de46:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801de4a:	4413      	add	r3, r2
 801de4c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 801de50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801de54:	4a73      	ldr	r2, [pc, #460]	; (801e024 <jpeg_idct_12x6+0x6d8>)
 801de56:	fb02 f303 	mul.w	r3, r2, r3
 801de5a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801de5e:	4413      	add	r3, r2
 801de60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801de64:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801de68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801de6c:	4413      	add	r3, r2
 801de6e:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801de70:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801de74:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801de78:	4413      	add	r3, r2
 801de7a:	781a      	ldrb	r2, [r3, #0]
 801de7c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801de80:	701a      	strb	r2, [r3, #0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801de82:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801de86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801de8a:	1ad3      	subs	r3, r2, r3
 801de8c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801de8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801de92:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801de96:	441a      	add	r2, r3
 801de98:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801de9c:	330b      	adds	r3, #11
 801de9e:	7812      	ldrb	r2, [r2, #0]
 801dea0:	701a      	strb	r2, [r3, #0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801dea2:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801dea6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801deaa:	4413      	add	r3, r2
 801deac:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801deae:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801deb2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801deb6:	441a      	add	r2, r3
 801deb8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801debc:	3301      	adds	r3, #1
 801debe:	7812      	ldrb	r2, [r2, #0]
 801dec0:	701a      	strb	r2, [r3, #0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801dec2:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801dec6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801deca:	1ad3      	subs	r3, r2, r3
 801decc:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801dece:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801ded2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801ded6:	441a      	add	r2, r3
 801ded8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801dedc:	330a      	adds	r3, #10
 801dede:	7812      	ldrb	r2, [r2, #0]
 801dee0:	701a      	strb	r2, [r3, #0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801dee2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801dee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801deea:	4413      	add	r3, r2
 801deec:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801deee:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801def2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801def6:	441a      	add	r2, r3
 801def8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801defc:	3302      	adds	r3, #2
 801defe:	7812      	ldrb	r2, [r2, #0]
 801df00:	701a      	strb	r2, [r3, #0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801df02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801df06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801df0a:	1ad3      	subs	r3, r2, r3
 801df0c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801df0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801df12:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801df16:	441a      	add	r2, r3
 801df18:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801df1c:	3309      	adds	r3, #9
 801df1e:	7812      	ldrb	r2, [r2, #0]
 801df20:	701a      	strb	r2, [r3, #0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801df22:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801df26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801df2a:	4413      	add	r3, r2
 801df2c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801df2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801df32:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801df36:	441a      	add	r2, r3
 801df38:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801df3c:	3303      	adds	r3, #3
 801df3e:	7812      	ldrb	r2, [r2, #0]
 801df40:	701a      	strb	r2, [r3, #0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801df42:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801df46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801df4a:	1ad3      	subs	r3, r2, r3
 801df4c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801df4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801df52:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801df56:	441a      	add	r2, r3
 801df58:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801df5c:	3308      	adds	r3, #8
 801df5e:	7812      	ldrb	r2, [r2, #0]
 801df60:	701a      	strb	r2, [r3, #0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801df62:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801df66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801df6a:	4413      	add	r3, r2
 801df6c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801df6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801df72:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801df76:	441a      	add	r2, r3
 801df78:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801df7c:	3304      	adds	r3, #4
 801df7e:	7812      	ldrb	r2, [r2, #0]
 801df80:	701a      	strb	r2, [r3, #0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801df82:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801df86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801df8a:	1ad3      	subs	r3, r2, r3
 801df8c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801df8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801df92:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801df96:	441a      	add	r2, r3
 801df98:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801df9c:	3307      	adds	r3, #7
 801df9e:	7812      	ldrb	r2, [r2, #0]
 801dfa0:	701a      	strb	r2, [r3, #0]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801dfa2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801dfa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801dfaa:	4413      	add	r3, r2
 801dfac:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801dfae:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801dfb2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801dfb6:	441a      	add	r2, r3
 801dfb8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801dfbc:	3305      	adds	r3, #5
 801dfbe:	7812      	ldrb	r2, [r2, #0]
 801dfc0:	701a      	strb	r2, [r3, #0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801dfc2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801dfc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801dfca:	1ad3      	subs	r3, r2, r3
 801dfcc:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801dfce:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801dfd2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801dfd6:	441a      	add	r2, r3
 801dfd8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801dfdc:	3306      	adds	r3, #6
 801dfde:	7812      	ldrb	r2, [r2, #0]
 801dfe0:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 801dfe2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801dfe6:	3320      	adds	r3, #32
 801dfe8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  for (ctr = 0; ctr < 6; ctr++) {
 801dfec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801dff0:	3301      	adds	r3, #1
 801dff2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 801dff6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801dffa:	2b05      	cmp	r3, #5
 801dffc:	f77f ade0 	ble.w	801dbc0 <jpeg_idct_12x6+0x274>
  }
}
 801e000:	bf00      	nop
 801e002:	bf00      	nop
 801e004:	f507 7794 	add.w	r7, r7, #296	; 0x128
 801e008:	46bd      	mov	sp, r7
 801e00a:	bc90      	pop	{r4, r7}
 801e00c:	4770      	bx	lr
 801e00e:	bf00      	nop
 801e010:	ffffeeaf 	.word	0xffffeeaf
 801e014:	ffffde8b 	.word	0xffffde8b
 801e018:	ffffd0b0 	.word	0xffffd0b0
 801e01c:	ffffea5c 	.word	0xffffea5c
 801e020:	ffffc08c 	.word	0xffffc08c
 801e024:	ffffc4df 	.word	0xffffc4df

0801e028 <jpeg_idct_10x5>:

GLOBAL(void)
jpeg_idct_10x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801e028:	b480      	push	{r7}
 801e02a:	b0c1      	sub	sp, #260	; 0x104
 801e02c:	af00      	add	r7, sp, #0
 801e02e:	60f8      	str	r0, [r7, #12]
 801e030:	60b9      	str	r1, [r7, #8]
 801e032:	607a      	str	r2, [r7, #4]
 801e034:	463a      	mov	r2, r7
 801e036:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801e038:	68fb      	ldr	r3, [r7, #12]
 801e03a:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801e03e:	3380      	adds	r3, #128	; 0x80
 801e040:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  inptr = coef_block;
 801e044:	687b      	ldr	r3, [r7, #4]
 801e046:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801e04a:	68bb      	ldr	r3, [r7, #8]
 801e04c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e04e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  wsptr = workspace;
 801e052:	f107 0310 	add.w	r3, r7, #16
 801e056:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801e05a:	2300      	movs	r3, #0
 801e05c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801e060:	e0e3      	b.n	801e22a <jpeg_idct_10x5+0x202>
    /* Even part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801e062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801e066:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e06a:	461a      	mov	r2, r3
 801e06c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801e070:	681b      	ldr	r3, [r3, #0]
 801e072:	fb03 f302 	mul.w	r3, r3, r2
 801e076:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    tmp12 <<= CONST_BITS;
 801e07a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e07e:	035b      	lsls	r3, r3, #13
 801e080:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 801e084:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e088:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801e08c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801e090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801e094:	3320      	adds	r3, #32
 801e096:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e09a:	461a      	mov	r2, r3
 801e09c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801e0a0:	3340      	adds	r3, #64	; 0x40
 801e0a2:	681b      	ldr	r3, [r3, #0]
 801e0a4:	fb03 f302 	mul.w	r3, r3, r2
 801e0a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801e0ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801e0b0:	3340      	adds	r3, #64	; 0x40
 801e0b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e0b6:	461a      	mov	r2, r3
 801e0b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801e0bc:	3380      	adds	r3, #128	; 0x80
 801e0be:	681b      	ldr	r3, [r3, #0]
 801e0c0:	fb03 f302 	mul.w	r3, r3, r2
 801e0c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 801e0c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801e0cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801e0d0:	4413      	add	r3, r2
 801e0d2:	f641 124c 	movw	r2, #6476	; 0x194c
 801e0d6:	fb02 f303 	mul.w	r3, r2, r3
 801e0da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801e0de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801e0e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801e0e6:	1ad3      	subs	r3, r2, r3
 801e0e8:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 801e0ec:	fb02 f303 	mul.w	r3, r2, r3
 801e0f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    z3 = tmp12 + z2;
 801e0f4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801e0f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801e0fc:	4413      	add	r3, r2
 801e0fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    tmp10 = z3 + z1;
 801e102:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801e106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801e10a:	4413      	add	r3, r2
 801e10c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    tmp11 = z3 - z1;
 801e110:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801e114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801e118:	1ad3      	subs	r3, r2, r3
 801e11a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    tmp12 -= z2 << 2;
 801e11e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801e122:	009b      	lsls	r3, r3, #2
 801e124:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801e128:	1ad3      	subs	r3, r2, r3
 801e12a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801e12e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801e132:	3310      	adds	r3, #16
 801e134:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e138:	461a      	mov	r2, r3
 801e13a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801e13e:	3320      	adds	r3, #32
 801e140:	681b      	ldr	r3, [r3, #0]
 801e142:	fb03 f302 	mul.w	r3, r3, r2
 801e146:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801e14a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801e14e:	3330      	adds	r3, #48	; 0x30
 801e150:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e154:	461a      	mov	r2, r3
 801e156:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801e15a:	3360      	adds	r3, #96	; 0x60
 801e15c:	681b      	ldr	r3, [r3, #0]
 801e15e:	fb03 f302 	mul.w	r3, r3, r2
 801e162:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 801e166:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801e16a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e16e:	4413      	add	r3, r2
 801e170:	f641 229a 	movw	r2, #6810	; 0x1a9a
 801e174:	fb02 f303 	mul.w	r3, r2, r3
 801e178:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 801e17c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801e180:	f241 0271 	movw	r2, #4209	; 0x1071
 801e184:	fb02 f303 	mul.w	r3, r2, r3
 801e188:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801e18c:	4413      	add	r3, r2
 801e18e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 801e192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e196:	4a2b      	ldr	r2, [pc, #172]	; (801e244 <jpeg_idct_10x5+0x21c>)
 801e198:	fb02 f303 	mul.w	r3, r2, r3
 801e19c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801e1a0:	4413      	add	r3, r2
 801e1a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 801e1a6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801e1aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801e1ae:	4413      	add	r3, r2
 801e1b0:	12da      	asrs	r2, r3, #11
 801e1b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801e1b6:	601a      	str	r2, [r3, #0]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 801e1b8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801e1bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801e1c0:	1ad2      	subs	r2, r2, r3
 801e1c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801e1c6:	3380      	adds	r3, #128	; 0x80
 801e1c8:	12d2      	asrs	r2, r2, #11
 801e1ca:	601a      	str	r2, [r3, #0]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 801e1cc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801e1d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801e1d4:	441a      	add	r2, r3
 801e1d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801e1da:	3320      	adds	r3, #32
 801e1dc:	12d2      	asrs	r2, r2, #11
 801e1de:	601a      	str	r2, [r3, #0]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 801e1e0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801e1e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801e1e8:	1ad2      	subs	r2, r2, r3
 801e1ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801e1ee:	3360      	adds	r3, #96	; 0x60
 801e1f0:	12d2      	asrs	r2, r2, #11
 801e1f2:	601a      	str	r2, [r3, #0]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 801e1f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801e1f8:	3340      	adds	r3, #64	; 0x40
 801e1fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801e1fe:	12d2      	asrs	r2, r2, #11
 801e200:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801e202:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801e206:	3301      	adds	r3, #1
 801e208:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801e20c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801e210:	3302      	adds	r3, #2
 801e212:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801e216:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801e21a:	3304      	adds	r3, #4
 801e21c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801e220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801e224:	3304      	adds	r3, #4
 801e226:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801e22a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801e22e:	2b07      	cmp	r3, #7
 801e230:	f77f af17 	ble.w	801e062 <jpeg_idct_10x5+0x3a>
  }

  /* Pass 2: process 5 rows from work array, store into output array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  wsptr = workspace;
 801e234:	f107 0310 	add.w	r3, r7, #16
 801e238:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  for (ctr = 0; ctr < 5; ctr++) {
 801e23c:	2300      	movs	r3, #0
 801e23e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801e242:	e1d0      	b.n	801e5e6 <jpeg_idct_10x5+0x5be>
 801e244:	ffffba5c 	.word	0xffffba5c
    outptr = output_buf[ctr] + output_col;
 801e248:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801e24c:	009b      	lsls	r3, r3, #2
 801e24e:	463a      	mov	r2, r7
 801e250:	6812      	ldr	r2, [r2, #0]
 801e252:	4413      	add	r3, r2
 801e254:	681a      	ldr	r2, [r3, #0]
 801e256:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801e25a:	4413      	add	r3, r2
 801e25c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

    /* Even part */

    /* Add fudge factor here for final descale. */
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801e260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801e264:	681b      	ldr	r3, [r3, #0]
 801e266:	3310      	adds	r3, #16
 801e268:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    z3 <<= CONST_BITS;
 801e26c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e270:	035b      	lsls	r3, r3, #13
 801e272:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    z4 = (INT32) wsptr[4];
 801e276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801e27a:	3310      	adds	r3, #16
 801e27c:	681b      	ldr	r3, [r3, #0]
 801e27e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 801e282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e286:	f242 429d 	movw	r2, #9373	; 0x249d
 801e28a:	fb02 f303 	mul.w	r3, r2, r3
 801e28e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 801e292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e296:	f640 52fc 	movw	r2, #3580	; 0xdfc
 801e29a:	fb02 f303 	mul.w	r3, r2, r3
 801e29e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    tmp10 = z3 + z1;
 801e2a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801e2a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801e2aa:	4413      	add	r3, r2
 801e2ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    tmp11 = z3 - z2;
 801e2b0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801e2b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801e2b8:	1ad3      	subs	r3, r2, r3
 801e2ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 801e2be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801e2c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801e2c6:	1ad3      	subs	r3, r2, r3
 801e2c8:	005b      	lsls	r3, r3, #1
 801e2ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801e2ce:	1ad3      	subs	r3, r2, r3
 801e2d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

    z2 = (INT32) wsptr[2];
 801e2d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801e2d8:	3308      	adds	r3, #8
 801e2da:	681b      	ldr	r3, [r3, #0]
 801e2dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    z3 = (INT32) wsptr[6];
 801e2e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801e2e4:	3318      	adds	r3, #24
 801e2e6:	681b      	ldr	r3, [r3, #0]
 801e2e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801e2ec:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801e2f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e2f4:	4413      	add	r3, r2
 801e2f6:	f641 229a 	movw	r2, #6810	; 0x1a9a
 801e2fa:	fb02 f303 	mul.w	r3, r2, r3
 801e2fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 801e302:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801e306:	f241 0271 	movw	r2, #4209	; 0x1071
 801e30a:	fb02 f303 	mul.w	r3, r2, r3
 801e30e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801e312:	4413      	add	r3, r2
 801e314:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 801e318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e31c:	4ab8      	ldr	r2, [pc, #736]	; (801e600 <jpeg_idct_10x5+0x5d8>)
 801e31e:	fb02 f303 	mul.w	r3, r2, r3
 801e322:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801e326:	4413      	add	r3, r2
 801e328:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    tmp20 = tmp10 + tmp12;
 801e32c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801e330:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e334:	4413      	add	r3, r2
 801e336:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    tmp24 = tmp10 - tmp12;
 801e33a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801e33e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e342:	1ad3      	subs	r3, r2, r3
 801e344:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    tmp21 = tmp11 + tmp13;
 801e348:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801e34c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801e350:	4413      	add	r3, r2
 801e352:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    tmp23 = tmp11 - tmp13;
 801e356:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801e35a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801e35e:	1ad3      	subs	r3, r2, r3
 801e360:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

    /* Odd part */

    z1 = (INT32) wsptr[1];
 801e364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801e368:	3304      	adds	r3, #4
 801e36a:	681b      	ldr	r3, [r3, #0]
 801e36c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    z2 = (INT32) wsptr[3];
 801e370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801e374:	330c      	adds	r3, #12
 801e376:	681b      	ldr	r3, [r3, #0]
 801e378:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    z3 = (INT32) wsptr[5];
 801e37c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801e380:	3314      	adds	r3, #20
 801e382:	681b      	ldr	r3, [r3, #0]
 801e384:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    z3 <<= CONST_BITS;
 801e388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e38c:	035b      	lsls	r3, r3, #13
 801e38e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    z4 = (INT32) wsptr[7];
 801e392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801e396:	331c      	adds	r3, #28
 801e398:	681b      	ldr	r3, [r3, #0]
 801e39a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    tmp11 = z2 + z4;
 801e39e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801e3a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e3a6:	4413      	add	r3, r2
 801e3a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    tmp13 = z2 - z4;
 801e3ac:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801e3b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e3b4:	1ad3      	subs	r3, r2, r3
 801e3b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 801e3ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801e3be:	f640 12e3 	movw	r2, #2531	; 0x9e3
 801e3c2:	fb02 f303 	mul.w	r3, r2, r3
 801e3c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 801e3ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801e3ce:	f641 626f 	movw	r2, #7791	; 0x1e6f
 801e3d2:	fb02 f303 	mul.w	r3, r2, r3
 801e3d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    z4 = z3 + tmp12;
 801e3da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801e3de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e3e2:	4413      	add	r3, r2
 801e3e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 801e3e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801e3ec:	f642 42b3 	movw	r2, #11443	; 0x2cb3
 801e3f0:	fb02 f203 	mul.w	r2, r2, r3
 801e3f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801e3f8:	4413      	add	r3, r2
 801e3fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801e3fe:	4413      	add	r3, r2
 801e400:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801e404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801e408:	f240 7214 	movw	r2, #1812	; 0x714
 801e40c:	fb02 f203 	mul.w	r2, r2, r3
 801e410:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801e414:	1ad3      	subs	r3, r2, r3
 801e416:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801e41a:	4413      	add	r3, r2
 801e41c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801e420:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801e424:	f241 22cf 	movw	r2, #4815	; 0x12cf
 801e428:	fb02 f303 	mul.w	r3, r2, r3
 801e42c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 801e430:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801e434:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e438:	1ad2      	subs	r2, r2, r3
 801e43a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801e43e:	031b      	lsls	r3, r3, #12
 801e440:	1ad3      	subs	r3, r2, r3
 801e442:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 801e446:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801e44a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801e44e:	1ad3      	subs	r3, r2, r3
 801e450:	035a      	lsls	r2, r3, #13
 801e452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e456:	1ad3      	subs	r3, r2, r3
 801e458:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801e45c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801e460:	f642 0253 	movw	r2, #10323	; 0x2853
 801e464:	fb02 f203 	mul.w	r2, r2, r3
 801e468:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801e46c:	1ad2      	subs	r2, r2, r3
 801e46e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e472:	1ad3      	subs	r3, r2, r3
 801e474:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801e478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801e47c:	f241 428c 	movw	r2, #5260	; 0x148c
 801e480:	fb02 f203 	mul.w	r2, r2, r3
 801e484:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801e488:	1ad3      	subs	r3, r2, r3
 801e48a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801e48e:	4413      	add	r3, r2
 801e490:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801e494:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801e498:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801e49c:	4413      	add	r3, r2
 801e49e:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801e4a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801e4a4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801e4a8:	4413      	add	r3, r2
 801e4aa:	781a      	ldrb	r2, [r3, #0]
 801e4ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801e4b0:	701a      	strb	r2, [r3, #0]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801e4b2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801e4b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801e4ba:	1ad3      	subs	r3, r2, r3
 801e4bc:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801e4be:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801e4c2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801e4c6:	441a      	add	r2, r3
 801e4c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801e4cc:	3309      	adds	r3, #9
 801e4ce:	7812      	ldrb	r2, [r2, #0]
 801e4d0:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801e4d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801e4d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801e4da:	4413      	add	r3, r2
 801e4dc:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801e4de:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801e4e2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801e4e6:	441a      	add	r2, r3
 801e4e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801e4ec:	3301      	adds	r3, #1
 801e4ee:	7812      	ldrb	r2, [r2, #0]
 801e4f0:	701a      	strb	r2, [r3, #0]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801e4f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801e4f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801e4fa:	1ad3      	subs	r3, r2, r3
 801e4fc:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801e4fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801e502:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801e506:	441a      	add	r2, r3
 801e508:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801e50c:	3308      	adds	r3, #8
 801e50e:	7812      	ldrb	r2, [r2, #0]
 801e510:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801e512:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801e516:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e51a:	4413      	add	r3, r2
 801e51c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801e51e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801e522:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801e526:	441a      	add	r2, r3
 801e528:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801e52c:	3302      	adds	r3, #2
 801e52e:	7812      	ldrb	r2, [r2, #0]
 801e530:	701a      	strb	r2, [r3, #0]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801e532:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801e536:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e53a:	1ad3      	subs	r3, r2, r3
 801e53c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801e53e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801e542:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801e546:	441a      	add	r2, r3
 801e548:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801e54c:	3307      	adds	r3, #7
 801e54e:	7812      	ldrb	r2, [r2, #0]
 801e550:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801e552:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801e556:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801e55a:	4413      	add	r3, r2
 801e55c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801e55e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801e562:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801e566:	441a      	add	r2, r3
 801e568:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801e56c:	3303      	adds	r3, #3
 801e56e:	7812      	ldrb	r2, [r2, #0]
 801e570:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801e572:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801e576:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801e57a:	1ad3      	subs	r3, r2, r3
 801e57c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801e57e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801e582:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801e586:	441a      	add	r2, r3
 801e588:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801e58c:	3306      	adds	r3, #6
 801e58e:	7812      	ldrb	r2, [r2, #0]
 801e590:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801e592:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801e596:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801e59a:	4413      	add	r3, r2
 801e59c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801e59e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801e5a2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801e5a6:	441a      	add	r2, r3
 801e5a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801e5ac:	3304      	adds	r3, #4
 801e5ae:	7812      	ldrb	r2, [r2, #0]
 801e5b0:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801e5b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801e5b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801e5ba:	1ad3      	subs	r3, r2, r3
 801e5bc:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801e5be:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801e5c2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801e5c6:	441a      	add	r2, r3
 801e5c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801e5cc:	3305      	adds	r3, #5
 801e5ce:	7812      	ldrb	r2, [r2, #0]
 801e5d0:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 801e5d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801e5d6:	3320      	adds	r3, #32
 801e5d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  for (ctr = 0; ctr < 5; ctr++) {
 801e5dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801e5e0:	3301      	adds	r3, #1
 801e5e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801e5e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801e5ea:	2b04      	cmp	r3, #4
 801e5ec:	f77f ae2c 	ble.w	801e248 <jpeg_idct_10x5+0x220>
  }
}
 801e5f0:	bf00      	nop
 801e5f2:	bf00      	nop
 801e5f4:	f507 7782 	add.w	r7, r7, #260	; 0x104
 801e5f8:	46bd      	mov	sp, r7
 801e5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5fe:	4770      	bx	lr
 801e600:	ffffba5c 	.word	0xffffba5c

0801e604 <jpeg_idct_8x4>:

GLOBAL(void)
jpeg_idct_8x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801e604:	b480      	push	{r7}
 801e606:	b0b7      	sub	sp, #220	; 0xdc
 801e608:	af00      	add	r7, sp, #0
 801e60a:	60f8      	str	r0, [r7, #12]
 801e60c:	60b9      	str	r1, [r7, #8]
 801e60e:	607a      	str	r2, [r7, #4]
 801e610:	603b      	str	r3, [r7, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801e612:	68fb      	ldr	r3, [r7, #12]
 801e614:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801e618:	3380      	adds	r3, #128	; 0x80
 801e61a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  inptr = coef_block;
 801e61e:	687b      	ldr	r3, [r7, #4]
 801e620:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801e624:	68bb      	ldr	r3, [r7, #8]
 801e626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e628:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  wsptr = workspace;
 801e62c:	f107 0314 	add.w	r3, r7, #20
 801e630:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801e634:	2300      	movs	r3, #0
 801e636:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e63a:	e0a4      	b.n	801e786 <jpeg_idct_8x4+0x182>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801e63c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801e640:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e644:	461a      	mov	r2, r3
 801e646:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801e64a:	681b      	ldr	r3, [r3, #0]
 801e64c:	fb03 f302 	mul.w	r3, r3, r2
 801e650:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801e654:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801e658:	3320      	adds	r3, #32
 801e65a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e65e:	461a      	mov	r2, r3
 801e660:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801e664:	3340      	adds	r3, #64	; 0x40
 801e666:	681b      	ldr	r3, [r3, #0]
 801e668:	fb03 f302 	mul.w	r3, r3, r2
 801e66c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 801e670:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801e674:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801e678:	4413      	add	r3, r2
 801e67a:	009b      	lsls	r3, r3, #2
 801e67c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 801e680:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801e684:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801e688:	1ad3      	subs	r3, r2, r3
 801e68a:	009b      	lsls	r3, r3, #2
 801e68c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Odd part */
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801e690:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801e694:	3310      	adds	r3, #16
 801e696:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e69a:	461a      	mov	r2, r3
 801e69c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801e6a0:	3320      	adds	r3, #32
 801e6a2:	681b      	ldr	r3, [r3, #0]
 801e6a4:	fb03 f302 	mul.w	r3, r3, r2
 801e6a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801e6ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801e6b0:	3330      	adds	r3, #48	; 0x30
 801e6b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e6b6:	461a      	mov	r2, r3
 801e6b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801e6bc:	3360      	adds	r3, #96	; 0x60
 801e6be:	681b      	ldr	r3, [r3, #0]
 801e6c0:	fb03 f302 	mul.w	r3, r3, r2
 801e6c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 801e6c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801e6cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801e6d0:	4413      	add	r3, r2
 801e6d2:	f241 1251 	movw	r2, #4433	; 0x1151
 801e6d6:	fb02 f303 	mul.w	r3, r2, r3
 801e6da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801e6de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801e6e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801e6e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 801e6ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e6ee:	f641 027e 	movw	r2, #6270	; 0x187e
 801e6f2:	fb02 f203 	mul.w	r2, r2, r3
 801e6f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801e6fa:	4413      	add	r3, r2
 801e6fc:	12db      	asrs	r3, r3, #11
 801e6fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 801e702:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801e706:	4a26      	ldr	r2, [pc, #152]	; (801e7a0 <jpeg_idct_8x4+0x19c>)
 801e708:	fb02 f203 	mul.w	r2, r2, r3
 801e70c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801e710:	4413      	add	r3, r2
 801e712:	12db      	asrs	r3, r3, #11
 801e714:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[8*0] = (int) (tmp10 + tmp0);
 801e718:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801e71c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801e720:	441a      	add	r2, r3
 801e722:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e726:	601a      	str	r2, [r3, #0]
    wsptr[8*3] = (int) (tmp10 - tmp0);
 801e728:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e72c:	3360      	adds	r3, #96	; 0x60
 801e72e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801e732:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801e736:	1a8a      	subs	r2, r1, r2
 801e738:	601a      	str	r2, [r3, #0]
    wsptr[8*1] = (int) (tmp12 + tmp2);
 801e73a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e73e:	3320      	adds	r3, #32
 801e740:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801e744:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801e748:	440a      	add	r2, r1
 801e74a:	601a      	str	r2, [r3, #0]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 801e74c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e750:	3340      	adds	r3, #64	; 0x40
 801e752:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801e756:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801e75a:	1a8a      	subs	r2, r1, r2
 801e75c:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801e75e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e762:	3301      	adds	r3, #1
 801e764:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e768:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801e76c:	3302      	adds	r3, #2
 801e76e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801e772:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801e776:	3304      	adds	r3, #4
 801e778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801e77c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e780:	3304      	adds	r3, #4
 801e782:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801e786:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e78a:	2b07      	cmp	r3, #7
 801e78c:	f77f af56 	ble.w	801e63c <jpeg_idct_8x4+0x38>

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 801e790:	f107 0314 	add.w	r3, r7, #20
 801e794:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  for (ctr = 0; ctr < 4; ctr++) {
 801e798:	2300      	movs	r3, #0
 801e79a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801e79e:	e1a2      	b.n	801eae6 <jpeg_idct_8x4+0x4e2>
 801e7a0:	ffffc4df 	.word	0xffffc4df
    outptr = output_buf[ctr] + output_col;
 801e7a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801e7a8:	009b      	lsls	r3, r3, #2
 801e7aa:	683a      	ldr	r2, [r7, #0]
 801e7ac:	4413      	add	r3, r2
 801e7ae:	681a      	ldr	r2, [r3, #0]
 801e7b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e7b4:	4413      	add	r3, r2
 801e7b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

    /* Even part: reverse the even part of the forward DCT. */
    /* The rotator is sqrt(2)*c(-6). */

    z2 = (INT32) wsptr[2];
 801e7ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e7be:	3308      	adds	r3, #8
 801e7c0:	681b      	ldr	r3, [r3, #0]
 801e7c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    z3 = (INT32) wsptr[6];
 801e7c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e7ca:	3318      	adds	r3, #24
 801e7cc:	681b      	ldr	r3, [r3, #0]
 801e7ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801e7d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801e7d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801e7da:	4413      	add	r3, r2
 801e7dc:	f241 1251 	movw	r2, #4433	; 0x1151
 801e7e0:	fb02 f303 	mul.w	r3, r2, r3
 801e7e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 801e7e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e7ec:	f641 027e 	movw	r2, #6270	; 0x187e
 801e7f0:	fb02 f303 	mul.w	r3, r2, r3
 801e7f4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801e7f8:	4413      	add	r3, r2
 801e7fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 801e7fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801e802:	4abf      	ldr	r2, [pc, #764]	; (801eb00 <jpeg_idct_8x4+0x4fc>)
 801e804:	fb02 f303 	mul.w	r3, r2, r3
 801e808:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801e80c:	4413      	add	r3, r2
 801e80e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    
    /* Add fudge factor here for final descale. */
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801e812:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e816:	681b      	ldr	r3, [r3, #0]
 801e818:	3310      	adds	r3, #16
 801e81a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    z3 = (INT32) wsptr[4];
 801e81e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e822:	3310      	adds	r3, #16
 801e824:	681b      	ldr	r3, [r3, #0]
 801e826:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    
    tmp0 = (z2 + z3) << CONST_BITS;
 801e82a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801e82e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801e832:	4413      	add	r3, r2
 801e834:	035b      	lsls	r3, r3, #13
 801e836:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    tmp1 = (z2 - z3) << CONST_BITS;
 801e83a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801e83e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801e842:	1ad3      	subs	r3, r2, r3
 801e844:	035b      	lsls	r3, r3, #13
 801e846:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    
    tmp10 = tmp0 + tmp2;
 801e84a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801e84e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801e852:	4413      	add	r3, r2
 801e854:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    tmp13 = tmp0 - tmp2;
 801e858:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801e85c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801e860:	1ad3      	subs	r3, r2, r3
 801e862:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tmp11 = tmp1 + tmp3;
 801e866:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801e86a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801e86e:	4413      	add	r3, r2
 801e870:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tmp12 = tmp1 - tmp3;
 801e874:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801e878:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801e87c:	1ad3      	subs	r3, r2, r3
 801e87e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Odd part per figure 8; the matrix is unitary and hence its
     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
     */

    tmp0 = (INT32) wsptr[7];
 801e882:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e886:	331c      	adds	r3, #28
 801e888:	681b      	ldr	r3, [r3, #0]
 801e88a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    tmp1 = (INT32) wsptr[5];
 801e88e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e892:	3314      	adds	r3, #20
 801e894:	681b      	ldr	r3, [r3, #0]
 801e896:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    tmp2 = (INT32) wsptr[3];
 801e89a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e89e:	330c      	adds	r3, #12
 801e8a0:	681b      	ldr	r3, [r3, #0]
 801e8a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    tmp3 = (INT32) wsptr[1];
 801e8a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801e8aa:	3304      	adds	r3, #4
 801e8ac:	681b      	ldr	r3, [r3, #0]
 801e8ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    z2 = tmp0 + tmp2;
 801e8b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801e8b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801e8ba:	4413      	add	r3, r2
 801e8bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    z3 = tmp1 + tmp3;
 801e8c0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801e8c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801e8c8:	4413      	add	r3, r2
 801e8ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801e8ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801e8d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801e8d6:	4413      	add	r3, r2
 801e8d8:	f242 52a1 	movw	r2, #9633	; 0x25a1
 801e8dc:	fb02 f303 	mul.w	r3, r2, r3
 801e8e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
 801e8e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e8e8:	4a86      	ldr	r2, [pc, #536]	; (801eb04 <jpeg_idct_8x4+0x500>)
 801e8ea:	fb02 f303 	mul.w	r3, r2, r3
 801e8ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
 801e8f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801e8f6:	4a84      	ldr	r2, [pc, #528]	; (801eb08 <jpeg_idct_8x4+0x504>)
 801e8f8:	fb02 f303 	mul.w	r3, r2, r3
 801e8fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    z2 += z1;
 801e900:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801e904:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801e908:	4413      	add	r3, r2
 801e90a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    z3 += z1;
 801e90e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801e912:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801e916:	4413      	add	r3, r2
 801e918:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 801e91c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801e920:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801e924:	4413      	add	r3, r2
 801e926:	4a79      	ldr	r2, [pc, #484]	; (801eb0c <jpeg_idct_8x4+0x508>)
 801e928:	fb02 f303 	mul.w	r3, r2, r3
 801e92c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
 801e930:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801e934:	f640 128e 	movw	r2, #2446	; 0x98e
 801e938:	fb02 f303 	mul.w	r3, r2, r3
 801e93c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
 801e940:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801e944:	f243 020b 	movw	r2, #12299	; 0x300b
 801e948:	fb02 f303 	mul.w	r3, r2, r3
 801e94c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    tmp0 += z1 + z2;
 801e950:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801e954:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e958:	4413      	add	r3, r2
 801e95a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801e95e:	4413      	add	r3, r2
 801e960:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    tmp3 += z1 + z3;
 801e964:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801e968:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801e96c:	4413      	add	r3, r2
 801e96e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801e972:	4413      	add	r3, r2
 801e974:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801e978:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801e97c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801e980:	4413      	add	r3, r2
 801e982:	4a63      	ldr	r2, [pc, #396]	; (801eb10 <jpeg_idct_8x4+0x50c>)
 801e984:	fb02 f303 	mul.w	r3, r2, r3
 801e988:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
 801e98c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801e990:	f244 12b3 	movw	r2, #16819	; 0x41b3
 801e994:	fb02 f303 	mul.w	r3, r2, r3
 801e998:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
 801e99c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801e9a0:	f246 2254 	movw	r2, #25172	; 0x6254
 801e9a4:	fb02 f303 	mul.w	r3, r2, r3
 801e9a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    tmp1 += z1 + z3;
 801e9ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801e9b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801e9b4:	4413      	add	r3, r2
 801e9b6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801e9ba:	4413      	add	r3, r2
 801e9bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    tmp2 += z1 + z2;
 801e9c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801e9c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801e9c8:	4413      	add	r3, r2
 801e9ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801e9ce:	4413      	add	r3, r2
 801e9d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801e9d4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801e9d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801e9dc:	4413      	add	r3, r2
 801e9de:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801e9e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801e9e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801e9e8:	4413      	add	r3, r2
 801e9ea:	781a      	ldrb	r2, [r3, #0]
 801e9ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801e9f0:	701a      	strb	r2, [r3, #0]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801e9f2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801e9f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801e9fa:	1ad3      	subs	r3, r2, r3
 801e9fc:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801e9fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801ea02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801ea06:	441a      	add	r2, r3
 801ea08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801ea0c:	3307      	adds	r3, #7
 801ea0e:	7812      	ldrb	r2, [r2, #0]
 801ea10:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 801ea12:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801ea16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801ea1a:	4413      	add	r3, r2
 801ea1c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801ea1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 801ea22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801ea26:	441a      	add	r2, r3
 801ea28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801ea2c:	3301      	adds	r3, #1
 801ea2e:	7812      	ldrb	r2, [r2, #0]
 801ea30:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 801ea32:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801ea36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801ea3a:	1ad3      	subs	r3, r2, r3
 801ea3c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801ea3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 801ea42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801ea46:	441a      	add	r2, r3
 801ea48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801ea4c:	3306      	adds	r3, #6
 801ea4e:	7812      	ldrb	r2, [r2, #0]
 801ea50:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 801ea52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801ea56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801ea5a:	4413      	add	r3, r2
 801ea5c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801ea5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 801ea62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801ea66:	441a      	add	r2, r3
 801ea68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801ea6c:	3302      	adds	r3, #2
 801ea6e:	7812      	ldrb	r2, [r2, #0]
 801ea70:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 801ea72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801ea76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801ea7a:	1ad3      	subs	r3, r2, r3
 801ea7c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801ea7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 801ea82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801ea86:	441a      	add	r2, r3
 801ea88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801ea8c:	3305      	adds	r3, #5
 801ea8e:	7812      	ldrb	r2, [r2, #0]
 801ea90:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 801ea92:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801ea96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801ea9a:	4413      	add	r3, r2
 801ea9c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801ea9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 801eaa2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801eaa6:	441a      	add	r2, r3
 801eaa8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801eaac:	3303      	adds	r3, #3
 801eaae:	7812      	ldrb	r2, [r2, #0]
 801eab0:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 801eab2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801eab6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801eaba:	1ad3      	subs	r3, r2, r3
 801eabc:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801eabe:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 801eac2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801eac6:	441a      	add	r2, r3
 801eac8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801eacc:	3304      	adds	r3, #4
 801eace:	7812      	ldrb	r2, [r2, #0]
 801ead0:	701a      	strb	r2, [r3, #0]

    wsptr += DCTSIZE;		/* advance pointer to next row */
 801ead2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801ead6:	3320      	adds	r3, #32
 801ead8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  for (ctr = 0; ctr < 4; ctr++) {
 801eadc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801eae0:	3301      	adds	r3, #1
 801eae2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801eae6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801eaea:	2b03      	cmp	r3, #3
 801eaec:	f77f ae5a 	ble.w	801e7a4 <jpeg_idct_8x4+0x1a0>
  }
}
 801eaf0:	bf00      	nop
 801eaf2:	bf00      	nop
 801eaf4:	37dc      	adds	r7, #220	; 0xdc
 801eaf6:	46bd      	mov	sp, r7
 801eaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eafc:	4770      	bx	lr
 801eafe:	bf00      	nop
 801eb00:	ffffc4df 	.word	0xffffc4df
 801eb04:	ffffc13b 	.word	0xffffc13b
 801eb08:	fffff384 	.word	0xfffff384
 801eb0c:	ffffe333 	.word	0xffffe333
 801eb10:	ffffadfd 	.word	0xffffadfd

0801eb14 <jpeg_idct_6x3>:

GLOBAL(void)
jpeg_idct_6x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801eb14:	b480      	push	{r7}
 801eb16:	b0a7      	sub	sp, #156	; 0x9c
 801eb18:	af00      	add	r7, sp, #0
 801eb1a:	60f8      	str	r0, [r7, #12]
 801eb1c:	60b9      	str	r1, [r7, #8]
 801eb1e:	607a      	str	r2, [r7, #4]
 801eb20:	603b      	str	r3, [r7, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801eb22:	68fb      	ldr	r3, [r7, #12]
 801eb24:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801eb28:	3380      	adds	r3, #128	; 0x80
 801eb2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  inptr = coef_block;
 801eb2e:	687b      	ldr	r3, [r7, #4]
 801eb30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801eb34:	68bb      	ldr	r3, [r7, #8]
 801eb36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801eb38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  wsptr = workspace;
 801eb3c:	f107 0314 	add.w	r3, r7, #20
 801eb40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801eb44:	2300      	movs	r3, #0
 801eb46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801eb4a:	e06a      	b.n	801ec22 <jpeg_idct_6x3+0x10e>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801eb4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801eb50:	f9b3 3000 	ldrsh.w	r3, [r3]
 801eb54:	461a      	mov	r2, r3
 801eb56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801eb5a:	681b      	ldr	r3, [r3, #0]
 801eb5c:	fb03 f302 	mul.w	r3, r3, r2
 801eb60:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp0 <<= CONST_BITS;
 801eb62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801eb64:	035b      	lsls	r3, r3, #13
 801eb66:	67fb      	str	r3, [r7, #124]	; 0x7c
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 801eb68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801eb6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801eb6e:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801eb70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801eb74:	3320      	adds	r3, #32
 801eb76:	f9b3 3000 	ldrsh.w	r3, [r3]
 801eb7a:	461a      	mov	r2, r3
 801eb7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801eb80:	3340      	adds	r3, #64	; 0x40
 801eb82:	681b      	ldr	r3, [r3, #0]
 801eb84:	fb03 f302 	mul.w	r3, r3, r2
 801eb88:	67bb      	str	r3, [r7, #120]	; 0x78
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801eb8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801eb8c:	f241 62a1 	movw	r2, #5793	; 0x16a1
 801eb90:	fb02 f303 	mul.w	r3, r2, r3
 801eb94:	66bb      	str	r3, [r7, #104]	; 0x68
    tmp10 = tmp0 + tmp12;
 801eb96:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801eb98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801eb9a:	4413      	add	r3, r2
 801eb9c:	677b      	str	r3, [r7, #116]	; 0x74
    tmp2 = tmp0 - tmp12 - tmp12;
 801eb9e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801eba0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801eba2:	1ad2      	subs	r2, r2, r3
 801eba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801eba6:	1ad3      	subs	r3, r2, r3
 801eba8:	67bb      	str	r3, [r7, #120]	; 0x78

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801ebaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801ebae:	3310      	adds	r3, #16
 801ebb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ebb4:	461a      	mov	r2, r3
 801ebb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801ebba:	3320      	adds	r3, #32
 801ebbc:	681b      	ldr	r3, [r3, #0]
 801ebbe:	fb03 f302 	mul.w	r3, r3, r2
 801ebc2:	66bb      	str	r3, [r7, #104]	; 0x68
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 801ebc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ebc6:	f242 7231 	movw	r2, #10033	; 0x2731
 801ebca:	fb02 f303 	mul.w	r3, r2, r3
 801ebce:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801ebd0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801ebd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ebd4:	4413      	add	r3, r2
 801ebd6:	12da      	asrs	r2, r3, #11
 801ebd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ebdc:	601a      	str	r2, [r3, #0]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801ebde:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801ebe0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ebe2:	1ad2      	subs	r2, r2, r3
 801ebe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ebe8:	3330      	adds	r3, #48	; 0x30
 801ebea:	12d2      	asrs	r2, r2, #11
 801ebec:	601a      	str	r2, [r3, #0]
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 801ebee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ebf2:	3318      	adds	r3, #24
 801ebf4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801ebf6:	12d2      	asrs	r2, r2, #11
 801ebf8:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801ebfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801ebfe:	3301      	adds	r3, #1
 801ec00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801ec04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801ec08:	3302      	adds	r3, #2
 801ec0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801ec0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801ec12:	3304      	adds	r3, #4
 801ec14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801ec18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ec1c:	3304      	adds	r3, #4
 801ec1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801ec22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801ec26:	2b05      	cmp	r3, #5
 801ec28:	dd90      	ble.n	801eb4c <jpeg_idct_6x3+0x38>
  }
  
  /* Pass 2: process 3 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
 801ec2a:	f107 0314 	add.w	r3, r7, #20
 801ec2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  for (ctr = 0; ctr < 3; ctr++) {
 801ec32:	2300      	movs	r3, #0
 801ec34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801ec38:	e0c3      	b.n	801edc2 <jpeg_idct_6x3+0x2ae>
    outptr = output_buf[ctr] + output_col;
 801ec3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801ec3e:	009b      	lsls	r3, r3, #2
 801ec40:	683a      	ldr	r2, [r7, #0]
 801ec42:	4413      	add	r3, r2
 801ec44:	681a      	ldr	r2, [r3, #0]
 801ec46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ec4a:	4413      	add	r3, r2
 801ec4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801ec50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ec54:	681b      	ldr	r3, [r3, #0]
 801ec56:	3310      	adds	r3, #16
 801ec58:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp0 <<= CONST_BITS;
 801ec5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ec5c:	035b      	lsls	r3, r3, #13
 801ec5e:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp2 = (INT32) wsptr[4];
 801ec60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ec64:	3310      	adds	r3, #16
 801ec66:	681b      	ldr	r3, [r3, #0]
 801ec68:	67bb      	str	r3, [r7, #120]	; 0x78
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801ec6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ec6c:	f241 62a1 	movw	r2, #5793	; 0x16a1
 801ec70:	fb02 f303 	mul.w	r3, r2, r3
 801ec74:	677b      	str	r3, [r7, #116]	; 0x74
    tmp1 = tmp0 + tmp10;
 801ec76:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801ec78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ec7a:	4413      	add	r3, r2
 801ec7c:	673b      	str	r3, [r7, #112]	; 0x70
    tmp11 = tmp0 - tmp10 - tmp10;
 801ec7e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801ec80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ec82:	1ad2      	subs	r2, r2, r3
 801ec84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ec86:	1ad3      	subs	r3, r2, r3
 801ec88:	66fb      	str	r3, [r7, #108]	; 0x6c
    tmp10 = (INT32) wsptr[2];
 801ec8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ec8e:	3308      	adds	r3, #8
 801ec90:	681b      	ldr	r3, [r3, #0]
 801ec92:	677b      	str	r3, [r7, #116]	; 0x74
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 801ec94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ec96:	f242 7231 	movw	r2, #10033	; 0x2731
 801ec9a:	fb02 f303 	mul.w	r3, r2, r3
 801ec9e:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp10 = tmp1 + tmp0;
 801eca0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801eca2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801eca4:	4413      	add	r3, r2
 801eca6:	677b      	str	r3, [r7, #116]	; 0x74
    tmp12 = tmp1 - tmp0;
 801eca8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801ecaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ecac:	1ad3      	subs	r3, r2, r3
 801ecae:	66bb      	str	r3, [r7, #104]	; 0x68

    /* Odd part */

    z1 = (INT32) wsptr[1];
 801ecb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ecb4:	3304      	adds	r3, #4
 801ecb6:	681b      	ldr	r3, [r3, #0]
 801ecb8:	667b      	str	r3, [r7, #100]	; 0x64
    z2 = (INT32) wsptr[3];
 801ecba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ecbe:	330c      	adds	r3, #12
 801ecc0:	681b      	ldr	r3, [r3, #0]
 801ecc2:	663b      	str	r3, [r7, #96]	; 0x60
    z3 = (INT32) wsptr[5];
 801ecc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ecc8:	3314      	adds	r3, #20
 801ecca:	681b      	ldr	r3, [r3, #0]
 801eccc:	65fb      	str	r3, [r7, #92]	; 0x5c
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801ecce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801ecd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ecd2:	4413      	add	r3, r2
 801ecd4:	f640 32b6 	movw	r2, #2998	; 0xbb6
 801ecd8:	fb02 f303 	mul.w	r3, r2, r3
 801ecdc:	673b      	str	r3, [r7, #112]	; 0x70
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801ecde:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801ece0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ece2:	4413      	add	r3, r2
 801ece4:	035b      	lsls	r3, r3, #13
 801ece6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801ece8:	4413      	add	r3, r2
 801ecea:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 801ecec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801ecee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ecf0:	1ad3      	subs	r3, r2, r3
 801ecf2:	035b      	lsls	r3, r3, #13
 801ecf4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801ecf6:	4413      	add	r3, r2
 801ecf8:	67bb      	str	r3, [r7, #120]	; 0x78
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 801ecfa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801ecfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ecfe:	1ad2      	subs	r2, r2, r3
 801ed00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ed02:	1ad3      	subs	r3, r2, r3
 801ed04:	035b      	lsls	r3, r3, #13
 801ed06:	673b      	str	r3, [r7, #112]	; 0x70

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801ed08:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801ed0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ed0c:	4413      	add	r3, r2
 801ed0e:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801ed10:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801ed14:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801ed18:	4413      	add	r3, r2
 801ed1a:	781a      	ldrb	r2, [r3, #0]
 801ed1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801ed20:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801ed22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801ed24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ed26:	1ad3      	subs	r3, r2, r3
 801ed28:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801ed2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801ed2e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801ed32:	441a      	add	r2, r3
 801ed34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801ed38:	3305      	adds	r3, #5
 801ed3a:	7812      	ldrb	r2, [r2, #0]
 801ed3c:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801ed3e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801ed40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ed42:	4413      	add	r3, r2
 801ed44:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801ed46:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801ed4a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801ed4e:	441a      	add	r2, r3
 801ed50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801ed54:	3301      	adds	r3, #1
 801ed56:	7812      	ldrb	r2, [r2, #0]
 801ed58:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801ed5a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801ed5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ed5e:	1ad3      	subs	r3, r2, r3
 801ed60:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801ed62:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801ed66:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801ed6a:	441a      	add	r2, r3
 801ed6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801ed70:	3304      	adds	r3, #4
 801ed72:	7812      	ldrb	r2, [r2, #0]
 801ed74:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801ed76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801ed78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ed7a:	4413      	add	r3, r2
 801ed7c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801ed7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801ed82:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801ed86:	441a      	add	r2, r3
 801ed88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801ed8c:	3302      	adds	r3, #2
 801ed8e:	7812      	ldrb	r2, [r2, #0]
 801ed90:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801ed92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801ed94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ed96:	1ad3      	subs	r3, r2, r3
 801ed98:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801ed9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801ed9e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801eda2:	441a      	add	r2, r3
 801eda4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801eda8:	3303      	adds	r3, #3
 801edaa:	7812      	ldrb	r2, [r2, #0]
 801edac:	701a      	strb	r2, [r3, #0]

    wsptr += 6;		/* advance pointer to next row */
 801edae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801edb2:	3318      	adds	r3, #24
 801edb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  for (ctr = 0; ctr < 3; ctr++) {
 801edb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801edbc:	3301      	adds	r3, #1
 801edbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801edc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801edc6:	2b02      	cmp	r3, #2
 801edc8:	f77f af37 	ble.w	801ec3a <jpeg_idct_6x3+0x126>
  }
}
 801edcc:	bf00      	nop
 801edce:	bf00      	nop
 801edd0:	379c      	adds	r7, #156	; 0x9c
 801edd2:	46bd      	mov	sp, r7
 801edd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edd8:	4770      	bx	lr
	...

0801eddc <jpeg_idct_4x2>:

GLOBAL(void)
jpeg_idct_4x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801eddc:	b480      	push	{r7}
 801edde:	b09b      	sub	sp, #108	; 0x6c
 801ede0:	af00      	add	r7, sp, #0
 801ede2:	60f8      	str	r0, [r7, #12]
 801ede4:	60b9      	str	r1, [r7, #8]
 801ede6:	607a      	str	r2, [r7, #4]
 801ede8:	603b      	str	r3, [r7, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801edea:	68fb      	ldr	r3, [r7, #12]
 801edec:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801edf0:	3380      	adds	r3, #128	; 0x80
 801edf2:	657b      	str	r3, [r7, #84]	; 0x54
  INT32 workspace[4*2];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 801edf4:	687b      	ldr	r3, [r7, #4]
 801edf6:	667b      	str	r3, [r7, #100]	; 0x64
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801edf8:	68bb      	ldr	r3, [r7, #8]
 801edfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801edfc:	663b      	str	r3, [r7, #96]	; 0x60
  wsptr = workspace;
 801edfe:	f107 0314 	add.w	r3, r7, #20
 801ee02:	65fb      	str	r3, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 801ee04:	2300      	movs	r3, #0
 801ee06:	65bb      	str	r3, [r7, #88]	; 0x58
 801ee08:	e02a      	b.n	801ee60 <jpeg_idct_4x2+0x84>
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801ee0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ee0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ee10:	461a      	mov	r2, r3
 801ee12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ee14:	681b      	ldr	r3, [r3, #0]
 801ee16:	fb03 f302 	mul.w	r3, r3, r2
 801ee1a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Odd part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801ee1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ee1e:	3310      	adds	r3, #16
 801ee20:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ee24:	461a      	mov	r2, r3
 801ee26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ee28:	3320      	adds	r3, #32
 801ee2a:	681b      	ldr	r3, [r3, #0]
 801ee2c:	fb03 f302 	mul.w	r3, r3, r2
 801ee30:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Final output stage */

    wsptr[4*0] = tmp10 + tmp0;
 801ee32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ee34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ee36:	441a      	add	r2, r3
 801ee38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ee3a:	601a      	str	r2, [r3, #0]
    wsptr[4*1] = tmp10 - tmp0;
 801ee3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ee3e:	3310      	adds	r3, #16
 801ee40:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801ee42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ee44:	1a8a      	subs	r2, r1, r2
 801ee46:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 801ee48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ee4a:	3301      	adds	r3, #1
 801ee4c:	65bb      	str	r3, [r7, #88]	; 0x58
 801ee4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ee50:	3302      	adds	r3, #2
 801ee52:	667b      	str	r3, [r7, #100]	; 0x64
 801ee54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ee56:	3304      	adds	r3, #4
 801ee58:	663b      	str	r3, [r7, #96]	; 0x60
 801ee5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ee5c:	3304      	adds	r3, #4
 801ee5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 801ee60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ee62:	2b03      	cmp	r3, #3
 801ee64:	ddd1      	ble.n	801ee0a <jpeg_idct_4x2+0x2e>

  /* Pass 2: process 2 rows from work array, store into output array.
   * 4-point IDCT kernel,
   * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
   */
  wsptr = workspace;
 801ee66:	f107 0314 	add.w	r3, r7, #20
 801ee6a:	65fb      	str	r3, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 2; ctr++) {
 801ee6c:	2300      	movs	r3, #0
 801ee6e:	65bb      	str	r3, [r7, #88]	; 0x58
 801ee70:	e06a      	b.n	801ef48 <jpeg_idct_4x2+0x16c>
    outptr = output_buf[ctr] + output_col;
 801ee72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ee74:	009b      	lsls	r3, r3, #2
 801ee76:	683a      	ldr	r2, [r7, #0]
 801ee78:	4413      	add	r3, r2
 801ee7a:	681a      	ldr	r2, [r3, #0]
 801ee7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ee7e:	4413      	add	r3, r2
 801ee80:	653b      	str	r3, [r7, #80]	; 0x50

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = wsptr[0] + (ONE << 2);
 801ee82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ee84:	681b      	ldr	r3, [r3, #0]
 801ee86:	3304      	adds	r3, #4
 801ee88:	64fb      	str	r3, [r7, #76]	; 0x4c
    tmp2 = wsptr[2];
 801ee8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ee8c:	689b      	ldr	r3, [r3, #8]
 801ee8e:	64bb      	str	r3, [r7, #72]	; 0x48

    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 801ee90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ee92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ee94:	4413      	add	r3, r2
 801ee96:	035b      	lsls	r3, r3, #13
 801ee98:	647b      	str	r3, [r7, #68]	; 0x44
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 801ee9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ee9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ee9e:	1ad3      	subs	r3, r2, r3
 801eea0:	035b      	lsls	r3, r3, #13
 801eea2:	643b      	str	r3, [r7, #64]	; 0x40

    /* Odd part */
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = wsptr[1];
 801eea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801eea6:	685b      	ldr	r3, [r3, #4]
 801eea8:	63fb      	str	r3, [r7, #60]	; 0x3c
    z3 = wsptr[3];
 801eeaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801eeac:	68db      	ldr	r3, [r3, #12]
 801eeae:	63bb      	str	r3, [r7, #56]	; 0x38

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801eeb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801eeb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eeb4:	4413      	add	r3, r2
 801eeb6:	f241 1251 	movw	r2, #4433	; 0x1151
 801eeba:	fb02 f303 	mul.w	r3, r2, r3
 801eebe:	637b      	str	r3, [r7, #52]	; 0x34
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 801eec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801eec2:	f641 027e 	movw	r2, #6270	; 0x187e
 801eec6:	fb02 f303 	mul.w	r3, r2, r3
 801eeca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801eecc:	4413      	add	r3, r2
 801eece:	64fb      	str	r3, [r7, #76]	; 0x4c
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801eed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eed2:	4a22      	ldr	r2, [pc, #136]	; (801ef5c <jpeg_idct_4x2+0x180>)
 801eed4:	fb02 f303 	mul.w	r3, r2, r3
 801eed8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801eeda:	4413      	add	r3, r2
 801eedc:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801eede:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801eee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801eee2:	4413      	add	r3, r2
 801eee4:	141b      	asrs	r3, r3, #16
					      CONST_BITS+3)
			    & RANGE_MASK];
 801eee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801eeea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801eeec:	4413      	add	r3, r2
 801eeee:	781a      	ldrb	r2, [r3, #0]
 801eef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801eef2:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801eef4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801eef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801eef8:	1ad3      	subs	r3, r2, r3
 801eefa:	141b      	asrs	r3, r3, #16
					      CONST_BITS+3)
			    & RANGE_MASK];
 801eefc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801ef00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ef02:	441a      	add	r2, r3
 801ef04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ef06:	3303      	adds	r3, #3
 801ef08:	7812      	ldrb	r2, [r2, #0]
 801ef0a:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801ef0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ef0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ef10:	4413      	add	r3, r2
 801ef12:	141b      	asrs	r3, r3, #16
					      CONST_BITS+3)
			    & RANGE_MASK];
 801ef14:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801ef18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ef1a:	441a      	add	r2, r3
 801ef1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ef1e:	3301      	adds	r3, #1
 801ef20:	7812      	ldrb	r2, [r2, #0]
 801ef22:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801ef24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ef26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ef28:	1ad3      	subs	r3, r2, r3
 801ef2a:	141b      	asrs	r3, r3, #16
					      CONST_BITS+3)
			    & RANGE_MASK];
 801ef2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801ef30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ef32:	441a      	add	r2, r3
 801ef34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ef36:	3302      	adds	r3, #2
 801ef38:	7812      	ldrb	r2, [r2, #0]
 801ef3a:	701a      	strb	r2, [r3, #0]

    wsptr += 4;		/* advance pointer to next row */
 801ef3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ef3e:	3310      	adds	r3, #16
 801ef40:	65fb      	str	r3, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 2; ctr++) {
 801ef42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ef44:	3301      	adds	r3, #1
 801ef46:	65bb      	str	r3, [r7, #88]	; 0x58
 801ef48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ef4a:	2b01      	cmp	r3, #1
 801ef4c:	dd91      	ble.n	801ee72 <jpeg_idct_4x2+0x96>
  }
}
 801ef4e:	bf00      	nop
 801ef50:	bf00      	nop
 801ef52:	376c      	adds	r7, #108	; 0x6c
 801ef54:	46bd      	mov	sp, r7
 801ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef5a:	4770      	bx	lr
 801ef5c:	ffffc4df 	.word	0xffffc4df

0801ef60 <jpeg_idct_2x1>:

GLOBAL(void)
jpeg_idct_2x1 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801ef60:	b480      	push	{r7}
 801ef62:	b08b      	sub	sp, #44	; 0x2c
 801ef64:	af00      	add	r7, sp, #0
 801ef66:	60f8      	str	r0, [r7, #12]
 801ef68:	60b9      	str	r1, [r7, #8]
 801ef6a:	607a      	str	r2, [r7, #4]
 801ef6c:	603b      	str	r3, [r7, #0]
  INT32 tmp0, tmp10;
  ISLOW_MULT_TYPE * quantptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801ef6e:	68fb      	ldr	r3, [r7, #12]
 801ef70:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801ef74:	3380      	adds	r3, #128	; 0x80
 801ef76:	627b      	str	r3, [r7, #36]	; 0x24

  /* Pass 1: empty. */

  /* Pass 2: process 1 row from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801ef78:	68bb      	ldr	r3, [r7, #8]
 801ef7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ef7c:	623b      	str	r3, [r7, #32]
  outptr = output_buf[0] + output_col;
 801ef7e:	683b      	ldr	r3, [r7, #0]
 801ef80:	681a      	ldr	r2, [r3, #0]
 801ef82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ef84:	4413      	add	r3, r2
 801ef86:	61fb      	str	r3, [r7, #28]

  /* Even part */

  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 801ef88:	687b      	ldr	r3, [r7, #4]
 801ef8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ef8e:	461a      	mov	r2, r3
 801ef90:	6a3b      	ldr	r3, [r7, #32]
 801ef92:	681b      	ldr	r3, [r3, #0]
 801ef94:	fb03 f302 	mul.w	r3, r3, r2
 801ef98:	61bb      	str	r3, [r7, #24]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;
 801ef9a:	69bb      	ldr	r3, [r7, #24]
 801ef9c:	3304      	adds	r3, #4
 801ef9e:	61bb      	str	r3, [r7, #24]

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 801efa0:	687b      	ldr	r3, [r7, #4]
 801efa2:	3302      	adds	r3, #2
 801efa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801efa8:	461a      	mov	r2, r3
 801efaa:	6a3b      	ldr	r3, [r7, #32]
 801efac:	3304      	adds	r3, #4
 801efae:	681b      	ldr	r3, [r3, #0]
 801efb0:	fb03 f302 	mul.w	r3, r3, r2
 801efb4:	617b      	str	r3, [r7, #20]

  /* Final output stage */

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 801efb6:	69ba      	ldr	r2, [r7, #24]
 801efb8:	697b      	ldr	r3, [r7, #20]
 801efba:	4413      	add	r3, r2
 801efbc:	10db      	asrs	r3, r3, #3
 801efbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801efc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801efc4:	4413      	add	r3, r2
 801efc6:	781a      	ldrb	r2, [r3, #0]
 801efc8:	69fb      	ldr	r3, [r7, #28]
 801efca:	701a      	strb	r2, [r3, #0]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 801efcc:	69ba      	ldr	r2, [r7, #24]
 801efce:	697b      	ldr	r3, [r7, #20]
 801efd0:	1ad3      	subs	r3, r2, r3
 801efd2:	10db      	asrs	r3, r3, #3
 801efd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801efd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801efda:	441a      	add	r2, r3
 801efdc:	69fb      	ldr	r3, [r7, #28]
 801efde:	3301      	adds	r3, #1
 801efe0:	7812      	ldrb	r2, [r2, #0]
 801efe2:	701a      	strb	r2, [r3, #0]
}
 801efe4:	bf00      	nop
 801efe6:	372c      	adds	r7, #44	; 0x2c
 801efe8:	46bd      	mov	sp, r7
 801efea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efee:	4770      	bx	lr

0801eff0 <jpeg_idct_8x16>:

GLOBAL(void)
jpeg_idct_8x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801eff0:	b490      	push	{r4, r7}
 801eff2:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
 801eff6:	af00      	add	r7, sp, #0
 801eff8:	f107 040c 	add.w	r4, r7, #12
 801effc:	6020      	str	r0, [r4, #0]
 801effe:	f107 0008 	add.w	r0, r7, #8
 801f002:	6001      	str	r1, [r0, #0]
 801f004:	1d39      	adds	r1, r7, #4
 801f006:	600a      	str	r2, [r1, #0]
 801f008:	463a      	mov	r2, r7
 801f00a:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801f00c:	f107 030c 	add.w	r3, r7, #12
 801f010:	681b      	ldr	r3, [r3, #0]
 801f012:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801f016:	3380      	adds	r3, #128	; 0x80
 801f018:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  inptr = coef_block;
 801f01c:	1d3b      	adds	r3, r7, #4
 801f01e:	681b      	ldr	r3, [r3, #0]
 801f020:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801f024:	f107 0308 	add.w	r3, r7, #8
 801f028:	681b      	ldr	r3, [r3, #0]
 801f02a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801f02c:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
  wsptr = workspace;
 801f030:	f107 0310 	add.w	r3, r7, #16
 801f034:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801f038:	2300      	movs	r3, #0
 801f03a:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 801f03e:	e30b      	b.n	801f658 <jpeg_idct_8x16+0x668>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801f040:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801f044:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f048:	461a      	mov	r2, r3
 801f04a:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 801f04e:	681b      	ldr	r3, [r3, #0]
 801f050:	fb03 f302 	mul.w	r3, r3, r2
 801f054:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    tmp0 <<= CONST_BITS;
 801f058:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801f05c:	035b      	lsls	r3, r3, #13
 801f05e:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 801f062:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801f066:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801f06a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801f06e:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801f072:	3340      	adds	r3, #64	; 0x40
 801f074:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f078:	461a      	mov	r2, r3
 801f07a:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 801f07e:	3380      	adds	r3, #128	; 0x80
 801f080:	681b      	ldr	r3, [r3, #0]
 801f082:	fb03 f302 	mul.w	r3, r3, r2
 801f086:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801f08a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801f08e:	f642 12cf 	movw	r2, #10703	; 0x29cf
 801f092:	fb02 f303 	mul.w	r3, r2, r3
 801f096:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801f09a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801f09e:	f241 1251 	movw	r2, #4433	; 0x1151
 801f0a2:	fb02 f303 	mul.w	r3, r2, r3
 801f0a6:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250

    tmp10 = tmp0 + tmp1;
 801f0aa:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801f0ae:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801f0b2:	4413      	add	r3, r2
 801f0b4:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
    tmp11 = tmp0 - tmp1;
 801f0b8:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801f0bc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801f0c0:	1ad3      	subs	r3, r2, r3
 801f0c2:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    tmp12 = tmp0 + tmp2;
 801f0c6:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801f0ca:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801f0ce:	4413      	add	r3, r2
 801f0d0:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    tmp13 = tmp0 - tmp2;
 801f0d4:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801f0d8:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801f0dc:	1ad3      	subs	r3, r2, r3
 801f0de:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801f0e2:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801f0e6:	3320      	adds	r3, #32
 801f0e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f0ec:	461a      	mov	r2, r3
 801f0ee:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 801f0f2:	3340      	adds	r3, #64	; 0x40
 801f0f4:	681b      	ldr	r3, [r3, #0]
 801f0f6:	fb03 f302 	mul.w	r3, r3, r2
 801f0fa:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801f0fe:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801f102:	3360      	adds	r3, #96	; 0x60
 801f104:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f108:	461a      	mov	r2, r3
 801f10a:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 801f10e:	33c0      	adds	r3, #192	; 0xc0
 801f110:	681b      	ldr	r3, [r3, #0]
 801f112:	fb03 f302 	mul.w	r3, r3, r2
 801f116:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    z3 = z1 - z2;
 801f11a:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 801f11e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801f122:	1ad3      	subs	r3, r2, r3
 801f124:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 801f128:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801f12c:	f640 02d4 	movw	r2, #2260	; 0x8d4
 801f130:	fb02 f303 	mul.w	r3, r2, r3
 801f134:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 801f138:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801f13c:	f642 4263 	movw	r2, #11363	; 0x2c63
 801f140:	fb02 f303 	mul.w	r3, r2, r3
 801f144:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801f148:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801f14c:	f245 2203 	movw	r2, #20995	; 0x5203
 801f150:	fb02 f303 	mul.w	r3, r2, r3
 801f154:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 801f158:	4413      	add	r3, r2
 801f15a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 801f15e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801f162:	f641 42cd 	movw	r2, #7373	; 0x1ccd
 801f166:	fb02 f303 	mul.w	r3, r2, r3
 801f16a:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 801f16e:	4413      	add	r3, r2
 801f170:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801f174:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801f178:	4af4      	ldr	r2, [pc, #976]	; (801f54c <jpeg_idct_8x16+0x55c>)
 801f17a:	fb02 f303 	mul.w	r3, r2, r3
 801f17e:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 801f182:	4413      	add	r3, r2
 801f184:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801f188:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801f18c:	4af0      	ldr	r2, [pc, #960]	; (801f550 <jpeg_idct_8x16+0x560>)
 801f18e:	fb02 f303 	mul.w	r3, r2, r3
 801f192:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 801f196:	4413      	add	r3, r2
 801f198:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

    tmp20 = tmp10 + tmp0;
 801f19c:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801f1a0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801f1a4:	4413      	add	r3, r2
 801f1a6:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    tmp27 = tmp10 - tmp0;
 801f1aa:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801f1ae:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801f1b2:	1ad3      	subs	r3, r2, r3
 801f1b4:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    tmp21 = tmp12 + tmp1;
 801f1b8:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 801f1bc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801f1c0:	4413      	add	r3, r2
 801f1c2:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
    tmp26 = tmp12 - tmp1;
 801f1c6:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 801f1ca:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801f1ce:	1ad3      	subs	r3, r2, r3
 801f1d0:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
    tmp22 = tmp13 + tmp2;
 801f1d4:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801f1d8:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801f1dc:	4413      	add	r3, r2
 801f1de:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    tmp25 = tmp13 - tmp2;
 801f1e2:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801f1e6:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801f1ea:	1ad3      	subs	r3, r2, r3
 801f1ec:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    tmp23 = tmp11 + tmp3;
 801f1f0:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801f1f4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801f1f8:	4413      	add	r3, r2
 801f1fa:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    tmp24 = tmp11 - tmp3;
 801f1fe:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801f202:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801f206:	1ad3      	subs	r3, r2, r3
 801f208:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801f20c:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801f210:	3310      	adds	r3, #16
 801f212:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f216:	461a      	mov	r2, r3
 801f218:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 801f21c:	3320      	adds	r3, #32
 801f21e:	681b      	ldr	r3, [r3, #0]
 801f220:	fb03 f302 	mul.w	r3, r3, r2
 801f224:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801f228:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801f22c:	3330      	adds	r3, #48	; 0x30
 801f22e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f232:	461a      	mov	r2, r3
 801f234:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 801f238:	3360      	adds	r3, #96	; 0x60
 801f23a:	681b      	ldr	r3, [r3, #0]
 801f23c:	fb03 f302 	mul.w	r3, r3, r2
 801f240:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801f244:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801f248:	3350      	adds	r3, #80	; 0x50
 801f24a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f24e:	461a      	mov	r2, r3
 801f250:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 801f254:	33a0      	adds	r3, #160	; 0xa0
 801f256:	681b      	ldr	r3, [r3, #0]
 801f258:	fb03 f302 	mul.w	r3, r3, r2
 801f25c:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801f260:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801f264:	3370      	adds	r3, #112	; 0x70
 801f266:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f26a:	461a      	mov	r2, r3
 801f26c:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 801f270:	33e0      	adds	r3, #224	; 0xe0
 801f272:	681b      	ldr	r3, [r3, #0]
 801f274:	fb03 f302 	mul.w	r3, r3, r2
 801f278:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230

    tmp11 = z1 + z3;
 801f27c:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 801f280:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801f284:	4413      	add	r3, r2
 801f286:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801f28a:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 801f28e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801f292:	4413      	add	r3, r2
 801f294:	f642 324e 	movw	r2, #11086	; 0x2b4e
 801f298:	fb02 f303 	mul.w	r3, r2, r3
 801f29c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801f2a0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801f2a4:	f242 72e9 	movw	r2, #10217	; 0x27e9
 801f2a8:	fb02 f303 	mul.w	r3, r2, r3
 801f2ac:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 801f2b0:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 801f2b4:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801f2b8:	4413      	add	r3, r2
 801f2ba:	f242 22fc 	movw	r2, #8956	; 0x22fc
 801f2be:	fb02 f303 	mul.w	r3, r2, r3
 801f2c2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801f2c6:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 801f2ca:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801f2ce:	1ad3      	subs	r3, r2, r3
 801f2d0:	f641 42b6 	movw	r2, #7350	; 0x1cb6
 801f2d4:	fb02 f303 	mul.w	r3, r2, r3
 801f2d8:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 801f2dc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801f2e0:	f241 5255 	movw	r2, #5461	; 0x1555
 801f2e4:	fb02 f303 	mul.w	r3, r2, r3
 801f2e8:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801f2ec:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 801f2f0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801f2f4:	1ad3      	subs	r3, r2, r3
 801f2f6:	f640 5223 	movw	r2, #3363	; 0xd23
 801f2fa:	fb02 f303 	mul.w	r3, r2, r3
 801f2fe:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    tmp0  = tmp1 + tmp2 + tmp3 -
 801f302:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801f306:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801f30a:	441a      	add	r2, r3
 801f30c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801f310:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
 801f312:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801f316:	498f      	ldr	r1, [pc, #572]	; (801f554 <jpeg_idct_8x16+0x564>)
 801f318:	fb01 f303 	mul.w	r3, r1, r3
    tmp0  = tmp1 + tmp2 + tmp3 -
 801f31c:	4413      	add	r3, r2
 801f31e:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    tmp13 = tmp10 + tmp11 + tmp12 -
 801f322:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801f326:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801f32a:	441a      	add	r2, r3
 801f32c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f330:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
 801f332:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801f336:	4988      	ldr	r1, [pc, #544]	; (801f558 <jpeg_idct_8x16+0x568>)
 801f338:	fb01 f303 	mul.w	r3, r1, r3
    tmp13 = tmp10 + tmp11 + tmp12 -
 801f33c:	4413      	add	r3, r2
 801f33e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801f342:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801f346:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801f34a:	4413      	add	r3, r2
 801f34c:	f44f 628e 	mov.w	r2, #1136	; 0x470
 801f350:	fb02 f303 	mul.w	r3, r2, r3
 801f354:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 801f358:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801f35c:	f240 224d 	movw	r2, #589	; 0x24d
 801f360:	fb02 f203 	mul.w	r2, r2, r3
 801f364:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801f368:	4413      	add	r3, r2
 801f36a:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801f36e:	4413      	add	r3, r2
 801f370:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801f374:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801f378:	4a78      	ldr	r2, [pc, #480]	; (801f55c <jpeg_idct_8x16+0x56c>)
 801f37a:	fb02 f203 	mul.w	r2, r2, r3
 801f37e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801f382:	4413      	add	r3, r2
 801f384:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 801f388:	4413      	add	r3, r2
 801f38a:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801f38e:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 801f392:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801f396:	1ad3      	subs	r3, r2, r3
 801f398:	f642 5209 	movw	r2, #11529	; 0x2d09
 801f39c:	fb02 f303 	mul.w	r3, r2, r3
 801f3a0:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 801f3a4:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801f3a8:	4a6d      	ldr	r2, [pc, #436]	; (801f560 <jpeg_idct_8x16+0x570>)
 801f3aa:	fb02 f203 	mul.w	r2, r2, r3
 801f3ae:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801f3b2:	4413      	add	r3, r2
 801f3b4:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801f3b8:	4413      	add	r3, r2
 801f3ba:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801f3be:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801f3c2:	f643 721a 	movw	r2, #16154	; 0x3f1a
 801f3c6:	fb02 f203 	mul.w	r2, r2, r3
 801f3ca:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801f3ce:	4413      	add	r3, r2
 801f3d0:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 801f3d4:	4413      	add	r3, r2
 801f3d6:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    z2    += z4;
 801f3da:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801f3de:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801f3e2:	4413      	add	r3, r2
 801f3e4:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 801f3e8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801f3ec:	4a5d      	ldr	r2, [pc, #372]	; (801f564 <jpeg_idct_8x16+0x574>)
 801f3ee:	fb02 f303 	mul.w	r3, r2, r3
 801f3f2:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp1  += z1;
 801f3f6:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801f3fa:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801f3fe:	4413      	add	r3, r2
 801f400:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801f404:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801f408:	f242 2218 	movw	r2, #8728	; 0x2218
 801f40c:	fb02 f203 	mul.w	r2, r2, r3
 801f410:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801f414:	4413      	add	r3, r2
 801f416:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 801f41a:	4413      	add	r3, r2
 801f41c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 801f420:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801f424:	4a50      	ldr	r2, [pc, #320]	; (801f568 <jpeg_idct_8x16+0x578>)
 801f426:	fb02 f303 	mul.w	r3, r2, r3
 801f42a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801f42e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801f432:	f246 4285 	movw	r2, #25733	; 0x6485
 801f436:	fb02 f203 	mul.w	r2, r2, r3
 801f43a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801f43e:	4413      	add	r3, r2
 801f440:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801f444:	4413      	add	r3, r2
 801f446:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
    tmp12 += z2;
 801f44a:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 801f44e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801f452:	4413      	add	r3, r2
 801f454:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 801f458:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 801f45c:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801f460:	4413      	add	r3, r2
 801f462:	4a42      	ldr	r2, [pc, #264]	; (801f56c <jpeg_idct_8x16+0x57c>)
 801f464:	fb02 f303 	mul.w	r3, r2, r3
 801f468:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    tmp2  += z2;
 801f46c:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 801f470:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801f474:	4413      	add	r3, r2
 801f476:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    tmp3  += z2;
 801f47a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 801f47e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801f482:	4413      	add	r3, r2
 801f484:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 801f488:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 801f48c:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801f490:	1ad3      	subs	r3, r2, r3
 801f492:	f640 5223 	movw	r2, #3363	; 0xd23
 801f496:	fb02 f303 	mul.w	r3, r2, r3
 801f49a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    tmp10 += z2;
 801f49e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801f4a2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801f4a6:	4413      	add	r3, r2
 801f4a8:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
    tmp11 += z2;
 801f4ac:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801f4b0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801f4b4:	4413      	add	r3, r2
 801f4b6:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 801f4ba:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 801f4be:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801f4c2:	4413      	add	r3, r2
 801f4c4:	12da      	asrs	r2, r3, #11
 801f4c6:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801f4ca:	601a      	str	r2, [r3, #0]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 801f4cc:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 801f4d0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801f4d4:	1ad2      	subs	r2, r2, r3
 801f4d6:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801f4da:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801f4de:	12d2      	asrs	r2, r2, #11
 801f4e0:	601a      	str	r2, [r3, #0]
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 801f4e2:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 801f4e6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801f4ea:	441a      	add	r2, r3
 801f4ec:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801f4f0:	3320      	adds	r3, #32
 801f4f2:	12d2      	asrs	r2, r2, #11
 801f4f4:	601a      	str	r2, [r3, #0]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 801f4f6:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 801f4fa:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801f4fe:	1ad2      	subs	r2, r2, r3
 801f500:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801f504:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 801f508:	12d2      	asrs	r2, r2, #11
 801f50a:	601a      	str	r2, [r3, #0]
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 801f50c:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801f510:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801f514:	441a      	add	r2, r3
 801f516:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801f51a:	3340      	adds	r3, #64	; 0x40
 801f51c:	12d2      	asrs	r2, r2, #11
 801f51e:	601a      	str	r2, [r3, #0]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 801f520:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801f524:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801f528:	1ad2      	subs	r2, r2, r3
 801f52a:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801f52e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 801f532:	12d2      	asrs	r2, r2, #11
 801f534:	601a      	str	r2, [r3, #0]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 801f536:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801f53a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801f53e:	441a      	add	r2, r3
 801f540:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801f544:	3360      	adds	r3, #96	; 0x60
 801f546:	12d2      	asrs	r2, r2, #11
 801f548:	e012      	b.n	801f570 <jpeg_idct_8x16+0x580>
 801f54a:	bf00      	nop
 801f54c:	ffffecc2 	.word	0xffffecc2
 801f550:	ffffefb0 	.word	0xffffefb0
 801f554:	ffffb6d6 	.word	0xffffb6d6
 801f558:	ffffc542 	.word	0xffffc542
 801f55c:	ffffdbfa 	.word	0xffffdbfa
 801f560:	ffffe77a 	.word	0xffffe77a
 801f564:	ffffeaab 	.word	0xffffeaab
 801f568:	ffffd817 	.word	0xffffd817
 801f56c:	ffffd4b2 	.word	0xffffd4b2
 801f570:	601a      	str	r2, [r3, #0]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 801f572:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801f576:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801f57a:	1ad2      	subs	r2, r2, r3
 801f57c:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801f580:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 801f584:	12d2      	asrs	r2, r2, #11
 801f586:	601a      	str	r2, [r3, #0]
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 801f588:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 801f58c:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801f590:	441a      	add	r2, r3
 801f592:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801f596:	3380      	adds	r3, #128	; 0x80
 801f598:	12d2      	asrs	r2, r2, #11
 801f59a:	601a      	str	r2, [r3, #0]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 801f59c:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 801f5a0:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801f5a4:	1ad2      	subs	r2, r2, r3
 801f5a6:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801f5aa:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801f5ae:	12d2      	asrs	r2, r2, #11
 801f5b0:	601a      	str	r2, [r3, #0]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 801f5b2:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 801f5b6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801f5ba:	441a      	add	r2, r3
 801f5bc:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801f5c0:	33a0      	adds	r3, #160	; 0xa0
 801f5c2:	12d2      	asrs	r2, r2, #11
 801f5c4:	601a      	str	r2, [r3, #0]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 801f5c6:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 801f5ca:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801f5ce:	1ad2      	subs	r2, r2, r3
 801f5d0:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801f5d4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801f5d8:	12d2      	asrs	r2, r2, #11
 801f5da:	601a      	str	r2, [r3, #0]
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 801f5dc:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 801f5e0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f5e4:	441a      	add	r2, r3
 801f5e6:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801f5ea:	33c0      	adds	r3, #192	; 0xc0
 801f5ec:	12d2      	asrs	r2, r2, #11
 801f5ee:	601a      	str	r2, [r3, #0]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 801f5f0:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 801f5f4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801f5f8:	1ad2      	subs	r2, r2, r3
 801f5fa:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801f5fe:	f503 7390 	add.w	r3, r3, #288	; 0x120
 801f602:	12d2      	asrs	r2, r2, #11
 801f604:	601a      	str	r2, [r3, #0]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 801f606:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 801f60a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801f60e:	441a      	add	r2, r3
 801f610:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801f614:	33e0      	adds	r3, #224	; 0xe0
 801f616:	12d2      	asrs	r2, r2, #11
 801f618:	601a      	str	r2, [r3, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 801f61a:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 801f61e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801f622:	1ad2      	subs	r2, r2, r3
 801f624:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801f628:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801f62c:	12d2      	asrs	r2, r2, #11
 801f62e:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801f630:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 801f634:	3301      	adds	r3, #1
 801f636:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 801f63a:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801f63e:	3302      	adds	r3, #2
 801f640:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 801f644:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 801f648:	3304      	adds	r3, #4
 801f64a:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 801f64e:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801f652:	3304      	adds	r3, #4
 801f654:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 801f658:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 801f65c:	2b07      	cmp	r3, #7
 801f65e:	f77f acef 	ble.w	801f040 <jpeg_idct_8x16+0x50>
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 801f662:	f107 0310 	add.w	r3, r7, #16
 801f666:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
  for (ctr = 0; ctr < 16; ctr++) {
 801f66a:	2300      	movs	r3, #0
 801f66c:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 801f670:	e1a1      	b.n	801f9b6 <jpeg_idct_8x16+0x9c6>
    outptr = output_buf[ctr] + output_col;
 801f672:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 801f676:	009b      	lsls	r3, r3, #2
 801f678:	463a      	mov	r2, r7
 801f67a:	6812      	ldr	r2, [r2, #0]
 801f67c:	4413      	add	r3, r2
 801f67e:	681a      	ldr	r2, [r3, #0]
 801f680:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 801f684:	4413      	add	r3, r2
 801f686:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    
    /* Even part: reverse the even part of the forward DCT. */
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = (INT32) wsptr[2];
 801f68a:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801f68e:	3308      	adds	r3, #8
 801f690:	681b      	ldr	r3, [r3, #0]
 801f692:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    z3 = (INT32) wsptr[6];
 801f696:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801f69a:	3318      	adds	r3, #24
 801f69c:	681b      	ldr	r3, [r3, #0]
 801f69e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801f6a2:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801f6a6:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801f6aa:	4413      	add	r3, r2
 801f6ac:	f241 1251 	movw	r2, #4433	; 0x1151
 801f6b0:	fb02 f303 	mul.w	r3, r2, r3
 801f6b4:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 801f6b8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801f6bc:	f641 027e 	movw	r2, #6270	; 0x187e
 801f6c0:	fb02 f303 	mul.w	r3, r2, r3
 801f6c4:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 801f6c8:	4413      	add	r3, r2
 801f6ca:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 801f6ce:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801f6d2:	4abf      	ldr	r2, [pc, #764]	; (801f9d0 <jpeg_idct_8x16+0x9e0>)
 801f6d4:	fb02 f303 	mul.w	r3, r2, r3
 801f6d8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 801f6dc:	4413      	add	r3, r2
 801f6de:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    
    /* Add fudge factor here for final descale. */
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801f6e2:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801f6e6:	681b      	ldr	r3, [r3, #0]
 801f6e8:	3310      	adds	r3, #16
 801f6ea:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    z3 = (INT32) wsptr[4];
 801f6ee:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801f6f2:	3310      	adds	r3, #16
 801f6f4:	681b      	ldr	r3, [r3, #0]
 801f6f6:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    
    tmp0 = (z2 + z3) << CONST_BITS;
 801f6fa:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801f6fe:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801f702:	4413      	add	r3, r2
 801f704:	035b      	lsls	r3, r3, #13
 801f706:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    tmp1 = (z2 - z3) << CONST_BITS;
 801f70a:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801f70e:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801f712:	1ad3      	subs	r3, r2, r3
 801f714:	035b      	lsls	r3, r3, #13
 801f716:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    
    tmp10 = tmp0 + tmp2;
 801f71a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801f71e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801f722:	4413      	add	r3, r2
 801f724:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
    tmp13 = tmp0 - tmp2;
 801f728:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801f72c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801f730:	1ad3      	subs	r3, r2, r3
 801f732:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    tmp11 = tmp1 + tmp3;
 801f736:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801f73a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801f73e:	4413      	add	r3, r2
 801f740:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    tmp12 = tmp1 - tmp3;
 801f744:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801f748:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801f74c:	1ad3      	subs	r3, r2, r3
 801f74e:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    
    /* Odd part per figure 8; the matrix is unitary and hence its
     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
     */
    
    tmp0 = (INT32) wsptr[7];
 801f752:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801f756:	331c      	adds	r3, #28
 801f758:	681b      	ldr	r3, [r3, #0]
 801f75a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    tmp1 = (INT32) wsptr[5];
 801f75e:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801f762:	3314      	adds	r3, #20
 801f764:	681b      	ldr	r3, [r3, #0]
 801f766:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    tmp2 = (INT32) wsptr[3];
 801f76a:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801f76e:	330c      	adds	r3, #12
 801f770:	681b      	ldr	r3, [r3, #0]
 801f772:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    tmp3 = (INT32) wsptr[1];
 801f776:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801f77a:	3304      	adds	r3, #4
 801f77c:	681b      	ldr	r3, [r3, #0]
 801f77e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    
    z2 = tmp0 + tmp2;
 801f782:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801f786:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801f78a:	4413      	add	r3, r2
 801f78c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    z3 = tmp1 + tmp3;
 801f790:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801f794:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801f798:	4413      	add	r3, r2
 801f79a:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258

    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801f79e:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801f7a2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801f7a6:	4413      	add	r3, r2
 801f7a8:	f242 52a1 	movw	r2, #9633	; 0x25a1
 801f7ac:	fb02 f303 	mul.w	r3, r2, r3
 801f7b0:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
 801f7b4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801f7b8:	4a86      	ldr	r2, [pc, #536]	; (801f9d4 <jpeg_idct_8x16+0x9e4>)
 801f7ba:	fb02 f303 	mul.w	r3, r2, r3
 801f7be:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
 801f7c2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801f7c6:	4a84      	ldr	r2, [pc, #528]	; (801f9d8 <jpeg_idct_8x16+0x9e8>)
 801f7c8:	fb02 f303 	mul.w	r3, r2, r3
 801f7cc:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    z2 += z1;
 801f7d0:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801f7d4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801f7d8:	4413      	add	r3, r2
 801f7da:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    z3 += z1;
 801f7de:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 801f7e2:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801f7e6:	4413      	add	r3, r2
 801f7e8:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258

    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 801f7ec:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801f7f0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801f7f4:	4413      	add	r3, r2
 801f7f6:	4a79      	ldr	r2, [pc, #484]	; (801f9dc <jpeg_idct_8x16+0x9ec>)
 801f7f8:	fb02 f303 	mul.w	r3, r2, r3
 801f7fc:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
 801f800:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801f804:	f640 128e 	movw	r2, #2446	; 0x98e
 801f808:	fb02 f303 	mul.w	r3, r2, r3
 801f80c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
 801f810:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801f814:	f243 020b 	movw	r2, #12299	; 0x300b
 801f818:	fb02 f303 	mul.w	r3, r2, r3
 801f81c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    tmp0 += z1 + z2;
 801f820:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 801f824:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801f828:	4413      	add	r3, r2
 801f82a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801f82e:	4413      	add	r3, r2
 801f830:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    tmp3 += z1 + z3;
 801f834:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 801f838:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801f83c:	4413      	add	r3, r2
 801f83e:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 801f842:	4413      	add	r3, r2
 801f844:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801f848:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801f84c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801f850:	4413      	add	r3, r2
 801f852:	4a63      	ldr	r2, [pc, #396]	; (801f9e0 <jpeg_idct_8x16+0x9f0>)
 801f854:	fb02 f303 	mul.w	r3, r2, r3
 801f858:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
 801f85c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801f860:	f244 12b3 	movw	r2, #16819	; 0x41b3
 801f864:	fb02 f303 	mul.w	r3, r2, r3
 801f868:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
 801f86c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801f870:	f246 2254 	movw	r2, #25172	; 0x6254
 801f874:	fb02 f303 	mul.w	r3, r2, r3
 801f878:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    tmp1 += z1 + z3;
 801f87c:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 801f880:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801f884:	4413      	add	r3, r2
 801f886:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801f88a:	4413      	add	r3, r2
 801f88c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    tmp2 += z1 + z2;
 801f890:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 801f894:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801f898:	4413      	add	r3, r2
 801f89a:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 801f89e:	4413      	add	r3, r2
 801f8a0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    
    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
    
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801f8a4:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801f8a8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801f8ac:	4413      	add	r3, r2
 801f8ae:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801f8b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801f8b4:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801f8b8:	4413      	add	r3, r2
 801f8ba:	781a      	ldrb	r2, [r3, #0]
 801f8bc:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801f8c0:	701a      	strb	r2, [r3, #0]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801f8c2:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801f8c6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801f8ca:	1ad3      	subs	r3, r2, r3
 801f8cc:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801f8ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801f8d2:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801f8d6:	441a      	add	r2, r3
 801f8d8:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801f8dc:	3307      	adds	r3, #7
 801f8de:	7812      	ldrb	r2, [r2, #0]
 801f8e0:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 801f8e2:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801f8e6:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801f8ea:	4413      	add	r3, r2
 801f8ec:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801f8ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 801f8f2:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801f8f6:	441a      	add	r2, r3
 801f8f8:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801f8fc:	3301      	adds	r3, #1
 801f8fe:	7812      	ldrb	r2, [r2, #0]
 801f900:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 801f902:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801f906:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801f90a:	1ad3      	subs	r3, r2, r3
 801f90c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801f90e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 801f912:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801f916:	441a      	add	r2, r3
 801f918:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801f91c:	3306      	adds	r3, #6
 801f91e:	7812      	ldrb	r2, [r2, #0]
 801f920:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 801f922:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 801f926:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801f92a:	4413      	add	r3, r2
 801f92c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801f92e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 801f932:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801f936:	441a      	add	r2, r3
 801f938:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801f93c:	3302      	adds	r3, #2
 801f93e:	7812      	ldrb	r2, [r2, #0]
 801f940:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 801f942:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 801f946:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801f94a:	1ad3      	subs	r3, r2, r3
 801f94c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801f94e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 801f952:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801f956:	441a      	add	r2, r3
 801f958:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801f95c:	3305      	adds	r3, #5
 801f95e:	7812      	ldrb	r2, [r2, #0]
 801f960:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 801f962:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801f966:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801f96a:	4413      	add	r3, r2
 801f96c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801f96e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 801f972:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801f976:	441a      	add	r2, r3
 801f978:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801f97c:	3303      	adds	r3, #3
 801f97e:	7812      	ldrb	r2, [r2, #0]
 801f980:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 801f982:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801f986:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801f98a:	1ad3      	subs	r3, r2, r3
 801f98c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801f98e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 801f992:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801f996:	441a      	add	r2, r3
 801f998:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801f99c:	3304      	adds	r3, #4
 801f99e:	7812      	ldrb	r2, [r2, #0]
 801f9a0:	701a      	strb	r2, [r3, #0]
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 801f9a2:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801f9a6:	3320      	adds	r3, #32
 801f9a8:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
  for (ctr = 0; ctr < 16; ctr++) {
 801f9ac:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 801f9b0:	3301      	adds	r3, #1
 801f9b2:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 801f9b6:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 801f9ba:	2b0f      	cmp	r3, #15
 801f9bc:	f77f ae59 	ble.w	801f672 <jpeg_idct_8x16+0x682>
  }
}
 801f9c0:	bf00      	nop
 801f9c2:	bf00      	nop
 801f9c4:	f507 771e 	add.w	r7, r7, #632	; 0x278
 801f9c8:	46bd      	mov	sp, r7
 801f9ca:	bc90      	pop	{r4, r7}
 801f9cc:	4770      	bx	lr
 801f9ce:	bf00      	nop
 801f9d0:	ffffc4df 	.word	0xffffc4df
 801f9d4:	ffffc13b 	.word	0xffffc13b
 801f9d8:	fffff384 	.word	0xfffff384
 801f9dc:	ffffe333 	.word	0xffffe333
 801f9e0:	ffffadfd 	.word	0xffffadfd

0801f9e4 <jpeg_idct_7x14>:

GLOBAL(void)
jpeg_idct_7x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801f9e4:	b490      	push	{r4, r7}
 801f9e6:	b0fe      	sub	sp, #504	; 0x1f8
 801f9e8:	af00      	add	r7, sp, #0
 801f9ea:	f107 040c 	add.w	r4, r7, #12
 801f9ee:	6020      	str	r0, [r4, #0]
 801f9f0:	f107 0008 	add.w	r0, r7, #8
 801f9f4:	6001      	str	r1, [r0, #0]
 801f9f6:	1d39      	adds	r1, r7, #4
 801f9f8:	600a      	str	r2, [r1, #0]
 801f9fa:	463a      	mov	r2, r7
 801f9fc:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801f9fe:	f107 030c 	add.w	r3, r7, #12
 801fa02:	681b      	ldr	r3, [r3, #0]
 801fa04:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801fa08:	3380      	adds	r3, #128	; 0x80
 801fa0a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  inptr = coef_block;
 801fa0e:	1d3b      	adds	r3, r7, #4
 801fa10:	681b      	ldr	r3, [r3, #0]
 801fa12:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801fa16:	f107 0308 	add.w	r3, r7, #8
 801fa1a:	681b      	ldr	r3, [r3, #0]
 801fa1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fa1e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  wsptr = workspace;
 801fa22:	f107 0310 	add.w	r3, r7, #16
 801fa26:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 801fa2a:	2300      	movs	r3, #0
 801fa2c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 801fa30:	e267      	b.n	801ff02 <jpeg_idct_7x14+0x51e>
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801fa32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801fa36:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fa3a:	461a      	mov	r2, r3
 801fa3c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801fa40:	681b      	ldr	r3, [r3, #0]
 801fa42:	fb03 f302 	mul.w	r3, r3, r2
 801fa46:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    z1 <<= CONST_BITS;
 801fa4a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 801fa4e:	035b      	lsls	r3, r3, #13
 801fa50:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801fa54:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 801fa58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801fa5c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801fa60:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801fa64:	3340      	adds	r3, #64	; 0x40
 801fa66:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fa6a:	461a      	mov	r2, r3
 801fa6c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801fa70:	3380      	adds	r3, #128	; 0x80
 801fa72:	681b      	ldr	r3, [r3, #0]
 801fa74:	fb03 f302 	mul.w	r3, r3, r2
 801fa78:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801fa7c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801fa80:	f642 02c6 	movw	r2, #10438	; 0x28c6
 801fa84:	fb02 f303 	mul.w	r3, r2, r3
 801fa88:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 801fa8c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801fa90:	f640 2212 	movw	r2, #2578	; 0xa12
 801fa94:	fb02 f303 	mul.w	r3, r2, r3
 801fa98:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801fa9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801faa0:	f641 4237 	movw	r2, #7223	; 0x1c37
 801faa4:	fb02 f303 	mul.w	r3, r2, r3
 801faa8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

    tmp10 = z1 + z2;
 801faac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801fab0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801fab4:	4413      	add	r3, r2
 801fab6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    tmp11 = z1 + z3;
 801faba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801fabe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801fac2:	4413      	add	r3, r2
 801fac4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    tmp12 = z1 - z4;
 801fac8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801facc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801fad0:	1ad3      	subs	r3, r2, r3
 801fad2:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 801fad6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 801fada:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801fade:	441a      	add	r2, r3
 801fae0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801fae4:	1ad3      	subs	r3, r2, r3
 801fae6:	005b      	lsls	r3, r3, #1
 801fae8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801faec:	1ad3      	subs	r3, r2, r3
 801faee:	12db      	asrs	r3, r3, #11
 801faf0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
			CONST_BITS-PASS1_BITS);

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801faf4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801faf8:	3320      	adds	r3, #32
 801fafa:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fafe:	461a      	mov	r2, r3
 801fb00:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801fb04:	3340      	adds	r3, #64	; 0x40
 801fb06:	681b      	ldr	r3, [r3, #0]
 801fb08:	fb03 f302 	mul.w	r3, r3, r2
 801fb0c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801fb10:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801fb14:	3360      	adds	r3, #96	; 0x60
 801fb16:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fb1a:	461a      	mov	r2, r3
 801fb1c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801fb20:	33c0      	adds	r3, #192	; 0xc0
 801fb22:	681b      	ldr	r3, [r3, #0]
 801fb24:	fb03 f302 	mul.w	r3, r3, r2
 801fb28:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801fb2c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801fb30:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801fb34:	4413      	add	r3, r2
 801fb36:	f242 3262 	movw	r2, #9058	; 0x2362
 801fb3a:	fb02 f303 	mul.w	r3, r2, r3
 801fb3e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 801fb42:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 801fb46:	f640 02bd 	movw	r2, #2237	; 0x8bd
 801fb4a:	fb02 f303 	mul.w	r3, r2, r3
 801fb4e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 801fb52:	4413      	add	r3, r2
 801fb54:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 801fb58:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801fb5c:	4aef      	ldr	r2, [pc, #956]	; (801ff1c <jpeg_idct_7x14+0x538>)
 801fb5e:	fb02 f303 	mul.w	r3, r2, r3
 801fb62:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 801fb66:	4413      	add	r3, r2
 801fb68:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 801fb6c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 801fb70:	f241 32a3 	movw	r2, #5027	; 0x13a3
 801fb74:	fb02 f203 	mul.w	r2, r2, r3
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 801fb78:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801fb7c:	49e8      	ldr	r1, [pc, #928]	; (801ff20 <jpeg_idct_7x14+0x53c>)
 801fb7e:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 801fb82:	4413      	add	r3, r2
 801fb84:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

    tmp20 = tmp10 + tmp13;
 801fb88:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801fb8c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 801fb90:	4413      	add	r3, r2
 801fb92:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    tmp26 = tmp10 - tmp13;
 801fb96:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801fb9a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 801fb9e:	1ad3      	subs	r3, r2, r3
 801fba0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    tmp21 = tmp11 + tmp14;
 801fba4:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 801fba8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801fbac:	4413      	add	r3, r2
 801fbae:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    tmp25 = tmp11 - tmp14;
 801fbb2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 801fbb6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801fbba:	1ad3      	subs	r3, r2, r3
 801fbbc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    tmp22 = tmp12 + tmp15;
 801fbc0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 801fbc4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 801fbc8:	4413      	add	r3, r2
 801fbca:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    tmp24 = tmp12 - tmp15;
 801fbce:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 801fbd2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 801fbd6:	1ad3      	subs	r3, r2, r3
 801fbd8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801fbdc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801fbe0:	3310      	adds	r3, #16
 801fbe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fbe6:	461a      	mov	r2, r3
 801fbe8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801fbec:	3320      	adds	r3, #32
 801fbee:	681b      	ldr	r3, [r3, #0]
 801fbf0:	fb03 f302 	mul.w	r3, r3, r2
 801fbf4:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801fbf8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801fbfc:	3330      	adds	r3, #48	; 0x30
 801fbfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fc02:	461a      	mov	r2, r3
 801fc04:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801fc08:	3360      	adds	r3, #96	; 0x60
 801fc0a:	681b      	ldr	r3, [r3, #0]
 801fc0c:	fb03 f302 	mul.w	r3, r3, r2
 801fc10:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801fc14:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801fc18:	3350      	adds	r3, #80	; 0x50
 801fc1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fc1e:	461a      	mov	r2, r3
 801fc20:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801fc24:	33a0      	adds	r3, #160	; 0xa0
 801fc26:	681b      	ldr	r3, [r3, #0]
 801fc28:	fb03 f302 	mul.w	r3, r3, r2
 801fc2c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801fc30:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801fc34:	3370      	adds	r3, #112	; 0x70
 801fc36:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fc3a:	461a      	mov	r2, r3
 801fc3c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801fc40:	33e0      	adds	r3, #224	; 0xe0
 801fc42:	681b      	ldr	r3, [r3, #0]
 801fc44:	fb03 f302 	mul.w	r3, r3, r2
 801fc48:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp13 = z4 << CONST_BITS;
 801fc4c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801fc50:	035b      	lsls	r3, r3, #13
 801fc52:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0

    tmp14 = z1 + z3;
 801fc56:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801fc5a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801fc5e:	4413      	add	r3, r2
 801fc60:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801fc64:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801fc68:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801fc6c:	4413      	add	r3, r2
 801fc6e:	f642 22b7 	movw	r2, #10935	; 0x2ab7
 801fc72:	fb02 f303 	mul.w	r3, r2, r3
 801fc76:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 801fc7a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801fc7e:	f242 6252 	movw	r2, #9810	; 0x2652
 801fc82:	fb02 f303 	mul.w	r3, r2, r3
 801fc86:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 801fc8a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 801fc8e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801fc92:	441a      	add	r2, r3
 801fc94:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 801fc98:	441a      	add	r2, r3
 801fc9a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 801fc9e:	49a1      	ldr	r1, [pc, #644]	; (801ff24 <jpeg_idct_7x14+0x540>)
 801fca0:	fb01 f303 	mul.w	r3, r1, r3
 801fca4:	4413      	add	r3, r2
 801fca6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 801fcaa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801fcae:	f641 0214 	movw	r2, #6164	; 0x1814
 801fcb2:	fb02 f303 	mul.w	r3, r2, r3
 801fcb6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 801fcba:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 801fcbe:	4a9a      	ldr	r2, [pc, #616]	; (801ff28 <jpeg_idct_7x14+0x544>)
 801fcc0:	fb02 f303 	mul.w	r3, r2, r3
 801fcc4:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 801fcc8:	4413      	add	r3, r2
 801fcca:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    z1    -= z2;
 801fcce:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801fcd2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801fcd6:	1ad3      	subs	r3, r2, r3
 801fcd8:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 801fcdc:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 801fce0:	f640 62f2 	movw	r2, #3826	; 0xef2
 801fce4:	fb02 f203 	mul.w	r2, r2, r3
 801fce8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 801fcec:	1ad3      	subs	r3, r2, r3
 801fcee:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    tmp16 += tmp15;
 801fcf2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 801fcf6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 801fcfa:	4413      	add	r3, r2
 801fcfc:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    z1    += z4;
 801fd00:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801fd04:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801fd08:	4413      	add	r3, r2
 801fd0a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 801fd0e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 801fd12:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801fd16:	4413      	add	r3, r2
 801fd18:	f46f 62a2 	mvn.w	r2, #1296	; 0x510
 801fd1c:	fb02 f203 	mul.w	r2, r2, r3
 801fd20:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 801fd24:	1ad3      	subs	r3, r2, r3
 801fd26:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 801fd2a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801fd2e:	4a7f      	ldr	r2, [pc, #508]	; (801ff2c <jpeg_idct_7x14+0x548>)
 801fd30:	fb02 f203 	mul.w	r2, r2, r3
 801fd34:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801fd38:	4413      	add	r3, r2
 801fd3a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 801fd3e:	4413      	add	r3, r2
 801fd40:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 801fd44:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801fd48:	4a79      	ldr	r2, [pc, #484]	; (801ff30 <jpeg_idct_7x14+0x54c>)
 801fd4a:	fb02 f203 	mul.w	r2, r2, r3
 801fd4e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801fd52:	4413      	add	r3, r2
 801fd54:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 801fd58:	4413      	add	r3, r2
 801fd5a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801fd5e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 801fd62:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801fd66:	1ad3      	subs	r3, r2, r3
 801fd68:	f642 42f8 	movw	r2, #11512	; 0x2cf8
 801fd6c:	fb02 f303 	mul.w	r3, r2, r3
 801fd70:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801fd74:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 801fd78:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 801fd7c:	441a      	add	r2, r3
 801fd7e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801fd82:	496c      	ldr	r1, [pc, #432]	; (801ff34 <jpeg_idct_7x14+0x550>)
 801fd84:	fb01 f303 	mul.w	r3, r1, r3
 801fd88:	4413      	add	r3, r2
 801fd8a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 801fd8e:	4413      	add	r3, r2
 801fd90:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 801fd94:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801fd98:	f241 5299 	movw	r2, #5529	; 0x1599
 801fd9c:	fb02 f203 	mul.w	r2, r2, r3
 801fda0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801fda4:	4413      	add	r3, r2
 801fda6:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801fdaa:	4413      	add	r3, r2
 801fdac:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

    tmp13 = (z1 - z3) << PASS1_BITS;
 801fdb0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801fdb4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801fdb8:	1ad3      	subs	r3, r2, r3
 801fdba:	009b      	lsls	r3, r3, #2
 801fdbc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0

    /* Final output stage */

    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801fdc0:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 801fdc4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801fdc8:	4413      	add	r3, r2
 801fdca:	12da      	asrs	r2, r3, #11
 801fdcc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801fdd0:	601a      	str	r2, [r3, #0]
    wsptr[7*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801fdd2:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 801fdd6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801fdda:	1ad2      	subs	r2, r2, r3
 801fddc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801fde0:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801fde4:	12d2      	asrs	r2, r2, #11
 801fde6:	601a      	str	r2, [r3, #0]
    wsptr[7*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801fde8:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 801fdec:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801fdf0:	441a      	add	r2, r3
 801fdf2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801fdf6:	331c      	adds	r3, #28
 801fdf8:	12d2      	asrs	r2, r2, #11
 801fdfa:	601a      	str	r2, [r3, #0]
    wsptr[7*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801fdfc:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 801fe00:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801fe04:	1ad2      	subs	r2, r2, r3
 801fe06:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801fe0a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801fe0e:	12d2      	asrs	r2, r2, #11
 801fe10:	601a      	str	r2, [r3, #0]
    wsptr[7*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801fe12:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 801fe16:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801fe1a:	441a      	add	r2, r3
 801fe1c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801fe20:	3338      	adds	r3, #56	; 0x38
 801fe22:	12d2      	asrs	r2, r2, #11
 801fe24:	601a      	str	r2, [r3, #0]
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801fe26:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 801fe2a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801fe2e:	1ad2      	subs	r2, r2, r3
 801fe30:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801fe34:	f503 739a 	add.w	r3, r3, #308	; 0x134
 801fe38:	12d2      	asrs	r2, r2, #11
 801fe3a:	601a      	str	r2, [r3, #0]
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 801fe3c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801fe40:	3354      	adds	r3, #84	; 0x54
 801fe42:	f8d7 11dc 	ldr.w	r1, [r7, #476]	; 0x1dc
 801fe46:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 801fe4a:	440a      	add	r2, r1
 801fe4c:	601a      	str	r2, [r3, #0]
    wsptr[7*10] = (int) (tmp23 - tmp13);
 801fe4e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801fe52:	f503 738c 	add.w	r3, r3, #280	; 0x118
 801fe56:	f8d7 11dc 	ldr.w	r1, [r7, #476]	; 0x1dc
 801fe5a:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 801fe5e:	1a8a      	subs	r2, r1, r2
 801fe60:	601a      	str	r2, [r3, #0]
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801fe62:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801fe66:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801fe6a:	441a      	add	r2, r3
 801fe6c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801fe70:	3370      	adds	r3, #112	; 0x70
 801fe72:	12d2      	asrs	r2, r2, #11
 801fe74:	601a      	str	r2, [r3, #0]
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801fe76:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801fe7a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801fe7e:	1ad2      	subs	r2, r2, r3
 801fe80:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801fe84:	33fc      	adds	r3, #252	; 0xfc
 801fe86:	12d2      	asrs	r2, r2, #11
 801fe88:	601a      	str	r2, [r3, #0]
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801fe8a:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 801fe8e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 801fe92:	441a      	add	r2, r3
 801fe94:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801fe98:	338c      	adds	r3, #140	; 0x8c
 801fe9a:	12d2      	asrs	r2, r2, #11
 801fe9c:	601a      	str	r2, [r3, #0]
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801fe9e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 801fea2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 801fea6:	1ad2      	subs	r2, r2, r3
 801fea8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801feac:	33e0      	adds	r3, #224	; 0xe0
 801feae:	12d2      	asrs	r2, r2, #11
 801feb0:	601a      	str	r2, [r3, #0]
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 801feb2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 801feb6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801feba:	441a      	add	r2, r3
 801febc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801fec0:	33a8      	adds	r3, #168	; 0xa8
 801fec2:	12d2      	asrs	r2, r2, #11
 801fec4:	601a      	str	r2, [r3, #0]
    wsptr[7*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 801fec6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 801feca:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801fece:	1ad2      	subs	r2, r2, r3
 801fed0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801fed4:	33c4      	adds	r3, #196	; 0xc4
 801fed6:	12d2      	asrs	r2, r2, #11
 801fed8:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 801feda:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 801fede:	3301      	adds	r3, #1
 801fee0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 801fee4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801fee8:	3302      	adds	r3, #2
 801feea:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 801feee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801fef2:	3304      	adds	r3, #4
 801fef4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 801fef8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801fefc:	3304      	adds	r3, #4
 801fefe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801ff02:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 801ff06:	2b06      	cmp	r3, #6
 801ff08:	f77f ad93 	ble.w	801fa32 <jpeg_idct_7x14+0x4e>
  }

  /* Pass 2: process 14 rows from work array, store into output array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  wsptr = workspace;
 801ff0c:	f107 0310 	add.w	r3, r7, #16
 801ff10:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  for (ctr = 0; ctr < 14; ctr++) {
 801ff14:	2300      	movs	r3, #0
 801ff16:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 801ff1a:	e178      	b.n	802020e <jpeg_idct_7x14+0x82a>
 801ff1c:	ffffc8fc 	.word	0xffffc8fc
 801ff20:	ffffd3e1 	.word	0xffffd3e1
 801ff24:	ffffdbf0 	.word	0xffffdbf0
 801ff28:	ffffde0b 	.word	0xffffde0b
 801ff2c:	fffff26e 	.word	0xfffff26e
 801ff30:	ffffb409 	.word	0xffffb409
 801ff34:	ffffc9e6 	.word	0xffffc9e6
    outptr = output_buf[ctr] + output_col;
 801ff38:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 801ff3c:	009b      	lsls	r3, r3, #2
 801ff3e:	463a      	mov	r2, r7
 801ff40:	6812      	ldr	r2, [r2, #0]
 801ff42:	4413      	add	r3, r2
 801ff44:	681a      	ldr	r2, [r3, #0]
 801ff46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801ff4a:	4413      	add	r3, r2
 801ff4c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801ff50:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801ff54:	681b      	ldr	r3, [r3, #0]
 801ff56:	3310      	adds	r3, #16
 801ff58:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp23 <<= CONST_BITS;
 801ff5c:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 801ff60:	035b      	lsls	r3, r3, #13
 801ff62:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

    z1 = (INT32) wsptr[2];
 801ff66:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801ff6a:	3308      	adds	r3, #8
 801ff6c:	681b      	ldr	r3, [r3, #0]
 801ff6e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    z2 = (INT32) wsptr[4];
 801ff72:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801ff76:	3310      	adds	r3, #16
 801ff78:	681b      	ldr	r3, [r3, #0]
 801ff7a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
    z3 = (INT32) wsptr[6];
 801ff7e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801ff82:	3318      	adds	r3, #24
 801ff84:	681b      	ldr	r3, [r3, #0]
 801ff86:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 801ff8a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 801ff8e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801ff92:	1ad3      	subs	r3, r2, r3
 801ff94:	f641 4237 	movw	r2, #7223	; 0x1c37
 801ff98:	fb02 f303 	mul.w	r3, r2, r3
 801ff9c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 801ffa0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801ffa4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801ffa8:	1ad3      	subs	r3, r2, r3
 801ffaa:	f640 2212 	movw	r2, #2578	; 0xa12
 801ffae:	fb02 f303 	mul.w	r3, r2, r3
 801ffb2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801ffb6:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 801ffba:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 801ffbe:	441a      	add	r2, r3
 801ffc0:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 801ffc4:	441a      	add	r2, r3
 801ffc6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801ffca:	4997      	ldr	r1, [pc, #604]	; (8020228 <jpeg_idct_7x14+0x844>)
 801ffcc:	fb01 f303 	mul.w	r3, r1, r3
 801ffd0:	4413      	add	r3, r2
 801ffd2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    tmp10 = z1 + z3;
 801ffd6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801ffda:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801ffde:	4413      	add	r3, r2
 801ffe0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    z2 -= tmp10;
 801ffe4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 801ffe8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801ffec:	1ad3      	subs	r3, r2, r3
 801ffee:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 801fff2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801fff6:	f642 02c6 	movw	r2, #10438	; 0x28c6
 801fffa:	fb02 f303 	mul.w	r3, r2, r3
 801fffe:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8020002:	4413      	add	r3, r2
 8020004:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8020008:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 802000c:	f46f 721f 	mvn.w	r2, #636	; 0x27c
 8020010:	fb02 f203 	mul.w	r2, r2, r3
 8020014:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8020018:	4413      	add	r3, r2
 802001a:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 802001e:	4413      	add	r3, r2
 8020020:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8020024:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8020028:	4a80      	ldr	r2, [pc, #512]	; (802022c <jpeg_idct_7x14+0x848>)
 802002a:	fb02 f203 	mul.w	r2, r2, r3
 802002e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8020032:	4413      	add	r3, r2
 8020034:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8020038:	4413      	add	r3, r2
 802003a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 802003e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8020042:	f642 5241 	movw	r2, #11585	; 0x2d41
 8020046:	fb02 f303 	mul.w	r3, r2, r3
 802004a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 802004e:	4413      	add	r3, r2
 8020050:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

    /* Odd part */

    z1 = (INT32) wsptr[1];
 8020054:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020058:	3304      	adds	r3, #4
 802005a:	681b      	ldr	r3, [r3, #0]
 802005c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    z2 = (INT32) wsptr[3];
 8020060:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020064:	330c      	adds	r3, #12
 8020066:	681b      	ldr	r3, [r3, #0]
 8020068:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
    z3 = (INT32) wsptr[5];
 802006c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8020070:	3314      	adds	r3, #20
 8020072:	681b      	ldr	r3, [r3, #0]
 8020074:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8020078:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 802007c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8020080:	4413      	add	r3, r2
 8020082:	f641 52ef 	movw	r2, #7663	; 0x1def
 8020086:	fb02 f303 	mul.w	r3, r2, r3
 802008a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 802008e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8020092:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8020096:	1ad3      	subs	r3, r2, r3
 8020098:	f240 5273 	movw	r2, #1395	; 0x573
 802009c:	fb02 f303 	mul.w	r3, r2, r3
 80200a0:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    tmp10 = tmp11 - tmp12;
 80200a4:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80200a8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80200ac:	1ad3      	subs	r3, r2, r3
 80200ae:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    tmp11 += tmp12;
 80200b2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80200b6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80200ba:	4413      	add	r3, r2
 80200bc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80200c0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80200c4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80200c8:	4413      	add	r3, r2
 80200ca:	4a59      	ldr	r2, [pc, #356]	; (8020230 <jpeg_idct_7x14+0x84c>)
 80200cc:	fb02 f303 	mul.w	r3, r2, r3
 80200d0:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    tmp11 += tmp12;
 80200d4:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80200d8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80200dc:	4413      	add	r3, r2
 80200de:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80200e2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80200e6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80200ea:	4413      	add	r3, r2
 80200ec:	f241 32a3 	movw	r2, #5027	; 0x13a3
 80200f0:	fb02 f303 	mul.w	r3, r2, r3
 80200f4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
    tmp10 += z2;
 80200f8:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80200fc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8020100:	4413      	add	r3, r2
 8020102:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8020106:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 802010a:	f643 32de 	movw	r2, #15326	; 0x3bde
 802010e:	fb02 f203 	mul.w	r2, r2, r3
 8020112:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8020116:	4413      	add	r3, r2
 8020118:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 802011c:	4413      	add	r3, r2
 802011e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8020122:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8020126:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 802012a:	4413      	add	r3, r2
 802012c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 802012e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8020132:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8020136:	4413      	add	r3, r2
 8020138:	781a      	ldrb	r2, [r3, #0]
 802013a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 802013e:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8020140:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8020144:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8020148:	1ad3      	subs	r3, r2, r3
 802014a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 802014c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8020150:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8020154:	441a      	add	r2, r3
 8020156:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 802015a:	3306      	adds	r3, #6
 802015c:	7812      	ldrb	r2, [r2, #0]
 802015e:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8020160:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8020164:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8020168:	4413      	add	r3, r2
 802016a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 802016c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8020170:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8020174:	441a      	add	r2, r3
 8020176:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 802017a:	3301      	adds	r3, #1
 802017c:	7812      	ldrb	r2, [r2, #0]
 802017e:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8020180:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8020184:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8020188:	1ad3      	subs	r3, r2, r3
 802018a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 802018c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8020190:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8020194:	441a      	add	r2, r3
 8020196:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 802019a:	3305      	adds	r3, #5
 802019c:	7812      	ldrb	r2, [r2, #0]
 802019e:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80201a0:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 80201a4:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80201a8:	4413      	add	r3, r2
 80201aa:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80201ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80201b0:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 80201b4:	441a      	add	r2, r3
 80201b6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80201ba:	3302      	adds	r3, #2
 80201bc:	7812      	ldrb	r2, [r2, #0]
 80201be:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80201c0:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 80201c4:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80201c8:	1ad3      	subs	r3, r2, r3
 80201ca:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80201cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80201d0:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 80201d4:	441a      	add	r2, r3
 80201d6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80201da:	3304      	adds	r3, #4
 80201dc:	7812      	ldrb	r2, [r2, #0]
 80201de:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 80201e0:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80201e4:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80201e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 80201ea:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 80201ee:	441a      	add	r2, r3
 80201f0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80201f4:	3303      	adds	r3, #3
 80201f6:	7812      	ldrb	r2, [r2, #0]
 80201f8:	701a      	strb	r2, [r3, #0]

    wsptr += 7;		/* advance pointer to next row */
 80201fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80201fe:	331c      	adds	r3, #28
 8020200:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  for (ctr = 0; ctr < 14; ctr++) {
 8020204:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8020208:	3301      	adds	r3, #1
 802020a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 802020e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8020212:	2b0d      	cmp	r3, #13
 8020214:	f77f ae90 	ble.w	801ff38 <jpeg_idct_7x14+0x554>
  }
}
 8020218:	bf00      	nop
 802021a:	bf00      	nop
 802021c:	f507 77fc 	add.w	r7, r7, #504	; 0x1f8
 8020220:	46bd      	mov	sp, r7
 8020222:	bc90      	pop	{r4, r7}
 8020224:	4770      	bx	lr
 8020226:	bf00      	nop
 8020228:	ffffc515 	.word	0xffffc515
 802022c:	ffffb0f1 	.word	0xffffb0f1
 8020230:	ffffd3e1 	.word	0xffffd3e1

08020234 <jpeg_idct_6x12>:

GLOBAL(void)
jpeg_idct_6x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8020234:	b490      	push	{r4, r7}
 8020236:	b0e2      	sub	sp, #392	; 0x188
 8020238:	af00      	add	r7, sp, #0
 802023a:	f107 040c 	add.w	r4, r7, #12
 802023e:	6020      	str	r0, [r4, #0]
 8020240:	f107 0008 	add.w	r0, r7, #8
 8020244:	6001      	str	r1, [r0, #0]
 8020246:	1d39      	adds	r1, r7, #4
 8020248:	600a      	str	r2, [r1, #0]
 802024a:	463a      	mov	r2, r7
 802024c:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 802024e:	f107 030c 	add.w	r3, r7, #12
 8020252:	681b      	ldr	r3, [r3, #0]
 8020254:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8020258:	3380      	adds	r3, #128	; 0x80
 802025a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  inptr = coef_block;
 802025e:	1d3b      	adds	r3, r7, #4
 8020260:	681b      	ldr	r3, [r3, #0]
 8020262:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8020266:	f107 0308 	add.w	r3, r7, #8
 802026a:	681b      	ldr	r3, [r3, #0]
 802026c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802026e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
  wsptr = workspace;
 8020272:	f107 0310 	add.w	r3, r7, #16
 8020276:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 802027a:	2300      	movs	r3, #0
 802027c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8020280:	e215      	b.n	80206ae <jpeg_idct_6x12+0x47a>
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8020282:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8020286:	f9b3 3000 	ldrsh.w	r3, [r3]
 802028a:	461a      	mov	r2, r3
 802028c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8020290:	681b      	ldr	r3, [r3, #0]
 8020292:	fb03 f302 	mul.w	r3, r3, r2
 8020296:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    z3 <<= CONST_BITS;
 802029a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 802029e:	035b      	lsls	r3, r3, #13
 80202a0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    /* Add fudge factor here for final descale. */
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 80202a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80202a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80202ac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80202b0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80202b4:	3340      	adds	r3, #64	; 0x40
 80202b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80202ba:	461a      	mov	r2, r3
 80202bc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80202c0:	3380      	adds	r3, #128	; 0x80
 80202c2:	681b      	ldr	r3, [r3, #0]
 80202c4:	fb03 f302 	mul.w	r3, r3, r2
 80202c8:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80202cc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80202d0:	f242 7231 	movw	r2, #10033	; 0x2731
 80202d4:	fb02 f303 	mul.w	r3, r2, r3
 80202d8:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

    tmp10 = z3 + z4;
 80202dc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80202e0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80202e4:	4413      	add	r3, r2
 80202e6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    tmp11 = z3 - z4;
 80202ea:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80202ee:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80202f2:	1ad3      	subs	r3, r2, r3
 80202f4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80202f8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80202fc:	3320      	adds	r3, #32
 80202fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020302:	461a      	mov	r2, r3
 8020304:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8020308:	3340      	adds	r3, #64	; 0x40
 802030a:	681b      	ldr	r3, [r3, #0]
 802030c:	fb03 f302 	mul.w	r3, r3, r2
 8020310:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8020314:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8020318:	f642 32b6 	movw	r2, #11190	; 0x2bb6
 802031c:	fb02 f303 	mul.w	r3, r2, r3
 8020320:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    z1 <<= CONST_BITS;
 8020324:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8020328:	035b      	lsls	r3, r3, #13
 802032a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 802032e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8020332:	3360      	adds	r3, #96	; 0x60
 8020334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020338:	461a      	mov	r2, r3
 802033a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 802033e:	33c0      	adds	r3, #192	; 0xc0
 8020340:	681b      	ldr	r3, [r3, #0]
 8020342:	fb03 f302 	mul.w	r3, r3, r2
 8020346:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    z2 <<= CONST_BITS;
 802034a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 802034e:	035b      	lsls	r3, r3, #13
 8020350:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

    tmp12 = z1 - z2;
 8020354:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8020358:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 802035c:	1ad3      	subs	r3, r2, r3
 802035e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

    tmp21 = z3 + tmp12;
 8020362:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8020366:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 802036a:	4413      	add	r3, r2
 802036c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    tmp24 = z3 - tmp12;
 8020370:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8020374:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8020378:	1ad3      	subs	r3, r2, r3
 802037a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

    tmp12 = z4 + z2;
 802037e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8020382:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8020386:	4413      	add	r3, r2
 8020388:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

    tmp20 = tmp10 + tmp12;
 802038c:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8020390:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8020394:	4413      	add	r3, r2
 8020396:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp25 = tmp10 - tmp12;
 802039a:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 802039e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80203a2:	1ad3      	subs	r3, r2, r3
 80203a4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

    tmp12 = z4 - z1 - z2;
 80203a8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80203ac:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80203b0:	1ad2      	subs	r2, r2, r3
 80203b2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80203b6:	1ad3      	subs	r3, r2, r3
 80203b8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

    tmp22 = tmp11 + tmp12;
 80203bc:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80203c0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80203c4:	4413      	add	r3, r2
 80203c6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    tmp23 = tmp11 - tmp12;
 80203ca:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80203ce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80203d2:	1ad3      	subs	r3, r2, r3
 80203d4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80203d8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80203dc:	3310      	adds	r3, #16
 80203de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80203e2:	461a      	mov	r2, r3
 80203e4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80203e8:	3320      	adds	r3, #32
 80203ea:	681b      	ldr	r3, [r3, #0]
 80203ec:	fb03 f302 	mul.w	r3, r3, r2
 80203f0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80203f4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80203f8:	3330      	adds	r3, #48	; 0x30
 80203fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80203fe:	461a      	mov	r2, r3
 8020400:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8020404:	3360      	adds	r3, #96	; 0x60
 8020406:	681b      	ldr	r3, [r3, #0]
 8020408:	fb03 f302 	mul.w	r3, r3, r2
 802040c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8020410:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8020414:	3350      	adds	r3, #80	; 0x50
 8020416:	f9b3 3000 	ldrsh.w	r3, [r3]
 802041a:	461a      	mov	r2, r3
 802041c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8020420:	33a0      	adds	r3, #160	; 0xa0
 8020422:	681b      	ldr	r3, [r3, #0]
 8020424:	fb03 f302 	mul.w	r3, r3, r2
 8020428:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 802042c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8020430:	3370      	adds	r3, #112	; 0x70
 8020432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020436:	461a      	mov	r2, r3
 8020438:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 802043c:	33e0      	adds	r3, #224	; 0xe0
 802043e:	681b      	ldr	r3, [r3, #0]
 8020440:	fb03 f302 	mul.w	r3, r3, r2
 8020444:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8020448:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 802044c:	f642 12cf 	movw	r2, #10703	; 0x29cf
 8020450:	fb02 f303 	mul.w	r3, r2, r3
 8020454:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8020458:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 802045c:	4a9a      	ldr	r2, [pc, #616]	; (80206c8 <jpeg_idct_6x12+0x494>)
 802045e:	fb02 f303 	mul.w	r3, r2, r3
 8020462:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    tmp10 = z1 + z3;
 8020466:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 802046a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 802046e:	4413      	add	r3, r2
 8020470:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8020474:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8020478:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 802047c:	4413      	add	r3, r2
 802047e:	f641 328d 	movw	r2, #7053	; 0x1b8d
 8020482:	fb02 f303 	mul.w	r3, r2, r3
 8020486:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 802048a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 802048e:	f640 025b 	movw	r2, #2139	; 0x85b
 8020492:	fb02 f303 	mul.w	r3, r2, r3
 8020496:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 802049a:	4413      	add	r3, r2
 802049c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80204a0:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80204a4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80204a8:	18d1      	adds	r1, r2, r3
 80204aa:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80204ae:	4613      	mov	r3, r2
 80204b0:	00db      	lsls	r3, r3, #3
 80204b2:	4413      	add	r3, r2
 80204b4:	021a      	lsls	r2, r3, #8
 80204b6:	1ad3      	subs	r3, r2, r3
 80204b8:	440b      	add	r3, r1
 80204ba:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80204be:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80204c2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80204c6:	4413      	add	r3, r2
 80204c8:	4a80      	ldr	r2, [pc, #512]	; (80206cc <jpeg_idct_6x12+0x498>)
 80204ca:	fb02 f303 	mul.w	r3, r2, r3
 80204ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80204d2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80204d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80204da:	441a      	add	r2, r3
 80204dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80204e0:	497b      	ldr	r1, [pc, #492]	; (80206d0 <jpeg_idct_6x12+0x49c>)
 80204e2:	fb01 f303 	mul.w	r3, r1, r3
 80204e6:	4413      	add	r3, r2
 80204e8:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80204ec:	4413      	add	r3, r2
 80204ee:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80204f2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80204f6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80204fa:	1ad2      	subs	r2, r2, r3
 80204fc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8020500:	f243 21c6 	movw	r1, #12998	; 0x32c6
 8020504:	fb01 f303 	mul.w	r3, r1, r3
 8020508:	4413      	add	r3, r2
 802050a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 802050e:	4413      	add	r3, r2
 8020510:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8020514:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8020518:	4a6e      	ldr	r2, [pc, #440]	; (80206d4 <jpeg_idct_6x12+0x4a0>)
 802051a:	fb02 f203 	mul.w	r2, r2, r3
 802051e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8020522:	441a      	add	r2, r3
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */
 8020524:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8020528:	496b      	ldr	r1, [pc, #428]	; (80206d8 <jpeg_idct_6x12+0x4a4>)
 802052a:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 802052e:	4413      	add	r3, r2
 8020530:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8020534:	4413      	add	r3, r2
 8020536:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

    z1 -= z4;
 802053a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 802053e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8020542:	1ad3      	subs	r3, r2, r3
 8020544:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    z2 -= z3;
 8020548:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 802054c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8020550:	1ad3      	subs	r3, r2, r3
 8020552:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8020556:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 802055a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 802055e:	4413      	add	r3, r2
 8020560:	f241 1251 	movw	r2, #4433	; 0x1151
 8020564:	fb02 f303 	mul.w	r3, r2, r3
 8020568:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 802056c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8020570:	f641 027e 	movw	r2, #6270	; 0x187e
 8020574:	fb02 f303 	mul.w	r3, r2, r3
 8020578:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 802057c:	4413      	add	r3, r2
 802057e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8020582:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8020586:	4a55      	ldr	r2, [pc, #340]	; (80206dc <jpeg_idct_6x12+0x4a8>)
 8020588:	fb02 f303 	mul.w	r3, r2, r3
 802058c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8020590:	4413      	add	r3, r2
 8020592:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    /* Final output stage */

    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8020596:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 802059a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 802059e:	4413      	add	r3, r2
 80205a0:	12da      	asrs	r2, r3, #11
 80205a2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80205a6:	601a      	str	r2, [r3, #0]
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80205a8:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80205ac:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80205b0:	1ad2      	subs	r2, r2, r3
 80205b2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80205b6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80205ba:	12d2      	asrs	r2, r2, #11
 80205bc:	601a      	str	r2, [r3, #0]
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80205be:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80205c2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80205c6:	441a      	add	r2, r3
 80205c8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80205cc:	3318      	adds	r3, #24
 80205ce:	12d2      	asrs	r2, r2, #11
 80205d0:	601a      	str	r2, [r3, #0]
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80205d2:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80205d6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80205da:	1ad2      	subs	r2, r2, r3
 80205dc:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80205e0:	33f0      	adds	r3, #240	; 0xf0
 80205e2:	12d2      	asrs	r2, r2, #11
 80205e4:	601a      	str	r2, [r3, #0]
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80205e6:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80205ea:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80205ee:	441a      	add	r2, r3
 80205f0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80205f4:	3330      	adds	r3, #48	; 0x30
 80205f6:	12d2      	asrs	r2, r2, #11
 80205f8:	601a      	str	r2, [r3, #0]
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80205fa:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80205fe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8020602:	1ad2      	subs	r2, r2, r3
 8020604:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8020608:	33d8      	adds	r3, #216	; 0xd8
 802060a:	12d2      	asrs	r2, r2, #11
 802060c:	601a      	str	r2, [r3, #0]
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 802060e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8020612:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8020616:	441a      	add	r2, r3
 8020618:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 802061c:	3348      	adds	r3, #72	; 0x48
 802061e:	12d2      	asrs	r2, r2, #11
 8020620:	601a      	str	r2, [r3, #0]
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8020622:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8020626:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802062a:	1ad2      	subs	r2, r2, r3
 802062c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8020630:	33c0      	adds	r3, #192	; 0xc0
 8020632:	12d2      	asrs	r2, r2, #11
 8020634:	601a      	str	r2, [r3, #0]
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8020636:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 802063a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 802063e:	441a      	add	r2, r3
 8020640:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8020644:	3360      	adds	r3, #96	; 0x60
 8020646:	12d2      	asrs	r2, r2, #11
 8020648:	601a      	str	r2, [r3, #0]
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 802064a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 802064e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8020652:	1ad2      	subs	r2, r2, r3
 8020654:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8020658:	33a8      	adds	r3, #168	; 0xa8
 802065a:	12d2      	asrs	r2, r2, #11
 802065c:	601a      	str	r2, [r3, #0]
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 802065e:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8020662:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8020666:	441a      	add	r2, r3
 8020668:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 802066c:	3378      	adds	r3, #120	; 0x78
 802066e:	12d2      	asrs	r2, r2, #11
 8020670:	601a      	str	r2, [r3, #0]
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8020672:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8020676:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 802067a:	1ad2      	subs	r2, r2, r3
 802067c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8020680:	3390      	adds	r3, #144	; 0x90
 8020682:	12d2      	asrs	r2, r2, #11
 8020684:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8020686:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 802068a:	3301      	adds	r3, #1
 802068c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8020690:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8020694:	3302      	adds	r3, #2
 8020696:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 802069a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 802069e:	3304      	adds	r3, #4
 80206a0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80206a4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80206a8:	3304      	adds	r3, #4
 80206aa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80206ae:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80206b2:	2b05      	cmp	r3, #5
 80206b4:	f77f ade5 	ble.w	8020282 <jpeg_idct_6x12+0x4e>
  }

  /* Pass 2: process 12 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
 80206b8:	f107 0310 	add.w	r3, r7, #16
 80206bc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  for (ctr = 0; ctr < 12; ctr++) {
 80206c0:	2300      	movs	r3, #0
 80206c2:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80206c6:	e104      	b.n	80208d2 <jpeg_idct_6x12+0x69e>
 80206c8:	ffffeeaf 	.word	0xffffeeaf
 80206cc:	ffffde8b 	.word	0xffffde8b
 80206d0:	ffffd0b0 	.word	0xffffd0b0
 80206d4:	ffffea5c 	.word	0xffffea5c
 80206d8:	ffffc08c 	.word	0xffffc08c
 80206dc:	ffffc4df 	.word	0xffffc4df
    outptr = output_buf[ctr] + output_col;
 80206e0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80206e4:	009b      	lsls	r3, r3, #2
 80206e6:	463a      	mov	r2, r7
 80206e8:	6812      	ldr	r2, [r2, #0]
 80206ea:	4413      	add	r3, r2
 80206ec:	681a      	ldr	r2, [r3, #0]
 80206ee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80206f2:	4413      	add	r3, r2
 80206f4:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80206f8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80206fc:	681b      	ldr	r3, [r3, #0]
 80206fe:	3310      	adds	r3, #16
 8020700:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    tmp10 <<= CONST_BITS;
 8020704:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8020708:	035b      	lsls	r3, r3, #13
 802070a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    tmp12 = (INT32) wsptr[4];
 802070e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8020712:	3310      	adds	r3, #16
 8020714:	681b      	ldr	r3, [r3, #0]
 8020716:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 802071a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 802071e:	f241 62a1 	movw	r2, #5793	; 0x16a1
 8020722:	fb02 f303 	mul.w	r3, r2, r3
 8020726:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp11 = tmp10 + tmp20;
 802072a:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 802072e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8020732:	4413      	add	r3, r2
 8020734:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    tmp21 = tmp10 - tmp20 - tmp20;
 8020738:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 802073c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8020740:	1ad2      	subs	r2, r2, r3
 8020742:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8020746:	1ad3      	subs	r3, r2, r3
 8020748:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    tmp20 = (INT32) wsptr[2];
 802074c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8020750:	3308      	adds	r3, #8
 8020752:	681b      	ldr	r3, [r3, #0]
 8020754:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8020758:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 802075c:	f242 7231 	movw	r2, #10033	; 0x2731
 8020760:	fb02 f303 	mul.w	r3, r2, r3
 8020764:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    tmp20 = tmp11 + tmp10;
 8020768:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 802076c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8020770:	4413      	add	r3, r2
 8020772:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp22 = tmp11 - tmp10;
 8020776:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 802077a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 802077e:	1ad3      	subs	r3, r2, r3
 8020780:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

    /* Odd part */

    z1 = (INT32) wsptr[1];
 8020784:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8020788:	3304      	adds	r3, #4
 802078a:	681b      	ldr	r3, [r3, #0]
 802078c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    z2 = (INT32) wsptr[3];
 8020790:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8020794:	330c      	adds	r3, #12
 8020796:	681b      	ldr	r3, [r3, #0]
 8020798:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    z3 = (INT32) wsptr[5];
 802079c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80207a0:	3314      	adds	r3, #20
 80207a2:	681b      	ldr	r3, [r3, #0]
 80207a4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80207a8:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80207ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80207b0:	4413      	add	r3, r2
 80207b2:	f640 32b6 	movw	r2, #2998	; 0xbb6
 80207b6:	fb02 f303 	mul.w	r3, r2, r3
 80207ba:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 80207be:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80207c2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80207c6:	4413      	add	r3, r2
 80207c8:	035b      	lsls	r3, r3, #13
 80207ca:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80207ce:	4413      	add	r3, r2
 80207d0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 80207d4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80207d8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80207dc:	1ad3      	subs	r3, r2, r3
 80207de:	035b      	lsls	r3, r3, #13
 80207e0:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80207e4:	4413      	add	r3, r2
 80207e6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 80207ea:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80207ee:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80207f2:	1ad2      	subs	r2, r2, r3
 80207f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80207f8:	1ad3      	subs	r3, r2, r3
 80207fa:	035b      	lsls	r3, r3, #13
 80207fc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8020800:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8020804:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8020808:	4413      	add	r3, r2
 802080a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 802080c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8020810:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8020814:	4413      	add	r3, r2
 8020816:	781a      	ldrb	r2, [r3, #0]
 8020818:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 802081c:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 802081e:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8020822:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8020826:	1ad3      	subs	r3, r2, r3
 8020828:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 802082a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 802082e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8020832:	441a      	add	r2, r3
 8020834:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8020838:	3305      	adds	r3, #5
 802083a:	7812      	ldrb	r2, [r2, #0]
 802083c:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 802083e:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8020842:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8020846:	4413      	add	r3, r2
 8020848:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 802084a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 802084e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8020852:	441a      	add	r2, r3
 8020854:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8020858:	3301      	adds	r3, #1
 802085a:	7812      	ldrb	r2, [r2, #0]
 802085c:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 802085e:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8020862:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8020866:	1ad3      	subs	r3, r2, r3
 8020868:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 802086a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 802086e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8020872:	441a      	add	r2, r3
 8020874:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8020878:	3304      	adds	r3, #4
 802087a:	7812      	ldrb	r2, [r2, #0]
 802087c:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 802087e:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8020882:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8020886:	4413      	add	r3, r2
 8020888:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 802088a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 802088e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8020892:	441a      	add	r2, r3
 8020894:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8020898:	3302      	adds	r3, #2
 802089a:	7812      	ldrb	r2, [r2, #0]
 802089c:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 802089e:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80208a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80208a6:	1ad3      	subs	r3, r2, r3
 80208a8:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80208aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80208ae:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80208b2:	441a      	add	r2, r3
 80208b4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80208b8:	3303      	adds	r3, #3
 80208ba:	7812      	ldrb	r2, [r2, #0]
 80208bc:	701a      	strb	r2, [r3, #0]

    wsptr += 6;		/* advance pointer to next row */
 80208be:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80208c2:	3318      	adds	r3, #24
 80208c4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  for (ctr = 0; ctr < 12; ctr++) {
 80208c8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80208cc:	3301      	adds	r3, #1
 80208ce:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80208d2:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80208d6:	2b0b      	cmp	r3, #11
 80208d8:	f77f af02 	ble.w	80206e0 <jpeg_idct_6x12+0x4ac>
  }
}
 80208dc:	bf00      	nop
 80208de:	bf00      	nop
 80208e0:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 80208e4:	46bd      	mov	sp, r7
 80208e6:	bc90      	pop	{r4, r7}
 80208e8:	4770      	bx	lr
 80208ea:	bf00      	nop

080208ec <jpeg_idct_5x10>:

GLOBAL(void)
jpeg_idct_5x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80208ec:	b490      	push	{r4, r7}
 80208ee:	b0cc      	sub	sp, #304	; 0x130
 80208f0:	af00      	add	r7, sp, #0
 80208f2:	f107 040c 	add.w	r4, r7, #12
 80208f6:	6020      	str	r0, [r4, #0]
 80208f8:	f107 0008 	add.w	r0, r7, #8
 80208fc:	6001      	str	r1, [r0, #0]
 80208fe:	1d39      	adds	r1, r7, #4
 8020900:	600a      	str	r2, [r1, #0]
 8020902:	463a      	mov	r2, r7
 8020904:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8020906:	f107 030c 	add.w	r3, r7, #12
 802090a:	681b      	ldr	r3, [r3, #0]
 802090c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8020910:	3380      	adds	r3, #128	; 0x80
 8020912:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  inptr = coef_block;
 8020916:	1d3b      	adds	r3, r7, #4
 8020918:	681b      	ldr	r3, [r3, #0]
 802091a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 802091e:	f107 0308 	add.w	r3, r7, #8
 8020922:	681b      	ldr	r3, [r3, #0]
 8020924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020926:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  wsptr = workspace;
 802092a:	f107 0314 	add.w	r3, r7, #20
 802092e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8020932:	2300      	movs	r3, #0
 8020934:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8020938:	e1d3      	b.n	8020ce2 <jpeg_idct_5x10+0x3f6>
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 802093a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 802093e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020942:	461a      	mov	r2, r3
 8020944:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020948:	681b      	ldr	r3, [r3, #0]
 802094a:	fb03 f302 	mul.w	r3, r3, r2
 802094e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    z3 <<= CONST_BITS;
 8020952:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8020956:	035b      	lsls	r3, r3, #13
 8020958:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    /* Add fudge factor here for final descale. */
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 802095c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8020960:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8020964:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8020968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 802096c:	3340      	adds	r3, #64	; 0x40
 802096e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020972:	461a      	mov	r2, r3
 8020974:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020978:	3380      	adds	r3, #128	; 0x80
 802097a:	681b      	ldr	r3, [r3, #0]
 802097c:	fb03 f302 	mul.w	r3, r3, r2
 8020980:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8020984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8020988:	f242 429d 	movw	r2, #9373	; 0x249d
 802098c:	fb02 f303 	mul.w	r3, r2, r3
 8020990:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8020994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8020998:	f640 52fc 	movw	r2, #3580	; 0xdfc
 802099c:	fb02 f303 	mul.w	r3, r2, r3
 80209a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    tmp10 = z3 + z1;
 80209a4:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80209a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80209ac:	4413      	add	r3, r2
 80209ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    tmp11 = z3 - z2;
 80209b2:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80209b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80209ba:	1ad3      	subs	r3, r2, r3
 80209bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 80209c0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80209c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80209c8:	1ad3      	subs	r3, r2, r3
 80209ca:	005b      	lsls	r3, r3, #1
 80209cc:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80209d0:	1ad3      	subs	r3, r2, r3
 80209d2:	12db      	asrs	r3, r3, #11
 80209d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80209d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80209dc:	3320      	adds	r3, #32
 80209de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80209e2:	461a      	mov	r2, r3
 80209e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80209e8:	3340      	adds	r3, #64	; 0x40
 80209ea:	681b      	ldr	r3, [r3, #0]
 80209ec:	fb03 f302 	mul.w	r3, r3, r2
 80209f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80209f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80209f8:	3360      	adds	r3, #96	; 0x60
 80209fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80209fe:	461a      	mov	r2, r3
 8020a00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020a04:	33c0      	adds	r3, #192	; 0xc0
 8020a06:	681b      	ldr	r3, [r3, #0]
 8020a08:	fb03 f302 	mul.w	r3, r3, r2
 8020a0c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8020a10:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8020a14:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8020a18:	4413      	add	r3, r2
 8020a1a:	f641 229a 	movw	r2, #6810	; 0x1a9a
 8020a1e:	fb02 f303 	mul.w	r3, r2, r3
 8020a22:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8020a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8020a2a:	f241 0271 	movw	r2, #4209	; 0x1071
 8020a2e:	fb02 f303 	mul.w	r3, r2, r3
 8020a32:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8020a36:	4413      	add	r3, r2
 8020a38:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8020a3c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8020a40:	4aae      	ldr	r2, [pc, #696]	; (8020cfc <jpeg_idct_5x10+0x410>)
 8020a42:	fb02 f303 	mul.w	r3, r2, r3
 8020a46:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8020a4a:	4413      	add	r3, r2
 8020a4c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    tmp20 = tmp10 + tmp12;
 8020a50:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8020a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8020a58:	4413      	add	r3, r2
 8020a5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    tmp24 = tmp10 - tmp12;
 8020a5e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8020a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8020a66:	1ad3      	subs	r3, r2, r3
 8020a68:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    tmp21 = tmp11 + tmp13;
 8020a6c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8020a70:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8020a74:	4413      	add	r3, r2
 8020a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    tmp23 = tmp11 - tmp13;
 8020a7a:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8020a7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8020a82:	1ad3      	subs	r3, r2, r3
 8020a84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8020a88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020a8c:	3310      	adds	r3, #16
 8020a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020a92:	461a      	mov	r2, r3
 8020a94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020a98:	3320      	adds	r3, #32
 8020a9a:	681b      	ldr	r3, [r3, #0]
 8020a9c:	fb03 f302 	mul.w	r3, r3, r2
 8020aa0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8020aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020aa8:	3330      	adds	r3, #48	; 0x30
 8020aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020aae:	461a      	mov	r2, r3
 8020ab0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020ab4:	3360      	adds	r3, #96	; 0x60
 8020ab6:	681b      	ldr	r3, [r3, #0]
 8020ab8:	fb03 f302 	mul.w	r3, r3, r2
 8020abc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8020ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020ac4:	3350      	adds	r3, #80	; 0x50
 8020ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020aca:	461a      	mov	r2, r3
 8020acc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020ad0:	33a0      	adds	r3, #160	; 0xa0
 8020ad2:	681b      	ldr	r3, [r3, #0]
 8020ad4:	fb03 f302 	mul.w	r3, r3, r2
 8020ad8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8020adc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020ae0:	3370      	adds	r3, #112	; 0x70
 8020ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020ae6:	461a      	mov	r2, r3
 8020ae8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020aec:	33e0      	adds	r3, #224	; 0xe0
 8020aee:	681b      	ldr	r3, [r3, #0]
 8020af0:	fb03 f302 	mul.w	r3, r3, r2
 8020af4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    tmp11 = z2 + z4;
 8020af8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8020afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8020b00:	4413      	add	r3, r2
 8020b02:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    tmp13 = z2 - z4;
 8020b06:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8020b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8020b0e:	1ad3      	subs	r3, r2, r3
 8020b10:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8020b14:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8020b18:	f640 12e3 	movw	r2, #2531	; 0x9e3
 8020b1c:	fb02 f303 	mul.w	r3, r2, r3
 8020b20:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    z5 = z3 << CONST_BITS;
 8020b24:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8020b28:	035b      	lsls	r3, r3, #13
 8020b2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8020b2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8020b32:	f641 626f 	movw	r2, #7791	; 0x1e6f
 8020b36:	fb02 f303 	mul.w	r3, r2, r3
 8020b3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    z4 = z5 + tmp12;
 8020b3e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8020b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8020b46:	4413      	add	r3, r2
 8020b48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8020b4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020b50:	f642 42b3 	movw	r2, #11443	; 0x2cb3
 8020b54:	fb02 f203 	mul.w	r2, r2, r3
 8020b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8020b5c:	4413      	add	r3, r2
 8020b5e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8020b62:	4413      	add	r3, r2
 8020b64:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8020b68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020b6c:	f240 7214 	movw	r2, #1812	; 0x714
 8020b70:	fb02 f203 	mul.w	r2, r2, r3
 8020b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8020b78:	1ad3      	subs	r3, r2, r3
 8020b7a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8020b7e:	4413      	add	r3, r2
 8020b80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8020b84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8020b88:	f241 22cf 	movw	r2, #4815	; 0x12cf
 8020b8c:	fb02 f303 	mul.w	r3, r2, r3
 8020b90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8020b94:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8020b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8020b9c:	1ad2      	subs	r2, r2, r3
 8020b9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8020ba2:	031b      	lsls	r3, r3, #12
 8020ba4:	1ad3      	subs	r3, r2, r3
 8020ba6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8020baa:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8020bae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8020bb2:	1ad2      	subs	r2, r2, r3
 8020bb4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8020bb8:	1ad3      	subs	r3, r2, r3
 8020bba:	009b      	lsls	r3, r3, #2
 8020bbc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8020bc0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020bc4:	f642 0253 	movw	r2, #10323	; 0x2853
 8020bc8:	fb02 f203 	mul.w	r2, r2, r3
 8020bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8020bd0:	1ad2      	subs	r2, r2, r3
 8020bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8020bd6:	1ad3      	subs	r3, r2, r3
 8020bd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8020bdc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020be0:	f241 428c 	movw	r2, #5260	; 0x148c
 8020be4:	fb02 f203 	mul.w	r2, r2, r3
 8020be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8020bec:	1ad3      	subs	r3, r2, r3
 8020bee:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8020bf2:	4413      	add	r3, r2
 8020bf4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    /* Final output stage */

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8020bf8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8020bfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8020c00:	4413      	add	r3, r2
 8020c02:	12da      	asrs	r2, r3, #11
 8020c04:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8020c08:	601a      	str	r2, [r3, #0]
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8020c0a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8020c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8020c12:	1ad2      	subs	r2, r2, r3
 8020c14:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8020c18:	33b4      	adds	r3, #180	; 0xb4
 8020c1a:	12d2      	asrs	r2, r2, #11
 8020c1c:	601a      	str	r2, [r3, #0]
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8020c1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8020c22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8020c26:	441a      	add	r2, r3
 8020c28:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8020c2c:	3314      	adds	r3, #20
 8020c2e:	12d2      	asrs	r2, r2, #11
 8020c30:	601a      	str	r2, [r3, #0]
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8020c32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8020c36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8020c3a:	1ad2      	subs	r2, r2, r3
 8020c3c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8020c40:	33a0      	adds	r3, #160	; 0xa0
 8020c42:	12d2      	asrs	r2, r2, #11
 8020c44:	601a      	str	r2, [r3, #0]
    wsptr[5*2] = (int) (tmp22 + tmp12);
 8020c46:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8020c4a:	3328      	adds	r3, #40	; 0x28
 8020c4c:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8020c50:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8020c54:	440a      	add	r2, r1
 8020c56:	601a      	str	r2, [r3, #0]
    wsptr[5*7] = (int) (tmp22 - tmp12);
 8020c58:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8020c5c:	338c      	adds	r3, #140	; 0x8c
 8020c5e:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8020c62:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8020c66:	1a8a      	subs	r2, r1, r2
 8020c68:	601a      	str	r2, [r3, #0]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8020c6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8020c6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8020c72:	441a      	add	r2, r3
 8020c74:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8020c78:	333c      	adds	r3, #60	; 0x3c
 8020c7a:	12d2      	asrs	r2, r2, #11
 8020c7c:	601a      	str	r2, [r3, #0]
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8020c7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8020c82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8020c86:	1ad2      	subs	r2, r2, r3
 8020c88:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8020c8c:	3378      	adds	r3, #120	; 0x78
 8020c8e:	12d2      	asrs	r2, r2, #11
 8020c90:	601a      	str	r2, [r3, #0]
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8020c92:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8020c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8020c9a:	441a      	add	r2, r3
 8020c9c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8020ca0:	3350      	adds	r3, #80	; 0x50
 8020ca2:	12d2      	asrs	r2, r2, #11
 8020ca4:	601a      	str	r2, [r3, #0]
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8020ca6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8020caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8020cae:	1ad2      	subs	r2, r2, r3
 8020cb0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8020cb4:	3364      	adds	r3, #100	; 0x64
 8020cb6:	12d2      	asrs	r2, r2, #11
 8020cb8:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8020cba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8020cbe:	3301      	adds	r3, #1
 8020cc0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8020cc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020cc8:	3302      	adds	r3, #2
 8020cca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8020cce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8020cd2:	3304      	adds	r3, #4
 8020cd4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8020cd8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8020cdc:	3304      	adds	r3, #4
 8020cde:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8020ce2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8020ce6:	2b04      	cmp	r3, #4
 8020ce8:	f77f ae27 	ble.w	802093a <jpeg_idct_5x10+0x4e>
  }

  /* Pass 2: process 10 rows from work array, store into output array.
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  wsptr = workspace;
 8020cec:	f107 0314 	add.w	r3, r7, #20
 8020cf0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  for (ctr = 0; ctr < 10; ctr++) {
 8020cf4:	2300      	movs	r3, #0
 8020cf6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8020cfa:	e0d9      	b.n	8020eb0 <jpeg_idct_5x10+0x5c4>
 8020cfc:	ffffba5c 	.word	0xffffba5c
    outptr = output_buf[ctr] + output_col;
 8020d00:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8020d04:	009b      	lsls	r3, r3, #2
 8020d06:	463a      	mov	r2, r7
 8020d08:	6812      	ldr	r2, [r2, #0]
 8020d0a:	4413      	add	r3, r2
 8020d0c:	681a      	ldr	r2, [r3, #0]
 8020d0e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8020d12:	4413      	add	r3, r2
 8020d14:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8020d18:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8020d1c:	681b      	ldr	r3, [r3, #0]
 8020d1e:	3310      	adds	r3, #16
 8020d20:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    tmp12 <<= CONST_BITS;
 8020d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8020d28:	035b      	lsls	r3, r3, #13
 8020d2a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    tmp13 = (INT32) wsptr[2];
 8020d2e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8020d32:	3308      	adds	r3, #8
 8020d34:	681b      	ldr	r3, [r3, #0]
 8020d36:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    tmp14 = (INT32) wsptr[4];
 8020d3a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8020d3e:	3310      	adds	r3, #16
 8020d40:	681b      	ldr	r3, [r3, #0]
 8020d42:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8020d46:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8020d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8020d4e:	4413      	add	r3, r2
 8020d50:	f641 124c 	movw	r2, #6476	; 0x194c
 8020d54:	fb02 f303 	mul.w	r3, r2, r3
 8020d58:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8020d5c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8020d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8020d64:	1ad3      	subs	r3, r2, r3
 8020d66:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 8020d6a:	fb02 f303 	mul.w	r3, r2, r3
 8020d6e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    z3 = tmp12 + z2;
 8020d72:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8020d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8020d7a:	4413      	add	r3, r2
 8020d7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    tmp10 = z3 + z1;
 8020d80:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8020d84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020d88:	4413      	add	r3, r2
 8020d8a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    tmp11 = z3 - z1;
 8020d8e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8020d92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8020d96:	1ad3      	subs	r3, r2, r3
 8020d98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    tmp12 -= z2 << 2;
 8020d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8020da0:	009b      	lsls	r3, r3, #2
 8020da2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8020da6:	1ad3      	subs	r3, r2, r3
 8020da8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    /* Odd part */

    z2 = (INT32) wsptr[1];
 8020dac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8020db0:	3304      	adds	r3, #4
 8020db2:	681b      	ldr	r3, [r3, #0]
 8020db4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    z3 = (INT32) wsptr[3];
 8020db8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8020dbc:	330c      	adds	r3, #12
 8020dbe:	681b      	ldr	r3, [r3, #0]
 8020dc0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8020dc4:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8020dc8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8020dcc:	4413      	add	r3, r2
 8020dce:	f641 229a 	movw	r2, #6810	; 0x1a9a
 8020dd2:	fb02 f303 	mul.w	r3, r2, r3
 8020dd6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8020dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8020dde:	f241 0271 	movw	r2, #4209	; 0x1071
 8020de2:	fb02 f303 	mul.w	r3, r2, r3
 8020de6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8020dea:	4413      	add	r3, r2
 8020dec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 8020df0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8020df4:	4a34      	ldr	r2, [pc, #208]	; (8020ec8 <jpeg_idct_5x10+0x5dc>)
 8020df6:	fb02 f303 	mul.w	r3, r2, r3
 8020dfa:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8020dfe:	4413      	add	r3, r2
 8020e00:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 8020e04:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8020e08:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8020e0c:	4413      	add	r3, r2
 8020e0e:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8020e10:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 8020e14:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8020e18:	4413      	add	r3, r2
 8020e1a:	781a      	ldrb	r2, [r3, #0]
 8020e1c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8020e20:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 8020e22:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8020e26:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8020e2a:	1ad3      	subs	r3, r2, r3
 8020e2c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8020e2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 8020e32:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8020e36:	441a      	add	r2, r3
 8020e38:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8020e3c:	3304      	adds	r3, #4
 8020e3e:	7812      	ldrb	r2, [r2, #0]
 8020e40:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 8020e42:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8020e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8020e4a:	4413      	add	r3, r2
 8020e4c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8020e4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 8020e52:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8020e56:	441a      	add	r2, r3
 8020e58:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8020e5c:	3301      	adds	r3, #1
 8020e5e:	7812      	ldrb	r2, [r2, #0]
 8020e60:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8020e62:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8020e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8020e6a:	1ad3      	subs	r3, r2, r3
 8020e6c:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8020e6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8020e72:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8020e76:	441a      	add	r2, r3
 8020e78:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8020e7c:	3303      	adds	r3, #3
 8020e7e:	7812      	ldrb	r2, [r2, #0]
 8020e80:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8020e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8020e86:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8020e88:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8020e8c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8020e90:	441a      	add	r2, r3
 8020e92:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8020e96:	3302      	adds	r3, #2
 8020e98:	7812      	ldrb	r2, [r2, #0]
 8020e9a:	701a      	strb	r2, [r3, #0]

    wsptr += 5;		/* advance pointer to next row */
 8020e9c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8020ea0:	3314      	adds	r3, #20
 8020ea2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  for (ctr = 0; ctr < 10; ctr++) {
 8020ea6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8020eaa:	3301      	adds	r3, #1
 8020eac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8020eb0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8020eb4:	2b09      	cmp	r3, #9
 8020eb6:	f77f af23 	ble.w	8020d00 <jpeg_idct_5x10+0x414>
  }
}
 8020eba:	bf00      	nop
 8020ebc:	bf00      	nop
 8020ebe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8020ec2:	46bd      	mov	sp, r7
 8020ec4:	bc90      	pop	{r4, r7}
 8020ec6:	4770      	bx	lr
 8020ec8:	ffffba5c 	.word	0xffffba5c

08020ecc <jpeg_idct_4x8>:

GLOBAL(void)
jpeg_idct_4x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8020ecc:	b480      	push	{r7}
 8020ece:	b0b7      	sub	sp, #220	; 0xdc
 8020ed0:	af00      	add	r7, sp, #0
 8020ed2:	60f8      	str	r0, [r7, #12]
 8020ed4:	60b9      	str	r1, [r7, #8]
 8020ed6:	607a      	str	r2, [r7, #4]
 8020ed8:	603b      	str	r3, [r7, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8020eda:	68fb      	ldr	r3, [r7, #12]
 8020edc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8020ee0:	3380      	adds	r3, #128	; 0x80
 8020ee2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
 8020ee6:	687b      	ldr	r3, [r7, #4]
 8020ee8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8020eec:	68bb      	ldr	r3, [r7, #8]
 8020eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  wsptr = workspace;
 8020ef4:	f107 0310 	add.w	r3, r7, #16
 8020ef8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  for (ctr = 4; ctr > 0; ctr--) {
 8020efc:	2304      	movs	r3, #4
 8020efe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8020f02:	e238      	b.n	8021376 <jpeg_idct_4x8+0x4aa>
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8020f04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8020f08:	3310      	adds	r3, #16
 8020f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020f0e:	2b00      	cmp	r3, #0
 8020f10:	d175      	bne.n	8020ffe <jpeg_idct_4x8+0x132>
 8020f12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8020f16:	3320      	adds	r3, #32
 8020f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020f1c:	2b00      	cmp	r3, #0
 8020f1e:	d16e      	bne.n	8020ffe <jpeg_idct_4x8+0x132>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8020f20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8020f24:	3330      	adds	r3, #48	; 0x30
 8020f26:	f9b3 3000 	ldrsh.w	r3, [r3]
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8020f2a:	2b00      	cmp	r3, #0
 8020f2c:	d167      	bne.n	8020ffe <jpeg_idct_4x8+0x132>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8020f2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8020f32:	3340      	adds	r3, #64	; 0x40
 8020f34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020f38:	2b00      	cmp	r3, #0
 8020f3a:	d160      	bne.n	8020ffe <jpeg_idct_4x8+0x132>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8020f3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8020f40:	3350      	adds	r3, #80	; 0x50
 8020f42:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8020f46:	2b00      	cmp	r3, #0
 8020f48:	d159      	bne.n	8020ffe <jpeg_idct_4x8+0x132>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8020f4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8020f4e:	3360      	adds	r3, #96	; 0x60
 8020f50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020f54:	2b00      	cmp	r3, #0
 8020f56:	d152      	bne.n	8020ffe <jpeg_idct_4x8+0x132>
	inptr[DCTSIZE*7] == 0) {
 8020f58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8020f5c:	3370      	adds	r3, #112	; 0x70
 8020f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8020f62:	2b00      	cmp	r3, #0
 8020f64:	d14b      	bne.n	8020ffe <jpeg_idct_4x8+0x132>
      /* AC terms all zero */
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8020f66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8020f6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020f6e:	461a      	mov	r2, r3
 8020f70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8020f74:	681b      	ldr	r3, [r3, #0]
 8020f76:	fb03 f302 	mul.w	r3, r3, r2
 8020f7a:	009b      	lsls	r3, r3, #2
 8020f7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

      wsptr[4*0] = dcval;
 8020f80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8020f84:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8020f88:	601a      	str	r2, [r3, #0]
      wsptr[4*1] = dcval;
 8020f8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8020f8e:	3310      	adds	r3, #16
 8020f90:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8020f94:	601a      	str	r2, [r3, #0]
      wsptr[4*2] = dcval;
 8020f96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8020f9a:	3320      	adds	r3, #32
 8020f9c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8020fa0:	601a      	str	r2, [r3, #0]
      wsptr[4*3] = dcval;
 8020fa2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8020fa6:	3330      	adds	r3, #48	; 0x30
 8020fa8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8020fac:	601a      	str	r2, [r3, #0]
      wsptr[4*4] = dcval;
 8020fae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8020fb2:	3340      	adds	r3, #64	; 0x40
 8020fb4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8020fb8:	601a      	str	r2, [r3, #0]
      wsptr[4*5] = dcval;
 8020fba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8020fbe:	3350      	adds	r3, #80	; 0x50
 8020fc0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8020fc4:	601a      	str	r2, [r3, #0]
      wsptr[4*6] = dcval;
 8020fc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8020fca:	3360      	adds	r3, #96	; 0x60
 8020fcc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8020fd0:	601a      	str	r2, [r3, #0]
      wsptr[4*7] = dcval;
 8020fd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8020fd6:	3370      	adds	r3, #112	; 0x70
 8020fd8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8020fdc:	601a      	str	r2, [r3, #0]

      inptr++;			/* advance pointers to next column */
 8020fde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8020fe2:	3302      	adds	r3, #2
 8020fe4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      quantptr++;
 8020fe8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8020fec:	3304      	adds	r3, #4
 8020fee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      wsptr++;
 8020ff2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8020ff6:	3304      	adds	r3, #4
 8020ff8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      continue;
 8020ffc:	e1b6      	b.n	802136c <jpeg_idct_4x8+0x4a0>
    }

    /* Even part: reverse the even part of the forward DCT. */
    /* The rotator is sqrt(2)*c(-6). */

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8020ffe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8021002:	3320      	adds	r3, #32
 8021004:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021008:	461a      	mov	r2, r3
 802100a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 802100e:	3340      	adds	r3, #64	; 0x40
 8021010:	681b      	ldr	r3, [r3, #0]
 8021012:	fb03 f302 	mul.w	r3, r3, r2
 8021016:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 802101a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 802101e:	3360      	adds	r3, #96	; 0x60
 8021020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021024:	461a      	mov	r2, r3
 8021026:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 802102a:	33c0      	adds	r3, #192	; 0xc0
 802102c:	681b      	ldr	r3, [r3, #0]
 802102e:	fb03 f302 	mul.w	r3, r3, r2
 8021032:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8021036:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 802103a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 802103e:	4413      	add	r3, r2
 8021040:	f241 1251 	movw	r2, #4433	; 0x1151
 8021044:	fb02 f303 	mul.w	r3, r2, r3
 8021048:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 802104c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8021050:	f641 027e 	movw	r2, #6270	; 0x187e
 8021054:	fb02 f303 	mul.w	r3, r2, r3
 8021058:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 802105c:	4413      	add	r3, r2
 802105e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8021062:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8021066:	4aca      	ldr	r2, [pc, #808]	; (8021390 <jpeg_idct_4x8+0x4c4>)
 8021068:	fb02 f303 	mul.w	r3, r2, r3
 802106c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8021070:	4413      	add	r3, r2
 8021072:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    
    z2 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8021076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 802107a:	f9b3 3000 	ldrsh.w	r3, [r3]
 802107e:	461a      	mov	r2, r3
 8021080:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8021084:	681b      	ldr	r3, [r3, #0]
 8021086:	fb03 f302 	mul.w	r3, r3, r2
 802108a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 802108e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8021092:	3340      	adds	r3, #64	; 0x40
 8021094:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021098:	461a      	mov	r2, r3
 802109a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 802109e:	3380      	adds	r3, #128	; 0x80
 80210a0:	681b      	ldr	r3, [r3, #0]
 80210a2:	fb03 f302 	mul.w	r3, r3, r2
 80210a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    z2 <<= CONST_BITS;
 80210aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80210ae:	035b      	lsls	r3, r3, #13
 80210b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    z3 <<= CONST_BITS;
 80210b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80210b8:	035b      	lsls	r3, r3, #13
 80210ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    /* Add fudge factor here for final descale. */
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 80210be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80210c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80210c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    tmp0 = z2 + z3;
 80210ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80210ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80210d2:	4413      	add	r3, r2
 80210d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    tmp1 = z2 - z3;
 80210d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80210dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80210e0:	1ad3      	subs	r3, r2, r3
 80210e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    
    tmp10 = tmp0 + tmp2;
 80210e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80210ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80210ee:	4413      	add	r3, r2
 80210f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    tmp13 = tmp0 - tmp2;
 80210f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80210f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80210fc:	1ad3      	subs	r3, r2, r3
 80210fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    tmp11 = tmp1 + tmp3;
 8021102:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8021106:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802110a:	4413      	add	r3, r2
 802110c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    tmp12 = tmp1 - tmp3;
 8021110:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8021114:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8021118:	1ad3      	subs	r3, r2, r3
 802111a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    /* Odd part per figure 8; the matrix is unitary and hence its
     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
     */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 802111e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8021122:	3370      	adds	r3, #112	; 0x70
 8021124:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021128:	461a      	mov	r2, r3
 802112a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 802112e:	33e0      	adds	r3, #224	; 0xe0
 8021130:	681b      	ldr	r3, [r3, #0]
 8021132:	fb03 f302 	mul.w	r3, r3, r2
 8021136:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 802113a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 802113e:	3350      	adds	r3, #80	; 0x50
 8021140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021144:	461a      	mov	r2, r3
 8021146:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 802114a:	33a0      	adds	r3, #160	; 0xa0
 802114c:	681b      	ldr	r3, [r3, #0]
 802114e:	fb03 f302 	mul.w	r3, r3, r2
 8021152:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8021156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 802115a:	3330      	adds	r3, #48	; 0x30
 802115c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021160:	461a      	mov	r2, r3
 8021162:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8021166:	3360      	adds	r3, #96	; 0x60
 8021168:	681b      	ldr	r3, [r3, #0]
 802116a:	fb03 f302 	mul.w	r3, r3, r2
 802116e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8021172:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8021176:	3310      	adds	r3, #16
 8021178:	f9b3 3000 	ldrsh.w	r3, [r3]
 802117c:	461a      	mov	r2, r3
 802117e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8021182:	3320      	adds	r3, #32
 8021184:	681b      	ldr	r3, [r3, #0]
 8021186:	fb03 f302 	mul.w	r3, r3, r2
 802118a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    z2 = tmp0 + tmp2;
 802118e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8021192:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8021196:	4413      	add	r3, r2
 8021198:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    z3 = tmp1 + tmp3;
 802119c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80211a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80211a4:	4413      	add	r3, r2
 80211a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80211aa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80211ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80211b2:	4413      	add	r3, r2
 80211b4:	f242 52a1 	movw	r2, #9633	; 0x25a1
 80211b8:	fb02 f303 	mul.w	r3, r2, r3
 80211bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
 80211c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80211c4:	4a73      	ldr	r2, [pc, #460]	; (8021394 <jpeg_idct_4x8+0x4c8>)
 80211c6:	fb02 f303 	mul.w	r3, r2, r3
 80211ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
 80211ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80211d2:	4a71      	ldr	r2, [pc, #452]	; (8021398 <jpeg_idct_4x8+0x4cc>)
 80211d4:	fb02 f303 	mul.w	r3, r2, r3
 80211d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    z2 += z1;
 80211dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80211e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80211e4:	4413      	add	r3, r2
 80211e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    z3 += z1;
 80211ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80211ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80211f2:	4413      	add	r3, r2
 80211f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 80211f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80211fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8021200:	4413      	add	r3, r2
 8021202:	4a66      	ldr	r2, [pc, #408]	; (802139c <jpeg_idct_4x8+0x4d0>)
 8021204:	fb02 f303 	mul.w	r3, r2, r3
 8021208:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
 802120c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8021210:	f640 128e 	movw	r2, #2446	; 0x98e
 8021214:	fb02 f303 	mul.w	r3, r2, r3
 8021218:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
 802121c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8021220:	f243 020b 	movw	r2, #12299	; 0x300b
 8021224:	fb02 f303 	mul.w	r3, r2, r3
 8021228:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tmp0 += z1 + z2;
 802122c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8021230:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8021234:	4413      	add	r3, r2
 8021236:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 802123a:	4413      	add	r3, r2
 802123c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    tmp3 += z1 + z3;
 8021240:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8021244:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8021248:	4413      	add	r3, r2
 802124a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 802124e:	4413      	add	r3, r2
 8021250:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8021254:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8021258:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802125c:	4413      	add	r3, r2
 802125e:	4a50      	ldr	r2, [pc, #320]	; (80213a0 <jpeg_idct_4x8+0x4d4>)
 8021260:	fb02 f303 	mul.w	r3, r2, r3
 8021264:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
 8021268:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802126c:	f244 12b3 	movw	r2, #16819	; 0x41b3
 8021270:	fb02 f303 	mul.w	r3, r2, r3
 8021274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
 8021278:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802127c:	f246 2254 	movw	r2, #25172	; 0x6254
 8021280:	fb02 f303 	mul.w	r3, r2, r3
 8021284:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    tmp1 += z1 + z3;
 8021288:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 802128c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8021290:	4413      	add	r3, r2
 8021292:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8021296:	4413      	add	r3, r2
 8021298:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tmp2 += z1 + z2;
 802129c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80212a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80212a4:	4413      	add	r3, r2
 80212a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80212aa:	4413      	add	r3, r2
 80212ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */

    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80212b0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80212b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80212b8:	4413      	add	r3, r2
 80212ba:	12da      	asrs	r2, r3, #11
 80212bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80212c0:	601a      	str	r2, [r3, #0]
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80212c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80212c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80212ca:	1ad2      	subs	r2, r2, r3
 80212cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80212d0:	3370      	adds	r3, #112	; 0x70
 80212d2:	12d2      	asrs	r2, r2, #11
 80212d4:	601a      	str	r2, [r3, #0]
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80212d6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80212da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80212de:	441a      	add	r2, r3
 80212e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80212e4:	3310      	adds	r3, #16
 80212e6:	12d2      	asrs	r2, r2, #11
 80212e8:	601a      	str	r2, [r3, #0]
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80212ea:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80212ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80212f2:	1ad2      	subs	r2, r2, r3
 80212f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80212f8:	3360      	adds	r3, #96	; 0x60
 80212fa:	12d2      	asrs	r2, r2, #11
 80212fc:	601a      	str	r2, [r3, #0]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80212fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8021302:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8021306:	441a      	add	r2, r3
 8021308:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802130c:	3320      	adds	r3, #32
 802130e:	12d2      	asrs	r2, r2, #11
 8021310:	601a      	str	r2, [r3, #0]
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8021312:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8021316:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802131a:	1ad2      	subs	r2, r2, r3
 802131c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8021320:	3350      	adds	r3, #80	; 0x50
 8021322:	12d2      	asrs	r2, r2, #11
 8021324:	601a      	str	r2, [r3, #0]
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8021326:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 802132a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 802132e:	441a      	add	r2, r3
 8021330:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8021334:	3330      	adds	r3, #48	; 0x30
 8021336:	12d2      	asrs	r2, r2, #11
 8021338:	601a      	str	r2, [r3, #0]
    wsptr[4*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 802133a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 802133e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8021342:	1ad2      	subs	r2, r2, r3
 8021344:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8021348:	3340      	adds	r3, #64	; 0x40
 802134a:	12d2      	asrs	r2, r2, #11
 802134c:	601a      	str	r2, [r3, #0]

    inptr++;			/* advance pointers to next column */
 802134e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8021352:	3302      	adds	r3, #2
 8021354:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    quantptr++;
 8021358:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 802135c:	3304      	adds	r3, #4
 802135e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    wsptr++;
 8021362:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8021366:	3304      	adds	r3, #4
 8021368:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  for (ctr = 4; ctr > 0; ctr--) {
 802136c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8021370:	3b01      	subs	r3, #1
 8021372:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8021376:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 802137a:	2b00      	cmp	r3, #0
 802137c:	f73f adc2 	bgt.w	8020f04 <jpeg_idct_4x8+0x38>
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  wsptr = workspace;
 8021380:	f107 0310 	add.w	r3, r7, #16
 8021384:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  for (ctr = 0; ctr < 8; ctr++) {
 8021388:	2300      	movs	r3, #0
 802138a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 802138e:	e0a5      	b.n	80214dc <jpeg_idct_4x8+0x610>
 8021390:	ffffc4df 	.word	0xffffc4df
 8021394:	ffffc13b 	.word	0xffffc13b
 8021398:	fffff384 	.word	0xfffff384
 802139c:	ffffe333 	.word	0xffffe333
 80213a0:	ffffadfd 	.word	0xffffadfd
    outptr = output_buf[ctr] + output_col;
 80213a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80213a8:	009b      	lsls	r3, r3, #2
 80213aa:	683a      	ldr	r2, [r7, #0]
 80213ac:	4413      	add	r3, r2
 80213ae:	681a      	ldr	r2, [r3, #0]
 80213b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80213b4:	4413      	add	r3, r2
 80213b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80213ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80213be:	681b      	ldr	r3, [r3, #0]
 80213c0:	3310      	adds	r3, #16
 80213c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    tmp2 = (INT32) wsptr[2];
 80213c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80213ca:	3308      	adds	r3, #8
 80213cc:	681b      	ldr	r3, [r3, #0]
 80213ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 80213d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80213d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80213da:	4413      	add	r3, r2
 80213dc:	035b      	lsls	r3, r3, #13
 80213de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 80213e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80213e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80213ea:	1ad3      	subs	r3, r2, r3
 80213ec:	035b      	lsls	r3, r3, #13
 80213ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    /* Odd part */
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
 80213f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80213f6:	3304      	adds	r3, #4
 80213f8:	681b      	ldr	r3, [r3, #0]
 80213fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    z3 = (INT32) wsptr[3];
 80213fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8021402:	330c      	adds	r3, #12
 8021404:	681b      	ldr	r3, [r3, #0]
 8021406:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 802140a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 802140e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8021412:	4413      	add	r3, r2
 8021414:	f241 1251 	movw	r2, #4433	; 0x1151
 8021418:	fb02 f303 	mul.w	r3, r2, r3
 802141c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8021420:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8021424:	f641 027e 	movw	r2, #6270	; 0x187e
 8021428:	fb02 f303 	mul.w	r3, r2, r3
 802142c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8021430:	4413      	add	r3, r2
 8021432:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8021436:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 802143a:	4a2e      	ldr	r2, [pc, #184]	; (80214f4 <jpeg_idct_4x8+0x628>)
 802143c:	fb02 f303 	mul.w	r3, r2, r3
 8021440:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8021444:	4413      	add	r3, r2
 8021446:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 802144a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 802144e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8021452:	4413      	add	r3, r2
 8021454:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8021456:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 802145a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 802145e:	4413      	add	r3, r2
 8021460:	781a      	ldrb	r2, [r3, #0]
 8021462:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8021466:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8021468:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 802146c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8021470:	1ad3      	subs	r3, r2, r3
 8021472:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8021474:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8021478:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 802147c:	441a      	add	r2, r3
 802147e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8021482:	3303      	adds	r3, #3
 8021484:	7812      	ldrb	r2, [r2, #0]
 8021486:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8021488:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 802148c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8021490:	4413      	add	r3, r2
 8021492:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8021494:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8021498:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 802149c:	441a      	add	r2, r3
 802149e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80214a2:	3301      	adds	r3, #1
 80214a4:	7812      	ldrb	r2, [r2, #0]
 80214a6:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80214a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80214ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80214b0:	1ad3      	subs	r3, r2, r3
 80214b2:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80214b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80214b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80214bc:	441a      	add	r2, r3
 80214be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80214c2:	3302      	adds	r3, #2
 80214c4:	7812      	ldrb	r2, [r2, #0]
 80214c6:	701a      	strb	r2, [r3, #0]
    
    wsptr += 4;		/* advance pointer to next row */
 80214c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80214cc:	3310      	adds	r3, #16
 80214ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  for (ctr = 0; ctr < 8; ctr++) {
 80214d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80214d6:	3301      	adds	r3, #1
 80214d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80214dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80214e0:	2b07      	cmp	r3, #7
 80214e2:	f77f af5f 	ble.w	80213a4 <jpeg_idct_4x8+0x4d8>
  }
}
 80214e6:	bf00      	nop
 80214e8:	bf00      	nop
 80214ea:	37dc      	adds	r7, #220	; 0xdc
 80214ec:	46bd      	mov	sp, r7
 80214ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214f2:	4770      	bx	lr
 80214f4:	ffffc4df 	.word	0xffffc4df

080214f8 <jpeg_idct_3x6>:

GLOBAL(void)
jpeg_idct_3x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80214f8:	b480      	push	{r7}
 80214fa:	b0a7      	sub	sp, #156	; 0x9c
 80214fc:	af00      	add	r7, sp, #0
 80214fe:	60f8      	str	r0, [r7, #12]
 8021500:	60b9      	str	r1, [r7, #8]
 8021502:	607a      	str	r2, [r7, #4]
 8021504:	603b      	str	r3, [r7, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8021506:	68fb      	ldr	r3, [r7, #12]
 8021508:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 802150c:	3380      	adds	r3, #128	; 0x80
 802150e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
 8021512:	687b      	ldr	r3, [r7, #4]
 8021514:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8021518:	68bb      	ldr	r3, [r7, #8]
 802151a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802151c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  wsptr = workspace;
 8021520:	f107 0314 	add.w	r3, r7, #20
 8021524:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8021528:	2300      	movs	r3, #0
 802152a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 802152e:	e0cf      	b.n	80216d0 <jpeg_idct_3x6+0x1d8>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8021530:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8021534:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021538:	461a      	mov	r2, r3
 802153a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802153e:	681b      	ldr	r3, [r3, #0]
 8021540:	fb03 f302 	mul.w	r3, r3, r2
 8021544:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp0 <<= CONST_BITS;
 8021546:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8021548:	035b      	lsls	r3, r3, #13
 802154a:	67fb      	str	r3, [r7, #124]	; 0x7c
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 802154c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802154e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8021552:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8021554:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8021558:	3340      	adds	r3, #64	; 0x40
 802155a:	f9b3 3000 	ldrsh.w	r3, [r3]
 802155e:	461a      	mov	r2, r3
 8021560:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8021564:	3380      	adds	r3, #128	; 0x80
 8021566:	681b      	ldr	r3, [r3, #0]
 8021568:	fb03 f302 	mul.w	r3, r3, r2
 802156c:	67bb      	str	r3, [r7, #120]	; 0x78
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 802156e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8021570:	f241 62a1 	movw	r2, #5793	; 0x16a1
 8021574:	fb02 f303 	mul.w	r3, r2, r3
 8021578:	673b      	str	r3, [r7, #112]	; 0x70
    tmp1 = tmp0 + tmp10;
 802157a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 802157c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802157e:	4413      	add	r3, r2
 8021580:	66fb      	str	r3, [r7, #108]	; 0x6c
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 8021582:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8021584:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021586:	1ad2      	subs	r2, r2, r3
 8021588:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802158a:	1ad3      	subs	r3, r2, r3
 802158c:	12db      	asrs	r3, r3, #11
 802158e:	66bb      	str	r3, [r7, #104]	; 0x68
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8021590:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8021594:	3320      	adds	r3, #32
 8021596:	f9b3 3000 	ldrsh.w	r3, [r3]
 802159a:	461a      	mov	r2, r3
 802159c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80215a0:	3340      	adds	r3, #64	; 0x40
 80215a2:	681b      	ldr	r3, [r3, #0]
 80215a4:	fb03 f302 	mul.w	r3, r3, r2
 80215a8:	673b      	str	r3, [r7, #112]	; 0x70
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80215aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80215ac:	f242 7231 	movw	r2, #10033	; 0x2731
 80215b0:	fb02 f303 	mul.w	r3, r2, r3
 80215b4:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp10 = tmp1 + tmp0;
 80215b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80215b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80215ba:	4413      	add	r3, r2
 80215bc:	673b      	str	r3, [r7, #112]	; 0x70
    tmp12 = tmp1 - tmp0;
 80215be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80215c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80215c2:	1ad3      	subs	r3, r2, r3
 80215c4:	677b      	str	r3, [r7, #116]	; 0x74

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80215c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80215ca:	3310      	adds	r3, #16
 80215cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80215d0:	461a      	mov	r2, r3
 80215d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80215d6:	3320      	adds	r3, #32
 80215d8:	681b      	ldr	r3, [r3, #0]
 80215da:	fb03 f302 	mul.w	r3, r3, r2
 80215de:	667b      	str	r3, [r7, #100]	; 0x64
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80215e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80215e4:	3330      	adds	r3, #48	; 0x30
 80215e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80215ea:	461a      	mov	r2, r3
 80215ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80215f0:	3360      	adds	r3, #96	; 0x60
 80215f2:	681b      	ldr	r3, [r3, #0]
 80215f4:	fb03 f302 	mul.w	r3, r3, r2
 80215f8:	663b      	str	r3, [r7, #96]	; 0x60
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80215fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80215fe:	3350      	adds	r3, #80	; 0x50
 8021600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021604:	461a      	mov	r2, r3
 8021606:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802160a:	33a0      	adds	r3, #160	; 0xa0
 802160c:	681b      	ldr	r3, [r3, #0]
 802160e:	fb03 f302 	mul.w	r3, r3, r2
 8021612:	65fb      	str	r3, [r7, #92]	; 0x5c
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8021614:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8021616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021618:	4413      	add	r3, r2
 802161a:	f640 32b6 	movw	r2, #2998	; 0xbb6
 802161e:	fb02 f303 	mul.w	r3, r2, r3
 8021622:	66fb      	str	r3, [r7, #108]	; 0x6c
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8021624:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8021626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021628:	4413      	add	r3, r2
 802162a:	035b      	lsls	r3, r3, #13
 802162c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802162e:	4413      	add	r3, r2
 8021630:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8021632:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8021634:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021636:	1ad3      	subs	r3, r2, r3
 8021638:	035b      	lsls	r3, r3, #13
 802163a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802163c:	4413      	add	r3, r2
 802163e:	67bb      	str	r3, [r7, #120]	; 0x78
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8021640:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8021642:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021644:	1ad2      	subs	r2, r2, r3
 8021646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021648:	1ad3      	subs	r3, r2, r3
 802164a:	009b      	lsls	r3, r3, #2
 802164c:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 802164e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8021650:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8021652:	4413      	add	r3, r2
 8021654:	12da      	asrs	r2, r3, #11
 8021656:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802165a:	601a      	str	r2, [r3, #0]
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 802165c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 802165e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8021660:	1ad2      	subs	r2, r2, r3
 8021662:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021666:	333c      	adds	r3, #60	; 0x3c
 8021668:	12d2      	asrs	r2, r2, #11
 802166a:	601a      	str	r2, [r3, #0]
    wsptr[3*1] = (int) (tmp11 + tmp1);
 802166c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021670:	330c      	adds	r3, #12
 8021672:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8021674:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8021676:	440a      	add	r2, r1
 8021678:	601a      	str	r2, [r3, #0]
    wsptr[3*4] = (int) (tmp11 - tmp1);
 802167a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802167e:	3330      	adds	r3, #48	; 0x30
 8021680:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8021682:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8021684:	1a8a      	subs	r2, r1, r2
 8021686:	601a      	str	r2, [r3, #0]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8021688:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 802168a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802168c:	441a      	add	r2, r3
 802168e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021692:	3318      	adds	r3, #24
 8021694:	12d2      	asrs	r2, r2, #11
 8021696:	601a      	str	r2, [r3, #0]
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8021698:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 802169a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802169c:	1ad2      	subs	r2, r2, r3
 802169e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80216a2:	3324      	adds	r3, #36	; 0x24
 80216a4:	12d2      	asrs	r2, r2, #11
 80216a6:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80216a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80216ac:	3301      	adds	r3, #1
 80216ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80216b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80216b6:	3302      	adds	r3, #2
 80216b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80216bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80216c0:	3304      	adds	r3, #4
 80216c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80216c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80216ca:	3304      	adds	r3, #4
 80216cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80216d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80216d4:	2b02      	cmp	r3, #2
 80216d6:	f77f af2b 	ble.w	8021530 <jpeg_idct_3x6+0x38>
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  wsptr = workspace;
 80216da:	f107 0314 	add.w	r3, r7, #20
 80216de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  for (ctr = 0; ctr < 6; ctr++) {
 80216e2:	2300      	movs	r3, #0
 80216e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80216e8:	e063      	b.n	80217b2 <jpeg_idct_3x6+0x2ba>
    outptr = output_buf[ctr] + output_col;
 80216ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80216ee:	009b      	lsls	r3, r3, #2
 80216f0:	683a      	ldr	r2, [r7, #0]
 80216f2:	4413      	add	r3, r2
 80216f4:	681a      	ldr	r2, [r3, #0]
 80216f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80216fa:	4413      	add	r3, r2
 80216fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8021700:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021704:	681b      	ldr	r3, [r3, #0]
 8021706:	3310      	adds	r3, #16
 8021708:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp0 <<= CONST_BITS;
 802170a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802170c:	035b      	lsls	r3, r3, #13
 802170e:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp2 = (INT32) wsptr[2];
 8021710:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8021714:	3308      	adds	r3, #8
 8021716:	681b      	ldr	r3, [r3, #0]
 8021718:	67bb      	str	r3, [r7, #120]	; 0x78
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 802171a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802171c:	f241 62a1 	movw	r2, #5793	; 0x16a1
 8021720:	fb02 f303 	mul.w	r3, r2, r3
 8021724:	677b      	str	r3, [r7, #116]	; 0x74
    tmp10 = tmp0 + tmp12;
 8021726:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8021728:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802172a:	4413      	add	r3, r2
 802172c:	673b      	str	r3, [r7, #112]	; 0x70
    tmp2 = tmp0 - tmp12 - tmp12;
 802172e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8021730:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021732:	1ad2      	subs	r2, r2, r3
 8021734:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021736:	1ad3      	subs	r3, r2, r3
 8021738:	67bb      	str	r3, [r7, #120]	; 0x78

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
 802173a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802173e:	3304      	adds	r3, #4
 8021740:	681b      	ldr	r3, [r3, #0]
 8021742:	677b      	str	r3, [r7, #116]	; 0x74
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8021744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021746:	f242 7231 	movw	r2, #10033	; 0x2731
 802174a:	fb02 f303 	mul.w	r3, r2, r3
 802174e:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8021750:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8021752:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8021754:	4413      	add	r3, r2
 8021756:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8021758:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 802175c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8021760:	4413      	add	r3, r2
 8021762:	781a      	ldrb	r2, [r3, #0]
 8021764:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021768:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 802176a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 802176c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802176e:	1ad3      	subs	r3, r2, r3
 8021770:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8021772:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8021776:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 802177a:	441a      	add	r2, r3
 802177c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021780:	3302      	adds	r3, #2
 8021782:	7812      	ldrb	r2, [r2, #0]
 8021784:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 8021786:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8021788:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 802178a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 802178e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8021792:	441a      	add	r2, r3
 8021794:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8021798:	3301      	adds	r3, #1
 802179a:	7812      	ldrb	r2, [r2, #0]
 802179c:	701a      	strb	r2, [r3, #0]

    wsptr += 3;		/* advance pointer to next row */
 802179e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80217a2:	330c      	adds	r3, #12
 80217a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  for (ctr = 0; ctr < 6; ctr++) {
 80217a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80217ac:	3301      	adds	r3, #1
 80217ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80217b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80217b6:	2b05      	cmp	r3, #5
 80217b8:	dd97      	ble.n	80216ea <jpeg_idct_3x6+0x1f2>
  }
}
 80217ba:	bf00      	nop
 80217bc:	bf00      	nop
 80217be:	379c      	adds	r7, #156	; 0x9c
 80217c0:	46bd      	mov	sp, r7
 80217c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217c6:	4770      	bx	lr

080217c8 <jpeg_idct_2x4>:

GLOBAL(void)
jpeg_idct_2x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80217c8:	b480      	push	{r7}
 80217ca:	b09b      	sub	sp, #108	; 0x6c
 80217cc:	af00      	add	r7, sp, #0
 80217ce:	60f8      	str	r0, [r7, #12]
 80217d0:	60b9      	str	r1, [r7, #8]
 80217d2:	607a      	str	r2, [r7, #4]
 80217d4:	603b      	str	r3, [r7, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80217d6:	68fb      	ldr	r3, [r7, #12]
 80217d8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80217dc:	3380      	adds	r3, #128	; 0x80
 80217de:	657b      	str	r3, [r7, #84]	; 0x54

  /* Pass 1: process columns from input, store into work array.
   * 4-point IDCT kernel,
   * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
   */
  inptr = coef_block;
 80217e0:	687b      	ldr	r3, [r7, #4]
 80217e2:	667b      	str	r3, [r7, #100]	; 0x64
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80217e4:	68bb      	ldr	r3, [r7, #8]
 80217e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80217e8:	663b      	str	r3, [r7, #96]	; 0x60
  wsptr = workspace;
 80217ea:	f107 0314 	add.w	r3, r7, #20
 80217ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 80217f0:	2300      	movs	r3, #0
 80217f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80217f4:	e06d      	b.n	80218d2 <jpeg_idct_2x4+0x10a>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80217f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80217f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80217fc:	461a      	mov	r2, r3
 80217fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021800:	681b      	ldr	r3, [r3, #0]
 8021802:	fb03 f302 	mul.w	r3, r3, r2
 8021806:	64bb      	str	r3, [r7, #72]	; 0x48
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8021808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802180a:	3320      	adds	r3, #32
 802180c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021810:	461a      	mov	r2, r3
 8021812:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021814:	3340      	adds	r3, #64	; 0x40
 8021816:	681b      	ldr	r3, [r3, #0]
 8021818:	fb03 f302 	mul.w	r3, r3, r2
 802181c:	647b      	str	r3, [r7, #68]	; 0x44

    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 802181e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8021820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021822:	4413      	add	r3, r2
 8021824:	035b      	lsls	r3, r3, #13
 8021826:	64fb      	str	r3, [r7, #76]	; 0x4c
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8021828:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802182a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802182c:	1ad3      	subs	r3, r2, r3
 802182e:	035b      	lsls	r3, r3, #13
 8021830:	643b      	str	r3, [r7, #64]	; 0x40

    /* Odd part */
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8021832:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021834:	3310      	adds	r3, #16
 8021836:	f9b3 3000 	ldrsh.w	r3, [r3]
 802183a:	461a      	mov	r2, r3
 802183c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802183e:	3320      	adds	r3, #32
 8021840:	681b      	ldr	r3, [r3, #0]
 8021842:	fb03 f302 	mul.w	r3, r3, r2
 8021846:	63fb      	str	r3, [r7, #60]	; 0x3c
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8021848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802184a:	3330      	adds	r3, #48	; 0x30
 802184c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021850:	461a      	mov	r2, r3
 8021852:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021854:	3360      	adds	r3, #96	; 0x60
 8021856:	681b      	ldr	r3, [r3, #0]
 8021858:	fb03 f302 	mul.w	r3, r3, r2
 802185c:	63bb      	str	r3, [r7, #56]	; 0x38

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 802185e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8021860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021862:	4413      	add	r3, r2
 8021864:	f241 1251 	movw	r2, #4433	; 0x1151
 8021868:	fb02 f303 	mul.w	r3, r2, r3
 802186c:	637b      	str	r3, [r7, #52]	; 0x34
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 802186e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021870:	f641 027e 	movw	r2, #6270	; 0x187e
 8021874:	fb02 f303 	mul.w	r3, r2, r3
 8021878:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802187a:	4413      	add	r3, r2
 802187c:	64bb      	str	r3, [r7, #72]	; 0x48
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 802187e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021880:	4a34      	ldr	r2, [pc, #208]	; (8021954 <jpeg_idct_2x4+0x18c>)
 8021882:	fb02 f303 	mul.w	r3, r2, r3
 8021886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021888:	4413      	add	r3, r2
 802188a:	647b      	str	r3, [r7, #68]	; 0x44

    /* Final output stage */

    wsptr[2*0] = tmp10 + tmp0;
 802188c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802188e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021890:	441a      	add	r2, r3
 8021892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021894:	601a      	str	r2, [r3, #0]
    wsptr[2*3] = tmp10 - tmp0;
 8021896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021898:	3318      	adds	r3, #24
 802189a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 802189c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802189e:	1a8a      	subs	r2, r1, r2
 80218a0:	601a      	str	r2, [r3, #0]
    wsptr[2*1] = tmp12 + tmp2;
 80218a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80218a4:	3308      	adds	r3, #8
 80218a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80218a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80218aa:	440a      	add	r2, r1
 80218ac:	601a      	str	r2, [r3, #0]
    wsptr[2*2] = tmp12 - tmp2;
 80218ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80218b0:	3310      	adds	r3, #16
 80218b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80218b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80218b6:	1a8a      	subs	r2, r1, r2
 80218b8:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 80218ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80218bc:	3301      	adds	r3, #1
 80218be:	65bb      	str	r3, [r7, #88]	; 0x58
 80218c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80218c2:	3302      	adds	r3, #2
 80218c4:	667b      	str	r3, [r7, #100]	; 0x64
 80218c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80218c8:	3304      	adds	r3, #4
 80218ca:	663b      	str	r3, [r7, #96]	; 0x60
 80218cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80218ce:	3304      	adds	r3, #4
 80218d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80218d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80218d4:	2b01      	cmp	r3, #1
 80218d6:	dd8e      	ble.n	80217f6 <jpeg_idct_2x4+0x2e>
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 80218d8:	f107 0314 	add.w	r3, r7, #20
 80218dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 4; ctr++) {
 80218de:	2300      	movs	r3, #0
 80218e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80218e2:	e02c      	b.n	802193e <jpeg_idct_2x4+0x176>
    outptr = output_buf[ctr] + output_col;
 80218e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80218e6:	009b      	lsls	r3, r3, #2
 80218e8:	683a      	ldr	r2, [r7, #0]
 80218ea:	4413      	add	r3, r2
 80218ec:	681a      	ldr	r2, [r3, #0]
 80218ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80218f0:	4413      	add	r3, r2
 80218f2:	653b      	str	r3, [r7, #80]	; 0x50

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 80218f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80218f6:	681b      	ldr	r3, [r3, #0]
 80218f8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80218fc:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Odd part */

    tmp0 = wsptr[1];
 80218fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021900:	685b      	ldr	r3, [r3, #4]
 8021902:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8021904:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8021906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021908:	4413      	add	r3, r2
 802190a:	141b      	asrs	r3, r3, #16
			    & RANGE_MASK];
 802190c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8021910:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8021912:	4413      	add	r3, r2
 8021914:	781a      	ldrb	r2, [r3, #0]
 8021916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021918:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 802191a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802191c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802191e:	1ad3      	subs	r3, r2, r3
 8021920:	141b      	asrs	r3, r3, #16
			    & RANGE_MASK];
 8021922:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 8021926:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8021928:	441a      	add	r2, r3
 802192a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802192c:	3301      	adds	r3, #1
 802192e:	7812      	ldrb	r2, [r2, #0]
 8021930:	701a      	strb	r2, [r3, #0]

    wsptr += 2;		/* advance pointer to next row */
 8021932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021934:	3308      	adds	r3, #8
 8021936:	65fb      	str	r3, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 4; ctr++) {
 8021938:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802193a:	3301      	adds	r3, #1
 802193c:	65bb      	str	r3, [r7, #88]	; 0x58
 802193e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8021940:	2b03      	cmp	r3, #3
 8021942:	ddcf      	ble.n	80218e4 <jpeg_idct_2x4+0x11c>
  }
}
 8021944:	bf00      	nop
 8021946:	bf00      	nop
 8021948:	376c      	adds	r7, #108	; 0x6c
 802194a:	46bd      	mov	sp, r7
 802194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021950:	4770      	bx	lr
 8021952:	bf00      	nop
 8021954:	ffffc4df 	.word	0xffffc4df

08021958 <jpeg_idct_1x2>:

GLOBAL(void)
jpeg_idct_1x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8021958:	b480      	push	{r7}
 802195a:	b089      	sub	sp, #36	; 0x24
 802195c:	af00      	add	r7, sp, #0
 802195e:	60f8      	str	r0, [r7, #12]
 8021960:	60b9      	str	r1, [r7, #8]
 8021962:	607a      	str	r2, [r7, #4]
 8021964:	603b      	str	r3, [r7, #0]
  INT32 tmp0, tmp10;
  ISLOW_MULT_TYPE * quantptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8021966:	68fb      	ldr	r3, [r7, #12]
 8021968:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 802196c:	3380      	adds	r3, #128	; 0x80
 802196e:	61fb      	str	r3, [r7, #28]
  SHIFT_TEMPS

  /* Process 1 column from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8021970:	68bb      	ldr	r3, [r7, #8]
 8021972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021974:	61bb      	str	r3, [r7, #24]

  /* Even part */
    
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8021976:	687b      	ldr	r3, [r7, #4]
 8021978:	f9b3 3000 	ldrsh.w	r3, [r3]
 802197c:	461a      	mov	r2, r3
 802197e:	69bb      	ldr	r3, [r7, #24]
 8021980:	681b      	ldr	r3, [r3, #0]
 8021982:	fb03 f302 	mul.w	r3, r3, r2
 8021986:	617b      	str	r3, [r7, #20]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;
 8021988:	697b      	ldr	r3, [r7, #20]
 802198a:	3304      	adds	r3, #4
 802198c:	617b      	str	r3, [r7, #20]

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 802198e:	687b      	ldr	r3, [r7, #4]
 8021990:	3310      	adds	r3, #16
 8021992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021996:	461a      	mov	r2, r3
 8021998:	69bb      	ldr	r3, [r7, #24]
 802199a:	3320      	adds	r3, #32
 802199c:	681b      	ldr	r3, [r3, #0]
 802199e:	fb03 f302 	mul.w	r3, r3, r2
 80219a2:	613b      	str	r3, [r7, #16]

  /* Final output stage */

  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 80219a4:	697a      	ldr	r2, [r7, #20]
 80219a6:	693b      	ldr	r3, [r7, #16]
 80219a8:	4413      	add	r3, r2
 80219aa:	10db      	asrs	r3, r3, #3
					  & RANGE_MASK];
 80219ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 80219b0:	69fa      	ldr	r2, [r7, #28]
 80219b2:	441a      	add	r2, r3
 80219b4:	683b      	ldr	r3, [r7, #0]
 80219b6:	6819      	ldr	r1, [r3, #0]
 80219b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219ba:	440b      	add	r3, r1
 80219bc:	7812      	ldrb	r2, [r2, #0]
 80219be:	701a      	strb	r2, [r3, #0]
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 80219c0:	697a      	ldr	r2, [r7, #20]
 80219c2:	693b      	ldr	r3, [r7, #16]
 80219c4:	1ad3      	subs	r3, r2, r3
 80219c6:	10db      	asrs	r3, r3, #3
					  & RANGE_MASK];
 80219c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 80219cc:	69fa      	ldr	r2, [r7, #28]
 80219ce:	441a      	add	r2, r3
 80219d0:	683b      	ldr	r3, [r7, #0]
 80219d2:	3304      	adds	r3, #4
 80219d4:	6819      	ldr	r1, [r3, #0]
 80219d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219d8:	440b      	add	r3, r1
 80219da:	7812      	ldrb	r2, [r2, #0]
 80219dc:	701a      	strb	r2, [r3, #0]
}
 80219de:	bf00      	nop
 80219e0:	3724      	adds	r7, #36	; 0x24
 80219e2:	46bd      	mov	sp, r7
 80219e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219e8:	4770      	bx	lr

080219ea <out_of_memory>:

LOCAL(void)
out_of_memory (j_common_ptr cinfo, int which)
/* Report an out-of-memory error and stop execution */
/* If we compiled MEM_STATS support, report alloc requests before dying */
{
 80219ea:	b580      	push	{r7, lr}
 80219ec:	b082      	sub	sp, #8
 80219ee:	af00      	add	r7, sp, #0
 80219f0:	6078      	str	r0, [r7, #4]
 80219f2:	6039      	str	r1, [r7, #0]
#ifdef MEM_STATS
  cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
 80219f4:	687b      	ldr	r3, [r7, #4]
 80219f6:	681b      	ldr	r3, [r3, #0]
 80219f8:	2238      	movs	r2, #56	; 0x38
 80219fa:	615a      	str	r2, [r3, #20]
 80219fc:	687b      	ldr	r3, [r7, #4]
 80219fe:	681b      	ldr	r3, [r3, #0]
 8021a00:	683a      	ldr	r2, [r7, #0]
 8021a02:	619a      	str	r2, [r3, #24]
 8021a04:	687b      	ldr	r3, [r7, #4]
 8021a06:	681b      	ldr	r3, [r3, #0]
 8021a08:	681b      	ldr	r3, [r3, #0]
 8021a0a:	6878      	ldr	r0, [r7, #4]
 8021a0c:	4798      	blx	r3
}
 8021a0e:	bf00      	nop
 8021a10:	3708      	adds	r7, #8
 8021a12:	46bd      	mov	sp, r7
 8021a14:	bd80      	pop	{r7, pc}
	...

08021a18 <alloc_small>:


METHODDEF(void *)
alloc_small (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
/* Allocate a "small" object */
{
 8021a18:	b580      	push	{r7, lr}
 8021a1a:	b08c      	sub	sp, #48	; 0x30
 8021a1c:	af00      	add	r7, sp, #0
 8021a1e:	60f8      	str	r0, [r7, #12]
 8021a20:	60b9      	str	r1, [r7, #8]
 8021a22:	607a      	str	r2, [r7, #4]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8021a24:	68fb      	ldr	r3, [r7, #12]
 8021a26:	685b      	ldr	r3, [r3, #4]
 8021a28:	623b      	str	r3, [r7, #32]
  small_pool_ptr hdr_ptr, prev_hdr_ptr;
  char * data_ptr;
  size_t odd_bytes, min_request, slop;

  /* Check for unsatisfiable request (do now to ensure no overflow below) */
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8021a2a:	687b      	ldr	r3, [r7, #4]
 8021a2c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8021a30:	4293      	cmp	r3, r2
 8021a32:	d903      	bls.n	8021a3c <alloc_small+0x24>
    out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 8021a34:	2101      	movs	r1, #1
 8021a36:	68f8      	ldr	r0, [r7, #12]
 8021a38:	f7ff ffd7 	bl	80219ea <out_of_memory>

  /* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
  odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
 8021a3c:	687b      	ldr	r3, [r7, #4]
 8021a3e:	f003 0307 	and.w	r3, r3, #7
 8021a42:	61fb      	str	r3, [r7, #28]
  if (odd_bytes > 0)
 8021a44:	69fb      	ldr	r3, [r7, #28]
 8021a46:	2b00      	cmp	r3, #0
 8021a48:	d004      	beq.n	8021a54 <alloc_small+0x3c>
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 8021a4a:	687a      	ldr	r2, [r7, #4]
 8021a4c:	69fb      	ldr	r3, [r7, #28]
 8021a4e:	1ad3      	subs	r3, r2, r3
 8021a50:	3308      	adds	r3, #8
 8021a52:	607b      	str	r3, [r7, #4]

  /* See if space is available in any existing pool */
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8021a54:	68bb      	ldr	r3, [r7, #8]
 8021a56:	2b00      	cmp	r3, #0
 8021a58:	db02      	blt.n	8021a60 <alloc_small+0x48>
 8021a5a:	68bb      	ldr	r3, [r7, #8]
 8021a5c:	2b01      	cmp	r3, #1
 8021a5e:	dd0c      	ble.n	8021a7a <alloc_small+0x62>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8021a60:	68fb      	ldr	r3, [r7, #12]
 8021a62:	681b      	ldr	r3, [r3, #0]
 8021a64:	220f      	movs	r2, #15
 8021a66:	615a      	str	r2, [r3, #20]
 8021a68:	68fb      	ldr	r3, [r7, #12]
 8021a6a:	681b      	ldr	r3, [r3, #0]
 8021a6c:	68ba      	ldr	r2, [r7, #8]
 8021a6e:	619a      	str	r2, [r3, #24]
 8021a70:	68fb      	ldr	r3, [r7, #12]
 8021a72:	681b      	ldr	r3, [r3, #0]
 8021a74:	681b      	ldr	r3, [r3, #0]
 8021a76:	68f8      	ldr	r0, [r7, #12]
 8021a78:	4798      	blx	r3
  prev_hdr_ptr = NULL;
 8021a7a:	2300      	movs	r3, #0
 8021a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  hdr_ptr = mem->small_list[pool_id];
 8021a7e:	6a3a      	ldr	r2, [r7, #32]
 8021a80:	68bb      	ldr	r3, [r7, #8]
 8021a82:	330c      	adds	r3, #12
 8021a84:	009b      	lsls	r3, r3, #2
 8021a86:	4413      	add	r3, r2
 8021a88:	685b      	ldr	r3, [r3, #4]
 8021a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (hdr_ptr != NULL) {
 8021a8c:	e009      	b.n	8021aa2 <alloc_small+0x8a>
    if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 8021a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a90:	689b      	ldr	r3, [r3, #8]
 8021a92:	687a      	ldr	r2, [r7, #4]
 8021a94:	429a      	cmp	r2, r3
 8021a96:	d908      	bls.n	8021aaa <alloc_small+0x92>
      break;			/* found pool with enough space */
    prev_hdr_ptr = hdr_ptr;
 8021a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    hdr_ptr = hdr_ptr->hdr.next;
 8021a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a9e:	681b      	ldr	r3, [r3, #0]
 8021aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (hdr_ptr != NULL) {
 8021aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021aa4:	2b00      	cmp	r3, #0
 8021aa6:	d1f2      	bne.n	8021a8e <alloc_small+0x76>
 8021aa8:	e000      	b.n	8021aac <alloc_small+0x94>
      break;			/* found pool with enough space */
 8021aaa:	bf00      	nop
  }

  /* Time to make a new pool? */
  if (hdr_ptr == NULL) {
 8021aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021aae:	2b00      	cmp	r3, #0
 8021ab0:	d154      	bne.n	8021b5c <alloc_small+0x144>
    /* min_request is what we need now, slop is what will be leftover */
    min_request = sizeofobject + SIZEOF(small_pool_hdr);
 8021ab2:	687b      	ldr	r3, [r7, #4]
 8021ab4:	3310      	adds	r3, #16
 8021ab6:	61bb      	str	r3, [r7, #24]
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 8021ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021aba:	2b00      	cmp	r3, #0
 8021abc:	d105      	bne.n	8021aca <alloc_small+0xb2>
      slop = first_pool_slop[pool_id];
 8021abe:	4a34      	ldr	r2, [pc, #208]	; (8021b90 <alloc_small+0x178>)
 8021ac0:	68bb      	ldr	r3, [r7, #8]
 8021ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8021ac8:	e004      	b.n	8021ad4 <alloc_small+0xbc>
    else
      slop = extra_pool_slop[pool_id];
 8021aca:	4a32      	ldr	r2, [pc, #200]	; (8021b94 <alloc_small+0x17c>)
 8021acc:	68bb      	ldr	r3, [r7, #8]
 8021ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021ad2:	627b      	str	r3, [r7, #36]	; 0x24
    /* Don't ask for more than MAX_ALLOC_CHUNK */
    if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
 8021ad4:	69bb      	ldr	r3, [r7, #24]
 8021ad6:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8021ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021adc:	429a      	cmp	r2, r3
 8021ade:	d903      	bls.n	8021ae8 <alloc_small+0xd0>
      slop = (size_t) (MAX_ALLOC_CHUNK-min_request);
 8021ae0:	69bb      	ldr	r3, [r7, #24]
 8021ae2:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8021ae6:	627b      	str	r3, [r7, #36]	; 0x24
    /* Try to get space, if fail reduce slop and try again */
    for (;;) {
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 8021ae8:	69ba      	ldr	r2, [r7, #24]
 8021aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021aec:	4413      	add	r3, r2
 8021aee:	4619      	mov	r1, r3
 8021af0:	68f8      	ldr	r0, [r7, #12]
 8021af2:	f000 feff 	bl	80228f4 <jpeg_get_small>
 8021af6:	62f8      	str	r0, [r7, #44]	; 0x2c
      if (hdr_ptr != NULL)
 8021af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021afa:	2b00      	cmp	r3, #0
 8021afc:	d10a      	bne.n	8021b14 <alloc_small+0xfc>
	break;
      slop /= 2;
 8021afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021b00:	085b      	lsrs	r3, r3, #1
 8021b02:	627b      	str	r3, [r7, #36]	; 0x24
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 8021b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021b06:	2b31      	cmp	r3, #49	; 0x31
 8021b08:	d8ee      	bhi.n	8021ae8 <alloc_small+0xd0>
	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 8021b0a:	2102      	movs	r1, #2
 8021b0c:	68f8      	ldr	r0, [r7, #12]
 8021b0e:	f7ff ff6c 	bl	80219ea <out_of_memory>
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 8021b12:	e7e9      	b.n	8021ae8 <alloc_small+0xd0>
	break;
 8021b14:	bf00      	nop
    }
    mem->total_space_allocated += min_request + slop;
 8021b16:	6a3b      	ldr	r3, [r7, #32]
 8021b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021b1a:	4619      	mov	r1, r3
 8021b1c:	69ba      	ldr	r2, [r7, #24]
 8021b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021b20:	4413      	add	r3, r2
 8021b22:	440b      	add	r3, r1
 8021b24:	461a      	mov	r2, r3
 8021b26:	6a3b      	ldr	r3, [r7, #32]
 8021b28:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Success, initialize the new pool header and add to end of list */
    hdr_ptr->hdr.next = NULL;
 8021b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b2c:	2200      	movs	r2, #0
 8021b2e:	601a      	str	r2, [r3, #0]
    hdr_ptr->hdr.bytes_used = 0;
 8021b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b32:	2200      	movs	r2, #0
 8021b34:	605a      	str	r2, [r3, #4]
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 8021b36:	687a      	ldr	r2, [r7, #4]
 8021b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021b3a:	441a      	add	r2, r3
 8021b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b3e:	609a      	str	r2, [r3, #8]
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 8021b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b42:	2b00      	cmp	r3, #0
 8021b44:	d107      	bne.n	8021b56 <alloc_small+0x13e>
      mem->small_list[pool_id] = hdr_ptr;
 8021b46:	6a3a      	ldr	r2, [r7, #32]
 8021b48:	68bb      	ldr	r3, [r7, #8]
 8021b4a:	330c      	adds	r3, #12
 8021b4c:	009b      	lsls	r3, r3, #2
 8021b4e:	4413      	add	r3, r2
 8021b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021b52:	605a      	str	r2, [r3, #4]
 8021b54:	e002      	b.n	8021b5c <alloc_small+0x144>
    else
      prev_hdr_ptr->hdr.next = hdr_ptr;
 8021b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021b5a:	601a      	str	r2, [r3, #0]
  }

  /* OK, allocate the object from the current pool */
  data_ptr = (char *) (hdr_ptr + 1); /* point to first data byte in pool */
 8021b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b5e:	3310      	adds	r3, #16
 8021b60:	617b      	str	r3, [r7, #20]
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8021b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b64:	685b      	ldr	r3, [r3, #4]
 8021b66:	697a      	ldr	r2, [r7, #20]
 8021b68:	4413      	add	r3, r2
 8021b6a:	617b      	str	r3, [r7, #20]
  hdr_ptr->hdr.bytes_used += sizeofobject;
 8021b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b6e:	685a      	ldr	r2, [r3, #4]
 8021b70:	687b      	ldr	r3, [r7, #4]
 8021b72:	441a      	add	r2, r3
 8021b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b76:	605a      	str	r2, [r3, #4]
  hdr_ptr->hdr.bytes_left -= sizeofobject;
 8021b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b7a:	689a      	ldr	r2, [r3, #8]
 8021b7c:	687b      	ldr	r3, [r7, #4]
 8021b7e:	1ad2      	subs	r2, r2, r3
 8021b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b82:	609a      	str	r2, [r3, #8]

  return (void *) data_ptr;
 8021b84:	697b      	ldr	r3, [r7, #20]
}
 8021b86:	4618      	mov	r0, r3
 8021b88:	3730      	adds	r7, #48	; 0x30
 8021b8a:	46bd      	mov	sp, r7
 8021b8c:	bd80      	pop	{r7, pc}
 8021b8e:	bf00      	nop
 8021b90:	080274fc 	.word	0x080274fc
 8021b94:	08027504 	.word	0x08027504

08021b98 <alloc_large>:
 */

METHODDEF(void FAR *)
alloc_large (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
/* Allocate a "large" object */
{
 8021b98:	b580      	push	{r7, lr}
 8021b9a:	b088      	sub	sp, #32
 8021b9c:	af00      	add	r7, sp, #0
 8021b9e:	60f8      	str	r0, [r7, #12]
 8021ba0:	60b9      	str	r1, [r7, #8]
 8021ba2:	607a      	str	r2, [r7, #4]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8021ba4:	68fb      	ldr	r3, [r7, #12]
 8021ba6:	685b      	ldr	r3, [r3, #4]
 8021ba8:	61fb      	str	r3, [r7, #28]
  large_pool_ptr hdr_ptr;
  size_t odd_bytes;

  /* Check for unsatisfiable request (do now to ensure no overflow below) */
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 8021baa:	687b      	ldr	r3, [r7, #4]
 8021bac:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8021bb0:	4293      	cmp	r3, r2
 8021bb2:	d903      	bls.n	8021bbc <alloc_large+0x24>
    out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 8021bb4:	2103      	movs	r1, #3
 8021bb6:	68f8      	ldr	r0, [r7, #12]
 8021bb8:	f7ff ff17 	bl	80219ea <out_of_memory>

  /* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
  odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
 8021bbc:	687b      	ldr	r3, [r7, #4]
 8021bbe:	f003 0307 	and.w	r3, r3, #7
 8021bc2:	61bb      	str	r3, [r7, #24]
  if (odd_bytes > 0)
 8021bc4:	69bb      	ldr	r3, [r7, #24]
 8021bc6:	2b00      	cmp	r3, #0
 8021bc8:	d004      	beq.n	8021bd4 <alloc_large+0x3c>
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 8021bca:	687a      	ldr	r2, [r7, #4]
 8021bcc:	69bb      	ldr	r3, [r7, #24]
 8021bce:	1ad3      	subs	r3, r2, r3
 8021bd0:	3308      	adds	r3, #8
 8021bd2:	607b      	str	r3, [r7, #4]

  /* Always make a new pool */
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8021bd4:	68bb      	ldr	r3, [r7, #8]
 8021bd6:	2b00      	cmp	r3, #0
 8021bd8:	db02      	blt.n	8021be0 <alloc_large+0x48>
 8021bda:	68bb      	ldr	r3, [r7, #8]
 8021bdc:	2b01      	cmp	r3, #1
 8021bde:	dd0c      	ble.n	8021bfa <alloc_large+0x62>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8021be0:	68fb      	ldr	r3, [r7, #12]
 8021be2:	681b      	ldr	r3, [r3, #0]
 8021be4:	220f      	movs	r2, #15
 8021be6:	615a      	str	r2, [r3, #20]
 8021be8:	68fb      	ldr	r3, [r7, #12]
 8021bea:	681b      	ldr	r3, [r3, #0]
 8021bec:	68ba      	ldr	r2, [r7, #8]
 8021bee:	619a      	str	r2, [r3, #24]
 8021bf0:	68fb      	ldr	r3, [r7, #12]
 8021bf2:	681b      	ldr	r3, [r3, #0]
 8021bf4:	681b      	ldr	r3, [r3, #0]
 8021bf6:	68f8      	ldr	r0, [r7, #12]
 8021bf8:	4798      	blx	r3

  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
 8021bfa:	687b      	ldr	r3, [r7, #4]
 8021bfc:	3310      	adds	r3, #16
 8021bfe:	4619      	mov	r1, r3
 8021c00:	68f8      	ldr	r0, [r7, #12]
 8021c02:	f000 fe91 	bl	8022928 <jpeg_get_large>
 8021c06:	6178      	str	r0, [r7, #20]
					    SIZEOF(large_pool_hdr));
  if (hdr_ptr == NULL)
 8021c08:	697b      	ldr	r3, [r7, #20]
 8021c0a:	2b00      	cmp	r3, #0
 8021c0c:	d103      	bne.n	8021c16 <alloc_large+0x7e>
    out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 8021c0e:	2104      	movs	r1, #4
 8021c10:	68f8      	ldr	r0, [r7, #12]
 8021c12:	f7ff feea 	bl	80219ea <out_of_memory>
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 8021c16:	69fb      	ldr	r3, [r7, #28]
 8021c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021c1a:	461a      	mov	r2, r3
 8021c1c:	687b      	ldr	r3, [r7, #4]
 8021c1e:	4413      	add	r3, r2
 8021c20:	3310      	adds	r3, #16
 8021c22:	461a      	mov	r2, r3
 8021c24:	69fb      	ldr	r3, [r7, #28]
 8021c26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Success, initialize the new pool header and add to list */
  hdr_ptr->hdr.next = mem->large_list[pool_id];
 8021c28:	69fa      	ldr	r2, [r7, #28]
 8021c2a:	68bb      	ldr	r3, [r7, #8]
 8021c2c:	330e      	adds	r3, #14
 8021c2e:	009b      	lsls	r3, r3, #2
 8021c30:	4413      	add	r3, r2
 8021c32:	685a      	ldr	r2, [r3, #4]
 8021c34:	697b      	ldr	r3, [r7, #20]
 8021c36:	601a      	str	r2, [r3, #0]
  /* We maintain space counts in each pool header for statistical purposes,
   * even though they are not needed for allocation.
   */
  hdr_ptr->hdr.bytes_used = sizeofobject;
 8021c38:	697b      	ldr	r3, [r7, #20]
 8021c3a:	687a      	ldr	r2, [r7, #4]
 8021c3c:	605a      	str	r2, [r3, #4]
  hdr_ptr->hdr.bytes_left = 0;
 8021c3e:	697b      	ldr	r3, [r7, #20]
 8021c40:	2200      	movs	r2, #0
 8021c42:	609a      	str	r2, [r3, #8]
  mem->large_list[pool_id] = hdr_ptr;
 8021c44:	69fa      	ldr	r2, [r7, #28]
 8021c46:	68bb      	ldr	r3, [r7, #8]
 8021c48:	330e      	adds	r3, #14
 8021c4a:	009b      	lsls	r3, r3, #2
 8021c4c:	4413      	add	r3, r2
 8021c4e:	697a      	ldr	r2, [r7, #20]
 8021c50:	605a      	str	r2, [r3, #4]

  return (void FAR *) (hdr_ptr + 1); /* point to first data byte in pool */
 8021c52:	697b      	ldr	r3, [r7, #20]
 8021c54:	3310      	adds	r3, #16
}
 8021c56:	4618      	mov	r0, r3
 8021c58:	3720      	adds	r7, #32
 8021c5a:	46bd      	mov	sp, r7
 8021c5c:	bd80      	pop	{r7, pc}

08021c5e <alloc_sarray>:

METHODDEF(JSAMPARRAY)
alloc_sarray (j_common_ptr cinfo, int pool_id,
	      JDIMENSION samplesperrow, JDIMENSION numrows)
/* Allocate a 2-D sample array */
{
 8021c5e:	b580      	push	{r7, lr}
 8021c60:	b08c      	sub	sp, #48	; 0x30
 8021c62:	af00      	add	r7, sp, #0
 8021c64:	60f8      	str	r0, [r7, #12]
 8021c66:	60b9      	str	r1, [r7, #8]
 8021c68:	607a      	str	r2, [r7, #4]
 8021c6a:	603b      	str	r3, [r7, #0]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8021c6c:	68fb      	ldr	r3, [r7, #12]
 8021c6e:	685b      	ldr	r3, [r3, #4]
 8021c70:	61fb      	str	r3, [r7, #28]
  JSAMPROW workspace;
  JDIMENSION rowsperchunk, currow, i;
  long ltemp;

  /* Calculate max # of rows allowed in one allocation chunk */
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8021c72:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8021c76:	687b      	ldr	r3, [r7, #4]
 8021c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8021c7c:	61bb      	str	r3, [r7, #24]
	  ((long) samplesperrow * SIZEOF(JSAMPLE));
  if (ltemp <= 0)
 8021c7e:	69bb      	ldr	r3, [r7, #24]
 8021c80:	2b00      	cmp	r3, #0
 8021c82:	dc08      	bgt.n	8021c96 <alloc_sarray+0x38>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 8021c84:	68fb      	ldr	r3, [r7, #12]
 8021c86:	681b      	ldr	r3, [r3, #0]
 8021c88:	2248      	movs	r2, #72	; 0x48
 8021c8a:	615a      	str	r2, [r3, #20]
 8021c8c:	68fb      	ldr	r3, [r7, #12]
 8021c8e:	681b      	ldr	r3, [r3, #0]
 8021c90:	681b      	ldr	r3, [r3, #0]
 8021c92:	68f8      	ldr	r0, [r7, #12]
 8021c94:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8021c96:	683b      	ldr	r3, [r7, #0]
 8021c98:	69ba      	ldr	r2, [r7, #24]
 8021c9a:	429a      	cmp	r2, r3
 8021c9c:	da02      	bge.n	8021ca4 <alloc_sarray+0x46>
    rowsperchunk = (JDIMENSION) ltemp;
 8021c9e:	69bb      	ldr	r3, [r7, #24]
 8021ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8021ca2:	e001      	b.n	8021ca8 <alloc_sarray+0x4a>
  else
    rowsperchunk = numrows;
 8021ca4:	683b      	ldr	r3, [r7, #0]
 8021ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  mem->last_rowsperchunk = rowsperchunk;
 8021ca8:	69fb      	ldr	r3, [r7, #28]
 8021caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021cac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get space for row pointers (small object) */
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
				    (size_t) (numrows * SIZEOF(JSAMPROW)));
 8021cae:	683b      	ldr	r3, [r7, #0]
 8021cb0:	009b      	lsls	r3, r3, #2
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 8021cb2:	461a      	mov	r2, r3
 8021cb4:	68b9      	ldr	r1, [r7, #8]
 8021cb6:	68f8      	ldr	r0, [r7, #12]
 8021cb8:	f7ff feae 	bl	8021a18 <alloc_small>
 8021cbc:	6178      	str	r0, [r7, #20]

  /* Get the rows themselves (large objects) */
  currow = 0;
 8021cbe:	2300      	movs	r3, #0
 8021cc0:	627b      	str	r3, [r7, #36]	; 0x24
  while (currow < numrows) {
 8021cc2:	e026      	b.n	8021d12 <alloc_sarray+0xb4>
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8021cc4:	683a      	ldr	r2, [r7, #0]
 8021cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021cc8:	1ad3      	subs	r3, r2, r3
 8021cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021ccc:	4293      	cmp	r3, r2
 8021cce:	bf28      	it	cs
 8021cd0:	4613      	movcs	r3, r2
 8021cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 8021cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021cd6:	687a      	ldr	r2, [r7, #4]
 8021cd8:	fb02 f303 	mul.w	r3, r2, r3
 8021cdc:	461a      	mov	r2, r3
 8021cde:	68b9      	ldr	r1, [r7, #8]
 8021ce0:	68f8      	ldr	r0, [r7, #12]
 8021ce2:	f7ff ff59 	bl	8021b98 <alloc_large>
 8021ce6:	62f8      	str	r0, [r7, #44]	; 0x2c
	(size_t) ((size_t) rowsperchunk * (size_t) samplesperrow
		  * SIZEOF(JSAMPLE)));
    for (i = rowsperchunk; i > 0; i--) {
 8021ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021cea:	623b      	str	r3, [r7, #32]
 8021cec:	e00e      	b.n	8021d0c <alloc_sarray+0xae>
      result[currow++] = workspace;
 8021cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021cf0:	1c5a      	adds	r2, r3, #1
 8021cf2:	627a      	str	r2, [r7, #36]	; 0x24
 8021cf4:	009b      	lsls	r3, r3, #2
 8021cf6:	697a      	ldr	r2, [r7, #20]
 8021cf8:	4413      	add	r3, r2
 8021cfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021cfc:	601a      	str	r2, [r3, #0]
      workspace += samplesperrow;
 8021cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021d00:	687b      	ldr	r3, [r7, #4]
 8021d02:	4413      	add	r3, r2
 8021d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = rowsperchunk; i > 0; i--) {
 8021d06:	6a3b      	ldr	r3, [r7, #32]
 8021d08:	3b01      	subs	r3, #1
 8021d0a:	623b      	str	r3, [r7, #32]
 8021d0c:	6a3b      	ldr	r3, [r7, #32]
 8021d0e:	2b00      	cmp	r3, #0
 8021d10:	d1ed      	bne.n	8021cee <alloc_sarray+0x90>
  while (currow < numrows) {
 8021d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021d14:	683b      	ldr	r3, [r7, #0]
 8021d16:	429a      	cmp	r2, r3
 8021d18:	d3d4      	bcc.n	8021cc4 <alloc_sarray+0x66>
    }
  }

  return result;
 8021d1a:	697b      	ldr	r3, [r7, #20]
}
 8021d1c:	4618      	mov	r0, r3
 8021d1e:	3730      	adds	r7, #48	; 0x30
 8021d20:	46bd      	mov	sp, r7
 8021d22:	bd80      	pop	{r7, pc}

08021d24 <alloc_barray>:

METHODDEF(JBLOCKARRAY)
alloc_barray (j_common_ptr cinfo, int pool_id,
	      JDIMENSION blocksperrow, JDIMENSION numrows)
/* Allocate a 2-D coefficient-block array */
{
 8021d24:	b580      	push	{r7, lr}
 8021d26:	b08c      	sub	sp, #48	; 0x30
 8021d28:	af00      	add	r7, sp, #0
 8021d2a:	60f8      	str	r0, [r7, #12]
 8021d2c:	60b9      	str	r1, [r7, #8]
 8021d2e:	607a      	str	r2, [r7, #4]
 8021d30:	603b      	str	r3, [r7, #0]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8021d32:	68fb      	ldr	r3, [r7, #12]
 8021d34:	685b      	ldr	r3, [r3, #4]
 8021d36:	61fb      	str	r3, [r7, #28]
  JDIMENSION rowsperchunk, currow, i;
  long ltemp;

  /* Calculate max # of rows allowed in one allocation chunk */
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
	  ((long) blocksperrow * SIZEOF(JBLOCK));
 8021d38:	687b      	ldr	r3, [r7, #4]
 8021d3a:	01db      	lsls	r3, r3, #7
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8021d3c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8021d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8021d44:	61bb      	str	r3, [r7, #24]
  if (ltemp <= 0)
 8021d46:	69bb      	ldr	r3, [r7, #24]
 8021d48:	2b00      	cmp	r3, #0
 8021d4a:	dc08      	bgt.n	8021d5e <alloc_barray+0x3a>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 8021d4c:	68fb      	ldr	r3, [r7, #12]
 8021d4e:	681b      	ldr	r3, [r3, #0]
 8021d50:	2248      	movs	r2, #72	; 0x48
 8021d52:	615a      	str	r2, [r3, #20]
 8021d54:	68fb      	ldr	r3, [r7, #12]
 8021d56:	681b      	ldr	r3, [r3, #0]
 8021d58:	681b      	ldr	r3, [r3, #0]
 8021d5a:	68f8      	ldr	r0, [r7, #12]
 8021d5c:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8021d5e:	683b      	ldr	r3, [r7, #0]
 8021d60:	69ba      	ldr	r2, [r7, #24]
 8021d62:	429a      	cmp	r2, r3
 8021d64:	da02      	bge.n	8021d6c <alloc_barray+0x48>
    rowsperchunk = (JDIMENSION) ltemp;
 8021d66:	69bb      	ldr	r3, [r7, #24]
 8021d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8021d6a:	e001      	b.n	8021d70 <alloc_barray+0x4c>
  else
    rowsperchunk = numrows;
 8021d6c:	683b      	ldr	r3, [r7, #0]
 8021d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  mem->last_rowsperchunk = rowsperchunk;
 8021d70:	69fb      	ldr	r3, [r7, #28]
 8021d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021d74:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get space for row pointers (small object) */
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
				     (size_t) (numrows * SIZEOF(JBLOCKROW)));
 8021d76:	683b      	ldr	r3, [r7, #0]
 8021d78:	009b      	lsls	r3, r3, #2
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 8021d7a:	461a      	mov	r2, r3
 8021d7c:	68b9      	ldr	r1, [r7, #8]
 8021d7e:	68f8      	ldr	r0, [r7, #12]
 8021d80:	f7ff fe4a 	bl	8021a18 <alloc_small>
 8021d84:	6178      	str	r0, [r7, #20]

  /* Get the rows themselves (large objects) */
  currow = 0;
 8021d86:	2300      	movs	r3, #0
 8021d88:	627b      	str	r3, [r7, #36]	; 0x24
  while (currow < numrows) {
 8021d8a:	e028      	b.n	8021dde <alloc_barray+0xba>
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8021d8c:	683a      	ldr	r2, [r7, #0]
 8021d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d90:	1ad3      	subs	r3, r2, r3
 8021d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021d94:	4293      	cmp	r3, r2
 8021d96:	bf28      	it	cs
 8021d98:	4613      	movcs	r3, r2
 8021d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
	(size_t) ((size_t) rowsperchunk * (size_t) blocksperrow
 8021d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d9e:	687a      	ldr	r2, [r7, #4]
 8021da0:	fb02 f303 	mul.w	r3, r2, r3
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 8021da4:	01db      	lsls	r3, r3, #7
 8021da6:	461a      	mov	r2, r3
 8021da8:	68b9      	ldr	r1, [r7, #8]
 8021daa:	68f8      	ldr	r0, [r7, #12]
 8021dac:	f7ff fef4 	bl	8021b98 <alloc_large>
 8021db0:	62f8      	str	r0, [r7, #44]	; 0x2c
		  * SIZEOF(JBLOCK)));
    for (i = rowsperchunk; i > 0; i--) {
 8021db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021db4:	623b      	str	r3, [r7, #32]
 8021db6:	e00f      	b.n	8021dd8 <alloc_barray+0xb4>
      result[currow++] = workspace;
 8021db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021dba:	1c5a      	adds	r2, r3, #1
 8021dbc:	627a      	str	r2, [r7, #36]	; 0x24
 8021dbe:	009b      	lsls	r3, r3, #2
 8021dc0:	697a      	ldr	r2, [r7, #20]
 8021dc2:	4413      	add	r3, r2
 8021dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021dc6:	601a      	str	r2, [r3, #0]
      workspace += blocksperrow;
 8021dc8:	687b      	ldr	r3, [r7, #4]
 8021dca:	01db      	lsls	r3, r3, #7
 8021dcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021dce:	4413      	add	r3, r2
 8021dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = rowsperchunk; i > 0; i--) {
 8021dd2:	6a3b      	ldr	r3, [r7, #32]
 8021dd4:	3b01      	subs	r3, #1
 8021dd6:	623b      	str	r3, [r7, #32]
 8021dd8:	6a3b      	ldr	r3, [r7, #32]
 8021dda:	2b00      	cmp	r3, #0
 8021ddc:	d1ec      	bne.n	8021db8 <alloc_barray+0x94>
  while (currow < numrows) {
 8021dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021de0:	683b      	ldr	r3, [r7, #0]
 8021de2:	429a      	cmp	r2, r3
 8021de4:	d3d2      	bcc.n	8021d8c <alloc_barray+0x68>
    }
  }

  return result;
 8021de6:	697b      	ldr	r3, [r7, #20]
}
 8021de8:	4618      	mov	r0, r3
 8021dea:	3730      	adds	r7, #48	; 0x30
 8021dec:	46bd      	mov	sp, r7
 8021dee:	bd80      	pop	{r7, pc}

08021df0 <request_virt_sarray>:
METHODDEF(jvirt_sarray_ptr)
request_virt_sarray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
		     JDIMENSION samplesperrow, JDIMENSION numrows,
		     JDIMENSION maxaccess)
/* Request a virtual 2-D sample array */
{
 8021df0:	b580      	push	{r7, lr}
 8021df2:	b086      	sub	sp, #24
 8021df4:	af00      	add	r7, sp, #0
 8021df6:	60f8      	str	r0, [r7, #12]
 8021df8:	60b9      	str	r1, [r7, #8]
 8021dfa:	607a      	str	r2, [r7, #4]
 8021dfc:	603b      	str	r3, [r7, #0]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8021dfe:	68fb      	ldr	r3, [r7, #12]
 8021e00:	685b      	ldr	r3, [r3, #4]
 8021e02:	617b      	str	r3, [r7, #20]
  jvirt_sarray_ptr result;

  /* Only IMAGE-lifetime virtual arrays are currently supported */
  if (pool_id != JPOOL_IMAGE)
 8021e04:	68bb      	ldr	r3, [r7, #8]
 8021e06:	2b01      	cmp	r3, #1
 8021e08:	d00c      	beq.n	8021e24 <request_virt_sarray+0x34>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8021e0a:	68fb      	ldr	r3, [r7, #12]
 8021e0c:	681b      	ldr	r3, [r3, #0]
 8021e0e:	220f      	movs	r2, #15
 8021e10:	615a      	str	r2, [r3, #20]
 8021e12:	68fb      	ldr	r3, [r7, #12]
 8021e14:	681b      	ldr	r3, [r3, #0]
 8021e16:	68ba      	ldr	r2, [r7, #8]
 8021e18:	619a      	str	r2, [r3, #24]
 8021e1a:	68fb      	ldr	r3, [r7, #12]
 8021e1c:	681b      	ldr	r3, [r3, #0]
 8021e1e:	681b      	ldr	r3, [r3, #0]
 8021e20:	68f8      	ldr	r0, [r7, #12]
 8021e22:	4798      	blx	r3

  /* get control block */
  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
 8021e24:	223c      	movs	r2, #60	; 0x3c
 8021e26:	68b9      	ldr	r1, [r7, #8]
 8021e28:	68f8      	ldr	r0, [r7, #12]
 8021e2a:	f7ff fdf5 	bl	8021a18 <alloc_small>
 8021e2e:	6138      	str	r0, [r7, #16]
					  SIZEOF(struct jvirt_sarray_control));

  result->mem_buffer = NULL;	/* marks array not yet realized */
 8021e30:	693b      	ldr	r3, [r7, #16]
 8021e32:	2200      	movs	r2, #0
 8021e34:	601a      	str	r2, [r3, #0]
  result->rows_in_array = numrows;
 8021e36:	693b      	ldr	r3, [r7, #16]
 8021e38:	6a3a      	ldr	r2, [r7, #32]
 8021e3a:	605a      	str	r2, [r3, #4]
  result->samplesperrow = samplesperrow;
 8021e3c:	693b      	ldr	r3, [r7, #16]
 8021e3e:	683a      	ldr	r2, [r7, #0]
 8021e40:	609a      	str	r2, [r3, #8]
  result->maxaccess = maxaccess;
 8021e42:	693b      	ldr	r3, [r7, #16]
 8021e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021e46:	60da      	str	r2, [r3, #12]
  result->pre_zero = pre_zero;
 8021e48:	693b      	ldr	r3, [r7, #16]
 8021e4a:	687a      	ldr	r2, [r7, #4]
 8021e4c:	621a      	str	r2, [r3, #32]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 8021e4e:	693b      	ldr	r3, [r7, #16]
 8021e50:	2200      	movs	r2, #0
 8021e52:	629a      	str	r2, [r3, #40]	; 0x28
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 8021e54:	697b      	ldr	r3, [r7, #20]
 8021e56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8021e58:	693b      	ldr	r3, [r7, #16]
 8021e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  mem->virt_sarray_list = result;
 8021e5c:	697b      	ldr	r3, [r7, #20]
 8021e5e:	693a      	ldr	r2, [r7, #16]
 8021e60:	645a      	str	r2, [r3, #68]	; 0x44

  return result;
 8021e62:	693b      	ldr	r3, [r7, #16]
}
 8021e64:	4618      	mov	r0, r3
 8021e66:	3718      	adds	r7, #24
 8021e68:	46bd      	mov	sp, r7
 8021e6a:	bd80      	pop	{r7, pc}

08021e6c <request_virt_barray>:
METHODDEF(jvirt_barray_ptr)
request_virt_barray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
		     JDIMENSION blocksperrow, JDIMENSION numrows,
		     JDIMENSION maxaccess)
/* Request a virtual 2-D coefficient-block array */
{
 8021e6c:	b580      	push	{r7, lr}
 8021e6e:	b086      	sub	sp, #24
 8021e70:	af00      	add	r7, sp, #0
 8021e72:	60f8      	str	r0, [r7, #12]
 8021e74:	60b9      	str	r1, [r7, #8]
 8021e76:	607a      	str	r2, [r7, #4]
 8021e78:	603b      	str	r3, [r7, #0]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8021e7a:	68fb      	ldr	r3, [r7, #12]
 8021e7c:	685b      	ldr	r3, [r3, #4]
 8021e7e:	617b      	str	r3, [r7, #20]
  jvirt_barray_ptr result;

  /* Only IMAGE-lifetime virtual arrays are currently supported */
  if (pool_id != JPOOL_IMAGE)
 8021e80:	68bb      	ldr	r3, [r7, #8]
 8021e82:	2b01      	cmp	r3, #1
 8021e84:	d00c      	beq.n	8021ea0 <request_virt_barray+0x34>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8021e86:	68fb      	ldr	r3, [r7, #12]
 8021e88:	681b      	ldr	r3, [r3, #0]
 8021e8a:	220f      	movs	r2, #15
 8021e8c:	615a      	str	r2, [r3, #20]
 8021e8e:	68fb      	ldr	r3, [r7, #12]
 8021e90:	681b      	ldr	r3, [r3, #0]
 8021e92:	68ba      	ldr	r2, [r7, #8]
 8021e94:	619a      	str	r2, [r3, #24]
 8021e96:	68fb      	ldr	r3, [r7, #12]
 8021e98:	681b      	ldr	r3, [r3, #0]
 8021e9a:	681b      	ldr	r3, [r3, #0]
 8021e9c:	68f8      	ldr	r0, [r7, #12]
 8021e9e:	4798      	blx	r3

  /* get control block */
  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
 8021ea0:	223c      	movs	r2, #60	; 0x3c
 8021ea2:	68b9      	ldr	r1, [r7, #8]
 8021ea4:	68f8      	ldr	r0, [r7, #12]
 8021ea6:	f7ff fdb7 	bl	8021a18 <alloc_small>
 8021eaa:	6138      	str	r0, [r7, #16]
					  SIZEOF(struct jvirt_barray_control));

  result->mem_buffer = NULL;	/* marks array not yet realized */
 8021eac:	693b      	ldr	r3, [r7, #16]
 8021eae:	2200      	movs	r2, #0
 8021eb0:	601a      	str	r2, [r3, #0]
  result->rows_in_array = numrows;
 8021eb2:	693b      	ldr	r3, [r7, #16]
 8021eb4:	6a3a      	ldr	r2, [r7, #32]
 8021eb6:	605a      	str	r2, [r3, #4]
  result->blocksperrow = blocksperrow;
 8021eb8:	693b      	ldr	r3, [r7, #16]
 8021eba:	683a      	ldr	r2, [r7, #0]
 8021ebc:	609a      	str	r2, [r3, #8]
  result->maxaccess = maxaccess;
 8021ebe:	693b      	ldr	r3, [r7, #16]
 8021ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021ec2:	60da      	str	r2, [r3, #12]
  result->pre_zero = pre_zero;
 8021ec4:	693b      	ldr	r3, [r7, #16]
 8021ec6:	687a      	ldr	r2, [r7, #4]
 8021ec8:	621a      	str	r2, [r3, #32]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 8021eca:	693b      	ldr	r3, [r7, #16]
 8021ecc:	2200      	movs	r2, #0
 8021ece:	629a      	str	r2, [r3, #40]	; 0x28
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 8021ed0:	697b      	ldr	r3, [r7, #20]
 8021ed2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8021ed4:	693b      	ldr	r3, [r7, #16]
 8021ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  mem->virt_barray_list = result;
 8021ed8:	697b      	ldr	r3, [r7, #20]
 8021eda:	693a      	ldr	r2, [r7, #16]
 8021edc:	649a      	str	r2, [r3, #72]	; 0x48

  return result;
 8021ede:	693b      	ldr	r3, [r7, #16]
}
 8021ee0:	4618      	mov	r0, r3
 8021ee2:	3718      	adds	r7, #24
 8021ee4:	46bd      	mov	sp, r7
 8021ee6:	bd80      	pop	{r7, pc}

08021ee8 <realize_virt_arrays>:


METHODDEF(void)
realize_virt_arrays (j_common_ptr cinfo)
/* Allocate the in-memory buffers for any unrealized virtual arrays */
{
 8021ee8:	b580      	push	{r7, lr}
 8021eea:	b08a      	sub	sp, #40	; 0x28
 8021eec:	af00      	add	r7, sp, #0
 8021eee:	6078      	str	r0, [r7, #4]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8021ef0:	687b      	ldr	r3, [r7, #4]
 8021ef2:	685b      	ldr	r3, [r3, #4]
 8021ef4:	613b      	str	r3, [r7, #16]

  /* Compute the minimum space needed (maxaccess rows in each buffer)
   * and the maximum space needed (full image height in each buffer).
   * These may be of use to the system-dependent jpeg_mem_available routine.
   */
  space_per_minheight = 0;
 8021ef6:	2300      	movs	r3, #0
 8021ef8:	627b      	str	r3, [r7, #36]	; 0x24
  maximum_space = 0;
 8021efa:	2300      	movs	r3, #0
 8021efc:	623b      	str	r3, [r7, #32]
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8021efe:	693b      	ldr	r3, [r7, #16]
 8021f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021f02:	61bb      	str	r3, [r7, #24]
 8021f04:	e01c      	b.n	8021f40 <realize_virt_arrays+0x58>
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8021f06:	69bb      	ldr	r3, [r7, #24]
 8021f08:	681b      	ldr	r3, [r3, #0]
 8021f0a:	2b00      	cmp	r3, #0
 8021f0c:	d115      	bne.n	8021f3a <realize_virt_arrays+0x52>
      space_per_minheight += (long) sptr->maxaccess *
 8021f0e:	69bb      	ldr	r3, [r7, #24]
 8021f10:	68db      	ldr	r3, [r3, #12]
 8021f12:	461a      	mov	r2, r3
			     (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 8021f14:	69bb      	ldr	r3, [r7, #24]
 8021f16:	689b      	ldr	r3, [r3, #8]
      space_per_minheight += (long) sptr->maxaccess *
 8021f18:	fb03 f302 	mul.w	r3, r3, r2
			     (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 8021f1c:	461a      	mov	r2, r3
      space_per_minheight += (long) sptr->maxaccess *
 8021f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f20:	4413      	add	r3, r2
 8021f22:	627b      	str	r3, [r7, #36]	; 0x24
      maximum_space += (long) sptr->rows_in_array *
 8021f24:	69bb      	ldr	r3, [r7, #24]
 8021f26:	685b      	ldr	r3, [r3, #4]
 8021f28:	461a      	mov	r2, r3
		       (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 8021f2a:	69bb      	ldr	r3, [r7, #24]
 8021f2c:	689b      	ldr	r3, [r3, #8]
      maximum_space += (long) sptr->rows_in_array *
 8021f2e:	fb03 f302 	mul.w	r3, r3, r2
		       (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 8021f32:	461a      	mov	r2, r3
      maximum_space += (long) sptr->rows_in_array *
 8021f34:	6a3b      	ldr	r3, [r7, #32]
 8021f36:	4413      	add	r3, r2
 8021f38:	623b      	str	r3, [r7, #32]
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8021f3a:	69bb      	ldr	r3, [r7, #24]
 8021f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021f3e:	61bb      	str	r3, [r7, #24]
 8021f40:	69bb      	ldr	r3, [r7, #24]
 8021f42:	2b00      	cmp	r3, #0
 8021f44:	d1df      	bne.n	8021f06 <realize_virt_arrays+0x1e>
    }
  }
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8021f46:	693b      	ldr	r3, [r7, #16]
 8021f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021f4a:	617b      	str	r3, [r7, #20]
 8021f4c:	e01c      	b.n	8021f88 <realize_virt_arrays+0xa0>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8021f4e:	697b      	ldr	r3, [r7, #20]
 8021f50:	681b      	ldr	r3, [r3, #0]
 8021f52:	2b00      	cmp	r3, #0
 8021f54:	d115      	bne.n	8021f82 <realize_virt_arrays+0x9a>
      space_per_minheight += (long) bptr->maxaccess *
 8021f56:	697b      	ldr	r3, [r7, #20]
 8021f58:	68db      	ldr	r3, [r3, #12]
 8021f5a:	461a      	mov	r2, r3
			     (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 8021f5c:	697b      	ldr	r3, [r7, #20]
 8021f5e:	689b      	ldr	r3, [r3, #8]
      space_per_minheight += (long) bptr->maxaccess *
 8021f60:	fb03 f302 	mul.w	r3, r3, r2
			     (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 8021f64:	01da      	lsls	r2, r3, #7
      space_per_minheight += (long) bptr->maxaccess *
 8021f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f68:	4413      	add	r3, r2
 8021f6a:	627b      	str	r3, [r7, #36]	; 0x24
      maximum_space += (long) bptr->rows_in_array *
 8021f6c:	697b      	ldr	r3, [r7, #20]
 8021f6e:	685b      	ldr	r3, [r3, #4]
 8021f70:	461a      	mov	r2, r3
		       (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 8021f72:	697b      	ldr	r3, [r7, #20]
 8021f74:	689b      	ldr	r3, [r3, #8]
      maximum_space += (long) bptr->rows_in_array *
 8021f76:	fb03 f302 	mul.w	r3, r3, r2
		       (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 8021f7a:	01da      	lsls	r2, r3, #7
      maximum_space += (long) bptr->rows_in_array *
 8021f7c:	6a3b      	ldr	r3, [r7, #32]
 8021f7e:	4413      	add	r3, r2
 8021f80:	623b      	str	r3, [r7, #32]
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8021f82:	697b      	ldr	r3, [r7, #20]
 8021f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021f86:	617b      	str	r3, [r7, #20]
 8021f88:	697b      	ldr	r3, [r7, #20]
 8021f8a:	2b00      	cmp	r3, #0
 8021f8c:	d1df      	bne.n	8021f4e <realize_virt_arrays+0x66>
    }
  }

  if (space_per_minheight <= 0)
 8021f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f90:	2b00      	cmp	r3, #0
 8021f92:	f340 80bd 	ble.w	8022110 <realize_virt_arrays+0x228>
    return;			/* no unrealized arrays, no work */

  /* Determine amount of memory to actually use; this is system-dependent. */
  avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
 8021f96:	693b      	ldr	r3, [r7, #16]
 8021f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021f9a:	6a3a      	ldr	r2, [r7, #32]
 8021f9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8021f9e:	6878      	ldr	r0, [r7, #4]
 8021fa0:	f000 fcdc 	bl	802295c <jpeg_mem_available>
 8021fa4:	60f8      	str	r0, [r7, #12]

  /* If the maximum space needed is available, make all the buffers full
   * height; otherwise parcel it out with the same number of minheights
   * in each buffer.
   */
  if (avail_mem >= maximum_space)
 8021fa6:	68fa      	ldr	r2, [r7, #12]
 8021fa8:	6a3b      	ldr	r3, [r7, #32]
 8021faa:	429a      	cmp	r2, r3
 8021fac:	db02      	blt.n	8021fb4 <realize_virt_arrays+0xcc>
    max_minheights = 1000000000L;
 8021fae:	4b5a      	ldr	r3, [pc, #360]	; (8022118 <realize_virt_arrays+0x230>)
 8021fb0:	61fb      	str	r3, [r7, #28]
 8021fb2:	e009      	b.n	8021fc8 <realize_virt_arrays+0xe0>
  else {
    max_minheights = avail_mem / space_per_minheight;
 8021fb4:	68fa      	ldr	r2, [r7, #12]
 8021fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021fb8:	fb92 f3f3 	sdiv	r3, r2, r3
 8021fbc:	61fb      	str	r3, [r7, #28]
    /* If there doesn't seem to be enough space, try to get the minimum
     * anyway.  This allows a "stub" implementation of jpeg_mem_available().
     */
    if (max_minheights <= 0)
 8021fbe:	69fb      	ldr	r3, [r7, #28]
 8021fc0:	2b00      	cmp	r3, #0
 8021fc2:	dc01      	bgt.n	8021fc8 <realize_virt_arrays+0xe0>
      max_minheights = 1;
 8021fc4:	2301      	movs	r3, #1
 8021fc6:	61fb      	str	r3, [r7, #28]
  }

  /* Allocate the in-memory buffers and initialize backing store as needed. */

  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8021fc8:	693b      	ldr	r3, [r7, #16]
 8021fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021fcc:	61bb      	str	r3, [r7, #24]
 8021fce:	e049      	b.n	8022064 <realize_virt_arrays+0x17c>
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8021fd0:	69bb      	ldr	r3, [r7, #24]
 8021fd2:	681b      	ldr	r3, [r3, #0]
 8021fd4:	2b00      	cmp	r3, #0
 8021fd6:	d142      	bne.n	802205e <realize_virt_arrays+0x176>
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 8021fd8:	69bb      	ldr	r3, [r7, #24]
 8021fda:	685b      	ldr	r3, [r3, #4]
 8021fdc:	3b01      	subs	r3, #1
 8021fde:	461a      	mov	r2, r3
 8021fe0:	69bb      	ldr	r3, [r7, #24]
 8021fe2:	68db      	ldr	r3, [r3, #12]
 8021fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8021fe8:	3301      	adds	r3, #1
 8021fea:	60bb      	str	r3, [r7, #8]
      if (minheights <= max_minheights) {
 8021fec:	68ba      	ldr	r2, [r7, #8]
 8021fee:	69fb      	ldr	r3, [r7, #28]
 8021ff0:	429a      	cmp	r2, r3
 8021ff2:	dc04      	bgt.n	8021ffe <realize_virt_arrays+0x116>
	/* This buffer fits in memory */
	sptr->rows_in_mem = sptr->rows_in_array;
 8021ff4:	69bb      	ldr	r3, [r7, #24]
 8021ff6:	685a      	ldr	r2, [r3, #4]
 8021ff8:	69bb      	ldr	r3, [r7, #24]
 8021ffa:	611a      	str	r2, [r3, #16]
 8021ffc:	e017      	b.n	802202e <realize_virt_arrays+0x146>
      } else {
	/* It doesn't fit in memory, create backing store. */
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 8021ffe:	69bb      	ldr	r3, [r7, #24]
 8022000:	68db      	ldr	r3, [r3, #12]
 8022002:	69fa      	ldr	r2, [r7, #28]
 8022004:	fb02 f203 	mul.w	r2, r2, r3
 8022008:	69bb      	ldr	r3, [r7, #24]
 802200a:	611a      	str	r2, [r3, #16]
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 802200c:	69bb      	ldr	r3, [r7, #24]
 802200e:	f103 0130 	add.w	r1, r3, #48	; 0x30
				(long) sptr->rows_in_array *
 8022012:	69bb      	ldr	r3, [r7, #24]
 8022014:	685b      	ldr	r3, [r3, #4]
 8022016:	461a      	mov	r2, r3
				(long) sptr->samplesperrow *
 8022018:	69bb      	ldr	r3, [r7, #24]
 802201a:	689b      	ldr	r3, [r3, #8]
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 802201c:	fb03 f302 	mul.w	r3, r3, r2
 8022020:	461a      	mov	r2, r3
 8022022:	6878      	ldr	r0, [r7, #4]
 8022024:	f000 fca8 	bl	8022978 <jpeg_open_backing_store>
				(long) SIZEOF(JSAMPLE));
	sptr->b_s_open = TRUE;
 8022028:	69bb      	ldr	r3, [r7, #24]
 802202a:	2201      	movs	r2, #1
 802202c:	629a      	str	r2, [r3, #40]	; 0x28
      }
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 802202e:	69bb      	ldr	r3, [r7, #24]
 8022030:	689a      	ldr	r2, [r3, #8]
 8022032:	69bb      	ldr	r3, [r7, #24]
 8022034:	691b      	ldr	r3, [r3, #16]
 8022036:	2101      	movs	r1, #1
 8022038:	6878      	ldr	r0, [r7, #4]
 802203a:	f7ff fe10 	bl	8021c5e <alloc_sarray>
 802203e:	4602      	mov	r2, r0
 8022040:	69bb      	ldr	r3, [r7, #24]
 8022042:	601a      	str	r2, [r3, #0]
				      sptr->samplesperrow, sptr->rows_in_mem);
      sptr->rowsperchunk = mem->last_rowsperchunk;
 8022044:	693b      	ldr	r3, [r7, #16]
 8022046:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8022048:	69bb      	ldr	r3, [r7, #24]
 802204a:	615a      	str	r2, [r3, #20]
      sptr->cur_start_row = 0;
 802204c:	69bb      	ldr	r3, [r7, #24]
 802204e:	2200      	movs	r2, #0
 8022050:	619a      	str	r2, [r3, #24]
      sptr->first_undef_row = 0;
 8022052:	69bb      	ldr	r3, [r7, #24]
 8022054:	2200      	movs	r2, #0
 8022056:	61da      	str	r2, [r3, #28]
      sptr->dirty = FALSE;
 8022058:	69bb      	ldr	r3, [r7, #24]
 802205a:	2200      	movs	r2, #0
 802205c:	625a      	str	r2, [r3, #36]	; 0x24
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 802205e:	69bb      	ldr	r3, [r7, #24]
 8022060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022062:	61bb      	str	r3, [r7, #24]
 8022064:	69bb      	ldr	r3, [r7, #24]
 8022066:	2b00      	cmp	r3, #0
 8022068:	d1b2      	bne.n	8021fd0 <realize_virt_arrays+0xe8>
    }
  }

  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 802206a:	693b      	ldr	r3, [r7, #16]
 802206c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802206e:	617b      	str	r3, [r7, #20]
 8022070:	e04a      	b.n	8022108 <realize_virt_arrays+0x220>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8022072:	697b      	ldr	r3, [r7, #20]
 8022074:	681b      	ldr	r3, [r3, #0]
 8022076:	2b00      	cmp	r3, #0
 8022078:	d143      	bne.n	8022102 <realize_virt_arrays+0x21a>
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 802207a:	697b      	ldr	r3, [r7, #20]
 802207c:	685b      	ldr	r3, [r3, #4]
 802207e:	3b01      	subs	r3, #1
 8022080:	461a      	mov	r2, r3
 8022082:	697b      	ldr	r3, [r7, #20]
 8022084:	68db      	ldr	r3, [r3, #12]
 8022086:	fbb2 f3f3 	udiv	r3, r2, r3
 802208a:	3301      	adds	r3, #1
 802208c:	60bb      	str	r3, [r7, #8]
      if (minheights <= max_minheights) {
 802208e:	68ba      	ldr	r2, [r7, #8]
 8022090:	69fb      	ldr	r3, [r7, #28]
 8022092:	429a      	cmp	r2, r3
 8022094:	dc04      	bgt.n	80220a0 <realize_virt_arrays+0x1b8>
	/* This buffer fits in memory */
	bptr->rows_in_mem = bptr->rows_in_array;
 8022096:	697b      	ldr	r3, [r7, #20]
 8022098:	685a      	ldr	r2, [r3, #4]
 802209a:	697b      	ldr	r3, [r7, #20]
 802209c:	611a      	str	r2, [r3, #16]
 802209e:	e018      	b.n	80220d2 <realize_virt_arrays+0x1ea>
      } else {
	/* It doesn't fit in memory, create backing store. */
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 80220a0:	697b      	ldr	r3, [r7, #20]
 80220a2:	68db      	ldr	r3, [r3, #12]
 80220a4:	69fa      	ldr	r2, [r7, #28]
 80220a6:	fb02 f203 	mul.w	r2, r2, r3
 80220aa:	697b      	ldr	r3, [r7, #20]
 80220ac:	611a      	str	r2, [r3, #16]
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 80220ae:	697b      	ldr	r3, [r7, #20]
 80220b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
				(long) bptr->rows_in_array *
 80220b4:	697b      	ldr	r3, [r7, #20]
 80220b6:	685b      	ldr	r3, [r3, #4]
 80220b8:	461a      	mov	r2, r3
				(long) bptr->blocksperrow *
 80220ba:	697b      	ldr	r3, [r7, #20]
 80220bc:	689b      	ldr	r3, [r3, #8]
				(long) bptr->rows_in_array *
 80220be:	fb03 f302 	mul.w	r3, r3, r2
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 80220c2:	01db      	lsls	r3, r3, #7
 80220c4:	461a      	mov	r2, r3
 80220c6:	6878      	ldr	r0, [r7, #4]
 80220c8:	f000 fc56 	bl	8022978 <jpeg_open_backing_store>
				(long) SIZEOF(JBLOCK));
	bptr->b_s_open = TRUE;
 80220cc:	697b      	ldr	r3, [r7, #20]
 80220ce:	2201      	movs	r2, #1
 80220d0:	629a      	str	r2, [r3, #40]	; 0x28
      }
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 80220d2:	697b      	ldr	r3, [r7, #20]
 80220d4:	689a      	ldr	r2, [r3, #8]
 80220d6:	697b      	ldr	r3, [r7, #20]
 80220d8:	691b      	ldr	r3, [r3, #16]
 80220da:	2101      	movs	r1, #1
 80220dc:	6878      	ldr	r0, [r7, #4]
 80220de:	f7ff fe21 	bl	8021d24 <alloc_barray>
 80220e2:	4602      	mov	r2, r0
 80220e4:	697b      	ldr	r3, [r7, #20]
 80220e6:	601a      	str	r2, [r3, #0]
				      bptr->blocksperrow, bptr->rows_in_mem);
      bptr->rowsperchunk = mem->last_rowsperchunk;
 80220e8:	693b      	ldr	r3, [r7, #16]
 80220ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80220ec:	697b      	ldr	r3, [r7, #20]
 80220ee:	615a      	str	r2, [r3, #20]
      bptr->cur_start_row = 0;
 80220f0:	697b      	ldr	r3, [r7, #20]
 80220f2:	2200      	movs	r2, #0
 80220f4:	619a      	str	r2, [r3, #24]
      bptr->first_undef_row = 0;
 80220f6:	697b      	ldr	r3, [r7, #20]
 80220f8:	2200      	movs	r2, #0
 80220fa:	61da      	str	r2, [r3, #28]
      bptr->dirty = FALSE;
 80220fc:	697b      	ldr	r3, [r7, #20]
 80220fe:	2200      	movs	r2, #0
 8022100:	625a      	str	r2, [r3, #36]	; 0x24
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8022102:	697b      	ldr	r3, [r7, #20]
 8022104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022106:	617b      	str	r3, [r7, #20]
 8022108:	697b      	ldr	r3, [r7, #20]
 802210a:	2b00      	cmp	r3, #0
 802210c:	d1b1      	bne.n	8022072 <realize_virt_arrays+0x18a>
 802210e:	e000      	b.n	8022112 <realize_virt_arrays+0x22a>
    return;			/* no unrealized arrays, no work */
 8022110:	bf00      	nop
    }
  }
}
 8022112:	3728      	adds	r7, #40	; 0x28
 8022114:	46bd      	mov	sp, r7
 8022116:	bd80      	pop	{r7, pc}
 8022118:	3b9aca00 	.word	0x3b9aca00

0802211c <do_sarray_io>:


LOCAL(void)
do_sarray_io (j_common_ptr cinfo, jvirt_sarray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual sample array */
{
 802211c:	b590      	push	{r4, r7, lr}
 802211e:	b08d      	sub	sp, #52	; 0x34
 8022120:	af02      	add	r7, sp, #8
 8022122:	60f8      	str	r0, [r7, #12]
 8022124:	60b9      	str	r1, [r7, #8]
 8022126:	607a      	str	r2, [r7, #4]
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8022128:	68bb      	ldr	r3, [r7, #8]
 802212a:	689b      	ldr	r3, [r3, #8]
 802212c:	61fb      	str	r3, [r7, #28]
  file_offset = ptr->cur_start_row * bytesperrow;
 802212e:	68bb      	ldr	r3, [r7, #8]
 8022130:	699b      	ldr	r3, [r3, #24]
 8022132:	69fa      	ldr	r2, [r7, #28]
 8022134:	fb02 f303 	mul.w	r3, r2, r3
 8022138:	627b      	str	r3, [r7, #36]	; 0x24
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 802213a:	2300      	movs	r3, #0
 802213c:	623b      	str	r3, [r7, #32]
 802213e:	e059      	b.n	80221f4 <do_sarray_io+0xd8>
    /* One chunk, but check for short chunk at end of buffer */
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8022140:	68bb      	ldr	r3, [r7, #8]
 8022142:	691b      	ldr	r3, [r3, #16]
 8022144:	461a      	mov	r2, r3
 8022146:	6a3b      	ldr	r3, [r7, #32]
 8022148:	1ad3      	subs	r3, r2, r3
 802214a:	68ba      	ldr	r2, [r7, #8]
 802214c:	6952      	ldr	r2, [r2, #20]
 802214e:	4293      	cmp	r3, r2
 8022150:	bfa8      	it	ge
 8022152:	4613      	movge	r3, r2
 8022154:	61bb      	str	r3, [r7, #24]
    /* Transfer no more than is currently defined */
    thisrow = (long) ptr->cur_start_row + i;
 8022156:	68bb      	ldr	r3, [r7, #8]
 8022158:	699b      	ldr	r3, [r3, #24]
 802215a:	461a      	mov	r2, r3
 802215c:	6a3b      	ldr	r3, [r7, #32]
 802215e:	4413      	add	r3, r2
 8022160:	617b      	str	r3, [r7, #20]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8022162:	68bb      	ldr	r3, [r7, #8]
 8022164:	69db      	ldr	r3, [r3, #28]
 8022166:	461a      	mov	r2, r3
 8022168:	697b      	ldr	r3, [r7, #20]
 802216a:	1ad3      	subs	r3, r2, r3
 802216c:	69ba      	ldr	r2, [r7, #24]
 802216e:	4293      	cmp	r3, r2
 8022170:	bfa8      	it	ge
 8022172:	4613      	movge	r3, r2
 8022174:	61bb      	str	r3, [r7, #24]
    /* Transfer no more than fits in file */
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8022176:	68bb      	ldr	r3, [r7, #8]
 8022178:	685b      	ldr	r3, [r3, #4]
 802217a:	461a      	mov	r2, r3
 802217c:	697b      	ldr	r3, [r7, #20]
 802217e:	1ad3      	subs	r3, r2, r3
 8022180:	69ba      	ldr	r2, [r7, #24]
 8022182:	4293      	cmp	r3, r2
 8022184:	bfa8      	it	ge
 8022186:	4613      	movge	r3, r2
 8022188:	61bb      	str	r3, [r7, #24]
    if (rows <= 0)		/* this chunk might be past end of file! */
 802218a:	69bb      	ldr	r3, [r7, #24]
 802218c:	2b00      	cmp	r3, #0
 802218e:	dd38      	ble.n	8022202 <do_sarray_io+0xe6>
      break;
    byte_count = rows * bytesperrow;
 8022190:	69bb      	ldr	r3, [r7, #24]
 8022192:	69fa      	ldr	r2, [r7, #28]
 8022194:	fb02 f303 	mul.w	r3, r2, r3
 8022198:	613b      	str	r3, [r7, #16]
    if (writing)
 802219a:	687b      	ldr	r3, [r7, #4]
 802219c:	2b00      	cmp	r3, #0
 802219e:	d010      	beq.n	80221c2 <do_sarray_io+0xa6>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80221a0:	68bb      	ldr	r3, [r7, #8]
 80221a2:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80221a4:	68bb      	ldr	r3, [r7, #8]
 80221a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
					    (void FAR *) ptr->mem_buffer[i],
 80221aa:	68bb      	ldr	r3, [r7, #8]
 80221ac:	681a      	ldr	r2, [r3, #0]
 80221ae:	6a3b      	ldr	r3, [r7, #32]
 80221b0:	009b      	lsls	r3, r3, #2
 80221b2:	4413      	add	r3, r2
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80221b4:	681a      	ldr	r2, [r3, #0]
 80221b6:	693b      	ldr	r3, [r7, #16]
 80221b8:	9300      	str	r3, [sp, #0]
 80221ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221bc:	68f8      	ldr	r0, [r7, #12]
 80221be:	47a0      	blx	r4
 80221c0:	e00f      	b.n	80221e2 <do_sarray_io+0xc6>
					    file_offset, byte_count);
    else
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 80221c2:	68bb      	ldr	r3, [r7, #8]
 80221c4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80221c6:	68bb      	ldr	r3, [r7, #8]
 80221c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
					   (void FAR *) ptr->mem_buffer[i],
 80221cc:	68bb      	ldr	r3, [r7, #8]
 80221ce:	681a      	ldr	r2, [r3, #0]
 80221d0:	6a3b      	ldr	r3, [r7, #32]
 80221d2:	009b      	lsls	r3, r3, #2
 80221d4:	4413      	add	r3, r2
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 80221d6:	681a      	ldr	r2, [r3, #0]
 80221d8:	693b      	ldr	r3, [r7, #16]
 80221da:	9300      	str	r3, [sp, #0]
 80221dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221de:	68f8      	ldr	r0, [r7, #12]
 80221e0:	47a0      	blx	r4
					   file_offset, byte_count);
    file_offset += byte_count;
 80221e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80221e4:	693b      	ldr	r3, [r7, #16]
 80221e6:	4413      	add	r3, r2
 80221e8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80221ea:	68bb      	ldr	r3, [r7, #8]
 80221ec:	695a      	ldr	r2, [r3, #20]
 80221ee:	6a3b      	ldr	r3, [r7, #32]
 80221f0:	4413      	add	r3, r2
 80221f2:	623b      	str	r3, [r7, #32]
 80221f4:	68bb      	ldr	r3, [r7, #8]
 80221f6:	691b      	ldr	r3, [r3, #16]
 80221f8:	461a      	mov	r2, r3
 80221fa:	6a3b      	ldr	r3, [r7, #32]
 80221fc:	4293      	cmp	r3, r2
 80221fe:	db9f      	blt.n	8022140 <do_sarray_io+0x24>
  }
}
 8022200:	e000      	b.n	8022204 <do_sarray_io+0xe8>
      break;
 8022202:	bf00      	nop
}
 8022204:	bf00      	nop
 8022206:	372c      	adds	r7, #44	; 0x2c
 8022208:	46bd      	mov	sp, r7
 802220a:	bd90      	pop	{r4, r7, pc}

0802220c <do_barray_io>:


LOCAL(void)
do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual coefficient-block array */
{
 802220c:	b590      	push	{r4, r7, lr}
 802220e:	b08d      	sub	sp, #52	; 0x34
 8022210:	af02      	add	r7, sp, #8
 8022212:	60f8      	str	r0, [r7, #12]
 8022214:	60b9      	str	r1, [r7, #8]
 8022216:	607a      	str	r2, [r7, #4]
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 8022218:	68bb      	ldr	r3, [r7, #8]
 802221a:	689b      	ldr	r3, [r3, #8]
 802221c:	01db      	lsls	r3, r3, #7
 802221e:	61fb      	str	r3, [r7, #28]
  file_offset = ptr->cur_start_row * bytesperrow;
 8022220:	68bb      	ldr	r3, [r7, #8]
 8022222:	699b      	ldr	r3, [r3, #24]
 8022224:	69fa      	ldr	r2, [r7, #28]
 8022226:	fb02 f303 	mul.w	r3, r2, r3
 802222a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 802222c:	2300      	movs	r3, #0
 802222e:	623b      	str	r3, [r7, #32]
 8022230:	e059      	b.n	80222e6 <do_barray_io+0xda>
    /* One chunk, but check for short chunk at end of buffer */
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8022232:	68bb      	ldr	r3, [r7, #8]
 8022234:	691b      	ldr	r3, [r3, #16]
 8022236:	461a      	mov	r2, r3
 8022238:	6a3b      	ldr	r3, [r7, #32]
 802223a:	1ad3      	subs	r3, r2, r3
 802223c:	68ba      	ldr	r2, [r7, #8]
 802223e:	6952      	ldr	r2, [r2, #20]
 8022240:	4293      	cmp	r3, r2
 8022242:	bfa8      	it	ge
 8022244:	4613      	movge	r3, r2
 8022246:	61bb      	str	r3, [r7, #24]
    /* Transfer no more than is currently defined */
    thisrow = (long) ptr->cur_start_row + i;
 8022248:	68bb      	ldr	r3, [r7, #8]
 802224a:	699b      	ldr	r3, [r3, #24]
 802224c:	461a      	mov	r2, r3
 802224e:	6a3b      	ldr	r3, [r7, #32]
 8022250:	4413      	add	r3, r2
 8022252:	617b      	str	r3, [r7, #20]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8022254:	68bb      	ldr	r3, [r7, #8]
 8022256:	69db      	ldr	r3, [r3, #28]
 8022258:	461a      	mov	r2, r3
 802225a:	697b      	ldr	r3, [r7, #20]
 802225c:	1ad3      	subs	r3, r2, r3
 802225e:	69ba      	ldr	r2, [r7, #24]
 8022260:	4293      	cmp	r3, r2
 8022262:	bfa8      	it	ge
 8022264:	4613      	movge	r3, r2
 8022266:	61bb      	str	r3, [r7, #24]
    /* Transfer no more than fits in file */
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8022268:	68bb      	ldr	r3, [r7, #8]
 802226a:	685b      	ldr	r3, [r3, #4]
 802226c:	461a      	mov	r2, r3
 802226e:	697b      	ldr	r3, [r7, #20]
 8022270:	1ad3      	subs	r3, r2, r3
 8022272:	69ba      	ldr	r2, [r7, #24]
 8022274:	4293      	cmp	r3, r2
 8022276:	bfa8      	it	ge
 8022278:	4613      	movge	r3, r2
 802227a:	61bb      	str	r3, [r7, #24]
    if (rows <= 0)		/* this chunk might be past end of file! */
 802227c:	69bb      	ldr	r3, [r7, #24]
 802227e:	2b00      	cmp	r3, #0
 8022280:	dd38      	ble.n	80222f4 <do_barray_io+0xe8>
      break;
    byte_count = rows * bytesperrow;
 8022282:	69bb      	ldr	r3, [r7, #24]
 8022284:	69fa      	ldr	r2, [r7, #28]
 8022286:	fb02 f303 	mul.w	r3, r2, r3
 802228a:	613b      	str	r3, [r7, #16]
    if (writing)
 802228c:	687b      	ldr	r3, [r7, #4]
 802228e:	2b00      	cmp	r3, #0
 8022290:	d010      	beq.n	80222b4 <do_barray_io+0xa8>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8022292:	68bb      	ldr	r3, [r7, #8]
 8022294:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8022296:	68bb      	ldr	r3, [r7, #8]
 8022298:	f103 0130 	add.w	r1, r3, #48	; 0x30
					    (void FAR *) ptr->mem_buffer[i],
 802229c:	68bb      	ldr	r3, [r7, #8]
 802229e:	681a      	ldr	r2, [r3, #0]
 80222a0:	6a3b      	ldr	r3, [r7, #32]
 80222a2:	009b      	lsls	r3, r3, #2
 80222a4:	4413      	add	r3, r2
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80222a6:	681a      	ldr	r2, [r3, #0]
 80222a8:	693b      	ldr	r3, [r7, #16]
 80222aa:	9300      	str	r3, [sp, #0]
 80222ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222ae:	68f8      	ldr	r0, [r7, #12]
 80222b0:	47a0      	blx	r4
 80222b2:	e00f      	b.n	80222d4 <do_barray_io+0xc8>
					    file_offset, byte_count);
    else
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 80222b4:	68bb      	ldr	r3, [r7, #8]
 80222b6:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80222b8:	68bb      	ldr	r3, [r7, #8]
 80222ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
					   (void FAR *) ptr->mem_buffer[i],
 80222be:	68bb      	ldr	r3, [r7, #8]
 80222c0:	681a      	ldr	r2, [r3, #0]
 80222c2:	6a3b      	ldr	r3, [r7, #32]
 80222c4:	009b      	lsls	r3, r3, #2
 80222c6:	4413      	add	r3, r2
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 80222c8:	681a      	ldr	r2, [r3, #0]
 80222ca:	693b      	ldr	r3, [r7, #16]
 80222cc:	9300      	str	r3, [sp, #0]
 80222ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222d0:	68f8      	ldr	r0, [r7, #12]
 80222d2:	47a0      	blx	r4
					   file_offset, byte_count);
    file_offset += byte_count;
 80222d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80222d6:	693b      	ldr	r3, [r7, #16]
 80222d8:	4413      	add	r3, r2
 80222da:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80222dc:	68bb      	ldr	r3, [r7, #8]
 80222de:	695a      	ldr	r2, [r3, #20]
 80222e0:	6a3b      	ldr	r3, [r7, #32]
 80222e2:	4413      	add	r3, r2
 80222e4:	623b      	str	r3, [r7, #32]
 80222e6:	68bb      	ldr	r3, [r7, #8]
 80222e8:	691b      	ldr	r3, [r3, #16]
 80222ea:	461a      	mov	r2, r3
 80222ec:	6a3b      	ldr	r3, [r7, #32]
 80222ee:	4293      	cmp	r3, r2
 80222f0:	db9f      	blt.n	8022232 <do_barray_io+0x26>
  }
}
 80222f2:	e000      	b.n	80222f6 <do_barray_io+0xea>
      break;
 80222f4:	bf00      	nop
}
 80222f6:	bf00      	nop
 80222f8:	372c      	adds	r7, #44	; 0x2c
 80222fa:	46bd      	mov	sp, r7
 80222fc:	bd90      	pop	{r4, r7, pc}

080222fe <access_virt_sarray>:
		    JDIMENSION start_row, JDIMENSION num_rows,
		    boolean writable)
/* Access the part of a virtual sample array starting at start_row */
/* and extending for num_rows rows.  writable is true if  */
/* caller intends to modify the accessed area. */
{
 80222fe:	b580      	push	{r7, lr}
 8022300:	b088      	sub	sp, #32
 8022302:	af00      	add	r7, sp, #0
 8022304:	60f8      	str	r0, [r7, #12]
 8022306:	60b9      	str	r1, [r7, #8]
 8022308:	607a      	str	r2, [r7, #4]
 802230a:	603b      	str	r3, [r7, #0]
  JDIMENSION end_row = start_row + num_rows;
 802230c:	687a      	ldr	r2, [r7, #4]
 802230e:	683b      	ldr	r3, [r7, #0]
 8022310:	4413      	add	r3, r2
 8022312:	617b      	str	r3, [r7, #20]
  JDIMENSION undef_row;

  /* debugging check */
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8022314:	68bb      	ldr	r3, [r7, #8]
 8022316:	685b      	ldr	r3, [r3, #4]
 8022318:	697a      	ldr	r2, [r7, #20]
 802231a:	429a      	cmp	r2, r3
 802231c:	d808      	bhi.n	8022330 <access_virt_sarray+0x32>
 802231e:	68bb      	ldr	r3, [r7, #8]
 8022320:	68db      	ldr	r3, [r3, #12]
 8022322:	683a      	ldr	r2, [r7, #0]
 8022324:	429a      	cmp	r2, r3
 8022326:	d803      	bhi.n	8022330 <access_virt_sarray+0x32>
      ptr->mem_buffer == NULL)
 8022328:	68bb      	ldr	r3, [r7, #8]
 802232a:	681b      	ldr	r3, [r3, #0]
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 802232c:	2b00      	cmp	r3, #0
 802232e:	d108      	bne.n	8022342 <access_virt_sarray+0x44>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8022330:	68fb      	ldr	r3, [r7, #12]
 8022332:	681b      	ldr	r3, [r3, #0]
 8022334:	2217      	movs	r2, #23
 8022336:	615a      	str	r2, [r3, #20]
 8022338:	68fb      	ldr	r3, [r7, #12]
 802233a:	681b      	ldr	r3, [r3, #0]
 802233c:	681b      	ldr	r3, [r3, #0]
 802233e:	68f8      	ldr	r0, [r7, #12]
 8022340:	4798      	blx	r3

  /* Make the desired part of the virtual array accessible */
  if (start_row < ptr->cur_start_row ||
 8022342:	68bb      	ldr	r3, [r7, #8]
 8022344:	699b      	ldr	r3, [r3, #24]
 8022346:	687a      	ldr	r2, [r7, #4]
 8022348:	429a      	cmp	r2, r3
 802234a:	d307      	bcc.n	802235c <access_virt_sarray+0x5e>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 802234c:	68bb      	ldr	r3, [r7, #8]
 802234e:	699a      	ldr	r2, [r3, #24]
 8022350:	68bb      	ldr	r3, [r7, #8]
 8022352:	691b      	ldr	r3, [r3, #16]
 8022354:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 8022356:	697a      	ldr	r2, [r7, #20]
 8022358:	429a      	cmp	r2, r3
 802235a:	d933      	bls.n	80223c4 <access_virt_sarray+0xc6>
    if (! ptr->b_s_open)
 802235c:	68bb      	ldr	r3, [r7, #8]
 802235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022360:	2b00      	cmp	r3, #0
 8022362:	d108      	bne.n	8022376 <access_virt_sarray+0x78>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 8022364:	68fb      	ldr	r3, [r7, #12]
 8022366:	681b      	ldr	r3, [r3, #0]
 8022368:	2247      	movs	r2, #71	; 0x47
 802236a:	615a      	str	r2, [r3, #20]
 802236c:	68fb      	ldr	r3, [r7, #12]
 802236e:	681b      	ldr	r3, [r3, #0]
 8022370:	681b      	ldr	r3, [r3, #0]
 8022372:	68f8      	ldr	r0, [r7, #12]
 8022374:	4798      	blx	r3
    /* Flush old buffer contents if necessary */
    if (ptr->dirty) {
 8022376:	68bb      	ldr	r3, [r7, #8]
 8022378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802237a:	2b00      	cmp	r3, #0
 802237c:	d007      	beq.n	802238e <access_virt_sarray+0x90>
      do_sarray_io(cinfo, ptr, TRUE);
 802237e:	2201      	movs	r2, #1
 8022380:	68b9      	ldr	r1, [r7, #8]
 8022382:	68f8      	ldr	r0, [r7, #12]
 8022384:	f7ff feca 	bl	802211c <do_sarray_io>
      ptr->dirty = FALSE;
 8022388:	68bb      	ldr	r3, [r7, #8]
 802238a:	2200      	movs	r2, #0
 802238c:	625a      	str	r2, [r3, #36]	; 0x24
     * load starting at target address.  If target address < current window,
     * assume backward scan, load so that target area is top of window.
     * Note that when switching from forward write to forward read, will have
     * start_row = 0, so the limiting case applies and we load from 0 anyway.
     */
    if (start_row > ptr->cur_start_row) {
 802238e:	68bb      	ldr	r3, [r7, #8]
 8022390:	699b      	ldr	r3, [r3, #24]
 8022392:	687a      	ldr	r2, [r7, #4]
 8022394:	429a      	cmp	r2, r3
 8022396:	d903      	bls.n	80223a0 <access_virt_sarray+0xa2>
      ptr->cur_start_row = start_row;
 8022398:	68bb      	ldr	r3, [r7, #8]
 802239a:	687a      	ldr	r2, [r7, #4]
 802239c:	619a      	str	r2, [r3, #24]
 802239e:	e00c      	b.n	80223ba <access_virt_sarray+0xbc>
    } else {
      /* use long arithmetic here to avoid overflow & unsigned problems */
      long ltemp;

      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 80223a0:	697b      	ldr	r3, [r7, #20]
 80223a2:	68ba      	ldr	r2, [r7, #8]
 80223a4:	6912      	ldr	r2, [r2, #16]
 80223a6:	1a9b      	subs	r3, r3, r2
 80223a8:	61bb      	str	r3, [r7, #24]
      if (ltemp < 0)
 80223aa:	69bb      	ldr	r3, [r7, #24]
 80223ac:	2b00      	cmp	r3, #0
 80223ae:	da01      	bge.n	80223b4 <access_virt_sarray+0xb6>
	ltemp = 0;		/* don't fall off front end of file */
 80223b0:	2300      	movs	r3, #0
 80223b2:	61bb      	str	r3, [r7, #24]
      ptr->cur_start_row = (JDIMENSION) ltemp;
 80223b4:	69ba      	ldr	r2, [r7, #24]
 80223b6:	68bb      	ldr	r3, [r7, #8]
 80223b8:	619a      	str	r2, [r3, #24]
    }
    /* Read in the selected part of the array.
     * During the initial write pass, we will do no actual read
     * because the selected part is all undefined.
     */
    do_sarray_io(cinfo, ptr, FALSE);
 80223ba:	2200      	movs	r2, #0
 80223bc:	68b9      	ldr	r1, [r7, #8]
 80223be:	68f8      	ldr	r0, [r7, #12]
 80223c0:	f7ff feac 	bl	802211c <do_sarray_io>
  }
  /* Ensure the accessed part of the array is defined; prezero if needed.
   * To improve locality of access, we only prezero the part of the array
   * that the caller is about to access, not the entire in-memory array.
   */
  if (ptr->first_undef_row < end_row) {
 80223c4:	68bb      	ldr	r3, [r7, #8]
 80223c6:	69db      	ldr	r3, [r3, #28]
 80223c8:	697a      	ldr	r2, [r7, #20]
 80223ca:	429a      	cmp	r2, r3
 80223cc:	d94d      	bls.n	802246a <access_virt_sarray+0x16c>
    if (ptr->first_undef_row < start_row) {
 80223ce:	68bb      	ldr	r3, [r7, #8]
 80223d0:	69db      	ldr	r3, [r3, #28]
 80223d2:	687a      	ldr	r2, [r7, #4]
 80223d4:	429a      	cmp	r2, r3
 80223d6:	d90e      	bls.n	80223f6 <access_virt_sarray+0xf8>
      if (writable)		/* writer skipped over a section of array */
 80223d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80223da:	2b00      	cmp	r3, #0
 80223dc:	d008      	beq.n	80223f0 <access_virt_sarray+0xf2>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80223de:	68fb      	ldr	r3, [r7, #12]
 80223e0:	681b      	ldr	r3, [r3, #0]
 80223e2:	2217      	movs	r2, #23
 80223e4:	615a      	str	r2, [r3, #20]
 80223e6:	68fb      	ldr	r3, [r7, #12]
 80223e8:	681b      	ldr	r3, [r3, #0]
 80223ea:	681b      	ldr	r3, [r3, #0]
 80223ec:	68f8      	ldr	r0, [r7, #12]
 80223ee:	4798      	blx	r3
      undef_row = start_row;	/* but reader is allowed to read ahead */
 80223f0:	687b      	ldr	r3, [r7, #4]
 80223f2:	61fb      	str	r3, [r7, #28]
 80223f4:	e002      	b.n	80223fc <access_virt_sarray+0xfe>
    } else {
      undef_row = ptr->first_undef_row;
 80223f6:	68bb      	ldr	r3, [r7, #8]
 80223f8:	69db      	ldr	r3, [r3, #28]
 80223fa:	61fb      	str	r3, [r7, #28]
    }
    if (writable)
 80223fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80223fe:	2b00      	cmp	r3, #0
 8022400:	d002      	beq.n	8022408 <access_virt_sarray+0x10a>
      ptr->first_undef_row = end_row;
 8022402:	68bb      	ldr	r3, [r7, #8]
 8022404:	697a      	ldr	r2, [r7, #20]
 8022406:	61da      	str	r2, [r3, #28]
    if (ptr->pre_zero) {
 8022408:	68bb      	ldr	r3, [r7, #8]
 802240a:	6a1b      	ldr	r3, [r3, #32]
 802240c:	2b00      	cmp	r3, #0
 802240e:	d020      	beq.n	8022452 <access_virt_sarray+0x154>
      size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8022410:	68bb      	ldr	r3, [r7, #8]
 8022412:	689b      	ldr	r3, [r3, #8]
 8022414:	613b      	str	r3, [r7, #16]
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8022416:	68bb      	ldr	r3, [r7, #8]
 8022418:	699b      	ldr	r3, [r3, #24]
 802241a:	69fa      	ldr	r2, [r7, #28]
 802241c:	1ad3      	subs	r3, r2, r3
 802241e:	61fb      	str	r3, [r7, #28]
      end_row -= ptr->cur_start_row;
 8022420:	68bb      	ldr	r3, [r7, #8]
 8022422:	699b      	ldr	r3, [r3, #24]
 8022424:	697a      	ldr	r2, [r7, #20]
 8022426:	1ad3      	subs	r3, r2, r3
 8022428:	617b      	str	r3, [r7, #20]
      while (undef_row < end_row) {
 802242a:	e00d      	b.n	8022448 <access_virt_sarray+0x14a>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 802242c:	68bb      	ldr	r3, [r7, #8]
 802242e:	681a      	ldr	r2, [r3, #0]
 8022430:	69fb      	ldr	r3, [r7, #28]
 8022432:	009b      	lsls	r3, r3, #2
 8022434:	4413      	add	r3, r2
 8022436:	681b      	ldr	r3, [r3, #0]
 8022438:	693a      	ldr	r2, [r7, #16]
 802243a:	2100      	movs	r1, #0
 802243c:	4618      	mov	r0, r3
 802243e:	f002 fd93 	bl	8024f68 <memset>
	undef_row++;
 8022442:	69fb      	ldr	r3, [r7, #28]
 8022444:	3301      	adds	r3, #1
 8022446:	61fb      	str	r3, [r7, #28]
      while (undef_row < end_row) {
 8022448:	69fa      	ldr	r2, [r7, #28]
 802244a:	697b      	ldr	r3, [r7, #20]
 802244c:	429a      	cmp	r2, r3
 802244e:	d3ed      	bcc.n	802242c <access_virt_sarray+0x12e>
 8022450:	e00b      	b.n	802246a <access_virt_sarray+0x16c>
      }
    } else {
      if (! writable)		/* reader looking at undefined data */
 8022452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022454:	2b00      	cmp	r3, #0
 8022456:	d108      	bne.n	802246a <access_virt_sarray+0x16c>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8022458:	68fb      	ldr	r3, [r7, #12]
 802245a:	681b      	ldr	r3, [r3, #0]
 802245c:	2217      	movs	r2, #23
 802245e:	615a      	str	r2, [r3, #20]
 8022460:	68fb      	ldr	r3, [r7, #12]
 8022462:	681b      	ldr	r3, [r3, #0]
 8022464:	681b      	ldr	r3, [r3, #0]
 8022466:	68f8      	ldr	r0, [r7, #12]
 8022468:	4798      	blx	r3
    }
  }
  /* Flag the buffer dirty if caller will write in it */
  if (writable)
 802246a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802246c:	2b00      	cmp	r3, #0
 802246e:	d002      	beq.n	8022476 <access_virt_sarray+0x178>
    ptr->dirty = TRUE;
 8022470:	68bb      	ldr	r3, [r7, #8]
 8022472:	2201      	movs	r2, #1
 8022474:	625a      	str	r2, [r3, #36]	; 0x24
  /* Return address of proper part of the buffer */
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 8022476:	68bb      	ldr	r3, [r7, #8]
 8022478:	681a      	ldr	r2, [r3, #0]
 802247a:	68bb      	ldr	r3, [r7, #8]
 802247c:	699b      	ldr	r3, [r3, #24]
 802247e:	6879      	ldr	r1, [r7, #4]
 8022480:	1acb      	subs	r3, r1, r3
 8022482:	009b      	lsls	r3, r3, #2
 8022484:	4413      	add	r3, r2
}
 8022486:	4618      	mov	r0, r3
 8022488:	3720      	adds	r7, #32
 802248a:	46bd      	mov	sp, r7
 802248c:	bd80      	pop	{r7, pc}

0802248e <access_virt_barray>:
		    JDIMENSION start_row, JDIMENSION num_rows,
		    boolean writable)
/* Access the part of a virtual block array starting at start_row */
/* and extending for num_rows rows.  writable is true if  */
/* caller intends to modify the accessed area. */
{
 802248e:	b580      	push	{r7, lr}
 8022490:	b088      	sub	sp, #32
 8022492:	af00      	add	r7, sp, #0
 8022494:	60f8      	str	r0, [r7, #12]
 8022496:	60b9      	str	r1, [r7, #8]
 8022498:	607a      	str	r2, [r7, #4]
 802249a:	603b      	str	r3, [r7, #0]
  JDIMENSION end_row = start_row + num_rows;
 802249c:	687a      	ldr	r2, [r7, #4]
 802249e:	683b      	ldr	r3, [r7, #0]
 80224a0:	4413      	add	r3, r2
 80224a2:	617b      	str	r3, [r7, #20]
  JDIMENSION undef_row;

  /* debugging check */
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80224a4:	68bb      	ldr	r3, [r7, #8]
 80224a6:	685b      	ldr	r3, [r3, #4]
 80224a8:	697a      	ldr	r2, [r7, #20]
 80224aa:	429a      	cmp	r2, r3
 80224ac:	d808      	bhi.n	80224c0 <access_virt_barray+0x32>
 80224ae:	68bb      	ldr	r3, [r7, #8]
 80224b0:	68db      	ldr	r3, [r3, #12]
 80224b2:	683a      	ldr	r2, [r7, #0]
 80224b4:	429a      	cmp	r2, r3
 80224b6:	d803      	bhi.n	80224c0 <access_virt_barray+0x32>
      ptr->mem_buffer == NULL)
 80224b8:	68bb      	ldr	r3, [r7, #8]
 80224ba:	681b      	ldr	r3, [r3, #0]
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80224bc:	2b00      	cmp	r3, #0
 80224be:	d108      	bne.n	80224d2 <access_virt_barray+0x44>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80224c0:	68fb      	ldr	r3, [r7, #12]
 80224c2:	681b      	ldr	r3, [r3, #0]
 80224c4:	2217      	movs	r2, #23
 80224c6:	615a      	str	r2, [r3, #20]
 80224c8:	68fb      	ldr	r3, [r7, #12]
 80224ca:	681b      	ldr	r3, [r3, #0]
 80224cc:	681b      	ldr	r3, [r3, #0]
 80224ce:	68f8      	ldr	r0, [r7, #12]
 80224d0:	4798      	blx	r3

  /* Make the desired part of the virtual array accessible */
  if (start_row < ptr->cur_start_row ||
 80224d2:	68bb      	ldr	r3, [r7, #8]
 80224d4:	699b      	ldr	r3, [r3, #24]
 80224d6:	687a      	ldr	r2, [r7, #4]
 80224d8:	429a      	cmp	r2, r3
 80224da:	d307      	bcc.n	80224ec <access_virt_barray+0x5e>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 80224dc:	68bb      	ldr	r3, [r7, #8]
 80224de:	699a      	ldr	r2, [r3, #24]
 80224e0:	68bb      	ldr	r3, [r7, #8]
 80224e2:	691b      	ldr	r3, [r3, #16]
 80224e4:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 80224e6:	697a      	ldr	r2, [r7, #20]
 80224e8:	429a      	cmp	r2, r3
 80224ea:	d933      	bls.n	8022554 <access_virt_barray+0xc6>
    if (! ptr->b_s_open)
 80224ec:	68bb      	ldr	r3, [r7, #8]
 80224ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80224f0:	2b00      	cmp	r3, #0
 80224f2:	d108      	bne.n	8022506 <access_virt_barray+0x78>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 80224f4:	68fb      	ldr	r3, [r7, #12]
 80224f6:	681b      	ldr	r3, [r3, #0]
 80224f8:	2247      	movs	r2, #71	; 0x47
 80224fa:	615a      	str	r2, [r3, #20]
 80224fc:	68fb      	ldr	r3, [r7, #12]
 80224fe:	681b      	ldr	r3, [r3, #0]
 8022500:	681b      	ldr	r3, [r3, #0]
 8022502:	68f8      	ldr	r0, [r7, #12]
 8022504:	4798      	blx	r3
    /* Flush old buffer contents if necessary */
    if (ptr->dirty) {
 8022506:	68bb      	ldr	r3, [r7, #8]
 8022508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802250a:	2b00      	cmp	r3, #0
 802250c:	d007      	beq.n	802251e <access_virt_barray+0x90>
      do_barray_io(cinfo, ptr, TRUE);
 802250e:	2201      	movs	r2, #1
 8022510:	68b9      	ldr	r1, [r7, #8]
 8022512:	68f8      	ldr	r0, [r7, #12]
 8022514:	f7ff fe7a 	bl	802220c <do_barray_io>
      ptr->dirty = FALSE;
 8022518:	68bb      	ldr	r3, [r7, #8]
 802251a:	2200      	movs	r2, #0
 802251c:	625a      	str	r2, [r3, #36]	; 0x24
     * load starting at target address.  If target address < current window,
     * assume backward scan, load so that target area is top of window.
     * Note that when switching from forward write to forward read, will have
     * start_row = 0, so the limiting case applies and we load from 0 anyway.
     */
    if (start_row > ptr->cur_start_row) {
 802251e:	68bb      	ldr	r3, [r7, #8]
 8022520:	699b      	ldr	r3, [r3, #24]
 8022522:	687a      	ldr	r2, [r7, #4]
 8022524:	429a      	cmp	r2, r3
 8022526:	d903      	bls.n	8022530 <access_virt_barray+0xa2>
      ptr->cur_start_row = start_row;
 8022528:	68bb      	ldr	r3, [r7, #8]
 802252a:	687a      	ldr	r2, [r7, #4]
 802252c:	619a      	str	r2, [r3, #24]
 802252e:	e00c      	b.n	802254a <access_virt_barray+0xbc>
    } else {
      /* use long arithmetic here to avoid overflow & unsigned problems */
      long ltemp;

      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8022530:	697b      	ldr	r3, [r7, #20]
 8022532:	68ba      	ldr	r2, [r7, #8]
 8022534:	6912      	ldr	r2, [r2, #16]
 8022536:	1a9b      	subs	r3, r3, r2
 8022538:	61bb      	str	r3, [r7, #24]
      if (ltemp < 0)
 802253a:	69bb      	ldr	r3, [r7, #24]
 802253c:	2b00      	cmp	r3, #0
 802253e:	da01      	bge.n	8022544 <access_virt_barray+0xb6>
	ltemp = 0;		/* don't fall off front end of file */
 8022540:	2300      	movs	r3, #0
 8022542:	61bb      	str	r3, [r7, #24]
      ptr->cur_start_row = (JDIMENSION) ltemp;
 8022544:	69ba      	ldr	r2, [r7, #24]
 8022546:	68bb      	ldr	r3, [r7, #8]
 8022548:	619a      	str	r2, [r3, #24]
    }
    /* Read in the selected part of the array.
     * During the initial write pass, we will do no actual read
     * because the selected part is all undefined.
     */
    do_barray_io(cinfo, ptr, FALSE);
 802254a:	2200      	movs	r2, #0
 802254c:	68b9      	ldr	r1, [r7, #8]
 802254e:	68f8      	ldr	r0, [r7, #12]
 8022550:	f7ff fe5c 	bl	802220c <do_barray_io>
  }
  /* Ensure the accessed part of the array is defined; prezero if needed.
   * To improve locality of access, we only prezero the part of the array
   * that the caller is about to access, not the entire in-memory array.
   */
  if (ptr->first_undef_row < end_row) {
 8022554:	68bb      	ldr	r3, [r7, #8]
 8022556:	69db      	ldr	r3, [r3, #28]
 8022558:	697a      	ldr	r2, [r7, #20]
 802255a:	429a      	cmp	r2, r3
 802255c:	d94e      	bls.n	80225fc <access_virt_barray+0x16e>
    if (ptr->first_undef_row < start_row) {
 802255e:	68bb      	ldr	r3, [r7, #8]
 8022560:	69db      	ldr	r3, [r3, #28]
 8022562:	687a      	ldr	r2, [r7, #4]
 8022564:	429a      	cmp	r2, r3
 8022566:	d90e      	bls.n	8022586 <access_virt_barray+0xf8>
      if (writable)		/* writer skipped over a section of array */
 8022568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802256a:	2b00      	cmp	r3, #0
 802256c:	d008      	beq.n	8022580 <access_virt_barray+0xf2>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 802256e:	68fb      	ldr	r3, [r7, #12]
 8022570:	681b      	ldr	r3, [r3, #0]
 8022572:	2217      	movs	r2, #23
 8022574:	615a      	str	r2, [r3, #20]
 8022576:	68fb      	ldr	r3, [r7, #12]
 8022578:	681b      	ldr	r3, [r3, #0]
 802257a:	681b      	ldr	r3, [r3, #0]
 802257c:	68f8      	ldr	r0, [r7, #12]
 802257e:	4798      	blx	r3
      undef_row = start_row;	/* but reader is allowed to read ahead */
 8022580:	687b      	ldr	r3, [r7, #4]
 8022582:	61fb      	str	r3, [r7, #28]
 8022584:	e002      	b.n	802258c <access_virt_barray+0xfe>
    } else {
      undef_row = ptr->first_undef_row;
 8022586:	68bb      	ldr	r3, [r7, #8]
 8022588:	69db      	ldr	r3, [r3, #28]
 802258a:	61fb      	str	r3, [r7, #28]
    }
    if (writable)
 802258c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802258e:	2b00      	cmp	r3, #0
 8022590:	d002      	beq.n	8022598 <access_virt_barray+0x10a>
      ptr->first_undef_row = end_row;
 8022592:	68bb      	ldr	r3, [r7, #8]
 8022594:	697a      	ldr	r2, [r7, #20]
 8022596:	61da      	str	r2, [r3, #28]
    if (ptr->pre_zero) {
 8022598:	68bb      	ldr	r3, [r7, #8]
 802259a:	6a1b      	ldr	r3, [r3, #32]
 802259c:	2b00      	cmp	r3, #0
 802259e:	d021      	beq.n	80225e4 <access_virt_barray+0x156>
      size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 80225a0:	68bb      	ldr	r3, [r7, #8]
 80225a2:	689b      	ldr	r3, [r3, #8]
 80225a4:	01db      	lsls	r3, r3, #7
 80225a6:	613b      	str	r3, [r7, #16]
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 80225a8:	68bb      	ldr	r3, [r7, #8]
 80225aa:	699b      	ldr	r3, [r3, #24]
 80225ac:	69fa      	ldr	r2, [r7, #28]
 80225ae:	1ad3      	subs	r3, r2, r3
 80225b0:	61fb      	str	r3, [r7, #28]
      end_row -= ptr->cur_start_row;
 80225b2:	68bb      	ldr	r3, [r7, #8]
 80225b4:	699b      	ldr	r3, [r3, #24]
 80225b6:	697a      	ldr	r2, [r7, #20]
 80225b8:	1ad3      	subs	r3, r2, r3
 80225ba:	617b      	str	r3, [r7, #20]
      while (undef_row < end_row) {
 80225bc:	e00d      	b.n	80225da <access_virt_barray+0x14c>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 80225be:	68bb      	ldr	r3, [r7, #8]
 80225c0:	681a      	ldr	r2, [r3, #0]
 80225c2:	69fb      	ldr	r3, [r7, #28]
 80225c4:	009b      	lsls	r3, r3, #2
 80225c6:	4413      	add	r3, r2
 80225c8:	681b      	ldr	r3, [r3, #0]
 80225ca:	693a      	ldr	r2, [r7, #16]
 80225cc:	2100      	movs	r1, #0
 80225ce:	4618      	mov	r0, r3
 80225d0:	f002 fcca 	bl	8024f68 <memset>
	undef_row++;
 80225d4:	69fb      	ldr	r3, [r7, #28]
 80225d6:	3301      	adds	r3, #1
 80225d8:	61fb      	str	r3, [r7, #28]
      while (undef_row < end_row) {
 80225da:	69fa      	ldr	r2, [r7, #28]
 80225dc:	697b      	ldr	r3, [r7, #20]
 80225de:	429a      	cmp	r2, r3
 80225e0:	d3ed      	bcc.n	80225be <access_virt_barray+0x130>
 80225e2:	e00b      	b.n	80225fc <access_virt_barray+0x16e>
      }
    } else {
      if (! writable)		/* reader looking at undefined data */
 80225e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80225e6:	2b00      	cmp	r3, #0
 80225e8:	d108      	bne.n	80225fc <access_virt_barray+0x16e>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80225ea:	68fb      	ldr	r3, [r7, #12]
 80225ec:	681b      	ldr	r3, [r3, #0]
 80225ee:	2217      	movs	r2, #23
 80225f0:	615a      	str	r2, [r3, #20]
 80225f2:	68fb      	ldr	r3, [r7, #12]
 80225f4:	681b      	ldr	r3, [r3, #0]
 80225f6:	681b      	ldr	r3, [r3, #0]
 80225f8:	68f8      	ldr	r0, [r7, #12]
 80225fa:	4798      	blx	r3
    }
  }
  /* Flag the buffer dirty if caller will write in it */
  if (writable)
 80225fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80225fe:	2b00      	cmp	r3, #0
 8022600:	d002      	beq.n	8022608 <access_virt_barray+0x17a>
    ptr->dirty = TRUE;
 8022602:	68bb      	ldr	r3, [r7, #8]
 8022604:	2201      	movs	r2, #1
 8022606:	625a      	str	r2, [r3, #36]	; 0x24
  /* Return address of proper part of the buffer */
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 8022608:	68bb      	ldr	r3, [r7, #8]
 802260a:	681a      	ldr	r2, [r3, #0]
 802260c:	68bb      	ldr	r3, [r7, #8]
 802260e:	699b      	ldr	r3, [r3, #24]
 8022610:	6879      	ldr	r1, [r7, #4]
 8022612:	1acb      	subs	r3, r1, r3
 8022614:	009b      	lsls	r3, r3, #2
 8022616:	4413      	add	r3, r2
}
 8022618:	4618      	mov	r0, r3
 802261a:	3720      	adds	r7, #32
 802261c:	46bd      	mov	sp, r7
 802261e:	bd80      	pop	{r7, pc}

08022620 <free_pool>:
 * Release all objects belonging to a specified pool.
 */

METHODDEF(void)
free_pool (j_common_ptr cinfo, int pool_id)
{
 8022620:	b580      	push	{r7, lr}
 8022622:	b08a      	sub	sp, #40	; 0x28
 8022624:	af00      	add	r7, sp, #0
 8022626:	6078      	str	r0, [r7, #4]
 8022628:	6039      	str	r1, [r7, #0]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 802262a:	687b      	ldr	r3, [r7, #4]
 802262c:	685b      	ldr	r3, [r3, #4]
 802262e:	617b      	str	r3, [r7, #20]
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;
  size_t space_freed;

  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8022630:	683b      	ldr	r3, [r7, #0]
 8022632:	2b00      	cmp	r3, #0
 8022634:	db02      	blt.n	802263c <free_pool+0x1c>
 8022636:	683b      	ldr	r3, [r7, #0]
 8022638:	2b01      	cmp	r3, #1
 802263a:	dd0c      	ble.n	8022656 <free_pool+0x36>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 802263c:	687b      	ldr	r3, [r7, #4]
 802263e:	681b      	ldr	r3, [r3, #0]
 8022640:	220f      	movs	r2, #15
 8022642:	615a      	str	r2, [r3, #20]
 8022644:	687b      	ldr	r3, [r7, #4]
 8022646:	681b      	ldr	r3, [r3, #0]
 8022648:	683a      	ldr	r2, [r7, #0]
 802264a:	619a      	str	r2, [r3, #24]
 802264c:	687b      	ldr	r3, [r7, #4]
 802264e:	681b      	ldr	r3, [r3, #0]
 8022650:	681b      	ldr	r3, [r3, #0]
 8022652:	6878      	ldr	r0, [r7, #4]
 8022654:	4798      	blx	r3
  if (cinfo->err->trace_level > 1)
    print_mem_stats(cinfo, pool_id); /* print pool's memory usage statistics */
#endif

  /* If freeing IMAGE pool, close any virtual arrays first */
  if (pool_id == JPOOL_IMAGE) {
 8022656:	683b      	ldr	r3, [r7, #0]
 8022658:	2b01      	cmp	r3, #1
 802265a:	d135      	bne.n	80226c8 <free_pool+0xa8>
    jvirt_sarray_ptr sptr;
    jvirt_barray_ptr bptr;

    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 802265c:	697b      	ldr	r3, [r7, #20]
 802265e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022660:	61fb      	str	r3, [r7, #28]
 8022662:	e010      	b.n	8022686 <free_pool+0x66>
      if (sptr->b_s_open) {	/* there may be no backing store */
 8022664:	69fb      	ldr	r3, [r7, #28]
 8022666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022668:	2b00      	cmp	r3, #0
 802266a:	d009      	beq.n	8022680 <free_pool+0x60>
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 802266c:	69fb      	ldr	r3, [r7, #28]
 802266e:	2200      	movs	r2, #0
 8022670:	629a      	str	r2, [r3, #40]	; 0x28
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 8022672:	69fb      	ldr	r3, [r7, #28]
 8022674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022676:	69fa      	ldr	r2, [r7, #28]
 8022678:	3230      	adds	r2, #48	; 0x30
 802267a:	4611      	mov	r1, r2
 802267c:	6878      	ldr	r0, [r7, #4]
 802267e:	4798      	blx	r3
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8022680:	69fb      	ldr	r3, [r7, #28]
 8022682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022684:	61fb      	str	r3, [r7, #28]
 8022686:	69fb      	ldr	r3, [r7, #28]
 8022688:	2b00      	cmp	r3, #0
 802268a:	d1eb      	bne.n	8022664 <free_pool+0x44>
      }
    }
    mem->virt_sarray_list = NULL;
 802268c:	697b      	ldr	r3, [r7, #20]
 802268e:	2200      	movs	r2, #0
 8022690:	645a      	str	r2, [r3, #68]	; 0x44
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8022692:	697b      	ldr	r3, [r7, #20]
 8022694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8022696:	61bb      	str	r3, [r7, #24]
 8022698:	e010      	b.n	80226bc <free_pool+0x9c>
      if (bptr->b_s_open) {	/* there may be no backing store */
 802269a:	69bb      	ldr	r3, [r7, #24]
 802269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802269e:	2b00      	cmp	r3, #0
 80226a0:	d009      	beq.n	80226b6 <free_pool+0x96>
	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 80226a2:	69bb      	ldr	r3, [r7, #24]
 80226a4:	2200      	movs	r2, #0
 80226a6:	629a      	str	r2, [r3, #40]	; 0x28
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 80226a8:	69bb      	ldr	r3, [r7, #24]
 80226aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80226ac:	69ba      	ldr	r2, [r7, #24]
 80226ae:	3230      	adds	r2, #48	; 0x30
 80226b0:	4611      	mov	r1, r2
 80226b2:	6878      	ldr	r0, [r7, #4]
 80226b4:	4798      	blx	r3
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80226b6:	69bb      	ldr	r3, [r7, #24]
 80226b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80226ba:	61bb      	str	r3, [r7, #24]
 80226bc:	69bb      	ldr	r3, [r7, #24]
 80226be:	2b00      	cmp	r3, #0
 80226c0:	d1eb      	bne.n	802269a <free_pool+0x7a>
      }
    }
    mem->virt_barray_list = NULL;
 80226c2:	697b      	ldr	r3, [r7, #20]
 80226c4:	2200      	movs	r2, #0
 80226c6:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Release large objects */
  lhdr_ptr = mem->large_list[pool_id];
 80226c8:	697a      	ldr	r2, [r7, #20]
 80226ca:	683b      	ldr	r3, [r7, #0]
 80226cc:	330e      	adds	r3, #14
 80226ce:	009b      	lsls	r3, r3, #2
 80226d0:	4413      	add	r3, r2
 80226d2:	685b      	ldr	r3, [r3, #4]
 80226d4:	623b      	str	r3, [r7, #32]
  mem->large_list[pool_id] = NULL;
 80226d6:	697a      	ldr	r2, [r7, #20]
 80226d8:	683b      	ldr	r3, [r7, #0]
 80226da:	330e      	adds	r3, #14
 80226dc:	009b      	lsls	r3, r3, #2
 80226de:	4413      	add	r3, r2
 80226e0:	2200      	movs	r2, #0
 80226e2:	605a      	str	r2, [r3, #4]

  while (lhdr_ptr != NULL) {
 80226e4:	e018      	b.n	8022718 <free_pool+0xf8>
    large_pool_ptr next_lhdr_ptr = lhdr_ptr->hdr.next;
 80226e6:	6a3b      	ldr	r3, [r7, #32]
 80226e8:	681b      	ldr	r3, [r3, #0]
 80226ea:	60bb      	str	r3, [r7, #8]
    space_freed = lhdr_ptr->hdr.bytes_used +
 80226ec:	6a3b      	ldr	r3, [r7, #32]
 80226ee:	685a      	ldr	r2, [r3, #4]
		  lhdr_ptr->hdr.bytes_left +
 80226f0:	6a3b      	ldr	r3, [r7, #32]
 80226f2:	689b      	ldr	r3, [r3, #8]
    space_freed = lhdr_ptr->hdr.bytes_used +
 80226f4:	4413      	add	r3, r2
 80226f6:	3310      	adds	r3, #16
 80226f8:	60fb      	str	r3, [r7, #12]
		  SIZEOF(large_pool_hdr);
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 80226fa:	68fa      	ldr	r2, [r7, #12]
 80226fc:	6a39      	ldr	r1, [r7, #32]
 80226fe:	6878      	ldr	r0, [r7, #4]
 8022700:	f000 f91f 	bl	8022942 <jpeg_free_large>
    mem->total_space_allocated -= space_freed;
 8022704:	697b      	ldr	r3, [r7, #20]
 8022706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022708:	461a      	mov	r2, r3
 802270a:	68fb      	ldr	r3, [r7, #12]
 802270c:	1ad3      	subs	r3, r2, r3
 802270e:	461a      	mov	r2, r3
 8022710:	697b      	ldr	r3, [r7, #20]
 8022712:	64da      	str	r2, [r3, #76]	; 0x4c
    lhdr_ptr = next_lhdr_ptr;
 8022714:	68bb      	ldr	r3, [r7, #8]
 8022716:	623b      	str	r3, [r7, #32]
  while (lhdr_ptr != NULL) {
 8022718:	6a3b      	ldr	r3, [r7, #32]
 802271a:	2b00      	cmp	r3, #0
 802271c:	d1e3      	bne.n	80226e6 <free_pool+0xc6>
  }

  /* Release small objects */
  shdr_ptr = mem->small_list[pool_id];
 802271e:	697a      	ldr	r2, [r7, #20]
 8022720:	683b      	ldr	r3, [r7, #0]
 8022722:	330c      	adds	r3, #12
 8022724:	009b      	lsls	r3, r3, #2
 8022726:	4413      	add	r3, r2
 8022728:	685b      	ldr	r3, [r3, #4]
 802272a:	627b      	str	r3, [r7, #36]	; 0x24
  mem->small_list[pool_id] = NULL;
 802272c:	697a      	ldr	r2, [r7, #20]
 802272e:	683b      	ldr	r3, [r7, #0]
 8022730:	330c      	adds	r3, #12
 8022732:	009b      	lsls	r3, r3, #2
 8022734:	4413      	add	r3, r2
 8022736:	2200      	movs	r2, #0
 8022738:	605a      	str	r2, [r3, #4]

  while (shdr_ptr != NULL) {
 802273a:	e018      	b.n	802276e <free_pool+0x14e>
    small_pool_ptr next_shdr_ptr = shdr_ptr->hdr.next;
 802273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802273e:	681b      	ldr	r3, [r3, #0]
 8022740:	613b      	str	r3, [r7, #16]
    space_freed = shdr_ptr->hdr.bytes_used +
 8022742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022744:	685a      	ldr	r2, [r3, #4]
		  shdr_ptr->hdr.bytes_left +
 8022746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022748:	689b      	ldr	r3, [r3, #8]
    space_freed = shdr_ptr->hdr.bytes_used +
 802274a:	4413      	add	r3, r2
 802274c:	3310      	adds	r3, #16
 802274e:	60fb      	str	r3, [r7, #12]
		  SIZEOF(small_pool_hdr);
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 8022750:	68fa      	ldr	r2, [r7, #12]
 8022752:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8022754:	6878      	ldr	r0, [r7, #4]
 8022756:	f000 f8da 	bl	802290e <jpeg_free_small>
    mem->total_space_allocated -= space_freed;
 802275a:	697b      	ldr	r3, [r7, #20]
 802275c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802275e:	461a      	mov	r2, r3
 8022760:	68fb      	ldr	r3, [r7, #12]
 8022762:	1ad3      	subs	r3, r2, r3
 8022764:	461a      	mov	r2, r3
 8022766:	697b      	ldr	r3, [r7, #20]
 8022768:	64da      	str	r2, [r3, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 802276a:	693b      	ldr	r3, [r7, #16]
 802276c:	627b      	str	r3, [r7, #36]	; 0x24
  while (shdr_ptr != NULL) {
 802276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022770:	2b00      	cmp	r3, #0
 8022772:	d1e3      	bne.n	802273c <free_pool+0x11c>
  }
}
 8022774:	bf00      	nop
 8022776:	bf00      	nop
 8022778:	3728      	adds	r7, #40	; 0x28
 802277a:	46bd      	mov	sp, r7
 802277c:	bd80      	pop	{r7, pc}

0802277e <self_destruct>:
 * Note that this cannot be called unless cinfo->mem is non-NULL.
 */

METHODDEF(void)
self_destruct (j_common_ptr cinfo)
{
 802277e:	b580      	push	{r7, lr}
 8022780:	b084      	sub	sp, #16
 8022782:	af00      	add	r7, sp, #0
 8022784:	6078      	str	r0, [r7, #4]

  /* Close all backing store, release all memory.
   * Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
 8022786:	2301      	movs	r3, #1
 8022788:	60fb      	str	r3, [r7, #12]
 802278a:	e006      	b.n	802279a <self_destruct+0x1c>
    free_pool(cinfo, pool);
 802278c:	68f9      	ldr	r1, [r7, #12]
 802278e:	6878      	ldr	r0, [r7, #4]
 8022790:	f7ff ff46 	bl	8022620 <free_pool>
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
 8022794:	68fb      	ldr	r3, [r7, #12]
 8022796:	3b01      	subs	r3, #1
 8022798:	60fb      	str	r3, [r7, #12]
 802279a:	68fb      	ldr	r3, [r7, #12]
 802279c:	2b00      	cmp	r3, #0
 802279e:	daf5      	bge.n	802278c <self_destruct+0xe>
  }

  /* Release the memory manager control block too. */
  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
 80227a0:	687b      	ldr	r3, [r7, #4]
 80227a2:	685b      	ldr	r3, [r3, #4]
 80227a4:	2254      	movs	r2, #84	; 0x54
 80227a6:	4619      	mov	r1, r3
 80227a8:	6878      	ldr	r0, [r7, #4]
 80227aa:	f000 f8b0 	bl	802290e <jpeg_free_small>
  cinfo->mem = NULL;		/* ensures I will be called only once */
 80227ae:	687b      	ldr	r3, [r7, #4]
 80227b0:	2200      	movs	r2, #0
 80227b2:	605a      	str	r2, [r3, #4]

  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 80227b4:	6878      	ldr	r0, [r7, #4]
 80227b6:	f000 f8fd 	bl	80229b4 <jpeg_mem_term>
}
 80227ba:	bf00      	nop
 80227bc:	3710      	adds	r7, #16
 80227be:	46bd      	mov	sp, r7
 80227c0:	bd80      	pop	{r7, pc}
	...

080227c4 <jinit_memory_mgr>:
 * When this is called, only the error manager pointer is valid in cinfo!
 */

GLOBAL(void)
jinit_memory_mgr (j_common_ptr cinfo)
{
 80227c4:	b580      	push	{r7, lr}
 80227c6:	b086      	sub	sp, #24
 80227c8:	af00      	add	r7, sp, #0
 80227ca:	6078      	str	r0, [r7, #4]
  my_mem_ptr mem;
  long max_to_use;
  int pool;
  size_t test_mac;

  cinfo->mem = NULL;		/* for safety if init fails */
 80227cc:	687b      	ldr	r3, [r7, #4]
 80227ce:	2200      	movs	r2, #0
 80227d0:	605a      	str	r2, [r3, #4]
  /* MAX_ALLOC_CHUNK must be representable as type size_t, and must be
   * a multiple of SIZEOF(ALIGN_TYPE).
   * Again, an "unreachable code" warning may be ignored here.
   * But a "constant too large" warning means you need to fix MAX_ALLOC_CHUNK.
   */
  test_mac = (size_t) MAX_ALLOC_CHUNK;
 80227d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80227d6:	613b      	str	r3, [r7, #16]
  if ((long) test_mac != MAX_ALLOC_CHUNK ||
 80227d8:	693b      	ldr	r3, [r7, #16]
 80227da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80227de:	d008      	beq.n	80227f2 <jinit_memory_mgr+0x2e>
      (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);
 80227e0:	687b      	ldr	r3, [r7, #4]
 80227e2:	681b      	ldr	r3, [r3, #0]
 80227e4:	2202      	movs	r2, #2
 80227e6:	615a      	str	r2, [r3, #20]
 80227e8:	687b      	ldr	r3, [r7, #4]
 80227ea:	681b      	ldr	r3, [r3, #0]
 80227ec:	681b      	ldr	r3, [r3, #0]
 80227ee:	6878      	ldr	r0, [r7, #4]
 80227f0:	4798      	blx	r3

  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 80227f2:	6878      	ldr	r0, [r7, #4]
 80227f4:	f000 f8d3 	bl	802299e <jpeg_mem_init>
 80227f8:	60f8      	str	r0, [r7, #12]

  /* Attempt to allocate memory manager's control block */
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 80227fa:	2154      	movs	r1, #84	; 0x54
 80227fc:	6878      	ldr	r0, [r7, #4]
 80227fe:	f000 f879 	bl	80228f4 <jpeg_get_small>
 8022802:	60b8      	str	r0, [r7, #8]

  if (mem == NULL) {
 8022804:	68bb      	ldr	r3, [r7, #8]
 8022806:	2b00      	cmp	r3, #0
 8022808:	d10f      	bne.n	802282a <jinit_memory_mgr+0x66>
    jpeg_mem_term(cinfo);	/* system-dependent cleanup */
 802280a:	6878      	ldr	r0, [r7, #4]
 802280c:	f000 f8d2 	bl	80229b4 <jpeg_mem_term>
    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
 8022810:	687b      	ldr	r3, [r7, #4]
 8022812:	681b      	ldr	r3, [r3, #0]
 8022814:	2238      	movs	r2, #56	; 0x38
 8022816:	615a      	str	r2, [r3, #20]
 8022818:	687b      	ldr	r3, [r7, #4]
 802281a:	681b      	ldr	r3, [r3, #0]
 802281c:	2200      	movs	r2, #0
 802281e:	619a      	str	r2, [r3, #24]
 8022820:	687b      	ldr	r3, [r7, #4]
 8022822:	681b      	ldr	r3, [r3, #0]
 8022824:	681b      	ldr	r3, [r3, #0]
 8022826:	6878      	ldr	r0, [r7, #4]
 8022828:	4798      	blx	r3
  }

  /* OK, fill in the method pointers */
  mem->pub.alloc_small = alloc_small;
 802282a:	68bb      	ldr	r3, [r7, #8]
 802282c:	4a26      	ldr	r2, [pc, #152]	; (80228c8 <jinit_memory_mgr+0x104>)
 802282e:	601a      	str	r2, [r3, #0]
  mem->pub.alloc_large = alloc_large;
 8022830:	68bb      	ldr	r3, [r7, #8]
 8022832:	4a26      	ldr	r2, [pc, #152]	; (80228cc <jinit_memory_mgr+0x108>)
 8022834:	605a      	str	r2, [r3, #4]
  mem->pub.alloc_sarray = alloc_sarray;
 8022836:	68bb      	ldr	r3, [r7, #8]
 8022838:	4a25      	ldr	r2, [pc, #148]	; (80228d0 <jinit_memory_mgr+0x10c>)
 802283a:	609a      	str	r2, [r3, #8]
  mem->pub.alloc_barray = alloc_barray;
 802283c:	68bb      	ldr	r3, [r7, #8]
 802283e:	4a25      	ldr	r2, [pc, #148]	; (80228d4 <jinit_memory_mgr+0x110>)
 8022840:	60da      	str	r2, [r3, #12]
  mem->pub.request_virt_sarray = request_virt_sarray;
 8022842:	68bb      	ldr	r3, [r7, #8]
 8022844:	4a24      	ldr	r2, [pc, #144]	; (80228d8 <jinit_memory_mgr+0x114>)
 8022846:	611a      	str	r2, [r3, #16]
  mem->pub.request_virt_barray = request_virt_barray;
 8022848:	68bb      	ldr	r3, [r7, #8]
 802284a:	4a24      	ldr	r2, [pc, #144]	; (80228dc <jinit_memory_mgr+0x118>)
 802284c:	615a      	str	r2, [r3, #20]
  mem->pub.realize_virt_arrays = realize_virt_arrays;
 802284e:	68bb      	ldr	r3, [r7, #8]
 8022850:	4a23      	ldr	r2, [pc, #140]	; (80228e0 <jinit_memory_mgr+0x11c>)
 8022852:	619a      	str	r2, [r3, #24]
  mem->pub.access_virt_sarray = access_virt_sarray;
 8022854:	68bb      	ldr	r3, [r7, #8]
 8022856:	4a23      	ldr	r2, [pc, #140]	; (80228e4 <jinit_memory_mgr+0x120>)
 8022858:	61da      	str	r2, [r3, #28]
  mem->pub.access_virt_barray = access_virt_barray;
 802285a:	68bb      	ldr	r3, [r7, #8]
 802285c:	4a22      	ldr	r2, [pc, #136]	; (80228e8 <jinit_memory_mgr+0x124>)
 802285e:	621a      	str	r2, [r3, #32]
  mem->pub.free_pool = free_pool;
 8022860:	68bb      	ldr	r3, [r7, #8]
 8022862:	4a22      	ldr	r2, [pc, #136]	; (80228ec <jinit_memory_mgr+0x128>)
 8022864:	625a      	str	r2, [r3, #36]	; 0x24
  mem->pub.self_destruct = self_destruct;
 8022866:	68bb      	ldr	r3, [r7, #8]
 8022868:	4a21      	ldr	r2, [pc, #132]	; (80228f0 <jinit_memory_mgr+0x12c>)
 802286a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Make MAX_ALLOC_CHUNK accessible to other modules */
  mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;
 802286c:	68bb      	ldr	r3, [r7, #8]
 802286e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8022872:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize working state */
  mem->pub.max_memory_to_use = max_to_use;
 8022874:	68bb      	ldr	r3, [r7, #8]
 8022876:	68fa      	ldr	r2, [r7, #12]
 8022878:	62da      	str	r2, [r3, #44]	; 0x2c

  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
 802287a:	2301      	movs	r3, #1
 802287c:	617b      	str	r3, [r7, #20]
 802287e:	e010      	b.n	80228a2 <jinit_memory_mgr+0xde>
    mem->small_list[pool] = NULL;
 8022880:	68ba      	ldr	r2, [r7, #8]
 8022882:	697b      	ldr	r3, [r7, #20]
 8022884:	330c      	adds	r3, #12
 8022886:	009b      	lsls	r3, r3, #2
 8022888:	4413      	add	r3, r2
 802288a:	2200      	movs	r2, #0
 802288c:	605a      	str	r2, [r3, #4]
    mem->large_list[pool] = NULL;
 802288e:	68ba      	ldr	r2, [r7, #8]
 8022890:	697b      	ldr	r3, [r7, #20]
 8022892:	330e      	adds	r3, #14
 8022894:	009b      	lsls	r3, r3, #2
 8022896:	4413      	add	r3, r2
 8022898:	2200      	movs	r2, #0
 802289a:	605a      	str	r2, [r3, #4]
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
 802289c:	697b      	ldr	r3, [r7, #20]
 802289e:	3b01      	subs	r3, #1
 80228a0:	617b      	str	r3, [r7, #20]
 80228a2:	697b      	ldr	r3, [r7, #20]
 80228a4:	2b00      	cmp	r3, #0
 80228a6:	daeb      	bge.n	8022880 <jinit_memory_mgr+0xbc>
  }
  mem->virt_sarray_list = NULL;
 80228a8:	68bb      	ldr	r3, [r7, #8]
 80228aa:	2200      	movs	r2, #0
 80228ac:	645a      	str	r2, [r3, #68]	; 0x44
  mem->virt_barray_list = NULL;
 80228ae:	68bb      	ldr	r3, [r7, #8]
 80228b0:	2200      	movs	r2, #0
 80228b2:	649a      	str	r2, [r3, #72]	; 0x48

  mem->total_space_allocated = SIZEOF(my_memory_mgr);
 80228b4:	68bb      	ldr	r3, [r7, #8]
 80228b6:	2254      	movs	r2, #84	; 0x54
 80228b8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Declare ourselves open for business */
  cinfo->mem = & mem->pub;
 80228ba:	68ba      	ldr	r2, [r7, #8]
 80228bc:	687b      	ldr	r3, [r7, #4]
 80228be:	605a      	str	r2, [r3, #4]
      }
    }
  }
#endif

}
 80228c0:	bf00      	nop
 80228c2:	3718      	adds	r7, #24
 80228c4:	46bd      	mov	sp, r7
 80228c6:	bd80      	pop	{r7, pc}
 80228c8:	08021a19 	.word	0x08021a19
 80228cc:	08021b99 	.word	0x08021b99
 80228d0:	08021c5f 	.word	0x08021c5f
 80228d4:	08021d25 	.word	0x08021d25
 80228d8:	08021df1 	.word	0x08021df1
 80228dc:	08021e6d 	.word	0x08021e6d
 80228e0:	08021ee9 	.word	0x08021ee9
 80228e4:	080222ff 	.word	0x080222ff
 80228e8:	0802248f 	.word	0x0802248f
 80228ec:	08022621 	.word	0x08022621
 80228f0:	0802277f 	.word	0x0802277f

080228f4 <jpeg_get_small>:
 * routines malloc() and free().
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
 80228f4:	b580      	push	{r7, lr}
 80228f6:	b082      	sub	sp, #8
 80228f8:	af00      	add	r7, sp, #0
 80228fa:	6078      	str	r0, [r7, #4]
 80228fc:	6039      	str	r1, [r7, #0]
  return (void *) JMALLOC(sizeofobject);
 80228fe:	6838      	ldr	r0, [r7, #0]
 8022900:	f002 fb14 	bl	8024f2c <malloc>
 8022904:	4603      	mov	r3, r0
}
 8022906:	4618      	mov	r0, r3
 8022908:	3708      	adds	r7, #8
 802290a:	46bd      	mov	sp, r7
 802290c:	bd80      	pop	{r7, pc}

0802290e <jpeg_free_small>:

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
 802290e:	b580      	push	{r7, lr}
 8022910:	b084      	sub	sp, #16
 8022912:	af00      	add	r7, sp, #0
 8022914:	60f8      	str	r0, [r7, #12]
 8022916:	60b9      	str	r1, [r7, #8]
 8022918:	607a      	str	r2, [r7, #4]
  JFREE(object);
 802291a:	68b8      	ldr	r0, [r7, #8]
 802291c:	f002 fb0e 	bl	8024f3c <free>
}
 8022920:	bf00      	nop
 8022922:	3710      	adds	r7, #16
 8022924:	46bd      	mov	sp, r7
 8022926:	bd80      	pop	{r7, pc}

08022928 <jpeg_get_large>:
 * you probably won't be able to process useful-size images in only 64KB.
 */

GLOBAL(void FAR *)
jpeg_get_large (j_common_ptr cinfo, size_t sizeofobject)
{
 8022928:	b580      	push	{r7, lr}
 802292a:	b082      	sub	sp, #8
 802292c:	af00      	add	r7, sp, #0
 802292e:	6078      	str	r0, [r7, #4]
 8022930:	6039      	str	r1, [r7, #0]
  return (void FAR *) JMALLOC(sizeofobject);
 8022932:	6838      	ldr	r0, [r7, #0]
 8022934:	f002 fafa 	bl	8024f2c <malloc>
 8022938:	4603      	mov	r3, r0
}
 802293a:	4618      	mov	r0, r3
 802293c:	3708      	adds	r7, #8
 802293e:	46bd      	mov	sp, r7
 8022940:	bd80      	pop	{r7, pc}

08022942 <jpeg_free_large>:

GLOBAL(void)
jpeg_free_large (j_common_ptr cinfo, void FAR * object, size_t sizeofobject)
{
 8022942:	b580      	push	{r7, lr}
 8022944:	b084      	sub	sp, #16
 8022946:	af00      	add	r7, sp, #0
 8022948:	60f8      	str	r0, [r7, #12]
 802294a:	60b9      	str	r1, [r7, #8]
 802294c:	607a      	str	r2, [r7, #4]
  JFREE(object);
 802294e:	68b8      	ldr	r0, [r7, #8]
 8022950:	f002 faf4 	bl	8024f3c <free>
}
 8022954:	bf00      	nop
 8022956:	3710      	adds	r7, #16
 8022958:	46bd      	mov	sp, r7
 802295a:	bd80      	pop	{r7, pc}

0802295c <jpeg_mem_available>:
 */

GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
 802295c:	b480      	push	{r7}
 802295e:	b085      	sub	sp, #20
 8022960:	af00      	add	r7, sp, #0
 8022962:	60f8      	str	r0, [r7, #12]
 8022964:	60b9      	str	r1, [r7, #8]
 8022966:	607a      	str	r2, [r7, #4]
 8022968:	603b      	str	r3, [r7, #0]
  return max_bytes_needed;
 802296a:	687b      	ldr	r3, [r7, #4]
}
 802296c:	4618      	mov	r0, r3
 802296e:	3714      	adds	r7, #20
 8022970:	46bd      	mov	sp, r7
 8022972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022976:	4770      	bx	lr

08022978 <jpeg_open_backing_store>:
 */

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
 8022978:	b580      	push	{r7, lr}
 802297a:	b084      	sub	sp, #16
 802297c:	af00      	add	r7, sp, #0
 802297e:	60f8      	str	r0, [r7, #12]
 8022980:	60b9      	str	r1, [r7, #8]
 8022982:	607a      	str	r2, [r7, #4]
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
 8022984:	68fb      	ldr	r3, [r7, #12]
 8022986:	681b      	ldr	r3, [r3, #0]
 8022988:	2233      	movs	r2, #51	; 0x33
 802298a:	615a      	str	r2, [r3, #20]
 802298c:	68fb      	ldr	r3, [r7, #12]
 802298e:	681b      	ldr	r3, [r3, #0]
 8022990:	681b      	ldr	r3, [r3, #0]
 8022992:	68f8      	ldr	r0, [r7, #12]
 8022994:	4798      	blx	r3
}
 8022996:	bf00      	nop
 8022998:	3710      	adds	r7, #16
 802299a:	46bd      	mov	sp, r7
 802299c:	bd80      	pop	{r7, pc}

0802299e <jpeg_mem_init>:
 * cleanup required.  Here, there isn't any.
 */

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
 802299e:	b480      	push	{r7}
 80229a0:	b083      	sub	sp, #12
 80229a2:	af00      	add	r7, sp, #0
 80229a4:	6078      	str	r0, [r7, #4]
  return 0;			/* just set max_memory_to_use to 0 */
 80229a6:	2300      	movs	r3, #0
}
 80229a8:	4618      	mov	r0, r3
 80229aa:	370c      	adds	r7, #12
 80229ac:	46bd      	mov	sp, r7
 80229ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229b2:	4770      	bx	lr

080229b4 <jpeg_mem_term>:

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
 80229b4:	b480      	push	{r7}
 80229b6:	b083      	sub	sp, #12
 80229b8:	af00      	add	r7, sp, #0
 80229ba:	6078      	str	r0, [r7, #4]
}
 80229bc:	bf00      	nop
 80229be:	370c      	adds	r7, #12
 80229c0:	46bd      	mov	sp, r7
 80229c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229c6:	4770      	bx	lr

080229c8 <select_ncolors>:
LOCAL(int)
select_ncolors (j_decompress_ptr cinfo, int Ncolors[])
/* Determine allocation of desired colors to components, */
/* and fill in Ncolors[] array to indicate choice. */
/* Return value is total number of colors (product of Ncolors[] values). */
{
 80229c8:	b580      	push	{r7, lr}
 80229ca:	b08a      	sub	sp, #40	; 0x28
 80229cc:	af00      	add	r7, sp, #0
 80229ce:	6078      	str	r0, [r7, #4]
 80229d0:	6039      	str	r1, [r7, #0]
  int nc = cinfo->out_color_components; /* number of color components */
 80229d2:	687b      	ldr	r3, [r7, #4]
 80229d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80229d6:	613b      	str	r3, [r7, #16]
  int max_colors = cinfo->desired_number_of_colors;
 80229d8:	687b      	ldr	r3, [r7, #4]
 80229da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80229dc:	60fb      	str	r3, [r7, #12]
  long temp;
  static const int RGB_order[3] = { RGB_GREEN, RGB_RED, RGB_BLUE };

  /* We can allocate at least the nc'th root of max_colors per component. */
  /* Compute floor(nc'th root of max_colors). */
  iroot = 1;
 80229de:	2301      	movs	r3, #1
 80229e0:	623b      	str	r3, [r7, #32]
  do {
    iroot++;
 80229e2:	6a3b      	ldr	r3, [r7, #32]
 80229e4:	3301      	adds	r3, #1
 80229e6:	623b      	str	r3, [r7, #32]
    temp = iroot;		/* set temp = iroot ** nc */
 80229e8:	6a3b      	ldr	r3, [r7, #32]
 80229ea:	617b      	str	r3, [r7, #20]
    for (i = 1; i < nc; i++)
 80229ec:	2301      	movs	r3, #1
 80229ee:	61fb      	str	r3, [r7, #28]
 80229f0:	e007      	b.n	8022a02 <select_ncolors+0x3a>
      temp *= iroot;
 80229f2:	697b      	ldr	r3, [r7, #20]
 80229f4:	6a3a      	ldr	r2, [r7, #32]
 80229f6:	fb02 f303 	mul.w	r3, r2, r3
 80229fa:	617b      	str	r3, [r7, #20]
    for (i = 1; i < nc; i++)
 80229fc:	69fb      	ldr	r3, [r7, #28]
 80229fe:	3301      	adds	r3, #1
 8022a00:	61fb      	str	r3, [r7, #28]
 8022a02:	69fa      	ldr	r2, [r7, #28]
 8022a04:	693b      	ldr	r3, [r7, #16]
 8022a06:	429a      	cmp	r2, r3
 8022a08:	dbf3      	blt.n	80229f2 <select_ncolors+0x2a>
  } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
 8022a0a:	697a      	ldr	r2, [r7, #20]
 8022a0c:	68fb      	ldr	r3, [r7, #12]
 8022a0e:	429a      	cmp	r2, r3
 8022a10:	dde7      	ble.n	80229e2 <select_ncolors+0x1a>
  iroot--;			/* now iroot = floor(root) */
 8022a12:	6a3b      	ldr	r3, [r7, #32]
 8022a14:	3b01      	subs	r3, #1
 8022a16:	623b      	str	r3, [r7, #32]

  /* Must have at least 2 color values per component */
  if (iroot < 2)
 8022a18:	6a3b      	ldr	r3, [r7, #32]
 8022a1a:	2b01      	cmp	r3, #1
 8022a1c:	dc0c      	bgt.n	8022a38 <select_ncolors+0x70>
    ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);
 8022a1e:	687b      	ldr	r3, [r7, #4]
 8022a20:	681b      	ldr	r3, [r3, #0]
 8022a22:	223a      	movs	r2, #58	; 0x3a
 8022a24:	615a      	str	r2, [r3, #20]
 8022a26:	687b      	ldr	r3, [r7, #4]
 8022a28:	681b      	ldr	r3, [r3, #0]
 8022a2a:	697a      	ldr	r2, [r7, #20]
 8022a2c:	619a      	str	r2, [r3, #24]
 8022a2e:	687b      	ldr	r3, [r7, #4]
 8022a30:	681b      	ldr	r3, [r3, #0]
 8022a32:	681b      	ldr	r3, [r3, #0]
 8022a34:	6878      	ldr	r0, [r7, #4]
 8022a36:	4798      	blx	r3

  /* Initialize to iroot color values for each component */
  total_colors = 1;
 8022a38:	2301      	movs	r3, #1
 8022a3a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0; i < nc; i++) {
 8022a3c:	2300      	movs	r3, #0
 8022a3e:	61fb      	str	r3, [r7, #28]
 8022a40:	e00d      	b.n	8022a5e <select_ncolors+0x96>
    Ncolors[i] = iroot;
 8022a42:	69fb      	ldr	r3, [r7, #28]
 8022a44:	009b      	lsls	r3, r3, #2
 8022a46:	683a      	ldr	r2, [r7, #0]
 8022a48:	4413      	add	r3, r2
 8022a4a:	6a3a      	ldr	r2, [r7, #32]
 8022a4c:	601a      	str	r2, [r3, #0]
    total_colors *= iroot;
 8022a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a50:	6a3a      	ldr	r2, [r7, #32]
 8022a52:	fb02 f303 	mul.w	r3, r2, r3
 8022a56:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0; i < nc; i++) {
 8022a58:	69fb      	ldr	r3, [r7, #28]
 8022a5a:	3301      	adds	r3, #1
 8022a5c:	61fb      	str	r3, [r7, #28]
 8022a5e:	69fa      	ldr	r2, [r7, #28]
 8022a60:	693b      	ldr	r3, [r7, #16]
 8022a62:	429a      	cmp	r2, r3
 8022a64:	dbed      	blt.n	8022a42 <select_ncolors+0x7a>
   * Sometimes, the first component can be incremented more than once!
   * (Example: for 16 colors, we start at 2*2*2, go to 3*2*2, then 4*2*2.)
   * In RGB colorspace, try to increment G first, then R, then B.
   */
  do {
    changed = FALSE;
 8022a66:	2300      	movs	r3, #0
 8022a68:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < nc; i++) {
 8022a6a:	2300      	movs	r3, #0
 8022a6c:	61fb      	str	r3, [r7, #28]
 8022a6e:	e030      	b.n	8022ad2 <select_ncolors+0x10a>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 8022a70:	687b      	ldr	r3, [r7, #4]
 8022a72:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8022a76:	2b02      	cmp	r3, #2
 8022a78:	d104      	bne.n	8022a84 <select_ncolors+0xbc>
 8022a7a:	4a1d      	ldr	r2, [pc, #116]	; (8022af0 <select_ncolors+0x128>)
 8022a7c:	69fb      	ldr	r3, [r7, #28]
 8022a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022a82:	e000      	b.n	8022a86 <select_ncolors+0xbe>
 8022a84:	69fb      	ldr	r3, [r7, #28]
 8022a86:	60bb      	str	r3, [r7, #8]
      /* calculate new total_colors if Ncolors[j] is incremented */
      temp = total_colors / Ncolors[j];
 8022a88:	68bb      	ldr	r3, [r7, #8]
 8022a8a:	009b      	lsls	r3, r3, #2
 8022a8c:	683a      	ldr	r2, [r7, #0]
 8022a8e:	4413      	add	r3, r2
 8022a90:	681b      	ldr	r3, [r3, #0]
 8022a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022a94:	fb92 f3f3 	sdiv	r3, r2, r3
 8022a98:	617b      	str	r3, [r7, #20]
      temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 8022a9a:	68bb      	ldr	r3, [r7, #8]
 8022a9c:	009b      	lsls	r3, r3, #2
 8022a9e:	683a      	ldr	r2, [r7, #0]
 8022aa0:	4413      	add	r3, r2
 8022aa2:	681b      	ldr	r3, [r3, #0]
 8022aa4:	1c5a      	adds	r2, r3, #1
 8022aa6:	697b      	ldr	r3, [r7, #20]
 8022aa8:	fb02 f303 	mul.w	r3, r2, r3
 8022aac:	617b      	str	r3, [r7, #20]
      if (temp > (long) max_colors)
 8022aae:	697a      	ldr	r2, [r7, #20]
 8022ab0:	68fb      	ldr	r3, [r7, #12]
 8022ab2:	429a      	cmp	r2, r3
 8022ab4:	dc12      	bgt.n	8022adc <select_ncolors+0x114>
	break;			/* won't fit, done with this pass */
      Ncolors[j]++;		/* OK, apply the increment */
 8022ab6:	68bb      	ldr	r3, [r7, #8]
 8022ab8:	009b      	lsls	r3, r3, #2
 8022aba:	683a      	ldr	r2, [r7, #0]
 8022abc:	4413      	add	r3, r2
 8022abe:	681a      	ldr	r2, [r3, #0]
 8022ac0:	3201      	adds	r2, #1
 8022ac2:	601a      	str	r2, [r3, #0]
      total_colors = (int) temp;
 8022ac4:	697b      	ldr	r3, [r7, #20]
 8022ac6:	627b      	str	r3, [r7, #36]	; 0x24
      changed = TRUE;
 8022ac8:	2301      	movs	r3, #1
 8022aca:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < nc; i++) {
 8022acc:	69fb      	ldr	r3, [r7, #28]
 8022ace:	3301      	adds	r3, #1
 8022ad0:	61fb      	str	r3, [r7, #28]
 8022ad2:	69fa      	ldr	r2, [r7, #28]
 8022ad4:	693b      	ldr	r3, [r7, #16]
 8022ad6:	429a      	cmp	r2, r3
 8022ad8:	dbca      	blt.n	8022a70 <select_ncolors+0xa8>
 8022ada:	e000      	b.n	8022ade <select_ncolors+0x116>
	break;			/* won't fit, done with this pass */
 8022adc:	bf00      	nop
    }
  } while (changed);
 8022ade:	69bb      	ldr	r3, [r7, #24]
 8022ae0:	2b00      	cmp	r3, #0
 8022ae2:	d1c0      	bne.n	8022a66 <select_ncolors+0x9e>

  return total_colors;
 8022ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8022ae6:	4618      	mov	r0, r3
 8022ae8:	3728      	adds	r7, #40	; 0x28
 8022aea:	46bd      	mov	sp, r7
 8022aec:	bd80      	pop	{r7, pc}
 8022aee:	bf00      	nop
 8022af0:	0802760c 	.word	0x0802760c

08022af4 <output_value>:

LOCAL(int)
output_value (j_decompress_ptr cinfo, int ci, int j, int maxj)
/* Return j'th output value, where j will range from 0 to maxj */
/* The output values must fall in 0..MAXJSAMPLE in increasing order */
{
 8022af4:	b480      	push	{r7}
 8022af6:	b085      	sub	sp, #20
 8022af8:	af00      	add	r7, sp, #0
 8022afa:	60f8      	str	r0, [r7, #12]
 8022afc:	60b9      	str	r1, [r7, #8]
 8022afe:	607a      	str	r2, [r7, #4]
 8022b00:	603b      	str	r3, [r7, #0]
  /* We always provide values 0 and MAXJSAMPLE for each component;
   * any additional values are equally spaced between these limits.
   * (Forcing the upper and lower values to the limits ensures that
   * dithering can't produce a color outside the selected gamut.)
   */
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8022b02:	687a      	ldr	r2, [r7, #4]
 8022b04:	4613      	mov	r3, r2
 8022b06:	021b      	lsls	r3, r3, #8
 8022b08:	1a9a      	subs	r2, r3, r2
 8022b0a:	683b      	ldr	r3, [r7, #0]
 8022b0c:	0fd9      	lsrs	r1, r3, #31
 8022b0e:	440b      	add	r3, r1
 8022b10:	105b      	asrs	r3, r3, #1
 8022b12:	441a      	add	r2, r3
 8022b14:	683b      	ldr	r3, [r7, #0]
 8022b16:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8022b1a:	4618      	mov	r0, r3
 8022b1c:	3714      	adds	r7, #20
 8022b1e:	46bd      	mov	sp, r7
 8022b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b24:	4770      	bx	lr

08022b26 <largest_input_value>:

LOCAL(int)
largest_input_value (j_decompress_ptr cinfo, int ci, int j, int maxj)
/* Return largest input value that should map to j'th output value */
/* Must have largest(j=0) >= 0, and largest(j=maxj) >= MAXJSAMPLE */
{
 8022b26:	b480      	push	{r7}
 8022b28:	b085      	sub	sp, #20
 8022b2a:	af00      	add	r7, sp, #0
 8022b2c:	60f8      	str	r0, [r7, #12]
 8022b2e:	60b9      	str	r1, [r7, #8]
 8022b30:	607a      	str	r2, [r7, #4]
 8022b32:	603b      	str	r3, [r7, #0]
  /* Breakpoints are halfway between values returned by output_value */
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8022b34:	687b      	ldr	r3, [r7, #4]
 8022b36:	005b      	lsls	r3, r3, #1
 8022b38:	1c5a      	adds	r2, r3, #1
 8022b3a:	4613      	mov	r3, r2
 8022b3c:	021b      	lsls	r3, r3, #8
 8022b3e:	1a9a      	subs	r2, r3, r2
 8022b40:	683b      	ldr	r3, [r7, #0]
 8022b42:	441a      	add	r2, r3
 8022b44:	683b      	ldr	r3, [r7, #0]
 8022b46:	005b      	lsls	r3, r3, #1
 8022b48:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8022b4c:	4618      	mov	r0, r3
 8022b4e:	3714      	adds	r7, #20
 8022b50:	46bd      	mov	sp, r7
 8022b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b56:	4770      	bx	lr

08022b58 <create_colormap>:
 * Create the colormap.
 */

LOCAL(void)
create_colormap (j_decompress_ptr cinfo)
{
 8022b58:	b590      	push	{r4, r7, lr}
 8022b5a:	b08f      	sub	sp, #60	; 0x3c
 8022b5c:	af00      	add	r7, sp, #0
 8022b5e:	6078      	str	r0, [r7, #4]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8022b60:	687b      	ldr	r3, [r7, #4]
 8022b62:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8022b66:	623b      	str	r3, [r7, #32]
  JSAMPARRAY colormap;		/* Created colormap */
  int total_colors;		/* Number of distinct output colors */
  int i,j,k, nci, blksize, blkdist, ptr, val;

  /* Select number of colors for each component */
  total_colors = select_ncolors(cinfo, cquantize->Ncolors);
 8022b68:	6a3b      	ldr	r3, [r7, #32]
 8022b6a:	3320      	adds	r3, #32
 8022b6c:	4619      	mov	r1, r3
 8022b6e:	6878      	ldr	r0, [r7, #4]
 8022b70:	f7ff ff2a 	bl	80229c8 <select_ncolors>
 8022b74:	61f8      	str	r0, [r7, #28]

  /* Report selected color counts */
  if (cinfo->out_color_components == 3)
 8022b76:	687b      	ldr	r3, [r7, #4]
 8022b78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8022b7a:	2b03      	cmp	r3, #3
 8022b7c:	d120      	bne.n	8022bc0 <create_colormap+0x68>
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8022b7e:	687b      	ldr	r3, [r7, #4]
 8022b80:	681b      	ldr	r3, [r3, #0]
 8022b82:	3318      	adds	r3, #24
 8022b84:	61bb      	str	r3, [r7, #24]
 8022b86:	69bb      	ldr	r3, [r7, #24]
 8022b88:	69fa      	ldr	r2, [r7, #28]
 8022b8a:	601a      	str	r2, [r3, #0]
 8022b8c:	69bb      	ldr	r3, [r7, #24]
 8022b8e:	3304      	adds	r3, #4
 8022b90:	6a3a      	ldr	r2, [r7, #32]
 8022b92:	6a12      	ldr	r2, [r2, #32]
 8022b94:	601a      	str	r2, [r3, #0]
 8022b96:	69bb      	ldr	r3, [r7, #24]
 8022b98:	3308      	adds	r3, #8
 8022b9a:	6a3a      	ldr	r2, [r7, #32]
 8022b9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8022b9e:	601a      	str	r2, [r3, #0]
 8022ba0:	69bb      	ldr	r3, [r7, #24]
 8022ba2:	330c      	adds	r3, #12
 8022ba4:	6a3a      	ldr	r2, [r7, #32]
 8022ba6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8022ba8:	601a      	str	r2, [r3, #0]
 8022baa:	687b      	ldr	r3, [r7, #4]
 8022bac:	681b      	ldr	r3, [r3, #0]
 8022bae:	2260      	movs	r2, #96	; 0x60
 8022bb0:	615a      	str	r2, [r3, #20]
 8022bb2:	687b      	ldr	r3, [r7, #4]
 8022bb4:	681b      	ldr	r3, [r3, #0]
 8022bb6:	685b      	ldr	r3, [r3, #4]
 8022bb8:	2101      	movs	r1, #1
 8022bba:	6878      	ldr	r0, [r7, #4]
 8022bbc:	4798      	blx	r3
 8022bbe:	e00d      	b.n	8022bdc <create_colormap+0x84>
	     total_colors, cquantize->Ncolors[0],
	     cquantize->Ncolors[1], cquantize->Ncolors[2]);
  else
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 8022bc0:	687b      	ldr	r3, [r7, #4]
 8022bc2:	681b      	ldr	r3, [r3, #0]
 8022bc4:	2261      	movs	r2, #97	; 0x61
 8022bc6:	615a      	str	r2, [r3, #20]
 8022bc8:	687b      	ldr	r3, [r7, #4]
 8022bca:	681b      	ldr	r3, [r3, #0]
 8022bcc:	69fa      	ldr	r2, [r7, #28]
 8022bce:	619a      	str	r2, [r3, #24]
 8022bd0:	687b      	ldr	r3, [r7, #4]
 8022bd2:	681b      	ldr	r3, [r3, #0]
 8022bd4:	685b      	ldr	r3, [r3, #4]
 8022bd6:	2101      	movs	r1, #1
 8022bd8:	6878      	ldr	r0, [r7, #4]
 8022bda:	4798      	blx	r3

  /* Allocate and fill in the colormap. */
  /* The colors are ordered in the map in standard row-major order, */
  /* i.e. rightmost (highest-indexed) color changes most rapidly. */

  colormap = (*cinfo->mem->alloc_sarray)
 8022bdc:	687b      	ldr	r3, [r7, #4]
 8022bde:	685b      	ldr	r3, [r3, #4]
 8022be0:	689c      	ldr	r4, [r3, #8]
 8022be2:	69fa      	ldr	r2, [r7, #28]
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) total_colors, (JDIMENSION) cinfo->out_color_components);
 8022be4:	687b      	ldr	r3, [r7, #4]
 8022be6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  colormap = (*cinfo->mem->alloc_sarray)
 8022be8:	2101      	movs	r1, #1
 8022bea:	6878      	ldr	r0, [r7, #4]
 8022bec:	47a0      	blx	r4
 8022bee:	6178      	str	r0, [r7, #20]

  /* blksize is number of adjacent repeated entries for a component */
  /* blkdist is distance between groups of identical entries for a component */
  blkdist = total_colors;
 8022bf0:	69fb      	ldr	r3, [r7, #28]
 8022bf2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = 0; i < cinfo->out_color_components; i++) {
 8022bf4:	2300      	movs	r3, #0
 8022bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8022bf8:	e045      	b.n	8022c86 <create_colormap+0x12e>
    /* fill in colormap entries for i'th color component */
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8022bfa:	6a3b      	ldr	r3, [r7, #32]
 8022bfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8022bfe:	3208      	adds	r2, #8
 8022c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022c04:	613b      	str	r3, [r7, #16]
    blksize = blkdist / nci;
 8022c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022c08:	693b      	ldr	r3, [r7, #16]
 8022c0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c0e:	60fb      	str	r3, [r7, #12]
    for (j = 0; j < nci; j++) {
 8022c10:	2300      	movs	r3, #0
 8022c12:	633b      	str	r3, [r7, #48]	; 0x30
 8022c14:	e02e      	b.n	8022c74 <create_colormap+0x11c>
      /* Compute j'th output value (out of nci) for component */
      val = output_value(cinfo, i, j, nci-1);
 8022c16:	693b      	ldr	r3, [r7, #16]
 8022c18:	3b01      	subs	r3, #1
 8022c1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022c1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8022c1e:	6878      	ldr	r0, [r7, #4]
 8022c20:	f7ff ff68 	bl	8022af4 <output_value>
 8022c24:	60b8      	str	r0, [r7, #8]
      /* Fill in all colormap entries that have this value of this component */
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 8022c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022c28:	68fa      	ldr	r2, [r7, #12]
 8022c2a:	fb02 f303 	mul.w	r3, r2, r3
 8022c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8022c30:	e019      	b.n	8022c66 <create_colormap+0x10e>
	/* fill in blksize entries beginning at ptr */
	for (k = 0; k < blksize; k++)
 8022c32:	2300      	movs	r3, #0
 8022c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022c36:	e00e      	b.n	8022c56 <create_colormap+0xfe>
	  colormap[i][ptr+k] = (JSAMPLE) val;
 8022c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022c3a:	009b      	lsls	r3, r3, #2
 8022c3c:	697a      	ldr	r2, [r7, #20]
 8022c3e:	4413      	add	r3, r2
 8022c40:	681b      	ldr	r3, [r3, #0]
 8022c42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8022c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022c46:	440a      	add	r2, r1
 8022c48:	4413      	add	r3, r2
 8022c4a:	68ba      	ldr	r2, [r7, #8]
 8022c4c:	b2d2      	uxtb	r2, r2
 8022c4e:	701a      	strb	r2, [r3, #0]
	for (k = 0; k < blksize; k++)
 8022c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022c52:	3301      	adds	r3, #1
 8022c54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022c58:	68fb      	ldr	r3, [r7, #12]
 8022c5a:	429a      	cmp	r2, r3
 8022c5c:	dbec      	blt.n	8022c38 <create_colormap+0xe0>
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 8022c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022c62:	4413      	add	r3, r2
 8022c64:	627b      	str	r3, [r7, #36]	; 0x24
 8022c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022c68:	69fb      	ldr	r3, [r7, #28]
 8022c6a:	429a      	cmp	r2, r3
 8022c6c:	dbe1      	blt.n	8022c32 <create_colormap+0xda>
    for (j = 0; j < nci; j++) {
 8022c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022c70:	3301      	adds	r3, #1
 8022c72:	633b      	str	r3, [r7, #48]	; 0x30
 8022c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022c76:	693b      	ldr	r3, [r7, #16]
 8022c78:	429a      	cmp	r2, r3
 8022c7a:	dbcc      	blt.n	8022c16 <create_colormap+0xbe>
      }
    }
    blkdist = blksize;		/* blksize of this color is blkdist of next */
 8022c7c:	68fb      	ldr	r3, [r7, #12]
 8022c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (i = 0; i < cinfo->out_color_components; i++) {
 8022c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022c82:	3301      	adds	r3, #1
 8022c84:	637b      	str	r3, [r7, #52]	; 0x34
 8022c86:	687b      	ldr	r3, [r7, #4]
 8022c88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8022c8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8022c8c:	429a      	cmp	r2, r3
 8022c8e:	dbb4      	blt.n	8022bfa <create_colormap+0xa2>
  }

  /* Save the colormap in private storage,
   * where it will survive color quantization mode changes.
   */
  cquantize->sv_colormap = colormap;
 8022c90:	6a3b      	ldr	r3, [r7, #32]
 8022c92:	697a      	ldr	r2, [r7, #20]
 8022c94:	611a      	str	r2, [r3, #16]
  cquantize->sv_actual = total_colors;
 8022c96:	6a3b      	ldr	r3, [r7, #32]
 8022c98:	69fa      	ldr	r2, [r7, #28]
 8022c9a:	615a      	str	r2, [r3, #20]
}
 8022c9c:	bf00      	nop
 8022c9e:	373c      	adds	r7, #60	; 0x3c
 8022ca0:	46bd      	mov	sp, r7
 8022ca2:	bd90      	pop	{r4, r7, pc}

08022ca4 <create_colorindex>:
 * Create the color index table.
 */

LOCAL(void)
create_colorindex (j_decompress_ptr cinfo)
{
 8022ca4:	b590      	push	{r4, r7, lr}
 8022ca6:	b08d      	sub	sp, #52	; 0x34
 8022ca8:	af00      	add	r7, sp, #0
 8022caa:	6078      	str	r0, [r7, #4]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8022cac:	687b      	ldr	r3, [r7, #4]
 8022cae:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8022cb2:	617b      	str	r3, [r7, #20]
  /* For ordered dither, we pad the color index tables by MAXJSAMPLE in
   * each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
   * This is not necessary in the other dithering modes.  However, we
   * flag whether it was done in case user changes dithering mode.
   */
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 8022cb4:	687b      	ldr	r3, [r7, #4]
 8022cb6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8022cba:	2b01      	cmp	r3, #1
 8022cbc:	d106      	bne.n	8022ccc <create_colorindex+0x28>
    pad = MAXJSAMPLE*2;
 8022cbe:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8022cc2:	61bb      	str	r3, [r7, #24]
    cquantize->is_padded = TRUE;
 8022cc4:	697b      	ldr	r3, [r7, #20]
 8022cc6:	2201      	movs	r2, #1
 8022cc8:	61da      	str	r2, [r3, #28]
 8022cca:	e004      	b.n	8022cd6 <create_colorindex+0x32>
  } else {
    pad = 0;
 8022ccc:	2300      	movs	r3, #0
 8022cce:	61bb      	str	r3, [r7, #24]
    cquantize->is_padded = FALSE;
 8022cd0:	697b      	ldr	r3, [r7, #20]
 8022cd2:	2200      	movs	r2, #0
 8022cd4:	61da      	str	r2, [r3, #28]
  }

  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8022cd6:	687b      	ldr	r3, [r7, #4]
 8022cd8:	685b      	ldr	r3, [r3, #4]
 8022cda:	689c      	ldr	r4, [r3, #8]
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) (MAXJSAMPLE+1 + pad),
 8022cdc:	69bb      	ldr	r3, [r7, #24]
 8022cde:	f503 7380 	add.w	r3, r3, #256	; 0x100
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8022ce2:	461a      	mov	r2, r3
     (JDIMENSION) cinfo->out_color_components);
 8022ce4:	687b      	ldr	r3, [r7, #4]
 8022ce6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8022ce8:	2101      	movs	r1, #1
 8022cea:	6878      	ldr	r0, [r7, #4]
 8022cec:	47a0      	blx	r4
 8022cee:	4602      	mov	r2, r0
 8022cf0:	697b      	ldr	r3, [r7, #20]
 8022cf2:	619a      	str	r2, [r3, #24]

  /* blksize is number of adjacent repeated entries for a component */
  blksize = cquantize->sv_actual;
 8022cf4:	697b      	ldr	r3, [r7, #20]
 8022cf6:	695b      	ldr	r3, [r3, #20]
 8022cf8:	623b      	str	r3, [r7, #32]

  for (i = 0; i < cinfo->out_color_components; i++) {
 8022cfa:	2300      	movs	r3, #0
 8022cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022cfe:	e06e      	b.n	8022dde <create_colorindex+0x13a>
    /* fill in colorindex entries for i'th color component */
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8022d00:	697b      	ldr	r3, [r7, #20]
 8022d02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022d04:	3208      	adds	r2, #8
 8022d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022d0a:	613b      	str	r3, [r7, #16]
    blksize = blksize / nci;
 8022d0c:	6a3a      	ldr	r2, [r7, #32]
 8022d0e:	693b      	ldr	r3, [r7, #16]
 8022d10:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d14:	623b      	str	r3, [r7, #32]

    /* adjust colorindex pointers to provide padding at negative indexes. */
    if (pad)
 8022d16:	69bb      	ldr	r3, [r7, #24]
 8022d18:	2b00      	cmp	r3, #0
 8022d1a:	d00c      	beq.n	8022d36 <create_colorindex+0x92>
      cquantize->colorindex[i] += MAXJSAMPLE;
 8022d1c:	697b      	ldr	r3, [r7, #20]
 8022d1e:	699a      	ldr	r2, [r3, #24]
 8022d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022d22:	009b      	lsls	r3, r3, #2
 8022d24:	4413      	add	r3, r2
 8022d26:	681a      	ldr	r2, [r3, #0]
 8022d28:	697b      	ldr	r3, [r7, #20]
 8022d2a:	6999      	ldr	r1, [r3, #24]
 8022d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022d2e:	009b      	lsls	r3, r3, #2
 8022d30:	440b      	add	r3, r1
 8022d32:	32ff      	adds	r2, #255	; 0xff
 8022d34:	601a      	str	r2, [r3, #0]

    /* in loop, val = index of current output value, */
    /* and k = largest j that maps to current val */
    indexptr = cquantize->colorindex[i];
 8022d36:	697b      	ldr	r3, [r7, #20]
 8022d38:	699a      	ldr	r2, [r3, #24]
 8022d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022d3c:	009b      	lsls	r3, r3, #2
 8022d3e:	4413      	add	r3, r2
 8022d40:	681b      	ldr	r3, [r3, #0]
 8022d42:	60fb      	str	r3, [r7, #12]
    val = 0;
 8022d44:	2300      	movs	r3, #0
 8022d46:	61fb      	str	r3, [r7, #28]
    k = largest_input_value(cinfo, i, 0, nci-1);
 8022d48:	693b      	ldr	r3, [r7, #16]
 8022d4a:	3b01      	subs	r3, #1
 8022d4c:	2200      	movs	r2, #0
 8022d4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8022d50:	6878      	ldr	r0, [r7, #4]
 8022d52:	f7ff fee8 	bl	8022b26 <largest_input_value>
 8022d56:	6278      	str	r0, [r7, #36]	; 0x24
    for (j = 0; j <= MAXJSAMPLE; j++) {
 8022d58:	2300      	movs	r3, #0
 8022d5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8022d5c:	e01c      	b.n	8022d98 <create_colorindex+0xf4>
      while (j > k)		/* advance val if past boundary */
	k = largest_input_value(cinfo, i, ++val, nci-1);
 8022d5e:	69fb      	ldr	r3, [r7, #28]
 8022d60:	3301      	adds	r3, #1
 8022d62:	61fb      	str	r3, [r7, #28]
 8022d64:	693b      	ldr	r3, [r7, #16]
 8022d66:	3b01      	subs	r3, #1
 8022d68:	69fa      	ldr	r2, [r7, #28]
 8022d6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8022d6c:	6878      	ldr	r0, [r7, #4]
 8022d6e:	f7ff feda 	bl	8022b26 <largest_input_value>
 8022d72:	6278      	str	r0, [r7, #36]	; 0x24
      while (j > k)		/* advance val if past boundary */
 8022d74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022d78:	429a      	cmp	r2, r3
 8022d7a:	dcf0      	bgt.n	8022d5e <create_colorindex+0xba>
      /* premultiply so that no multiplication needed in main processing */
      indexptr[j] = (JSAMPLE) (val * blksize);
 8022d7c:	69fb      	ldr	r3, [r7, #28]
 8022d7e:	b2d9      	uxtb	r1, r3
 8022d80:	6a3b      	ldr	r3, [r7, #32]
 8022d82:	b2da      	uxtb	r2, r3
 8022d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d86:	68f8      	ldr	r0, [r7, #12]
 8022d88:	4403      	add	r3, r0
 8022d8a:	fb11 f202 	smulbb	r2, r1, r2
 8022d8e:	b2d2      	uxtb	r2, r2
 8022d90:	701a      	strb	r2, [r3, #0]
    for (j = 0; j <= MAXJSAMPLE; j++) {
 8022d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d94:	3301      	adds	r3, #1
 8022d96:	62bb      	str	r3, [r7, #40]	; 0x28
 8022d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d9a:	2bff      	cmp	r3, #255	; 0xff
 8022d9c:	ddea      	ble.n	8022d74 <create_colorindex+0xd0>
    }
    /* Pad at both ends if necessary */
    if (pad)
 8022d9e:	69bb      	ldr	r3, [r7, #24]
 8022da0:	2b00      	cmp	r3, #0
 8022da2:	d019      	beq.n	8022dd8 <create_colorindex+0x134>
      for (j = 1; j <= MAXJSAMPLE; j++) {
 8022da4:	2301      	movs	r3, #1
 8022da6:	62bb      	str	r3, [r7, #40]	; 0x28
 8022da8:	e013      	b.n	8022dd2 <create_colorindex+0x12e>
	indexptr[-j] = indexptr[0];
 8022daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022dac:	425b      	negs	r3, r3
 8022dae:	461a      	mov	r2, r3
 8022db0:	68fb      	ldr	r3, [r7, #12]
 8022db2:	4413      	add	r3, r2
 8022db4:	68fa      	ldr	r2, [r7, #12]
 8022db6:	7812      	ldrb	r2, [r2, #0]
 8022db8:	701a      	strb	r2, [r3, #0]
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
 8022dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022dbc:	33ff      	adds	r3, #255	; 0xff
 8022dbe:	461a      	mov	r2, r3
 8022dc0:	68fb      	ldr	r3, [r7, #12]
 8022dc2:	4413      	add	r3, r2
 8022dc4:	68fa      	ldr	r2, [r7, #12]
 8022dc6:	f892 20ff 	ldrb.w	r2, [r2, #255]	; 0xff
 8022dca:	701a      	strb	r2, [r3, #0]
      for (j = 1; j <= MAXJSAMPLE; j++) {
 8022dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022dce:	3301      	adds	r3, #1
 8022dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8022dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022dd4:	2bff      	cmp	r3, #255	; 0xff
 8022dd6:	dde8      	ble.n	8022daa <create_colorindex+0x106>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8022dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022dda:	3301      	adds	r3, #1
 8022ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022dde:	687b      	ldr	r3, [r7, #4]
 8022de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8022de2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022de4:	429a      	cmp	r2, r3
 8022de6:	db8b      	blt.n	8022d00 <create_colorindex+0x5c>
      }
  }
}
 8022de8:	bf00      	nop
 8022dea:	bf00      	nop
 8022dec:	3734      	adds	r7, #52	; 0x34
 8022dee:	46bd      	mov	sp, r7
 8022df0:	bd90      	pop	{r4, r7, pc}
	...

08022df4 <make_odither_array>:
 * distinct output values.
 */

LOCAL(ODITHER_MATRIX_PTR)
make_odither_array (j_decompress_ptr cinfo, int ncolors)
{
 8022df4:	b580      	push	{r7, lr}
 8022df6:	b088      	sub	sp, #32
 8022df8:	af00      	add	r7, sp, #0
 8022dfa:	6078      	str	r0, [r7, #4]
 8022dfc:	6039      	str	r1, [r7, #0]
  ODITHER_MATRIX_PTR odither;
  int j,k;
  INT32 num,den;

  odither = (ODITHER_MATRIX_PTR)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8022dfe:	687b      	ldr	r3, [r7, #4]
 8022e00:	685b      	ldr	r3, [r3, #4]
 8022e02:	681b      	ldr	r3, [r3, #0]
 8022e04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8022e08:	2101      	movs	r1, #1
 8022e0a:	6878      	ldr	r0, [r7, #4]
 8022e0c:	4798      	blx	r3
 8022e0e:	6178      	str	r0, [r7, #20]
  /* The inter-value distance for this color is MAXJSAMPLE/(ncolors-1).
   * Hence the dither value for the matrix cell with fill order f
   * (f=0..N-1) should be (N-1-2*f)/(2*N) * MAXJSAMPLE/(ncolors-1).
   * On 16-bit-int machine, be careful to avoid overflow.
   */
  den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
 8022e10:	683b      	ldr	r3, [r7, #0]
 8022e12:	3b01      	subs	r3, #1
 8022e14:	025b      	lsls	r3, r3, #9
 8022e16:	613b      	str	r3, [r7, #16]
  for (j = 0; j < ODITHER_SIZE; j++) {
 8022e18:	2300      	movs	r3, #0
 8022e1a:	61fb      	str	r3, [r7, #28]
 8022e1c:	e02e      	b.n	8022e7c <make_odither_array+0x88>
    for (k = 0; k < ODITHER_SIZE; k++) {
 8022e1e:	2300      	movs	r3, #0
 8022e20:	61bb      	str	r3, [r7, #24]
 8022e22:	e025      	b.n	8022e70 <make_odither_array+0x7c>
      num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 8022e24:	4a19      	ldr	r2, [pc, #100]	; (8022e8c <make_odither_array+0x98>)
 8022e26:	69fb      	ldr	r3, [r7, #28]
 8022e28:	011b      	lsls	r3, r3, #4
 8022e2a:	441a      	add	r2, r3
 8022e2c:	69bb      	ldr	r3, [r7, #24]
 8022e2e:	4413      	add	r3, r2
 8022e30:	781b      	ldrb	r3, [r3, #0]
 8022e32:	005b      	lsls	r3, r3, #1
 8022e34:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8022e38:	4613      	mov	r3, r2
 8022e3a:	021b      	lsls	r3, r3, #8
 8022e3c:	1a9b      	subs	r3, r3, r2
 8022e3e:	60fb      	str	r3, [r7, #12]
	    * MAXJSAMPLE;
      /* Ensure round towards zero despite C's lack of consistency
       * about rounding negative values in integer division...
       */
      odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
 8022e40:	68fb      	ldr	r3, [r7, #12]
 8022e42:	2b00      	cmp	r3, #0
 8022e44:	da06      	bge.n	8022e54 <make_odither_array+0x60>
 8022e46:	68fb      	ldr	r3, [r7, #12]
 8022e48:	425a      	negs	r2, r3
 8022e4a:	693b      	ldr	r3, [r7, #16]
 8022e4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e50:	425b      	negs	r3, r3
 8022e52:	e003      	b.n	8022e5c <make_odither_array+0x68>
 8022e54:	68fa      	ldr	r2, [r7, #12]
 8022e56:	693b      	ldr	r3, [r7, #16]
 8022e58:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e5c:	69fa      	ldr	r2, [r7, #28]
 8022e5e:	0192      	lsls	r2, r2, #6
 8022e60:	6979      	ldr	r1, [r7, #20]
 8022e62:	440a      	add	r2, r1
 8022e64:	69b9      	ldr	r1, [r7, #24]
 8022e66:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    for (k = 0; k < ODITHER_SIZE; k++) {
 8022e6a:	69bb      	ldr	r3, [r7, #24]
 8022e6c:	3301      	adds	r3, #1
 8022e6e:	61bb      	str	r3, [r7, #24]
 8022e70:	69bb      	ldr	r3, [r7, #24]
 8022e72:	2b0f      	cmp	r3, #15
 8022e74:	ddd6      	ble.n	8022e24 <make_odither_array+0x30>
  for (j = 0; j < ODITHER_SIZE; j++) {
 8022e76:	69fb      	ldr	r3, [r7, #28]
 8022e78:	3301      	adds	r3, #1
 8022e7a:	61fb      	str	r3, [r7, #28]
 8022e7c:	69fb      	ldr	r3, [r7, #28]
 8022e7e:	2b0f      	cmp	r3, #15
 8022e80:	ddcd      	ble.n	8022e1e <make_odither_array+0x2a>
    }
  }
  return odither;
 8022e82:	697b      	ldr	r3, [r7, #20]
}
 8022e84:	4618      	mov	r0, r3
 8022e86:	3720      	adds	r7, #32
 8022e88:	46bd      	mov	sp, r7
 8022e8a:	bd80      	pop	{r7, pc}
 8022e8c:	0802750c 	.word	0x0802750c

08022e90 <create_odither_tables>:
 * share a dither table.
 */

LOCAL(void)
create_odither_tables (j_decompress_ptr cinfo)
{
 8022e90:	b580      	push	{r7, lr}
 8022e92:	b088      	sub	sp, #32
 8022e94:	af00      	add	r7, sp, #0
 8022e96:	6078      	str	r0, [r7, #4]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8022e98:	687b      	ldr	r3, [r7, #4]
 8022e9a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8022e9e:	613b      	str	r3, [r7, #16]
  ODITHER_MATRIX_PTR odither;
  int i, j, nci;

  for (i = 0; i < cinfo->out_color_components; i++) {
 8022ea0:	2300      	movs	r3, #0
 8022ea2:	61bb      	str	r3, [r7, #24]
 8022ea4:	e033      	b.n	8022f0e <create_odither_tables+0x7e>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8022ea6:	693b      	ldr	r3, [r7, #16]
 8022ea8:	69ba      	ldr	r2, [r7, #24]
 8022eaa:	3208      	adds	r2, #8
 8022eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022eb0:	60fb      	str	r3, [r7, #12]
    odither = NULL;		/* search for matching prior component */
 8022eb2:	2300      	movs	r3, #0
 8022eb4:	61fb      	str	r3, [r7, #28]
    for (j = 0; j < i; j++) {
 8022eb6:	2300      	movs	r3, #0
 8022eb8:	617b      	str	r3, [r7, #20]
 8022eba:	e012      	b.n	8022ee2 <create_odither_tables+0x52>
      if (nci == cquantize->Ncolors[j]) {
 8022ebc:	693b      	ldr	r3, [r7, #16]
 8022ebe:	697a      	ldr	r2, [r7, #20]
 8022ec0:	3208      	adds	r2, #8
 8022ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022ec6:	68fa      	ldr	r2, [r7, #12]
 8022ec8:	429a      	cmp	r2, r3
 8022eca:	d107      	bne.n	8022edc <create_odither_tables+0x4c>
	odither = cquantize->odither[j];
 8022ecc:	693a      	ldr	r2, [r7, #16]
 8022ece:	697b      	ldr	r3, [r7, #20]
 8022ed0:	330c      	adds	r3, #12
 8022ed2:	009b      	lsls	r3, r3, #2
 8022ed4:	4413      	add	r3, r2
 8022ed6:	685b      	ldr	r3, [r3, #4]
 8022ed8:	61fb      	str	r3, [r7, #28]
	break;
 8022eda:	e006      	b.n	8022eea <create_odither_tables+0x5a>
    for (j = 0; j < i; j++) {
 8022edc:	697b      	ldr	r3, [r7, #20]
 8022ede:	3301      	adds	r3, #1
 8022ee0:	617b      	str	r3, [r7, #20]
 8022ee2:	697a      	ldr	r2, [r7, #20]
 8022ee4:	69bb      	ldr	r3, [r7, #24]
 8022ee6:	429a      	cmp	r2, r3
 8022ee8:	dbe8      	blt.n	8022ebc <create_odither_tables+0x2c>
      }
    }
    if (odither == NULL)	/* need a new table? */
 8022eea:	69fb      	ldr	r3, [r7, #28]
 8022eec:	2b00      	cmp	r3, #0
 8022eee:	d104      	bne.n	8022efa <create_odither_tables+0x6a>
      odither = make_odither_array(cinfo, nci);
 8022ef0:	68f9      	ldr	r1, [r7, #12]
 8022ef2:	6878      	ldr	r0, [r7, #4]
 8022ef4:	f7ff ff7e 	bl	8022df4 <make_odither_array>
 8022ef8:	61f8      	str	r0, [r7, #28]
    cquantize->odither[i] = odither;
 8022efa:	693a      	ldr	r2, [r7, #16]
 8022efc:	69bb      	ldr	r3, [r7, #24]
 8022efe:	330c      	adds	r3, #12
 8022f00:	009b      	lsls	r3, r3, #2
 8022f02:	4413      	add	r3, r2
 8022f04:	69fa      	ldr	r2, [r7, #28]
 8022f06:	605a      	str	r2, [r3, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8022f08:	69bb      	ldr	r3, [r7, #24]
 8022f0a:	3301      	adds	r3, #1
 8022f0c:	61bb      	str	r3, [r7, #24]
 8022f0e:	687b      	ldr	r3, [r7, #4]
 8022f10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8022f12:	69ba      	ldr	r2, [r7, #24]
 8022f14:	429a      	cmp	r2, r3
 8022f16:	dbc6      	blt.n	8022ea6 <create_odither_tables+0x16>
  }
}
 8022f18:	bf00      	nop
 8022f1a:	bf00      	nop
 8022f1c:	3720      	adds	r7, #32
 8022f1e:	46bd      	mov	sp, r7
 8022f20:	bd80      	pop	{r7, pc}

08022f22 <color_quantize>:

METHODDEF(void)
color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		JSAMPARRAY output_buf, int num_rows)
/* General case, no dithering */
{
 8022f22:	b4f0      	push	{r4, r5, r6, r7}
 8022f24:	b08a      	sub	sp, #40	; 0x28
 8022f26:	af00      	add	r7, sp, #0
 8022f28:	60f8      	str	r0, [r7, #12]
 8022f2a:	60b9      	str	r1, [r7, #8]
 8022f2c:	607a      	str	r2, [r7, #4]
 8022f2e:	603b      	str	r3, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8022f30:	68fb      	ldr	r3, [r7, #12]
 8022f32:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8022f36:	61fb      	str	r3, [r7, #28]
  JSAMPARRAY colorindex = cquantize->colorindex;
 8022f38:	69fb      	ldr	r3, [r7, #28]
 8022f3a:	699b      	ldr	r3, [r3, #24]
 8022f3c:	61bb      	str	r3, [r7, #24]
  register int pixcode, ci;
  register JSAMPROW ptrin, ptrout;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 8022f3e:	68fb      	ldr	r3, [r7, #12]
 8022f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022f42:	617b      	str	r3, [r7, #20]
  register int nc = cinfo->out_color_components;
 8022f44:	68fb      	ldr	r3, [r7, #12]
 8022f46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8022f48:	4618      	mov	r0, r3

  for (row = 0; row < num_rows; row++) {
 8022f4a:	2300      	movs	r3, #0
 8022f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8022f4e:	e02d      	b.n	8022fac <color_quantize+0x8a>
    ptrin = input_buf[row];
 8022f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022f52:	009b      	lsls	r3, r3, #2
 8022f54:	68ba      	ldr	r2, [r7, #8]
 8022f56:	4413      	add	r3, r2
 8022f58:	681e      	ldr	r6, [r3, #0]
    ptrout = output_buf[row];
 8022f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022f5c:	009b      	lsls	r3, r3, #2
 8022f5e:	687a      	ldr	r2, [r7, #4]
 8022f60:	4413      	add	r3, r2
 8022f62:	681b      	ldr	r3, [r3, #0]
 8022f64:	4619      	mov	r1, r3
    for (col = width; col > 0; col--) {
 8022f66:	697b      	ldr	r3, [r7, #20]
 8022f68:	623b      	str	r3, [r7, #32]
 8022f6a:	e019      	b.n	8022fa0 <color_quantize+0x7e>
      pixcode = 0;
 8022f6c:	2500      	movs	r5, #0
      for (ci = 0; ci < nc; ci++) {
 8022f6e:	2400      	movs	r4, #0
 8022f70:	e00b      	b.n	8022f8a <color_quantize+0x68>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 8022f72:	4623      	mov	r3, r4
 8022f74:	009b      	lsls	r3, r3, #2
 8022f76:	69ba      	ldr	r2, [r7, #24]
 8022f78:	4413      	add	r3, r2
 8022f7a:	681a      	ldr	r2, [r3, #0]
 8022f7c:	4633      	mov	r3, r6
 8022f7e:	1c5e      	adds	r6, r3, #1
 8022f80:	781b      	ldrb	r3, [r3, #0]
 8022f82:	4413      	add	r3, r2
 8022f84:	781b      	ldrb	r3, [r3, #0]
 8022f86:	441d      	add	r5, r3
      for (ci = 0; ci < nc; ci++) {
 8022f88:	3401      	adds	r4, #1
 8022f8a:	4603      	mov	r3, r0
 8022f8c:	429c      	cmp	r4, r3
 8022f8e:	dbf0      	blt.n	8022f72 <color_quantize+0x50>
      }
      *ptrout++ = (JSAMPLE) pixcode;
 8022f90:	460b      	mov	r3, r1
 8022f92:	1c5a      	adds	r2, r3, #1
 8022f94:	4611      	mov	r1, r2
 8022f96:	b2ea      	uxtb	r2, r5
 8022f98:	701a      	strb	r2, [r3, #0]
    for (col = width; col > 0; col--) {
 8022f9a:	6a3b      	ldr	r3, [r7, #32]
 8022f9c:	3b01      	subs	r3, #1
 8022f9e:	623b      	str	r3, [r7, #32]
 8022fa0:	6a3b      	ldr	r3, [r7, #32]
 8022fa2:	2b00      	cmp	r3, #0
 8022fa4:	d1e2      	bne.n	8022f6c <color_quantize+0x4a>
  for (row = 0; row < num_rows; row++) {
 8022fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022fa8:	3301      	adds	r3, #1
 8022faa:	627b      	str	r3, [r7, #36]	; 0x24
 8022fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022fae:	683b      	ldr	r3, [r7, #0]
 8022fb0:	429a      	cmp	r2, r3
 8022fb2:	dbcd      	blt.n	8022f50 <color_quantize+0x2e>
    }
  }
}
 8022fb4:	bf00      	nop
 8022fb6:	bf00      	nop
 8022fb8:	3728      	adds	r7, #40	; 0x28
 8022fba:	46bd      	mov	sp, r7
 8022fbc:	bcf0      	pop	{r4, r5, r6, r7}
 8022fbe:	4770      	bx	lr

08022fc0 <color_quantize3>:

METHODDEF(void)
color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		 JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, no dithering */
{
 8022fc0:	b4f0      	push	{r4, r5, r6, r7}
 8022fc2:	b08c      	sub	sp, #48	; 0x30
 8022fc4:	af00      	add	r7, sp, #0
 8022fc6:	60f8      	str	r0, [r7, #12]
 8022fc8:	60b9      	str	r1, [r7, #8]
 8022fca:	607a      	str	r2, [r7, #4]
 8022fcc:	603b      	str	r3, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8022fce:	68fb      	ldr	r3, [r7, #12]
 8022fd0:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8022fd4:	627b      	str	r3, [r7, #36]	; 0x24
  register int pixcode;
  register JSAMPROW ptrin, ptrout;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8022fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022fd8:	699b      	ldr	r3, [r3, #24]
 8022fda:	681b      	ldr	r3, [r3, #0]
 8022fdc:	623b      	str	r3, [r7, #32]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 8022fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022fe0:	699b      	ldr	r3, [r3, #24]
 8022fe2:	685b      	ldr	r3, [r3, #4]
 8022fe4:	61fb      	str	r3, [r7, #28]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8022fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022fe8:	699b      	ldr	r3, [r3, #24]
 8022fea:	689b      	ldr	r3, [r3, #8]
 8022fec:	61bb      	str	r3, [r7, #24]
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 8022fee:	68fb      	ldr	r3, [r7, #12]
 8022ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022ff2:	617b      	str	r3, [r7, #20]

  for (row = 0; row < num_rows; row++) {
 8022ff4:	2300      	movs	r3, #0
 8022ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022ff8:	e031      	b.n	802305e <color_quantize3+0x9e>
    ptrin = input_buf[row];
 8022ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022ffc:	009b      	lsls	r3, r3, #2
 8022ffe:	68ba      	ldr	r2, [r7, #8]
 8023000:	4413      	add	r3, r2
 8023002:	681c      	ldr	r4, [r3, #0]
    ptrout = output_buf[row];
 8023004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023006:	009b      	lsls	r3, r3, #2
 8023008:	687a      	ldr	r2, [r7, #4]
 802300a:	4413      	add	r3, r2
 802300c:	681e      	ldr	r6, [r3, #0]
    for (col = width; col > 0; col--) {
 802300e:	697b      	ldr	r3, [r7, #20]
 8023010:	62bb      	str	r3, [r7, #40]	; 0x28
 8023012:	e01e      	b.n	8023052 <color_quantize3+0x92>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 8023014:	4623      	mov	r3, r4
 8023016:	1c5c      	adds	r4, r3, #1
 8023018:	781b      	ldrb	r3, [r3, #0]
 802301a:	461a      	mov	r2, r3
 802301c:	6a3b      	ldr	r3, [r7, #32]
 802301e:	4413      	add	r3, r2
 8023020:	781b      	ldrb	r3, [r3, #0]
 8023022:	461d      	mov	r5, r3
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 8023024:	4623      	mov	r3, r4
 8023026:	1c5c      	adds	r4, r3, #1
 8023028:	781b      	ldrb	r3, [r3, #0]
 802302a:	461a      	mov	r2, r3
 802302c:	69fb      	ldr	r3, [r7, #28]
 802302e:	4413      	add	r3, r2
 8023030:	781b      	ldrb	r3, [r3, #0]
 8023032:	441d      	add	r5, r3
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
 8023034:	4623      	mov	r3, r4
 8023036:	1c5c      	adds	r4, r3, #1
 8023038:	781b      	ldrb	r3, [r3, #0]
 802303a:	461a      	mov	r2, r3
 802303c:	69bb      	ldr	r3, [r7, #24]
 802303e:	4413      	add	r3, r2
 8023040:	781b      	ldrb	r3, [r3, #0]
 8023042:	441d      	add	r5, r3
      *ptrout++ = (JSAMPLE) pixcode;
 8023044:	4633      	mov	r3, r6
 8023046:	1c5e      	adds	r6, r3, #1
 8023048:	b2ea      	uxtb	r2, r5
 802304a:	701a      	strb	r2, [r3, #0]
    for (col = width; col > 0; col--) {
 802304c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802304e:	3b01      	subs	r3, #1
 8023050:	62bb      	str	r3, [r7, #40]	; 0x28
 8023052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023054:	2b00      	cmp	r3, #0
 8023056:	d1dd      	bne.n	8023014 <color_quantize3+0x54>
  for (row = 0; row < num_rows; row++) {
 8023058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802305a:	3301      	adds	r3, #1
 802305c:	62fb      	str	r3, [r7, #44]	; 0x2c
 802305e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023060:	683b      	ldr	r3, [r7, #0]
 8023062:	429a      	cmp	r2, r3
 8023064:	dbc9      	blt.n	8022ffa <color_quantize3+0x3a>
    }
  }
}
 8023066:	bf00      	nop
 8023068:	bf00      	nop
 802306a:	3730      	adds	r7, #48	; 0x30
 802306c:	46bd      	mov	sp, r7
 802306e:	bcf0      	pop	{r4, r5, r6, r7}
 8023070:	4770      	bx	lr

08023072 <quantize_ord_dither>:

METHODDEF(void)
quantize_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		     JSAMPARRAY output_buf, int num_rows)
/* General case, with ordered dithering */
{
 8023072:	b5b0      	push	{r4, r5, r7, lr}
 8023074:	b08e      	sub	sp, #56	; 0x38
 8023076:	af00      	add	r7, sp, #0
 8023078:	60f8      	str	r0, [r7, #12]
 802307a:	60b9      	str	r1, [r7, #8]
 802307c:	607a      	str	r2, [r7, #4]
 802307e:	603b      	str	r3, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8023080:	68fb      	ldr	r3, [r7, #12]
 8023082:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8023086:	627b      	str	r3, [r7, #36]	; 0x24
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex_ci;
  int * dither;			/* points to active row of dither matrix */
  int row_index, col_index;	/* current indexes into dither matrix */
  int nc = cinfo->out_color_components;
 8023088:	68fb      	ldr	r3, [r7, #12]
 802308a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 802308c:	623b      	str	r3, [r7, #32]
  int ci;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 802308e:	68fb      	ldr	r3, [r7, #12]
 8023090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023092:	61fb      	str	r3, [r7, #28]

  for (row = 0; row < num_rows; row++) {
 8023094:	2300      	movs	r3, #0
 8023096:	62fb      	str	r3, [r7, #44]	; 0x2c
 8023098:	e061      	b.n	802315e <quantize_ord_dither+0xec>
    /* Initialize output values to 0 so can process components separately */
    FMEMZERO((void FAR *) output_buf[row],
 802309a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802309c:	009b      	lsls	r3, r3, #2
 802309e:	687a      	ldr	r2, [r7, #4]
 80230a0:	4413      	add	r3, r2
 80230a2:	681b      	ldr	r3, [r3, #0]
 80230a4:	69fa      	ldr	r2, [r7, #28]
 80230a6:	2100      	movs	r1, #0
 80230a8:	4618      	mov	r0, r3
 80230aa:	f001 ff5d 	bl	8024f68 <memset>
	     (size_t) (width * SIZEOF(JSAMPLE)));
    row_index = cquantize->row_index;
 80230ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80230b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80230b2:	61bb      	str	r3, [r7, #24]
    for (ci = 0; ci < nc; ci++) {
 80230b4:	2300      	movs	r3, #0
 80230b6:	633b      	str	r3, [r7, #48]	; 0x30
 80230b8:	e042      	b.n	8023140 <quantize_ord_dither+0xce>
      input_ptr = input_buf[row] + ci;
 80230ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80230bc:	009b      	lsls	r3, r3, #2
 80230be:	68ba      	ldr	r2, [r7, #8]
 80230c0:	4413      	add	r3, r2
 80230c2:	681a      	ldr	r2, [r3, #0]
 80230c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80230c6:	18d5      	adds	r5, r2, r3
      output_ptr = output_buf[row];
 80230c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80230ca:	009b      	lsls	r3, r3, #2
 80230cc:	687a      	ldr	r2, [r7, #4]
 80230ce:	4413      	add	r3, r2
 80230d0:	681c      	ldr	r4, [r3, #0]
      colorindex_ci = cquantize->colorindex[ci];
 80230d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80230d4:	699a      	ldr	r2, [r3, #24]
 80230d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80230d8:	009b      	lsls	r3, r3, #2
 80230da:	4413      	add	r3, r2
 80230dc:	681b      	ldr	r3, [r3, #0]
 80230de:	617b      	str	r3, [r7, #20]
      dither = cquantize->odither[ci][row_index];
 80230e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80230e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80230e4:	330c      	adds	r3, #12
 80230e6:	009b      	lsls	r3, r3, #2
 80230e8:	4413      	add	r3, r2
 80230ea:	685a      	ldr	r2, [r3, #4]
 80230ec:	69bb      	ldr	r3, [r7, #24]
 80230ee:	019b      	lsls	r3, r3, #6
 80230f0:	4413      	add	r3, r2
 80230f2:	613b      	str	r3, [r7, #16]
      col_index = 0;
 80230f4:	2300      	movs	r3, #0
 80230f6:	637b      	str	r3, [r7, #52]	; 0x34

      for (col = width; col > 0; col--) {
 80230f8:	69fb      	ldr	r3, [r7, #28]
 80230fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80230fc:	e01a      	b.n	8023134 <quantize_ord_dither+0xc2>
	 * Range-limiting need not be done explicitly, as we have extended
	 * the colorindex table to produce the right answers for out-of-range
	 * inputs.  The maximum dither is +- MAXJSAMPLE; this sets the
	 * required amount of padding.
	 */
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 80230fe:	7822      	ldrb	r2, [r4, #0]
 8023100:	782b      	ldrb	r3, [r5, #0]
 8023102:	4618      	mov	r0, r3
 8023104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023106:	009b      	lsls	r3, r3, #2
 8023108:	6939      	ldr	r1, [r7, #16]
 802310a:	440b      	add	r3, r1
 802310c:	681b      	ldr	r3, [r3, #0]
 802310e:	4403      	add	r3, r0
 8023110:	4619      	mov	r1, r3
 8023112:	697b      	ldr	r3, [r7, #20]
 8023114:	440b      	add	r3, r1
 8023116:	781b      	ldrb	r3, [r3, #0]
 8023118:	4413      	add	r3, r2
 802311a:	b2db      	uxtb	r3, r3
 802311c:	7023      	strb	r3, [r4, #0]
	input_ptr += nc;
 802311e:	6a3b      	ldr	r3, [r7, #32]
 8023120:	441d      	add	r5, r3
	output_ptr++;
 8023122:	3401      	adds	r4, #1
	col_index = (col_index + 1) & ODITHER_MASK;
 8023124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023126:	3301      	adds	r3, #1
 8023128:	f003 030f 	and.w	r3, r3, #15
 802312c:	637b      	str	r3, [r7, #52]	; 0x34
      for (col = width; col > 0; col--) {
 802312e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023130:	3b01      	subs	r3, #1
 8023132:	62bb      	str	r3, [r7, #40]	; 0x28
 8023134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023136:	2b00      	cmp	r3, #0
 8023138:	d1e1      	bne.n	80230fe <quantize_ord_dither+0x8c>
    for (ci = 0; ci < nc; ci++) {
 802313a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802313c:	3301      	adds	r3, #1
 802313e:	633b      	str	r3, [r7, #48]	; 0x30
 8023140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023142:	6a3b      	ldr	r3, [r7, #32]
 8023144:	429a      	cmp	r2, r3
 8023146:	dbb8      	blt.n	80230ba <quantize_ord_dither+0x48>
      }
    }
    /* Advance row index for next row */
    row_index = (row_index + 1) & ODITHER_MASK;
 8023148:	69bb      	ldr	r3, [r7, #24]
 802314a:	3301      	adds	r3, #1
 802314c:	f003 030f 	and.w	r3, r3, #15
 8023150:	61bb      	str	r3, [r7, #24]
    cquantize->row_index = row_index;
 8023152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023154:	69ba      	ldr	r2, [r7, #24]
 8023156:	631a      	str	r2, [r3, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 8023158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802315a:	3301      	adds	r3, #1
 802315c:	62fb      	str	r3, [r7, #44]	; 0x2c
 802315e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023160:	683b      	ldr	r3, [r7, #0]
 8023162:	429a      	cmp	r2, r3
 8023164:	db99      	blt.n	802309a <quantize_ord_dither+0x28>
  }
}
 8023166:	bf00      	nop
 8023168:	bf00      	nop
 802316a:	3738      	adds	r7, #56	; 0x38
 802316c:	46bd      	mov	sp, r7
 802316e:	bdb0      	pop	{r4, r5, r7, pc}

08023170 <quantize3_ord_dither>:

METHODDEF(void)
quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		      JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, with ordered dithering */
{
 8023170:	b4f0      	push	{r4, r5, r6, r7}
 8023172:	b090      	sub	sp, #64	; 0x40
 8023174:	af00      	add	r7, sp, #0
 8023176:	60f8      	str	r0, [r7, #12]
 8023178:	60b9      	str	r1, [r7, #8]
 802317a:	607a      	str	r2, [r7, #4]
 802317c:	603b      	str	r3, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 802317e:	68fb      	ldr	r3, [r7, #12]
 8023180:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8023184:	633b      	str	r3, [r7, #48]	; 0x30
  register int pixcode;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8023186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023188:	699b      	ldr	r3, [r3, #24]
 802318a:	681b      	ldr	r3, [r3, #0]
 802318c:	62fb      	str	r3, [r7, #44]	; 0x2c
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 802318e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023190:	699b      	ldr	r3, [r3, #24]
 8023192:	685b      	ldr	r3, [r3, #4]
 8023194:	62bb      	str	r3, [r7, #40]	; 0x28
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8023196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023198:	699b      	ldr	r3, [r3, #24]
 802319a:	689b      	ldr	r3, [r3, #8]
 802319c:	627b      	str	r3, [r7, #36]	; 0x24
  int * dither1;
  int * dither2;
  int row_index, col_index;	/* current indexes into dither matrix */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 802319e:	68fb      	ldr	r3, [r7, #12]
 80231a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80231a2:	623b      	str	r3, [r7, #32]

  for (row = 0; row < num_rows; row++) {
 80231a4:	2300      	movs	r3, #0
 80231a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80231a8:	e06a      	b.n	8023280 <quantize3_ord_dither+0x110>
    row_index = cquantize->row_index;
 80231aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80231ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80231ae:	61fb      	str	r3, [r7, #28]
    input_ptr = input_buf[row];
 80231b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80231b2:	009b      	lsls	r3, r3, #2
 80231b4:	68ba      	ldr	r2, [r7, #8]
 80231b6:	4413      	add	r3, r2
 80231b8:	681c      	ldr	r4, [r3, #0]
    output_ptr = output_buf[row];
 80231ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80231bc:	009b      	lsls	r3, r3, #2
 80231be:	687a      	ldr	r2, [r7, #4]
 80231c0:	4413      	add	r3, r2
 80231c2:	681e      	ldr	r6, [r3, #0]
    dither0 = cquantize->odither[0][row_index];
 80231c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80231c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80231c8:	69fb      	ldr	r3, [r7, #28]
 80231ca:	019b      	lsls	r3, r3, #6
 80231cc:	4413      	add	r3, r2
 80231ce:	61bb      	str	r3, [r7, #24]
    dither1 = cquantize->odither[1][row_index];
 80231d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80231d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80231d4:	69fb      	ldr	r3, [r7, #28]
 80231d6:	019b      	lsls	r3, r3, #6
 80231d8:	4413      	add	r3, r2
 80231da:	617b      	str	r3, [r7, #20]
    dither2 = cquantize->odither[2][row_index];
 80231dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80231de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80231e0:	69fb      	ldr	r3, [r7, #28]
 80231e2:	019b      	lsls	r3, r3, #6
 80231e4:	4413      	add	r3, r2
 80231e6:	613b      	str	r3, [r7, #16]
    col_index = 0;
 80231e8:	2300      	movs	r3, #0
 80231ea:	63fb      	str	r3, [r7, #60]	; 0x3c

    for (col = width; col > 0; col--) {
 80231ec:	6a3b      	ldr	r3, [r7, #32]
 80231ee:	637b      	str	r3, [r7, #52]	; 0x34
 80231f0:	e038      	b.n	8023264 <quantize3_ord_dither+0xf4>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 80231f2:	4623      	mov	r3, r4
 80231f4:	1c5c      	adds	r4, r3, #1
 80231f6:	781b      	ldrb	r3, [r3, #0]
 80231f8:	4619      	mov	r1, r3
 80231fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80231fc:	009b      	lsls	r3, r3, #2
 80231fe:	69ba      	ldr	r2, [r7, #24]
 8023200:	4413      	add	r3, r2
 8023202:	681b      	ldr	r3, [r3, #0]
 8023204:	440b      	add	r3, r1
 8023206:	461a      	mov	r2, r3
 8023208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802320a:	4413      	add	r3, r2
 802320c:	781b      	ldrb	r3, [r3, #0]
 802320e:	461d      	mov	r5, r3
					dither0[col_index]]);
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8023210:	4623      	mov	r3, r4
 8023212:	1c5c      	adds	r4, r3, #1
 8023214:	781b      	ldrb	r3, [r3, #0]
 8023216:	4619      	mov	r1, r3
 8023218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802321a:	009b      	lsls	r3, r3, #2
 802321c:	697a      	ldr	r2, [r7, #20]
 802321e:	4413      	add	r3, r2
 8023220:	681b      	ldr	r3, [r3, #0]
 8023222:	440b      	add	r3, r1
 8023224:	461a      	mov	r2, r3
 8023226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023228:	4413      	add	r3, r2
 802322a:	781b      	ldrb	r3, [r3, #0]
 802322c:	441d      	add	r5, r3
					dither1[col_index]]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 802322e:	4623      	mov	r3, r4
 8023230:	1c5c      	adds	r4, r3, #1
 8023232:	781b      	ldrb	r3, [r3, #0]
 8023234:	4619      	mov	r1, r3
 8023236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023238:	009b      	lsls	r3, r3, #2
 802323a:	693a      	ldr	r2, [r7, #16]
 802323c:	4413      	add	r3, r2
 802323e:	681b      	ldr	r3, [r3, #0]
 8023240:	440b      	add	r3, r1
 8023242:	461a      	mov	r2, r3
 8023244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023246:	4413      	add	r3, r2
 8023248:	781b      	ldrb	r3, [r3, #0]
 802324a:	441d      	add	r5, r3
					dither2[col_index]]);
      *output_ptr++ = (JSAMPLE) pixcode;
 802324c:	4633      	mov	r3, r6
 802324e:	1c5e      	adds	r6, r3, #1
 8023250:	b2ea      	uxtb	r2, r5
 8023252:	701a      	strb	r2, [r3, #0]
      col_index = (col_index + 1) & ODITHER_MASK;
 8023254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023256:	3301      	adds	r3, #1
 8023258:	f003 030f 	and.w	r3, r3, #15
 802325c:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (col = width; col > 0; col--) {
 802325e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023260:	3b01      	subs	r3, #1
 8023262:	637b      	str	r3, [r7, #52]	; 0x34
 8023264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023266:	2b00      	cmp	r3, #0
 8023268:	d1c3      	bne.n	80231f2 <quantize3_ord_dither+0x82>
    }
    row_index = (row_index + 1) & ODITHER_MASK;
 802326a:	69fb      	ldr	r3, [r7, #28]
 802326c:	3301      	adds	r3, #1
 802326e:	f003 030f 	and.w	r3, r3, #15
 8023272:	61fb      	str	r3, [r7, #28]
    cquantize->row_index = row_index;
 8023274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023276:	69fa      	ldr	r2, [r7, #28]
 8023278:	631a      	str	r2, [r3, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 802327a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802327c:	3301      	adds	r3, #1
 802327e:	63bb      	str	r3, [r7, #56]	; 0x38
 8023280:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8023282:	683b      	ldr	r3, [r7, #0]
 8023284:	429a      	cmp	r2, r3
 8023286:	db90      	blt.n	80231aa <quantize3_ord_dither+0x3a>
  }
}
 8023288:	bf00      	nop
 802328a:	bf00      	nop
 802328c:	3740      	adds	r7, #64	; 0x40
 802328e:	46bd      	mov	sp, r7
 8023290:	bcf0      	pop	{r4, r5, r6, r7}
 8023292:	4770      	bx	lr

08023294 <quantize_fs_dither>:

METHODDEF(void)
quantize_fs_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		    JSAMPARRAY output_buf, int num_rows)
/* General case, with Floyd-Steinberg dithering */
{
 8023294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023298:	b094      	sub	sp, #80	; 0x50
 802329a:	af00      	add	r7, sp, #0
 802329c:	60f8      	str	r0, [r7, #12]
 802329e:	60b9      	str	r1, [r7, #8]
 80232a0:	607a      	str	r2, [r7, #4]
 80232a2:	603b      	str	r3, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80232a4:	68fb      	ldr	r3, [r7, #12]
 80232a6:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80232aa:	633b      	str	r3, [r7, #48]	; 0x30
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex_ci;
  JSAMPROW colormap_ci;
  int pixcode;
  int nc = cinfo->out_color_components;
 80232ac:	68fb      	ldr	r3, [r7, #12]
 80232ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80232b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  int dir;			/* 1 for left-to-right, -1 for right-to-left */
  int dirnc;			/* dir * nc */
  int ci;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 80232b2:	68fb      	ldr	r3, [r7, #12]
 80232b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80232b6:	62bb      	str	r3, [r7, #40]	; 0x28
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 80232b8:	68fb      	ldr	r3, [r7, #12]
 80232ba:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80232be:	627b      	str	r3, [r7, #36]	; 0x24
  SHIFT_TEMPS

  for (row = 0; row < num_rows; row++) {
 80232c0:	2300      	movs	r3, #0
 80232c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80232c4:	e0b1      	b.n	802342a <quantize_fs_dither+0x196>
    /* Initialize output values to 0 so can process components separately */
    FMEMZERO((void FAR *) output_buf[row],
 80232c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80232c8:	009b      	lsls	r3, r3, #2
 80232ca:	687a      	ldr	r2, [r7, #4]
 80232cc:	4413      	add	r3, r2
 80232ce:	681b      	ldr	r3, [r3, #0]
 80232d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80232d2:	2100      	movs	r1, #0
 80232d4:	4618      	mov	r0, r3
 80232d6:	f001 fe47 	bl	8024f68 <memset>
	     (size_t) (width * SIZEOF(JSAMPLE)));
    for (ci = 0; ci < nc; ci++) {
 80232da:	2300      	movs	r3, #0
 80232dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80232de:	e092      	b.n	8023406 <quantize_fs_dither+0x172>
      input_ptr = input_buf[row] + ci;
 80232e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80232e2:	009b      	lsls	r3, r3, #2
 80232e4:	68ba      	ldr	r2, [r7, #8]
 80232e6:	4413      	add	r3, r2
 80232e8:	681a      	ldr	r2, [r3, #0]
 80232ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80232ec:	eb02 0803 	add.w	r8, r2, r3
      output_ptr = output_buf[row];
 80232f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80232f2:	009b      	lsls	r3, r3, #2
 80232f4:	687a      	ldr	r2, [r7, #4]
 80232f6:	4413      	add	r3, r2
 80232f8:	681e      	ldr	r6, [r3, #0]
      if (cquantize->on_odd_row) {
 80232fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80232fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80232fe:	2b00      	cmp	r3, #0
 8023300:	d019      	beq.n	8023336 <quantize_fs_dither+0xa2>
	/* work right to left in this row */
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 8023302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023304:	3b01      	subs	r3, #1
 8023306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023308:	fb02 f303 	mul.w	r3, r2, r3
 802330c:	4498      	add	r8, r3
	output_ptr += width-1;
 802330e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023310:	3b01      	subs	r3, #1
 8023312:	441e      	add	r6, r3
	dir = -1;
 8023314:	f04f 33ff 	mov.w	r3, #4294967295
 8023318:	647b      	str	r3, [r7, #68]	; 0x44
	dirnc = -nc;
 802331a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802331c:	425b      	negs	r3, r3
 802331e:	643b      	str	r3, [r7, #64]	; 0x40
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8023320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023324:	3310      	adds	r3, #16
 8023326:	009b      	lsls	r3, r3, #2
 8023328:	4413      	add	r3, r2
 802332a:	685a      	ldr	r2, [r3, #4]
 802332c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802332e:	3301      	adds	r3, #1
 8023330:	005b      	lsls	r3, r3, #1
 8023332:	18d5      	adds	r5, r2, r3
 8023334:	e009      	b.n	802334a <quantize_fs_dither+0xb6>
      } else {
	/* work left to right in this row */
	dir = 1;
 8023336:	2301      	movs	r3, #1
 8023338:	647b      	str	r3, [r7, #68]	; 0x44
	dirnc = nc;
 802333a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802333c:	643b      	str	r3, [r7, #64]	; 0x40
	errorptr = cquantize->fserrors[ci]; /* => entry before first column */
 802333e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023342:	3310      	adds	r3, #16
 8023344:	009b      	lsls	r3, r3, #2
 8023346:	4413      	add	r3, r2
 8023348:	685d      	ldr	r5, [r3, #4]
      }
      colorindex_ci = cquantize->colorindex[ci];
 802334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802334c:	699a      	ldr	r2, [r3, #24]
 802334e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023350:	009b      	lsls	r3, r3, #2
 8023352:	4413      	add	r3, r2
 8023354:	681b      	ldr	r3, [r3, #0]
 8023356:	623b      	str	r3, [r7, #32]
      colormap_ci = cquantize->sv_colormap[ci];
 8023358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802335a:	691a      	ldr	r2, [r3, #16]
 802335c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802335e:	009b      	lsls	r3, r3, #2
 8023360:	4413      	add	r3, r2
 8023362:	681b      	ldr	r3, [r3, #0]
 8023364:	61fb      	str	r3, [r7, #28]
      /* Preset error values: no error propagated to first pixel from left */
      cur = 0;
 8023366:	2400      	movs	r4, #0
      /* and no error propagated to row below yet */
      belowerr = bpreverr = 0;
 8023368:	2300      	movs	r3, #0
 802336a:	64bb      	str	r3, [r7, #72]	; 0x48
 802336c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802336e:	64fb      	str	r3, [r7, #76]	; 0x4c

      for (col = width; col > 0; col--) {
 8023370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023372:	637b      	str	r3, [r7, #52]	; 0x34
 8023374:	e03e      	b.n	80233f4 <quantize_fs_dither+0x160>
	 * round the error term (which is expressed * 16) to an integer.
	 * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct
	 * for either sign of the error value.
	 * Note: errorptr points to *previous* column's array entry.
	 */
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8023376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023378:	005b      	lsls	r3, r3, #1
 802337a:	442b      	add	r3, r5
 802337c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8023380:	4423      	add	r3, r4
 8023382:	3308      	adds	r3, #8
 8023384:	111c      	asrs	r4, r3, #4
	/* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
	 * The maximum error is +- MAXJSAMPLE; this sets the required size
	 * of the range_limit array.
	 */
	cur += GETJSAMPLE(*input_ptr);
 8023386:	f898 3000 	ldrb.w	r3, [r8]
 802338a:	441c      	add	r4, r3
	cur = GETJSAMPLE(range_limit[cur]);
 802338c:	4622      	mov	r2, r4
 802338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023390:	4413      	add	r3, r2
 8023392:	781b      	ldrb	r3, [r3, #0]
 8023394:	461c      	mov	r4, r3
	/* Select output value, accumulate into output code for this pixel */
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8023396:	4622      	mov	r2, r4
 8023398:	6a3b      	ldr	r3, [r7, #32]
 802339a:	4413      	add	r3, r2
 802339c:	781b      	ldrb	r3, [r3, #0]
 802339e:	61bb      	str	r3, [r7, #24]
	*output_ptr += (JSAMPLE) pixcode;
 80233a0:	7832      	ldrb	r2, [r6, #0]
 80233a2:	69bb      	ldr	r3, [r7, #24]
 80233a4:	b2db      	uxtb	r3, r3
 80233a6:	4413      	add	r3, r2
 80233a8:	b2db      	uxtb	r3, r3
 80233aa:	7033      	strb	r3, [r6, #0]
	/* Compute actual representation error at this pixel */
	/* Note: we can do this even though we don't have the final */
	/* pixel code, because the colormap is orthogonal. */
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 80233ac:	69bb      	ldr	r3, [r7, #24]
 80233ae:	69fa      	ldr	r2, [r7, #28]
 80233b0:	4413      	add	r3, r2
 80233b2:	781b      	ldrb	r3, [r3, #0]
 80233b4:	1ae4      	subs	r4, r4, r3
	/* Compute error fractions to be propagated to adjacent pixels.
	 * Add these into the running sums, and simultaneously shift the
	 * next-line error sums left by 1 column.
	 */
	bnexterr = cur;
 80233b6:	617c      	str	r4, [r7, #20]
	delta = cur * 2;
 80233b8:	0063      	lsls	r3, r4, #1
 80233ba:	613b      	str	r3, [r7, #16]
	cur += delta;		/* form error * 3 */
 80233bc:	693b      	ldr	r3, [r7, #16]
 80233be:	441c      	add	r4, r3
	errorptr[0] = (FSERROR) (bpreverr + cur);
 80233c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80233c2:	b29a      	uxth	r2, r3
 80233c4:	b2a3      	uxth	r3, r4
 80233c6:	4413      	add	r3, r2
 80233c8:	b29b      	uxth	r3, r3
 80233ca:	b21b      	sxth	r3, r3
 80233cc:	802b      	strh	r3, [r5, #0]
	cur += delta;		/* form error * 5 */
 80233ce:	693b      	ldr	r3, [r7, #16]
 80233d0:	441c      	add	r4, r3
	bpreverr = belowerr + cur;
 80233d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80233d4:	4423      	add	r3, r4
 80233d6:	64bb      	str	r3, [r7, #72]	; 0x48
	belowerr = bnexterr;
 80233d8:	697b      	ldr	r3, [r7, #20]
 80233da:	64fb      	str	r3, [r7, #76]	; 0x4c
	cur += delta;		/* form error * 7 */
 80233dc:	693b      	ldr	r3, [r7, #16]
 80233de:	441c      	add	r4, r3
	/* At this point cur contains the 7/16 error value to be propagated
	 * to the next pixel on the current line, and all the errors for the
	 * next line have been shifted over. We are therefore ready to move on.
	 */
	input_ptr += dirnc;	/* advance input ptr to next column */
 80233e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80233e2:	4498      	add	r8, r3
	output_ptr += dir;	/* advance output ptr to next column */
 80233e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80233e6:	441e      	add	r6, r3
	errorptr += dir;	/* advance errorptr to current column */
 80233e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80233ea:	005b      	lsls	r3, r3, #1
 80233ec:	441d      	add	r5, r3
      for (col = width; col > 0; col--) {
 80233ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80233f0:	3b01      	subs	r3, #1
 80233f2:	637b      	str	r3, [r7, #52]	; 0x34
 80233f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80233f6:	2b00      	cmp	r3, #0
 80233f8:	d1bd      	bne.n	8023376 <quantize_fs_dither+0xe2>
      }
      /* Post-loop cleanup: we must unload the final error value into the
       * final fserrors[] entry.  Note we need not unload belowerr because
       * it is for the dummy column before or after the actual array.
       */
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 80233fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80233fc:	b21b      	sxth	r3, r3
 80233fe:	802b      	strh	r3, [r5, #0]
    for (ci = 0; ci < nc; ci++) {
 8023400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023402:	3301      	adds	r3, #1
 8023404:	63fb      	str	r3, [r7, #60]	; 0x3c
 8023406:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802340a:	429a      	cmp	r2, r3
 802340c:	f6ff af68 	blt.w	80232e0 <quantize_fs_dither+0x4c>
    }
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 8023410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023414:	2b00      	cmp	r3, #0
 8023416:	bf0c      	ite	eq
 8023418:	2301      	moveq	r3, #1
 802341a:	2300      	movne	r3, #0
 802341c:	b2db      	uxtb	r3, r3
 802341e:	461a      	mov	r2, r3
 8023420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023422:	655a      	str	r2, [r3, #84]	; 0x54
  for (row = 0; row < num_rows; row++) {
 8023424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023426:	3301      	adds	r3, #1
 8023428:	63bb      	str	r3, [r7, #56]	; 0x38
 802342a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802342c:	683b      	ldr	r3, [r7, #0]
 802342e:	429a      	cmp	r2, r3
 8023430:	f6ff af49 	blt.w	80232c6 <quantize_fs_dither+0x32>
  }
}
 8023434:	bf00      	nop
 8023436:	bf00      	nop
 8023438:	3750      	adds	r7, #80	; 0x50
 802343a:	46bd      	mov	sp, r7
 802343c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08023440 <alloc_fs_workspace>:
 * Allocate workspace for Floyd-Steinberg errors.
 */

LOCAL(void)
alloc_fs_workspace (j_decompress_ptr cinfo)
{
 8023440:	b580      	push	{r7, lr}
 8023442:	b086      	sub	sp, #24
 8023444:	af00      	add	r7, sp, #0
 8023446:	6078      	str	r0, [r7, #4]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8023448:	687b      	ldr	r3, [r7, #4]
 802344a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 802344e:	613b      	str	r3, [r7, #16]
  size_t arraysize;
  int i;

  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8023450:	687b      	ldr	r3, [r7, #4]
 8023452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023454:	3302      	adds	r3, #2
 8023456:	005b      	lsls	r3, r3, #1
 8023458:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < cinfo->out_color_components; i++) {
 802345a:	2300      	movs	r3, #0
 802345c:	617b      	str	r3, [r7, #20]
 802345e:	e010      	b.n	8023482 <alloc_fs_workspace+0x42>
    cquantize->fserrors[i] = (FSERRPTR)
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 8023460:	687b      	ldr	r3, [r7, #4]
 8023462:	685b      	ldr	r3, [r3, #4]
 8023464:	685b      	ldr	r3, [r3, #4]
 8023466:	68fa      	ldr	r2, [r7, #12]
 8023468:	2101      	movs	r1, #1
 802346a:	6878      	ldr	r0, [r7, #4]
 802346c:	4798      	blx	r3
 802346e:	4601      	mov	r1, r0
    cquantize->fserrors[i] = (FSERRPTR)
 8023470:	693a      	ldr	r2, [r7, #16]
 8023472:	697b      	ldr	r3, [r7, #20]
 8023474:	3310      	adds	r3, #16
 8023476:	009b      	lsls	r3, r3, #2
 8023478:	4413      	add	r3, r2
 802347a:	6059      	str	r1, [r3, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 802347c:	697b      	ldr	r3, [r7, #20]
 802347e:	3301      	adds	r3, #1
 8023480:	617b      	str	r3, [r7, #20]
 8023482:	687b      	ldr	r3, [r7, #4]
 8023484:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8023486:	697a      	ldr	r2, [r7, #20]
 8023488:	429a      	cmp	r2, r3
 802348a:	dbe9      	blt.n	8023460 <alloc_fs_workspace+0x20>
  }
}
 802348c:	bf00      	nop
 802348e:	bf00      	nop
 8023490:	3718      	adds	r7, #24
 8023492:	46bd      	mov	sp, r7
 8023494:	bd80      	pop	{r7, pc}
	...

08023498 <start_pass_1_quant>:
 * Initialize for one-pass color quantization.
 */

METHODDEF(void)
start_pass_1_quant (j_decompress_ptr cinfo, boolean is_pre_scan)
{
 8023498:	b580      	push	{r7, lr}
 802349a:	b086      	sub	sp, #24
 802349c:	af00      	add	r7, sp, #0
 802349e:	6078      	str	r0, [r7, #4]
 80234a0:	6039      	str	r1, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80234a2:	687b      	ldr	r3, [r7, #4]
 80234a4:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80234a8:	613b      	str	r3, [r7, #16]
  size_t arraysize;
  int i;

  /* Install my colormap. */
  cinfo->colormap = cquantize->sv_colormap;
 80234aa:	693b      	ldr	r3, [r7, #16]
 80234ac:	691a      	ldr	r2, [r3, #16]
 80234ae:	687b      	ldr	r3, [r7, #4]
 80234b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  cinfo->actual_number_of_colors = cquantize->sv_actual;
 80234b4:	693b      	ldr	r3, [r7, #16]
 80234b6:	695a      	ldr	r2, [r3, #20]
 80234b8:	687b      	ldr	r3, [r7, #4]
 80234ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize for desired dithering mode. */
  switch (cinfo->dither_mode) {
 80234be:	687b      	ldr	r3, [r7, #4]
 80234c0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80234c4:	2b02      	cmp	r3, #2
 80234c6:	d02f      	beq.n	8023528 <start_pass_1_quant+0x90>
 80234c8:	2b02      	cmp	r3, #2
 80234ca:	dc56      	bgt.n	802357a <start_pass_1_quant+0xe2>
 80234cc:	2b00      	cmp	r3, #0
 80234ce:	d002      	beq.n	80234d6 <start_pass_1_quant+0x3e>
 80234d0:	2b01      	cmp	r3, #1
 80234d2:	d00c      	beq.n	80234ee <start_pass_1_quant+0x56>
 80234d4:	e051      	b.n	802357a <start_pass_1_quant+0xe2>
  case JDITHER_NONE:
    if (cinfo->out_color_components == 3)
 80234d6:	687b      	ldr	r3, [r7, #4]
 80234d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80234da:	2b03      	cmp	r3, #3
 80234dc:	d103      	bne.n	80234e6 <start_pass_1_quant+0x4e>
      cquantize->pub.color_quantize = color_quantize3;
 80234de:	693b      	ldr	r3, [r7, #16]
 80234e0:	4a2d      	ldr	r2, [pc, #180]	; (8023598 <start_pass_1_quant+0x100>)
 80234e2:	605a      	str	r2, [r3, #4]
    else
      cquantize->pub.color_quantize = color_quantize;
    break;
 80234e4:	e054      	b.n	8023590 <start_pass_1_quant+0xf8>
      cquantize->pub.color_quantize = color_quantize;
 80234e6:	693b      	ldr	r3, [r7, #16]
 80234e8:	4a2c      	ldr	r2, [pc, #176]	; (802359c <start_pass_1_quant+0x104>)
 80234ea:	605a      	str	r2, [r3, #4]
    break;
 80234ec:	e050      	b.n	8023590 <start_pass_1_quant+0xf8>
  case JDITHER_ORDERED:
    if (cinfo->out_color_components == 3)
 80234ee:	687b      	ldr	r3, [r7, #4]
 80234f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80234f2:	2b03      	cmp	r3, #3
 80234f4:	d103      	bne.n	80234fe <start_pass_1_quant+0x66>
      cquantize->pub.color_quantize = quantize3_ord_dither;
 80234f6:	693b      	ldr	r3, [r7, #16]
 80234f8:	4a29      	ldr	r2, [pc, #164]	; (80235a0 <start_pass_1_quant+0x108>)
 80234fa:	605a      	str	r2, [r3, #4]
 80234fc:	e002      	b.n	8023504 <start_pass_1_quant+0x6c>
    else
      cquantize->pub.color_quantize = quantize_ord_dither;
 80234fe:	693b      	ldr	r3, [r7, #16]
 8023500:	4a28      	ldr	r2, [pc, #160]	; (80235a4 <start_pass_1_quant+0x10c>)
 8023502:	605a      	str	r2, [r3, #4]
    cquantize->row_index = 0;	/* initialize state for ordered dither */
 8023504:	693b      	ldr	r3, [r7, #16]
 8023506:	2200      	movs	r2, #0
 8023508:	631a      	str	r2, [r3, #48]	; 0x30
    /* If user changed to ordered dither from another mode,
     * we must recreate the color index table with padding.
     * This will cost extra space, but probably isn't very likely.
     */
    if (! cquantize->is_padded)
 802350a:	693b      	ldr	r3, [r7, #16]
 802350c:	69db      	ldr	r3, [r3, #28]
 802350e:	2b00      	cmp	r3, #0
 8023510:	d102      	bne.n	8023518 <start_pass_1_quant+0x80>
      create_colorindex(cinfo);
 8023512:	6878      	ldr	r0, [r7, #4]
 8023514:	f7ff fbc6 	bl	8022ca4 <create_colorindex>
    /* Create ordered-dither tables if we didn't already. */
    if (cquantize->odither[0] == NULL)
 8023518:	693b      	ldr	r3, [r7, #16]
 802351a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802351c:	2b00      	cmp	r3, #0
 802351e:	d136      	bne.n	802358e <start_pass_1_quant+0xf6>
      create_odither_tables(cinfo);
 8023520:	6878      	ldr	r0, [r7, #4]
 8023522:	f7ff fcb5 	bl	8022e90 <create_odither_tables>
    break;
 8023526:	e032      	b.n	802358e <start_pass_1_quant+0xf6>
  case JDITHER_FS:
    cquantize->pub.color_quantize = quantize_fs_dither;
 8023528:	693b      	ldr	r3, [r7, #16]
 802352a:	4a1f      	ldr	r2, [pc, #124]	; (80235a8 <start_pass_1_quant+0x110>)
 802352c:	605a      	str	r2, [r3, #4]
    cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
 802352e:	693b      	ldr	r3, [r7, #16]
 8023530:	2200      	movs	r2, #0
 8023532:	655a      	str	r2, [r3, #84]	; 0x54
    /* Allocate Floyd-Steinberg workspace if didn't already. */
    if (cquantize->fserrors[0] == NULL)
 8023534:	693b      	ldr	r3, [r7, #16]
 8023536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023538:	2b00      	cmp	r3, #0
 802353a:	d102      	bne.n	8023542 <start_pass_1_quant+0xaa>
      alloc_fs_workspace(cinfo);
 802353c:	6878      	ldr	r0, [r7, #4]
 802353e:	f7ff ff7f 	bl	8023440 <alloc_fs_workspace>
    /* Initialize the propagated errors to zero. */
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8023542:	687b      	ldr	r3, [r7, #4]
 8023544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023546:	3302      	adds	r3, #2
 8023548:	005b      	lsls	r3, r3, #1
 802354a:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < cinfo->out_color_components; i++)
 802354c:	2300      	movs	r3, #0
 802354e:	617b      	str	r3, [r7, #20]
 8023550:	e00d      	b.n	802356e <start_pass_1_quant+0xd6>
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 8023552:	693a      	ldr	r2, [r7, #16]
 8023554:	697b      	ldr	r3, [r7, #20]
 8023556:	3310      	adds	r3, #16
 8023558:	009b      	lsls	r3, r3, #2
 802355a:	4413      	add	r3, r2
 802355c:	685b      	ldr	r3, [r3, #4]
 802355e:	68fa      	ldr	r2, [r7, #12]
 8023560:	2100      	movs	r1, #0
 8023562:	4618      	mov	r0, r3
 8023564:	f001 fd00 	bl	8024f68 <memset>
    for (i = 0; i < cinfo->out_color_components; i++)
 8023568:	697b      	ldr	r3, [r7, #20]
 802356a:	3301      	adds	r3, #1
 802356c:	617b      	str	r3, [r7, #20]
 802356e:	687b      	ldr	r3, [r7, #4]
 8023570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8023572:	697a      	ldr	r2, [r7, #20]
 8023574:	429a      	cmp	r2, r3
 8023576:	dbec      	blt.n	8023552 <start_pass_1_quant+0xba>
    break;
 8023578:	e00a      	b.n	8023590 <start_pass_1_quant+0xf8>
  default:
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 802357a:	687b      	ldr	r3, [r7, #4]
 802357c:	681b      	ldr	r3, [r3, #0]
 802357e:	2231      	movs	r2, #49	; 0x31
 8023580:	615a      	str	r2, [r3, #20]
 8023582:	687b      	ldr	r3, [r7, #4]
 8023584:	681b      	ldr	r3, [r3, #0]
 8023586:	681b      	ldr	r3, [r3, #0]
 8023588:	6878      	ldr	r0, [r7, #4]
 802358a:	4798      	blx	r3
    break;
 802358c:	e000      	b.n	8023590 <start_pass_1_quant+0xf8>
    break;
 802358e:	bf00      	nop
  }
}
 8023590:	bf00      	nop
 8023592:	3718      	adds	r7, #24
 8023594:	46bd      	mov	sp, r7
 8023596:	bd80      	pop	{r7, pc}
 8023598:	08022fc1 	.word	0x08022fc1
 802359c:	08022f23 	.word	0x08022f23
 80235a0:	08023171 	.word	0x08023171
 80235a4:	08023073 	.word	0x08023073
 80235a8:	08023295 	.word	0x08023295

080235ac <finish_pass_1_quant>:
 * Finish up at the end of the pass.
 */

METHODDEF(void)
finish_pass_1_quant (j_decompress_ptr cinfo)
{
 80235ac:	b480      	push	{r7}
 80235ae:	b083      	sub	sp, #12
 80235b0:	af00      	add	r7, sp, #0
 80235b2:	6078      	str	r0, [r7, #4]
  /* no work in 1-pass case */
}
 80235b4:	bf00      	nop
 80235b6:	370c      	adds	r7, #12
 80235b8:	46bd      	mov	sp, r7
 80235ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235be:	4770      	bx	lr

080235c0 <new_color_map_1_quant>:
 * Shouldn't get to this module!
 */

METHODDEF(void)
new_color_map_1_quant (j_decompress_ptr cinfo)
{
 80235c0:	b580      	push	{r7, lr}
 80235c2:	b082      	sub	sp, #8
 80235c4:	af00      	add	r7, sp, #0
 80235c6:	6078      	str	r0, [r7, #4]
  ERREXIT(cinfo, JERR_MODE_CHANGE);
 80235c8:	687b      	ldr	r3, [r7, #4]
 80235ca:	681b      	ldr	r3, [r3, #0]
 80235cc:	222f      	movs	r2, #47	; 0x2f
 80235ce:	615a      	str	r2, [r3, #20]
 80235d0:	687b      	ldr	r3, [r7, #4]
 80235d2:	681b      	ldr	r3, [r3, #0]
 80235d4:	681b      	ldr	r3, [r3, #0]
 80235d6:	6878      	ldr	r0, [r7, #4]
 80235d8:	4798      	blx	r3
}
 80235da:	bf00      	nop
 80235dc:	3708      	adds	r7, #8
 80235de:	46bd      	mov	sp, r7
 80235e0:	bd80      	pop	{r7, pc}
	...

080235e4 <jinit_1pass_quantizer>:
 * Module initialization routine for 1-pass color quantization.
 */

GLOBAL(void)
jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
 80235e4:	b580      	push	{r7, lr}
 80235e6:	b084      	sub	sp, #16
 80235e8:	af00      	add	r7, sp, #0
 80235ea:	6078      	str	r0, [r7, #4]
  my_cquantize_ptr cquantize;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80235ec:	687b      	ldr	r3, [r7, #4]
 80235ee:	685b      	ldr	r3, [r3, #4]
 80235f0:	681b      	ldr	r3, [r3, #0]
 80235f2:	2258      	movs	r2, #88	; 0x58
 80235f4:	2101      	movs	r1, #1
 80235f6:	6878      	ldr	r0, [r7, #4]
 80235f8:	4798      	blx	r3
 80235fa:	60f8      	str	r0, [r7, #12]
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 80235fc:	687b      	ldr	r3, [r7, #4]
 80235fe:	68fa      	ldr	r2, [r7, #12]
 8023600:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
  cquantize->pub.start_pass = start_pass_1_quant;
 8023604:	68fb      	ldr	r3, [r7, #12]
 8023606:	4a22      	ldr	r2, [pc, #136]	; (8023690 <jinit_1pass_quantizer+0xac>)
 8023608:	601a      	str	r2, [r3, #0]
  cquantize->pub.finish_pass = finish_pass_1_quant;
 802360a:	68fb      	ldr	r3, [r7, #12]
 802360c:	4a21      	ldr	r2, [pc, #132]	; (8023694 <jinit_1pass_quantizer+0xb0>)
 802360e:	609a      	str	r2, [r3, #8]
  cquantize->pub.new_color_map = new_color_map_1_quant;
 8023610:	68fb      	ldr	r3, [r7, #12]
 8023612:	4a21      	ldr	r2, [pc, #132]	; (8023698 <jinit_1pass_quantizer+0xb4>)
 8023614:	60da      	str	r2, [r3, #12]
  cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
 8023616:	68fb      	ldr	r3, [r7, #12]
 8023618:	2200      	movs	r2, #0
 802361a:	645a      	str	r2, [r3, #68]	; 0x44
  cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */
 802361c:	68fb      	ldr	r3, [r7, #12]
 802361e:	2200      	movs	r2, #0
 8023620:	635a      	str	r2, [r3, #52]	; 0x34

  /* Make sure my internal arrays won't overflow */
  if (cinfo->out_color_components > MAX_Q_COMPS)
 8023622:	687b      	ldr	r3, [r7, #4]
 8023624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8023626:	2b04      	cmp	r3, #4
 8023628:	dd0c      	ble.n	8023644 <jinit_1pass_quantizer+0x60>
    ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
 802362a:	687b      	ldr	r3, [r7, #4]
 802362c:	681b      	ldr	r3, [r3, #0]
 802362e:	2239      	movs	r2, #57	; 0x39
 8023630:	615a      	str	r2, [r3, #20]
 8023632:	687b      	ldr	r3, [r7, #4]
 8023634:	681b      	ldr	r3, [r3, #0]
 8023636:	2204      	movs	r2, #4
 8023638:	619a      	str	r2, [r3, #24]
 802363a:	687b      	ldr	r3, [r7, #4]
 802363c:	681b      	ldr	r3, [r3, #0]
 802363e:	681b      	ldr	r3, [r3, #0]
 8023640:	6878      	ldr	r0, [r7, #4]
 8023642:	4798      	blx	r3
  /* Make sure colormap indexes can be represented by JSAMPLEs */
  if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
 8023644:	687b      	ldr	r3, [r7, #4]
 8023646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8023648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802364c:	dd0d      	ble.n	802366a <jinit_1pass_quantizer+0x86>
    ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);
 802364e:	687b      	ldr	r3, [r7, #4]
 8023650:	681b      	ldr	r3, [r3, #0]
 8023652:	223b      	movs	r2, #59	; 0x3b
 8023654:	615a      	str	r2, [r3, #20]
 8023656:	687b      	ldr	r3, [r7, #4]
 8023658:	681b      	ldr	r3, [r3, #0]
 802365a:	f44f 7280 	mov.w	r2, #256	; 0x100
 802365e:	619a      	str	r2, [r3, #24]
 8023660:	687b      	ldr	r3, [r7, #4]
 8023662:	681b      	ldr	r3, [r3, #0]
 8023664:	681b      	ldr	r3, [r3, #0]
 8023666:	6878      	ldr	r0, [r7, #4]
 8023668:	4798      	blx	r3

  /* Create the colormap and color index table. */
  create_colormap(cinfo);
 802366a:	6878      	ldr	r0, [r7, #4]
 802366c:	f7ff fa74 	bl	8022b58 <create_colormap>
  create_colorindex(cinfo);
 8023670:	6878      	ldr	r0, [r7, #4]
 8023672:	f7ff fb17 	bl	8022ca4 <create_colorindex>
   * We do this now since it is FAR storage and may affect the memory
   * manager's space calculations.  If the user changes to FS dither
   * mode in a later pass, we will allocate the space then, and will
   * possibly overrun the max_memory_to_use setting.
   */
  if (cinfo->dither_mode == JDITHER_FS)
 8023676:	687b      	ldr	r3, [r7, #4]
 8023678:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 802367c:	2b02      	cmp	r3, #2
 802367e:	d102      	bne.n	8023686 <jinit_1pass_quantizer+0xa2>
    alloc_fs_workspace(cinfo);
 8023680:	6878      	ldr	r0, [r7, #4]
 8023682:	f7ff fedd 	bl	8023440 <alloc_fs_workspace>
}
 8023686:	bf00      	nop
 8023688:	3710      	adds	r7, #16
 802368a:	46bd      	mov	sp, r7
 802368c:	bd80      	pop	{r7, pc}
 802368e:	bf00      	nop
 8023690:	08023499 	.word	0x08023499
 8023694:	080235ad 	.word	0x080235ad
 8023698:	080235c1 	.word	0x080235c1

0802369c <prescan_quantize>:
 */

METHODDEF(void)
prescan_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		  JSAMPARRAY output_buf, int num_rows)
{
 802369c:	b4f0      	push	{r4, r5, r6, r7}
 802369e:	b088      	sub	sp, #32
 80236a0:	af00      	add	r7, sp, #0
 80236a2:	60f8      	str	r0, [r7, #12]
 80236a4:	60b9      	str	r1, [r7, #8]
 80236a6:	607a      	str	r2, [r7, #4]
 80236a8:	603b      	str	r3, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80236aa:	68fb      	ldr	r3, [r7, #12]
 80236ac:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80236b0:	617b      	str	r3, [r7, #20]
  register JSAMPROW ptr;
  register histptr histp;
  register hist3d histogram = cquantize->histogram;
 80236b2:	697b      	ldr	r3, [r7, #20]
 80236b4:	699e      	ldr	r6, [r3, #24]
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 80236b6:	68fb      	ldr	r3, [r7, #12]
 80236b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80236ba:	613b      	str	r3, [r7, #16]

  for (row = 0; row < num_rows; row++) {
 80236bc:	2300      	movs	r3, #0
 80236be:	61fb      	str	r3, [r7, #28]
 80236c0:	e02e      	b.n	8023720 <prescan_quantize+0x84>
    ptr = input_buf[row];
 80236c2:	69fb      	ldr	r3, [r7, #28]
 80236c4:	009b      	lsls	r3, r3, #2
 80236c6:	68ba      	ldr	r2, [r7, #8]
 80236c8:	4413      	add	r3, r2
 80236ca:	681c      	ldr	r4, [r3, #0]
    for (col = width; col > 0; col--) {
 80236cc:	693b      	ldr	r3, [r7, #16]
 80236ce:	61bb      	str	r3, [r7, #24]
 80236d0:	e020      	b.n	8023714 <prescan_quantize+0x78>
      /* get pixel value and index into the histogram */
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 80236d2:	7823      	ldrb	r3, [r4, #0]
 80236d4:	08db      	lsrs	r3, r3, #3
 80236d6:	b2db      	uxtb	r3, r3
 80236d8:	009b      	lsls	r3, r3, #2
 80236da:	4433      	add	r3, r6
 80236dc:	681a      	ldr	r2, [r3, #0]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 80236de:	1c63      	adds	r3, r4, #1
 80236e0:	781b      	ldrb	r3, [r3, #0]
 80236e2:	089b      	lsrs	r3, r3, #2
 80236e4:	b2db      	uxtb	r3, r3
 80236e6:	019b      	lsls	r3, r3, #6
 80236e8:	441a      	add	r2, r3
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 80236ea:	1ca3      	adds	r3, r4, #2
 80236ec:	781b      	ldrb	r3, [r3, #0]
 80236ee:	08db      	lsrs	r3, r3, #3
 80236f0:	b2db      	uxtb	r3, r3
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 80236f2:	005b      	lsls	r3, r3, #1
 80236f4:	18d5      	adds	r5, r2, r3
      /* increment, check for overflow and undo increment if so. */
      if (++(*histp) <= 0)
 80236f6:	882b      	ldrh	r3, [r5, #0]
 80236f8:	3301      	adds	r3, #1
 80236fa:	b29b      	uxth	r3, r3
 80236fc:	802b      	strh	r3, [r5, #0]
 80236fe:	882b      	ldrh	r3, [r5, #0]
 8023700:	2b00      	cmp	r3, #0
 8023702:	d103      	bne.n	802370c <prescan_quantize+0x70>
	(*histp)--;
 8023704:	882b      	ldrh	r3, [r5, #0]
 8023706:	3b01      	subs	r3, #1
 8023708:	b29b      	uxth	r3, r3
 802370a:	802b      	strh	r3, [r5, #0]
      ptr += 3;
 802370c:	3403      	adds	r4, #3
    for (col = width; col > 0; col--) {
 802370e:	69bb      	ldr	r3, [r7, #24]
 8023710:	3b01      	subs	r3, #1
 8023712:	61bb      	str	r3, [r7, #24]
 8023714:	69bb      	ldr	r3, [r7, #24]
 8023716:	2b00      	cmp	r3, #0
 8023718:	d1db      	bne.n	80236d2 <prescan_quantize+0x36>
  for (row = 0; row < num_rows; row++) {
 802371a:	69fb      	ldr	r3, [r7, #28]
 802371c:	3301      	adds	r3, #1
 802371e:	61fb      	str	r3, [r7, #28]
 8023720:	69fa      	ldr	r2, [r7, #28]
 8023722:	683b      	ldr	r3, [r7, #0]
 8023724:	429a      	cmp	r2, r3
 8023726:	dbcc      	blt.n	80236c2 <prescan_quantize+0x26>
    }
  }
}
 8023728:	bf00      	nop
 802372a:	bf00      	nop
 802372c:	3720      	adds	r7, #32
 802372e:	46bd      	mov	sp, r7
 8023730:	bcf0      	pop	{r4, r5, r6, r7}
 8023732:	4770      	bx	lr

08023734 <find_biggest_color_pop>:

LOCAL(boxptr)
find_biggest_color_pop (boxptr boxlist, int numboxes)
/* Find the splittable box with the largest color population */
/* Returns NULL if no splittable boxes remain */
{
 8023734:	b4f0      	push	{r4, r5, r6, r7}
 8023736:	b084      	sub	sp, #16
 8023738:	af00      	add	r7, sp, #0
 802373a:	6078      	str	r0, [r7, #4]
 802373c:	6039      	str	r1, [r7, #0]
  register boxptr boxp;
  register int i;
  register long maxc = 0;
 802373e:	2600      	movs	r6, #0
  boxptr which = NULL;
 8023740:	2300      	movs	r3, #0
 8023742:	60fb      	str	r3, [r7, #12]
  
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8023744:	2500      	movs	r5, #0
 8023746:	687c      	ldr	r4, [r7, #4]
 8023748:	e009      	b.n	802375e <find_biggest_color_pop+0x2a>
    if (boxp->colorcount > maxc && boxp->volume > 0) {
 802374a:	69e3      	ldr	r3, [r4, #28]
 802374c:	429e      	cmp	r6, r3
 802374e:	da04      	bge.n	802375a <find_biggest_color_pop+0x26>
 8023750:	69a3      	ldr	r3, [r4, #24]
 8023752:	2b00      	cmp	r3, #0
 8023754:	dd01      	ble.n	802375a <find_biggest_color_pop+0x26>
      which = boxp;
 8023756:	60fc      	str	r4, [r7, #12]
      maxc = boxp->colorcount;
 8023758:	69e6      	ldr	r6, [r4, #28]
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 802375a:	3501      	adds	r5, #1
 802375c:	3420      	adds	r4, #32
 802375e:	683b      	ldr	r3, [r7, #0]
 8023760:	429d      	cmp	r5, r3
 8023762:	dbf2      	blt.n	802374a <find_biggest_color_pop+0x16>
    }
  }
  return which;
 8023764:	68fb      	ldr	r3, [r7, #12]
}
 8023766:	4618      	mov	r0, r3
 8023768:	3710      	adds	r7, #16
 802376a:	46bd      	mov	sp, r7
 802376c:	bcf0      	pop	{r4, r5, r6, r7}
 802376e:	4770      	bx	lr

08023770 <find_biggest_volume>:

LOCAL(boxptr)
find_biggest_volume (boxptr boxlist, int numboxes)
/* Find the splittable box with the largest (scaled) volume */
/* Returns NULL if no splittable boxes remain */
{
 8023770:	b4f0      	push	{r4, r5, r6, r7}
 8023772:	b084      	sub	sp, #16
 8023774:	af00      	add	r7, sp, #0
 8023776:	6078      	str	r0, [r7, #4]
 8023778:	6039      	str	r1, [r7, #0]
  register boxptr boxp;
  register int i;
  register INT32 maxv = 0;
 802377a:	2600      	movs	r6, #0
  boxptr which = NULL;
 802377c:	2300      	movs	r3, #0
 802377e:	60fb      	str	r3, [r7, #12]
  
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8023780:	2500      	movs	r5, #0
 8023782:	687c      	ldr	r4, [r7, #4]
 8023784:	e006      	b.n	8023794 <find_biggest_volume+0x24>
    if (boxp->volume > maxv) {
 8023786:	69a3      	ldr	r3, [r4, #24]
 8023788:	429e      	cmp	r6, r3
 802378a:	da01      	bge.n	8023790 <find_biggest_volume+0x20>
      which = boxp;
 802378c:	60fc      	str	r4, [r7, #12]
      maxv = boxp->volume;
 802378e:	69a6      	ldr	r6, [r4, #24]
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8023790:	3501      	adds	r5, #1
 8023792:	3420      	adds	r4, #32
 8023794:	683b      	ldr	r3, [r7, #0]
 8023796:	429d      	cmp	r5, r3
 8023798:	dbf5      	blt.n	8023786 <find_biggest_volume+0x16>
    }
  }
  return which;
 802379a:	68fb      	ldr	r3, [r7, #12]
}
 802379c:	4618      	mov	r0, r3
 802379e:	3710      	adds	r7, #16
 80237a0:	46bd      	mov	sp, r7
 80237a2:	bcf0      	pop	{r4, r5, r6, r7}
 80237a4:	4770      	bx	lr

080237a6 <update_box>:

LOCAL(void)
update_box (j_decompress_ptr cinfo, boxptr boxp)
/* Shrink the min/max bounds of a box to enclose only nonzero elements, */
/* and recompute its volume and population */
{
 80237a6:	b480      	push	{r7}
 80237a8:	b093      	sub	sp, #76	; 0x4c
 80237aa:	af00      	add	r7, sp, #0
 80237ac:	6078      	str	r0, [r7, #4]
 80237ae:	6039      	str	r1, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80237b0:	687b      	ldr	r3, [r7, #4]
 80237b2:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80237b6:	61bb      	str	r3, [r7, #24]
  hist3d histogram = cquantize->histogram;
 80237b8:	69bb      	ldr	r3, [r7, #24]
 80237ba:	699b      	ldr	r3, [r3, #24]
 80237bc:	617b      	str	r3, [r7, #20]
  int c0,c1,c2;
  int c0min,c0max,c1min,c1max,c2min,c2max;
  INT32 dist0,dist1,dist2;
  long ccount;
  
  c0min = boxp->c0min;  c0max = boxp->c0max;
 80237be:	683b      	ldr	r3, [r7, #0]
 80237c0:	681b      	ldr	r3, [r3, #0]
 80237c2:	637b      	str	r3, [r7, #52]	; 0x34
 80237c4:	683b      	ldr	r3, [r7, #0]
 80237c6:	685b      	ldr	r3, [r3, #4]
 80237c8:	633b      	str	r3, [r7, #48]	; 0x30
  c1min = boxp->c1min;  c1max = boxp->c1max;
 80237ca:	683b      	ldr	r3, [r7, #0]
 80237cc:	689b      	ldr	r3, [r3, #8]
 80237ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80237d0:	683b      	ldr	r3, [r7, #0]
 80237d2:	68db      	ldr	r3, [r3, #12]
 80237d4:	62bb      	str	r3, [r7, #40]	; 0x28
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80237d6:	683b      	ldr	r3, [r7, #0]
 80237d8:	691b      	ldr	r3, [r3, #16]
 80237da:	627b      	str	r3, [r7, #36]	; 0x24
 80237dc:	683b      	ldr	r3, [r7, #0]
 80237de:	695b      	ldr	r3, [r3, #20]
 80237e0:	623b      	str	r3, [r7, #32]
  
  if (c0max > c0min)
 80237e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80237e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80237e6:	429a      	cmp	r2, r3
 80237e8:	dd35      	ble.n	8023856 <update_box+0xb0>
    for (c0 = c0min; c0 <= c0max; c0++)
 80237ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80237ec:	643b      	str	r3, [r7, #64]	; 0x40
 80237ee:	e02e      	b.n	802384e <update_box+0xa8>
      for (c1 = c1min; c1 <= c1max; c1++) {
 80237f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80237f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80237f4:	e024      	b.n	8023840 <update_box+0x9a>
	histp = & histogram[c0][c1][c2min];
 80237f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80237f8:	009b      	lsls	r3, r3, #2
 80237fa:	697a      	ldr	r2, [r7, #20]
 80237fc:	4413      	add	r3, r2
 80237fe:	681a      	ldr	r2, [r3, #0]
 8023800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023802:	019b      	lsls	r3, r3, #6
 8023804:	441a      	add	r2, r3
 8023806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023808:	005b      	lsls	r3, r3, #1
 802380a:	4413      	add	r3, r2
 802380c:	647b      	str	r3, [r7, #68]	; 0x44
	for (c2 = c2min; c2 <= c2max; c2++)
 802380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023810:	63bb      	str	r3, [r7, #56]	; 0x38
 8023812:	e00e      	b.n	8023832 <update_box+0x8c>
	  if (*histp++ != 0) {
 8023814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023816:	1c9a      	adds	r2, r3, #2
 8023818:	647a      	str	r2, [r7, #68]	; 0x44
 802381a:	881b      	ldrh	r3, [r3, #0]
 802381c:	2b00      	cmp	r3, #0
 802381e:	d005      	beq.n	802382c <update_box+0x86>
	    boxp->c0min = c0min = c0;
 8023820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023822:	637b      	str	r3, [r7, #52]	; 0x34
 8023824:	683b      	ldr	r3, [r7, #0]
 8023826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023828:	601a      	str	r2, [r3, #0]
	    goto have_c0min;
 802382a:	e015      	b.n	8023858 <update_box+0xb2>
	for (c2 = c2min; c2 <= c2max; c2++)
 802382c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802382e:	3301      	adds	r3, #1
 8023830:	63bb      	str	r3, [r7, #56]	; 0x38
 8023832:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8023834:	6a3b      	ldr	r3, [r7, #32]
 8023836:	429a      	cmp	r2, r3
 8023838:	ddec      	ble.n	8023814 <update_box+0x6e>
      for (c1 = c1min; c1 <= c1max; c1++) {
 802383a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802383c:	3301      	adds	r3, #1
 802383e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8023840:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023844:	429a      	cmp	r2, r3
 8023846:	ddd6      	ble.n	80237f6 <update_box+0x50>
    for (c0 = c0min; c0 <= c0max; c0++)
 8023848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802384a:	3301      	adds	r3, #1
 802384c:	643b      	str	r3, [r7, #64]	; 0x40
 802384e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8023850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023852:	429a      	cmp	r2, r3
 8023854:	ddcc      	ble.n	80237f0 <update_box+0x4a>
	  }
      }
 have_c0min:
 8023856:	bf00      	nop
  if (c0max > c0min)
 8023858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802385a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802385c:	429a      	cmp	r2, r3
 802385e:	dd35      	ble.n	80238cc <update_box+0x126>
    for (c0 = c0max; c0 >= c0min; c0--)
 8023860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023862:	643b      	str	r3, [r7, #64]	; 0x40
 8023864:	e02e      	b.n	80238c4 <update_box+0x11e>
      for (c1 = c1min; c1 <= c1max; c1++) {
 8023866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023868:	63fb      	str	r3, [r7, #60]	; 0x3c
 802386a:	e024      	b.n	80238b6 <update_box+0x110>
	histp = & histogram[c0][c1][c2min];
 802386c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802386e:	009b      	lsls	r3, r3, #2
 8023870:	697a      	ldr	r2, [r7, #20]
 8023872:	4413      	add	r3, r2
 8023874:	681a      	ldr	r2, [r3, #0]
 8023876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023878:	019b      	lsls	r3, r3, #6
 802387a:	441a      	add	r2, r3
 802387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802387e:	005b      	lsls	r3, r3, #1
 8023880:	4413      	add	r3, r2
 8023882:	647b      	str	r3, [r7, #68]	; 0x44
	for (c2 = c2min; c2 <= c2max; c2++)
 8023884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023886:	63bb      	str	r3, [r7, #56]	; 0x38
 8023888:	e00e      	b.n	80238a8 <update_box+0x102>
	  if (*histp++ != 0) {
 802388a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802388c:	1c9a      	adds	r2, r3, #2
 802388e:	647a      	str	r2, [r7, #68]	; 0x44
 8023890:	881b      	ldrh	r3, [r3, #0]
 8023892:	2b00      	cmp	r3, #0
 8023894:	d005      	beq.n	80238a2 <update_box+0xfc>
	    boxp->c0max = c0max = c0;
 8023896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023898:	633b      	str	r3, [r7, #48]	; 0x30
 802389a:	683b      	ldr	r3, [r7, #0]
 802389c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802389e:	605a      	str	r2, [r3, #4]
	    goto have_c0max;
 80238a0:	e015      	b.n	80238ce <update_box+0x128>
	for (c2 = c2min; c2 <= c2max; c2++)
 80238a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80238a4:	3301      	adds	r3, #1
 80238a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80238a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80238aa:	6a3b      	ldr	r3, [r7, #32]
 80238ac:	429a      	cmp	r2, r3
 80238ae:	ddec      	ble.n	802388a <update_box+0xe4>
      for (c1 = c1min; c1 <= c1max; c1++) {
 80238b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80238b2:	3301      	adds	r3, #1
 80238b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80238b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80238b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80238ba:	429a      	cmp	r2, r3
 80238bc:	ddd6      	ble.n	802386c <update_box+0xc6>
    for (c0 = c0max; c0 >= c0min; c0--)
 80238be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80238c0:	3b01      	subs	r3, #1
 80238c2:	643b      	str	r3, [r7, #64]	; 0x40
 80238c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80238c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80238c8:	429a      	cmp	r2, r3
 80238ca:	dacc      	bge.n	8023866 <update_box+0xc0>
	  }
      }
 have_c0max:
 80238cc:	bf00      	nop
  if (c1max > c1min)
 80238ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80238d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80238d2:	429a      	cmp	r2, r3
 80238d4:	dd35      	ble.n	8023942 <update_box+0x19c>
    for (c1 = c1min; c1 <= c1max; c1++)
 80238d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80238d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80238da:	e02e      	b.n	802393a <update_box+0x194>
      for (c0 = c0min; c0 <= c0max; c0++) {
 80238dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80238de:	643b      	str	r3, [r7, #64]	; 0x40
 80238e0:	e024      	b.n	802392c <update_box+0x186>
	histp = & histogram[c0][c1][c2min];
 80238e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80238e4:	009b      	lsls	r3, r3, #2
 80238e6:	697a      	ldr	r2, [r7, #20]
 80238e8:	4413      	add	r3, r2
 80238ea:	681a      	ldr	r2, [r3, #0]
 80238ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80238ee:	019b      	lsls	r3, r3, #6
 80238f0:	441a      	add	r2, r3
 80238f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80238f4:	005b      	lsls	r3, r3, #1
 80238f6:	4413      	add	r3, r2
 80238f8:	647b      	str	r3, [r7, #68]	; 0x44
	for (c2 = c2min; c2 <= c2max; c2++)
 80238fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80238fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80238fe:	e00e      	b.n	802391e <update_box+0x178>
	  if (*histp++ != 0) {
 8023900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023902:	1c9a      	adds	r2, r3, #2
 8023904:	647a      	str	r2, [r7, #68]	; 0x44
 8023906:	881b      	ldrh	r3, [r3, #0]
 8023908:	2b00      	cmp	r3, #0
 802390a:	d005      	beq.n	8023918 <update_box+0x172>
	    boxp->c1min = c1min = c1;
 802390c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802390e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8023910:	683b      	ldr	r3, [r7, #0]
 8023912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023914:	609a      	str	r2, [r3, #8]
	    goto have_c1min;
 8023916:	e015      	b.n	8023944 <update_box+0x19e>
	for (c2 = c2min; c2 <= c2max; c2++)
 8023918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802391a:	3301      	adds	r3, #1
 802391c:	63bb      	str	r3, [r7, #56]	; 0x38
 802391e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8023920:	6a3b      	ldr	r3, [r7, #32]
 8023922:	429a      	cmp	r2, r3
 8023924:	ddec      	ble.n	8023900 <update_box+0x15a>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8023926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023928:	3301      	adds	r3, #1
 802392a:	643b      	str	r3, [r7, #64]	; 0x40
 802392c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023930:	429a      	cmp	r2, r3
 8023932:	ddd6      	ble.n	80238e2 <update_box+0x13c>
    for (c1 = c1min; c1 <= c1max; c1++)
 8023934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023936:	3301      	adds	r3, #1
 8023938:	63fb      	str	r3, [r7, #60]	; 0x3c
 802393a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802393c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802393e:	429a      	cmp	r2, r3
 8023940:	ddcc      	ble.n	80238dc <update_box+0x136>
	  }
      }
 have_c1min:
 8023942:	bf00      	nop
  if (c1max > c1min)
 8023944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023948:	429a      	cmp	r2, r3
 802394a:	dd35      	ble.n	80239b8 <update_box+0x212>
    for (c1 = c1max; c1 >= c1min; c1--)
 802394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802394e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8023950:	e02e      	b.n	80239b0 <update_box+0x20a>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8023952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023954:	643b      	str	r3, [r7, #64]	; 0x40
 8023956:	e024      	b.n	80239a2 <update_box+0x1fc>
	histp = & histogram[c0][c1][c2min];
 8023958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802395a:	009b      	lsls	r3, r3, #2
 802395c:	697a      	ldr	r2, [r7, #20]
 802395e:	4413      	add	r3, r2
 8023960:	681a      	ldr	r2, [r3, #0]
 8023962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023964:	019b      	lsls	r3, r3, #6
 8023966:	441a      	add	r2, r3
 8023968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802396a:	005b      	lsls	r3, r3, #1
 802396c:	4413      	add	r3, r2
 802396e:	647b      	str	r3, [r7, #68]	; 0x44
	for (c2 = c2min; c2 <= c2max; c2++)
 8023970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023972:	63bb      	str	r3, [r7, #56]	; 0x38
 8023974:	e00e      	b.n	8023994 <update_box+0x1ee>
	  if (*histp++ != 0) {
 8023976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023978:	1c9a      	adds	r2, r3, #2
 802397a:	647a      	str	r2, [r7, #68]	; 0x44
 802397c:	881b      	ldrh	r3, [r3, #0]
 802397e:	2b00      	cmp	r3, #0
 8023980:	d005      	beq.n	802398e <update_box+0x1e8>
	    boxp->c1max = c1max = c1;
 8023982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023984:	62bb      	str	r3, [r7, #40]	; 0x28
 8023986:	683b      	ldr	r3, [r7, #0]
 8023988:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802398a:	60da      	str	r2, [r3, #12]
	    goto have_c1max;
 802398c:	e015      	b.n	80239ba <update_box+0x214>
	for (c2 = c2min; c2 <= c2max; c2++)
 802398e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023990:	3301      	adds	r3, #1
 8023992:	63bb      	str	r3, [r7, #56]	; 0x38
 8023994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8023996:	6a3b      	ldr	r3, [r7, #32]
 8023998:	429a      	cmp	r2, r3
 802399a:	ddec      	ble.n	8023976 <update_box+0x1d0>
      for (c0 = c0min; c0 <= c0max; c0++) {
 802399c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802399e:	3301      	adds	r3, #1
 80239a0:	643b      	str	r3, [r7, #64]	; 0x40
 80239a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80239a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80239a6:	429a      	cmp	r2, r3
 80239a8:	ddd6      	ble.n	8023958 <update_box+0x1b2>
    for (c1 = c1max; c1 >= c1min; c1--)
 80239aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80239ac:	3b01      	subs	r3, #1
 80239ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80239b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80239b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80239b4:	429a      	cmp	r2, r3
 80239b6:	dacc      	bge.n	8023952 <update_box+0x1ac>
	  }
      }
 have_c1max:
 80239b8:	bf00      	nop
  if (c2max > c2min)
 80239ba:	6a3a      	ldr	r2, [r7, #32]
 80239bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80239be:	429a      	cmp	r2, r3
 80239c0:	dd36      	ble.n	8023a30 <update_box+0x28a>
    for (c2 = c2min; c2 <= c2max; c2++)
 80239c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80239c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80239c6:	e02f      	b.n	8023a28 <update_box+0x282>
      for (c0 = c0min; c0 <= c0max; c0++) {
 80239c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80239ca:	643b      	str	r3, [r7, #64]	; 0x40
 80239cc:	e025      	b.n	8023a1a <update_box+0x274>
	histp = & histogram[c0][c1min][c2];
 80239ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80239d0:	009b      	lsls	r3, r3, #2
 80239d2:	697a      	ldr	r2, [r7, #20]
 80239d4:	4413      	add	r3, r2
 80239d6:	681a      	ldr	r2, [r3, #0]
 80239d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80239da:	019b      	lsls	r3, r3, #6
 80239dc:	441a      	add	r2, r3
 80239de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80239e0:	005b      	lsls	r3, r3, #1
 80239e2:	4413      	add	r3, r2
 80239e4:	647b      	str	r3, [r7, #68]	; 0x44
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80239e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80239e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80239ea:	e00f      	b.n	8023a0c <update_box+0x266>
	  if (*histp != 0) {
 80239ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80239ee:	881b      	ldrh	r3, [r3, #0]
 80239f0:	2b00      	cmp	r3, #0
 80239f2:	d005      	beq.n	8023a00 <update_box+0x25a>
	    boxp->c2min = c2min = c2;
 80239f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80239f6:	627b      	str	r3, [r7, #36]	; 0x24
 80239f8:	683b      	ldr	r3, [r7, #0]
 80239fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80239fc:	611a      	str	r2, [r3, #16]
	    goto have_c2min;
 80239fe:	e018      	b.n	8023a32 <update_box+0x28c>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8023a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023a02:	3301      	adds	r3, #1
 8023a04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8023a06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023a08:	3340      	adds	r3, #64	; 0x40
 8023a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8023a0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023a10:	429a      	cmp	r2, r3
 8023a12:	ddeb      	ble.n	80239ec <update_box+0x246>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8023a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023a16:	3301      	adds	r3, #1
 8023a18:	643b      	str	r3, [r7, #64]	; 0x40
 8023a1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8023a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023a1e:	429a      	cmp	r2, r3
 8023a20:	ddd5      	ble.n	80239ce <update_box+0x228>
    for (c2 = c2min; c2 <= c2max; c2++)
 8023a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a24:	3301      	adds	r3, #1
 8023a26:	63bb      	str	r3, [r7, #56]	; 0x38
 8023a28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8023a2a:	6a3b      	ldr	r3, [r7, #32]
 8023a2c:	429a      	cmp	r2, r3
 8023a2e:	ddcb      	ble.n	80239c8 <update_box+0x222>
	  }
      }
 have_c2min:
 8023a30:	bf00      	nop
  if (c2max > c2min)
 8023a32:	6a3a      	ldr	r2, [r7, #32]
 8023a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023a36:	429a      	cmp	r2, r3
 8023a38:	dd36      	ble.n	8023aa8 <update_box+0x302>
    for (c2 = c2max; c2 >= c2min; c2--)
 8023a3a:	6a3b      	ldr	r3, [r7, #32]
 8023a3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8023a3e:	e02f      	b.n	8023aa0 <update_box+0x2fa>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8023a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023a42:	643b      	str	r3, [r7, #64]	; 0x40
 8023a44:	e025      	b.n	8023a92 <update_box+0x2ec>
	histp = & histogram[c0][c1min][c2];
 8023a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023a48:	009b      	lsls	r3, r3, #2
 8023a4a:	697a      	ldr	r2, [r7, #20]
 8023a4c:	4413      	add	r3, r2
 8023a4e:	681a      	ldr	r2, [r3, #0]
 8023a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023a52:	019b      	lsls	r3, r3, #6
 8023a54:	441a      	add	r2, r3
 8023a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a58:	005b      	lsls	r3, r3, #1
 8023a5a:	4413      	add	r3, r2
 8023a5c:	647b      	str	r3, [r7, #68]	; 0x44
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8023a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023a60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8023a62:	e00f      	b.n	8023a84 <update_box+0x2de>
	  if (*histp != 0) {
 8023a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023a66:	881b      	ldrh	r3, [r3, #0]
 8023a68:	2b00      	cmp	r3, #0
 8023a6a:	d005      	beq.n	8023a78 <update_box+0x2d2>
	    boxp->c2max = c2max = c2;
 8023a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a6e:	623b      	str	r3, [r7, #32]
 8023a70:	683b      	ldr	r3, [r7, #0]
 8023a72:	6a3a      	ldr	r2, [r7, #32]
 8023a74:	615a      	str	r2, [r3, #20]
	    goto have_c2max;
 8023a76:	e018      	b.n	8023aaa <update_box+0x304>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8023a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023a7a:	3301      	adds	r3, #1
 8023a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8023a7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023a80:	3340      	adds	r3, #64	; 0x40
 8023a82:	647b      	str	r3, [r7, #68]	; 0x44
 8023a84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023a88:	429a      	cmp	r2, r3
 8023a8a:	ddeb      	ble.n	8023a64 <update_box+0x2be>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8023a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023a8e:	3301      	adds	r3, #1
 8023a90:	643b      	str	r3, [r7, #64]	; 0x40
 8023a92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8023a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023a96:	429a      	cmp	r2, r3
 8023a98:	ddd5      	ble.n	8023a46 <update_box+0x2a0>
    for (c2 = c2max; c2 >= c2min; c2--)
 8023a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a9c:	3b01      	subs	r3, #1
 8023a9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8023aa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8023aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023aa4:	429a      	cmp	r2, r3
 8023aa6:	dacb      	bge.n	8023a40 <update_box+0x29a>
	  }
      }
 have_c2max:
 8023aa8:	bf00      	nop
   * a box is splittable iff norm > 0.
   * Since the differences are expressed in histogram-cell units,
   * we have to shift back to JSAMPLE units to get consistent distances;
   * after which, we scale according to the selected distance scale factors.
   */
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 8023aaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023aae:	1ad3      	subs	r3, r2, r3
 8023ab0:	00db      	lsls	r3, r3, #3
 8023ab2:	005b      	lsls	r3, r3, #1
 8023ab4:	613b      	str	r3, [r7, #16]
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 8023ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023aba:	1ad3      	subs	r3, r2, r3
 8023abc:	009a      	lsls	r2, r3, #2
 8023abe:	4613      	mov	r3, r2
 8023ac0:	005b      	lsls	r3, r3, #1
 8023ac2:	4413      	add	r3, r2
 8023ac4:	60fb      	str	r3, [r7, #12]
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 8023ac6:	6a3a      	ldr	r2, [r7, #32]
 8023ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023aca:	1ad3      	subs	r3, r2, r3
 8023acc:	00db      	lsls	r3, r3, #3
 8023ace:	60bb      	str	r3, [r7, #8]
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 8023ad0:	693b      	ldr	r3, [r7, #16]
 8023ad2:	fb03 f203 	mul.w	r2, r3, r3
 8023ad6:	68fb      	ldr	r3, [r7, #12]
 8023ad8:	fb03 f303 	mul.w	r3, r3, r3
 8023adc:	441a      	add	r2, r3
 8023ade:	68bb      	ldr	r3, [r7, #8]
 8023ae0:	fb03 f303 	mul.w	r3, r3, r3
 8023ae4:	441a      	add	r2, r3
 8023ae6:	683b      	ldr	r3, [r7, #0]
 8023ae8:	619a      	str	r2, [r3, #24]
  
  /* Now scan remaining volume of box and compute population */
  ccount = 0;
 8023aea:	2300      	movs	r3, #0
 8023aec:	61fb      	str	r3, [r7, #28]
  for (c0 = c0min; c0 <= c0max; c0++)
 8023aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023af0:	643b      	str	r3, [r7, #64]	; 0x40
 8023af2:	e02c      	b.n	8023b4e <update_box+0x3a8>
    for (c1 = c1min; c1 <= c1max; c1++) {
 8023af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023af6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8023af8:	e022      	b.n	8023b40 <update_box+0x39a>
      histp = & histogram[c0][c1][c2min];
 8023afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023afc:	009b      	lsls	r3, r3, #2
 8023afe:	697a      	ldr	r2, [r7, #20]
 8023b00:	4413      	add	r3, r2
 8023b02:	681a      	ldr	r2, [r3, #0]
 8023b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023b06:	019b      	lsls	r3, r3, #6
 8023b08:	441a      	add	r2, r3
 8023b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b0c:	005b      	lsls	r3, r3, #1
 8023b0e:	4413      	add	r3, r2
 8023b10:	647b      	str	r3, [r7, #68]	; 0x44
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 8023b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b14:	63bb      	str	r3, [r7, #56]	; 0x38
 8023b16:	e00c      	b.n	8023b32 <update_box+0x38c>
	if (*histp != 0) {
 8023b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023b1a:	881b      	ldrh	r3, [r3, #0]
 8023b1c:	2b00      	cmp	r3, #0
 8023b1e:	d002      	beq.n	8023b26 <update_box+0x380>
	  ccount++;
 8023b20:	69fb      	ldr	r3, [r7, #28]
 8023b22:	3301      	adds	r3, #1
 8023b24:	61fb      	str	r3, [r7, #28]
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 8023b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023b28:	3301      	adds	r3, #1
 8023b2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8023b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023b2e:	3302      	adds	r3, #2
 8023b30:	647b      	str	r3, [r7, #68]	; 0x44
 8023b32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8023b34:	6a3b      	ldr	r3, [r7, #32]
 8023b36:	429a      	cmp	r2, r3
 8023b38:	ddee      	ble.n	8023b18 <update_box+0x372>
    for (c1 = c1min; c1 <= c1max; c1++) {
 8023b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023b3c:	3301      	adds	r3, #1
 8023b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8023b40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023b44:	429a      	cmp	r2, r3
 8023b46:	ddd8      	ble.n	8023afa <update_box+0x354>
  for (c0 = c0min; c0 <= c0max; c0++)
 8023b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023b4a:	3301      	adds	r3, #1
 8023b4c:	643b      	str	r3, [r7, #64]	; 0x40
 8023b4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8023b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023b52:	429a      	cmp	r2, r3
 8023b54:	ddce      	ble.n	8023af4 <update_box+0x34e>
	}
    }
  boxp->colorcount = ccount;
 8023b56:	683b      	ldr	r3, [r7, #0]
 8023b58:	69fa      	ldr	r2, [r7, #28]
 8023b5a:	61da      	str	r2, [r3, #28]
}
 8023b5c:	bf00      	nop
 8023b5e:	374c      	adds	r7, #76	; 0x4c
 8023b60:	46bd      	mov	sp, r7
 8023b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b66:	4770      	bx	lr

08023b68 <median_cut>:

LOCAL(int)
median_cut (j_decompress_ptr cinfo, boxptr boxlist, int numboxes,
	    int desired_colors)
/* Repeatedly select and split the largest box until we have enough boxes */
{
 8023b68:	b5b0      	push	{r4, r5, r7, lr}
 8023b6a:	b08a      	sub	sp, #40	; 0x28
 8023b6c:	af00      	add	r7, sp, #0
 8023b6e:	60f8      	str	r0, [r7, #12]
 8023b70:	60b9      	str	r1, [r7, #8]
 8023b72:	607a      	str	r2, [r7, #4]
 8023b74:	603b      	str	r3, [r7, #0]
  int n,lb;
  int c0,c1,c2,cmax;
  register boxptr b1,b2;

  while (numboxes < desired_colors) {
 8023b76:	e085      	b.n	8023c84 <median_cut+0x11c>
    /* Select box to split.
     * Current algorithm: by population for first half, then by volume.
     */
    if (numboxes*2 <= desired_colors) {
 8023b78:	687b      	ldr	r3, [r7, #4]
 8023b7a:	005b      	lsls	r3, r3, #1
 8023b7c:	683a      	ldr	r2, [r7, #0]
 8023b7e:	429a      	cmp	r2, r3
 8023b80:	db05      	blt.n	8023b8e <median_cut+0x26>
      b1 = find_biggest_color_pop(boxlist, numboxes);
 8023b82:	6879      	ldr	r1, [r7, #4]
 8023b84:	68b8      	ldr	r0, [r7, #8]
 8023b86:	f7ff fdd5 	bl	8023734 <find_biggest_color_pop>
 8023b8a:	4604      	mov	r4, r0
 8023b8c:	e004      	b.n	8023b98 <median_cut+0x30>
    } else {
      b1 = find_biggest_volume(boxlist, numboxes);
 8023b8e:	6879      	ldr	r1, [r7, #4]
 8023b90:	68b8      	ldr	r0, [r7, #8]
 8023b92:	f7ff fded 	bl	8023770 <find_biggest_volume>
 8023b96:	4604      	mov	r4, r0
    }
    if (b1 == NULL)		/* no splittable boxes left! */
 8023b98:	2c00      	cmp	r4, #0
 8023b9a:	d079      	beq.n	8023c90 <median_cut+0x128>
      break;
    b2 = &boxlist[numboxes];	/* where new box will go */
 8023b9c:	687b      	ldr	r3, [r7, #4]
 8023b9e:	015b      	lsls	r3, r3, #5
 8023ba0:	68ba      	ldr	r2, [r7, #8]
 8023ba2:	18d5      	adds	r5, r2, r3
    /* Copy the color bounds to the new box. */
    b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
 8023ba4:	6863      	ldr	r3, [r4, #4]
 8023ba6:	606b      	str	r3, [r5, #4]
 8023ba8:	68e3      	ldr	r3, [r4, #12]
 8023baa:	60eb      	str	r3, [r5, #12]
 8023bac:	6963      	ldr	r3, [r4, #20]
 8023bae:	616b      	str	r3, [r5, #20]
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 8023bb0:	6823      	ldr	r3, [r4, #0]
 8023bb2:	602b      	str	r3, [r5, #0]
 8023bb4:	68a3      	ldr	r3, [r4, #8]
 8023bb6:	60ab      	str	r3, [r5, #8]
 8023bb8:	6923      	ldr	r3, [r4, #16]
 8023bba:	612b      	str	r3, [r5, #16]
    /* Choose which axis to split the box on.
     * Current algorithm: longest scaled axis.
     * See notes in update_box about scaling distances.
     */
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 8023bbc:	6862      	ldr	r2, [r4, #4]
 8023bbe:	6823      	ldr	r3, [r4, #0]
 8023bc0:	1ad3      	subs	r3, r2, r3
 8023bc2:	00db      	lsls	r3, r3, #3
 8023bc4:	005b      	lsls	r3, r3, #1
 8023bc6:	61fb      	str	r3, [r7, #28]
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 8023bc8:	68e2      	ldr	r2, [r4, #12]
 8023bca:	68a3      	ldr	r3, [r4, #8]
 8023bcc:	1ad3      	subs	r3, r2, r3
 8023bce:	009a      	lsls	r2, r3, #2
 8023bd0:	4613      	mov	r3, r2
 8023bd2:	005b      	lsls	r3, r3, #1
 8023bd4:	4413      	add	r3, r2
 8023bd6:	61bb      	str	r3, [r7, #24]
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 8023bd8:	6962      	ldr	r2, [r4, #20]
 8023bda:	6923      	ldr	r3, [r4, #16]
 8023bdc:	1ad3      	subs	r3, r2, r3
 8023bde:	00db      	lsls	r3, r3, #3
 8023be0:	617b      	str	r3, [r7, #20]
    /* We want to break any ties in favor of green, then red, blue last.
     * This code does the right thing for R,G,B or B,G,R color orders only.
     */
#if RGB_RED == 0
    cmax = c1; n = 1;
 8023be2:	69bb      	ldr	r3, [r7, #24]
 8023be4:	623b      	str	r3, [r7, #32]
 8023be6:	2301      	movs	r3, #1
 8023be8:	627b      	str	r3, [r7, #36]	; 0x24
    if (c0 > cmax) { cmax = c0; n = 0; }
 8023bea:	69fa      	ldr	r2, [r7, #28]
 8023bec:	6a3b      	ldr	r3, [r7, #32]
 8023bee:	429a      	cmp	r2, r3
 8023bf0:	dd03      	ble.n	8023bfa <median_cut+0x92>
 8023bf2:	69fb      	ldr	r3, [r7, #28]
 8023bf4:	623b      	str	r3, [r7, #32]
 8023bf6:	2300      	movs	r3, #0
 8023bf8:	627b      	str	r3, [r7, #36]	; 0x24
    if (c2 > cmax) { n = 2; }
 8023bfa:	697a      	ldr	r2, [r7, #20]
 8023bfc:	6a3b      	ldr	r3, [r7, #32]
 8023bfe:	429a      	cmp	r2, r3
 8023c00:	dd01      	ble.n	8023c06 <median_cut+0x9e>
 8023c02:	2302      	movs	r3, #2
 8023c04:	627b      	str	r3, [r7, #36]	; 0x24
     * Current algorithm: split at halfway point.
     * (Since the box has been shrunk to minimum volume,
     * any split will produce two nonempty subboxes.)
     * Note that lb value is max for lower box, so must be < old max.
     */
    switch (n) {
 8023c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023c08:	2b02      	cmp	r3, #2
 8023c0a:	d023      	beq.n	8023c54 <median_cut+0xec>
 8023c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023c0e:	2b02      	cmp	r3, #2
 8023c10:	dc2d      	bgt.n	8023c6e <median_cut+0x106>
 8023c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023c14:	2b00      	cmp	r3, #0
 8023c16:	d003      	beq.n	8023c20 <median_cut+0xb8>
 8023c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023c1a:	2b01      	cmp	r3, #1
 8023c1c:	d00d      	beq.n	8023c3a <median_cut+0xd2>
 8023c1e:	e026      	b.n	8023c6e <median_cut+0x106>
    case 0:
      lb = (b1->c0max + b1->c0min) / 2;
 8023c20:	6862      	ldr	r2, [r4, #4]
 8023c22:	6823      	ldr	r3, [r4, #0]
 8023c24:	4413      	add	r3, r2
 8023c26:	0fda      	lsrs	r2, r3, #31
 8023c28:	4413      	add	r3, r2
 8023c2a:	105b      	asrs	r3, r3, #1
 8023c2c:	613b      	str	r3, [r7, #16]
      b1->c0max = lb;
 8023c2e:	693b      	ldr	r3, [r7, #16]
 8023c30:	6063      	str	r3, [r4, #4]
      b2->c0min = lb+1;
 8023c32:	693b      	ldr	r3, [r7, #16]
 8023c34:	3301      	adds	r3, #1
 8023c36:	602b      	str	r3, [r5, #0]
      break;
 8023c38:	e019      	b.n	8023c6e <median_cut+0x106>
    case 1:
      lb = (b1->c1max + b1->c1min) / 2;
 8023c3a:	68e2      	ldr	r2, [r4, #12]
 8023c3c:	68a3      	ldr	r3, [r4, #8]
 8023c3e:	4413      	add	r3, r2
 8023c40:	0fda      	lsrs	r2, r3, #31
 8023c42:	4413      	add	r3, r2
 8023c44:	105b      	asrs	r3, r3, #1
 8023c46:	613b      	str	r3, [r7, #16]
      b1->c1max = lb;
 8023c48:	693b      	ldr	r3, [r7, #16]
 8023c4a:	60e3      	str	r3, [r4, #12]
      b2->c1min = lb+1;
 8023c4c:	693b      	ldr	r3, [r7, #16]
 8023c4e:	3301      	adds	r3, #1
 8023c50:	60ab      	str	r3, [r5, #8]
      break;
 8023c52:	e00c      	b.n	8023c6e <median_cut+0x106>
    case 2:
      lb = (b1->c2max + b1->c2min) / 2;
 8023c54:	6962      	ldr	r2, [r4, #20]
 8023c56:	6923      	ldr	r3, [r4, #16]
 8023c58:	4413      	add	r3, r2
 8023c5a:	0fda      	lsrs	r2, r3, #31
 8023c5c:	4413      	add	r3, r2
 8023c5e:	105b      	asrs	r3, r3, #1
 8023c60:	613b      	str	r3, [r7, #16]
      b1->c2max = lb;
 8023c62:	693b      	ldr	r3, [r7, #16]
 8023c64:	6163      	str	r3, [r4, #20]
      b2->c2min = lb+1;
 8023c66:	693b      	ldr	r3, [r7, #16]
 8023c68:	3301      	adds	r3, #1
 8023c6a:	612b      	str	r3, [r5, #16]
      break;
 8023c6c:	bf00      	nop
    }
    /* Update stats for boxes */
    update_box(cinfo, b1);
 8023c6e:	4621      	mov	r1, r4
 8023c70:	68f8      	ldr	r0, [r7, #12]
 8023c72:	f7ff fd98 	bl	80237a6 <update_box>
    update_box(cinfo, b2);
 8023c76:	4629      	mov	r1, r5
 8023c78:	68f8      	ldr	r0, [r7, #12]
 8023c7a:	f7ff fd94 	bl	80237a6 <update_box>
    numboxes++;
 8023c7e:	687b      	ldr	r3, [r7, #4]
 8023c80:	3301      	adds	r3, #1
 8023c82:	607b      	str	r3, [r7, #4]
  while (numboxes < desired_colors) {
 8023c84:	687a      	ldr	r2, [r7, #4]
 8023c86:	683b      	ldr	r3, [r7, #0]
 8023c88:	429a      	cmp	r2, r3
 8023c8a:	f6ff af75 	blt.w	8023b78 <median_cut+0x10>
 8023c8e:	e000      	b.n	8023c92 <median_cut+0x12a>
      break;
 8023c90:	bf00      	nop
  }
  return numboxes;
 8023c92:	687b      	ldr	r3, [r7, #4]
}
 8023c94:	4618      	mov	r0, r3
 8023c96:	3728      	adds	r7, #40	; 0x28
 8023c98:	46bd      	mov	sp, r7
 8023c9a:	bdb0      	pop	{r4, r5, r7, pc}

08023c9c <compute_color>:


LOCAL(void)
compute_color (j_decompress_ptr cinfo, boxptr boxp, int icolor)
/* Compute representative color for a box, put it in colormap[icolor] */
{
 8023c9c:	b480      	push	{r7}
 8023c9e:	b097      	sub	sp, #92	; 0x5c
 8023ca0:	af00      	add	r7, sp, #0
 8023ca2:	60f8      	str	r0, [r7, #12]
 8023ca4:	60b9      	str	r1, [r7, #8]
 8023ca6:	607a      	str	r2, [r7, #4]
  /* Current algorithm: mean weighted by pixels (not colors) */
  /* Note it is important to get the rounding correct! */
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8023ca8:	68fb      	ldr	r3, [r7, #12]
 8023caa:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8023cae:	637b      	str	r3, [r7, #52]	; 0x34
  hist3d histogram = cquantize->histogram;
 8023cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023cb2:	699b      	ldr	r3, [r3, #24]
 8023cb4:	633b      	str	r3, [r7, #48]	; 0x30
  histptr histp;
  int c0,c1,c2;
  int c0min,c0max,c1min,c1max,c2min,c2max;
  long count;
  long total = 0;
 8023cb6:	2300      	movs	r3, #0
 8023cb8:	647b      	str	r3, [r7, #68]	; 0x44
  long c0total = 0;
 8023cba:	2300      	movs	r3, #0
 8023cbc:	643b      	str	r3, [r7, #64]	; 0x40
  long c1total = 0;
 8023cbe:	2300      	movs	r3, #0
 8023cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  long c2total = 0;
 8023cc2:	2300      	movs	r3, #0
 8023cc4:	63bb      	str	r3, [r7, #56]	; 0x38
  
  c0min = boxp->c0min;  c0max = boxp->c0max;
 8023cc6:	68bb      	ldr	r3, [r7, #8]
 8023cc8:	681b      	ldr	r3, [r3, #0]
 8023cca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8023ccc:	68bb      	ldr	r3, [r7, #8]
 8023cce:	685b      	ldr	r3, [r3, #4]
 8023cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8023cd2:	68bb      	ldr	r3, [r7, #8]
 8023cd4:	689b      	ldr	r3, [r3, #8]
 8023cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8023cd8:	68bb      	ldr	r3, [r7, #8]
 8023cda:	68db      	ldr	r3, [r3, #12]
 8023cdc:	623b      	str	r3, [r7, #32]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8023cde:	68bb      	ldr	r3, [r7, #8]
 8023ce0:	691b      	ldr	r3, [r3, #16]
 8023ce2:	61fb      	str	r3, [r7, #28]
 8023ce4:	68bb      	ldr	r3, [r7, #8]
 8023ce6:	695b      	ldr	r3, [r3, #20]
 8023ce8:	61bb      	str	r3, [r7, #24]
  
  for (c0 = c0min; c0 <= c0max; c0++)
 8023cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023cec:	653b      	str	r3, [r7, #80]	; 0x50
 8023cee:	e049      	b.n	8023d84 <compute_color+0xe8>
    for (c1 = c1min; c1 <= c1max; c1++) {
 8023cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8023cf4:	e03f      	b.n	8023d76 <compute_color+0xda>
      histp = & histogram[c0][c1][c2min];
 8023cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023cf8:	009b      	lsls	r3, r3, #2
 8023cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023cfc:	4413      	add	r3, r2
 8023cfe:	681a      	ldr	r2, [r3, #0]
 8023d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023d02:	019b      	lsls	r3, r3, #6
 8023d04:	441a      	add	r2, r3
 8023d06:	69fb      	ldr	r3, [r7, #28]
 8023d08:	005b      	lsls	r3, r3, #1
 8023d0a:	4413      	add	r3, r2
 8023d0c:	657b      	str	r3, [r7, #84]	; 0x54
      for (c2 = c2min; c2 <= c2max; c2++) {
 8023d0e:	69fb      	ldr	r3, [r7, #28]
 8023d10:	64bb      	str	r3, [r7, #72]	; 0x48
 8023d12:	e029      	b.n	8023d68 <compute_color+0xcc>
	if ((count = *histp++) != 0) {
 8023d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8023d16:	1c9a      	adds	r2, r3, #2
 8023d18:	657a      	str	r2, [r7, #84]	; 0x54
 8023d1a:	881b      	ldrh	r3, [r3, #0]
 8023d1c:	617b      	str	r3, [r7, #20]
 8023d1e:	697b      	ldr	r3, [r7, #20]
 8023d20:	2b00      	cmp	r3, #0
 8023d22:	d01e      	beq.n	8023d62 <compute_color+0xc6>
	  total += count;
 8023d24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8023d26:	697b      	ldr	r3, [r7, #20]
 8023d28:	4413      	add	r3, r2
 8023d2a:	647b      	str	r3, [r7, #68]	; 0x44
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 8023d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023d2e:	00db      	lsls	r3, r3, #3
 8023d30:	3304      	adds	r3, #4
 8023d32:	697a      	ldr	r2, [r7, #20]
 8023d34:	fb02 f303 	mul.w	r3, r2, r3
 8023d38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8023d3a:	4413      	add	r3, r2
 8023d3c:	643b      	str	r3, [r7, #64]	; 0x40
	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 8023d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023d40:	009b      	lsls	r3, r3, #2
 8023d42:	3302      	adds	r3, #2
 8023d44:	697a      	ldr	r2, [r7, #20]
 8023d46:	fb02 f303 	mul.w	r3, r2, r3
 8023d4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023d4c:	4413      	add	r3, r2
 8023d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 8023d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8023d52:	00db      	lsls	r3, r3, #3
 8023d54:	3304      	adds	r3, #4
 8023d56:	697a      	ldr	r2, [r7, #20]
 8023d58:	fb02 f303 	mul.w	r3, r2, r3
 8023d5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8023d5e:	4413      	add	r3, r2
 8023d60:	63bb      	str	r3, [r7, #56]	; 0x38
      for (c2 = c2min; c2 <= c2max; c2++) {
 8023d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8023d64:	3301      	adds	r3, #1
 8023d66:	64bb      	str	r3, [r7, #72]	; 0x48
 8023d68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8023d6a:	69bb      	ldr	r3, [r7, #24]
 8023d6c:	429a      	cmp	r2, r3
 8023d6e:	ddd1      	ble.n	8023d14 <compute_color+0x78>
    for (c1 = c1min; c1 <= c1max; c1++) {
 8023d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023d72:	3301      	adds	r3, #1
 8023d74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8023d76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8023d78:	6a3b      	ldr	r3, [r7, #32]
 8023d7a:	429a      	cmp	r2, r3
 8023d7c:	ddbb      	ble.n	8023cf6 <compute_color+0x5a>
  for (c0 = c0min; c0 <= c0max; c0++)
 8023d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023d80:	3301      	adds	r3, #1
 8023d82:	653b      	str	r3, [r7, #80]	; 0x50
 8023d84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8023d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023d88:	429a      	cmp	r2, r3
 8023d8a:	ddb1      	ble.n	8023cf0 <compute_color+0x54>
	}
      }
    }
  
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8023d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023d8e:	105a      	asrs	r2, r3, #1
 8023d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023d92:	441a      	add	r2, r3
 8023d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023d96:	fb92 f1f3 	sdiv	r1, r2, r3
 8023d9a:	68fb      	ldr	r3, [r7, #12]
 8023d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8023da0:	681a      	ldr	r2, [r3, #0]
 8023da2:	687b      	ldr	r3, [r7, #4]
 8023da4:	4413      	add	r3, r2
 8023da6:	b2ca      	uxtb	r2, r1
 8023da8:	701a      	strb	r2, [r3, #0]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 8023daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023dac:	105a      	asrs	r2, r3, #1
 8023dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023db0:	441a      	add	r2, r3
 8023db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023db4:	fb92 f1f3 	sdiv	r1, r2, r3
 8023db8:	68fb      	ldr	r3, [r7, #12]
 8023dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8023dbe:	3304      	adds	r3, #4
 8023dc0:	681a      	ldr	r2, [r3, #0]
 8023dc2:	687b      	ldr	r3, [r7, #4]
 8023dc4:	4413      	add	r3, r2
 8023dc6:	b2ca      	uxtb	r2, r1
 8023dc8:	701a      	strb	r2, [r3, #0]
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 8023dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023dcc:	105a      	asrs	r2, r3, #1
 8023dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023dd0:	441a      	add	r2, r3
 8023dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8023dd4:	fb92 f1f3 	sdiv	r1, r2, r3
 8023dd8:	68fb      	ldr	r3, [r7, #12]
 8023dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8023dde:	3308      	adds	r3, #8
 8023de0:	681a      	ldr	r2, [r3, #0]
 8023de2:	687b      	ldr	r3, [r7, #4]
 8023de4:	4413      	add	r3, r2
 8023de6:	b2ca      	uxtb	r2, r1
 8023de8:	701a      	strb	r2, [r3, #0]
}
 8023dea:	bf00      	nop
 8023dec:	375c      	adds	r7, #92	; 0x5c
 8023dee:	46bd      	mov	sp, r7
 8023df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023df4:	4770      	bx	lr

08023df6 <select_colors>:


LOCAL(void)
select_colors (j_decompress_ptr cinfo, int desired_colors)
/* Master routine for color selection */
{
 8023df6:	b580      	push	{r7, lr}
 8023df8:	b086      	sub	sp, #24
 8023dfa:	af00      	add	r7, sp, #0
 8023dfc:	6078      	str	r0, [r7, #4]
 8023dfe:	6039      	str	r1, [r7, #0]
  boxptr boxlist;
  int numboxes;
  int i;

  /* Allocate workspace for box list */
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8023e00:	687b      	ldr	r3, [r7, #4]
 8023e02:	685b      	ldr	r3, [r3, #4]
 8023e04:	681b      	ldr	r3, [r3, #0]
 8023e06:	683a      	ldr	r2, [r7, #0]
 8023e08:	0152      	lsls	r2, r2, #5
 8023e0a:	2101      	movs	r1, #1
 8023e0c:	6878      	ldr	r0, [r7, #4]
 8023e0e:	4798      	blx	r3
 8023e10:	6138      	str	r0, [r7, #16]
    ((j_common_ptr) cinfo, JPOOL_IMAGE, desired_colors * SIZEOF(box));
  /* Initialize one box containing whole space */
  numboxes = 1;
 8023e12:	2301      	movs	r3, #1
 8023e14:	60fb      	str	r3, [r7, #12]
  boxlist[0].c0min = 0;
 8023e16:	693b      	ldr	r3, [r7, #16]
 8023e18:	2200      	movs	r2, #0
 8023e1a:	601a      	str	r2, [r3, #0]
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 8023e1c:	693b      	ldr	r3, [r7, #16]
 8023e1e:	221f      	movs	r2, #31
 8023e20:	605a      	str	r2, [r3, #4]
  boxlist[0].c1min = 0;
 8023e22:	693b      	ldr	r3, [r7, #16]
 8023e24:	2200      	movs	r2, #0
 8023e26:	609a      	str	r2, [r3, #8]
  boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
 8023e28:	693b      	ldr	r3, [r7, #16]
 8023e2a:	223f      	movs	r2, #63	; 0x3f
 8023e2c:	60da      	str	r2, [r3, #12]
  boxlist[0].c2min = 0;
 8023e2e:	693b      	ldr	r3, [r7, #16]
 8023e30:	2200      	movs	r2, #0
 8023e32:	611a      	str	r2, [r3, #16]
  boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
 8023e34:	693b      	ldr	r3, [r7, #16]
 8023e36:	221f      	movs	r2, #31
 8023e38:	615a      	str	r2, [r3, #20]
  /* Shrink it to actually-used volume and set its statistics */
  update_box(cinfo, & boxlist[0]);
 8023e3a:	6939      	ldr	r1, [r7, #16]
 8023e3c:	6878      	ldr	r0, [r7, #4]
 8023e3e:	f7ff fcb2 	bl	80237a6 <update_box>
  /* Perform median-cut to produce final box list */
  numboxes = median_cut(cinfo, boxlist, numboxes, desired_colors);
 8023e42:	683b      	ldr	r3, [r7, #0]
 8023e44:	68fa      	ldr	r2, [r7, #12]
 8023e46:	6939      	ldr	r1, [r7, #16]
 8023e48:	6878      	ldr	r0, [r7, #4]
 8023e4a:	f7ff fe8d 	bl	8023b68 <median_cut>
 8023e4e:	60f8      	str	r0, [r7, #12]
  /* Compute the representative color for each box, fill colormap */
  for (i = 0; i < numboxes; i++)
 8023e50:	2300      	movs	r3, #0
 8023e52:	617b      	str	r3, [r7, #20]
 8023e54:	e00b      	b.n	8023e6e <select_colors+0x78>
    compute_color(cinfo, & boxlist[i], i);
 8023e56:	697b      	ldr	r3, [r7, #20]
 8023e58:	015b      	lsls	r3, r3, #5
 8023e5a:	693a      	ldr	r2, [r7, #16]
 8023e5c:	4413      	add	r3, r2
 8023e5e:	697a      	ldr	r2, [r7, #20]
 8023e60:	4619      	mov	r1, r3
 8023e62:	6878      	ldr	r0, [r7, #4]
 8023e64:	f7ff ff1a 	bl	8023c9c <compute_color>
  for (i = 0; i < numboxes; i++)
 8023e68:	697b      	ldr	r3, [r7, #20]
 8023e6a:	3301      	adds	r3, #1
 8023e6c:	617b      	str	r3, [r7, #20]
 8023e6e:	697a      	ldr	r2, [r7, #20]
 8023e70:	68fb      	ldr	r3, [r7, #12]
 8023e72:	429a      	cmp	r2, r3
 8023e74:	dbef      	blt.n	8023e56 <select_colors+0x60>
  cinfo->actual_number_of_colors = numboxes;
 8023e76:	687b      	ldr	r3, [r7, #4]
 8023e78:	68fa      	ldr	r2, [r7, #12]
 8023e7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 8023e7e:	687b      	ldr	r3, [r7, #4]
 8023e80:	681b      	ldr	r3, [r3, #0]
 8023e82:	2262      	movs	r2, #98	; 0x62
 8023e84:	615a      	str	r2, [r3, #20]
 8023e86:	687b      	ldr	r3, [r7, #4]
 8023e88:	681b      	ldr	r3, [r3, #0]
 8023e8a:	68fa      	ldr	r2, [r7, #12]
 8023e8c:	619a      	str	r2, [r3, #24]
 8023e8e:	687b      	ldr	r3, [r7, #4]
 8023e90:	681b      	ldr	r3, [r3, #0]
 8023e92:	685b      	ldr	r3, [r3, #4]
 8023e94:	2101      	movs	r1, #1
 8023e96:	6878      	ldr	r0, [r7, #4]
 8023e98:	4798      	blx	r3
}
 8023e9a:	bf00      	nop
 8023e9c:	3718      	adds	r7, #24
 8023e9e:	46bd      	mov	sp, r7
 8023ea0:	bd80      	pop	{r7, pc}

08023ea2 <find_nearby_colors>:
 * candidate colormap entries is returned, and their colormap indexes are
 * placed in colorlist[].
 * This routine uses Heckbert's "locally sorted search" criterion to select
 * the colors that need further consideration.
 */
{
 8023ea2:	b490      	push	{r4, r7}
 8023ea4:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 8023ea8:	af00      	add	r7, sp, #0
 8023eaa:	f107 040c 	add.w	r4, r7, #12
 8023eae:	6020      	str	r0, [r4, #0]
 8023eb0:	f107 0008 	add.w	r0, r7, #8
 8023eb4:	6001      	str	r1, [r0, #0]
 8023eb6:	1d39      	adds	r1, r7, #4
 8023eb8:	600a      	str	r2, [r1, #0]
 8023eba:	463a      	mov	r2, r7
 8023ebc:	6013      	str	r3, [r2, #0]
  int numcolors = cinfo->actual_number_of_colors;
 8023ebe:	f107 030c 	add.w	r3, r7, #12
 8023ec2:	681b      	ldr	r3, [r3, #0]
 8023ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8023ec8:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
   * Actually we compute the coordinates of the center of the upper-corner
   * histogram cell, which are the upper bounds of the volume we care about.
   * Note that since ">>" rounds down, the "center" values may be closer to
   * min than to max; hence comparisons to them must be "<=", not "<".
   */
  maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
 8023ecc:	f107 0308 	add.w	r3, r7, #8
 8023ed0:	681b      	ldr	r3, [r3, #0]
 8023ed2:	3318      	adds	r3, #24
 8023ed4:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
  centerc0 = (minc0 + maxc0) >> 1;
 8023ed8:	f107 0308 	add.w	r3, r7, #8
 8023edc:	681a      	ldr	r2, [r3, #0]
 8023ede:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8023ee2:	4413      	add	r3, r2
 8023ee4:	105b      	asrs	r3, r3, #1
 8023ee6:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
  maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 8023eea:	1d3b      	adds	r3, r7, #4
 8023eec:	681b      	ldr	r3, [r3, #0]
 8023eee:	331c      	adds	r3, #28
 8023ef0:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
  centerc1 = (minc1 + maxc1) >> 1;
 8023ef4:	1d3b      	adds	r3, r7, #4
 8023ef6:	681a      	ldr	r2, [r3, #0]
 8023ef8:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8023efc:	4413      	add	r3, r2
 8023efe:	105b      	asrs	r3, r3, #1
 8023f00:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
  maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 8023f04:	463b      	mov	r3, r7
 8023f06:	681b      	ldr	r3, [r3, #0]
 8023f08:	3318      	adds	r3, #24
 8023f0a:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
  centerc2 = (minc2 + maxc2) >> 1;
 8023f0e:	463b      	mov	r3, r7
 8023f10:	681a      	ldr	r2, [r3, #0]
 8023f12:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8023f16:	4413      	add	r3, r2
 8023f18:	105b      	asrs	r3, r3, #1
 8023f1a:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
   *  2. its maximum squared-distance to any point in the update box.
   * Both of these can be found by considering only the corners of the box.
   * We save the minimum distance for each color in mindist[];
   * only the smallest maximum distance is of interest.
   */
  minmaxdist = 0x7FFFFFFFL;
 8023f1e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023f22:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c

  for (i = 0; i < numcolors; i++) {
 8023f26:	2300      	movs	r3, #0
 8023f28:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 8023f2c:	e1a8      	b.n	8024280 <find_nearby_colors+0x3de>
    /* We compute the squared-c0-distance term, then add in the other two. */
    x = GETJSAMPLE(cinfo->colormap[0][i]);
 8023f2e:	f107 030c 	add.w	r3, r7, #12
 8023f32:	681b      	ldr	r3, [r3, #0]
 8023f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8023f38:	681a      	ldr	r2, [r3, #0]
 8023f3a:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8023f3e:	4413      	add	r3, r2
 8023f40:	781b      	ldrb	r3, [r3, #0]
 8023f42:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    if (x < minc0) {
 8023f46:	f107 0308 	add.w	r3, r7, #8
 8023f4a:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8023f4e:	681b      	ldr	r3, [r3, #0]
 8023f50:	429a      	cmp	r2, r3
 8023f52:	da1d      	bge.n	8023f90 <find_nearby_colors+0xee>
      tdist = (x - minc0) * C0_SCALE;
 8023f54:	f107 0308 	add.w	r3, r7, #8
 8023f58:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8023f5c:	681b      	ldr	r3, [r3, #0]
 8023f5e:	1ad3      	subs	r3, r2, r3
 8023f60:	005b      	lsls	r3, r3, #1
 8023f62:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
      min_dist = tdist*tdist;
 8023f66:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8023f6a:	fb03 f303 	mul.w	r3, r3, r3
 8023f6e:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
      tdist = (x - maxc0) * C0_SCALE;
 8023f72:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8023f76:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8023f7a:	1ad3      	subs	r3, r2, r3
 8023f7c:	005b      	lsls	r3, r3, #1
 8023f7e:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
      max_dist = tdist*tdist;
 8023f82:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8023f86:	fb03 f303 	mul.w	r3, r3, r3
 8023f8a:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8023f8e:	e04a      	b.n	8024026 <find_nearby_colors+0x184>
    } else if (x > maxc0) {
 8023f90:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8023f94:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8023f98:	429a      	cmp	r2, r3
 8023f9a:	dd1d      	ble.n	8023fd8 <find_nearby_colors+0x136>
      tdist = (x - maxc0) * C0_SCALE;
 8023f9c:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8023fa0:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8023fa4:	1ad3      	subs	r3, r2, r3
 8023fa6:	005b      	lsls	r3, r3, #1
 8023fa8:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
      min_dist = tdist*tdist;
 8023fac:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8023fb0:	fb03 f303 	mul.w	r3, r3, r3
 8023fb4:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
      tdist = (x - minc0) * C0_SCALE;
 8023fb8:	f107 0308 	add.w	r3, r7, #8
 8023fbc:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8023fc0:	681b      	ldr	r3, [r3, #0]
 8023fc2:	1ad3      	subs	r3, r2, r3
 8023fc4:	005b      	lsls	r3, r3, #1
 8023fc6:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
      max_dist = tdist*tdist;
 8023fca:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8023fce:	fb03 f303 	mul.w	r3, r3, r3
 8023fd2:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8023fd6:	e026      	b.n	8024026 <find_nearby_colors+0x184>
    } else {
      /* within cell range so no contribution to min_dist */
      min_dist = 0;
 8023fd8:	2300      	movs	r3, #0
 8023fda:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
      if (x <= centerc0) {
 8023fde:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8023fe2:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8023fe6:	429a      	cmp	r2, r3
 8023fe8:	dc0e      	bgt.n	8024008 <find_nearby_colors+0x166>
	tdist = (x - maxc0) * C0_SCALE;
 8023fea:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8023fee:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8023ff2:	1ad3      	subs	r3, r2, r3
 8023ff4:	005b      	lsls	r3, r3, #1
 8023ff6:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	max_dist = tdist*tdist;
 8023ffa:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8023ffe:	fb03 f303 	mul.w	r3, r3, r3
 8024002:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8024006:	e00e      	b.n	8024026 <find_nearby_colors+0x184>
      } else {
	tdist = (x - minc0) * C0_SCALE;
 8024008:	f107 0308 	add.w	r3, r7, #8
 802400c:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8024010:	681b      	ldr	r3, [r3, #0]
 8024012:	1ad3      	subs	r3, r2, r3
 8024014:	005b      	lsls	r3, r3, #1
 8024016:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	max_dist = tdist*tdist;
 802401a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 802401e:	fb03 f303 	mul.w	r3, r3, r3
 8024022:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
      }
    }

    x = GETJSAMPLE(cinfo->colormap[1][i]);
 8024026:	f107 030c 	add.w	r3, r7, #12
 802402a:	681b      	ldr	r3, [r3, #0]
 802402c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8024030:	3304      	adds	r3, #4
 8024032:	681a      	ldr	r2, [r3, #0]
 8024034:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8024038:	4413      	add	r3, r2
 802403a:	781b      	ldrb	r3, [r3, #0]
 802403c:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    if (x < minc1) {
 8024040:	1d3b      	adds	r3, r7, #4
 8024042:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8024046:	681b      	ldr	r3, [r3, #0]
 8024048:	429a      	cmp	r2, r3
 802404a:	da26      	bge.n	802409a <find_nearby_colors+0x1f8>
      tdist = (x - minc1) * C1_SCALE;
 802404c:	1d3b      	adds	r3, r7, #4
 802404e:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8024052:	681b      	ldr	r3, [r3, #0]
 8024054:	1ad2      	subs	r2, r2, r3
 8024056:	4613      	mov	r3, r2
 8024058:	005b      	lsls	r3, r3, #1
 802405a:	4413      	add	r3, r2
 802405c:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
      min_dist += tdist*tdist;
 8024060:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8024064:	fb03 f303 	mul.w	r3, r3, r3
 8024068:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 802406c:	4413      	add	r3, r2
 802406e:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
      tdist = (x - maxc1) * C1_SCALE;
 8024072:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8024076:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 802407a:	1ad2      	subs	r2, r2, r3
 802407c:	4613      	mov	r3, r2
 802407e:	005b      	lsls	r3, r3, #1
 8024080:	4413      	add	r3, r2
 8024082:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
      max_dist += tdist*tdist;
 8024086:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 802408a:	fb03 f303 	mul.w	r3, r3, r3
 802408e:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8024092:	4413      	add	r3, r2
 8024094:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8024098:	e059      	b.n	802414e <find_nearby_colors+0x2ac>
    } else if (x > maxc1) {
 802409a:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 802409e:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80240a2:	429a      	cmp	r2, r3
 80240a4:	dd26      	ble.n	80240f4 <find_nearby_colors+0x252>
      tdist = (x - maxc1) * C1_SCALE;
 80240a6:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 80240aa:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80240ae:	1ad2      	subs	r2, r2, r3
 80240b0:	4613      	mov	r3, r2
 80240b2:	005b      	lsls	r3, r3, #1
 80240b4:	4413      	add	r3, r2
 80240b6:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
      min_dist += tdist*tdist;
 80240ba:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80240be:	fb03 f303 	mul.w	r3, r3, r3
 80240c2:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 80240c6:	4413      	add	r3, r2
 80240c8:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
      tdist = (x - minc1) * C1_SCALE;
 80240cc:	1d3b      	adds	r3, r7, #4
 80240ce:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 80240d2:	681b      	ldr	r3, [r3, #0]
 80240d4:	1ad2      	subs	r2, r2, r3
 80240d6:	4613      	mov	r3, r2
 80240d8:	005b      	lsls	r3, r3, #1
 80240da:	4413      	add	r3, r2
 80240dc:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
      max_dist += tdist*tdist;
 80240e0:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80240e4:	fb03 f303 	mul.w	r3, r3, r3
 80240e8:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 80240ec:	4413      	add	r3, r2
 80240ee:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 80240f2:	e02c      	b.n	802414e <find_nearby_colors+0x2ac>
    } else {
      /* within cell range so no contribution to min_dist */
      if (x <= centerc1) {
 80240f4:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 80240f8:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 80240fc:	429a      	cmp	r2, r3
 80240fe:	dc13      	bgt.n	8024128 <find_nearby_colors+0x286>
	tdist = (x - maxc1) * C1_SCALE;
 8024100:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8024104:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8024108:	1ad2      	subs	r2, r2, r3
 802410a:	4613      	mov	r3, r2
 802410c:	005b      	lsls	r3, r3, #1
 802410e:	4413      	add	r3, r2
 8024110:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	max_dist += tdist*tdist;
 8024114:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8024118:	fb03 f303 	mul.w	r3, r3, r3
 802411c:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8024120:	4413      	add	r3, r2
 8024122:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8024126:	e012      	b.n	802414e <find_nearby_colors+0x2ac>
      } else {
	tdist = (x - minc1) * C1_SCALE;
 8024128:	1d3b      	adds	r3, r7, #4
 802412a:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 802412e:	681b      	ldr	r3, [r3, #0]
 8024130:	1ad2      	subs	r2, r2, r3
 8024132:	4613      	mov	r3, r2
 8024134:	005b      	lsls	r3, r3, #1
 8024136:	4413      	add	r3, r2
 8024138:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	max_dist += tdist*tdist;
 802413c:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8024140:	fb03 f303 	mul.w	r3, r3, r3
 8024144:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8024148:	4413      	add	r3, r2
 802414a:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
      }
    }

    x = GETJSAMPLE(cinfo->colormap[2][i]);
 802414e:	f107 030c 	add.w	r3, r7, #12
 8024152:	681b      	ldr	r3, [r3, #0]
 8024154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8024158:	3308      	adds	r3, #8
 802415a:	681a      	ldr	r2, [r3, #0]
 802415c:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8024160:	4413      	add	r3, r2
 8024162:	781b      	ldrb	r3, [r3, #0]
 8024164:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    if (x < minc2) {
 8024168:	463b      	mov	r3, r7
 802416a:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 802416e:	681b      	ldr	r3, [r3, #0]
 8024170:	429a      	cmp	r2, r3
 8024172:	da20      	bge.n	80241b6 <find_nearby_colors+0x314>
      tdist = (x - minc2) * C2_SCALE;
 8024174:	463b      	mov	r3, r7
 8024176:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 802417a:	681b      	ldr	r3, [r3, #0]
 802417c:	1ad3      	subs	r3, r2, r3
 802417e:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
      min_dist += tdist*tdist;
 8024182:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8024186:	fb03 f303 	mul.w	r3, r3, r3
 802418a:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 802418e:	4413      	add	r3, r2
 8024190:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
      tdist = (x - maxc2) * C2_SCALE;
 8024194:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8024198:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 802419c:	1ad3      	subs	r3, r2, r3
 802419e:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
      max_dist += tdist*tdist;
 80241a2:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80241a6:	fb03 f303 	mul.w	r3, r3, r3
 80241aa:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 80241ae:	4413      	add	r3, r2
 80241b0:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 80241b4:	e04d      	b.n	8024252 <find_nearby_colors+0x3b0>
    } else if (x > maxc2) {
 80241b6:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 80241ba:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80241be:	429a      	cmp	r2, r3
 80241c0:	dd20      	ble.n	8024204 <find_nearby_colors+0x362>
      tdist = (x - maxc2) * C2_SCALE;
 80241c2:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 80241c6:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80241ca:	1ad3      	subs	r3, r2, r3
 80241cc:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
      min_dist += tdist*tdist;
 80241d0:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80241d4:	fb03 f303 	mul.w	r3, r3, r3
 80241d8:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 80241dc:	4413      	add	r3, r2
 80241de:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
      tdist = (x - minc2) * C2_SCALE;
 80241e2:	463b      	mov	r3, r7
 80241e4:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 80241e8:	681b      	ldr	r3, [r3, #0]
 80241ea:	1ad3      	subs	r3, r2, r3
 80241ec:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
      max_dist += tdist*tdist;
 80241f0:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80241f4:	fb03 f303 	mul.w	r3, r3, r3
 80241f8:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 80241fc:	4413      	add	r3, r2
 80241fe:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8024202:	e026      	b.n	8024252 <find_nearby_colors+0x3b0>
    } else {
      /* within cell range so no contribution to min_dist */
      if (x <= centerc2) {
 8024204:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8024208:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 802420c:	429a      	cmp	r2, r3
 802420e:	dc10      	bgt.n	8024232 <find_nearby_colors+0x390>
	tdist = (x - maxc2) * C2_SCALE;
 8024210:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8024214:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8024218:	1ad3      	subs	r3, r2, r3
 802421a:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	max_dist += tdist*tdist;
 802421e:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8024222:	fb03 f303 	mul.w	r3, r3, r3
 8024226:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 802422a:	4413      	add	r3, r2
 802422c:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8024230:	e00f      	b.n	8024252 <find_nearby_colors+0x3b0>
      } else {
	tdist = (x - minc2) * C2_SCALE;
 8024232:	463b      	mov	r3, r7
 8024234:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 8024238:	681b      	ldr	r3, [r3, #0]
 802423a:	1ad3      	subs	r3, r2, r3
 802423c:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	max_dist += tdist*tdist;
 8024240:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8024244:	fb03 f303 	mul.w	r3, r3, r3
 8024248:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 802424c:	4413      	add	r3, r2
 802424e:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
      }
    }

    mindist[i] = min_dist;	/* save away the results */
 8024252:	f107 0310 	add.w	r3, r7, #16
 8024256:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 802425a:	f8d7 1438 	ldr.w	r1, [r7, #1080]	; 0x438
 802425e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    if (max_dist < minmaxdist)
 8024262:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8024266:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 802426a:	429a      	cmp	r2, r3
 802426c:	da03      	bge.n	8024276 <find_nearby_colors+0x3d4>
      minmaxdist = max_dist;
 802426e:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8024272:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
  for (i = 0; i < numcolors; i++) {
 8024276:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 802427a:	3301      	adds	r3, #1
 802427c:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 8024280:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 8024284:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8024288:	429a      	cmp	r2, r3
 802428a:	f6ff ae50 	blt.w	8023f2e <find_nearby_colors+0x8c>

  /* Now we know that no cell in the update box is more than minmaxdist
   * away from some colormap entry.  Therefore, only colors that are
   * within minmaxdist of some part of the box need be considered.
   */
  ncolors = 0;
 802428e:	2300      	movs	r3, #0
 8024290:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
  for (i = 0; i < numcolors; i++) {
 8024294:	2300      	movs	r3, #0
 8024296:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 802429a:	e01b      	b.n	80242d4 <find_nearby_colors+0x432>
    if (mindist[i] <= minmaxdist)
 802429c:	f107 0310 	add.w	r3, r7, #16
 80242a0:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 80242a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80242a8:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
 80242ac:	429a      	cmp	r2, r3
 80242ae:	db0c      	blt.n	80242ca <find_nearby_colors+0x428>
      colorlist[ncolors++] = (JSAMPLE) i;
 80242b0:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80242b4:	1c5a      	adds	r2, r3, #1
 80242b6:	f8c7 2440 	str.w	r2, [r7, #1088]	; 0x440
 80242ba:	461a      	mov	r2, r3
 80242bc:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80242c0:	4413      	add	r3, r2
 80242c2:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 80242c6:	b2d2      	uxtb	r2, r2
 80242c8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < numcolors; i++) {
 80242ca:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 80242ce:	3301      	adds	r3, #1
 80242d0:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 80242d4:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 80242d8:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80242dc:	429a      	cmp	r2, r3
 80242de:	dbdd      	blt.n	802429c <find_nearby_colors+0x3fa>
  }
  return ncolors;
 80242e0:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
}
 80242e4:	4618      	mov	r0, r3
 80242e6:	f507 6789 	add.w	r7, r7, #1096	; 0x448
 80242ea:	46bd      	mov	sp, r7
 80242ec:	bc90      	pop	{r4, r7}
 80242ee:	4770      	bx	lr

080242f0 <find_best_colors>:
 * given the list of candidate colors prepared by find_nearby_colors.
 * Return the indexes of the closest entries in the bestcolor[] array.
 * This routine uses Thomas' incremental distance calculation method to
 * find the distance from a colormap entry to successive cells in the box.
 */
{
 80242f0:	b4f0      	push	{r4, r5, r6, r7}
 80242f2:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 80242f6:	af00      	add	r7, sp, #0
 80242f8:	f107 040c 	add.w	r4, r7, #12
 80242fc:	6020      	str	r0, [r4, #0]
 80242fe:	f107 0008 	add.w	r0, r7, #8
 8024302:	6001      	str	r1, [r0, #0]
 8024304:	1d39      	adds	r1, r7, #4
 8024306:	600a      	str	r2, [r1, #0]
 8024308:	463a      	mov	r2, r7
 802430a:	6013      	str	r3, [r2, #0]
  INT32 inc0, inc1, inc2;	/* initial values for increments */
  /* This array holds the distance to the nearest-so-far color for each cell */
  INT32 bestdist[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Initialize best-distance for each cell of the update box */
  bptr = bestdist;
 802430c:	f107 0414 	add.w	r4, r7, #20
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8024310:	237f      	movs	r3, #127	; 0x7f
 8024312:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8024316:	e009      	b.n	802432c <find_best_colors+0x3c>
    *bptr++ = 0x7FFFFFFFL;
 8024318:	4623      	mov	r3, r4
 802431a:	1d1c      	adds	r4, r3, #4
 802431c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8024320:	601a      	str	r2, [r3, #0]
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8024322:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8024326:	3b01      	subs	r3, #1
 8024328:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 802432c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8024330:	2b00      	cmp	r3, #0
 8024332:	daf1      	bge.n	8024318 <find_best_colors+0x28>
  /* Nominal steps between cell centers ("x" in Thomas article) */
#define STEP_C0  ((1 << C0_SHIFT) * C0_SCALE)
#define STEP_C1  ((1 << C1_SHIFT) * C1_SCALE)
#define STEP_C2  ((1 << C2_SHIFT) * C2_SCALE)
  
  for (i = 0; i < numcolors; i++) {
 8024334:	2300      	movs	r3, #0
 8024336:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 802433a:	e0d9      	b.n	80244f0 <find_best_colors+0x200>
    icolor = GETJSAMPLE(colorlist[i]);
 802433c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8024340:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8024344:	4413      	add	r3, r2
 8024346:	781b      	ldrb	r3, [r3, #0]
 8024348:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
    /* Compute (square of) distance from minc0/c1/c2 to this color */
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 802434c:	f107 030c 	add.w	r3, r7, #12
 8024350:	681b      	ldr	r3, [r3, #0]
 8024352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8024356:	681a      	ldr	r2, [r3, #0]
 8024358:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 802435c:	4413      	add	r3, r2
 802435e:	781b      	ldrb	r3, [r3, #0]
 8024360:	461a      	mov	r2, r3
 8024362:	f107 0308 	add.w	r3, r7, #8
 8024366:	681b      	ldr	r3, [r3, #0]
 8024368:	1a9b      	subs	r3, r3, r2
 802436a:	005b      	lsls	r3, r3, #1
 802436c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    dist0 = inc0*inc0;
 8024370:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8024374:	fb03 f303 	mul.w	r3, r3, r3
 8024378:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 802437c:	f107 030c 	add.w	r3, r7, #12
 8024380:	681b      	ldr	r3, [r3, #0]
 8024382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8024386:	3304      	adds	r3, #4
 8024388:	681a      	ldr	r2, [r3, #0]
 802438a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 802438e:	4413      	add	r3, r2
 8024390:	781b      	ldrb	r3, [r3, #0]
 8024392:	461a      	mov	r2, r3
 8024394:	1d3b      	adds	r3, r7, #4
 8024396:	681b      	ldr	r3, [r3, #0]
 8024398:	1a9a      	subs	r2, r3, r2
 802439a:	4613      	mov	r3, r2
 802439c:	005b      	lsls	r3, r3, #1
 802439e:	4413      	add	r3, r2
 80243a0:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    dist0 += inc1*inc1;
 80243a4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80243a8:	fb03 f303 	mul.w	r3, r3, r3
 80243ac:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 80243b0:	4413      	add	r3, r2
 80243b2:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 80243b6:	f107 030c 	add.w	r3, r7, #12
 80243ba:	681b      	ldr	r3, [r3, #0]
 80243bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80243c0:	3308      	adds	r3, #8
 80243c2:	681a      	ldr	r2, [r3, #0]
 80243c4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80243c8:	4413      	add	r3, r2
 80243ca:	781b      	ldrb	r3, [r3, #0]
 80243cc:	461a      	mov	r2, r3
 80243ce:	463b      	mov	r3, r7
 80243d0:	681b      	ldr	r3, [r3, #0]
 80243d2:	1a9b      	subs	r3, r3, r2
 80243d4:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    dist0 += inc2*inc2;
 80243d8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80243dc:	fb03 f303 	mul.w	r3, r3, r3
 80243e0:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 80243e4:	4413      	add	r3, r2
 80243e6:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    /* Form the initial difference increments */
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 80243ea:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80243ee:	3308      	adds	r3, #8
 80243f0:	015b      	lsls	r3, r3, #5
 80243f2:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 80243f6:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80243fa:	4613      	mov	r3, r2
 80243fc:	005b      	lsls	r3, r3, #1
 80243fe:	4413      	add	r3, r2
 8024400:	00db      	lsls	r3, r3, #3
 8024402:	3390      	adds	r3, #144	; 0x90
 8024404:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8024408:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 802440c:	3304      	adds	r3, #4
 802440e:	011b      	lsls	r3, r3, #4
 8024410:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    /* Now loop over all cells in box, updating distance per Thomas method */
    bptr = bestdist;
 8024414:	f107 0414 	add.w	r4, r7, #20
    cptr = bestcolor;
 8024418:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 802441c:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    xx0 = inc0;
 8024420:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8024424:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8024428:	2303      	movs	r3, #3
 802442a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 802442e:	e056      	b.n	80244de <find_best_colors+0x1ee>
      dist1 = dist0;
 8024430:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8024434:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
      xx1 = inc1;
 8024438:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 802443c:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
      for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 8024440:	2307      	movs	r3, #7
 8024442:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8024446:	e034      	b.n	80244b2 <find_best_colors+0x1c2>
	dist2 = dist1;
 8024448:	f8d7 522c 	ldr.w	r5, [r7, #556]	; 0x22c
	xx2 = inc2;
 802444c:	f8d7 6214 	ldr.w	r6, [r7, #532]	; 0x214
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8024450:	2303      	movs	r3, #3
 8024452:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8024456:	e016      	b.n	8024486 <find_best_colors+0x196>
	  if (dist2 < *bptr) {
 8024458:	6823      	ldr	r3, [r4, #0]
 802445a:	429d      	cmp	r5, r3
 802445c:	da06      	bge.n	802446c <find_best_colors+0x17c>
	    *bptr = dist2;
 802445e:	6025      	str	r5, [r4, #0]
	    *cptr = (JSAMPLE) icolor;
 8024460:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8024464:	b2da      	uxtb	r2, r3
 8024466:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 802446a:	701a      	strb	r2, [r3, #0]
	  }
	  dist2 += xx2;
 802446c:	4435      	add	r5, r6
	  xx2 += 2 * STEP_C2 * STEP_C2;
 802446e:	3680      	adds	r6, #128	; 0x80
	  bptr++;
 8024470:	3404      	adds	r4, #4
	  cptr++;
 8024472:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8024476:	3301      	adds	r3, #1
 8024478:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 802447c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8024480:	3b01      	subs	r3, #1
 8024482:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8024486:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 802448a:	2b00      	cmp	r3, #0
 802448c:	dae4      	bge.n	8024458 <find_best_colors+0x168>
	}
	dist1 += xx1;
 802448e:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8024492:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8024496:	4413      	add	r3, r2
 8024498:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	xx1 += 2 * STEP_C1 * STEP_C1;
 802449c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80244a0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80244a4:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
      for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 80244a8:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80244ac:	3b01      	subs	r3, #1
 80244ae:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 80244b2:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80244b6:	2b00      	cmp	r3, #0
 80244b8:	dac6      	bge.n	8024448 <find_best_colors+0x158>
      }
      dist0 += xx0;
 80244ba:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 80244be:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80244c2:	4413      	add	r3, r2
 80244c4:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
      xx0 += 2 * STEP_C0 * STEP_C0;
 80244c8:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80244cc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80244d0:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 80244d4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80244d8:	3b01      	subs	r3, #1
 80244da:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80244de:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80244e2:	2b00      	cmp	r3, #0
 80244e4:	daa4      	bge.n	8024430 <find_best_colors+0x140>
  for (i = 0; i < numcolors; i++) {
 80244e6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80244ea:	3301      	adds	r3, #1
 80244ec:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 80244f0:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80244f4:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80244f8:	429a      	cmp	r2, r3
 80244fa:	f6ff af1f 	blt.w	802433c <find_best_colors+0x4c>
    }
  }
}
 80244fe:	bf00      	nop
 8024500:	bf00      	nop
 8024502:	f507 7712 	add.w	r7, r7, #584	; 0x248
 8024506:	46bd      	mov	sp, r7
 8024508:	bcf0      	pop	{r4, r5, r6, r7}
 802450a:	4770      	bx	lr

0802450c <fill_inverse_cmap>:
LOCAL(void)
fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
/* Fill the inverse-colormap entries in the update box that contains */
/* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
/* we can fill as many others as we wish.) */
{
 802450c:	b5b0      	push	{r4, r5, r7, lr}
 802450e:	b0f2      	sub	sp, #456	; 0x1c8
 8024510:	af04      	add	r7, sp, #16
 8024512:	f107 040c 	add.w	r4, r7, #12
 8024516:	6020      	str	r0, [r4, #0]
 8024518:	f107 0008 	add.w	r0, r7, #8
 802451c:	6001      	str	r1, [r0, #0]
 802451e:	1d39      	adds	r1, r7, #4
 8024520:	600a      	str	r2, [r1, #0]
 8024522:	463a      	mov	r2, r7
 8024524:	6013      	str	r3, [r2, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8024526:	f107 030c 	add.w	r3, r7, #12
 802452a:	681b      	ldr	r3, [r3, #0]
 802452c:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8024530:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  hist3d histogram = cquantize->histogram;
 8024534:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8024538:	699b      	ldr	r3, [r3, #24]
 802453a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  int numcolors;		/* number of candidate colors */
  /* This array holds the actually closest colormap index for each cell. */
  JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Convert cell coordinates to update box ID */
  c0 >>= BOX_C0_LOG;
 802453e:	f107 0308 	add.w	r3, r7, #8
 8024542:	f107 0208 	add.w	r2, r7, #8
 8024546:	6812      	ldr	r2, [r2, #0]
 8024548:	1092      	asrs	r2, r2, #2
 802454a:	601a      	str	r2, [r3, #0]
  c1 >>= BOX_C1_LOG;
 802454c:	1d3b      	adds	r3, r7, #4
 802454e:	1d3a      	adds	r2, r7, #4
 8024550:	6812      	ldr	r2, [r2, #0]
 8024552:	10d2      	asrs	r2, r2, #3
 8024554:	601a      	str	r2, [r3, #0]
  c2 >>= BOX_C2_LOG;
 8024556:	463b      	mov	r3, r7
 8024558:	463a      	mov	r2, r7
 802455a:	6812      	ldr	r2, [r2, #0]
 802455c:	1092      	asrs	r2, r2, #2
 802455e:	601a      	str	r2, [r3, #0]

  /* Compute true coordinates of update box's origin corner.
   * Actually we compute the coordinates of the center of the corner
   * histogram cell, which are the lower bounds of the volume we care about.
   */
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 8024560:	f107 0308 	add.w	r3, r7, #8
 8024564:	681b      	ldr	r3, [r3, #0]
 8024566:	015b      	lsls	r3, r3, #5
 8024568:	3304      	adds	r3, #4
 802456a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 802456e:	1d3b      	adds	r3, r7, #4
 8024570:	681b      	ldr	r3, [r3, #0]
 8024572:	015b      	lsls	r3, r3, #5
 8024574:	3302      	adds	r3, #2
 8024576:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 802457a:	463b      	mov	r3, r7
 802457c:	681b      	ldr	r3, [r3, #0]
 802457e:	015b      	lsls	r3, r3, #5
 8024580:	3304      	adds	r3, #4
 8024582:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
  
  /* Determine which colormap entries are close enough to be candidates
   * for the nearest entry to some cell in the update box.
   */
  numcolors = find_nearby_colors(cinfo, minc0, minc1, minc2, colorlist);
 8024586:	f107 000c 	add.w	r0, r7, #12
 802458a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 802458e:	9300      	str	r3, [sp, #0]
 8024590:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8024594:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8024598:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 802459c:	6800      	ldr	r0, [r0, #0]
 802459e:	f7ff fc80 	bl	8023ea2 <find_nearby_colors>
 80245a2:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194

  /* Determine the actually nearest colors. */
  find_best_colors(cinfo, minc0, minc1, minc2, numcolors, colorlist,
 80245a6:	f107 000c 	add.w	r0, r7, #12
 80245aa:	f107 0314 	add.w	r3, r7, #20
 80245ae:	9302      	str	r3, [sp, #8]
 80245b0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80245b4:	9301      	str	r3, [sp, #4]
 80245b6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80245ba:	9300      	str	r3, [sp, #0]
 80245bc:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80245c0:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80245c4:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 80245c8:	6800      	ldr	r0, [r0, #0]
 80245ca:	f7ff fe91 	bl	80242f0 <find_best_colors>
		   bestcolor);

  /* Save the best color numbers (plus 1) in the main cache array */
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 80245ce:	f107 0308 	add.w	r3, r7, #8
 80245d2:	f107 0208 	add.w	r2, r7, #8
 80245d6:	6812      	ldr	r2, [r2, #0]
 80245d8:	0092      	lsls	r2, r2, #2
 80245da:	601a      	str	r2, [r3, #0]
  c1 <<= BOX_C1_LOG;
 80245dc:	1d3b      	adds	r3, r7, #4
 80245de:	1d3a      	adds	r2, r7, #4
 80245e0:	6812      	ldr	r2, [r2, #0]
 80245e2:	00d2      	lsls	r2, r2, #3
 80245e4:	601a      	str	r2, [r3, #0]
  c2 <<= BOX_C2_LOG;
 80245e6:	463b      	mov	r3, r7
 80245e8:	463a      	mov	r2, r7
 80245ea:	6812      	ldr	r2, [r2, #0]
 80245ec:	0092      	lsls	r2, r2, #2
 80245ee:	601a      	str	r2, [r3, #0]
  cptr = bestcolor;
 80245f0:	f107 0414 	add.w	r4, r7, #20
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 80245f4:	2300      	movs	r3, #0
 80245f6:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80245fa:	e03d      	b.n	8024678 <fill_inverse_cmap+0x16c>
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 80245fc:	2300      	movs	r3, #0
 80245fe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8024602:	e030      	b.n	8024666 <fill_inverse_cmap+0x15a>
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 8024604:	f107 0308 	add.w	r3, r7, #8
 8024608:	681a      	ldr	r2, [r3, #0]
 802460a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 802460e:	4413      	add	r3, r2
 8024610:	009b      	lsls	r3, r3, #2
 8024612:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8024616:	4413      	add	r3, r2
 8024618:	681a      	ldr	r2, [r3, #0]
 802461a:	1d3b      	adds	r3, r7, #4
 802461c:	6819      	ldr	r1, [r3, #0]
 802461e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8024622:	440b      	add	r3, r1
 8024624:	019b      	lsls	r3, r3, #6
 8024626:	441a      	add	r2, r3
 8024628:	463b      	mov	r3, r7
 802462a:	681b      	ldr	r3, [r3, #0]
 802462c:	005b      	lsls	r3, r3, #1
 802462e:	18d5      	adds	r5, r2, r3
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 8024630:	2300      	movs	r3, #0
 8024632:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8024636:	e00d      	b.n	8024654 <fill_inverse_cmap+0x148>
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8024638:	4623      	mov	r3, r4
 802463a:	1c5c      	adds	r4, r3, #1
 802463c:	781b      	ldrb	r3, [r3, #0]
 802463e:	b29a      	uxth	r2, r3
 8024640:	462b      	mov	r3, r5
 8024642:	1c9d      	adds	r5, r3, #2
 8024644:	3201      	adds	r2, #1
 8024646:	b292      	uxth	r2, r2
 8024648:	801a      	strh	r2, [r3, #0]
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 802464a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 802464e:	3301      	adds	r3, #1
 8024650:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8024654:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8024658:	2b03      	cmp	r3, #3
 802465a:	dded      	ble.n	8024638 <fill_inverse_cmap+0x12c>
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 802465c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8024660:	3301      	adds	r3, #1
 8024662:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8024666:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 802466a:	2b07      	cmp	r3, #7
 802466c:	ddca      	ble.n	8024604 <fill_inverse_cmap+0xf8>
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 802466e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8024672:	3301      	adds	r3, #1
 8024674:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8024678:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 802467c:	2b03      	cmp	r3, #3
 802467e:	ddbd      	ble.n	80245fc <fill_inverse_cmap+0xf0>
      }
    }
  }
}
 8024680:	bf00      	nop
 8024682:	bf00      	nop
 8024684:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 8024688:	46bd      	mov	sp, r7
 802468a:	bdb0      	pop	{r4, r5, r7, pc}

0802468c <pass2_no_dither>:

METHODDEF(void)
pass2_no_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs no dithering */
{
 802468c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024690:	b08a      	sub	sp, #40	; 0x28
 8024692:	af00      	add	r7, sp, #0
 8024694:	60f8      	str	r0, [r7, #12]
 8024696:	60b9      	str	r1, [r7, #8]
 8024698:	607a      	str	r2, [r7, #4]
 802469a:	603b      	str	r3, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 802469c:	68fb      	ldr	r3, [r7, #12]
 802469e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80246a2:	61fb      	str	r3, [r7, #28]
  hist3d histogram = cquantize->histogram;
 80246a4:	69fb      	ldr	r3, [r7, #28]
 80246a6:	699b      	ldr	r3, [r3, #24]
 80246a8:	61bb      	str	r3, [r7, #24]
  register JSAMPROW inptr, outptr;
  register histptr cachep;
  register int c0, c1, c2;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 80246aa:	68fb      	ldr	r3, [r7, #12]
 80246ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80246ae:	617b      	str	r3, [r7, #20]

  for (row = 0; row < num_rows; row++) {
 80246b0:	2300      	movs	r3, #0
 80246b2:	627b      	str	r3, [r7, #36]	; 0x24
 80246b4:	e042      	b.n	802473c <pass2_no_dither+0xb0>
    inptr = input_buf[row];
 80246b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80246b8:	009b      	lsls	r3, r3, #2
 80246ba:	68ba      	ldr	r2, [r7, #8]
 80246bc:	4413      	add	r3, r2
 80246be:	681c      	ldr	r4, [r3, #0]
    outptr = output_buf[row];
 80246c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80246c2:	009b      	lsls	r3, r3, #2
 80246c4:	687a      	ldr	r2, [r7, #4]
 80246c6:	4413      	add	r3, r2
 80246c8:	681e      	ldr	r6, [r3, #0]
    for (col = width; col > 0; col--) {
 80246ca:	697b      	ldr	r3, [r7, #20]
 80246cc:	623b      	str	r3, [r7, #32]
 80246ce:	e02f      	b.n	8024730 <pass2_no_dither+0xa4>
      /* get pixel value and index into the cache */
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 80246d0:	4623      	mov	r3, r4
 80246d2:	1c5c      	adds	r4, r3, #1
 80246d4:	781b      	ldrb	r3, [r3, #0]
 80246d6:	08db      	lsrs	r3, r3, #3
 80246d8:	b2db      	uxtb	r3, r3
 80246da:	4699      	mov	r9, r3
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 80246dc:	4623      	mov	r3, r4
 80246de:	1c5c      	adds	r4, r3, #1
 80246e0:	781b      	ldrb	r3, [r3, #0]
 80246e2:	089b      	lsrs	r3, r3, #2
 80246e4:	b2db      	uxtb	r3, r3
 80246e6:	469a      	mov	sl, r3
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 80246e8:	4623      	mov	r3, r4
 80246ea:	1c5c      	adds	r4, r3, #1
 80246ec:	781b      	ldrb	r3, [r3, #0]
 80246ee:	08db      	lsrs	r3, r3, #3
 80246f0:	b2db      	uxtb	r3, r3
 80246f2:	4698      	mov	r8, r3
      cachep = & histogram[c0][c1][c2];
 80246f4:	464b      	mov	r3, r9
 80246f6:	009b      	lsls	r3, r3, #2
 80246f8:	69ba      	ldr	r2, [r7, #24]
 80246fa:	4413      	add	r3, r2
 80246fc:	681a      	ldr	r2, [r3, #0]
 80246fe:	4653      	mov	r3, sl
 8024700:	019b      	lsls	r3, r3, #6
 8024702:	441a      	add	r2, r3
 8024704:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8024708:	18d5      	adds	r5, r2, r3
      /* If we have not seen this color before, find nearest colormap entry */
      /* and update the cache */
      if (*cachep == 0)
 802470a:	882b      	ldrh	r3, [r5, #0]
 802470c:	2b00      	cmp	r3, #0
 802470e:	d105      	bne.n	802471c <pass2_no_dither+0x90>
	fill_inverse_cmap(cinfo, c0,c1,c2);
 8024710:	4643      	mov	r3, r8
 8024712:	4652      	mov	r2, sl
 8024714:	4649      	mov	r1, r9
 8024716:	68f8      	ldr	r0, [r7, #12]
 8024718:	f7ff fef8 	bl	802450c <fill_inverse_cmap>
      /* Now emit the colormap index for this cell */
      *outptr++ = (JSAMPLE) (*cachep - 1);
 802471c:	882b      	ldrh	r3, [r5, #0]
 802471e:	b2da      	uxtb	r2, r3
 8024720:	4633      	mov	r3, r6
 8024722:	1c5e      	adds	r6, r3, #1
 8024724:	3a01      	subs	r2, #1
 8024726:	b2d2      	uxtb	r2, r2
 8024728:	701a      	strb	r2, [r3, #0]
    for (col = width; col > 0; col--) {
 802472a:	6a3b      	ldr	r3, [r7, #32]
 802472c:	3b01      	subs	r3, #1
 802472e:	623b      	str	r3, [r7, #32]
 8024730:	6a3b      	ldr	r3, [r7, #32]
 8024732:	2b00      	cmp	r3, #0
 8024734:	d1cc      	bne.n	80246d0 <pass2_no_dither+0x44>
  for (row = 0; row < num_rows; row++) {
 8024736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024738:	3301      	adds	r3, #1
 802473a:	627b      	str	r3, [r7, #36]	; 0x24
 802473c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802473e:	683b      	ldr	r3, [r7, #0]
 8024740:	429a      	cmp	r2, r3
 8024742:	dbb8      	blt.n	80246b6 <pass2_no_dither+0x2a>
    }
  }
}
 8024744:	bf00      	nop
 8024746:	bf00      	nop
 8024748:	3728      	adds	r7, #40	; 0x28
 802474a:	46bd      	mov	sp, r7
 802474c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08024750 <pass2_fs_dither>:

METHODDEF(void)
pass2_fs_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs Floyd-Steinberg dithering */
{
 8024750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024754:	b09c      	sub	sp, #112	; 0x70
 8024756:	af00      	add	r7, sp, #0
 8024758:	6178      	str	r0, [r7, #20]
 802475a:	6139      	str	r1, [r7, #16]
 802475c:	60fa      	str	r2, [r7, #12]
 802475e:	60bb      	str	r3, [r7, #8]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8024760:	697b      	ldr	r3, [r7, #20]
 8024762:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8024766:	63fb      	str	r3, [r7, #60]	; 0x3c
  hist3d histogram = cquantize->histogram;
 8024768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802476a:	699b      	ldr	r3, [r3, #24]
 802476c:	63bb      	str	r3, [r7, #56]	; 0x38
  histptr cachep;
  int dir;			/* +1 or -1 depending on direction */
  int dir3;			/* 3*dir, for advancing inptr & errorptr */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 802476e:	697b      	ldr	r3, [r7, #20]
 8024770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024772:	637b      	str	r3, [r7, #52]	; 0x34
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8024774:	697b      	ldr	r3, [r7, #20]
 8024776:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 802477a:	633b      	str	r3, [r7, #48]	; 0x30
  int *error_limit = cquantize->error_limiter;
 802477c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802477e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024780:	62fb      	str	r3, [r7, #44]	; 0x2c
  JSAMPROW colormap0 = cinfo->colormap[0];
 8024782:	697b      	ldr	r3, [r7, #20]
 8024784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8024788:	681b      	ldr	r3, [r3, #0]
 802478a:	62bb      	str	r3, [r7, #40]	; 0x28
  JSAMPROW colormap1 = cinfo->colormap[1];
 802478c:	697b      	ldr	r3, [r7, #20]
 802478e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8024792:	685b      	ldr	r3, [r3, #4]
 8024794:	627b      	str	r3, [r7, #36]	; 0x24
  JSAMPROW colormap2 = cinfo->colormap[2];
 8024796:	697b      	ldr	r3, [r7, #20]
 8024798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802479c:	689b      	ldr	r3, [r3, #8]
 802479e:	623b      	str	r3, [r7, #32]
  SHIFT_TEMPS

  for (row = 0; row < num_rows; row++) {
 80247a0:	2300      	movs	r3, #0
 80247a2:	647b      	str	r3, [r7, #68]	; 0x44
 80247a4:	e119      	b.n	80249da <pass2_fs_dither+0x28a>
    inptr = input_buf[row];
 80247a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80247a8:	009b      	lsls	r3, r3, #2
 80247aa:	693a      	ldr	r2, [r7, #16]
 80247ac:	4413      	add	r3, r2
 80247ae:	681b      	ldr	r3, [r3, #0]
 80247b0:	657b      	str	r3, [r7, #84]	; 0x54
    outptr = output_buf[row];
 80247b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80247b4:	009b      	lsls	r3, r3, #2
 80247b6:	68fa      	ldr	r2, [r7, #12]
 80247b8:	4413      	add	r3, r2
 80247ba:	681b      	ldr	r3, [r3, #0]
 80247bc:	653b      	str	r3, [r7, #80]	; 0x50
    if (cquantize->on_odd_row) {
 80247be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80247c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80247c2:	2b00      	cmp	r3, #0
 80247c4:	d020      	beq.n	8024808 <pass2_fs_dither+0xb8>
      /* work right to left in this row */
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 80247c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80247c8:	4613      	mov	r3, r2
 80247ca:	005b      	lsls	r3, r3, #1
 80247cc:	4413      	add	r3, r2
 80247ce:	3b03      	subs	r3, #3
 80247d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80247d2:	4413      	add	r3, r2
 80247d4:	657b      	str	r3, [r7, #84]	; 0x54
      outptr += width-1;
 80247d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80247d8:	3b01      	subs	r3, #1
 80247da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80247dc:	4413      	add	r3, r2
 80247de:	653b      	str	r3, [r7, #80]	; 0x50
      dir = -1;
 80247e0:	f04f 33ff 	mov.w	r3, #4294967295
 80247e4:	64fb      	str	r3, [r7, #76]	; 0x4c
      dir3 = -3;
 80247e6:	f06f 0302 	mvn.w	r3, #2
 80247ea:	64bb      	str	r3, [r7, #72]	; 0x48
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 80247ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80247ee:	6a19      	ldr	r1, [r3, #32]
 80247f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80247f2:	1c5a      	adds	r2, r3, #1
 80247f4:	4613      	mov	r3, r2
 80247f6:	005b      	lsls	r3, r3, #1
 80247f8:	4413      	add	r3, r2
 80247fa:	005b      	lsls	r3, r3, #1
 80247fc:	18cb      	adds	r3, r1, r3
 80247fe:	607b      	str	r3, [r7, #4]
      cquantize->on_odd_row = FALSE; /* flip for next time */
 8024800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024802:	2200      	movs	r2, #0
 8024804:	625a      	str	r2, [r3, #36]	; 0x24
 8024806:	e009      	b.n	802481c <pass2_fs_dither+0xcc>
    } else {
      /* work left to right in this row */
      dir = 1;
 8024808:	2301      	movs	r3, #1
 802480a:	64fb      	str	r3, [r7, #76]	; 0x4c
      dir3 = 3;
 802480c:	2303      	movs	r3, #3
 802480e:	64bb      	str	r3, [r7, #72]	; 0x48
      errorptr = cquantize->fserrors; /* => entry before first real column */
 8024810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024812:	6a1b      	ldr	r3, [r3, #32]
 8024814:	607b      	str	r3, [r7, #4]
      cquantize->on_odd_row = TRUE; /* flip for next time */
 8024816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024818:	2201      	movs	r2, #1
 802481a:	625a      	str	r2, [r3, #36]	; 0x24
    }
    /* Preset error values: no error propagated to first pixel from left */
    cur0 = cur1 = cur2 = 0;
 802481c:	2400      	movs	r4, #0
 802481e:	4625      	mov	r5, r4
 8024820:	462e      	mov	r6, r5
    /* and no error propagated to row below yet */
    belowerr0 = belowerr1 = belowerr2 = 0;
 8024822:	2300      	movs	r3, #0
 8024824:	667b      	str	r3, [r7, #100]	; 0x64
 8024826:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8024828:	66bb      	str	r3, [r7, #104]	; 0x68
 802482a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802482c:	66fb      	str	r3, [r7, #108]	; 0x6c
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 802482e:	2300      	movs	r3, #0
 8024830:	65bb      	str	r3, [r7, #88]	; 0x58
 8024832:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8024834:	65fb      	str	r3, [r7, #92]	; 0x5c
 8024836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8024838:	663b      	str	r3, [r7, #96]	; 0x60

    for (col = width; col > 0; col--) {
 802483a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802483c:	643b      	str	r3, [r7, #64]	; 0x40
 802483e:	e0b8      	b.n	80249b2 <pass2_fs_dither+0x262>
       * round the error term (which is expressed * 16) to an integer.
       * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct
       * for either sign of the error value.
       * Note: errorptr points to *previous* column's array entry.
       */
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8024840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024842:	005b      	lsls	r3, r3, #1
 8024844:	687a      	ldr	r2, [r7, #4]
 8024846:	4611      	mov	r1, r2
 8024848:	440b      	add	r3, r1
 802484a:	f9b3 3000 	ldrsh.w	r3, [r3]
 802484e:	4433      	add	r3, r6
 8024850:	3308      	adds	r3, #8
 8024852:	111e      	asrs	r6, r3, #4
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8024854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024856:	3301      	adds	r3, #1
 8024858:	005b      	lsls	r3, r3, #1
 802485a:	4611      	mov	r1, r2
 802485c:	440b      	add	r3, r1
 802485e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8024862:	442b      	add	r3, r5
 8024864:	3308      	adds	r3, #8
 8024866:	111d      	asrs	r5, r3, #4
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8024868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802486a:	3302      	adds	r3, #2
 802486c:	005b      	lsls	r3, r3, #1
 802486e:	4413      	add	r3, r2
 8024870:	f9b3 3000 	ldrsh.w	r3, [r3]
 8024874:	4423      	add	r3, r4
 8024876:	3308      	adds	r3, #8
 8024878:	111c      	asrs	r4, r3, #4
      /* Limit the error using transfer function set by init_error_limit.
       * See comments with init_error_limit for rationale.
       */
      cur0 = error_limit[cur0];
 802487a:	4633      	mov	r3, r6
 802487c:	009b      	lsls	r3, r3, #2
 802487e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024880:	4413      	add	r3, r2
 8024882:	681e      	ldr	r6, [r3, #0]
      cur1 = error_limit[cur1];
 8024884:	462b      	mov	r3, r5
 8024886:	009b      	lsls	r3, r3, #2
 8024888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802488a:	4413      	add	r3, r2
 802488c:	681d      	ldr	r5, [r3, #0]
      cur2 = error_limit[cur2];
 802488e:	4623      	mov	r3, r4
 8024890:	009b      	lsls	r3, r3, #2
 8024892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024894:	4413      	add	r3, r2
 8024896:	681c      	ldr	r4, [r3, #0]
      /* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
       * The maximum error is +- MAXJSAMPLE (or less with error limiting);
       * this sets the required size of the range_limit array.
       */
      cur0 += GETJSAMPLE(inptr[0]);
 8024898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802489a:	781b      	ldrb	r3, [r3, #0]
 802489c:	441e      	add	r6, r3
      cur1 += GETJSAMPLE(inptr[1]);
 802489e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80248a0:	3301      	adds	r3, #1
 80248a2:	781b      	ldrb	r3, [r3, #0]
 80248a4:	441d      	add	r5, r3
      cur2 += GETJSAMPLE(inptr[2]);
 80248a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80248a8:	3302      	adds	r3, #2
 80248aa:	781b      	ldrb	r3, [r3, #0]
 80248ac:	441c      	add	r4, r3
      cur0 = GETJSAMPLE(range_limit[cur0]);
 80248ae:	4632      	mov	r2, r6
 80248b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80248b2:	4413      	add	r3, r2
 80248b4:	781b      	ldrb	r3, [r3, #0]
 80248b6:	461e      	mov	r6, r3
      cur1 = GETJSAMPLE(range_limit[cur1]);
 80248b8:	462a      	mov	r2, r5
 80248ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80248bc:	4413      	add	r3, r2
 80248be:	781b      	ldrb	r3, [r3, #0]
 80248c0:	461d      	mov	r5, r3
      cur2 = GETJSAMPLE(range_limit[cur2]);
 80248c2:	4622      	mov	r2, r4
 80248c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80248c6:	4413      	add	r3, r2
 80248c8:	781b      	ldrb	r3, [r3, #0]
 80248ca:	461c      	mov	r4, r3
      /* Index into the cache with adjusted pixel value */
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 80248cc:	10f3      	asrs	r3, r6, #3
 80248ce:	009b      	lsls	r3, r3, #2
 80248d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80248d2:	4413      	add	r3, r2
 80248d4:	681a      	ldr	r2, [r3, #0]
 80248d6:	10ab      	asrs	r3, r5, #2
 80248d8:	019b      	lsls	r3, r3, #6
 80248da:	441a      	add	r2, r3
 80248dc:	10e3      	asrs	r3, r4, #3
 80248de:	005b      	lsls	r3, r3, #1
 80248e0:	4413      	add	r3, r2
 80248e2:	61fb      	str	r3, [r7, #28]
      /* If we have not seen this color before, find nearest colormap */
      /* entry and update the cache */
      if (*cachep == 0)
 80248e4:	69fb      	ldr	r3, [r7, #28]
 80248e6:	881b      	ldrh	r3, [r3, #0]
 80248e8:	2b00      	cmp	r3, #0
 80248ea:	d105      	bne.n	80248f8 <pass2_fs_dither+0x1a8>
	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
 80248ec:	10f1      	asrs	r1, r6, #3
 80248ee:	10aa      	asrs	r2, r5, #2
 80248f0:	10e3      	asrs	r3, r4, #3
 80248f2:	6978      	ldr	r0, [r7, #20]
 80248f4:	f7ff fe0a 	bl	802450c <fill_inverse_cmap>
      /* Now emit the colormap index for this cell */
      { register int pixcode = *cachep - 1;
 80248f8:	69fb      	ldr	r3, [r7, #28]
 80248fa:	881b      	ldrh	r3, [r3, #0]
 80248fc:	f103 38ff 	add.w	r8, r3, #4294967295
	*outptr = (JSAMPLE) pixcode;
 8024900:	fa5f f288 	uxtb.w	r2, r8
 8024904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8024906:	701a      	strb	r2, [r3, #0]
	/* Compute representation error for this pixel */
	cur0 -= GETJSAMPLE(colormap0[pixcode]);
 8024908:	4642      	mov	r2, r8
 802490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802490c:	4413      	add	r3, r2
 802490e:	781b      	ldrb	r3, [r3, #0]
 8024910:	1af6      	subs	r6, r6, r3
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 8024912:	4642      	mov	r2, r8
 8024914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024916:	4413      	add	r3, r2
 8024918:	781b      	ldrb	r3, [r3, #0]
 802491a:	1aed      	subs	r5, r5, r3
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 802491c:	4642      	mov	r2, r8
 802491e:	6a3b      	ldr	r3, [r7, #32]
 8024920:	4413      	add	r3, r2
 8024922:	781b      	ldrb	r3, [r3, #0]
 8024924:	1ae4      	subs	r4, r4, r3
       * Add these into the running sums, and simultaneously shift the
       * next-line error sums left by 1 column.
       */
      { register LOCFSERROR bnexterr, delta;

	bnexterr = cur0;	/* Process component 0 */
 8024926:	4630      	mov	r0, r6
	delta = cur0 * 2;
 8024928:	ea4f 0846 	mov.w	r8, r6, lsl #1
	cur0 += delta;		/* form error * 3 */
 802492c:	4446      	add	r6, r8
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 802492e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8024930:	b29a      	uxth	r2, r3
 8024932:	b2b3      	uxth	r3, r6
 8024934:	4413      	add	r3, r2
 8024936:	b29b      	uxth	r3, r3
 8024938:	b21b      	sxth	r3, r3
 802493a:	6879      	ldr	r1, [r7, #4]
 802493c:	460a      	mov	r2, r1
 802493e:	8013      	strh	r3, [r2, #0]
	cur0 += delta;		/* form error * 5 */
 8024940:	4446      	add	r6, r8
	bpreverr0 = belowerr0 + cur0;
 8024942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024944:	4433      	add	r3, r6
 8024946:	663b      	str	r3, [r7, #96]	; 0x60
	belowerr0 = bnexterr;
 8024948:	66f8      	str	r0, [r7, #108]	; 0x6c
	cur0 += delta;		/* form error * 7 */
 802494a:	4446      	add	r6, r8
	bnexterr = cur1;	/* Process component 1 */
 802494c:	4628      	mov	r0, r5
	delta = cur1 * 2;
 802494e:	ea4f 0845 	mov.w	r8, r5, lsl #1
	cur1 += delta;		/* form error * 3 */
 8024952:	4445      	add	r5, r8
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8024954:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8024956:	b29a      	uxth	r2, r3
 8024958:	b2ab      	uxth	r3, r5
 802495a:	4413      	add	r3, r2
 802495c:	b29a      	uxth	r2, r3
 802495e:	1c8b      	adds	r3, r1, #2
 8024960:	b212      	sxth	r2, r2
 8024962:	801a      	strh	r2, [r3, #0]
	cur1 += delta;		/* form error * 5 */
 8024964:	4445      	add	r5, r8
	bpreverr1 = belowerr1 + cur1;
 8024966:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8024968:	442b      	add	r3, r5
 802496a:	65fb      	str	r3, [r7, #92]	; 0x5c
	belowerr1 = bnexterr;
 802496c:	66b8      	str	r0, [r7, #104]	; 0x68
	cur1 += delta;		/* form error * 7 */
 802496e:	4445      	add	r5, r8
	bnexterr = cur2;	/* Process component 2 */
 8024970:	4620      	mov	r0, r4
	delta = cur2 * 2;
 8024972:	ea4f 0844 	mov.w	r8, r4, lsl #1
	cur2 += delta;		/* form error * 3 */
 8024976:	4444      	add	r4, r8
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 8024978:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802497a:	b29a      	uxth	r2, r3
 802497c:	b2a3      	uxth	r3, r4
 802497e:	4413      	add	r3, r2
 8024980:	b29a      	uxth	r2, r3
 8024982:	1d0b      	adds	r3, r1, #4
 8024984:	b212      	sxth	r2, r2
 8024986:	801a      	strh	r2, [r3, #0]
	cur2 += delta;		/* form error * 5 */
 8024988:	4444      	add	r4, r8
	bpreverr2 = belowerr2 + cur2;
 802498a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802498c:	4423      	add	r3, r4
 802498e:	65bb      	str	r3, [r7, #88]	; 0x58
	belowerr2 = bnexterr;
 8024990:	6678      	str	r0, [r7, #100]	; 0x64
	cur2 += delta;		/* form error * 7 */
 8024992:	4444      	add	r4, r8
      }
      /* At this point curN contains the 7/16 error value to be propagated
       * to the next pixel on the current line, and all the errors for the
       * next line have been shifted over.  We are therefore ready to move on.
       */
      inptr += dir3;		/* Advance pixel pointers to next column */
 8024994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8024996:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8024998:	4413      	add	r3, r2
 802499a:	657b      	str	r3, [r7, #84]	; 0x54
      outptr += dir;
 802499c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802499e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80249a0:	4413      	add	r3, r2
 80249a2:	653b      	str	r3, [r7, #80]	; 0x50
      errorptr += dir3;		/* advance errorptr to current column */
 80249a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80249a6:	005b      	lsls	r3, r3, #1
 80249a8:	18cb      	adds	r3, r1, r3
 80249aa:	607b      	str	r3, [r7, #4]
    for (col = width; col > 0; col--) {
 80249ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80249ae:	3b01      	subs	r3, #1
 80249b0:	643b      	str	r3, [r7, #64]	; 0x40
 80249b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80249b4:	2b00      	cmp	r3, #0
 80249b6:	f47f af43 	bne.w	8024840 <pass2_fs_dither+0xf0>
    }
    /* Post-loop cleanup: we must unload the final error values into the
     * final fserrors[] entry.  Note we need not unload belowerrN because
     * it is for the dummy column before or after the actual array.
     */
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
 80249ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80249bc:	b21b      	sxth	r3, r3
 80249be:	6879      	ldr	r1, [r7, #4]
 80249c0:	460a      	mov	r2, r1
 80249c2:	8013      	strh	r3, [r2, #0]
    errorptr[1] = (FSERROR) bpreverr1;
 80249c4:	1c8b      	adds	r3, r1, #2
 80249c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80249c8:	b212      	sxth	r2, r2
 80249ca:	801a      	strh	r2, [r3, #0]
    errorptr[2] = (FSERROR) bpreverr2;
 80249cc:	1d0b      	adds	r3, r1, #4
 80249ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80249d0:	b212      	sxth	r2, r2
 80249d2:	801a      	strh	r2, [r3, #0]
  for (row = 0; row < num_rows; row++) {
 80249d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80249d6:	3301      	adds	r3, #1
 80249d8:	647b      	str	r3, [r7, #68]	; 0x44
 80249da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80249dc:	68bb      	ldr	r3, [r7, #8]
 80249de:	429a      	cmp	r2, r3
 80249e0:	f6ff aee1 	blt.w	80247a6 <pass2_fs_dither+0x56>
  }
}
 80249e4:	bf00      	nop
 80249e6:	bf00      	nop
 80249e8:	3770      	adds	r7, #112	; 0x70
 80249ea:	46bd      	mov	sp, r7
 80249ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080249f0 <init_error_limit>:
 */

LOCAL(void)
init_error_limit (j_decompress_ptr cinfo)
/* Allocate and fill in the error_limiter table */
{
 80249f0:	b580      	push	{r7, lr}
 80249f2:	b086      	sub	sp, #24
 80249f4:	af00      	add	r7, sp, #0
 80249f6:	6078      	str	r0, [r7, #4]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80249f8:	687b      	ldr	r3, [r7, #4]
 80249fa:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80249fe:	60fb      	str	r3, [r7, #12]
  int * table;
  int in, out;

  table = (int *) (*cinfo->mem->alloc_small)
 8024a00:	687b      	ldr	r3, [r7, #4]
 8024a02:	685b      	ldr	r3, [r3, #4]
 8024a04:	681b      	ldr	r3, [r3, #0]
 8024a06:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8024a0a:	2101      	movs	r1, #1
 8024a0c:	6878      	ldr	r0, [r7, #4]
 8024a0e:	4798      	blx	r3
 8024a10:	60b8      	str	r0, [r7, #8]
    ((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
  table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
 8024a12:	68bb      	ldr	r3, [r7, #8]
 8024a14:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 8024a18:	60bb      	str	r3, [r7, #8]
  cquantize->error_limiter = table;
 8024a1a:	68fb      	ldr	r3, [r7, #12]
 8024a1c:	68ba      	ldr	r2, [r7, #8]
 8024a1e:	629a      	str	r2, [r3, #40]	; 0x28

#define STEPSIZE ((MAXJSAMPLE+1)/16)
  /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
  out = 0;
 8024a20:	2300      	movs	r3, #0
 8024a22:	613b      	str	r3, [r7, #16]
  for (in = 0; in < STEPSIZE; in++, out++) {
 8024a24:	2300      	movs	r3, #0
 8024a26:	617b      	str	r3, [r7, #20]
 8024a28:	e016      	b.n	8024a58 <init_error_limit+0x68>
    table[in] = out; table[-in] = -out;
 8024a2a:	697b      	ldr	r3, [r7, #20]
 8024a2c:	009b      	lsls	r3, r3, #2
 8024a2e:	68ba      	ldr	r2, [r7, #8]
 8024a30:	4413      	add	r3, r2
 8024a32:	693a      	ldr	r2, [r7, #16]
 8024a34:	601a      	str	r2, [r3, #0]
 8024a36:	697a      	ldr	r2, [r7, #20]
 8024a38:	4613      	mov	r3, r2
 8024a3a:	079b      	lsls	r3, r3, #30
 8024a3c:	1a9b      	subs	r3, r3, r2
 8024a3e:	009b      	lsls	r3, r3, #2
 8024a40:	461a      	mov	r2, r3
 8024a42:	68bb      	ldr	r3, [r7, #8]
 8024a44:	4413      	add	r3, r2
 8024a46:	693a      	ldr	r2, [r7, #16]
 8024a48:	4252      	negs	r2, r2
 8024a4a:	601a      	str	r2, [r3, #0]
  for (in = 0; in < STEPSIZE; in++, out++) {
 8024a4c:	697b      	ldr	r3, [r7, #20]
 8024a4e:	3301      	adds	r3, #1
 8024a50:	617b      	str	r3, [r7, #20]
 8024a52:	693b      	ldr	r3, [r7, #16]
 8024a54:	3301      	adds	r3, #1
 8024a56:	613b      	str	r3, [r7, #16]
 8024a58:	697b      	ldr	r3, [r7, #20]
 8024a5a:	2b0f      	cmp	r3, #15
 8024a5c:	dde5      	ble.n	8024a2a <init_error_limit+0x3a>
  }
  /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
 8024a5e:	e01f      	b.n	8024aa0 <init_error_limit+0xb0>
    table[in] = out; table[-in] = -out;
 8024a60:	697b      	ldr	r3, [r7, #20]
 8024a62:	009b      	lsls	r3, r3, #2
 8024a64:	68ba      	ldr	r2, [r7, #8]
 8024a66:	4413      	add	r3, r2
 8024a68:	693a      	ldr	r2, [r7, #16]
 8024a6a:	601a      	str	r2, [r3, #0]
 8024a6c:	697a      	ldr	r2, [r7, #20]
 8024a6e:	4613      	mov	r3, r2
 8024a70:	079b      	lsls	r3, r3, #30
 8024a72:	1a9b      	subs	r3, r3, r2
 8024a74:	009b      	lsls	r3, r3, #2
 8024a76:	461a      	mov	r2, r3
 8024a78:	68bb      	ldr	r3, [r7, #8]
 8024a7a:	4413      	add	r3, r2
 8024a7c:	693a      	ldr	r2, [r7, #16]
 8024a7e:	4252      	negs	r2, r2
 8024a80:	601a      	str	r2, [r3, #0]
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
 8024a82:	697b      	ldr	r3, [r7, #20]
 8024a84:	3301      	adds	r3, #1
 8024a86:	617b      	str	r3, [r7, #20]
 8024a88:	697b      	ldr	r3, [r7, #20]
 8024a8a:	f003 0301 	and.w	r3, r3, #1
 8024a8e:	2b00      	cmp	r3, #0
 8024a90:	bf0c      	ite	eq
 8024a92:	2301      	moveq	r3, #1
 8024a94:	2300      	movne	r3, #0
 8024a96:	b2db      	uxtb	r3, r3
 8024a98:	461a      	mov	r2, r3
 8024a9a:	693b      	ldr	r3, [r7, #16]
 8024a9c:	4413      	add	r3, r2
 8024a9e:	613b      	str	r3, [r7, #16]
 8024aa0:	697b      	ldr	r3, [r7, #20]
 8024aa2:	2b2f      	cmp	r3, #47	; 0x2f
 8024aa4:	dddc      	ble.n	8024a60 <init_error_limit+0x70>
  }
  /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
  for (; in <= MAXJSAMPLE; in++) {
 8024aa6:	e013      	b.n	8024ad0 <init_error_limit+0xe0>
    table[in] = out; table[-in] = -out;
 8024aa8:	697b      	ldr	r3, [r7, #20]
 8024aaa:	009b      	lsls	r3, r3, #2
 8024aac:	68ba      	ldr	r2, [r7, #8]
 8024aae:	4413      	add	r3, r2
 8024ab0:	693a      	ldr	r2, [r7, #16]
 8024ab2:	601a      	str	r2, [r3, #0]
 8024ab4:	697a      	ldr	r2, [r7, #20]
 8024ab6:	4613      	mov	r3, r2
 8024ab8:	079b      	lsls	r3, r3, #30
 8024aba:	1a9b      	subs	r3, r3, r2
 8024abc:	009b      	lsls	r3, r3, #2
 8024abe:	461a      	mov	r2, r3
 8024ac0:	68bb      	ldr	r3, [r7, #8]
 8024ac2:	4413      	add	r3, r2
 8024ac4:	693a      	ldr	r2, [r7, #16]
 8024ac6:	4252      	negs	r2, r2
 8024ac8:	601a      	str	r2, [r3, #0]
  for (; in <= MAXJSAMPLE; in++) {
 8024aca:	697b      	ldr	r3, [r7, #20]
 8024acc:	3301      	adds	r3, #1
 8024ace:	617b      	str	r3, [r7, #20]
 8024ad0:	697b      	ldr	r3, [r7, #20]
 8024ad2:	2bff      	cmp	r3, #255	; 0xff
 8024ad4:	dde8      	ble.n	8024aa8 <init_error_limit+0xb8>
  }
#undef STEPSIZE
}
 8024ad6:	bf00      	nop
 8024ad8:	bf00      	nop
 8024ada:	3718      	adds	r7, #24
 8024adc:	46bd      	mov	sp, r7
 8024ade:	bd80      	pop	{r7, pc}

08024ae0 <finish_pass1>:
 * Finish up at the end of each pass.
 */

METHODDEF(void)
finish_pass1 (j_decompress_ptr cinfo)
{
 8024ae0:	b580      	push	{r7, lr}
 8024ae2:	b084      	sub	sp, #16
 8024ae4:	af00      	add	r7, sp, #0
 8024ae6:	6078      	str	r0, [r7, #4]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8024ae8:	687b      	ldr	r3, [r7, #4]
 8024aea:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8024aee:	60fb      	str	r3, [r7, #12]

  /* Select the representative colors and fill in cinfo->colormap */
  cinfo->colormap = cquantize->sv_colormap;
 8024af0:	68fb      	ldr	r3, [r7, #12]
 8024af2:	691a      	ldr	r2, [r3, #16]
 8024af4:	687b      	ldr	r3, [r7, #4]
 8024af6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  select_colors(cinfo, cquantize->desired);
 8024afa:	68fb      	ldr	r3, [r7, #12]
 8024afc:	695b      	ldr	r3, [r3, #20]
 8024afe:	4619      	mov	r1, r3
 8024b00:	6878      	ldr	r0, [r7, #4]
 8024b02:	f7ff f978 	bl	8023df6 <select_colors>
  /* Force next pass to zero the color index table */
  cquantize->needs_zeroed = TRUE;
 8024b06:	68fb      	ldr	r3, [r7, #12]
 8024b08:	2201      	movs	r2, #1
 8024b0a:	61da      	str	r2, [r3, #28]
}
 8024b0c:	bf00      	nop
 8024b0e:	3710      	adds	r7, #16
 8024b10:	46bd      	mov	sp, r7
 8024b12:	bd80      	pop	{r7, pc}

08024b14 <finish_pass2>:


METHODDEF(void)
finish_pass2 (j_decompress_ptr cinfo)
{
 8024b14:	b480      	push	{r7}
 8024b16:	b083      	sub	sp, #12
 8024b18:	af00      	add	r7, sp, #0
 8024b1a:	6078      	str	r0, [r7, #4]
  /* no work */
}
 8024b1c:	bf00      	nop
 8024b1e:	370c      	adds	r7, #12
 8024b20:	46bd      	mov	sp, r7
 8024b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024b26:	4770      	bx	lr

08024b28 <start_pass_2_quant>:
 * Initialize for each processing pass.
 */

METHODDEF(void)
start_pass_2_quant (j_decompress_ptr cinfo, boolean is_pre_scan)
{
 8024b28:	b580      	push	{r7, lr}
 8024b2a:	b086      	sub	sp, #24
 8024b2c:	af00      	add	r7, sp, #0
 8024b2e:	6078      	str	r0, [r7, #4]
 8024b30:	6039      	str	r1, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8024b32:	687b      	ldr	r3, [r7, #4]
 8024b34:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8024b38:	613b      	str	r3, [r7, #16]
  hist3d histogram = cquantize->histogram;
 8024b3a:	693b      	ldr	r3, [r7, #16]
 8024b3c:	699b      	ldr	r3, [r3, #24]
 8024b3e:	60fb      	str	r3, [r7, #12]
  int i;

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
 8024b40:	687b      	ldr	r3, [r7, #4]
 8024b42:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8024b46:	2b00      	cmp	r3, #0
 8024b48:	d003      	beq.n	8024b52 <start_pass_2_quant+0x2a>
    cinfo->dither_mode = JDITHER_FS;
 8024b4a:	687b      	ldr	r3, [r7, #4]
 8024b4c:	2202      	movs	r2, #2
 8024b4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  if (is_pre_scan) {
 8024b52:	683b      	ldr	r3, [r7, #0]
 8024b54:	2b00      	cmp	r3, #0
 8024b56:	d009      	beq.n	8024b6c <start_pass_2_quant+0x44>
    /* Set up method pointers */
    cquantize->pub.color_quantize = prescan_quantize;
 8024b58:	693b      	ldr	r3, [r7, #16]
 8024b5a:	4a44      	ldr	r2, [pc, #272]	; (8024c6c <start_pass_2_quant+0x144>)
 8024b5c:	605a      	str	r2, [r3, #4]
    cquantize->pub.finish_pass = finish_pass1;
 8024b5e:	693b      	ldr	r3, [r7, #16]
 8024b60:	4a43      	ldr	r2, [pc, #268]	; (8024c70 <start_pass_2_quant+0x148>)
 8024b62:	609a      	str	r2, [r3, #8]
    cquantize->needs_zeroed = TRUE; /* Always zero histogram */
 8024b64:	693b      	ldr	r3, [r7, #16]
 8024b66:	2201      	movs	r2, #1
 8024b68:	61da      	str	r2, [r3, #28]
 8024b6a:	e060      	b.n	8024c2e <start_pass_2_quant+0x106>
  } else {
    /* Set up method pointers */
    if (cinfo->dither_mode == JDITHER_FS)
 8024b6c:	687b      	ldr	r3, [r7, #4]
 8024b6e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8024b72:	2b02      	cmp	r3, #2
 8024b74:	d103      	bne.n	8024b7e <start_pass_2_quant+0x56>
      cquantize->pub.color_quantize = pass2_fs_dither;
 8024b76:	693b      	ldr	r3, [r7, #16]
 8024b78:	4a3e      	ldr	r2, [pc, #248]	; (8024c74 <start_pass_2_quant+0x14c>)
 8024b7a:	605a      	str	r2, [r3, #4]
 8024b7c:	e002      	b.n	8024b84 <start_pass_2_quant+0x5c>
    else
      cquantize->pub.color_quantize = pass2_no_dither;
 8024b7e:	693b      	ldr	r3, [r7, #16]
 8024b80:	4a3d      	ldr	r2, [pc, #244]	; (8024c78 <start_pass_2_quant+0x150>)
 8024b82:	605a      	str	r2, [r3, #4]
    cquantize->pub.finish_pass = finish_pass2;
 8024b84:	693b      	ldr	r3, [r7, #16]
 8024b86:	4a3d      	ldr	r2, [pc, #244]	; (8024c7c <start_pass_2_quant+0x154>)
 8024b88:	609a      	str	r2, [r3, #8]

    /* Make sure color count is acceptable */
    i = cinfo->actual_number_of_colors;
 8024b8a:	687b      	ldr	r3, [r7, #4]
 8024b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8024b90:	617b      	str	r3, [r7, #20]
    if (i < 1)
 8024b92:	697b      	ldr	r3, [r7, #20]
 8024b94:	2b00      	cmp	r3, #0
 8024b96:	dc0c      	bgt.n	8024bb2 <start_pass_2_quant+0x8a>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
 8024b98:	687b      	ldr	r3, [r7, #4]
 8024b9a:	681b      	ldr	r3, [r3, #0]
 8024b9c:	223a      	movs	r2, #58	; 0x3a
 8024b9e:	615a      	str	r2, [r3, #20]
 8024ba0:	687b      	ldr	r3, [r7, #4]
 8024ba2:	681b      	ldr	r3, [r3, #0]
 8024ba4:	2201      	movs	r2, #1
 8024ba6:	619a      	str	r2, [r3, #24]
 8024ba8:	687b      	ldr	r3, [r7, #4]
 8024baa:	681b      	ldr	r3, [r3, #0]
 8024bac:	681b      	ldr	r3, [r3, #0]
 8024bae:	6878      	ldr	r0, [r7, #4]
 8024bb0:	4798      	blx	r3
    if (i > MAXNUMCOLORS)
 8024bb2:	697b      	ldr	r3, [r7, #20]
 8024bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8024bb8:	dd0d      	ble.n	8024bd6 <start_pass_2_quant+0xae>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8024bba:	687b      	ldr	r3, [r7, #4]
 8024bbc:	681b      	ldr	r3, [r3, #0]
 8024bbe:	223b      	movs	r2, #59	; 0x3b
 8024bc0:	615a      	str	r2, [r3, #20]
 8024bc2:	687b      	ldr	r3, [r7, #4]
 8024bc4:	681b      	ldr	r3, [r3, #0]
 8024bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8024bca:	619a      	str	r2, [r3, #24]
 8024bcc:	687b      	ldr	r3, [r7, #4]
 8024bce:	681b      	ldr	r3, [r3, #0]
 8024bd0:	681b      	ldr	r3, [r3, #0]
 8024bd2:	6878      	ldr	r0, [r7, #4]
 8024bd4:	4798      	blx	r3

    if (cinfo->dither_mode == JDITHER_FS) {
 8024bd6:	687b      	ldr	r3, [r7, #4]
 8024bd8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8024bdc:	2b02      	cmp	r3, #2
 8024bde:	d126      	bne.n	8024c2e <start_pass_2_quant+0x106>
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 8024be0:	687b      	ldr	r3, [r7, #4]
 8024be2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8024be4:	4613      	mov	r3, r2
 8024be6:	005b      	lsls	r3, r3, #1
 8024be8:	4413      	add	r3, r2
 8024bea:	005b      	lsls	r3, r3, #1
 8024bec:	330c      	adds	r3, #12
 8024bee:	60bb      	str	r3, [r7, #8]
				   (3 * SIZEOF(FSERROR)));
      /* Allocate Floyd-Steinberg workspace if we didn't already. */
      if (cquantize->fserrors == NULL)
 8024bf0:	693b      	ldr	r3, [r7, #16]
 8024bf2:	6a1b      	ldr	r3, [r3, #32]
 8024bf4:	2b00      	cmp	r3, #0
 8024bf6:	d109      	bne.n	8024c0c <start_pass_2_quant+0xe4>
	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8024bf8:	687b      	ldr	r3, [r7, #4]
 8024bfa:	685b      	ldr	r3, [r3, #4]
 8024bfc:	685b      	ldr	r3, [r3, #4]
 8024bfe:	68ba      	ldr	r2, [r7, #8]
 8024c00:	2101      	movs	r1, #1
 8024c02:	6878      	ldr	r0, [r7, #4]
 8024c04:	4798      	blx	r3
 8024c06:	4602      	mov	r2, r0
 8024c08:	693b      	ldr	r3, [r7, #16]
 8024c0a:	621a      	str	r2, [r3, #32]
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
      /* Initialize the propagated errors to zero. */
      FMEMZERO((void FAR *) cquantize->fserrors, arraysize);
 8024c0c:	693b      	ldr	r3, [r7, #16]
 8024c0e:	6a1b      	ldr	r3, [r3, #32]
 8024c10:	68ba      	ldr	r2, [r7, #8]
 8024c12:	2100      	movs	r1, #0
 8024c14:	4618      	mov	r0, r3
 8024c16:	f000 f9a7 	bl	8024f68 <memset>
      /* Make the error-limit table if we didn't already. */
      if (cquantize->error_limiter == NULL)
 8024c1a:	693b      	ldr	r3, [r7, #16]
 8024c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024c1e:	2b00      	cmp	r3, #0
 8024c20:	d102      	bne.n	8024c28 <start_pass_2_quant+0x100>
	init_error_limit(cinfo);
 8024c22:	6878      	ldr	r0, [r7, #4]
 8024c24:	f7ff fee4 	bl	80249f0 <init_error_limit>
      cquantize->on_odd_row = FALSE;
 8024c28:	693b      	ldr	r3, [r7, #16]
 8024c2a:	2200      	movs	r2, #0
 8024c2c:	625a      	str	r2, [r3, #36]	; 0x24
    }

  }
  /* Zero the histogram or inverse color map, if necessary */
  if (cquantize->needs_zeroed) {
 8024c2e:	693b      	ldr	r3, [r7, #16]
 8024c30:	69db      	ldr	r3, [r3, #28]
 8024c32:	2b00      	cmp	r3, #0
 8024c34:	d016      	beq.n	8024c64 <start_pass_2_quant+0x13c>
    for (i = 0; i < HIST_C0_ELEMS; i++) {
 8024c36:	2300      	movs	r3, #0
 8024c38:	617b      	str	r3, [r7, #20]
 8024c3a:	e00d      	b.n	8024c58 <start_pass_2_quant+0x130>
      FMEMZERO((void FAR *) histogram[i],
 8024c3c:	697b      	ldr	r3, [r7, #20]
 8024c3e:	009b      	lsls	r3, r3, #2
 8024c40:	68fa      	ldr	r2, [r7, #12]
 8024c42:	4413      	add	r3, r2
 8024c44:	681b      	ldr	r3, [r3, #0]
 8024c46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8024c4a:	2100      	movs	r1, #0
 8024c4c:	4618      	mov	r0, r3
 8024c4e:	f000 f98b 	bl	8024f68 <memset>
    for (i = 0; i < HIST_C0_ELEMS; i++) {
 8024c52:	697b      	ldr	r3, [r7, #20]
 8024c54:	3301      	adds	r3, #1
 8024c56:	617b      	str	r3, [r7, #20]
 8024c58:	697b      	ldr	r3, [r7, #20]
 8024c5a:	2b1f      	cmp	r3, #31
 8024c5c:	ddee      	ble.n	8024c3c <start_pass_2_quant+0x114>
	       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
    }
    cquantize->needs_zeroed = FALSE;
 8024c5e:	693b      	ldr	r3, [r7, #16]
 8024c60:	2200      	movs	r2, #0
 8024c62:	61da      	str	r2, [r3, #28]
  }
}
 8024c64:	bf00      	nop
 8024c66:	3718      	adds	r7, #24
 8024c68:	46bd      	mov	sp, r7
 8024c6a:	bd80      	pop	{r7, pc}
 8024c6c:	0802369d 	.word	0x0802369d
 8024c70:	08024ae1 	.word	0x08024ae1
 8024c74:	08024751 	.word	0x08024751
 8024c78:	0802468d 	.word	0x0802468d
 8024c7c:	08024b15 	.word	0x08024b15

08024c80 <new_color_map_2_quant>:
 * Switch to a new external colormap between output passes.
 */

METHODDEF(void)
new_color_map_2_quant (j_decompress_ptr cinfo)
{
 8024c80:	b480      	push	{r7}
 8024c82:	b085      	sub	sp, #20
 8024c84:	af00      	add	r7, sp, #0
 8024c86:	6078      	str	r0, [r7, #4]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8024c88:	687b      	ldr	r3, [r7, #4]
 8024c8a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8024c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the inverse color map */
  cquantize->needs_zeroed = TRUE;
 8024c90:	68fb      	ldr	r3, [r7, #12]
 8024c92:	2201      	movs	r2, #1
 8024c94:	61da      	str	r2, [r3, #28]
}
 8024c96:	bf00      	nop
 8024c98:	3714      	adds	r7, #20
 8024c9a:	46bd      	mov	sp, r7
 8024c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ca0:	4770      	bx	lr
	...

08024ca4 <jinit_2pass_quantizer>:
 * Module initialization routine for 2-pass color quantization.
 */

GLOBAL(void)
jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
 8024ca4:	b590      	push	{r4, r7, lr}
 8024ca6:	b087      	sub	sp, #28
 8024ca8:	af00      	add	r7, sp, #0
 8024caa:	6078      	str	r0, [r7, #4]
  my_cquantize_ptr cquantize;
  int i;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8024cac:	687b      	ldr	r3, [r7, #4]
 8024cae:	685b      	ldr	r3, [r3, #4]
 8024cb0:	681b      	ldr	r3, [r3, #0]
 8024cb2:	222c      	movs	r2, #44	; 0x2c
 8024cb4:	2101      	movs	r1, #1
 8024cb6:	6878      	ldr	r0, [r7, #4]
 8024cb8:	4798      	blx	r3
 8024cba:	6138      	str	r0, [r7, #16]
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 8024cbc:	687b      	ldr	r3, [r7, #4]
 8024cbe:	693a      	ldr	r2, [r7, #16]
 8024cc0:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
  cquantize->pub.start_pass = start_pass_2_quant;
 8024cc4:	693b      	ldr	r3, [r7, #16]
 8024cc6:	4a4f      	ldr	r2, [pc, #316]	; (8024e04 <jinit_2pass_quantizer+0x160>)
 8024cc8:	601a      	str	r2, [r3, #0]
  cquantize->pub.new_color_map = new_color_map_2_quant;
 8024cca:	693b      	ldr	r3, [r7, #16]
 8024ccc:	4a4e      	ldr	r2, [pc, #312]	; (8024e08 <jinit_2pass_quantizer+0x164>)
 8024cce:	60da      	str	r2, [r3, #12]
  cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
 8024cd0:	693b      	ldr	r3, [r7, #16]
 8024cd2:	2200      	movs	r2, #0
 8024cd4:	621a      	str	r2, [r3, #32]
  cquantize->error_limiter = NULL;
 8024cd6:	693b      	ldr	r3, [r7, #16]
 8024cd8:	2200      	movs	r2, #0
 8024cda:	629a      	str	r2, [r3, #40]	; 0x28

  /* Make sure jdmaster didn't give me a case I can't handle */
  if (cinfo->out_color_components != 3)
 8024cdc:	687b      	ldr	r3, [r7, #4]
 8024cde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8024ce0:	2b03      	cmp	r3, #3
 8024ce2:	d008      	beq.n	8024cf6 <jinit_2pass_quantizer+0x52>
    ERREXIT(cinfo, JERR_NOTIMPL);
 8024ce4:	687b      	ldr	r3, [r7, #4]
 8024ce6:	681b      	ldr	r3, [r3, #0]
 8024ce8:	2230      	movs	r2, #48	; 0x30
 8024cea:	615a      	str	r2, [r3, #20]
 8024cec:	687b      	ldr	r3, [r7, #4]
 8024cee:	681b      	ldr	r3, [r3, #0]
 8024cf0:	681b      	ldr	r3, [r3, #0]
 8024cf2:	6878      	ldr	r0, [r7, #4]
 8024cf4:	4798      	blx	r3

  /* Allocate the histogram/inverse colormap storage */
  cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
 8024cf6:	687b      	ldr	r3, [r7, #4]
 8024cf8:	685b      	ldr	r3, [r3, #4]
 8024cfa:	681b      	ldr	r3, [r3, #0]
 8024cfc:	2280      	movs	r2, #128	; 0x80
 8024cfe:	2101      	movs	r1, #1
 8024d00:	6878      	ldr	r0, [r7, #4]
 8024d02:	4798      	blx	r3
 8024d04:	4602      	mov	r2, r0
 8024d06:	693b      	ldr	r3, [r7, #16]
 8024d08:	619a      	str	r2, [r3, #24]
    ((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
  for (i = 0; i < HIST_C0_ELEMS; i++) {
 8024d0a:	2300      	movs	r3, #0
 8024d0c:	617b      	str	r3, [r7, #20]
 8024d0e:	e011      	b.n	8024d34 <jinit_2pass_quantizer+0x90>
    cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 8024d10:	687b      	ldr	r3, [r7, #4]
 8024d12:	685b      	ldr	r3, [r3, #4]
 8024d14:	685b      	ldr	r3, [r3, #4]
 8024d16:	693a      	ldr	r2, [r7, #16]
 8024d18:	6991      	ldr	r1, [r2, #24]
 8024d1a:	697a      	ldr	r2, [r7, #20]
 8024d1c:	0092      	lsls	r2, r2, #2
 8024d1e:	188c      	adds	r4, r1, r2
 8024d20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8024d24:	2101      	movs	r1, #1
 8024d26:	6878      	ldr	r0, [r7, #4]
 8024d28:	4798      	blx	r3
 8024d2a:	4603      	mov	r3, r0
 8024d2c:	6023      	str	r3, [r4, #0]
  for (i = 0; i < HIST_C0_ELEMS; i++) {
 8024d2e:	697b      	ldr	r3, [r7, #20]
 8024d30:	3301      	adds	r3, #1
 8024d32:	617b      	str	r3, [r7, #20]
 8024d34:	697b      	ldr	r3, [r7, #20]
 8024d36:	2b1f      	cmp	r3, #31
 8024d38:	ddea      	ble.n	8024d10 <jinit_2pass_quantizer+0x6c>
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
  }
  cquantize->needs_zeroed = TRUE; /* histogram is garbage now */
 8024d3a:	693b      	ldr	r3, [r7, #16]
 8024d3c:	2201      	movs	r2, #1
 8024d3e:	61da      	str	r2, [r3, #28]

  /* Allocate storage for the completed colormap, if required.
   * We do this now since it is FAR storage and may affect
   * the memory manager's space calculations.
   */
  if (cinfo->enable_2pass_quant) {
 8024d40:	687b      	ldr	r3, [r7, #4]
 8024d42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8024d44:	2b00      	cmp	r3, #0
 8024d46:	d033      	beq.n	8024db0 <jinit_2pass_quantizer+0x10c>
    /* Make sure color count is acceptable */
    int desired = cinfo->desired_number_of_colors;
 8024d48:	687b      	ldr	r3, [r7, #4]
 8024d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8024d4c:	60fb      	str	r3, [r7, #12]
    /* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
    if (desired < 8)
 8024d4e:	68fb      	ldr	r3, [r7, #12]
 8024d50:	2b07      	cmp	r3, #7
 8024d52:	dc0c      	bgt.n	8024d6e <jinit_2pass_quantizer+0xca>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
 8024d54:	687b      	ldr	r3, [r7, #4]
 8024d56:	681b      	ldr	r3, [r3, #0]
 8024d58:	223a      	movs	r2, #58	; 0x3a
 8024d5a:	615a      	str	r2, [r3, #20]
 8024d5c:	687b      	ldr	r3, [r7, #4]
 8024d5e:	681b      	ldr	r3, [r3, #0]
 8024d60:	2208      	movs	r2, #8
 8024d62:	619a      	str	r2, [r3, #24]
 8024d64:	687b      	ldr	r3, [r7, #4]
 8024d66:	681b      	ldr	r3, [r3, #0]
 8024d68:	681b      	ldr	r3, [r3, #0]
 8024d6a:	6878      	ldr	r0, [r7, #4]
 8024d6c:	4798      	blx	r3
    /* Make sure colormap indexes can be represented by JSAMPLEs */
    if (desired > MAXNUMCOLORS)
 8024d6e:	68fb      	ldr	r3, [r7, #12]
 8024d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8024d74:	dd0d      	ble.n	8024d92 <jinit_2pass_quantizer+0xee>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8024d76:	687b      	ldr	r3, [r7, #4]
 8024d78:	681b      	ldr	r3, [r3, #0]
 8024d7a:	223b      	movs	r2, #59	; 0x3b
 8024d7c:	615a      	str	r2, [r3, #20]
 8024d7e:	687b      	ldr	r3, [r7, #4]
 8024d80:	681b      	ldr	r3, [r3, #0]
 8024d82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8024d86:	619a      	str	r2, [r3, #24]
 8024d88:	687b      	ldr	r3, [r7, #4]
 8024d8a:	681b      	ldr	r3, [r3, #0]
 8024d8c:	681b      	ldr	r3, [r3, #0]
 8024d8e:	6878      	ldr	r0, [r7, #4]
 8024d90:	4798      	blx	r3
    cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
 8024d92:	687b      	ldr	r3, [r7, #4]
 8024d94:	685b      	ldr	r3, [r3, #4]
 8024d96:	689c      	ldr	r4, [r3, #8]
 8024d98:	68fa      	ldr	r2, [r7, #12]
 8024d9a:	2303      	movs	r3, #3
 8024d9c:	2101      	movs	r1, #1
 8024d9e:	6878      	ldr	r0, [r7, #4]
 8024da0:	47a0      	blx	r4
 8024da2:	4602      	mov	r2, r0
 8024da4:	693b      	ldr	r3, [r7, #16]
 8024da6:	611a      	str	r2, [r3, #16]
      ((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
    cquantize->desired = desired;
 8024da8:	693b      	ldr	r3, [r7, #16]
 8024daa:	68fa      	ldr	r2, [r7, #12]
 8024dac:	615a      	str	r2, [r3, #20]
 8024dae:	e002      	b.n	8024db6 <jinit_2pass_quantizer+0x112>
  } else
    cquantize->sv_colormap = NULL;
 8024db0:	693b      	ldr	r3, [r7, #16]
 8024db2:	2200      	movs	r2, #0
 8024db4:	611a      	str	r2, [r3, #16]

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
 8024db6:	687b      	ldr	r3, [r7, #4]
 8024db8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8024dbc:	2b00      	cmp	r3, #0
 8024dbe:	d003      	beq.n	8024dc8 <jinit_2pass_quantizer+0x124>
    cinfo->dither_mode = JDITHER_FS;
 8024dc0:	687b      	ldr	r3, [r7, #4]
 8024dc2:	2202      	movs	r2, #2
 8024dc4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Allocate Floyd-Steinberg workspace if necessary.
   * This isn't really needed until pass 2, but again it is FAR storage.
   * Although we will cope with a later change in dither_mode,
   * we do not promise to honor max_memory_to_use if dither_mode changes.
   */
  if (cinfo->dither_mode == JDITHER_FS) {
 8024dc8:	687b      	ldr	r3, [r7, #4]
 8024dca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8024dce:	2b02      	cmp	r3, #2
 8024dd0:	d113      	bne.n	8024dfa <jinit_2pass_quantizer+0x156>
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8024dd2:	687b      	ldr	r3, [r7, #4]
 8024dd4:	685b      	ldr	r3, [r3, #4]
 8024dd6:	685c      	ldr	r4, [r3, #4]
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
 8024dd8:	687b      	ldr	r3, [r7, #4]
 8024dda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8024ddc:	4613      	mov	r3, r2
 8024dde:	005b      	lsls	r3, r3, #1
 8024de0:	4413      	add	r3, r2
 8024de2:	005b      	lsls	r3, r3, #1
       (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
 8024de4:	330c      	adds	r3, #12
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8024de6:	461a      	mov	r2, r3
 8024de8:	2101      	movs	r1, #1
 8024dea:	6878      	ldr	r0, [r7, #4]
 8024dec:	47a0      	blx	r4
 8024dee:	4602      	mov	r2, r0
 8024df0:	693b      	ldr	r3, [r7, #16]
 8024df2:	621a      	str	r2, [r3, #32]
    /* Might as well create the error-limiting table too. */
    init_error_limit(cinfo);
 8024df4:	6878      	ldr	r0, [r7, #4]
 8024df6:	f7ff fdfb 	bl	80249f0 <init_error_limit>
  }
}
 8024dfa:	bf00      	nop
 8024dfc:	371c      	adds	r7, #28
 8024dfe:	46bd      	mov	sp, r7
 8024e00:	bd90      	pop	{r4, r7, pc}
 8024e02:	bf00      	nop
 8024e04:	08024b29 	.word	0x08024b29
 8024e08:	08024c81 	.word	0x08024c81

08024e0c <jdiv_round_up>:

GLOBAL(long)
jdiv_round_up (long a, long b)
/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
/* Assumes a >= 0, b > 0 */
{
 8024e0c:	b480      	push	{r7}
 8024e0e:	b083      	sub	sp, #12
 8024e10:	af00      	add	r7, sp, #0
 8024e12:	6078      	str	r0, [r7, #4]
 8024e14:	6039      	str	r1, [r7, #0]
  return (a + b - 1L) / b;
 8024e16:	687a      	ldr	r2, [r7, #4]
 8024e18:	683b      	ldr	r3, [r7, #0]
 8024e1a:	4413      	add	r3, r2
 8024e1c:	1e5a      	subs	r2, r3, #1
 8024e1e:	683b      	ldr	r3, [r7, #0]
 8024e20:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8024e24:	4618      	mov	r0, r3
 8024e26:	370c      	adds	r7, #12
 8024e28:	46bd      	mov	sp, r7
 8024e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e2e:	4770      	bx	lr

08024e30 <jround_up>:

GLOBAL(long)
jround_up (long a, long b)
/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
/* Assumes a >= 0, b > 0 */
{
 8024e30:	b480      	push	{r7}
 8024e32:	b083      	sub	sp, #12
 8024e34:	af00      	add	r7, sp, #0
 8024e36:	6078      	str	r0, [r7, #4]
 8024e38:	6039      	str	r1, [r7, #0]
  a += b - 1L;
 8024e3a:	683b      	ldr	r3, [r7, #0]
 8024e3c:	3b01      	subs	r3, #1
 8024e3e:	687a      	ldr	r2, [r7, #4]
 8024e40:	4413      	add	r3, r2
 8024e42:	607b      	str	r3, [r7, #4]
  return a - (a % b);
 8024e44:	687b      	ldr	r3, [r7, #4]
 8024e46:	683a      	ldr	r2, [r7, #0]
 8024e48:	fb93 f2f2 	sdiv	r2, r3, r2
 8024e4c:	6839      	ldr	r1, [r7, #0]
 8024e4e:	fb01 f202 	mul.w	r2, r1, r2
 8024e52:	1a9b      	subs	r3, r3, r2
 8024e54:	687a      	ldr	r2, [r7, #4]
 8024e56:	1ad3      	subs	r3, r2, r3
}
 8024e58:	4618      	mov	r0, r3
 8024e5a:	370c      	adds	r7, #12
 8024e5c:	46bd      	mov	sp, r7
 8024e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e62:	4770      	bx	lr

08024e64 <jcopy_sample_rows>:
/* Copy some rows of samples from one place to another.
 * num_rows rows are copied from input_array[source_row++]
 * to output_array[dest_row++]; these areas may overlap for duplication.
 * The source and destination arrays must be at least as wide as num_cols.
 */
{
 8024e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024e66:	b085      	sub	sp, #20
 8024e68:	af00      	add	r7, sp, #0
 8024e6a:	60f8      	str	r0, [r7, #12]
 8024e6c:	60b9      	str	r1, [r7, #8]
 8024e6e:	607a      	str	r2, [r7, #4]
 8024e70:	603b      	str	r3, [r7, #0]
  register JSAMPROW inptr, outptr;
#ifdef FMEMCOPY
  register size_t count = (size_t) (num_cols * SIZEOF(JSAMPLE));
 8024e72:	6afd      	ldr	r5, [r7, #44]	; 0x2c
#else
  register JDIMENSION count;
#endif
  register int row;

  input_array += source_row;
 8024e74:	68bb      	ldr	r3, [r7, #8]
 8024e76:	009b      	lsls	r3, r3, #2
 8024e78:	68fa      	ldr	r2, [r7, #12]
 8024e7a:	4413      	add	r3, r2
 8024e7c:	60fb      	str	r3, [r7, #12]
  output_array += dest_row;
 8024e7e:	683b      	ldr	r3, [r7, #0]
 8024e80:	009b      	lsls	r3, r3, #2
 8024e82:	687a      	ldr	r2, [r7, #4]
 8024e84:	4413      	add	r3, r2
 8024e86:	607b      	str	r3, [r7, #4]

  for (row = num_rows; row > 0; row--) {
 8024e88:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8024e8a:	e00c      	b.n	8024ea6 <jcopy_sample_rows+0x42>
    inptr = *input_array++;
 8024e8c:	68fb      	ldr	r3, [r7, #12]
 8024e8e:	1d1a      	adds	r2, r3, #4
 8024e90:	60fa      	str	r2, [r7, #12]
 8024e92:	6819      	ldr	r1, [r3, #0]
    outptr = *output_array++;
 8024e94:	687b      	ldr	r3, [r7, #4]
 8024e96:	1d1a      	adds	r2, r3, #4
 8024e98:	607a      	str	r2, [r7, #4]
 8024e9a:	681e      	ldr	r6, [r3, #0]
#ifdef FMEMCOPY
    FMEMCOPY(outptr, inptr, count);
 8024e9c:	462a      	mov	r2, r5
 8024e9e:	4630      	mov	r0, r6
 8024ea0:	f000 f854 	bl	8024f4c <memcpy>
  for (row = num_rows; row > 0; row--) {
 8024ea4:	3c01      	subs	r4, #1
 8024ea6:	2c00      	cmp	r4, #0
 8024ea8:	dcf0      	bgt.n	8024e8c <jcopy_sample_rows+0x28>
#else
    for (count = num_cols; count > 0; count--)
      *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
  }
}
 8024eaa:	bf00      	nop
 8024eac:	bf00      	nop
 8024eae:	3714      	adds	r7, #20
 8024eb0:	46bd      	mov	sp, r7
 8024eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08024eb4 <jcopy_block_row>:

GLOBAL(void)
jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
		 JDIMENSION num_blocks)
/* Copy a row of coefficient blocks from one place to another. */
{
 8024eb4:	b580      	push	{r7, lr}
 8024eb6:	b084      	sub	sp, #16
 8024eb8:	af00      	add	r7, sp, #0
 8024eba:	60f8      	str	r0, [r7, #12]
 8024ebc:	60b9      	str	r1, [r7, #8]
 8024ebe:	607a      	str	r2, [r7, #4]
#ifdef FMEMCOPY
  FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
 8024ec0:	687b      	ldr	r3, [r7, #4]
 8024ec2:	01db      	lsls	r3, r3, #7
 8024ec4:	461a      	mov	r2, r3
 8024ec6:	68f9      	ldr	r1, [r7, #12]
 8024ec8:	68b8      	ldr	r0, [r7, #8]
 8024eca:	f000 f83f 	bl	8024f4c <memcpy>
  outptr = (JCOEFPTR) output_row;
  for (count = (long) num_blocks * DCTSIZE2; count > 0; count--) {
    *outptr++ = *inptr++;
  }
#endif
}
 8024ece:	bf00      	nop
 8024ed0:	3710      	adds	r7, #16
 8024ed2:	46bd      	mov	sp, r7
 8024ed4:	bd80      	pop	{r7, pc}
	...

08024ed8 <__errno>:
 8024ed8:	4b01      	ldr	r3, [pc, #4]	; (8024ee0 <__errno+0x8>)
 8024eda:	6818      	ldr	r0, [r3, #0]
 8024edc:	4770      	bx	lr
 8024ede:	bf00      	nop
 8024ee0:	2000000c 	.word	0x2000000c

08024ee4 <__libc_init_array>:
 8024ee4:	b570      	push	{r4, r5, r6, lr}
 8024ee6:	4d0d      	ldr	r5, [pc, #52]	; (8024f1c <__libc_init_array+0x38>)
 8024ee8:	4c0d      	ldr	r4, [pc, #52]	; (8024f20 <__libc_init_array+0x3c>)
 8024eea:	1b64      	subs	r4, r4, r5
 8024eec:	10a4      	asrs	r4, r4, #2
 8024eee:	2600      	movs	r6, #0
 8024ef0:	42a6      	cmp	r6, r4
 8024ef2:	d109      	bne.n	8024f08 <__libc_init_array+0x24>
 8024ef4:	4d0b      	ldr	r5, [pc, #44]	; (8024f24 <__libc_init_array+0x40>)
 8024ef6:	4c0c      	ldr	r4, [pc, #48]	; (8024f28 <__libc_init_array+0x44>)
 8024ef8:	f000 fc5e 	bl	80257b8 <_init>
 8024efc:	1b64      	subs	r4, r4, r5
 8024efe:	10a4      	asrs	r4, r4, #2
 8024f00:	2600      	movs	r6, #0
 8024f02:	42a6      	cmp	r6, r4
 8024f04:	d105      	bne.n	8024f12 <__libc_init_array+0x2e>
 8024f06:	bd70      	pop	{r4, r5, r6, pc}
 8024f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8024f0c:	4798      	blx	r3
 8024f0e:	3601      	adds	r6, #1
 8024f10:	e7ee      	b.n	8024ef0 <__libc_init_array+0xc>
 8024f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8024f16:	4798      	blx	r3
 8024f18:	3601      	adds	r6, #1
 8024f1a:	e7f2      	b.n	8024f02 <__libc_init_array+0x1e>
 8024f1c:	08027b40 	.word	0x08027b40
 8024f20:	08027b40 	.word	0x08027b40
 8024f24:	08027b40 	.word	0x08027b40
 8024f28:	08027b44 	.word	0x08027b44

08024f2c <malloc>:
 8024f2c:	4b02      	ldr	r3, [pc, #8]	; (8024f38 <malloc+0xc>)
 8024f2e:	4601      	mov	r1, r0
 8024f30:	6818      	ldr	r0, [r3, #0]
 8024f32:	f000 b871 	b.w	8025018 <_malloc_r>
 8024f36:	bf00      	nop
 8024f38:	2000000c 	.word	0x2000000c

08024f3c <free>:
 8024f3c:	4b02      	ldr	r3, [pc, #8]	; (8024f48 <free+0xc>)
 8024f3e:	4601      	mov	r1, r0
 8024f40:	6818      	ldr	r0, [r3, #0]
 8024f42:	f000 b819 	b.w	8024f78 <_free_r>
 8024f46:	bf00      	nop
 8024f48:	2000000c 	.word	0x2000000c

08024f4c <memcpy>:
 8024f4c:	440a      	add	r2, r1
 8024f4e:	4291      	cmp	r1, r2
 8024f50:	f100 33ff 	add.w	r3, r0, #4294967295
 8024f54:	d100      	bne.n	8024f58 <memcpy+0xc>
 8024f56:	4770      	bx	lr
 8024f58:	b510      	push	{r4, lr}
 8024f5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024f5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024f62:	4291      	cmp	r1, r2
 8024f64:	d1f9      	bne.n	8024f5a <memcpy+0xe>
 8024f66:	bd10      	pop	{r4, pc}

08024f68 <memset>:
 8024f68:	4402      	add	r2, r0
 8024f6a:	4603      	mov	r3, r0
 8024f6c:	4293      	cmp	r3, r2
 8024f6e:	d100      	bne.n	8024f72 <memset+0xa>
 8024f70:	4770      	bx	lr
 8024f72:	f803 1b01 	strb.w	r1, [r3], #1
 8024f76:	e7f9      	b.n	8024f6c <memset+0x4>

08024f78 <_free_r>:
 8024f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024f7a:	2900      	cmp	r1, #0
 8024f7c:	d048      	beq.n	8025010 <_free_r+0x98>
 8024f7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024f82:	9001      	str	r0, [sp, #4]
 8024f84:	2b00      	cmp	r3, #0
 8024f86:	f1a1 0404 	sub.w	r4, r1, #4
 8024f8a:	bfb8      	it	lt
 8024f8c:	18e4      	addlt	r4, r4, r3
 8024f8e:	f000 f8cd 	bl	802512c <__malloc_lock>
 8024f92:	4a20      	ldr	r2, [pc, #128]	; (8025014 <_free_r+0x9c>)
 8024f94:	9801      	ldr	r0, [sp, #4]
 8024f96:	6813      	ldr	r3, [r2, #0]
 8024f98:	4615      	mov	r5, r2
 8024f9a:	b933      	cbnz	r3, 8024faa <_free_r+0x32>
 8024f9c:	6063      	str	r3, [r4, #4]
 8024f9e:	6014      	str	r4, [r2, #0]
 8024fa0:	b003      	add	sp, #12
 8024fa2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024fa6:	f000 b8c7 	b.w	8025138 <__malloc_unlock>
 8024faa:	42a3      	cmp	r3, r4
 8024fac:	d90b      	bls.n	8024fc6 <_free_r+0x4e>
 8024fae:	6821      	ldr	r1, [r4, #0]
 8024fb0:	1862      	adds	r2, r4, r1
 8024fb2:	4293      	cmp	r3, r2
 8024fb4:	bf04      	itt	eq
 8024fb6:	681a      	ldreq	r2, [r3, #0]
 8024fb8:	685b      	ldreq	r3, [r3, #4]
 8024fba:	6063      	str	r3, [r4, #4]
 8024fbc:	bf04      	itt	eq
 8024fbe:	1852      	addeq	r2, r2, r1
 8024fc0:	6022      	streq	r2, [r4, #0]
 8024fc2:	602c      	str	r4, [r5, #0]
 8024fc4:	e7ec      	b.n	8024fa0 <_free_r+0x28>
 8024fc6:	461a      	mov	r2, r3
 8024fc8:	685b      	ldr	r3, [r3, #4]
 8024fca:	b10b      	cbz	r3, 8024fd0 <_free_r+0x58>
 8024fcc:	42a3      	cmp	r3, r4
 8024fce:	d9fa      	bls.n	8024fc6 <_free_r+0x4e>
 8024fd0:	6811      	ldr	r1, [r2, #0]
 8024fd2:	1855      	adds	r5, r2, r1
 8024fd4:	42a5      	cmp	r5, r4
 8024fd6:	d10b      	bne.n	8024ff0 <_free_r+0x78>
 8024fd8:	6824      	ldr	r4, [r4, #0]
 8024fda:	4421      	add	r1, r4
 8024fdc:	1854      	adds	r4, r2, r1
 8024fde:	42a3      	cmp	r3, r4
 8024fe0:	6011      	str	r1, [r2, #0]
 8024fe2:	d1dd      	bne.n	8024fa0 <_free_r+0x28>
 8024fe4:	681c      	ldr	r4, [r3, #0]
 8024fe6:	685b      	ldr	r3, [r3, #4]
 8024fe8:	6053      	str	r3, [r2, #4]
 8024fea:	4421      	add	r1, r4
 8024fec:	6011      	str	r1, [r2, #0]
 8024fee:	e7d7      	b.n	8024fa0 <_free_r+0x28>
 8024ff0:	d902      	bls.n	8024ff8 <_free_r+0x80>
 8024ff2:	230c      	movs	r3, #12
 8024ff4:	6003      	str	r3, [r0, #0]
 8024ff6:	e7d3      	b.n	8024fa0 <_free_r+0x28>
 8024ff8:	6825      	ldr	r5, [r4, #0]
 8024ffa:	1961      	adds	r1, r4, r5
 8024ffc:	428b      	cmp	r3, r1
 8024ffe:	bf04      	itt	eq
 8025000:	6819      	ldreq	r1, [r3, #0]
 8025002:	685b      	ldreq	r3, [r3, #4]
 8025004:	6063      	str	r3, [r4, #4]
 8025006:	bf04      	itt	eq
 8025008:	1949      	addeq	r1, r1, r5
 802500a:	6021      	streq	r1, [r4, #0]
 802500c:	6054      	str	r4, [r2, #4]
 802500e:	e7c7      	b.n	8024fa0 <_free_r+0x28>
 8025010:	b003      	add	sp, #12
 8025012:	bd30      	pop	{r4, r5, pc}
 8025014:	200000d0 	.word	0x200000d0

08025018 <_malloc_r>:
 8025018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802501a:	1ccd      	adds	r5, r1, #3
 802501c:	f025 0503 	bic.w	r5, r5, #3
 8025020:	3508      	adds	r5, #8
 8025022:	2d0c      	cmp	r5, #12
 8025024:	bf38      	it	cc
 8025026:	250c      	movcc	r5, #12
 8025028:	2d00      	cmp	r5, #0
 802502a:	4606      	mov	r6, r0
 802502c:	db01      	blt.n	8025032 <_malloc_r+0x1a>
 802502e:	42a9      	cmp	r1, r5
 8025030:	d903      	bls.n	802503a <_malloc_r+0x22>
 8025032:	230c      	movs	r3, #12
 8025034:	6033      	str	r3, [r6, #0]
 8025036:	2000      	movs	r0, #0
 8025038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802503a:	f000 f877 	bl	802512c <__malloc_lock>
 802503e:	4921      	ldr	r1, [pc, #132]	; (80250c4 <_malloc_r+0xac>)
 8025040:	680a      	ldr	r2, [r1, #0]
 8025042:	4614      	mov	r4, r2
 8025044:	b99c      	cbnz	r4, 802506e <_malloc_r+0x56>
 8025046:	4f20      	ldr	r7, [pc, #128]	; (80250c8 <_malloc_r+0xb0>)
 8025048:	683b      	ldr	r3, [r7, #0]
 802504a:	b923      	cbnz	r3, 8025056 <_malloc_r+0x3e>
 802504c:	4621      	mov	r1, r4
 802504e:	4630      	mov	r0, r6
 8025050:	f000 f83c 	bl	80250cc <_sbrk_r>
 8025054:	6038      	str	r0, [r7, #0]
 8025056:	4629      	mov	r1, r5
 8025058:	4630      	mov	r0, r6
 802505a:	f000 f837 	bl	80250cc <_sbrk_r>
 802505e:	1c43      	adds	r3, r0, #1
 8025060:	d123      	bne.n	80250aa <_malloc_r+0x92>
 8025062:	230c      	movs	r3, #12
 8025064:	6033      	str	r3, [r6, #0]
 8025066:	4630      	mov	r0, r6
 8025068:	f000 f866 	bl	8025138 <__malloc_unlock>
 802506c:	e7e3      	b.n	8025036 <_malloc_r+0x1e>
 802506e:	6823      	ldr	r3, [r4, #0]
 8025070:	1b5b      	subs	r3, r3, r5
 8025072:	d417      	bmi.n	80250a4 <_malloc_r+0x8c>
 8025074:	2b0b      	cmp	r3, #11
 8025076:	d903      	bls.n	8025080 <_malloc_r+0x68>
 8025078:	6023      	str	r3, [r4, #0]
 802507a:	441c      	add	r4, r3
 802507c:	6025      	str	r5, [r4, #0]
 802507e:	e004      	b.n	802508a <_malloc_r+0x72>
 8025080:	6863      	ldr	r3, [r4, #4]
 8025082:	42a2      	cmp	r2, r4
 8025084:	bf0c      	ite	eq
 8025086:	600b      	streq	r3, [r1, #0]
 8025088:	6053      	strne	r3, [r2, #4]
 802508a:	4630      	mov	r0, r6
 802508c:	f000 f854 	bl	8025138 <__malloc_unlock>
 8025090:	f104 000b 	add.w	r0, r4, #11
 8025094:	1d23      	adds	r3, r4, #4
 8025096:	f020 0007 	bic.w	r0, r0, #7
 802509a:	1ac2      	subs	r2, r0, r3
 802509c:	d0cc      	beq.n	8025038 <_malloc_r+0x20>
 802509e:	1a1b      	subs	r3, r3, r0
 80250a0:	50a3      	str	r3, [r4, r2]
 80250a2:	e7c9      	b.n	8025038 <_malloc_r+0x20>
 80250a4:	4622      	mov	r2, r4
 80250a6:	6864      	ldr	r4, [r4, #4]
 80250a8:	e7cc      	b.n	8025044 <_malloc_r+0x2c>
 80250aa:	1cc4      	adds	r4, r0, #3
 80250ac:	f024 0403 	bic.w	r4, r4, #3
 80250b0:	42a0      	cmp	r0, r4
 80250b2:	d0e3      	beq.n	802507c <_malloc_r+0x64>
 80250b4:	1a21      	subs	r1, r4, r0
 80250b6:	4630      	mov	r0, r6
 80250b8:	f000 f808 	bl	80250cc <_sbrk_r>
 80250bc:	3001      	adds	r0, #1
 80250be:	d1dd      	bne.n	802507c <_malloc_r+0x64>
 80250c0:	e7cf      	b.n	8025062 <_malloc_r+0x4a>
 80250c2:	bf00      	nop
 80250c4:	200000d0 	.word	0x200000d0
 80250c8:	200000d4 	.word	0x200000d4

080250cc <_sbrk_r>:
 80250cc:	b538      	push	{r3, r4, r5, lr}
 80250ce:	4d06      	ldr	r5, [pc, #24]	; (80250e8 <_sbrk_r+0x1c>)
 80250d0:	2300      	movs	r3, #0
 80250d2:	4604      	mov	r4, r0
 80250d4:	4608      	mov	r0, r1
 80250d6:	602b      	str	r3, [r5, #0]
 80250d8:	f7dc fddc 	bl	8001c94 <_sbrk>
 80250dc:	1c43      	adds	r3, r0, #1
 80250de:	d102      	bne.n	80250e6 <_sbrk_r+0x1a>
 80250e0:	682b      	ldr	r3, [r5, #0]
 80250e2:	b103      	cbz	r3, 80250e6 <_sbrk_r+0x1a>
 80250e4:	6023      	str	r3, [r4, #0]
 80250e6:	bd38      	pop	{r3, r4, r5, pc}
 80250e8:	20001154 	.word	0x20001154

080250ec <siprintf>:
 80250ec:	b40e      	push	{r1, r2, r3}
 80250ee:	b500      	push	{lr}
 80250f0:	b09c      	sub	sp, #112	; 0x70
 80250f2:	ab1d      	add	r3, sp, #116	; 0x74
 80250f4:	9002      	str	r0, [sp, #8]
 80250f6:	9006      	str	r0, [sp, #24]
 80250f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80250fc:	4809      	ldr	r0, [pc, #36]	; (8025124 <siprintf+0x38>)
 80250fe:	9107      	str	r1, [sp, #28]
 8025100:	9104      	str	r1, [sp, #16]
 8025102:	4909      	ldr	r1, [pc, #36]	; (8025128 <siprintf+0x3c>)
 8025104:	f853 2b04 	ldr.w	r2, [r3], #4
 8025108:	9105      	str	r1, [sp, #20]
 802510a:	6800      	ldr	r0, [r0, #0]
 802510c:	9301      	str	r3, [sp, #4]
 802510e:	a902      	add	r1, sp, #8
 8025110:	f000 f874 	bl	80251fc <_svfiprintf_r>
 8025114:	9b02      	ldr	r3, [sp, #8]
 8025116:	2200      	movs	r2, #0
 8025118:	701a      	strb	r2, [r3, #0]
 802511a:	b01c      	add	sp, #112	; 0x70
 802511c:	f85d eb04 	ldr.w	lr, [sp], #4
 8025120:	b003      	add	sp, #12
 8025122:	4770      	bx	lr
 8025124:	2000000c 	.word	0x2000000c
 8025128:	ffff0208 	.word	0xffff0208

0802512c <__malloc_lock>:
 802512c:	4801      	ldr	r0, [pc, #4]	; (8025134 <__malloc_lock+0x8>)
 802512e:	f000 baf9 	b.w	8025724 <__retarget_lock_acquire_recursive>
 8025132:	bf00      	nop
 8025134:	2000115c 	.word	0x2000115c

08025138 <__malloc_unlock>:
 8025138:	4801      	ldr	r0, [pc, #4]	; (8025140 <__malloc_unlock+0x8>)
 802513a:	f000 baf4 	b.w	8025726 <__retarget_lock_release_recursive>
 802513e:	bf00      	nop
 8025140:	2000115c 	.word	0x2000115c

08025144 <__ssputs_r>:
 8025144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025148:	688e      	ldr	r6, [r1, #8]
 802514a:	429e      	cmp	r6, r3
 802514c:	4682      	mov	sl, r0
 802514e:	460c      	mov	r4, r1
 8025150:	4690      	mov	r8, r2
 8025152:	461f      	mov	r7, r3
 8025154:	d838      	bhi.n	80251c8 <__ssputs_r+0x84>
 8025156:	898a      	ldrh	r2, [r1, #12]
 8025158:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802515c:	d032      	beq.n	80251c4 <__ssputs_r+0x80>
 802515e:	6825      	ldr	r5, [r4, #0]
 8025160:	6909      	ldr	r1, [r1, #16]
 8025162:	eba5 0901 	sub.w	r9, r5, r1
 8025166:	6965      	ldr	r5, [r4, #20]
 8025168:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802516c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8025170:	3301      	adds	r3, #1
 8025172:	444b      	add	r3, r9
 8025174:	106d      	asrs	r5, r5, #1
 8025176:	429d      	cmp	r5, r3
 8025178:	bf38      	it	cc
 802517a:	461d      	movcc	r5, r3
 802517c:	0553      	lsls	r3, r2, #21
 802517e:	d531      	bpl.n	80251e4 <__ssputs_r+0xa0>
 8025180:	4629      	mov	r1, r5
 8025182:	f7ff ff49 	bl	8025018 <_malloc_r>
 8025186:	4606      	mov	r6, r0
 8025188:	b950      	cbnz	r0, 80251a0 <__ssputs_r+0x5c>
 802518a:	230c      	movs	r3, #12
 802518c:	f8ca 3000 	str.w	r3, [sl]
 8025190:	89a3      	ldrh	r3, [r4, #12]
 8025192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025196:	81a3      	strh	r3, [r4, #12]
 8025198:	f04f 30ff 	mov.w	r0, #4294967295
 802519c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80251a0:	6921      	ldr	r1, [r4, #16]
 80251a2:	464a      	mov	r2, r9
 80251a4:	f7ff fed2 	bl	8024f4c <memcpy>
 80251a8:	89a3      	ldrh	r3, [r4, #12]
 80251aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80251ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80251b2:	81a3      	strh	r3, [r4, #12]
 80251b4:	6126      	str	r6, [r4, #16]
 80251b6:	6165      	str	r5, [r4, #20]
 80251b8:	444e      	add	r6, r9
 80251ba:	eba5 0509 	sub.w	r5, r5, r9
 80251be:	6026      	str	r6, [r4, #0]
 80251c0:	60a5      	str	r5, [r4, #8]
 80251c2:	463e      	mov	r6, r7
 80251c4:	42be      	cmp	r6, r7
 80251c6:	d900      	bls.n	80251ca <__ssputs_r+0x86>
 80251c8:	463e      	mov	r6, r7
 80251ca:	4632      	mov	r2, r6
 80251cc:	6820      	ldr	r0, [r4, #0]
 80251ce:	4641      	mov	r1, r8
 80251d0:	f000 faaa 	bl	8025728 <memmove>
 80251d4:	68a3      	ldr	r3, [r4, #8]
 80251d6:	6822      	ldr	r2, [r4, #0]
 80251d8:	1b9b      	subs	r3, r3, r6
 80251da:	4432      	add	r2, r6
 80251dc:	60a3      	str	r3, [r4, #8]
 80251de:	6022      	str	r2, [r4, #0]
 80251e0:	2000      	movs	r0, #0
 80251e2:	e7db      	b.n	802519c <__ssputs_r+0x58>
 80251e4:	462a      	mov	r2, r5
 80251e6:	f000 fab9 	bl	802575c <_realloc_r>
 80251ea:	4606      	mov	r6, r0
 80251ec:	2800      	cmp	r0, #0
 80251ee:	d1e1      	bne.n	80251b4 <__ssputs_r+0x70>
 80251f0:	6921      	ldr	r1, [r4, #16]
 80251f2:	4650      	mov	r0, sl
 80251f4:	f7ff fec0 	bl	8024f78 <_free_r>
 80251f8:	e7c7      	b.n	802518a <__ssputs_r+0x46>
	...

080251fc <_svfiprintf_r>:
 80251fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025200:	4698      	mov	r8, r3
 8025202:	898b      	ldrh	r3, [r1, #12]
 8025204:	061b      	lsls	r3, r3, #24
 8025206:	b09d      	sub	sp, #116	; 0x74
 8025208:	4607      	mov	r7, r0
 802520a:	460d      	mov	r5, r1
 802520c:	4614      	mov	r4, r2
 802520e:	d50e      	bpl.n	802522e <_svfiprintf_r+0x32>
 8025210:	690b      	ldr	r3, [r1, #16]
 8025212:	b963      	cbnz	r3, 802522e <_svfiprintf_r+0x32>
 8025214:	2140      	movs	r1, #64	; 0x40
 8025216:	f7ff feff 	bl	8025018 <_malloc_r>
 802521a:	6028      	str	r0, [r5, #0]
 802521c:	6128      	str	r0, [r5, #16]
 802521e:	b920      	cbnz	r0, 802522a <_svfiprintf_r+0x2e>
 8025220:	230c      	movs	r3, #12
 8025222:	603b      	str	r3, [r7, #0]
 8025224:	f04f 30ff 	mov.w	r0, #4294967295
 8025228:	e0d1      	b.n	80253ce <_svfiprintf_r+0x1d2>
 802522a:	2340      	movs	r3, #64	; 0x40
 802522c:	616b      	str	r3, [r5, #20]
 802522e:	2300      	movs	r3, #0
 8025230:	9309      	str	r3, [sp, #36]	; 0x24
 8025232:	2320      	movs	r3, #32
 8025234:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025238:	f8cd 800c 	str.w	r8, [sp, #12]
 802523c:	2330      	movs	r3, #48	; 0x30
 802523e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80253e8 <_svfiprintf_r+0x1ec>
 8025242:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025246:	f04f 0901 	mov.w	r9, #1
 802524a:	4623      	mov	r3, r4
 802524c:	469a      	mov	sl, r3
 802524e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025252:	b10a      	cbz	r2, 8025258 <_svfiprintf_r+0x5c>
 8025254:	2a25      	cmp	r2, #37	; 0x25
 8025256:	d1f9      	bne.n	802524c <_svfiprintf_r+0x50>
 8025258:	ebba 0b04 	subs.w	fp, sl, r4
 802525c:	d00b      	beq.n	8025276 <_svfiprintf_r+0x7a>
 802525e:	465b      	mov	r3, fp
 8025260:	4622      	mov	r2, r4
 8025262:	4629      	mov	r1, r5
 8025264:	4638      	mov	r0, r7
 8025266:	f7ff ff6d 	bl	8025144 <__ssputs_r>
 802526a:	3001      	adds	r0, #1
 802526c:	f000 80aa 	beq.w	80253c4 <_svfiprintf_r+0x1c8>
 8025270:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025272:	445a      	add	r2, fp
 8025274:	9209      	str	r2, [sp, #36]	; 0x24
 8025276:	f89a 3000 	ldrb.w	r3, [sl]
 802527a:	2b00      	cmp	r3, #0
 802527c:	f000 80a2 	beq.w	80253c4 <_svfiprintf_r+0x1c8>
 8025280:	2300      	movs	r3, #0
 8025282:	f04f 32ff 	mov.w	r2, #4294967295
 8025286:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802528a:	f10a 0a01 	add.w	sl, sl, #1
 802528e:	9304      	str	r3, [sp, #16]
 8025290:	9307      	str	r3, [sp, #28]
 8025292:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025296:	931a      	str	r3, [sp, #104]	; 0x68
 8025298:	4654      	mov	r4, sl
 802529a:	2205      	movs	r2, #5
 802529c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80252a0:	4851      	ldr	r0, [pc, #324]	; (80253e8 <_svfiprintf_r+0x1ec>)
 80252a2:	f7da ff9d 	bl	80001e0 <memchr>
 80252a6:	9a04      	ldr	r2, [sp, #16]
 80252a8:	b9d8      	cbnz	r0, 80252e2 <_svfiprintf_r+0xe6>
 80252aa:	06d0      	lsls	r0, r2, #27
 80252ac:	bf44      	itt	mi
 80252ae:	2320      	movmi	r3, #32
 80252b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80252b4:	0711      	lsls	r1, r2, #28
 80252b6:	bf44      	itt	mi
 80252b8:	232b      	movmi	r3, #43	; 0x2b
 80252ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80252be:	f89a 3000 	ldrb.w	r3, [sl]
 80252c2:	2b2a      	cmp	r3, #42	; 0x2a
 80252c4:	d015      	beq.n	80252f2 <_svfiprintf_r+0xf6>
 80252c6:	9a07      	ldr	r2, [sp, #28]
 80252c8:	4654      	mov	r4, sl
 80252ca:	2000      	movs	r0, #0
 80252cc:	f04f 0c0a 	mov.w	ip, #10
 80252d0:	4621      	mov	r1, r4
 80252d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80252d6:	3b30      	subs	r3, #48	; 0x30
 80252d8:	2b09      	cmp	r3, #9
 80252da:	d94e      	bls.n	802537a <_svfiprintf_r+0x17e>
 80252dc:	b1b0      	cbz	r0, 802530c <_svfiprintf_r+0x110>
 80252de:	9207      	str	r2, [sp, #28]
 80252e0:	e014      	b.n	802530c <_svfiprintf_r+0x110>
 80252e2:	eba0 0308 	sub.w	r3, r0, r8
 80252e6:	fa09 f303 	lsl.w	r3, r9, r3
 80252ea:	4313      	orrs	r3, r2
 80252ec:	9304      	str	r3, [sp, #16]
 80252ee:	46a2      	mov	sl, r4
 80252f0:	e7d2      	b.n	8025298 <_svfiprintf_r+0x9c>
 80252f2:	9b03      	ldr	r3, [sp, #12]
 80252f4:	1d19      	adds	r1, r3, #4
 80252f6:	681b      	ldr	r3, [r3, #0]
 80252f8:	9103      	str	r1, [sp, #12]
 80252fa:	2b00      	cmp	r3, #0
 80252fc:	bfbb      	ittet	lt
 80252fe:	425b      	neglt	r3, r3
 8025300:	f042 0202 	orrlt.w	r2, r2, #2
 8025304:	9307      	strge	r3, [sp, #28]
 8025306:	9307      	strlt	r3, [sp, #28]
 8025308:	bfb8      	it	lt
 802530a:	9204      	strlt	r2, [sp, #16]
 802530c:	7823      	ldrb	r3, [r4, #0]
 802530e:	2b2e      	cmp	r3, #46	; 0x2e
 8025310:	d10c      	bne.n	802532c <_svfiprintf_r+0x130>
 8025312:	7863      	ldrb	r3, [r4, #1]
 8025314:	2b2a      	cmp	r3, #42	; 0x2a
 8025316:	d135      	bne.n	8025384 <_svfiprintf_r+0x188>
 8025318:	9b03      	ldr	r3, [sp, #12]
 802531a:	1d1a      	adds	r2, r3, #4
 802531c:	681b      	ldr	r3, [r3, #0]
 802531e:	9203      	str	r2, [sp, #12]
 8025320:	2b00      	cmp	r3, #0
 8025322:	bfb8      	it	lt
 8025324:	f04f 33ff 	movlt.w	r3, #4294967295
 8025328:	3402      	adds	r4, #2
 802532a:	9305      	str	r3, [sp, #20]
 802532c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80253f8 <_svfiprintf_r+0x1fc>
 8025330:	7821      	ldrb	r1, [r4, #0]
 8025332:	2203      	movs	r2, #3
 8025334:	4650      	mov	r0, sl
 8025336:	f7da ff53 	bl	80001e0 <memchr>
 802533a:	b140      	cbz	r0, 802534e <_svfiprintf_r+0x152>
 802533c:	2340      	movs	r3, #64	; 0x40
 802533e:	eba0 000a 	sub.w	r0, r0, sl
 8025342:	fa03 f000 	lsl.w	r0, r3, r0
 8025346:	9b04      	ldr	r3, [sp, #16]
 8025348:	4303      	orrs	r3, r0
 802534a:	3401      	adds	r4, #1
 802534c:	9304      	str	r3, [sp, #16]
 802534e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025352:	4826      	ldr	r0, [pc, #152]	; (80253ec <_svfiprintf_r+0x1f0>)
 8025354:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025358:	2206      	movs	r2, #6
 802535a:	f7da ff41 	bl	80001e0 <memchr>
 802535e:	2800      	cmp	r0, #0
 8025360:	d038      	beq.n	80253d4 <_svfiprintf_r+0x1d8>
 8025362:	4b23      	ldr	r3, [pc, #140]	; (80253f0 <_svfiprintf_r+0x1f4>)
 8025364:	bb1b      	cbnz	r3, 80253ae <_svfiprintf_r+0x1b2>
 8025366:	9b03      	ldr	r3, [sp, #12]
 8025368:	3307      	adds	r3, #7
 802536a:	f023 0307 	bic.w	r3, r3, #7
 802536e:	3308      	adds	r3, #8
 8025370:	9303      	str	r3, [sp, #12]
 8025372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025374:	4433      	add	r3, r6
 8025376:	9309      	str	r3, [sp, #36]	; 0x24
 8025378:	e767      	b.n	802524a <_svfiprintf_r+0x4e>
 802537a:	fb0c 3202 	mla	r2, ip, r2, r3
 802537e:	460c      	mov	r4, r1
 8025380:	2001      	movs	r0, #1
 8025382:	e7a5      	b.n	80252d0 <_svfiprintf_r+0xd4>
 8025384:	2300      	movs	r3, #0
 8025386:	3401      	adds	r4, #1
 8025388:	9305      	str	r3, [sp, #20]
 802538a:	4619      	mov	r1, r3
 802538c:	f04f 0c0a 	mov.w	ip, #10
 8025390:	4620      	mov	r0, r4
 8025392:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025396:	3a30      	subs	r2, #48	; 0x30
 8025398:	2a09      	cmp	r2, #9
 802539a:	d903      	bls.n	80253a4 <_svfiprintf_r+0x1a8>
 802539c:	2b00      	cmp	r3, #0
 802539e:	d0c5      	beq.n	802532c <_svfiprintf_r+0x130>
 80253a0:	9105      	str	r1, [sp, #20]
 80253a2:	e7c3      	b.n	802532c <_svfiprintf_r+0x130>
 80253a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80253a8:	4604      	mov	r4, r0
 80253aa:	2301      	movs	r3, #1
 80253ac:	e7f0      	b.n	8025390 <_svfiprintf_r+0x194>
 80253ae:	ab03      	add	r3, sp, #12
 80253b0:	9300      	str	r3, [sp, #0]
 80253b2:	462a      	mov	r2, r5
 80253b4:	4b0f      	ldr	r3, [pc, #60]	; (80253f4 <_svfiprintf_r+0x1f8>)
 80253b6:	a904      	add	r1, sp, #16
 80253b8:	4638      	mov	r0, r7
 80253ba:	f3af 8000 	nop.w
 80253be:	1c42      	adds	r2, r0, #1
 80253c0:	4606      	mov	r6, r0
 80253c2:	d1d6      	bne.n	8025372 <_svfiprintf_r+0x176>
 80253c4:	89ab      	ldrh	r3, [r5, #12]
 80253c6:	065b      	lsls	r3, r3, #25
 80253c8:	f53f af2c 	bmi.w	8025224 <_svfiprintf_r+0x28>
 80253cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80253ce:	b01d      	add	sp, #116	; 0x74
 80253d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80253d4:	ab03      	add	r3, sp, #12
 80253d6:	9300      	str	r3, [sp, #0]
 80253d8:	462a      	mov	r2, r5
 80253da:	4b06      	ldr	r3, [pc, #24]	; (80253f4 <_svfiprintf_r+0x1f8>)
 80253dc:	a904      	add	r1, sp, #16
 80253de:	4638      	mov	r0, r7
 80253e0:	f000 f87a 	bl	80254d8 <_printf_i>
 80253e4:	e7eb      	b.n	80253be <_svfiprintf_r+0x1c2>
 80253e6:	bf00      	nop
 80253e8:	08027b04 	.word	0x08027b04
 80253ec:	08027b0e 	.word	0x08027b0e
 80253f0:	00000000 	.word	0x00000000
 80253f4:	08025145 	.word	0x08025145
 80253f8:	08027b0a 	.word	0x08027b0a

080253fc <_printf_common>:
 80253fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025400:	4616      	mov	r6, r2
 8025402:	4699      	mov	r9, r3
 8025404:	688a      	ldr	r2, [r1, #8]
 8025406:	690b      	ldr	r3, [r1, #16]
 8025408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802540c:	4293      	cmp	r3, r2
 802540e:	bfb8      	it	lt
 8025410:	4613      	movlt	r3, r2
 8025412:	6033      	str	r3, [r6, #0]
 8025414:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025418:	4607      	mov	r7, r0
 802541a:	460c      	mov	r4, r1
 802541c:	b10a      	cbz	r2, 8025422 <_printf_common+0x26>
 802541e:	3301      	adds	r3, #1
 8025420:	6033      	str	r3, [r6, #0]
 8025422:	6823      	ldr	r3, [r4, #0]
 8025424:	0699      	lsls	r1, r3, #26
 8025426:	bf42      	ittt	mi
 8025428:	6833      	ldrmi	r3, [r6, #0]
 802542a:	3302      	addmi	r3, #2
 802542c:	6033      	strmi	r3, [r6, #0]
 802542e:	6825      	ldr	r5, [r4, #0]
 8025430:	f015 0506 	ands.w	r5, r5, #6
 8025434:	d106      	bne.n	8025444 <_printf_common+0x48>
 8025436:	f104 0a19 	add.w	sl, r4, #25
 802543a:	68e3      	ldr	r3, [r4, #12]
 802543c:	6832      	ldr	r2, [r6, #0]
 802543e:	1a9b      	subs	r3, r3, r2
 8025440:	42ab      	cmp	r3, r5
 8025442:	dc26      	bgt.n	8025492 <_printf_common+0x96>
 8025444:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8025448:	1e13      	subs	r3, r2, #0
 802544a:	6822      	ldr	r2, [r4, #0]
 802544c:	bf18      	it	ne
 802544e:	2301      	movne	r3, #1
 8025450:	0692      	lsls	r2, r2, #26
 8025452:	d42b      	bmi.n	80254ac <_printf_common+0xb0>
 8025454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025458:	4649      	mov	r1, r9
 802545a:	4638      	mov	r0, r7
 802545c:	47c0      	blx	r8
 802545e:	3001      	adds	r0, #1
 8025460:	d01e      	beq.n	80254a0 <_printf_common+0xa4>
 8025462:	6823      	ldr	r3, [r4, #0]
 8025464:	68e5      	ldr	r5, [r4, #12]
 8025466:	6832      	ldr	r2, [r6, #0]
 8025468:	f003 0306 	and.w	r3, r3, #6
 802546c:	2b04      	cmp	r3, #4
 802546e:	bf08      	it	eq
 8025470:	1aad      	subeq	r5, r5, r2
 8025472:	68a3      	ldr	r3, [r4, #8]
 8025474:	6922      	ldr	r2, [r4, #16]
 8025476:	bf0c      	ite	eq
 8025478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802547c:	2500      	movne	r5, #0
 802547e:	4293      	cmp	r3, r2
 8025480:	bfc4      	itt	gt
 8025482:	1a9b      	subgt	r3, r3, r2
 8025484:	18ed      	addgt	r5, r5, r3
 8025486:	2600      	movs	r6, #0
 8025488:	341a      	adds	r4, #26
 802548a:	42b5      	cmp	r5, r6
 802548c:	d11a      	bne.n	80254c4 <_printf_common+0xc8>
 802548e:	2000      	movs	r0, #0
 8025490:	e008      	b.n	80254a4 <_printf_common+0xa8>
 8025492:	2301      	movs	r3, #1
 8025494:	4652      	mov	r2, sl
 8025496:	4649      	mov	r1, r9
 8025498:	4638      	mov	r0, r7
 802549a:	47c0      	blx	r8
 802549c:	3001      	adds	r0, #1
 802549e:	d103      	bne.n	80254a8 <_printf_common+0xac>
 80254a0:	f04f 30ff 	mov.w	r0, #4294967295
 80254a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80254a8:	3501      	adds	r5, #1
 80254aa:	e7c6      	b.n	802543a <_printf_common+0x3e>
 80254ac:	18e1      	adds	r1, r4, r3
 80254ae:	1c5a      	adds	r2, r3, #1
 80254b0:	2030      	movs	r0, #48	; 0x30
 80254b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80254b6:	4422      	add	r2, r4
 80254b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80254bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80254c0:	3302      	adds	r3, #2
 80254c2:	e7c7      	b.n	8025454 <_printf_common+0x58>
 80254c4:	2301      	movs	r3, #1
 80254c6:	4622      	mov	r2, r4
 80254c8:	4649      	mov	r1, r9
 80254ca:	4638      	mov	r0, r7
 80254cc:	47c0      	blx	r8
 80254ce:	3001      	adds	r0, #1
 80254d0:	d0e6      	beq.n	80254a0 <_printf_common+0xa4>
 80254d2:	3601      	adds	r6, #1
 80254d4:	e7d9      	b.n	802548a <_printf_common+0x8e>
	...

080254d8 <_printf_i>:
 80254d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80254dc:	460c      	mov	r4, r1
 80254de:	4691      	mov	r9, r2
 80254e0:	7e27      	ldrb	r7, [r4, #24]
 80254e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80254e4:	2f78      	cmp	r7, #120	; 0x78
 80254e6:	4680      	mov	r8, r0
 80254e8:	469a      	mov	sl, r3
 80254ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80254ee:	d807      	bhi.n	8025500 <_printf_i+0x28>
 80254f0:	2f62      	cmp	r7, #98	; 0x62
 80254f2:	d80a      	bhi.n	802550a <_printf_i+0x32>
 80254f4:	2f00      	cmp	r7, #0
 80254f6:	f000 80d8 	beq.w	80256aa <_printf_i+0x1d2>
 80254fa:	2f58      	cmp	r7, #88	; 0x58
 80254fc:	f000 80a3 	beq.w	8025646 <_printf_i+0x16e>
 8025500:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8025504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8025508:	e03a      	b.n	8025580 <_printf_i+0xa8>
 802550a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802550e:	2b15      	cmp	r3, #21
 8025510:	d8f6      	bhi.n	8025500 <_printf_i+0x28>
 8025512:	a001      	add	r0, pc, #4	; (adr r0, 8025518 <_printf_i+0x40>)
 8025514:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8025518:	08025571 	.word	0x08025571
 802551c:	08025585 	.word	0x08025585
 8025520:	08025501 	.word	0x08025501
 8025524:	08025501 	.word	0x08025501
 8025528:	08025501 	.word	0x08025501
 802552c:	08025501 	.word	0x08025501
 8025530:	08025585 	.word	0x08025585
 8025534:	08025501 	.word	0x08025501
 8025538:	08025501 	.word	0x08025501
 802553c:	08025501 	.word	0x08025501
 8025540:	08025501 	.word	0x08025501
 8025544:	08025691 	.word	0x08025691
 8025548:	080255b5 	.word	0x080255b5
 802554c:	08025673 	.word	0x08025673
 8025550:	08025501 	.word	0x08025501
 8025554:	08025501 	.word	0x08025501
 8025558:	080256b3 	.word	0x080256b3
 802555c:	08025501 	.word	0x08025501
 8025560:	080255b5 	.word	0x080255b5
 8025564:	08025501 	.word	0x08025501
 8025568:	08025501 	.word	0x08025501
 802556c:	0802567b 	.word	0x0802567b
 8025570:	680b      	ldr	r3, [r1, #0]
 8025572:	1d1a      	adds	r2, r3, #4
 8025574:	681b      	ldr	r3, [r3, #0]
 8025576:	600a      	str	r2, [r1, #0]
 8025578:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802557c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025580:	2301      	movs	r3, #1
 8025582:	e0a3      	b.n	80256cc <_printf_i+0x1f4>
 8025584:	6825      	ldr	r5, [r4, #0]
 8025586:	6808      	ldr	r0, [r1, #0]
 8025588:	062e      	lsls	r6, r5, #24
 802558a:	f100 0304 	add.w	r3, r0, #4
 802558e:	d50a      	bpl.n	80255a6 <_printf_i+0xce>
 8025590:	6805      	ldr	r5, [r0, #0]
 8025592:	600b      	str	r3, [r1, #0]
 8025594:	2d00      	cmp	r5, #0
 8025596:	da03      	bge.n	80255a0 <_printf_i+0xc8>
 8025598:	232d      	movs	r3, #45	; 0x2d
 802559a:	426d      	negs	r5, r5
 802559c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80255a0:	485e      	ldr	r0, [pc, #376]	; (802571c <_printf_i+0x244>)
 80255a2:	230a      	movs	r3, #10
 80255a4:	e019      	b.n	80255da <_printf_i+0x102>
 80255a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80255aa:	6805      	ldr	r5, [r0, #0]
 80255ac:	600b      	str	r3, [r1, #0]
 80255ae:	bf18      	it	ne
 80255b0:	b22d      	sxthne	r5, r5
 80255b2:	e7ef      	b.n	8025594 <_printf_i+0xbc>
 80255b4:	680b      	ldr	r3, [r1, #0]
 80255b6:	6825      	ldr	r5, [r4, #0]
 80255b8:	1d18      	adds	r0, r3, #4
 80255ba:	6008      	str	r0, [r1, #0]
 80255bc:	0628      	lsls	r0, r5, #24
 80255be:	d501      	bpl.n	80255c4 <_printf_i+0xec>
 80255c0:	681d      	ldr	r5, [r3, #0]
 80255c2:	e002      	b.n	80255ca <_printf_i+0xf2>
 80255c4:	0669      	lsls	r1, r5, #25
 80255c6:	d5fb      	bpl.n	80255c0 <_printf_i+0xe8>
 80255c8:	881d      	ldrh	r5, [r3, #0]
 80255ca:	4854      	ldr	r0, [pc, #336]	; (802571c <_printf_i+0x244>)
 80255cc:	2f6f      	cmp	r7, #111	; 0x6f
 80255ce:	bf0c      	ite	eq
 80255d0:	2308      	moveq	r3, #8
 80255d2:	230a      	movne	r3, #10
 80255d4:	2100      	movs	r1, #0
 80255d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80255da:	6866      	ldr	r6, [r4, #4]
 80255dc:	60a6      	str	r6, [r4, #8]
 80255de:	2e00      	cmp	r6, #0
 80255e0:	bfa2      	ittt	ge
 80255e2:	6821      	ldrge	r1, [r4, #0]
 80255e4:	f021 0104 	bicge.w	r1, r1, #4
 80255e8:	6021      	strge	r1, [r4, #0]
 80255ea:	b90d      	cbnz	r5, 80255f0 <_printf_i+0x118>
 80255ec:	2e00      	cmp	r6, #0
 80255ee:	d04d      	beq.n	802568c <_printf_i+0x1b4>
 80255f0:	4616      	mov	r6, r2
 80255f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80255f6:	fb03 5711 	mls	r7, r3, r1, r5
 80255fa:	5dc7      	ldrb	r7, [r0, r7]
 80255fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8025600:	462f      	mov	r7, r5
 8025602:	42bb      	cmp	r3, r7
 8025604:	460d      	mov	r5, r1
 8025606:	d9f4      	bls.n	80255f2 <_printf_i+0x11a>
 8025608:	2b08      	cmp	r3, #8
 802560a:	d10b      	bne.n	8025624 <_printf_i+0x14c>
 802560c:	6823      	ldr	r3, [r4, #0]
 802560e:	07df      	lsls	r7, r3, #31
 8025610:	d508      	bpl.n	8025624 <_printf_i+0x14c>
 8025612:	6923      	ldr	r3, [r4, #16]
 8025614:	6861      	ldr	r1, [r4, #4]
 8025616:	4299      	cmp	r1, r3
 8025618:	bfde      	ittt	le
 802561a:	2330      	movle	r3, #48	; 0x30
 802561c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8025620:	f106 36ff 	addle.w	r6, r6, #4294967295
 8025624:	1b92      	subs	r2, r2, r6
 8025626:	6122      	str	r2, [r4, #16]
 8025628:	f8cd a000 	str.w	sl, [sp]
 802562c:	464b      	mov	r3, r9
 802562e:	aa03      	add	r2, sp, #12
 8025630:	4621      	mov	r1, r4
 8025632:	4640      	mov	r0, r8
 8025634:	f7ff fee2 	bl	80253fc <_printf_common>
 8025638:	3001      	adds	r0, #1
 802563a:	d14c      	bne.n	80256d6 <_printf_i+0x1fe>
 802563c:	f04f 30ff 	mov.w	r0, #4294967295
 8025640:	b004      	add	sp, #16
 8025642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025646:	4835      	ldr	r0, [pc, #212]	; (802571c <_printf_i+0x244>)
 8025648:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802564c:	6823      	ldr	r3, [r4, #0]
 802564e:	680e      	ldr	r6, [r1, #0]
 8025650:	061f      	lsls	r7, r3, #24
 8025652:	f856 5b04 	ldr.w	r5, [r6], #4
 8025656:	600e      	str	r6, [r1, #0]
 8025658:	d514      	bpl.n	8025684 <_printf_i+0x1ac>
 802565a:	07d9      	lsls	r1, r3, #31
 802565c:	bf44      	itt	mi
 802565e:	f043 0320 	orrmi.w	r3, r3, #32
 8025662:	6023      	strmi	r3, [r4, #0]
 8025664:	b91d      	cbnz	r5, 802566e <_printf_i+0x196>
 8025666:	6823      	ldr	r3, [r4, #0]
 8025668:	f023 0320 	bic.w	r3, r3, #32
 802566c:	6023      	str	r3, [r4, #0]
 802566e:	2310      	movs	r3, #16
 8025670:	e7b0      	b.n	80255d4 <_printf_i+0xfc>
 8025672:	6823      	ldr	r3, [r4, #0]
 8025674:	f043 0320 	orr.w	r3, r3, #32
 8025678:	6023      	str	r3, [r4, #0]
 802567a:	2378      	movs	r3, #120	; 0x78
 802567c:	4828      	ldr	r0, [pc, #160]	; (8025720 <_printf_i+0x248>)
 802567e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8025682:	e7e3      	b.n	802564c <_printf_i+0x174>
 8025684:	065e      	lsls	r6, r3, #25
 8025686:	bf48      	it	mi
 8025688:	b2ad      	uxthmi	r5, r5
 802568a:	e7e6      	b.n	802565a <_printf_i+0x182>
 802568c:	4616      	mov	r6, r2
 802568e:	e7bb      	b.n	8025608 <_printf_i+0x130>
 8025690:	680b      	ldr	r3, [r1, #0]
 8025692:	6826      	ldr	r6, [r4, #0]
 8025694:	6960      	ldr	r0, [r4, #20]
 8025696:	1d1d      	adds	r5, r3, #4
 8025698:	600d      	str	r5, [r1, #0]
 802569a:	0635      	lsls	r5, r6, #24
 802569c:	681b      	ldr	r3, [r3, #0]
 802569e:	d501      	bpl.n	80256a4 <_printf_i+0x1cc>
 80256a0:	6018      	str	r0, [r3, #0]
 80256a2:	e002      	b.n	80256aa <_printf_i+0x1d2>
 80256a4:	0671      	lsls	r1, r6, #25
 80256a6:	d5fb      	bpl.n	80256a0 <_printf_i+0x1c8>
 80256a8:	8018      	strh	r0, [r3, #0]
 80256aa:	2300      	movs	r3, #0
 80256ac:	6123      	str	r3, [r4, #16]
 80256ae:	4616      	mov	r6, r2
 80256b0:	e7ba      	b.n	8025628 <_printf_i+0x150>
 80256b2:	680b      	ldr	r3, [r1, #0]
 80256b4:	1d1a      	adds	r2, r3, #4
 80256b6:	600a      	str	r2, [r1, #0]
 80256b8:	681e      	ldr	r6, [r3, #0]
 80256ba:	6862      	ldr	r2, [r4, #4]
 80256bc:	2100      	movs	r1, #0
 80256be:	4630      	mov	r0, r6
 80256c0:	f7da fd8e 	bl	80001e0 <memchr>
 80256c4:	b108      	cbz	r0, 80256ca <_printf_i+0x1f2>
 80256c6:	1b80      	subs	r0, r0, r6
 80256c8:	6060      	str	r0, [r4, #4]
 80256ca:	6863      	ldr	r3, [r4, #4]
 80256cc:	6123      	str	r3, [r4, #16]
 80256ce:	2300      	movs	r3, #0
 80256d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80256d4:	e7a8      	b.n	8025628 <_printf_i+0x150>
 80256d6:	6923      	ldr	r3, [r4, #16]
 80256d8:	4632      	mov	r2, r6
 80256da:	4649      	mov	r1, r9
 80256dc:	4640      	mov	r0, r8
 80256de:	47d0      	blx	sl
 80256e0:	3001      	adds	r0, #1
 80256e2:	d0ab      	beq.n	802563c <_printf_i+0x164>
 80256e4:	6823      	ldr	r3, [r4, #0]
 80256e6:	079b      	lsls	r3, r3, #30
 80256e8:	d413      	bmi.n	8025712 <_printf_i+0x23a>
 80256ea:	68e0      	ldr	r0, [r4, #12]
 80256ec:	9b03      	ldr	r3, [sp, #12]
 80256ee:	4298      	cmp	r0, r3
 80256f0:	bfb8      	it	lt
 80256f2:	4618      	movlt	r0, r3
 80256f4:	e7a4      	b.n	8025640 <_printf_i+0x168>
 80256f6:	2301      	movs	r3, #1
 80256f8:	4632      	mov	r2, r6
 80256fa:	4649      	mov	r1, r9
 80256fc:	4640      	mov	r0, r8
 80256fe:	47d0      	blx	sl
 8025700:	3001      	adds	r0, #1
 8025702:	d09b      	beq.n	802563c <_printf_i+0x164>
 8025704:	3501      	adds	r5, #1
 8025706:	68e3      	ldr	r3, [r4, #12]
 8025708:	9903      	ldr	r1, [sp, #12]
 802570a:	1a5b      	subs	r3, r3, r1
 802570c:	42ab      	cmp	r3, r5
 802570e:	dcf2      	bgt.n	80256f6 <_printf_i+0x21e>
 8025710:	e7eb      	b.n	80256ea <_printf_i+0x212>
 8025712:	2500      	movs	r5, #0
 8025714:	f104 0619 	add.w	r6, r4, #25
 8025718:	e7f5      	b.n	8025706 <_printf_i+0x22e>
 802571a:	bf00      	nop
 802571c:	08027b15 	.word	0x08027b15
 8025720:	08027b26 	.word	0x08027b26

08025724 <__retarget_lock_acquire_recursive>:
 8025724:	4770      	bx	lr

08025726 <__retarget_lock_release_recursive>:
 8025726:	4770      	bx	lr

08025728 <memmove>:
 8025728:	4288      	cmp	r0, r1
 802572a:	b510      	push	{r4, lr}
 802572c:	eb01 0402 	add.w	r4, r1, r2
 8025730:	d902      	bls.n	8025738 <memmove+0x10>
 8025732:	4284      	cmp	r4, r0
 8025734:	4623      	mov	r3, r4
 8025736:	d807      	bhi.n	8025748 <memmove+0x20>
 8025738:	1e43      	subs	r3, r0, #1
 802573a:	42a1      	cmp	r1, r4
 802573c:	d008      	beq.n	8025750 <memmove+0x28>
 802573e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025742:	f803 2f01 	strb.w	r2, [r3, #1]!
 8025746:	e7f8      	b.n	802573a <memmove+0x12>
 8025748:	4402      	add	r2, r0
 802574a:	4601      	mov	r1, r0
 802574c:	428a      	cmp	r2, r1
 802574e:	d100      	bne.n	8025752 <memmove+0x2a>
 8025750:	bd10      	pop	{r4, pc}
 8025752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8025756:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802575a:	e7f7      	b.n	802574c <memmove+0x24>

0802575c <_realloc_r>:
 802575c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802575e:	4607      	mov	r7, r0
 8025760:	4614      	mov	r4, r2
 8025762:	460e      	mov	r6, r1
 8025764:	b921      	cbnz	r1, 8025770 <_realloc_r+0x14>
 8025766:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802576a:	4611      	mov	r1, r2
 802576c:	f7ff bc54 	b.w	8025018 <_malloc_r>
 8025770:	b922      	cbnz	r2, 802577c <_realloc_r+0x20>
 8025772:	f7ff fc01 	bl	8024f78 <_free_r>
 8025776:	4625      	mov	r5, r4
 8025778:	4628      	mov	r0, r5
 802577a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802577c:	f000 f814 	bl	80257a8 <_malloc_usable_size_r>
 8025780:	42a0      	cmp	r0, r4
 8025782:	d20f      	bcs.n	80257a4 <_realloc_r+0x48>
 8025784:	4621      	mov	r1, r4
 8025786:	4638      	mov	r0, r7
 8025788:	f7ff fc46 	bl	8025018 <_malloc_r>
 802578c:	4605      	mov	r5, r0
 802578e:	2800      	cmp	r0, #0
 8025790:	d0f2      	beq.n	8025778 <_realloc_r+0x1c>
 8025792:	4631      	mov	r1, r6
 8025794:	4622      	mov	r2, r4
 8025796:	f7ff fbd9 	bl	8024f4c <memcpy>
 802579a:	4631      	mov	r1, r6
 802579c:	4638      	mov	r0, r7
 802579e:	f7ff fbeb 	bl	8024f78 <_free_r>
 80257a2:	e7e9      	b.n	8025778 <_realloc_r+0x1c>
 80257a4:	4635      	mov	r5, r6
 80257a6:	e7e7      	b.n	8025778 <_realloc_r+0x1c>

080257a8 <_malloc_usable_size_r>:
 80257a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80257ac:	1f18      	subs	r0, r3, #4
 80257ae:	2b00      	cmp	r3, #0
 80257b0:	bfbc      	itt	lt
 80257b2:	580b      	ldrlt	r3, [r1, r0]
 80257b4:	18c0      	addlt	r0, r0, r3
 80257b6:	4770      	bx	lr

080257b8 <_init>:
 80257b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80257ba:	bf00      	nop
 80257bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80257be:	bc08      	pop	{r3}
 80257c0:	469e      	mov	lr, r3
 80257c2:	4770      	bx	lr

080257c4 <_fini>:
 80257c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80257c6:	bf00      	nop
 80257c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80257ca:	bc08      	pop	{r3}
 80257cc:	469e      	mov	lr, r3
 80257ce:	4770      	bx	lr
