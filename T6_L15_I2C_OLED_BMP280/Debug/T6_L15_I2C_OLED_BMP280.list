
T6_L15_I2C_OLED_BMP280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009624  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  080097c8  080097c8  000197c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dcc  08009dcc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009dcc  08009dcc  00019dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009dd4  08009dd4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dd4  08009dd4  00019dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dd8  08009dd8  00019dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000590  200001e0  08009fbc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000770  08009fbc  00020770  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012169  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002922  00000000  00000000  00032379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00034ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  000358c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ee3  00000000  00000000  000363f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ad7  00000000  00000000  0004e2d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aaa2  00000000  00000000  0005edaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e984c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004200  00000000  00000000  000e98a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080097ac 	.word	0x080097ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	080097ac 	.word	0x080097ac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	font = font_t;
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <GFX_SetFont+0x1c>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6013      	str	r3, [r2, #0]
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000608 	.word	0x20000608

08000f70 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b089      	sub	sp, #36	; 0x24
 8000f74:	af02      	add	r7, sp, #8
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	460b      	mov	r3, r1
 8000f80:	71fb      	strb	r3, [r7, #7]
 8000f82:	4613      	mov	r3, r2
 8000f84:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2b7e      	cmp	r3, #126	; 0x7e
 8000f8a:	f200 80a3 	bhi.w	80010d4 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	75fb      	strb	r3, [r7, #23]
 8000f92:	e096      	b.n	80010c2 <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 8000f94:	4b51      	ldr	r3, [pc, #324]	; (80010dc <GFX_DrawChar+0x16c>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	3b20      	subs	r3, #32
 8000f9c:	494f      	ldr	r1, [pc, #316]	; (80010dc <GFX_DrawChar+0x16c>)
 8000f9e:	6809      	ldr	r1, [r1, #0]
 8000fa0:	3101      	adds	r1, #1
 8000fa2:	7809      	ldrb	r1, [r1, #0]
 8000fa4:	fb01 f103 	mul.w	r1, r1, r3
 8000fa8:	7dfb      	ldrb	r3, [r7, #23]
 8000faa:	440b      	add	r3, r1
 8000fac:	3302      	adds	r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	757b      	strb	r3, [r7, #21]
 8000fb8:	e078      	b.n	80010ac <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 8000fba:	7dbb      	ldrb	r3, [r7, #22]
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d032      	beq.n	800102a <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8000fc4:	4b46      	ldr	r3, [pc, #280]	; (80010e0 <GFX_DrawChar+0x170>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d113      	bne.n	8000ff4 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 8000fcc:	7dfb      	ldrb	r3, [r7, #23]
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	b218      	sxth	r0, r3
 8000fda:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	79ba      	ldrb	r2, [r7, #6]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f000 fa6f 	bl	80014d0 <SSD1306_DrawPixel>
 8000ff2:	e052      	b.n	800109a <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8000ff4:	7dfb      	ldrb	r3, [r7, #23]
 8000ff6:	4a3a      	ldr	r2, [pc, #232]	; (80010e0 <GFX_DrawChar+0x170>)
 8000ff8:	7812      	ldrb	r2, [r2, #0]
 8000ffa:	fb02 f203 	mul.w	r2, r2, r3
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	18d0      	adds	r0, r2, r3
 8001002:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001006:	4a36      	ldr	r2, [pc, #216]	; (80010e0 <GFX_DrawChar+0x170>)
 8001008:	7812      	ldrb	r2, [r2, #0]
 800100a:	fb02 f203 	mul.w	r2, r2, r3
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	18d1      	adds	r1, r2, r3
 8001012:	4b33      	ldr	r3, [pc, #204]	; (80010e0 <GFX_DrawChar+0x170>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b29a      	uxth	r2, r3
 8001018:	4b31      	ldr	r3, [pc, #196]	; (80010e0 <GFX_DrawChar+0x170>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	b29c      	uxth	r4, r3
 800101e:	79bb      	ldrb	r3, [r7, #6]
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	4623      	mov	r3, r4
 8001024:	f000 f960 	bl	80012e8 <GFX_DrawFillRectangle>
 8001028:	e037      	b.n	800109a <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 800102a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800102e:	2b00      	cmp	r3, #0
 8001030:	d133      	bne.n	800109a <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 8001032:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <GFX_DrawChar+0x170>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d114      	bne.n	8001064 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 800103a:	7dfb      	ldrb	r3, [r7, #23]
 800103c:	b29a      	uxth	r2, r3
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	b29b      	uxth	r3, r3
 8001042:	4413      	add	r3, r2
 8001044:	b29b      	uxth	r3, r3
 8001046:	b218      	sxth	r0, r3
 8001048:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800104c:	b29a      	uxth	r2, r3
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	b29b      	uxth	r3, r3
 8001052:	4413      	add	r3, r2
 8001054:	b29b      	uxth	r3, r3
 8001056:	b21b      	sxth	r3, r3
 8001058:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800105c:	4619      	mov	r1, r3
 800105e:	f000 fa37 	bl	80014d0 <SSD1306_DrawPixel>
 8001062:	e01a      	b.n	800109a <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 8001064:	7dfb      	ldrb	r3, [r7, #23]
 8001066:	4a1e      	ldr	r2, [pc, #120]	; (80010e0 <GFX_DrawChar+0x170>)
 8001068:	7812      	ldrb	r2, [r2, #0]
 800106a:	fb02 f203 	mul.w	r2, r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	18d0      	adds	r0, r2, r3
 8001072:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001076:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <GFX_DrawChar+0x170>)
 8001078:	7812      	ldrb	r2, [r2, #0]
 800107a:	fb02 f203 	mul.w	r2, r2, r3
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	18d1      	adds	r1, r2, r3
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <GFX_DrawChar+0x170>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	b29a      	uxth	r2, r3
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <GFX_DrawChar+0x170>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b29c      	uxth	r4, r3
 800108e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	4623      	mov	r3, r4
 8001096:	f000 f927 	bl	80012e8 <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 800109a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	3301      	adds	r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	757b      	strb	r3, [r7, #21]
 80010a6:	7dbb      	ldrb	r3, [r7, #22]
 80010a8:	085b      	lsrs	r3, r3, #1
 80010aa:	75bb      	strb	r3, [r7, #22]
 80010ac:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010b0:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <GFX_DrawChar+0x16c>)
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	7812      	ldrb	r2, [r2, #0]
 80010b6:	4293      	cmp	r3, r2
 80010b8:	f6ff af7f 	blt.w	8000fba <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	3301      	adds	r3, #1
 80010c0:	75fb      	strb	r3, [r7, #23]
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <GFX_DrawChar+0x16c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	7dfa      	ldrb	r2, [r7, #23]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	f4ff af61 	bcc.w	8000f94 <GFX_DrawChar+0x24>
 80010d2:	e000      	b.n	80010d6 <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 80010d4:	bf00      	nop
            }
        }
    }
}
 80010d6:	371c      	adds	r7, #28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd90      	pop	{r4, r7, pc}
 80010dc:	20000608 	.word	0x20000608
 80010e0:	20000000 	.word	0x20000000

080010e4 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af02      	add	r7, sp, #8
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
 80010f0:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 80010fc:	e03e      	b.n	800117c <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 80010fe:	78f9      	ldrb	r1, [r7, #3]
 8001100:	7cfa      	ldrb	r2, [r7, #19]
 8001102:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	460b      	mov	r3, r1
 800110a:	68b9      	ldr	r1, [r7, #8]
 800110c:	6978      	ldr	r0, [r7, #20]
 800110e:	f7ff ff2f 	bl	8000f70 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8001112:	4b20      	ldr	r3, [pc, #128]	; (8001194 <GFX_DrawString+0xb0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <GFX_DrawString+0xb4>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	fb03 f302 	mul.w	r3, r3, r2
 8001124:	3301      	adds	r3, #1
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	4413      	add	r3, r2
 800112a:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 800112c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d120      	bne.n	8001176 <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001134:	2300      	movs	r3, #0
 8001136:	74bb      	strb	r3, [r7, #18]
 8001138:	e012      	b.n	8001160 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	b29b      	uxth	r3, r3
 800113e:	3b01      	subs	r3, #1
 8001140:	b29b      	uxth	r3, r3
 8001142:	b218      	sxth	r0, r3
 8001144:	7cbb      	ldrb	r3, [r7, #18]
 8001146:	b29a      	uxth	r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	b29b      	uxth	r3, r3
 800114c:	4413      	add	r3, r2
 800114e:	b29b      	uxth	r3, r3
 8001150:	b21b      	sxth	r3, r3
 8001152:	2200      	movs	r2, #0
 8001154:	4619      	mov	r1, r3
 8001156:	f000 f9bb 	bl	80014d0 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 800115a:	7cbb      	ldrb	r3, [r7, #18]
 800115c:	3301      	adds	r3, #1
 800115e:	74bb      	strb	r3, [r7, #18]
 8001160:	7cba      	ldrb	r2, [r7, #18]
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <GFX_DrawString+0xb0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <GFX_DrawString+0xb4>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	fb03 f301 	mul.w	r3, r3, r1
 8001172:	429a      	cmp	r2, r3
 8001174:	dbe1      	blt.n	800113a <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	1c5a      	adds	r2, r3, #1
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1ba      	bne.n	80010fe <GFX_DrawString+0x1a>
	}
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000608 	.word	0x20000608
 8001198:	20000000 	.word	0x20000000

0800119c <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08c      	sub	sp, #48	; 0x30
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80011b4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	1acb      	subs	r3, r1, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	bfb8      	it	lt
 80011c2:	425b      	neglt	r3, r3
 80011c4:	429a      	cmp	r2, r3
 80011c6:	bfcc      	ite	gt
 80011c8:	2301      	movgt	r3, #1
 80011ca:	2300      	movle	r3, #0
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 80011d0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d00b      	beq.n	80011f0 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e2:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	623b      	str	r3, [r7, #32]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	6a3b      	ldr	r3, [r7, #32]
 80011ee:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	dd0b      	ble.n	8001210 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	61fb      	str	r3, [r7, #28]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	61bb      	str	r3, [r7, #24]
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	b29a      	uxth	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	b29b      	uxth	r3, r3
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	b29b      	uxth	r3, r3
 800121c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800121e:	683a      	ldr	r2, [r7, #0]
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	bfb8      	it	lt
 8001228:	425b      	neglt	r3, r3
 800122a:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 800122c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001230:	0fda      	lsrs	r2, r3, #31
 8001232:	4413      	add	r3, r2
 8001234:	105b      	asrs	r3, r3, #1
 8001236:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8001238:	68ba      	ldr	r2, [r7, #8]
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	429a      	cmp	r2, r3
 800123e:	da02      	bge.n	8001246 <GFX_WriteLine+0xaa>
	        ystep = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001244:	e030      	b.n	80012a8 <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 8001246:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800124a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 800124c:	e02c      	b.n	80012a8 <GFX_WriteLine+0x10c>
	        if (steep) {
 800124e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001252:	2b00      	cmp	r3, #0
 8001254:	d009      	beq.n	800126a <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	b21b      	sxth	r3, r3
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	b211      	sxth	r1, r2
 800125e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f934 	bl	80014d0 <SSD1306_DrawPixel>
 8001268:	e008      	b.n	800127c <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	b21b      	sxth	r3, r3
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	b211      	sxth	r1, r2
 8001272:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f92a 	bl	80014d0 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 800127c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800127e:	8abb      	ldrh	r3, [r7, #20]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	b29b      	uxth	r3, r3
 8001284:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8001286:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800128a:	2b00      	cmp	r3, #0
 800128c:	da09      	bge.n	80012a2 <GFX_WriteLine+0x106>
	            y_start += ystep;
 800128e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	4413      	add	r3, r2
 8001296:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001298:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800129a:	8afb      	ldrh	r3, [r7, #22]
 800129c:	4413      	add	r3, r2
 800129e:	b29b      	uxth	r3, r3
 80012a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	3301      	adds	r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	ddce      	ble.n	800124e <GFX_WriteLine+0xb2>
	        }
	    }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3730      	adds	r7, #48	; 0x30
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b086      	sub	sp, #24
 80012be:	af02      	add	r7, sp, #8
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	1e5a      	subs	r2, r3, #1
 80012d0:	78fb      	ldrb	r3, [r7, #3]
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	4613      	mov	r3, r2
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	68b9      	ldr	r1, [r7, #8]
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f7ff ff5e 	bl	800119c <GFX_WriteLine>
}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	4611      	mov	r1, r2
 80012f4:	461a      	mov	r2, r3
 80012f6:	460b      	mov	r3, r1
 80012f8:	80fb      	strh	r3, [r7, #6]
 80012fa:	4613      	mov	r3, r2
 80012fc:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	e009      	b.n	8001318 <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 8001304:	88ba      	ldrh	r2, [r7, #4]
 8001306:	f897 3020 	ldrb.w	r3, [r7, #32]
 800130a:	68b9      	ldr	r1, [r7, #8]
 800130c:	6978      	ldr	r0, [r7, #20]
 800130e:	f7ff ffd4 	bl	80012ba <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3301      	adds	r3, #1
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	88fa      	ldrh	r2, [r7, #6]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4413      	add	r3, r2
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	429a      	cmp	r2, r3
 8001322:	dbef      	blt.n	8001304 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <SSD1306_Command>:
I2C_HandleTypeDef *oled_i2c;

static uint8_t buffer[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af04      	add	r7, sp, #16
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS << 1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <SSD1306_Command+0x30>)
 800133c:	6818      	ldr	r0, [r3, #0]
 800133e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001342:	9302      	str	r3, [sp, #8]
 8001344:	2301      	movs	r3, #1
 8001346:	9301      	str	r3, [sp, #4]
 8001348:	1dfb      	adds	r3, r7, #7
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2301      	movs	r3, #1
 800134e:	2200      	movs	r2, #0
 8001350:	2178      	movs	r1, #120	; 0x78
 8001352:	f002 f831 	bl	80033b8 <HAL_I2C_Mem_Write>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000060c 	.word	0x2000060c

08001364 <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af02      	add	r7, sp, #8
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
#ifdef SSD1306_USE_DMA
	if(oled_i2c->hdmatx->State == HAL_DMA_STATE_READY)
 8001370:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <SSD1306_Data+0x3c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001376:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b01      	cmp	r3, #1
 800137e:	d10a      	bne.n	8001396 <SSD1306_Data+0x32>
	{
		HAL_I2C_Mem_Write_DMA(oled_i2c, (SSD1306_ADDRESS << 1), 0x40, 1, Data, Size);
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <SSD1306_Data+0x3c>)
 8001382:	6818      	ldr	r0, [r3, #0]
 8001384:	887b      	ldrh	r3, [r7, #2]
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2301      	movs	r3, #1
 800138e:	2240      	movs	r2, #64	; 0x40
 8001390:	2178      	movs	r1, #120	; 0x78
 8001392:	f002 fb31 	bl	80039f8 <HAL_I2C_Mem_Write_DMA>
	}
#else
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS << 1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
#endif

}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	2000060c 	.word	0x2000060c

080013a4 <SSD1306_Init>:

void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 80013ac:	4a28      	ldr	r2, [pc, #160]	; (8001450 <SSD1306_Init+0xac>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 80013b2:	20ae      	movs	r0, #174	; 0xae
 80013b4:	f7ff ffbc 	bl	8001330 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 80013b8:	20d5      	movs	r0, #213	; 0xd5
 80013ba:	f7ff ffb9 	bl	8001330 <SSD1306_Command>
	SSD1306_Command(0x80);
 80013be:	2080      	movs	r0, #128	; 0x80
 80013c0:	f7ff ffb6 	bl	8001330 <SSD1306_Command>

	SSD1306_Command(SSD1306_LCDHEIGHT-1);
 80013c4:	203f      	movs	r0, #63	; 0x3f
 80013c6:	f7ff ffb3 	bl	8001330 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 80013ca:	20d3      	movs	r0, #211	; 0xd3
 80013cc:	f7ff ffb0 	bl	8001330 <SSD1306_Command>
	SSD1306_Command(0x0);
 80013d0:	2000      	movs	r0, #0
 80013d2:	f7ff ffad 	bl	8001330 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 80013d6:	2040      	movs	r0, #64	; 0x40
 80013d8:	f7ff ffaa 	bl	8001330 <SSD1306_Command>

	SSD1306_Command(SSD1306_CHARGEPUMP);
 80013dc:	208d      	movs	r0, #141	; 0x8d
 80013de:	f7ff ffa7 	bl	8001330 <SSD1306_Command>
	SSD1306_Command(0x14);
 80013e2:	2014      	movs	r0, #20
 80013e4:	f7ff ffa4 	bl	8001330 <SSD1306_Command>
	SSD1306_Command(SSD1306_MEMORYMODE);
 80013e8:	2020      	movs	r0, #32
 80013ea:	f7ff ffa1 	bl	8001330 <SSD1306_Command>
	SSD1306_Command(0x00);
 80013ee:	2000      	movs	r0, #0
 80013f0:	f7ff ff9e 	bl	8001330 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 80013f4:	20a1      	movs	r0, #161	; 0xa1
 80013f6:	f7ff ff9b 	bl	8001330 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 80013fa:	20c8      	movs	r0, #200	; 0xc8
 80013fc:	f7ff ff98 	bl	8001330 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 8001400:	20da      	movs	r0, #218	; 0xda
 8001402:	f7ff ff95 	bl	8001330 <SSD1306_Command>
	SSD1306_Command(0x12);
 8001406:	2012      	movs	r0, #18
 8001408:	f7ff ff92 	bl	8001330 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 800140c:	2081      	movs	r0, #129	; 0x81
 800140e:	f7ff ff8f 	bl	8001330 <SSD1306_Command>
	SSD1306_Command(0xFF);
 8001412:	20ff      	movs	r0, #255	; 0xff
 8001414:	f7ff ff8c 	bl	8001330 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 8001418:	20d9      	movs	r0, #217	; 0xd9
 800141a:	f7ff ff89 	bl	8001330 <SSD1306_Command>
	SSD1306_Command(0xF1);
 800141e:	20f1      	movs	r0, #241	; 0xf1
 8001420:	f7ff ff86 	bl	8001330 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT);
 8001424:	20db      	movs	r0, #219	; 0xdb
 8001426:	f7ff ff83 	bl	8001330 <SSD1306_Command>
	SSD1306_Command(0x40);
 800142a:	2040      	movs	r0, #64	; 0x40
 800142c:	f7ff ff80 	bl	8001330 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME);
 8001430:	20a4      	movs	r0, #164	; 0xa4
 8001432:	f7ff ff7d 	bl	8001330 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);
 8001436:	20a6      	movs	r0, #166	; 0xa6
 8001438:	f7ff ff7a 	bl	8001330 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 800143c:	202e      	movs	r0, #46	; 0x2e
 800143e:	f7ff ff77 	bl	8001330 <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON);
 8001442:	20af      	movs	r0, #175	; 0xaf
 8001444:	f7ff ff74 	bl	8001330 <SSD1306_Command>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000060c 	.word	0x2000060c

08001454 <SSD1306_Display>:

void SSD1306_Display(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	SSD1306_Command(SSD1306_PAGEADDR);
 8001458:	2022      	movs	r0, #34	; 0x22
 800145a:	f7ff ff69 	bl	8001330 <SSD1306_Command>
	SSD1306_Command(0);
 800145e:	2000      	movs	r0, #0
 8001460:	f7ff ff66 	bl	8001330 <SSD1306_Command>
	SSD1306_Command(0xFF);
 8001464:	20ff      	movs	r0, #255	; 0xff
 8001466:	f7ff ff63 	bl	8001330 <SSD1306_Command>
	SSD1306_Command(SSD1306_COLUMNADDR);
 800146a:	2021      	movs	r0, #33	; 0x21
 800146c:	f7ff ff60 	bl	8001330 <SSD1306_Command>
	SSD1306_Command(0);
 8001470:	2000      	movs	r0, #0
 8001472:	f7ff ff5d 	bl	8001330 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDWIDTH-1);
 8001476:	207f      	movs	r0, #127	; 0x7f
 8001478:	f7ff ff5a 	bl	8001330 <SSD1306_Command>

	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);
 800147c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <SSD1306_Display+0x38>)
 8001482:	f7ff ff6f 	bl	8001364 <SSD1306_Data>
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200001fc 	.word	0x200001fc

08001490 <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d008      	beq.n	80014b2 <SSD1306_Clear+0x22>
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d10d      	bne.n	80014c0 <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xFF, SSD1306_BUFFER_SIZE);
 80014a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014a8:	21ff      	movs	r1, #255	; 0xff
 80014aa:	4808      	ldr	r0, [pc, #32]	; (80014cc <SSD1306_Clear+0x3c>)
 80014ac:	f005 fae2 	bl	8006a74 <memset>
		break;
 80014b0:	e007      	b.n	80014c2 <SSD1306_Clear+0x32>
	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 80014b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014b6:	2100      	movs	r1, #0
 80014b8:	4804      	ldr	r0, [pc, #16]	; (80014cc <SSD1306_Clear+0x3c>)
 80014ba:	f005 fadb 	bl	8006a74 <memset>
		break;
 80014be:	e000      	b.n	80014c2 <SSD1306_Clear+0x32>
	default:
		break;
 80014c0:	bf00      	nop
	}
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200001fc 	.word	0x200001fc

080014d0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	80fb      	strh	r3, [r7, #6]
 80014da:	460b      	mov	r3, r1
 80014dc:	80bb      	strh	r3, [r7, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	70fb      	strb	r3, [r7, #3]
	if ((x <0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 80014e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	db79      	blt.n	80015de <SSD1306_DrawPixel+0x10e>
 80014ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ee:	2b7f      	cmp	r3, #127	; 0x7f
 80014f0:	dc75      	bgt.n	80015de <SSD1306_DrawPixel+0x10e>
 80014f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	db71      	blt.n	80015de <SSD1306_DrawPixel+0x10e>
 80014fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014fe:	2b3f      	cmp	r3, #63	; 0x3f
 8001500:	dc6d      	bgt.n	80015de <SSD1306_DrawPixel+0x10e>
		return;

	switch (Color)
 8001502:	78fb      	ldrb	r3, [r7, #3]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d049      	beq.n	800159c <SSD1306_DrawPixel+0xcc>
 8001508:	2b02      	cmp	r3, #2
 800150a:	dc69      	bgt.n	80015e0 <SSD1306_DrawPixel+0x110>
 800150c:	2b00      	cmp	r3, #0
 800150e:	d022      	beq.n	8001556 <SSD1306_DrawPixel+0x86>
 8001510:	2b01      	cmp	r3, #1
 8001512:	d165      	bne.n	80015e0 <SSD1306_DrawPixel+0x110>
	{
		case SSD1306_WHITE:
	      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 8001514:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001518:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	da00      	bge.n	8001522 <SSD1306_DrawPixel+0x52>
 8001520:	3307      	adds	r3, #7
 8001522:	10db      	asrs	r3, r3, #3
 8001524:	b218      	sxth	r0, r3
 8001526:	4603      	mov	r3, r0
 8001528:	01db      	lsls	r3, r3, #7
 800152a:	4413      	add	r3, r2
 800152c:	4a2f      	ldr	r2, [pc, #188]	; (80015ec <SSD1306_DrawPixel+0x11c>)
 800152e:	5cd3      	ldrb	r3, [r2, r3]
 8001530:	b25a      	sxtb	r2, r3
 8001532:	88bb      	ldrh	r3, [r7, #4]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	2101      	movs	r1, #1
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	b25b      	sxtb	r3, r3
 8001540:	4313      	orrs	r3, r2
 8001542:	b259      	sxtb	r1, r3
 8001544:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001548:	4603      	mov	r3, r0
 800154a:	01db      	lsls	r3, r3, #7
 800154c:	4413      	add	r3, r2
 800154e:	b2c9      	uxtb	r1, r1
 8001550:	4a26      	ldr	r2, [pc, #152]	; (80015ec <SSD1306_DrawPixel+0x11c>)
 8001552:	54d1      	strb	r1, [r2, r3]
	      break;
 8001554:	e044      	b.n	80015e0 <SSD1306_DrawPixel+0x110>
	    case SSD1306_BLACK:
	      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 8001556:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800155a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	da00      	bge.n	8001564 <SSD1306_DrawPixel+0x94>
 8001562:	3307      	adds	r3, #7
 8001564:	10db      	asrs	r3, r3, #3
 8001566:	b218      	sxth	r0, r3
 8001568:	4603      	mov	r3, r0
 800156a:	01db      	lsls	r3, r3, #7
 800156c:	4413      	add	r3, r2
 800156e:	4a1f      	ldr	r2, [pc, #124]	; (80015ec <SSD1306_DrawPixel+0x11c>)
 8001570:	5cd3      	ldrb	r3, [r2, r3]
 8001572:	b25a      	sxtb	r2, r3
 8001574:	88bb      	ldrh	r3, [r7, #4]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	2101      	movs	r1, #1
 800157c:	fa01 f303 	lsl.w	r3, r1, r3
 8001580:	b25b      	sxtb	r3, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	b25b      	sxtb	r3, r3
 8001586:	4013      	ands	r3, r2
 8001588:	b259      	sxtb	r1, r3
 800158a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800158e:	4603      	mov	r3, r0
 8001590:	01db      	lsls	r3, r3, #7
 8001592:	4413      	add	r3, r2
 8001594:	b2c9      	uxtb	r1, r1
 8001596:	4a15      	ldr	r2, [pc, #84]	; (80015ec <SSD1306_DrawPixel+0x11c>)
 8001598:	54d1      	strb	r1, [r2, r3]
	      break;
 800159a:	e021      	b.n	80015e0 <SSD1306_DrawPixel+0x110>
	    case SSD1306_INVERSE:
	      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 800159c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	da00      	bge.n	80015aa <SSD1306_DrawPixel+0xda>
 80015a8:	3307      	adds	r3, #7
 80015aa:	10db      	asrs	r3, r3, #3
 80015ac:	b218      	sxth	r0, r3
 80015ae:	4603      	mov	r3, r0
 80015b0:	01db      	lsls	r3, r3, #7
 80015b2:	4413      	add	r3, r2
 80015b4:	4a0d      	ldr	r2, [pc, #52]	; (80015ec <SSD1306_DrawPixel+0x11c>)
 80015b6:	5cd3      	ldrb	r3, [r2, r3]
 80015b8:	b25a      	sxtb	r2, r3
 80015ba:	88bb      	ldrh	r3, [r7, #4]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	2101      	movs	r1, #1
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	b25b      	sxtb	r3, r3
 80015c8:	4053      	eors	r3, r2
 80015ca:	b259      	sxtb	r1, r3
 80015cc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015d0:	4603      	mov	r3, r0
 80015d2:	01db      	lsls	r3, r3, #7
 80015d4:	4413      	add	r3, r2
 80015d6:	b2c9      	uxtb	r1, r1
 80015d8:	4a04      	ldr	r2, [pc, #16]	; (80015ec <SSD1306_DrawPixel+0x11c>)
 80015da:	54d1      	strb	r1, [r2, r3]
	      break;
 80015dc:	e000      	b.n	80015e0 <SSD1306_DrawPixel+0x110>
		return;
 80015de:	bf00      	nop
	    }

}
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	200001fc 	.word	0x200001fc

080015f0 <Read8>:

//
// Read 8 bits from BMP280 from Register
//
uint8_t Read8(BMP280_t *bmp, uint8_t Register)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af04      	add	r7, sp, #16
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	70fb      	strb	r3, [r7, #3]
	uint8_t Value;

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	791b      	ldrb	r3, [r3, #4]
 8001604:	b29b      	uxth	r3, r3
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	b299      	uxth	r1, r3
 800160a:	78fb      	ldrb	r3, [r7, #3]
 800160c:	b29a      	uxth	r2, r3
 800160e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001612:	9302      	str	r3, [sp, #8]
 8001614:	2301      	movs	r3, #1
 8001616:	9301      	str	r3, [sp, #4]
 8001618:	f107 030f 	add.w	r3, r7, #15
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2301      	movs	r3, #1
 8001620:	f001 ffc4 	bl	80035ac <HAL_I2C_Mem_Read>

	return Value;
 8001624:	7bfb      	ldrb	r3, [r7, #15]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <Write8>:

//
// Write 8 bits to BMP280 to Register
//
void Write8(BMP280_t *bmp, uint8_t Register, uint8_t Value)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af04      	add	r7, sp, #16
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	460b      	mov	r3, r1
 8001638:	70fb      	strb	r3, [r7, #3]
 800163a:	4613      	mov	r3, r2
 800163c:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6818      	ldr	r0, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	791b      	ldrb	r3, [r3, #4]
 8001646:	b29b      	uxth	r3, r3
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	b299      	uxth	r1, r3
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	b29a      	uxth	r2, r3
 8001650:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001654:	9302      	str	r3, [sp, #8]
 8001656:	2301      	movs	r3, #1
 8001658:	9301      	str	r3, [sp, #4]
 800165a:	1cbb      	adds	r3, r7, #2
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	2301      	movs	r3, #1
 8001660:	f001 feaa 	bl	80033b8 <HAL_I2C_Mem_Write>
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <Read16>:

//
// Read 16 bits from BMP280 from Register
//
uint16_t Read16(BMP280_t *bmp, uint8_t Register)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af04      	add	r7, sp, #16
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, Value, 2, BMP280_I2C_TIMEOUT);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	791b      	ldrb	r3, [r3, #4]
 8001680:	b29b      	uxth	r3, r3
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	b299      	uxth	r1, r3
 8001686:	78fb      	ldrb	r3, [r7, #3]
 8001688:	b29a      	uxth	r2, r3
 800168a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168e:	9302      	str	r3, [sp, #8]
 8001690:	2302      	movs	r3, #2
 8001692:	9301      	str	r3, [sp, #4]
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	2301      	movs	r3, #1
 800169c:	f001 ff86 	bl	80035ac <HAL_I2C_Mem_Read>

	return ((Value[1] << 8) | Value[0]);
 80016a0:	7b7b      	ldrb	r3, [r7, #13]
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	b21a      	sxth	r2, r3
 80016a6:	7b3b      	ldrb	r3, [r7, #12]
 80016a8:	b21b      	sxth	r3, r3
 80016aa:	4313      	orrs	r3, r2
 80016ac:	b21b      	sxth	r3, r3
 80016ae:	b29b      	uxth	r3, r3
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <Read24>:

//
// Read 24 bits from BMP280 from Register
//
uint32_t Read24(BMP280_t *bmp, uint8_t Register)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af04      	add	r7, sp, #16
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[3];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, Value, 3, BMP280_I2C_TIMEOUT);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	791b      	ldrb	r3, [r3, #4]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	b299      	uxth	r1, r3
 80016d2:	78fb      	ldrb	r3, [r7, #3]
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016da:	9302      	str	r3, [sp, #8]
 80016dc:	2303      	movs	r3, #3
 80016de:	9301      	str	r3, [sp, #4]
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2301      	movs	r3, #1
 80016e8:	f001 ff60 	bl	80035ac <HAL_I2C_Mem_Read>

	return ((Value[0] << 16) | (Value[1] << 8) | Value[2]);
 80016ec:	7b3b      	ldrb	r3, [r7, #12]
 80016ee:	041a      	lsls	r2, r3, #16
 80016f0:	7b7b      	ldrb	r3, [r7, #13]
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	4313      	orrs	r3, r2
 80016f6:	7bba      	ldrb	r2, [r7, #14]
 80016f8:	4313      	orrs	r3, r2
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <BMP280_SetMode>:

//
// Set mode - Forced or Normal - in Control register
//
void BMP280_SetMode(BMP280_t *bmp, uint8_t Mode)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b084      	sub	sp, #16
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	460b      	mov	r3, r1
 800170c:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(Mode > 3) Mode = 3;
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	2b03      	cmp	r3, #3
 8001712:	d901      	bls.n	8001718 <BMP280_SetMode+0x16>
 8001714:	2303      	movs	r3, #3
 8001716:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 8001718:	21f4      	movs	r1, #244	; 0xf4
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff ff68 	bl	80015f0 <Read8>
 8001720:	4603      	mov	r3, r0
 8001722:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xFC; // Tmp (xxxx xx00)
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	f023 0303 	bic.w	r3, r3, #3
 800172a:	73fb      	strb	r3, [r7, #15]
	Tmp |= Mode & 0x03;
 800172c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	b25a      	sxtb	r2, r3
 8001736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173a:	4313      	orrs	r3, r2
 800173c:	b25b      	sxtb	r3, r3
 800173e:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	461a      	mov	r2, r3
 8001744:	21f4      	movs	r1, #244	; 0xf4
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ff71 	bl	800162e <Write8>
}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <BMP280_SetPressureOversampling>:

//
// Set pressure oversampling in Control register
//
void BMP280_SetPressureOversampling(BMP280_t *bmp, uint8_t POversampling)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(POversampling > 5) POversampling = 5;
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	2b05      	cmp	r3, #5
 8001764:	d901      	bls.n	800176a <BMP280_SetPressureOversampling+0x16>
 8001766:	2305      	movs	r3, #5
 8001768:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 800176a:	21f4      	movs	r1, #244	; 0xf4
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff ff3f 	bl	80015f0 <Read8>
 8001772:	4603      	mov	r3, r0
 8001774:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xE3; // Tmp (xxx0 00xx)
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	f023 031c 	bic.w	r3, r3, #28
 800177c:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((POversampling << 2) & 0x1C);  // (0001 1100)
 800177e:	78fb      	ldrb	r3, [r7, #3]
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	b25b      	sxtb	r3, r3
 8001784:	f003 031c 	and.w	r3, r3, #28
 8001788:	b25a      	sxtb	r2, r3
 800178a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178e:	4313      	orrs	r3, r2
 8001790:	b25b      	sxtb	r3, r3
 8001792:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	461a      	mov	r2, r3
 8001798:	21f4      	movs	r1, #244	; 0xf4
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ff47 	bl	800162e <Write8>
}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <BMP280_SetTemperatureOversampling>:

//
// Set temperature oversampling in Control register
//
void BMP280_SetTemperatureOversampling(BMP280_t *bmp, uint8_t TOversampling)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(TOversampling > 5) TOversampling = 5;
 80017b4:	78fb      	ldrb	r3, [r7, #3]
 80017b6:	2b05      	cmp	r3, #5
 80017b8:	d901      	bls.n	80017be <BMP280_SetTemperatureOversampling+0x16>
 80017ba:	2305      	movs	r3, #5
 80017bc:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 80017be:	21f4      	movs	r1, #244	; 0xf4
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ff15 	bl	80015f0 <Read8>
 80017c6:	4603      	mov	r3, r0
 80017c8:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0x1F; // Tmp (000x xxxx)
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	f003 031f 	and.w	r3, r3, #31
 80017d0:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((TOversampling << 5) & 0xE0) ;  // (1110 0000)
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	015b      	lsls	r3, r3, #5
 80017d6:	b25a      	sxtb	r2, r3
 80017d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017dc:	4313      	orrs	r3, r2
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	461a      	mov	r2, r3
 80017e6:	21f4      	movs	r1, #244	; 0xf4
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ff20 	bl	800162e <Write8>
}
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <BMP280_ReadTemperatureRaw>:

//
// Read Raw temperature data from BMP280
//
int32_t BMP280_ReadTemperatureRaw(BMP280_t *bmp)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b084      	sub	sp, #16
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
	int32_t Tmp;

	Tmp = (int32_t)Read24(bmp, BMP280_TEMPDATA);
 80017fe:	21fa      	movs	r1, #250	; 0xfa
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ff59 	bl	80016b8 <Read24>
 8001806:	4603      	mov	r3, r0
 8001808:	60fb      	str	r3, [r7, #12]

	Tmp >>= 4; // Move 4 left due to such storing (Datasheet).
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	111b      	asrs	r3, r3, #4
 800180e:	60fb      	str	r3, [r7, #12]

	return Tmp;
 8001810:	68fb      	ldr	r3, [r7, #12]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <BMP280_ReadPressureRaw>:

//
// Read Raw pressure data from BMP280
//
int32_t BMP280_ReadPressureRaw(BMP280_t *bmp)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b084      	sub	sp, #16
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
	int32_t Tmp;

	Tmp = (int32_t)Read24(bmp, BMP280_PRESSUREDATA);
 8001822:	21f7      	movs	r1, #247	; 0xf7
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ff47 	bl	80016b8 <Read24>
 800182a:	4603      	mov	r3, r0
 800182c:	60fb      	str	r3, [r7, #12]

	Tmp >>= 4; // Move 4 left due to such storing (Datasheet).
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	111b      	asrs	r3, r3, #4
 8001832:	60fb      	str	r3, [r7, #12]

	return Tmp;
 8001834:	68fb      	ldr	r3, [r7, #12]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <BMP280_ReadTemperature>:
//
// Read and calculate temperature
// Whole procedure is taken from BMP280 Datasheet
//
float BMP280_ReadTemperature(BMP280_t *bmp)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;

	int32_t adc_T;

	adc_T = BMP280_ReadTemperatureRaw(bmp);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ffd4 	bl	80017f6 <BMP280_ReadTemperatureRaw>
 800184e:	6178      	str	r0, [r7, #20]

	var1 = ((((adc_T>>3) - ((int32_t)(bmp->t1)<<1))) * ((int32_t)(bmp->t2))) >> 11;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	10da      	asrs	r2, r3, #3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	8b5b      	ldrh	r3, [r3, #26]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001862:	fb02 f303 	mul.w	r3, r2, r3
 8001866:	12db      	asrs	r3, r3, #11
 8001868:	613b      	str	r3, [r7, #16]

	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	111b      	asrs	r3, r3, #4
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	8b52      	ldrh	r2, [r2, #26]
 8001872:	1a9b      	subs	r3, r3, r2
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	1112      	asrs	r2, r2, #4
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	8b49      	ldrh	r1, [r1, #26]
 800187c:	1a52      	subs	r2, r2, r1
 800187e:	fb02 f303 	mul.w	r3, r2, r3
 8001882:	131b      	asrs	r3, r3, #12
	((int32_t)(bmp->t3))) >> 14;
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 800188a:	fb02 f303 	mul.w	r3, r2, r3
 800188e:	139b      	asrs	r3, r3, #14
 8001890:	60fb      	str	r3, [r7, #12]

	bmp->t_fine = var1 + var2;
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	441a      	add	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	621a      	str	r2, [r3, #32]

	T = ((bmp->t_fine) * 5 + 128) >> 8;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a1a      	ldr	r2, [r3, #32]
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	3380      	adds	r3, #128	; 0x80
 80018a8:	121b      	asrs	r3, r3, #8
 80018aa:	60bb      	str	r3, [r7, #8]

	return (float)(T/100.0);
 80018ac:	68b8      	ldr	r0, [r7, #8]
 80018ae:	f7fe fe41 	bl	8000534 <__aeabi_i2d>
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <BMP280_ReadTemperature+0x98>)
 80018b8:	f7fe ffd0 	bl	800085c <__aeabi_ddiv>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f7ff f978 	bl	8000bb8 <__aeabi_d2f>
 80018c8:	4603      	mov	r3, r0
 80018ca:	ee07 3a90 	vmov	s15, r3
}
 80018ce:	eeb0 0a67 	vmov.f32	s0, s15
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40590000 	.word	0x40590000

080018dc <BMP280_ReadPressureAndTemperature>:
//
// Read and calculate temperature & pressure
// Whole procedure is taken from BMP280 Datasheet
//
uint8_t BMP280_ReadPressureAndTemperature(BMP280_t *bmp, float *Pressure, float *Temperature)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
	// Have to read temperature first
	*Temperature = BMP280_ReadTemperature(bmp);
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f7ff ffa9 	bl	8001840 <BMP280_ReadTemperature>
 80018ee:	eef0 7a40 	vmov.f32	s15, s0
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	edc3 7a00 	vstr	s15, [r3]

	int32_t var1, var2;
	uint32_t p;

	var1 = (((int32_t)(bmp->t_fine))>>1) - (int32_t)64000;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	105b      	asrs	r3, r3, #1
 80018fe:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8001902:	61bb      	str	r3, [r7, #24]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)(bmp->p6));
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	109b      	asrs	r3, r3, #2
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	1092      	asrs	r2, r2, #2
 800190c:	fb02 f303 	mul.w	r3, r2, r3
 8001910:	12db      	asrs	r3, r3, #11
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001918:	fb02 f303 	mul.w	r3, r2, r3
 800191c:	617b      	str	r3, [r7, #20]
	var2 = var2 + ((var1*((int32_t)(bmp->p5)))<<1);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001924:	461a      	mov	r2, r3
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	fb03 f302 	mul.w	r3, r3, r2
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	4413      	add	r3, r2
 8001932:	617b      	str	r3, [r7, #20]
	var2 = (var2>>2)+(((int32_t)(bmp->p4))<<16);
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	109a      	asrs	r2, r3, #2
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800193e:	041b      	lsls	r3, r3, #16
 8001940:	4413      	add	r3, r2
 8001942:	617b      	str	r3, [r7, #20]
	var1 = ((((bmp->p3) * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)(bmp->p2)) * var1)>>1))>>18;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800194a:	4619      	mov	r1, r3
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	109b      	asrs	r3, r3, #2
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	1092      	asrs	r2, r2, #2
 8001954:	fb02 f303 	mul.w	r3, r2, r3
 8001958:	135b      	asrs	r3, r3, #13
 800195a:	fb03 f301 	mul.w	r3, r3, r1
 800195e:	10da      	asrs	r2, r3, #3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001966:	4619      	mov	r1, r3
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	fb03 f301 	mul.w	r3, r3, r1
 800196e:	105b      	asrs	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	149b      	asrs	r3, r3, #18
 8001974:	61bb      	str	r3, [r7, #24]
	var1 =((((32768+var1))*((int32_t)(bmp->p1)))>>15);
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	8b92      	ldrh	r2, [r2, #28]
 8001980:	fb02 f303 	mul.w	r3, r2, r3
 8001984:	13db      	asrs	r3, r3, #15
 8001986:	61bb      	str	r3, [r7, #24]

	if (var1 == 0)
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <BMP280_ReadPressureAndTemperature+0xb6>
	{
		return 1; // avoid exception caused by division by zero
 800198e:	2301      	movs	r3, #1
 8001990:	e054      	b.n	8001a3c <BMP280_ReadPressureAndTemperature+0x160>
	}

	// Raw pressure from BMP's ADC
	int32_t adc_P = BMP280_ReadPressureRaw(bmp);
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f7ff ff41 	bl	800181a <BMP280_ReadPressureRaw>
 8001998:	6138      	str	r0, [r7, #16]

	p = (((int32_t)(((int32_t)1048576)-adc_P)-(var2>>12)))*3125;
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	f5c3 1280 	rsb	r2, r3, #1048576	; 0x100000
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	131b      	asrs	r3, r3, #12
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f640 4235 	movw	r2, #3125	; 0xc35
 80019aa:	fb02 f303 	mul.w	r3, r2, r3
 80019ae:	61fb      	str	r3, [r7, #28]
	if (p < 0x80000000)
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	db06      	blt.n	80019c4 <BMP280_ReadPressureAndTemperature+0xe8>
	{
		p = (p << 1) / ((uint32_t)var1);
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	005a      	lsls	r2, r3, #1
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	e005      	b.n	80019d0 <BMP280_ReadPressureAndTemperature+0xf4>
	}
	else
	{
		p = (p / (uint32_t)var1) * 2;
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	61fb      	str	r3, [r7, #28]
	}
	var1 = (((int32_t)(bmp->p9)) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80019d6:	4619      	mov	r1, r3
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	08db      	lsrs	r3, r3, #3
 80019dc:	69fa      	ldr	r2, [r7, #28]
 80019de:	08d2      	lsrs	r2, r2, #3
 80019e0:	fb02 f303 	mul.w	r3, r2, r3
 80019e4:	0b5b      	lsrs	r3, r3, #13
 80019e6:	fb03 f301 	mul.w	r3, r3, r1
 80019ea:	131b      	asrs	r3, r3, #12
 80019ec:	61bb      	str	r3, [r7, #24]
	var2 = (((int32_t)(p>>2)) * ((int32_t)(bmp->p8)))>>13;
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	461a      	mov	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80019fa:	fb03 f302 	mul.w	r3, r3, r2
 80019fe:	135b      	asrs	r3, r3, #13
 8001a00:	617b      	str	r3, [r7, #20]

	p = (uint32_t)((int32_t)p + ((var1 + var2 + (bmp->p7)) >> 4));
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	4413      	add	r3, r2
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8001a0e:	4413      	add	r3, r2
 8001a10:	111a      	asrs	r2, r3, #4
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	4413      	add	r3, r2
 8001a16:	61fb      	str	r3, [r7, #28]

	// Convert Pa to hPa
	*Pressure = (float)(p/100.0);
 8001a18:	69f8      	ldr	r0, [r7, #28]
 8001a1a:	f7fe fd7b 	bl	8000514 <__aeabi_ui2d>
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <BMP280_ReadPressureAndTemperature+0x168>)
 8001a24:	f7fe ff1a 	bl	800085c <__aeabi_ddiv>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f7ff f8c2 	bl	8000bb8 <__aeabi_d2f>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	601a      	str	r2, [r3, #0]

	return 0;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3720      	adds	r7, #32
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40590000 	.word	0x40590000

08001a48 <BMP280_Init>:

//
// Init
//
uint8_t BMP280_Init(BMP280_t *bmp, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	4613      	mov	r3, r2
 8001a54:	71fb      	strb	r3, [r7, #7]
	uint8_t ChipID;

	// Save I2C handler and address
	bmp->bmp_i2c = i2c;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	68ba      	ldr	r2, [r7, #8]
 8001a5a:	601a      	str	r2, [r3, #0]
	bmp->Address = Address;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	79fa      	ldrb	r2, [r7, #7]
 8001a60:	711a      	strb	r2, [r3, #4]

	//Read Chip ID
	ChipID = Read8(bmp, BMP280_CHIPID);
 8001a62:	21d0      	movs	r1, #208	; 0xd0
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f7ff fdc3 	bl	80015f0 <Read8>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	75fb      	strb	r3, [r7, #23]

	// Check if ID is correct
	if(ChipID != 0x58)
 8001a6e:	7dfb      	ldrb	r3, [r7, #23]
 8001a70:	2b58      	cmp	r3, #88	; 0x58
 8001a72:	d001      	beq.n	8001a78 <BMP280_Init+0x30>
	{
		return 1;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e06c      	b.n	8001b52 <BMP280_Init+0x10a>
	}

	// Read all coefficients
	bmp->t1 = Read16(bmp, BMP280_DIG_T1);
 8001a78:	2188      	movs	r1, #136	; 0x88
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f7ff fdf6 	bl	800166c <Read16>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461a      	mov	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	835a      	strh	r2, [r3, #26]
	bmp->t2 = Read16(bmp, BMP280_DIG_T2);
 8001a88:	218a      	movs	r1, #138	; 0x8a
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f7ff fdee 	bl	800166c <Read16>
 8001a90:	4603      	mov	r3, r0
 8001a92:	b21a      	sxth	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	80da      	strh	r2, [r3, #6]
	bmp->t3 = Read16(bmp, BMP280_DIG_T3);
 8001a98:	218c      	movs	r1, #140	; 0x8c
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f7ff fde6 	bl	800166c <Read16>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	b21a      	sxth	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	811a      	strh	r2, [r3, #8]

	bmp->p1 = Read16(bmp, BMP280_DIG_P1);
 8001aa8:	218e      	movs	r1, #142	; 0x8e
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f7ff fdde 	bl	800166c <Read16>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	839a      	strh	r2, [r3, #28]
	bmp->p2 = Read16(bmp, BMP280_DIG_P2);
 8001ab8:	2190      	movs	r1, #144	; 0x90
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f7ff fdd6 	bl	800166c <Read16>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	b21a      	sxth	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	815a      	strh	r2, [r3, #10]
	bmp->p3 = Read16(bmp, BMP280_DIG_P3);
 8001ac8:	2192      	movs	r1, #146	; 0x92
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f7ff fdce 	bl	800166c <Read16>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	b21a      	sxth	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	819a      	strh	r2, [r3, #12]
	bmp->p4 = Read16(bmp, BMP280_DIG_P4);
 8001ad8:	2194      	movs	r1, #148	; 0x94
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f7ff fdc6 	bl	800166c <Read16>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	81da      	strh	r2, [r3, #14]
	bmp->p5 = Read16(bmp, BMP280_DIG_P5);
 8001ae8:	2196      	movs	r1, #150	; 0x96
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f7ff fdbe 	bl	800166c <Read16>
 8001af0:	4603      	mov	r3, r0
 8001af2:	b21a      	sxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	821a      	strh	r2, [r3, #16]
	bmp->p6 = Read16(bmp, BMP280_DIG_P6);
 8001af8:	2198      	movs	r1, #152	; 0x98
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f7ff fdb6 	bl	800166c <Read16>
 8001b00:	4603      	mov	r3, r0
 8001b02:	b21a      	sxth	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	825a      	strh	r2, [r3, #18]
	bmp->p7 = Read16(bmp, BMP280_DIG_P7);
 8001b08:	219a      	movs	r1, #154	; 0x9a
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f7ff fdae 	bl	800166c <Read16>
 8001b10:	4603      	mov	r3, r0
 8001b12:	b21a      	sxth	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	829a      	strh	r2, [r3, #20]
	bmp->p8 = Read16(bmp, BMP280_DIG_P8);
 8001b18:	219c      	movs	r1, #156	; 0x9c
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f7ff fda6 	bl	800166c <Read16>
 8001b20:	4603      	mov	r3, r0
 8001b22:	b21a      	sxth	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	82da      	strh	r2, [r3, #22]
	bmp->p9 = Read16(bmp, BMP280_DIG_P9);
 8001b28:	219e      	movs	r1, #158	; 0x9e
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f7ff fd9e 	bl	800166c <Read16>
 8001b30:	4603      	mov	r3, r0
 8001b32:	b21a      	sxth	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	831a      	strh	r2, [r3, #24]

	// Set base settings
	BMP280_SetTemperatureOversampling(bmp, BMP280_TEMPERATURE_20BIT);
 8001b38:	2105      	movs	r1, #5
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f7ff fe34 	bl	80017a8 <BMP280_SetTemperatureOversampling>
	BMP280_SetPressureOversampling(bmp, BMP280_ULTRAHIGHRES);
 8001b40:	2105      	movs	r1, #5
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f7ff fe06 	bl	8001754 <BMP280_SetPressureOversampling>
	BMP280_SetMode(bmp, BMP280_NORMALMODE);
 8001b48:	2103      	movs	r1, #3
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f7ff fdd9 	bl	8001702 <BMP280_SetMode>

	return 0;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <MX_DMA_Init+0x30>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <MX_DMA_Init+0x30>)
 8001b6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <MX_DMA_Init+0x30>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]

}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800

08001b90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
 8001ba4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <MX_GPIO_Init+0xd0>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a2c      	ldr	r2, [pc, #176]	; (8001c60 <MX_GPIO_Init+0xd0>)
 8001bb0:	f043 0304 	orr.w	r3, r3, #4
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <MX_GPIO_Init+0xd0>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	4b26      	ldr	r3, [pc, #152]	; (8001c60 <MX_GPIO_Init+0xd0>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a25      	ldr	r2, [pc, #148]	; (8001c60 <MX_GPIO_Init+0xd0>)
 8001bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <MX_GPIO_Init+0xd0>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <MX_GPIO_Init+0xd0>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	4a1e      	ldr	r2, [pc, #120]	; (8001c60 <MX_GPIO_Init+0xd0>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6313      	str	r3, [r2, #48]	; 0x30
 8001bee:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <MX_GPIO_Init+0xd0>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <MX_GPIO_Init+0xd0>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <MX_GPIO_Init+0xd0>)
 8001c04:	f043 0302 	orr.w	r3, r3, #2
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <MX_GPIO_Init+0xd0>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2120      	movs	r1, #32
 8001c1a:	4812      	ldr	r0, [pc, #72]	; (8001c64 <MX_GPIO_Init+0xd4>)
 8001c1c:	f001 fa6e 	bl	80030fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c26:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4619      	mov	r1, r3
 8001c36:	480c      	ldr	r0, [pc, #48]	; (8001c68 <MX_GPIO_Init+0xd8>)
 8001c38:	f001 f8dc 	bl	8002df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c3c:	2320      	movs	r3, #32
 8001c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c40:	2301      	movs	r3, #1
 8001c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	4619      	mov	r1, r3
 8001c52:	4804      	ldr	r0, [pc, #16]	; (8001c64 <MX_GPIO_Init+0xd4>)
 8001c54:	f001 f8ce 	bl	8002df4 <HAL_GPIO_Init>

}
 8001c58:	bf00      	nop
 8001c5a:	3728      	adds	r7, #40	; 0x28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40020000 	.word	0x40020000
 8001c68:	40020800 	.word	0x40020800

08001c6c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <MX_I2C1_Init+0x50>)
 8001c72:	4a13      	ldr	r2, [pc, #76]	; (8001cc0 <MX_I2C1_Init+0x54>)
 8001c74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001c76:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <MX_I2C1_Init+0x50>)
 8001c78:	4a12      	ldr	r2, [pc, #72]	; (8001cc4 <MX_I2C1_Init+0x58>)
 8001c7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <MX_I2C1_Init+0x50>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <MX_I2C1_Init+0x50>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <MX_I2C1_Init+0x50>)
 8001c8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c90:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <MX_I2C1_Init+0x50>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <MX_I2C1_Init+0x50>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c9c:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <MX_I2C1_Init+0x50>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <MX_I2C1_Init+0x50>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ca8:	4804      	ldr	r0, [pc, #16]	; (8001cbc <MX_I2C1_Init+0x50>)
 8001caa:	f001 fa41 	bl	8003130 <HAL_I2C_Init>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cb4:	f000 f98e 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000670 	.word	0x20000670
 8001cc0:	40005400 	.word	0x40005400
 8001cc4:	00061a80 	.word	0x00061a80

08001cc8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	; 0x28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a30      	ldr	r2, [pc, #192]	; (8001da8 <HAL_I2C_MspInit+0xe0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d159      	bne.n	8001d9e <HAL_I2C_MspInit+0xd6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	4b2f      	ldr	r3, [pc, #188]	; (8001dac <HAL_I2C_MspInit+0xe4>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a2e      	ldr	r2, [pc, #184]	; (8001dac <HAL_I2C_MspInit+0xe4>)
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b2c      	ldr	r3, [pc, #176]	; (8001dac <HAL_I2C_MspInit+0xe4>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d0c:	2312      	movs	r3, #18
 8001d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d14:	2303      	movs	r3, #3
 8001d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d18:	2304      	movs	r3, #4
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	4619      	mov	r1, r3
 8001d22:	4823      	ldr	r0, [pc, #140]	; (8001db0 <HAL_I2C_MspInit+0xe8>)
 8001d24:	f001 f866 	bl	8002df4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <HAL_I2C_MspInit+0xe4>)
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	4a1e      	ldr	r2, [pc, #120]	; (8001dac <HAL_I2C_MspInit+0xe4>)
 8001d32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d36:	6413      	str	r3, [r2, #64]	; 0x40
 8001d38:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <HAL_I2C_MspInit+0xe4>)
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001d44:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <HAL_I2C_MspInit+0xec>)
 8001d46:	4a1c      	ldr	r2, [pc, #112]	; (8001db8 <HAL_I2C_MspInit+0xf0>)
 8001d48:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <HAL_I2C_MspInit+0xec>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d50:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <HAL_I2C_MspInit+0xec>)
 8001d52:	2240      	movs	r2, #64	; 0x40
 8001d54:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d56:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <HAL_I2C_MspInit+0xec>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d5c:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <HAL_I2C_MspInit+0xec>)
 8001d5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d62:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d64:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <HAL_I2C_MspInit+0xec>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d6a:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_I2C_MspInit+0xec>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001d70:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <HAL_I2C_MspInit+0xec>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d76:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <HAL_I2C_MspInit+0xec>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <HAL_I2C_MspInit+0xec>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001d82:	480c      	ldr	r0, [pc, #48]	; (8001db4 <HAL_I2C_MspInit+0xec>)
 8001d84:	f000 fc8a 	bl	800269c <HAL_DMA_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8001d8e:	f000 f921 	bl	8001fd4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a07      	ldr	r2, [pc, #28]	; (8001db4 <HAL_I2C_MspInit+0xec>)
 8001d96:	635a      	str	r2, [r3, #52]	; 0x34
 8001d98:	4a06      	ldr	r2, [pc, #24]	; (8001db4 <HAL_I2C_MspInit+0xec>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001d9e:	bf00      	nop
 8001da0:	3728      	adds	r7, #40	; 0x28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40005400 	.word	0x40005400
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40020400 	.word	0x40020400
 8001db4:	20000610 	.word	0x20000610
 8001db8:	40026028 	.word	0x40026028

08001dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dc2:	f000 fae7 	bl	8002394 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dc6:	f000 f887 	bl	8001ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dca:	f7ff fee1 	bl	8001b90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001dce:	f000 fa45 	bl	800225c <MX_USART2_UART_Init>
  MX_DMA_Init();
 8001dd2:	f7ff fec3 	bl	8001b5c <MX_DMA_Init>
  MX_I2C1_Init();
 8001dd6:	f7ff ff49 	bl	8001c6c <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001dda:	f000 f8e7 	bl	8001fac <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init(&hi2c1);
 8001dde:	4834      	ldr	r0, [pc, #208]	; (8001eb0 <main+0xf4>)
 8001de0:	f7ff fae0 	bl	80013a4 <SSD1306_Init>
  BMP280_Init(&Bmp280, &hi2c1, BMP280_ADDRESS);
 8001de4:	2276      	movs	r2, #118	; 0x76
 8001de6:	4932      	ldr	r1, [pc, #200]	; (8001eb0 <main+0xf4>)
 8001de8:	4832      	ldr	r0, [pc, #200]	; (8001eb4 <main+0xf8>)
 8001dea:	f7ff fe2d 	bl	8001a48 <BMP280_Init>
  GFX_SetFont(font_8x5);
 8001dee:	4832      	ldr	r0, [pc, #200]	; (8001eb8 <main+0xfc>)
 8001df0:	f7ff f8ae 	bl	8000f50 <GFX_SetFont>

  SSD1306_Clear(BLACK);
 8001df4:	2000      	movs	r0, #0
 8001df6:	f7ff fb4b 	bl	8001490 <SSD1306_Clear>

  SSD1306_Display();
 8001dfa:	f7ff fb2b 	bl	8001454 <SSD1306_Display>

  SoftTimerBMP = HAL_GetTick();
 8001dfe:	f000 fb2f 	bl	8002460 <HAL_GetTick>
 8001e02:	4603      	mov	r3, r0
 8001e04:	4a2d      	ldr	r2, [pc, #180]	; (8001ebc <main+0x100>)
 8001e06:	6013      	str	r3, [r2, #0]
  SoftTimerOLED= HAL_GetTick();
 8001e08:	f000 fb2a 	bl	8002460 <HAL_GetTick>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4a2c      	ldr	r2, [pc, #176]	; (8001ec0 <main+0x104>)
 8001e10:	6013      	str	r3, [r2, #0]
  while (1)
  {
	  //
	  //BMP280
	  //
	  if((HAL_GetTick() - SoftTimerBMP) > 10)
 8001e12:	f000 fb25 	bl	8002460 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	4b28      	ldr	r3, [pc, #160]	; (8001ebc <main+0x100>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b0a      	cmp	r3, #10
 8001e20:	d910      	bls.n	8001e44 <main+0x88>
	  {
		  SoftTimerBMP = HAL_GetTick();
 8001e22:	f000 fb1d 	bl	8002460 <HAL_GetTick>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4a24      	ldr	r2, [pc, #144]	; (8001ebc <main+0x100>)
 8001e2a:	6013      	str	r3, [r2, #0]
		  if(Bmp280.bmp_i2c->State == HAL_I2C_STATE_READY)
 8001e2c:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <main+0xf8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b20      	cmp	r3, #32
 8001e38:	d104      	bne.n	8001e44 <main+0x88>
		  {
			  BMP280_ReadPressureAndTemperature(&Bmp280, &Pressure, &Temp);
 8001e3a:	4a22      	ldr	r2, [pc, #136]	; (8001ec4 <main+0x108>)
 8001e3c:	4922      	ldr	r1, [pc, #136]	; (8001ec8 <main+0x10c>)
 8001e3e:	481d      	ldr	r0, [pc, #116]	; (8001eb4 <main+0xf8>)
 8001e40:	f7ff fd4c 	bl	80018dc <BMP280_ReadPressureAndTemperature>
		  }
	  }
	  //
	  //OLED
	  //
	  if((HAL_GetTick() - SoftTimerOLED) > 100)
 8001e44:	f000 fb0c 	bl	8002460 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <main+0x104>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b64      	cmp	r3, #100	; 0x64
 8001e52:	d9de      	bls.n	8001e12 <main+0x56>
	  {
		  SoftTimerOLED = HAL_GetTick();
 8001e54:	f000 fb04 	bl	8002460 <HAL_GetTick>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	4a19      	ldr	r2, [pc, #100]	; (8001ec0 <main+0x104>)
 8001e5c:	6013      	str	r3, [r2, #0]
		  sprintf(Message, "Press: %.2f hPa", Pressure);
 8001e5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <main+0x10c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe fb78 	bl	8000558 <__aeabi_f2d>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4917      	ldr	r1, [pc, #92]	; (8001ecc <main+0x110>)
 8001e6e:	4818      	ldr	r0, [pc, #96]	; (8001ed0 <main+0x114>)
 8001e70:	f005 fa72 	bl	8007358 <siprintf>
		  GFX_DrawString(0,0,Message,WHITE,0);
 8001e74:	2300      	movs	r3, #0
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	2301      	movs	r3, #1
 8001e7a:	4a15      	ldr	r2, [pc, #84]	; (8001ed0 <main+0x114>)
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7ff f930 	bl	80010e4 <GFX_DrawString>

		  sprintf(Message, "Temp: %.2f C", Temp);
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <main+0x108>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fb65 	bl	8000558 <__aeabi_f2d>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4910      	ldr	r1, [pc, #64]	; (8001ed4 <main+0x118>)
 8001e94:	480e      	ldr	r0, [pc, #56]	; (8001ed0 <main+0x114>)
 8001e96:	f005 fa5f 	bl	8007358 <siprintf>
		  GFX_DrawString(0,10,Message,WHITE,0);
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	4a0b      	ldr	r2, [pc, #44]	; (8001ed0 <main+0x114>)
 8001ea2:	210a      	movs	r1, #10
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f7ff f91d 	bl	80010e4 <GFX_DrawString>

		  SSD1306_Display();
 8001eaa:	f7ff fad3 	bl	8001454 <SSD1306_Display>
	  if((HAL_GetTick() - SoftTimerBMP) > 10)
 8001eae:	e7b0      	b.n	8001e12 <main+0x56>
 8001eb0:	20000670 	.word	0x20000670
 8001eb4:	200006f0 	.word	0x200006f0
 8001eb8:	080097e8 	.word	0x080097e8
 8001ebc:	200006c4 	.word	0x200006c4
 8001ec0:	200006c8 	.word	0x200006c8
 8001ec4:	200006cc 	.word	0x200006cc
 8001ec8:	20000714 	.word	0x20000714
 8001ecc:	080097c8 	.word	0x080097c8
 8001ed0:	200006d0 	.word	0x200006d0
 8001ed4:	080097d8 	.word	0x080097d8

08001ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b094      	sub	sp, #80	; 0x50
 8001edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ede:	f107 0320 	add.w	r3, r7, #32
 8001ee2:	2230      	movs	r2, #48	; 0x30
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f004 fdc4 	bl	8006a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efc:	2300      	movs	r3, #0
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	4b28      	ldr	r3, [pc, #160]	; (8001fa4 <SystemClock_Config+0xcc>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	4a27      	ldr	r2, [pc, #156]	; (8001fa4 <SystemClock_Config+0xcc>)
 8001f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0c:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <SystemClock_Config+0xcc>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f18:	2300      	movs	r3, #0
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <SystemClock_Config+0xd0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a21      	ldr	r2, [pc, #132]	; (8001fa8 <SystemClock_Config+0xd0>)
 8001f22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <SystemClock_Config+0xd0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f30:	607b      	str	r3, [r7, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f34:	2302      	movs	r3, #2
 8001f36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f3c:	2310      	movs	r3, #16
 8001f3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f40:	2302      	movs	r3, #2
 8001f42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f44:	2300      	movs	r3, #0
 8001f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001f48:	2310      	movs	r3, #16
 8001f4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001f4c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001f50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001f52:	2304      	movs	r3, #4
 8001f54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f56:	2304      	movs	r3, #4
 8001f58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f5a:	f107 0320 	add.w	r3, r7, #32
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f003 fed4 	bl	8005d0c <HAL_RCC_OscConfig>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001f6a:	f000 f833 	bl	8001fd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f6e:	230f      	movs	r3, #15
 8001f70:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f72:	2302      	movs	r3, #2
 8001f74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f7e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	2102      	movs	r1, #2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f004 f936 	bl	80061fc <HAL_RCC_ClockConfig>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f96:	f000 f81d 	bl	8001fd4 <Error_Handler>
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	3750      	adds	r7, #80	; 0x50
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40007000 	.word	0x40007000

08001fac <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	201f      	movs	r0, #31
 8001fb6:	f000 fb3a 	bl	800262e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001fba:	201f      	movs	r0, #31
 8001fbc:	f000 fb53 	bl	8002666 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	200c      	movs	r0, #12
 8001fc6:	f000 fb32 	bl	800262e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001fca:	200c      	movs	r0, #12
 8001fcc:	f000 fb4b 	bl	8002666 <HAL_NVIC_EnableIRQ>
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd8:	b672      	cpsid	i
}
 8001fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fdc:	e7fe      	b.n	8001fdc <Error_Handler+0x8>
	...

08001fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	607b      	str	r3, [r7, #4]
 8001fea:	4b10      	ldr	r3, [pc, #64]	; (800202c <HAL_MspInit+0x4c>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	4a0f      	ldr	r2, [pc, #60]	; (800202c <HAL_MspInit+0x4c>)
 8001ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	; (800202c <HAL_MspInit+0x4c>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffe:	607b      	str	r3, [r7, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	603b      	str	r3, [r7, #0]
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_MspInit+0x4c>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	4a08      	ldr	r2, [pc, #32]	; (800202c <HAL_MspInit+0x4c>)
 800200c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002010:	6413      	str	r3, [r2, #64]	; 0x40
 8002012:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_MspInit+0x4c>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800201e:	2007      	movs	r0, #7
 8002020:	f000 fafa 	bl	8002618 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40023800 	.word	0x40023800

08002030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002034:	e7fe      	b.n	8002034 <NMI_Handler+0x4>

08002036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800203a:	e7fe      	b.n	800203a <HardFault_Handler+0x4>

0800203c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <MemManage_Handler+0x4>

08002042 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002046:	e7fe      	b.n	8002046 <BusFault_Handler+0x4>

08002048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800204c:	e7fe      	b.n	800204c <UsageFault_Handler+0x4>

0800204e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800207c:	f000 f9dc 	bl	8002438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002080:	bf00      	nop
 8002082:	bd80      	pop	{r7, pc}

08002084 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <DMA1_Stream1_IRQHandler+0x10>)
 800208a:	f000 fc2f 	bl	80028ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000610 	.word	0x20000610

08002098 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800209c:	4802      	ldr	r0, [pc, #8]	; (80020a8 <I2C1_EV_IRQHandler+0x10>)
 800209e:	f001 fe0d 	bl	8003cbc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000670 	.word	0x20000670

080020ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
	return 1;
 80020b0:	2301      	movs	r3, #1
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <_kill>:

int _kill(int pid, int sig)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020c6:	f004 fcab 	bl	8006a20 <__errno>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2216      	movs	r2, #22
 80020ce:	601a      	str	r2, [r3, #0]
	return -1;
 80020d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <_exit>:

void _exit (int status)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020e4:	f04f 31ff 	mov.w	r1, #4294967295
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ffe7 	bl	80020bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80020ee:	e7fe      	b.n	80020ee <_exit+0x12>

080020f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	e00a      	b.n	8002118 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002102:	f3af 8000 	nop.w
 8002106:	4601      	mov	r1, r0
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	60ba      	str	r2, [r7, #8]
 800210e:	b2ca      	uxtb	r2, r1
 8002110:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	3301      	adds	r3, #1
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	429a      	cmp	r2, r3
 800211e:	dbf0      	blt.n	8002102 <_read+0x12>
	}

return len;
 8002120:	687b      	ldr	r3, [r7, #4]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b086      	sub	sp, #24
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	e009      	b.n	8002150 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	60ba      	str	r2, [r7, #8]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	3301      	adds	r3, #1
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	429a      	cmp	r2, r3
 8002156:	dbf1      	blt.n	800213c <_write+0x12>
	}
	return len;
 8002158:	687b      	ldr	r3, [r7, #4]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <_close>:

int _close(int file)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
	return -1;
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800218a:	605a      	str	r2, [r3, #4]
	return 0;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <_isatty>:

int _isatty(int file)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
	return 1;
 80021a2:	2301      	movs	r3, #1
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
	return 0;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d4:	4a14      	ldr	r2, [pc, #80]	; (8002228 <_sbrk+0x5c>)
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <_sbrk+0x60>)
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021e0:	4b13      	ldr	r3, [pc, #76]	; (8002230 <_sbrk+0x64>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d102      	bne.n	80021ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <_sbrk+0x64>)
 80021ea:	4a12      	ldr	r2, [pc, #72]	; (8002234 <_sbrk+0x68>)
 80021ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <_sbrk+0x64>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4413      	add	r3, r2
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d207      	bcs.n	800220c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021fc:	f004 fc10 	bl	8006a20 <__errno>
 8002200:	4603      	mov	r3, r0
 8002202:	220c      	movs	r2, #12
 8002204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002206:	f04f 33ff 	mov.w	r3, #4294967295
 800220a:	e009      	b.n	8002220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <_sbrk+0x64>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002212:	4b07      	ldr	r3, [pc, #28]	; (8002230 <_sbrk+0x64>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	4a05      	ldr	r2, [pc, #20]	; (8002230 <_sbrk+0x64>)
 800221c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800221e:	68fb      	ldr	r3, [r7, #12]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20020000 	.word	0x20020000
 800222c:	00000400 	.word	0x00000400
 8002230:	200005fc 	.word	0x200005fc
 8002234:	20000770 	.word	0x20000770

08002238 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <SystemInit+0x20>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002242:	4a05      	ldr	r2, [pc, #20]	; (8002258 <SystemInit+0x20>)
 8002244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002260:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <MX_USART2_UART_Init+0x4c>)
 8002262:	4a12      	ldr	r2, [pc, #72]	; (80022ac <MX_USART2_UART_Init+0x50>)
 8002264:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002266:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <MX_USART2_UART_Init+0x4c>)
 8002268:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800226c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <MX_USART2_UART_Init+0x4c>)
 8002270:	2200      	movs	r2, #0
 8002272:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <MX_USART2_UART_Init+0x4c>)
 8002276:	2200      	movs	r2, #0
 8002278:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <MX_USART2_UART_Init+0x4c>)
 800227c:	2200      	movs	r2, #0
 800227e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002280:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <MX_USART2_UART_Init+0x4c>)
 8002282:	220c      	movs	r2, #12
 8002284:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002286:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <MX_USART2_UART_Init+0x4c>)
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <MX_USART2_UART_Init+0x4c>)
 800228e:	2200      	movs	r2, #0
 8002290:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002292:	4805      	ldr	r0, [pc, #20]	; (80022a8 <MX_USART2_UART_Init+0x4c>)
 8002294:	f004 f9ae 	bl	80065f4 <HAL_UART_Init>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800229e:	f7ff fe99 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000718 	.word	0x20000718
 80022ac:	40004400 	.word	0x40004400

080022b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	; 0x28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a19      	ldr	r2, [pc, #100]	; (8002334 <HAL_UART_MspInit+0x84>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d12b      	bne.n	800232a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	4b18      	ldr	r3, [pc, #96]	; (8002338 <HAL_UART_MspInit+0x88>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	4a17      	ldr	r2, [pc, #92]	; (8002338 <HAL_UART_MspInit+0x88>)
 80022dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e0:	6413      	str	r3, [r2, #64]	; 0x40
 80022e2:	4b15      	ldr	r3, [pc, #84]	; (8002338 <HAL_UART_MspInit+0x88>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <HAL_UART_MspInit+0x88>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	4a10      	ldr	r2, [pc, #64]	; (8002338 <HAL_UART_MspInit+0x88>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6313      	str	r3, [r2, #48]	; 0x30
 80022fe:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <HAL_UART_MspInit+0x88>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800230a:	230c      	movs	r3, #12
 800230c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230e:	2302      	movs	r3, #2
 8002310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002316:	2303      	movs	r3, #3
 8002318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800231a:	2307      	movs	r3, #7
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231e:	f107 0314 	add.w	r3, r7, #20
 8002322:	4619      	mov	r1, r3
 8002324:	4805      	ldr	r0, [pc, #20]	; (800233c <HAL_UART_MspInit+0x8c>)
 8002326:	f000 fd65 	bl	8002df4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800232a:	bf00      	nop
 800232c:	3728      	adds	r7, #40	; 0x28
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40004400 	.word	0x40004400
 8002338:	40023800 	.word	0x40023800
 800233c:	40020000 	.word	0x40020000

08002340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002378 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002344:	480d      	ldr	r0, [pc, #52]	; (800237c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002346:	490e      	ldr	r1, [pc, #56]	; (8002380 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002348:	4a0e      	ldr	r2, [pc, #56]	; (8002384 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800234a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800234c:	e002      	b.n	8002354 <LoopCopyDataInit>

0800234e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800234e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002352:	3304      	adds	r3, #4

08002354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002358:	d3f9      	bcc.n	800234e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800235a:	4a0b      	ldr	r2, [pc, #44]	; (8002388 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800235c:	4c0b      	ldr	r4, [pc, #44]	; (800238c <LoopFillZerobss+0x26>)
  movs r3, #0
 800235e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002360:	e001      	b.n	8002366 <LoopFillZerobss>

08002362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002364:	3204      	adds	r2, #4

08002366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002368:	d3fb      	bcc.n	8002362 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800236a:	f7ff ff65 	bl	8002238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800236e:	f004 fb5d 	bl	8006a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002372:	f7ff fd23 	bl	8001dbc <main>
  bx  lr    
 8002376:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002378:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800237c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002380:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002384:	08009ddc 	.word	0x08009ddc
  ldr r2, =_sbss
 8002388:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800238c:	20000770 	.word	0x20000770

08002390 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002390:	e7fe      	b.n	8002390 <ADC_IRQHandler>
	...

08002394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002398:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <HAL_Init+0x40>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0d      	ldr	r2, [pc, #52]	; (80023d4 <HAL_Init+0x40>)
 800239e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_Init+0x40>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <HAL_Init+0x40>)
 80023aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <HAL_Init+0x40>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a07      	ldr	r2, [pc, #28]	; (80023d4 <HAL_Init+0x40>)
 80023b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023bc:	2003      	movs	r0, #3
 80023be:	f000 f92b 	bl	8002618 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023c2:	2000      	movs	r0, #0
 80023c4:	f000 f808 	bl	80023d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023c8:	f7ff fe0a 	bl	8001fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40023c00 	.word	0x40023c00

080023d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023e0:	4b12      	ldr	r3, [pc, #72]	; (800242c <HAL_InitTick+0x54>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4b12      	ldr	r3, [pc, #72]	; (8002430 <HAL_InitTick+0x58>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	4619      	mov	r1, r3
 80023ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80023f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 f943 	bl	8002682 <HAL_SYSTICK_Config>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e00e      	b.n	8002424 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b0f      	cmp	r3, #15
 800240a:	d80a      	bhi.n	8002422 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800240c:	2200      	movs	r2, #0
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	f04f 30ff 	mov.w	r0, #4294967295
 8002414:	f000 f90b 	bl	800262e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002418:	4a06      	ldr	r2, [pc, #24]	; (8002434 <HAL_InitTick+0x5c>)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	e000      	b.n	8002424 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
}
 8002424:	4618      	mov	r0, r3
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000004 	.word	0x20000004
 8002430:	2000000c 	.word	0x2000000c
 8002434:	20000008 	.word	0x20000008

08002438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_IncTick+0x20>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_IncTick+0x24>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4413      	add	r3, r2
 8002448:	4a04      	ldr	r2, [pc, #16]	; (800245c <HAL_IncTick+0x24>)
 800244a:	6013      	str	r3, [r2, #0]
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	2000000c 	.word	0x2000000c
 800245c:	2000075c 	.word	0x2000075c

08002460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return uwTick;
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <HAL_GetTick+0x14>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	2000075c 	.word	0x2000075c

08002478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <__NVIC_SetPriorityGrouping+0x44>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002494:	4013      	ands	r3, r2
 8002496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024aa:	4a04      	ldr	r2, [pc, #16]	; (80024bc <__NVIC_SetPriorityGrouping+0x44>)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	60d3      	str	r3, [r2, #12]
}
 80024b0:	bf00      	nop
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <__NVIC_GetPriorityGrouping+0x18>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	0a1b      	lsrs	r3, r3, #8
 80024ca:	f003 0307 	and.w	r3, r3, #7
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	db0b      	blt.n	8002506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	f003 021f 	and.w	r2, r3, #31
 80024f4:	4907      	ldr	r1, [pc, #28]	; (8002514 <__NVIC_EnableIRQ+0x38>)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	2001      	movs	r0, #1
 80024fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000e100 	.word	0xe000e100

08002518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	6039      	str	r1, [r7, #0]
 8002522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002528:	2b00      	cmp	r3, #0
 800252a:	db0a      	blt.n	8002542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	b2da      	uxtb	r2, r3
 8002530:	490c      	ldr	r1, [pc, #48]	; (8002564 <__NVIC_SetPriority+0x4c>)
 8002532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002536:	0112      	lsls	r2, r2, #4
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	440b      	add	r3, r1
 800253c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002540:	e00a      	b.n	8002558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	b2da      	uxtb	r2, r3
 8002546:	4908      	ldr	r1, [pc, #32]	; (8002568 <__NVIC_SetPriority+0x50>)
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	3b04      	subs	r3, #4
 8002550:	0112      	lsls	r2, r2, #4
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	440b      	add	r3, r1
 8002556:	761a      	strb	r2, [r3, #24]
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000e100 	.word	0xe000e100
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800256c:	b480      	push	{r7}
 800256e:	b089      	sub	sp, #36	; 0x24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f1c3 0307 	rsb	r3, r3, #7
 8002586:	2b04      	cmp	r3, #4
 8002588:	bf28      	it	cs
 800258a:	2304      	movcs	r3, #4
 800258c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3304      	adds	r3, #4
 8002592:	2b06      	cmp	r3, #6
 8002594:	d902      	bls.n	800259c <NVIC_EncodePriority+0x30>
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3b03      	subs	r3, #3
 800259a:	e000      	b.n	800259e <NVIC_EncodePriority+0x32>
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a0:	f04f 32ff 	mov.w	r2, #4294967295
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43da      	mvns	r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	401a      	ands	r2, r3
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025b4:	f04f 31ff 	mov.w	r1, #4294967295
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	43d9      	mvns	r1, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c4:	4313      	orrs	r3, r2
         );
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3724      	adds	r7, #36	; 0x24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
	...

080025d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3b01      	subs	r3, #1
 80025e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025e4:	d301      	bcc.n	80025ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025e6:	2301      	movs	r3, #1
 80025e8:	e00f      	b.n	800260a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ea:	4a0a      	ldr	r2, [pc, #40]	; (8002614 <SysTick_Config+0x40>)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025f2:	210f      	movs	r1, #15
 80025f4:	f04f 30ff 	mov.w	r0, #4294967295
 80025f8:	f7ff ff8e 	bl	8002518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <SysTick_Config+0x40>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002602:	4b04      	ldr	r3, [pc, #16]	; (8002614 <SysTick_Config+0x40>)
 8002604:	2207      	movs	r2, #7
 8002606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	e000e010 	.word	0xe000e010

08002618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff ff29 	bl	8002478 <__NVIC_SetPriorityGrouping>
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800262e:	b580      	push	{r7, lr}
 8002630:	b086      	sub	sp, #24
 8002632:	af00      	add	r7, sp, #0
 8002634:	4603      	mov	r3, r0
 8002636:	60b9      	str	r1, [r7, #8]
 8002638:	607a      	str	r2, [r7, #4]
 800263a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002640:	f7ff ff3e 	bl	80024c0 <__NVIC_GetPriorityGrouping>
 8002644:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	6978      	ldr	r0, [r7, #20]
 800264c:	f7ff ff8e 	bl	800256c <NVIC_EncodePriority>
 8002650:	4602      	mov	r2, r0
 8002652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff5d 	bl	8002518 <__NVIC_SetPriority>
}
 800265e:	bf00      	nop
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	4603      	mov	r3, r0
 800266e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff31 	bl	80024dc <__NVIC_EnableIRQ>
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff ffa2 	bl	80025d4 <SysTick_Config>
 8002690:	4603      	mov	r3, r0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026a8:	f7ff feda 	bl	8002460 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e099      	b.n	80027ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0201 	bic.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026d8:	e00f      	b.n	80026fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026da:	f7ff fec1 	bl	8002460 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b05      	cmp	r3, #5
 80026e6:	d908      	bls.n	80026fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2220      	movs	r2, #32
 80026ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2203      	movs	r2, #3
 80026f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e078      	b.n	80027ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1e8      	bne.n	80026da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	4b38      	ldr	r3, [pc, #224]	; (80027f4 <HAL_DMA_Init+0x158>)
 8002714:	4013      	ands	r3, r2
 8002716:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002726:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002732:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800273e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	4313      	orrs	r3, r2
 800274a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	2b04      	cmp	r3, #4
 8002752:	d107      	bne.n	8002764 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	4313      	orrs	r3, r2
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4313      	orrs	r3, r2
 8002762:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f023 0307 	bic.w	r3, r3, #7
 800277a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	4313      	orrs	r3, r2
 8002784:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	2b04      	cmp	r3, #4
 800278c:	d117      	bne.n	80027be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	4313      	orrs	r3, r2
 8002796:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00e      	beq.n	80027be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 faab 	bl	8002cfc <DMA_CheckFifoParam>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d008      	beq.n	80027be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2240      	movs	r2, #64	; 0x40
 80027b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027ba:	2301      	movs	r3, #1
 80027bc:	e016      	b.n	80027ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fa62 	bl	8002c90 <DMA_CalcBaseAndBitshift>
 80027cc:	4603      	mov	r3, r0
 80027ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d4:	223f      	movs	r2, #63	; 0x3f
 80027d6:	409a      	lsls	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	f010803f 	.word	0xf010803f

080027f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_DMA_Start_IT+0x26>
 800281a:	2302      	movs	r3, #2
 800281c:	e040      	b.n	80028a0 <HAL_DMA_Start_IT+0xa8>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b01      	cmp	r3, #1
 8002830:	d12f      	bne.n	8002892 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2202      	movs	r2, #2
 8002836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68b9      	ldr	r1, [r7, #8]
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 f9f4 	bl	8002c34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002850:	223f      	movs	r2, #63	; 0x3f
 8002852:	409a      	lsls	r2, r3
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0216 	orr.w	r2, r2, #22
 8002866:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	2b00      	cmp	r3, #0
 800286e:	d007      	beq.n	8002880 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0208 	orr.w	r2, r2, #8
 800287e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	e005      	b.n	800289e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800289a:	2302      	movs	r3, #2
 800289c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800289e:	7dfb      	ldrb	r3, [r7, #23]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d004      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2280      	movs	r2, #128	; 0x80
 80028c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e00c      	b.n	80028e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2205      	movs	r2, #5
 80028ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0201 	bic.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028f8:	4b92      	ldr	r3, [pc, #584]	; (8002b44 <HAL_DMA_IRQHandler+0x258>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a92      	ldr	r2, [pc, #584]	; (8002b48 <HAL_DMA_IRQHandler+0x25c>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	0a9b      	lsrs	r3, r3, #10
 8002904:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002916:	2208      	movs	r2, #8
 8002918:	409a      	lsls	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d01a      	beq.n	8002958 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d013      	beq.n	8002958 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0204 	bic.w	r2, r2, #4
 800293e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002944:	2208      	movs	r2, #8
 8002946:	409a      	lsls	r2, r3
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002950:	f043 0201 	orr.w	r2, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295c:	2201      	movs	r2, #1
 800295e:	409a      	lsls	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4013      	ands	r3, r2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d012      	beq.n	800298e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00b      	beq.n	800298e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	2201      	movs	r2, #1
 800297c:	409a      	lsls	r2, r3
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002986:	f043 0202 	orr.w	r2, r3, #2
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002992:	2204      	movs	r2, #4
 8002994:	409a      	lsls	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4013      	ands	r3, r2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d012      	beq.n	80029c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b0:	2204      	movs	r2, #4
 80029b2:	409a      	lsls	r2, r3
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029bc:	f043 0204 	orr.w	r2, r3, #4
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c8:	2210      	movs	r2, #16
 80029ca:	409a      	lsls	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d043      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d03c      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e6:	2210      	movs	r2, #16
 80029e8:	409a      	lsls	r2, r3
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d018      	beq.n	8002a2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d108      	bne.n	8002a1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d024      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
 8002a1a:	e01f      	b.n	8002a5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01b      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	4798      	blx	r3
 8002a2c:	e016      	b.n	8002a5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d107      	bne.n	8002a4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0208 	bic.w	r2, r2, #8
 8002a4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a60:	2220      	movs	r2, #32
 8002a62:	409a      	lsls	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 808e 	beq.w	8002b8a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 8086 	beq.w	8002b8a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a82:	2220      	movs	r2, #32
 8002a84:	409a      	lsls	r2, r3
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b05      	cmp	r3, #5
 8002a94:	d136      	bne.n	8002b04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0216 	bic.w	r2, r2, #22
 8002aa4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ab4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d103      	bne.n	8002ac6 <HAL_DMA_IRQHandler+0x1da>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d007      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0208 	bic.w	r2, r2, #8
 8002ad4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ada:	223f      	movs	r2, #63	; 0x3f
 8002adc:	409a      	lsls	r2, r3
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d07d      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	4798      	blx	r3
        }
        return;
 8002b02:	e078      	b.n	8002bf6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d01c      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d108      	bne.n	8002b32 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d030      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	4798      	blx	r3
 8002b30:	e02b      	b.n	8002b8a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d027      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	4798      	blx	r3
 8002b42:	e022      	b.n	8002b8a <HAL_DMA_IRQHandler+0x29e>
 8002b44:	20000004 	.word	0x20000004
 8002b48:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10f      	bne.n	8002b7a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0210 	bic.w	r2, r2, #16
 8002b68:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d032      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d022      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2205      	movs	r2, #5
 8002ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0201 	bic.w	r2, r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d307      	bcc.n	8002bd2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f2      	bne.n	8002bb6 <HAL_DMA_IRQHandler+0x2ca>
 8002bd0:	e000      	b.n	8002bd4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002bd2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	4798      	blx	r3
 8002bf4:	e000      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002bf6:	bf00      	nop
    }
  }
}
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop

08002c00 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c0e:	b2db      	uxtb	r3, r3
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
 8002c40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	2b40      	cmp	r3, #64	; 0x40
 8002c60:	d108      	bne.n	8002c74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c72:	e007      	b.n	8002c84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	60da      	str	r2, [r3, #12]
}
 8002c84:	bf00      	nop
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	3b10      	subs	r3, #16
 8002ca0:	4a14      	ldr	r2, [pc, #80]	; (8002cf4 <DMA_CalcBaseAndBitshift+0x64>)
 8002ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca6:	091b      	lsrs	r3, r3, #4
 8002ca8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002caa:	4a13      	ldr	r2, [pc, #76]	; (8002cf8 <DMA_CalcBaseAndBitshift+0x68>)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4413      	add	r3, r2
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b03      	cmp	r3, #3
 8002cbc:	d909      	bls.n	8002cd2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cc6:	f023 0303 	bic.w	r3, r3, #3
 8002cca:	1d1a      	adds	r2, r3, #4
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	659a      	str	r2, [r3, #88]	; 0x58
 8002cd0:	e007      	b.n	8002ce2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cda:	f023 0303 	bic.w	r3, r3, #3
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	aaaaaaab 	.word	0xaaaaaaab
 8002cf8:	080099e0 	.word	0x080099e0

08002cfc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d11f      	bne.n	8002d56 <DMA_CheckFifoParam+0x5a>
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d856      	bhi.n	8002dca <DMA_CheckFifoParam+0xce>
 8002d1c:	a201      	add	r2, pc, #4	; (adr r2, 8002d24 <DMA_CheckFifoParam+0x28>)
 8002d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d22:	bf00      	nop
 8002d24:	08002d35 	.word	0x08002d35
 8002d28:	08002d47 	.word	0x08002d47
 8002d2c:	08002d35 	.word	0x08002d35
 8002d30:	08002dcb 	.word	0x08002dcb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d046      	beq.n	8002dce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d44:	e043      	b.n	8002dce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d4e:	d140      	bne.n	8002dd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d54:	e03d      	b.n	8002dd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d5e:	d121      	bne.n	8002da4 <DMA_CheckFifoParam+0xa8>
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d837      	bhi.n	8002dd6 <DMA_CheckFifoParam+0xda>
 8002d66:	a201      	add	r2, pc, #4	; (adr r2, 8002d6c <DMA_CheckFifoParam+0x70>)
 8002d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6c:	08002d7d 	.word	0x08002d7d
 8002d70:	08002d83 	.word	0x08002d83
 8002d74:	08002d7d 	.word	0x08002d7d
 8002d78:	08002d95 	.word	0x08002d95
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d80:	e030      	b.n	8002de4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d025      	beq.n	8002dda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d92:	e022      	b.n	8002dda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d9c:	d11f      	bne.n	8002dde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002da2:	e01c      	b.n	8002dde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d903      	bls.n	8002db2 <DMA_CheckFifoParam+0xb6>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	d003      	beq.n	8002db8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002db0:	e018      	b.n	8002de4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	73fb      	strb	r3, [r7, #15]
      break;
 8002db6:	e015      	b.n	8002de4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00e      	beq.n	8002de2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002dc8:	e00b      	b.n	8002de2 <DMA_CheckFifoParam+0xe6>
      break;
 8002dca:	bf00      	nop
 8002dcc:	e00a      	b.n	8002de4 <DMA_CheckFifoParam+0xe8>
      break;
 8002dce:	bf00      	nop
 8002dd0:	e008      	b.n	8002de4 <DMA_CheckFifoParam+0xe8>
      break;
 8002dd2:	bf00      	nop
 8002dd4:	e006      	b.n	8002de4 <DMA_CheckFifoParam+0xe8>
      break;
 8002dd6:	bf00      	nop
 8002dd8:	e004      	b.n	8002de4 <DMA_CheckFifoParam+0xe8>
      break;
 8002dda:	bf00      	nop
 8002ddc:	e002      	b.n	8002de4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002dde:	bf00      	nop
 8002de0:	e000      	b.n	8002de4 <DMA_CheckFifoParam+0xe8>
      break;
 8002de2:	bf00      	nop
    }
  } 
  
  return status; 
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop

08002df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b089      	sub	sp, #36	; 0x24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61fb      	str	r3, [r7, #28]
 8002e0e:	e159      	b.n	80030c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e10:	2201      	movs	r2, #1
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4013      	ands	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	f040 8148 	bne.w	80030be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d005      	beq.n	8002e46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d130      	bne.n	8002ea8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	2203      	movs	r2, #3
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43db      	mvns	r3, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	f003 0201 	and.w	r2, r3, #1
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d017      	beq.n	8002ee4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	2203      	movs	r2, #3
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d123      	bne.n	8002f38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	08da      	lsrs	r2, r3, #3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3208      	adds	r2, #8
 8002ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	220f      	movs	r2, #15
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	08da      	lsrs	r2, r3, #3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3208      	adds	r2, #8
 8002f32:	69b9      	ldr	r1, [r7, #24]
 8002f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	2203      	movs	r2, #3
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 0203 	and.w	r2, r3, #3
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 80a2 	beq.w	80030be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	4b57      	ldr	r3, [pc, #348]	; (80030dc <HAL_GPIO_Init+0x2e8>)
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	4a56      	ldr	r2, [pc, #344]	; (80030dc <HAL_GPIO_Init+0x2e8>)
 8002f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f88:	6453      	str	r3, [r2, #68]	; 0x44
 8002f8a:	4b54      	ldr	r3, [pc, #336]	; (80030dc <HAL_GPIO_Init+0x2e8>)
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f96:	4a52      	ldr	r2, [pc, #328]	; (80030e0 <HAL_GPIO_Init+0x2ec>)
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	089b      	lsrs	r3, r3, #2
 8002f9c:	3302      	adds	r3, #2
 8002f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	220f      	movs	r2, #15
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a49      	ldr	r2, [pc, #292]	; (80030e4 <HAL_GPIO_Init+0x2f0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d019      	beq.n	8002ff6 <HAL_GPIO_Init+0x202>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a48      	ldr	r2, [pc, #288]	; (80030e8 <HAL_GPIO_Init+0x2f4>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d013      	beq.n	8002ff2 <HAL_GPIO_Init+0x1fe>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a47      	ldr	r2, [pc, #284]	; (80030ec <HAL_GPIO_Init+0x2f8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00d      	beq.n	8002fee <HAL_GPIO_Init+0x1fa>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a46      	ldr	r2, [pc, #280]	; (80030f0 <HAL_GPIO_Init+0x2fc>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d007      	beq.n	8002fea <HAL_GPIO_Init+0x1f6>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a45      	ldr	r2, [pc, #276]	; (80030f4 <HAL_GPIO_Init+0x300>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d101      	bne.n	8002fe6 <HAL_GPIO_Init+0x1f2>
 8002fe2:	2304      	movs	r3, #4
 8002fe4:	e008      	b.n	8002ff8 <HAL_GPIO_Init+0x204>
 8002fe6:	2307      	movs	r3, #7
 8002fe8:	e006      	b.n	8002ff8 <HAL_GPIO_Init+0x204>
 8002fea:	2303      	movs	r3, #3
 8002fec:	e004      	b.n	8002ff8 <HAL_GPIO_Init+0x204>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e002      	b.n	8002ff8 <HAL_GPIO_Init+0x204>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <HAL_GPIO_Init+0x204>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	69fa      	ldr	r2, [r7, #28]
 8002ffa:	f002 0203 	and.w	r2, r2, #3
 8002ffe:	0092      	lsls	r2, r2, #2
 8003000:	4093      	lsls	r3, r2
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003008:	4935      	ldr	r1, [pc, #212]	; (80030e0 <HAL_GPIO_Init+0x2ec>)
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	089b      	lsrs	r3, r3, #2
 800300e:	3302      	adds	r3, #2
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003016:	4b38      	ldr	r3, [pc, #224]	; (80030f8 <HAL_GPIO_Init+0x304>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	43db      	mvns	r3, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4013      	ands	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800303a:	4a2f      	ldr	r2, [pc, #188]	; (80030f8 <HAL_GPIO_Init+0x304>)
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003040:	4b2d      	ldr	r3, [pc, #180]	; (80030f8 <HAL_GPIO_Init+0x304>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003064:	4a24      	ldr	r2, [pc, #144]	; (80030f8 <HAL_GPIO_Init+0x304>)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800306a:	4b23      	ldr	r3, [pc, #140]	; (80030f8 <HAL_GPIO_Init+0x304>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	43db      	mvns	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800308e:	4a1a      	ldr	r2, [pc, #104]	; (80030f8 <HAL_GPIO_Init+0x304>)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003094:	4b18      	ldr	r3, [pc, #96]	; (80030f8 <HAL_GPIO_Init+0x304>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030b8:	4a0f      	ldr	r2, [pc, #60]	; (80030f8 <HAL_GPIO_Init+0x304>)
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	3301      	adds	r3, #1
 80030c2:	61fb      	str	r3, [r7, #28]
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	2b0f      	cmp	r3, #15
 80030c8:	f67f aea2 	bls.w	8002e10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030cc:	bf00      	nop
 80030ce:	bf00      	nop
 80030d0:	3724      	adds	r7, #36	; 0x24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40013800 	.word	0x40013800
 80030e4:	40020000 	.word	0x40020000
 80030e8:	40020400 	.word	0x40020400
 80030ec:	40020800 	.word	0x40020800
 80030f0:	40020c00 	.word	0x40020c00
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40013c00 	.word	0x40013c00

080030fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	807b      	strh	r3, [r7, #2]
 8003108:	4613      	mov	r3, r2
 800310a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800310c:	787b      	ldrb	r3, [r7, #1]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003112:	887a      	ldrh	r2, [r7, #2]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003118:	e003      	b.n	8003122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800311a:	887b      	ldrh	r3, [r7, #2]
 800311c:	041a      	lsls	r2, r3, #16
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	619a      	str	r2, [r3, #24]
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e12b      	b.n	800339a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d106      	bne.n	800315c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fe fdb6 	bl	8001cc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2224      	movs	r2, #36	; 0x24
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0201 	bic.w	r2, r2, #1
 8003172:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003182:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003192:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003194:	f003 fa06 	bl	80065a4 <HAL_RCC_GetPCLK1Freq>
 8003198:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	4a81      	ldr	r2, [pc, #516]	; (80033a4 <HAL_I2C_Init+0x274>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d807      	bhi.n	80031b4 <HAL_I2C_Init+0x84>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4a80      	ldr	r2, [pc, #512]	; (80033a8 <HAL_I2C_Init+0x278>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	bf94      	ite	ls
 80031ac:	2301      	movls	r3, #1
 80031ae:	2300      	movhi	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	e006      	b.n	80031c2 <HAL_I2C_Init+0x92>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4a7d      	ldr	r2, [pc, #500]	; (80033ac <HAL_I2C_Init+0x27c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	bf94      	ite	ls
 80031bc:	2301      	movls	r3, #1
 80031be:	2300      	movhi	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e0e7      	b.n	800339a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4a78      	ldr	r2, [pc, #480]	; (80033b0 <HAL_I2C_Init+0x280>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	0c9b      	lsrs	r3, r3, #18
 80031d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	4a6a      	ldr	r2, [pc, #424]	; (80033a4 <HAL_I2C_Init+0x274>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d802      	bhi.n	8003204 <HAL_I2C_Init+0xd4>
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	3301      	adds	r3, #1
 8003202:	e009      	b.n	8003218 <HAL_I2C_Init+0xe8>
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800320a:	fb02 f303 	mul.w	r3, r2, r3
 800320e:	4a69      	ldr	r2, [pc, #420]	; (80033b4 <HAL_I2C_Init+0x284>)
 8003210:	fba2 2303 	umull	r2, r3, r2, r3
 8003214:	099b      	lsrs	r3, r3, #6
 8003216:	3301      	adds	r3, #1
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	430b      	orrs	r3, r1
 800321e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800322a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	495c      	ldr	r1, [pc, #368]	; (80033a4 <HAL_I2C_Init+0x274>)
 8003234:	428b      	cmp	r3, r1
 8003236:	d819      	bhi.n	800326c <HAL_I2C_Init+0x13c>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1e59      	subs	r1, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	fbb1 f3f3 	udiv	r3, r1, r3
 8003246:	1c59      	adds	r1, r3, #1
 8003248:	f640 73fc 	movw	r3, #4092	; 0xffc
 800324c:	400b      	ands	r3, r1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <HAL_I2C_Init+0x138>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	1e59      	subs	r1, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003260:	3301      	adds	r3, #1
 8003262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003266:	e051      	b.n	800330c <HAL_I2C_Init+0x1dc>
 8003268:	2304      	movs	r3, #4
 800326a:	e04f      	b.n	800330c <HAL_I2C_Init+0x1dc>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d111      	bne.n	8003298 <HAL_I2C_Init+0x168>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	1e58      	subs	r0, r3, #1
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6859      	ldr	r1, [r3, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	440b      	add	r3, r1
 8003282:	fbb0 f3f3 	udiv	r3, r0, r3
 8003286:	3301      	adds	r3, #1
 8003288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800328c:	2b00      	cmp	r3, #0
 800328e:	bf0c      	ite	eq
 8003290:	2301      	moveq	r3, #1
 8003292:	2300      	movne	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	e012      	b.n	80032be <HAL_I2C_Init+0x18e>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	1e58      	subs	r0, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6859      	ldr	r1, [r3, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	0099      	lsls	r1, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ae:	3301      	adds	r3, #1
 80032b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf0c      	ite	eq
 80032b8:	2301      	moveq	r3, #1
 80032ba:	2300      	movne	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_I2C_Init+0x196>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e022      	b.n	800330c <HAL_I2C_Init+0x1dc>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10e      	bne.n	80032ec <HAL_I2C_Init+0x1bc>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1e58      	subs	r0, r3, #1
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6859      	ldr	r1, [r3, #4]
 80032d6:	460b      	mov	r3, r1
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	440b      	add	r3, r1
 80032dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80032e0:	3301      	adds	r3, #1
 80032e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ea:	e00f      	b.n	800330c <HAL_I2C_Init+0x1dc>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1e58      	subs	r0, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6859      	ldr	r1, [r3, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	0099      	lsls	r1, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003302:	3301      	adds	r3, #1
 8003304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003308:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	6809      	ldr	r1, [r1, #0]
 8003310:	4313      	orrs	r3, r2
 8003312:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69da      	ldr	r2, [r3, #28]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800333a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6911      	ldr	r1, [r2, #16]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	68d2      	ldr	r2, [r2, #12]
 8003346:	4311      	orrs	r1, r2
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	430b      	orrs	r3, r1
 800334e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695a      	ldr	r2, [r3, #20]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	000186a0 	.word	0x000186a0
 80033a8:	001e847f 	.word	0x001e847f
 80033ac:	003d08ff 	.word	0x003d08ff
 80033b0:	431bde83 	.word	0x431bde83
 80033b4:	10624dd3 	.word	0x10624dd3

080033b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af02      	add	r7, sp, #8
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	4608      	mov	r0, r1
 80033c2:	4611      	mov	r1, r2
 80033c4:	461a      	mov	r2, r3
 80033c6:	4603      	mov	r3, r0
 80033c8:	817b      	strh	r3, [r7, #10]
 80033ca:	460b      	mov	r3, r1
 80033cc:	813b      	strh	r3, [r7, #8]
 80033ce:	4613      	mov	r3, r2
 80033d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033d2:	f7ff f845 	bl	8002460 <HAL_GetTick>
 80033d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	f040 80d9 	bne.w	8003598 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	2319      	movs	r3, #25
 80033ec:	2201      	movs	r2, #1
 80033ee:	496d      	ldr	r1, [pc, #436]	; (80035a4 <HAL_I2C_Mem_Write+0x1ec>)
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f002 fa61 	bl	80058b8 <I2C_WaitOnFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80033fc:	2302      	movs	r3, #2
 80033fe:	e0cc      	b.n	800359a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_I2C_Mem_Write+0x56>
 800340a:	2302      	movs	r3, #2
 800340c:	e0c5      	b.n	800359a <HAL_I2C_Mem_Write+0x1e2>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b01      	cmp	r3, #1
 8003422:	d007      	beq.n	8003434 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003442:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2221      	movs	r2, #33	; 0x21
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2240      	movs	r2, #64	; 0x40
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a3a      	ldr	r2, [r7, #32]
 800345e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003464:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4a4d      	ldr	r2, [pc, #308]	; (80035a8 <HAL_I2C_Mem_Write+0x1f0>)
 8003474:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003476:	88f8      	ldrh	r0, [r7, #6]
 8003478:	893a      	ldrh	r2, [r7, #8]
 800347a:	8979      	ldrh	r1, [r7, #10]
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	9301      	str	r3, [sp, #4]
 8003480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	4603      	mov	r3, r0
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f001 fede 	bl	8005248 <I2C_RequestMemoryWrite>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d052      	beq.n	8003538 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e081      	b.n	800359a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f002 fae2 	bl	8005a64 <I2C_WaitOnTXEFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00d      	beq.n	80034c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d107      	bne.n	80034be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e06b      	b.n	800359a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	781a      	ldrb	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d11b      	bne.n	8003538 <HAL_I2C_Mem_Write+0x180>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003504:	2b00      	cmp	r3, #0
 8003506:	d017      	beq.n	8003538 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	781a      	ldrb	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1aa      	bne.n	8003496 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f002 face 	bl	8005ae6 <I2C_WaitOnBTFFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00d      	beq.n	800356c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	2b04      	cmp	r3, #4
 8003556:	d107      	bne.n	8003568 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003566:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e016      	b.n	800359a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800357a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	e000      	b.n	800359a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003598:	2302      	movs	r3, #2
  }
}
 800359a:	4618      	mov	r0, r3
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	00100002 	.word	0x00100002
 80035a8:	ffff0000 	.word	0xffff0000

080035ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b08c      	sub	sp, #48	; 0x30
 80035b0:	af02      	add	r7, sp, #8
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	4608      	mov	r0, r1
 80035b6:	4611      	mov	r1, r2
 80035b8:	461a      	mov	r2, r3
 80035ba:	4603      	mov	r3, r0
 80035bc:	817b      	strh	r3, [r7, #10]
 80035be:	460b      	mov	r3, r1
 80035c0:	813b      	strh	r3, [r7, #8]
 80035c2:	4613      	mov	r3, r2
 80035c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035c6:	f7fe ff4b 	bl	8002460 <HAL_GetTick>
 80035ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	f040 8208 	bne.w	80039ea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	2319      	movs	r3, #25
 80035e0:	2201      	movs	r2, #1
 80035e2:	497b      	ldr	r1, [pc, #492]	; (80037d0 <HAL_I2C_Mem_Read+0x224>)
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f002 f967 	bl	80058b8 <I2C_WaitOnFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80035f0:	2302      	movs	r3, #2
 80035f2:	e1fb      	b.n	80039ec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_I2C_Mem_Read+0x56>
 80035fe:	2302      	movs	r3, #2
 8003600:	e1f4      	b.n	80039ec <HAL_I2C_Mem_Read+0x440>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b01      	cmp	r3, #1
 8003616:	d007      	beq.n	8003628 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003636:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2222      	movs	r2, #34	; 0x22
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2240      	movs	r2, #64	; 0x40
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003652:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003658:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4a5b      	ldr	r2, [pc, #364]	; (80037d4 <HAL_I2C_Mem_Read+0x228>)
 8003668:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800366a:	88f8      	ldrh	r0, [r7, #6]
 800366c:	893a      	ldrh	r2, [r7, #8]
 800366e:	8979      	ldrh	r1, [r7, #10]
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	9301      	str	r3, [sp, #4]
 8003674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	4603      	mov	r3, r0
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f001 fe7a 	bl	8005374 <I2C_RequestMemoryRead>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e1b0      	b.n	80039ec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368e:	2b00      	cmp	r3, #0
 8003690:	d113      	bne.n	80036ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003692:	2300      	movs	r3, #0
 8003694:	623b      	str	r3, [r7, #32]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	623b      	str	r3, [r7, #32]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	623b      	str	r3, [r7, #32]
 80036a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	e184      	b.n	80039c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d11b      	bne.n	80036fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036d2:	2300      	movs	r3, #0
 80036d4:	61fb      	str	r3, [r7, #28]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	61fb      	str	r3, [r7, #28]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	61fb      	str	r3, [r7, #28]
 80036e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	e164      	b.n	80039c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d11b      	bne.n	800373a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003710:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003720:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003722:	2300      	movs	r3, #0
 8003724:	61bb      	str	r3, [r7, #24]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	61bb      	str	r3, [r7, #24]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	61bb      	str	r3, [r7, #24]
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	e144      	b.n	80039c4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	617b      	str	r3, [r7, #20]
 800374e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003750:	e138      	b.n	80039c4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003756:	2b03      	cmp	r3, #3
 8003758:	f200 80f1 	bhi.w	800393e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003760:	2b01      	cmp	r3, #1
 8003762:	d123      	bne.n	80037ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003766:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f002 fa2f 	bl	8005bcc <I2C_WaitOnRXNEFlagUntilTimeout>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e139      	b.n	80039ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691a      	ldr	r2, [r3, #16]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037aa:	e10b      	b.n	80039c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d14e      	bne.n	8003852 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ba:	2200      	movs	r2, #0
 80037bc:	4906      	ldr	r1, [pc, #24]	; (80037d8 <HAL_I2C_Mem_Read+0x22c>)
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f002 f87a 	bl	80058b8 <I2C_WaitOnFlagUntilTimeout>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d008      	beq.n	80037dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e10e      	b.n	80039ec <HAL_I2C_Mem_Read+0x440>
 80037ce:	bf00      	nop
 80037d0:	00100002 	.word	0x00100002
 80037d4:	ffff0000 	.word	0xffff0000
 80037d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003850:	e0b8      	b.n	80039c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003858:	2200      	movs	r2, #0
 800385a:	4966      	ldr	r1, [pc, #408]	; (80039f4 <HAL_I2C_Mem_Read+0x448>)
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f002 f82b 	bl	80058b8 <I2C_WaitOnFlagUntilTimeout>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0bf      	b.n	80039ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800387a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691a      	ldr	r2, [r3, #16]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b4:	2200      	movs	r2, #0
 80038b6:	494f      	ldr	r1, [pc, #316]	; (80039f4 <HAL_I2C_Mem_Read+0x448>)
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f001 fffd 	bl	80058b8 <I2C_WaitOnFlagUntilTimeout>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e091      	b.n	80039ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691a      	ldr	r2, [r3, #16]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003900:	b29b      	uxth	r3, r3
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	691a      	ldr	r2, [r3, #16]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	1c5a      	adds	r2, r3, #1
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	3b01      	subs	r3, #1
 8003936:	b29a      	uxth	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800393c:	e042      	b.n	80039c4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800393e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003940:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f002 f942 	bl	8005bcc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e04c      	b.n	80039ec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396e:	3b01      	subs	r3, #1
 8003970:	b29a      	uxth	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b04      	cmp	r3, #4
 8003990:	d118      	bne.n	80039c4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f47f aec2 	bne.w	8003752 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	e000      	b.n	80039ec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80039ea:	2302      	movs	r3, #2
  }
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3728      	adds	r7, #40	; 0x28
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	00010004 	.word	0x00010004

080039f8 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08a      	sub	sp, #40	; 0x28
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	4608      	mov	r0, r1
 8003a02:	4611      	mov	r1, r2
 8003a04:	461a      	mov	r2, r3
 8003a06:	4603      	mov	r3, r0
 8003a08:	817b      	strh	r3, [r7, #10]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	813b      	strh	r3, [r7, #8]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a16:	f7fe fd23 	bl	8002460 <HAL_GetTick>
 8003a1a:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b20      	cmp	r3, #32
 8003a26:	f040 813a 	bne.w	8003c9e <HAL_I2C_Mem_Write_DMA+0x2a6>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a2a:	4b9f      	ldr	r3, [pc, #636]	; (8003ca8 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	08db      	lsrs	r3, r3, #3
 8003a30:	4a9e      	ldr	r2, [pc, #632]	; (8003cac <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	0a1a      	lsrs	r2, r3, #8
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009a      	lsls	r2, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d116      	bne.n	8003a7e <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f043 0220 	orr.w	r2, r3, #32
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e110      	b.n	8003ca0 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d0db      	beq.n	8003a44 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_I2C_Mem_Write_DMA+0xa2>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e102      	b.n	8003ca0 <HAL_I2C_Mem_Write_DMA+0x2a8>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d007      	beq.n	8003ac0 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0201 	orr.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ace:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2221      	movs	r2, #33	; 0x21
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2240      	movs	r2, #64	; 0x40
 8003adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003af0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4a6c      	ldr	r2, [pc, #432]	; (8003cb0 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8003b00:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003b02:	897a      	ldrh	r2, [r7, #10]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003b08:	893a      	ldrh	r2, [r7, #8]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003b0e:	88fa      	ldrh	r2, [r7, #6]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 80a9 	beq.w	8003c76 <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d02a      	beq.n	8003b82 <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b30:	4a60      	ldr	r2, [pc, #384]	; (8003cb4 <HAL_I2C_Mem_Write_DMA+0x2bc>)
 8003b32:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b38:	4a5f      	ldr	r2, [pc, #380]	; (8003cb8 <HAL_I2C_Mem_Write_DMA+0x2c0>)
 8003b3a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b40:	2200      	movs	r2, #0
 8003b42:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b48:	2200      	movs	r2, #0
 8003b4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b50:	2200      	movs	r2, #0
 8003b52:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b58:	2200      	movs	r2, #0
 8003b5a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	4619      	mov	r1, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	3310      	adds	r3, #16
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b72:	f7fe fe41 	bl	80027f8 <HAL_DMA_Start_IT>
 8003b76:	4603      	mov	r3, r0
 8003b78:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003b7a:	7efb      	ldrb	r3, [r7, #27]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d166      	bne.n	8003c4e <HAL_I2C_Mem_Write_DMA+0x256>
 8003b80:	e013      	b.n	8003baa <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e07a      	b.n	8003ca0 <HAL_I2C_Mem_Write_DMA+0x2a8>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003baa:	88f8      	ldrh	r0, [r7, #6]
 8003bac:	893a      	ldrh	r2, [r7, #8]
 8003bae:	8979      	ldrh	r1, [r7, #10]
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	9301      	str	r3, [sp, #4]
 8003bb4:	2323      	movs	r3, #35	; 0x23
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	4603      	mov	r3, r0
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f001 fb44 	bl	8005248 <I2C_RequestMemoryWrite>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d022      	beq.n	8003c0c <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fe fe6c 	bl	80028a8 <HAL_DMA_Abort_IT>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd8:	2200      	movs	r2, #0
 8003bda:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bea:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0201 	bic.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e049      	b.n	8003ca0 <HAL_I2C_Mem_Write_DMA+0x2a8>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c38:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c48:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	e028      	b.n	8003ca0 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f043 0210 	orr.w	r2, r3, #16
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e014      	b.n	8003ca0 <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <HAL_I2C_Mem_Write_DMA+0x2a8>
    }
  }
  else
  {
    return HAL_BUSY;
 8003c9e:	2302      	movs	r3, #2
  }
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3720      	adds	r7, #32
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	20000004 	.word	0x20000004
 8003cac:	14f8b589 	.word	0x14f8b589
 8003cb0:	ffff0000 	.word	0xffff0000
 8003cb4:	08005545 	.word	0x08005545
 8003cb8:	080056ef 	.word	0x080056ef

08003cbc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cdc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
 8003ce8:	2b10      	cmp	r3, #16
 8003cea:	d003      	beq.n	8003cf4 <HAL_I2C_EV_IRQHandler+0x38>
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
 8003cee:	2b40      	cmp	r3, #64	; 0x40
 8003cf0:	f040 80c1 	bne.w	8003e76 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10d      	bne.n	8003d2a <HAL_I2C_EV_IRQHandler+0x6e>
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003d14:	d003      	beq.n	8003d1e <HAL_I2C_EV_IRQHandler+0x62>
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003d1c:	d101      	bne.n	8003d22 <HAL_I2C_EV_IRQHandler+0x66>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <HAL_I2C_EV_IRQHandler+0x68>
 8003d22:	2300      	movs	r3, #0
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	f000 8132 	beq.w	8003f8e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00c      	beq.n	8003d4e <HAL_I2C_EV_IRQHandler+0x92>
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	0a5b      	lsrs	r3, r3, #9
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d006      	beq.n	8003d4e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f001 ffc8 	bl	8005cd6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 fcd2 	bl	80046f0 <I2C_Master_SB>
 8003d4c:	e092      	b.n	8003e74 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	08db      	lsrs	r3, r3, #3
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d009      	beq.n	8003d6e <HAL_I2C_EV_IRQHandler+0xb2>
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	0a5b      	lsrs	r3, r3, #9
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fd48 	bl	80047fc <I2C_Master_ADD10>
 8003d6c:	e082      	b.n	8003e74 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	085b      	lsrs	r3, r3, #1
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d009      	beq.n	8003d8e <HAL_I2C_EV_IRQHandler+0xd2>
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	0a5b      	lsrs	r3, r3, #9
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 fd62 	bl	8004850 <I2C_Master_ADDR>
 8003d8c:	e072      	b.n	8003e74 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	089b      	lsrs	r3, r3, #2
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d03b      	beq.n	8003e12 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003da8:	f000 80f3 	beq.w	8003f92 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	09db      	lsrs	r3, r3, #7
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00f      	beq.n	8003dd8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	0a9b      	lsrs	r3, r3, #10
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d009      	beq.n	8003dd8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	089b      	lsrs	r3, r3, #2
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d103      	bne.n	8003dd8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f94c 	bl	800406e <I2C_MasterTransmit_TXE>
 8003dd6:	e04d      	b.n	8003e74 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	089b      	lsrs	r3, r3, #2
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80d6 	beq.w	8003f92 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	0a5b      	lsrs	r3, r3, #9
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80cf 	beq.w	8003f92 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003df4:	7bbb      	ldrb	r3, [r7, #14]
 8003df6:	2b21      	cmp	r3, #33	; 0x21
 8003df8:	d103      	bne.n	8003e02 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f9d3 	bl	80041a6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e00:	e0c7      	b.n	8003f92 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
 8003e04:	2b40      	cmp	r3, #64	; 0x40
 8003e06:	f040 80c4 	bne.w	8003f92 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 fa41 	bl	8004292 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e10:	e0bf      	b.n	8003f92 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e20:	f000 80b7 	beq.w	8003f92 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	099b      	lsrs	r3, r3, #6
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00f      	beq.n	8003e50 <HAL_I2C_EV_IRQHandler+0x194>
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	0a9b      	lsrs	r3, r3, #10
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d009      	beq.n	8003e50 <HAL_I2C_EV_IRQHandler+0x194>
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	089b      	lsrs	r3, r3, #2
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d103      	bne.n	8003e50 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 fab6 	bl	80043ba <I2C_MasterReceive_RXNE>
 8003e4e:	e011      	b.n	8003e74 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	089b      	lsrs	r3, r3, #2
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 809a 	beq.w	8003f92 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	0a5b      	lsrs	r3, r3, #9
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 8093 	beq.w	8003f92 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fb55 	bl	800451c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e72:	e08e      	b.n	8003f92 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003e74:	e08d      	b.n	8003f92 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d004      	beq.n	8003e88 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	61fb      	str	r3, [r7, #28]
 8003e86:	e007      	b.n	8003e98 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	085b      	lsrs	r3, r3, #1
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d012      	beq.n	8003eca <HAL_I2C_EV_IRQHandler+0x20e>
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	0a5b      	lsrs	r3, r3, #9
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00c      	beq.n	8003eca <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003ec0:	69b9      	ldr	r1, [r7, #24]
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 ff13 	bl	8004cee <I2C_Slave_ADDR>
 8003ec8:	e066      	b.n	8003f98 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	091b      	lsrs	r3, r3, #4
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d009      	beq.n	8003eea <HAL_I2C_EV_IRQHandler+0x22e>
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	0a5b      	lsrs	r3, r3, #9
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 ff4e 	bl	8004d84 <I2C_Slave_STOPF>
 8003ee8:	e056      	b.n	8003f98 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003eea:	7bbb      	ldrb	r3, [r7, #14]
 8003eec:	2b21      	cmp	r3, #33	; 0x21
 8003eee:	d002      	beq.n	8003ef6 <HAL_I2C_EV_IRQHandler+0x23a>
 8003ef0:	7bbb      	ldrb	r3, [r7, #14]
 8003ef2:	2b29      	cmp	r3, #41	; 0x29
 8003ef4:	d125      	bne.n	8003f42 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	09db      	lsrs	r3, r3, #7
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00f      	beq.n	8003f22 <HAL_I2C_EV_IRQHandler+0x266>
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	0a9b      	lsrs	r3, r3, #10
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d009      	beq.n	8003f22 <HAL_I2C_EV_IRQHandler+0x266>
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	089b      	lsrs	r3, r3, #2
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d103      	bne.n	8003f22 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 fe29 	bl	8004b72 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f20:	e039      	b.n	8003f96 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	089b      	lsrs	r3, r3, #2
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d033      	beq.n	8003f96 <HAL_I2C_EV_IRQHandler+0x2da>
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	0a5b      	lsrs	r3, r3, #9
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d02d      	beq.n	8003f96 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fe56 	bl	8004bec <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f40:	e029      	b.n	8003f96 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	099b      	lsrs	r3, r3, #6
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00f      	beq.n	8003f6e <HAL_I2C_EV_IRQHandler+0x2b2>
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	0a9b      	lsrs	r3, r3, #10
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d009      	beq.n	8003f6e <HAL_I2C_EV_IRQHandler+0x2b2>
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	089b      	lsrs	r3, r3, #2
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d103      	bne.n	8003f6e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fe61 	bl	8004c2e <I2C_SlaveReceive_RXNE>
 8003f6c:	e014      	b.n	8003f98 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	089b      	lsrs	r3, r3, #2
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00e      	beq.n	8003f98 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	0a5b      	lsrs	r3, r3, #9
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d008      	beq.n	8003f98 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fe8f 	bl	8004caa <I2C_SlaveReceive_BTF>
 8003f8c:	e004      	b.n	8003f98 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003f8e:	bf00      	nop
 8003f90:	e002      	b.n	8003f98 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f92:	bf00      	nop
 8003f94:	e000      	b.n	8003f98 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f96:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003f98:	3720      	adds	r7, #32
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	70fb      	strb	r3, [r7, #3]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b084      	sub	sp, #16
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004084:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004090:	2b00      	cmp	r3, #0
 8004092:	d150      	bne.n	8004136 <I2C_MasterTransmit_TXE+0xc8>
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	2b21      	cmp	r3, #33	; 0x21
 8004098:	d14d      	bne.n	8004136 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2b08      	cmp	r3, #8
 800409e:	d01d      	beq.n	80040dc <I2C_MasterTransmit_TXE+0x6e>
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2b20      	cmp	r3, #32
 80040a4:	d01a      	beq.n	80040dc <I2C_MasterTransmit_TXE+0x6e>
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040ac:	d016      	beq.n	80040dc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040bc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2211      	movs	r2, #17
 80040c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff ff62 	bl	8003f9e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040da:	e060      	b.n	800419e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040ea:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040fa:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b40      	cmp	r3, #64	; 0x40
 8004114:	d107      	bne.n	8004126 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff ff7d 	bl	800401e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004124:	e03b      	b.n	800419e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff ff35 	bl	8003f9e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004134:	e033      	b.n	800419e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004136:	7bfb      	ldrb	r3, [r7, #15]
 8004138:	2b21      	cmp	r3, #33	; 0x21
 800413a:	d005      	beq.n	8004148 <I2C_MasterTransmit_TXE+0xda>
 800413c:	7bbb      	ldrb	r3, [r7, #14]
 800413e:	2b40      	cmp	r3, #64	; 0x40
 8004140:	d12d      	bne.n	800419e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	2b22      	cmp	r3, #34	; 0x22
 8004146:	d12a      	bne.n	800419e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d108      	bne.n	8004164 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004160:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004162:	e01c      	b.n	800419e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b40      	cmp	r3, #64	; 0x40
 800416e:	d103      	bne.n	8004178 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f88e 	bl	8004292 <I2C_MemoryTransmit_TXE_BTF>
}
 8004176:	e012      	b.n	800419e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	781a      	ldrb	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800419c:	e7ff      	b.n	800419e <I2C_MasterTransmit_TXE+0x130>
 800419e:	bf00      	nop
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b084      	sub	sp, #16
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b21      	cmp	r3, #33	; 0x21
 80041be:	d164      	bne.n	800428a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d012      	beq.n	80041f0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	781a      	ldrb	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	1c5a      	adds	r2, r3, #1
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80041ee:	e04c      	b.n	800428a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d01d      	beq.n	8004232 <I2C_MasterTransmit_BTF+0x8c>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2b20      	cmp	r3, #32
 80041fa:	d01a      	beq.n	8004232 <I2C_MasterTransmit_BTF+0x8c>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004202:	d016      	beq.n	8004232 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004212:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2211      	movs	r2, #17
 8004218:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2220      	movs	r2, #32
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7ff feb7 	bl	8003f9e <HAL_I2C_MasterTxCpltCallback>
}
 8004230:	e02b      	b.n	800428a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004240:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004250:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b40      	cmp	r3, #64	; 0x40
 800426a:	d107      	bne.n	800427c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7ff fed2 	bl	800401e <HAL_I2C_MemTxCpltCallback>
}
 800427a:	e006      	b.n	800428a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7ff fe8a 	bl	8003f9e <HAL_I2C_MasterTxCpltCallback>
}
 800428a:	bf00      	nop
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b084      	sub	sp, #16
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d11d      	bne.n	80042e6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d10b      	bne.n	80042ca <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c2:	1c9a      	adds	r2, r3, #2
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80042c8:	e073      	b.n	80043b2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	121b      	asrs	r3, r3, #8
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80042e4:	e065      	b.n	80043b2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d10b      	bne.n	8004306 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004304:	e055      	b.n	80043b2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800430a:	2b02      	cmp	r3, #2
 800430c:	d151      	bne.n	80043b2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	2b22      	cmp	r3, #34	; 0x22
 8004312:	d10d      	bne.n	8004330 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004322:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800432e:	e040      	b.n	80043b2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d015      	beq.n	8004366 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800433a:	7bfb      	ldrb	r3, [r7, #15]
 800433c:	2b21      	cmp	r3, #33	; 0x21
 800433e:	d112      	bne.n	8004366 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	781a      	ldrb	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	1c5a      	adds	r2, r3, #1
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435a:	b29b      	uxth	r3, r3
 800435c:	3b01      	subs	r3, #1
 800435e:	b29a      	uxth	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004364:	e025      	b.n	80043b2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436a:	b29b      	uxth	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d120      	bne.n	80043b2 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	2b21      	cmp	r3, #33	; 0x21
 8004374:	d11d      	bne.n	80043b2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004384:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004394:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7ff fe36 	bl	800401e <HAL_I2C_MemTxCpltCallback>
}
 80043b2:	bf00      	nop
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b084      	sub	sp, #16
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b22      	cmp	r3, #34	; 0x22
 80043cc:	f040 80a2 	bne.w	8004514 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b03      	cmp	r3, #3
 80043dc:	d921      	bls.n	8004422 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	691a      	ldr	r2, [r3, #16]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29a      	uxth	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b03      	cmp	r3, #3
 800440c:	f040 8082 	bne.w	8004514 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800441e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004420:	e078      	b.n	8004514 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	2b02      	cmp	r3, #2
 8004428:	d074      	beq.n	8004514 <I2C_MasterReceive_RXNE+0x15a>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d002      	beq.n	8004436 <I2C_MasterReceive_RXNE+0x7c>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d16e      	bne.n	8004514 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f001 fb96 	bl	8005b68 <I2C_WaitOnSTOPRequestThroughIT>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d142      	bne.n	80044c8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004450:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004460:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447e:	b29b      	uxth	r3, r3
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2220      	movs	r2, #32
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b40      	cmp	r3, #64	; 0x40
 800449a:	d10a      	bne.n	80044b2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7ff fdc1 	bl	8004032 <HAL_I2C_MemRxCpltCallback>
}
 80044b0:	e030      	b.n	8004514 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2212      	movs	r2, #18
 80044be:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7ff fd76 	bl	8003fb2 <HAL_I2C_MasterRxCpltCallback>
}
 80044c6:	e025      	b.n	8004514 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044d6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691a      	ldr	r2, [r3, #16]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	1c5a      	adds	r2, r3, #1
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7ff fd99 	bl	8004046 <HAL_I2C_ErrorCallback>
}
 8004514:	bf00      	nop
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452e:	b29b      	uxth	r3, r3
 8004530:	2b04      	cmp	r3, #4
 8004532:	d11b      	bne.n	800456c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004542:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691a      	ldr	r2, [r3, #16]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004560:	b29b      	uxth	r3, r3
 8004562:	3b01      	subs	r3, #1
 8004564:	b29a      	uxth	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800456a:	e0bd      	b.n	80046e8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b03      	cmp	r3, #3
 8004574:	d129      	bne.n	80045ca <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004584:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b04      	cmp	r3, #4
 800458a:	d00a      	beq.n	80045a2 <I2C_MasterReceive_BTF+0x86>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d007      	beq.n	80045a2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045c8:	e08e      	b.n	80046e8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d176      	bne.n	80046c2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d002      	beq.n	80045e0 <I2C_MasterReceive_BTF+0xc4>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2b10      	cmp	r3, #16
 80045de:	d108      	bne.n	80045f2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	e019      	b.n	8004626 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d002      	beq.n	80045fe <I2C_MasterReceive_BTF+0xe2>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d108      	bne.n	8004610 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	e00a      	b.n	8004626 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2b10      	cmp	r3, #16
 8004614:	d007      	beq.n	8004626 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004624:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004642:	b29b      	uxth	r3, r3
 8004644:	3b01      	subs	r3, #1
 8004646:	b29a      	uxth	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691a      	ldr	r2, [r3, #16]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004680:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2220      	movs	r2, #32
 8004686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b40      	cmp	r3, #64	; 0x40
 8004694:	d10a      	bne.n	80046ac <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff fcc4 	bl	8004032 <HAL_I2C_MemRxCpltCallback>
}
 80046aa:	e01d      	b.n	80046e8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2212      	movs	r2, #18
 80046b8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff fc79 	bl	8003fb2 <HAL_I2C_MasterRxCpltCallback>
}
 80046c0:	e012      	b.n	80046e8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	691a      	ldr	r2, [r3, #16]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80046e8:	bf00      	nop
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b40      	cmp	r3, #64	; 0x40
 8004702:	d117      	bne.n	8004734 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004708:	2b00      	cmp	r3, #0
 800470a:	d109      	bne.n	8004720 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004710:	b2db      	uxtb	r3, r3
 8004712:	461a      	mov	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800471c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800471e:	e067      	b.n	80047f0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004724:	b2db      	uxtb	r3, r3
 8004726:	f043 0301 	orr.w	r3, r3, #1
 800472a:	b2da      	uxtb	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	611a      	str	r2, [r3, #16]
}
 8004732:	e05d      	b.n	80047f0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800473c:	d133      	bne.n	80047a6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b21      	cmp	r3, #33	; 0x21
 8004748:	d109      	bne.n	800475e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474e:	b2db      	uxtb	r3, r3
 8004750:	461a      	mov	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800475a:	611a      	str	r2, [r3, #16]
 800475c:	e008      	b.n	8004770 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004762:	b2db      	uxtb	r3, r3
 8004764:	f043 0301 	orr.w	r3, r3, #1
 8004768:	b2da      	uxtb	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004774:	2b00      	cmp	r3, #0
 8004776:	d004      	beq.n	8004782 <I2C_Master_SB+0x92>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477e:	2b00      	cmp	r3, #0
 8004780:	d108      	bne.n	8004794 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004786:	2b00      	cmp	r3, #0
 8004788:	d032      	beq.n	80047f0 <I2C_Master_SB+0x100>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004790:	2b00      	cmp	r3, #0
 8004792:	d02d      	beq.n	80047f0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047a2:	605a      	str	r2, [r3, #4]
}
 80047a4:	e024      	b.n	80047f0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10e      	bne.n	80047cc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	11db      	asrs	r3, r3, #7
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f003 0306 	and.w	r3, r3, #6
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	f063 030f 	orn	r3, r3, #15
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	611a      	str	r2, [r3, #16]
}
 80047ca:	e011      	b.n	80047f0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d10d      	bne.n	80047f0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d8:	b29b      	uxth	r3, r3
 80047da:	11db      	asrs	r3, r3, #7
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	f003 0306 	and.w	r3, r3, #6
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	f063 030e 	orn	r3, r3, #14
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	611a      	str	r2, [r3, #16]
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004808:	b2da      	uxtb	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004814:	2b00      	cmp	r3, #0
 8004816:	d004      	beq.n	8004822 <I2C_Master_ADD10+0x26>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481e:	2b00      	cmp	r3, #0
 8004820:	d108      	bne.n	8004834 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00c      	beq.n	8004844 <I2C_Master_ADD10+0x48>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004830:	2b00      	cmp	r3, #0
 8004832:	d007      	beq.n	8004844 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004842:	605a      	str	r2, [r3, #4]
  }
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004850:	b480      	push	{r7}
 8004852:	b091      	sub	sp, #68	; 0x44
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800485e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004866:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b22      	cmp	r3, #34	; 0x22
 8004878:	f040 8169 	bne.w	8004b4e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10f      	bne.n	80048a4 <I2C_Master_ADDR+0x54>
 8004884:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004888:	2b40      	cmp	r3, #64	; 0x40
 800488a:	d10b      	bne.n	80048a4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800488c:	2300      	movs	r3, #0
 800488e:	633b      	str	r3, [r7, #48]	; 0x30
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	633b      	str	r3, [r7, #48]	; 0x30
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	633b      	str	r3, [r7, #48]	; 0x30
 80048a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a2:	e160      	b.n	8004b66 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d11d      	bne.n	80048e8 <I2C_Master_ADDR+0x98>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048b4:	d118      	bne.n	80048e8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048b6:	2300      	movs	r3, #0
 80048b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048da:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	651a      	str	r2, [r3, #80]	; 0x50
 80048e6:	e13e      	b.n	8004b66 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d113      	bne.n	800491a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048f2:	2300      	movs	r3, #0
 80048f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	62bb      	str	r3, [r7, #40]	; 0x28
 8004906:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	e115      	b.n	8004b46 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491e:	b29b      	uxth	r3, r3
 8004920:	2b01      	cmp	r3, #1
 8004922:	f040 808a 	bne.w	8004a3a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004928:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800492c:	d137      	bne.n	800499e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800493c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800494c:	d113      	bne.n	8004976 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800495c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800495e:	2300      	movs	r3, #0
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	627b      	str	r3, [r7, #36]	; 0x24
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	e0e7      	b.n	8004b46 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004976:	2300      	movs	r3, #0
 8004978:	623b      	str	r3, [r7, #32]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	623b      	str	r3, [r7, #32]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	623b      	str	r3, [r7, #32]
 800498a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	e0d3      	b.n	8004b46 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d02e      	beq.n	8004a02 <I2C_Master_ADDR+0x1b2>
 80049a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	d02b      	beq.n	8004a02 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80049aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ac:	2b12      	cmp	r3, #18
 80049ae:	d102      	bne.n	80049b6 <I2C_Master_ADDR+0x166>
 80049b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d125      	bne.n	8004a02 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80049b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d00e      	beq.n	80049da <I2C_Master_ADDR+0x18a>
 80049bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d00b      	beq.n	80049da <I2C_Master_ADDR+0x18a>
 80049c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c4:	2b10      	cmp	r3, #16
 80049c6:	d008      	beq.n	80049da <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	e007      	b.n	80049ea <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049e8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ea:	2300      	movs	r3, #0
 80049ec:	61fb      	str	r3, [r7, #28]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	61fb      	str	r3, [r7, #28]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	61fb      	str	r3, [r7, #28]
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	e0a1      	b.n	8004b46 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a10:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a12:	2300      	movs	r3, #0
 8004a14:	61bb      	str	r3, [r7, #24]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	61bb      	str	r3, [r7, #24]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	61bb      	str	r3, [r7, #24]
 8004a26:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	e085      	b.n	8004b46 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d14d      	bne.n	8004ae0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d016      	beq.n	8004a78 <I2C_Master_ADDR+0x228>
 8004a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d013      	beq.n	8004a78 <I2C_Master_ADDR+0x228>
 8004a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a52:	2b10      	cmp	r3, #16
 8004a54:	d010      	beq.n	8004a78 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a64:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	e007      	b.n	8004a88 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a86:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a96:	d117      	bne.n	8004ac8 <I2C_Master_ADDR+0x278>
 8004a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a9e:	d00b      	beq.n	8004ab8 <I2C_Master_ADDR+0x268>
 8004aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d008      	beq.n	8004ab8 <I2C_Master_ADDR+0x268>
 8004aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d005      	beq.n	8004ab8 <I2C_Master_ADDR+0x268>
 8004aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aae:	2b10      	cmp	r3, #16
 8004ab0:	d002      	beq.n	8004ab8 <I2C_Master_ADDR+0x268>
 8004ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab4:	2b20      	cmp	r3, #32
 8004ab6:	d107      	bne.n	8004ac8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ac6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	e032      	b.n	8004b46 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004aee:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004afa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004afe:	d117      	bne.n	8004b30 <I2C_Master_ADDR+0x2e0>
 8004b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b06:	d00b      	beq.n	8004b20 <I2C_Master_ADDR+0x2d0>
 8004b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d008      	beq.n	8004b20 <I2C_Master_ADDR+0x2d0>
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	d005      	beq.n	8004b20 <I2C_Master_ADDR+0x2d0>
 8004b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b16:	2b10      	cmp	r3, #16
 8004b18:	d002      	beq.n	8004b20 <I2C_Master_ADDR+0x2d0>
 8004b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1c:	2b20      	cmp	r3, #32
 8004b1e:	d107      	bne.n	8004b30 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b2e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b30:	2300      	movs	r3, #0
 8004b32:	613b      	str	r3, [r7, #16]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	613b      	str	r3, [r7, #16]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	613b      	str	r3, [r7, #16]
 8004b44:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004b4c:	e00b      	b.n	8004b66 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	60fb      	str	r3, [r7, #12]
 8004b62:	68fb      	ldr	r3, [r7, #12]
}
 8004b64:	e7ff      	b.n	8004b66 <I2C_Master_ADDR+0x316>
 8004b66:	bf00      	nop
 8004b68:	3744      	adds	r7, #68	; 0x44
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b084      	sub	sp, #16
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b80:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d02b      	beq.n	8004be4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	781a      	ldrb	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d114      	bne.n	8004be4 <I2C_SlaveTransmit_TXE+0x72>
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
 8004bbc:	2b29      	cmp	r3, #41	; 0x29
 8004bbe:	d111      	bne.n	8004be4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bce:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2221      	movs	r2, #33	; 0x21
 8004bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2228      	movs	r2, #40	; 0x28
 8004bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7ff f9f1 	bl	8003fc6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004be4:	bf00      	nop
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d011      	beq.n	8004c22 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	781a      	ldrb	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b084      	sub	sp, #16
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c3c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d02c      	beq.n	8004ca2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	691a      	ldr	r2, [r3, #16]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	3b01      	subs	r3, #1
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d114      	bne.n	8004ca2 <I2C_SlaveReceive_RXNE+0x74>
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
 8004c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8004c7c:	d111      	bne.n	8004ca2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c8c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2222      	movs	r2, #34	; 0x22
 8004c92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2228      	movs	r2, #40	; 0x28
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7ff f99c 	bl	8003fda <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004ca2:	bf00      	nop
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d012      	beq.n	8004ce2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	691a      	ldr	r2, [r3, #16]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b084      	sub	sp, #16
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
 8004cf6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d08:	2b28      	cmp	r3, #40	; 0x28
 8004d0a:	d127      	bne.n	8004d5c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d1a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	089b      	lsrs	r3, r3, #2
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	09db      	lsrs	r3, r3, #7
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d103      	bne.n	8004d40 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	81bb      	strh	r3, [r7, #12]
 8004d3e:	e002      	b.n	8004d46 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004d4e:	89ba      	ldrh	r2, [r7, #12]
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
 8004d52:	4619      	mov	r1, r3
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7ff f94a 	bl	8003fee <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d5a:	e00e      	b.n	8004d7a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60bb      	str	r3, [r7, #8]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	60bb      	str	r3, [r7, #8]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	60bb      	str	r3, [r7, #8]
 8004d70:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004d7a:	bf00      	nop
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
	...

08004d84 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d92:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004da2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004da4:	2300      	movs	r3, #0
 8004da6:	60bb      	str	r3, [r7, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	60bb      	str	r3, [r7, #8]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0201 	orr.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004de0:	d172      	bne.n	8004ec8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
 8004de4:	2b22      	cmp	r3, #34	; 0x22
 8004de6:	d002      	beq.n	8004dee <I2C_Slave_STOPF+0x6a>
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
 8004dea:	2b2a      	cmp	r3, #42	; 0x2a
 8004dec:	d135      	bne.n	8004e5a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d005      	beq.n	8004e12 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	f043 0204 	orr.w	r2, r3, #4
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e20:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fd feea 	bl	8002c00 <HAL_DMA_GetState>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d049      	beq.n	8004ec6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e36:	4a69      	ldr	r2, [pc, #420]	; (8004fdc <I2C_Slave_STOPF+0x258>)
 8004e38:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fd fd32 	bl	80028a8 <HAL_DMA_Abort_IT>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d03d      	beq.n	8004ec6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e54:	4610      	mov	r0, r2
 8004e56:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e58:	e035      	b.n	8004ec6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	f043 0204 	orr.w	r2, r3, #4
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e8c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fd feb4 	bl	8002c00 <HAL_DMA_GetState>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d014      	beq.n	8004ec8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea2:	4a4e      	ldr	r2, [pc, #312]	; (8004fdc <I2C_Slave_STOPF+0x258>)
 8004ea4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fd fcfc 	bl	80028a8 <HAL_DMA_Abort_IT>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d008      	beq.n	8004ec8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	4798      	blx	r3
 8004ec4:	e000      	b.n	8004ec8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ec6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d03e      	beq.n	8004f50 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	d112      	bne.n	8004f06 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	691a      	ldr	r2, [r3, #16]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f10:	2b40      	cmp	r3, #64	; 0x40
 8004f12:	d112      	bne.n	8004f3a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d005      	beq.n	8004f50 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f48:	f043 0204 	orr.w	r2, r3, #4
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f843 	bl	8004fe4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004f5e:	e039      	b.n	8004fd4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
 8004f62:	2b2a      	cmp	r3, #42	; 0x2a
 8004f64:	d109      	bne.n	8004f7a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2228      	movs	r2, #40	; 0x28
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7ff f830 	bl	8003fda <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b28      	cmp	r3, #40	; 0x28
 8004f84:	d111      	bne.n	8004faa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a15      	ldr	r2, [pc, #84]	; (8004fe0 <I2C_Slave_STOPF+0x25c>)
 8004f8a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2220      	movs	r2, #32
 8004f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7ff f831 	bl	800400a <HAL_I2C_ListenCpltCallback>
}
 8004fa8:	e014      	b.n	8004fd4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fae:	2b22      	cmp	r3, #34	; 0x22
 8004fb0:	d002      	beq.n	8004fb8 <I2C_Slave_STOPF+0x234>
 8004fb2:	7bfb      	ldrb	r3, [r7, #15]
 8004fb4:	2b22      	cmp	r3, #34	; 0x22
 8004fb6:	d10d      	bne.n	8004fd4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7ff f803 	bl	8003fda <HAL_I2C_SlaveRxCpltCallback>
}
 8004fd4:	bf00      	nop
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	08005769 	.word	0x08005769
 8004fe0:	ffff0000 	.word	0xffff0000

08004fe4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ffa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004ffc:	7bbb      	ldrb	r3, [r7, #14]
 8004ffe:	2b10      	cmp	r3, #16
 8005000:	d002      	beq.n	8005008 <I2C_ITError+0x24>
 8005002:	7bbb      	ldrb	r3, [r7, #14]
 8005004:	2b40      	cmp	r3, #64	; 0x40
 8005006:	d10a      	bne.n	800501e <I2C_ITError+0x3a>
 8005008:	7bfb      	ldrb	r3, [r7, #15]
 800500a:	2b22      	cmp	r3, #34	; 0x22
 800500c:	d107      	bne.n	800501e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800501c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800501e:	7bfb      	ldrb	r3, [r7, #15]
 8005020:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005024:	2b28      	cmp	r3, #40	; 0x28
 8005026:	d107      	bne.n	8005038 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2228      	movs	r2, #40	; 0x28
 8005032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005036:	e015      	b.n	8005064 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005042:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005046:	d00a      	beq.n	800505e <I2C_ITError+0x7a>
 8005048:	7bfb      	ldrb	r3, [r7, #15]
 800504a:	2b60      	cmp	r3, #96	; 0x60
 800504c:	d007      	beq.n	800505e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800506e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005072:	d162      	bne.n	800513a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005082:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005088:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b01      	cmp	r3, #1
 8005090:	d020      	beq.n	80050d4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005096:	4a6a      	ldr	r2, [pc, #424]	; (8005240 <I2C_ITError+0x25c>)
 8005098:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fd fc02 	bl	80028a8 <HAL_DMA_Abort_IT>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 8089 	beq.w	80051be <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0201 	bic.w	r2, r2, #1
 80050ba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050ce:	4610      	mov	r0, r2
 80050d0:	4798      	blx	r3
 80050d2:	e074      	b.n	80051be <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d8:	4a59      	ldr	r2, [pc, #356]	; (8005240 <I2C_ITError+0x25c>)
 80050da:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7fd fbe1 	bl	80028a8 <HAL_DMA_Abort_IT>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d068      	beq.n	80051be <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f6:	2b40      	cmp	r3, #64	; 0x40
 80050f8:	d10b      	bne.n	8005112 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	691a      	ldr	r2, [r3, #16]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0201 	bic.w	r2, r2, #1
 8005120:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2220      	movs	r2, #32
 8005126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005134:	4610      	mov	r0, r2
 8005136:	4798      	blx	r3
 8005138:	e041      	b.n	80051be <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b60      	cmp	r3, #96	; 0x60
 8005144:	d125      	bne.n	8005192 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2220      	movs	r2, #32
 800514a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515e:	2b40      	cmp	r3, #64	; 0x40
 8005160:	d10b      	bne.n	800517a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	691a      	ldr	r2, [r3, #16]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	b2d2      	uxtb	r2, r2
 800516e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0201 	bic.w	r2, r2, #1
 8005188:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fe ff65 	bl	800405a <HAL_I2C_AbortCpltCallback>
 8005190:	e015      	b.n	80051be <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519c:	2b40      	cmp	r3, #64	; 0x40
 800519e:	d10b      	bne.n	80051b8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691a      	ldr	r2, [r3, #16]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f7fe ff44 	bl	8004046 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10e      	bne.n	80051ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d109      	bne.n	80051ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d104      	bne.n	80051ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d007      	beq.n	80051fc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051fa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005202:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b04      	cmp	r3, #4
 800520e:	d113      	bne.n	8005238 <I2C_ITError+0x254>
 8005210:	7bfb      	ldrb	r3, [r7, #15]
 8005212:	2b28      	cmp	r3, #40	; 0x28
 8005214:	d110      	bne.n	8005238 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a0a      	ldr	r2, [pc, #40]	; (8005244 <I2C_ITError+0x260>)
 800521a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2220      	movs	r2, #32
 8005226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fe fee9 	bl	800400a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005238:	bf00      	nop
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	08005769 	.word	0x08005769
 8005244:	ffff0000 	.word	0xffff0000

08005248 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b088      	sub	sp, #32
 800524c:	af02      	add	r7, sp, #8
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	4608      	mov	r0, r1
 8005252:	4611      	mov	r1, r2
 8005254:	461a      	mov	r2, r3
 8005256:	4603      	mov	r3, r0
 8005258:	817b      	strh	r3, [r7, #10]
 800525a:	460b      	mov	r3, r1
 800525c:	813b      	strh	r3, [r7, #8]
 800525e:	4613      	mov	r3, r2
 8005260:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005270:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	2200      	movs	r2, #0
 800527a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 fb1a 	bl	80058b8 <I2C_WaitOnFlagUntilTimeout>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00d      	beq.n	80052a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005298:	d103      	bne.n	80052a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e05f      	b.n	8005366 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052a6:	897b      	ldrh	r3, [r7, #10]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	461a      	mov	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	6a3a      	ldr	r2, [r7, #32]
 80052ba:	492d      	ldr	r1, [pc, #180]	; (8005370 <I2C_RequestMemoryWrite+0x128>)
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 fb52 	bl	8005966 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d001      	beq.n	80052cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e04c      	b.n	8005366 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	617b      	str	r3, [r7, #20]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e4:	6a39      	ldr	r1, [r7, #32]
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 fbbc 	bl	8005a64 <I2C_WaitOnTXEFlagUntilTimeout>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00d      	beq.n	800530e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d107      	bne.n	800530a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005308:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e02b      	b.n	8005366 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800530e:	88fb      	ldrh	r3, [r7, #6]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d105      	bne.n	8005320 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005314:	893b      	ldrh	r3, [r7, #8]
 8005316:	b2da      	uxtb	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	611a      	str	r2, [r3, #16]
 800531e:	e021      	b.n	8005364 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005320:	893b      	ldrh	r3, [r7, #8]
 8005322:	0a1b      	lsrs	r3, r3, #8
 8005324:	b29b      	uxth	r3, r3
 8005326:	b2da      	uxtb	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800532e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005330:	6a39      	ldr	r1, [r7, #32]
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 fb96 	bl	8005a64 <I2C_WaitOnTXEFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00d      	beq.n	800535a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	2b04      	cmp	r3, #4
 8005344:	d107      	bne.n	8005356 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005354:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e005      	b.n	8005366 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800535a:	893b      	ldrh	r3, [r7, #8]
 800535c:	b2da      	uxtb	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	00010002 	.word	0x00010002

08005374 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b088      	sub	sp, #32
 8005378:	af02      	add	r7, sp, #8
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	4608      	mov	r0, r1
 800537e:	4611      	mov	r1, r2
 8005380:	461a      	mov	r2, r3
 8005382:	4603      	mov	r3, r0
 8005384:	817b      	strh	r3, [r7, #10]
 8005386:	460b      	mov	r3, r1
 8005388:	813b      	strh	r3, [r7, #8]
 800538a:	4613      	mov	r3, r2
 800538c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800539c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f000 fa7c 	bl	80058b8 <I2C_WaitOnFlagUntilTimeout>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00d      	beq.n	80053e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053d4:	d103      	bne.n	80053de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e0aa      	b.n	8005538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053e2:	897b      	ldrh	r3, [r7, #10]
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	461a      	mov	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	6a3a      	ldr	r2, [r7, #32]
 80053f6:	4952      	ldr	r1, [pc, #328]	; (8005540 <I2C_RequestMemoryRead+0x1cc>)
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 fab4 	bl	8005966 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e097      	b.n	8005538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005408:	2300      	movs	r3, #0
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800541e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005420:	6a39      	ldr	r1, [r7, #32]
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f000 fb1e 	bl	8005a64 <I2C_WaitOnTXEFlagUntilTimeout>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00d      	beq.n	800544a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	2b04      	cmp	r3, #4
 8005434:	d107      	bne.n	8005446 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005444:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e076      	b.n	8005538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800544a:	88fb      	ldrh	r3, [r7, #6]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d105      	bne.n	800545c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005450:	893b      	ldrh	r3, [r7, #8]
 8005452:	b2da      	uxtb	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	611a      	str	r2, [r3, #16]
 800545a:	e021      	b.n	80054a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800545c:	893b      	ldrh	r3, [r7, #8]
 800545e:	0a1b      	lsrs	r3, r3, #8
 8005460:	b29b      	uxth	r3, r3
 8005462:	b2da      	uxtb	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800546a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800546c:	6a39      	ldr	r1, [r7, #32]
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f000 faf8 	bl	8005a64 <I2C_WaitOnTXEFlagUntilTimeout>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00d      	beq.n	8005496 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	2b04      	cmp	r3, #4
 8005480:	d107      	bne.n	8005492 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005490:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e050      	b.n	8005538 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005496:	893b      	ldrh	r3, [r7, #8]
 8005498:	b2da      	uxtb	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a2:	6a39      	ldr	r1, [r7, #32]
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 fadd 	bl	8005a64 <I2C_WaitOnTXEFlagUntilTimeout>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00d      	beq.n	80054cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d107      	bne.n	80054c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e035      	b.n	8005538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f000 f9e5 	bl	80058b8 <I2C_WaitOnFlagUntilTimeout>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00d      	beq.n	8005510 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005502:	d103      	bne.n	800550c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800550a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e013      	b.n	8005538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005510:	897b      	ldrh	r3, [r7, #10]
 8005512:	b2db      	uxtb	r3, r3
 8005514:	f043 0301 	orr.w	r3, r3, #1
 8005518:	b2da      	uxtb	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	6a3a      	ldr	r2, [r7, #32]
 8005524:	4906      	ldr	r1, [pc, #24]	; (8005540 <I2C_RequestMemoryRead+0x1cc>)
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f000 fa1d 	bl	8005966 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e000      	b.n	8005538 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	00010002 	.word	0x00010002

08005544 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005550:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005558:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005560:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005566:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005576:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005584:	2200      	movs	r2, #0
 8005586:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005594:	2200      	movs	r2, #0
 8005596:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005598:	7cfb      	ldrb	r3, [r7, #19]
 800559a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800559e:	2b21      	cmp	r3, #33	; 0x21
 80055a0:	d007      	beq.n	80055b2 <I2C_DMAXferCplt+0x6e>
 80055a2:	7cfb      	ldrb	r3, [r7, #19]
 80055a4:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80055a8:	2b22      	cmp	r3, #34	; 0x22
 80055aa:	d131      	bne.n	8005610 <I2C_DMAXferCplt+0xcc>
 80055ac:	7cbb      	ldrb	r3, [r7, #18]
 80055ae:	2b20      	cmp	r3, #32
 80055b0:	d12e      	bne.n	8005610 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055c0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2200      	movs	r2, #0
 80055c6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80055c8:	7cfb      	ldrb	r3, [r7, #19]
 80055ca:	2b29      	cmp	r3, #41	; 0x29
 80055cc:	d10a      	bne.n	80055e4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2221      	movs	r2, #33	; 0x21
 80055d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	2228      	movs	r2, #40	; 0x28
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80055dc:	6978      	ldr	r0, [r7, #20]
 80055de:	f7fe fcf2 	bl	8003fc6 <HAL_I2C_SlaveTxCpltCallback>
 80055e2:	e00c      	b.n	80055fe <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80055e4:	7cfb      	ldrb	r3, [r7, #19]
 80055e6:	2b2a      	cmp	r3, #42	; 0x2a
 80055e8:	d109      	bne.n	80055fe <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2222      	movs	r2, #34	; 0x22
 80055ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	2228      	movs	r2, #40	; 0x28
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055f8:	6978      	ldr	r0, [r7, #20]
 80055fa:	f7fe fcee 	bl	8003fda <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800560c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800560e:	e06a      	b.n	80056e6 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	d064      	beq.n	80056e6 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b01      	cmp	r3, #1
 8005624:	d107      	bne.n	8005636 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005634:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005644:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800564c:	d009      	beq.n	8005662 <I2C_DMAXferCplt+0x11e>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2b08      	cmp	r3, #8
 8005652:	d006      	beq.n	8005662 <I2C_DMAXferCplt+0x11e>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800565a:	d002      	beq.n	8005662 <I2C_DMAXferCplt+0x11e>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2b20      	cmp	r3, #32
 8005660:	d107      	bne.n	8005672 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005670:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005680:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005690:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2200      	movs	r2, #0
 8005696:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80056a0:	6978      	ldr	r0, [r7, #20]
 80056a2:	f7fe fcd0 	bl	8004046 <HAL_I2C_ErrorCallback>
}
 80056a6:	e01e      	b.n	80056e6 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b40      	cmp	r3, #64	; 0x40
 80056ba:	d10a      	bne.n	80056d2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	2200      	movs	r2, #0
 80056c8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80056ca:	6978      	ldr	r0, [r7, #20]
 80056cc:	f7fe fcb1 	bl	8004032 <HAL_I2C_MemRxCpltCallback>
}
 80056d0:	e009      	b.n	80056e6 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2212      	movs	r2, #18
 80056de:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80056e0:	6978      	ldr	r0, [r7, #20]
 80056e2:	f7fe fc66 	bl	8003fb2 <HAL_I2C_MasterRxCpltCallback>
}
 80056e6:	bf00      	nop
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b084      	sub	sp, #16
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005708:	2200      	movs	r2, #0
 800570a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	2b00      	cmp	r3, #0
 8005712:	d003      	beq.n	800571c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005718:	2200      	movs	r2, #0
 800571a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7fd fa7d 	bl	8002c1c <HAL_DMA_GetError>
 8005722:	4603      	mov	r3, r0
 8005724:	2b02      	cmp	r3, #2
 8005726:	d01b      	beq.n	8005760 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005736:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2220      	movs	r2, #32
 8005742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	f043 0210 	orr.w	r2, r3, #16
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f7fe fc73 	bl	8004046 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005760:	bf00      	nop
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005778:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005780:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005782:	4b4b      	ldr	r3, [pc, #300]	; (80058b0 <I2C_DMAAbort+0x148>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	08db      	lsrs	r3, r3, #3
 8005788:	4a4a      	ldr	r2, [pc, #296]	; (80058b4 <I2C_DMAAbort+0x14c>)
 800578a:	fba2 2303 	umull	r2, r3, r2, r3
 800578e:	0a1a      	lsrs	r2, r3, #8
 8005790:	4613      	mov	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	00da      	lsls	r2, r3, #3
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d106      	bne.n	80057b0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	f043 0220 	orr.w	r2, r3, #32
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80057ae:	e00a      	b.n	80057c6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	3b01      	subs	r3, #1
 80057b4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057c4:	d0ea      	beq.n	800579c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d2:	2200      	movs	r2, #0
 80057d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d003      	beq.n	80057e6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e2:	2200      	movs	r2, #0
 80057e4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057f4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2200      	movs	r2, #0
 80057fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005800:	2b00      	cmp	r3, #0
 8005802:	d003      	beq.n	800580c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005808:	2200      	movs	r2, #0
 800580a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005818:	2200      	movs	r2, #0
 800581a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0201 	bic.w	r2, r2, #1
 800582a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b60      	cmp	r3, #96	; 0x60
 8005836:	d10e      	bne.n	8005856 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	2220      	movs	r2, #32
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	2200      	movs	r2, #0
 800584c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800584e:	6978      	ldr	r0, [r7, #20]
 8005850:	f7fe fc03 	bl	800405a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005854:	e027      	b.n	80058a6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005856:	7cfb      	ldrb	r3, [r7, #19]
 8005858:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800585c:	2b28      	cmp	r3, #40	; 0x28
 800585e:	d117      	bne.n	8005890 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0201 	orr.w	r2, r2, #1
 800586e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800587e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2200      	movs	r2, #0
 8005884:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	2228      	movs	r2, #40	; 0x28
 800588a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800588e:	e007      	b.n	80058a0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	2220      	movs	r2, #32
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80058a0:	6978      	ldr	r0, [r7, #20]
 80058a2:	f7fe fbd0 	bl	8004046 <HAL_I2C_ErrorCallback>
}
 80058a6:	bf00      	nop
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	20000004 	.word	0x20000004
 80058b4:	14f8b589 	.word	0x14f8b589

080058b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	603b      	str	r3, [r7, #0]
 80058c4:	4613      	mov	r3, r2
 80058c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058c8:	e025      	b.n	8005916 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d0:	d021      	beq.n	8005916 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058d2:	f7fc fdc5 	bl	8002460 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d302      	bcc.n	80058e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d116      	bne.n	8005916 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005902:	f043 0220 	orr.w	r2, r3, #32
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e023      	b.n	800595e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	0c1b      	lsrs	r3, r3, #16
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b01      	cmp	r3, #1
 800591e:	d10d      	bne.n	800593c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	43da      	mvns	r2, r3
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	4013      	ands	r3, r2
 800592c:	b29b      	uxth	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	bf0c      	ite	eq
 8005932:	2301      	moveq	r3, #1
 8005934:	2300      	movne	r3, #0
 8005936:	b2db      	uxtb	r3, r3
 8005938:	461a      	mov	r2, r3
 800593a:	e00c      	b.n	8005956 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	43da      	mvns	r2, r3
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	4013      	ands	r3, r2
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	bf0c      	ite	eq
 800594e:	2301      	moveq	r3, #1
 8005950:	2300      	movne	r3, #0
 8005952:	b2db      	uxtb	r3, r3
 8005954:	461a      	mov	r2, r3
 8005956:	79fb      	ldrb	r3, [r7, #7]
 8005958:	429a      	cmp	r2, r3
 800595a:	d0b6      	beq.n	80058ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b084      	sub	sp, #16
 800596a:	af00      	add	r7, sp, #0
 800596c:	60f8      	str	r0, [r7, #12]
 800596e:	60b9      	str	r1, [r7, #8]
 8005970:	607a      	str	r2, [r7, #4]
 8005972:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005974:	e051      	b.n	8005a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005984:	d123      	bne.n	80059ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005994:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800599e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2220      	movs	r2, #32
 80059aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	f043 0204 	orr.w	r2, r3, #4
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e046      	b.n	8005a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d4:	d021      	beq.n	8005a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059d6:	f7fc fd43 	bl	8002460 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d302      	bcc.n	80059ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d116      	bne.n	8005a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	f043 0220 	orr.w	r2, r3, #32
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e020      	b.n	8005a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	0c1b      	lsrs	r3, r3, #16
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d10c      	bne.n	8005a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	43da      	mvns	r2, r3
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	bf14      	ite	ne
 8005a36:	2301      	movne	r3, #1
 8005a38:	2300      	moveq	r3, #0
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	e00b      	b.n	8005a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	43da      	mvns	r2, r3
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	bf14      	ite	ne
 8005a50:	2301      	movne	r3, #1
 8005a52:	2300      	moveq	r3, #0
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d18d      	bne.n	8005976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a70:	e02d      	b.n	8005ace <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 f900 	bl	8005c78 <I2C_IsAcknowledgeFailed>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e02d      	b.n	8005ade <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a88:	d021      	beq.n	8005ace <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a8a:	f7fc fce9 	bl	8002460 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d302      	bcc.n	8005aa0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d116      	bne.n	8005ace <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	f043 0220 	orr.w	r2, r3, #32
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e007      	b.n	8005ade <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad8:	2b80      	cmp	r3, #128	; 0x80
 8005ada:	d1ca      	bne.n	8005a72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b084      	sub	sp, #16
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	60f8      	str	r0, [r7, #12]
 8005aee:	60b9      	str	r1, [r7, #8]
 8005af0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005af2:	e02d      	b.n	8005b50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 f8bf 	bl	8005c78 <I2C_IsAcknowledgeFailed>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e02d      	b.n	8005b60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0a:	d021      	beq.n	8005b50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b0c:	f7fc fca8 	bl	8002460 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d302      	bcc.n	8005b22 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d116      	bne.n	8005b50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3c:	f043 0220 	orr.w	r2, r3, #32
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e007      	b.n	8005b60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	f003 0304 	and.w	r3, r3, #4
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d1ca      	bne.n	8005af4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b74:	4b13      	ldr	r3, [pc, #76]	; (8005bc4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	08db      	lsrs	r3, r3, #3
 8005b7a:	4a13      	ldr	r2, [pc, #76]	; (8005bc8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b80:	0a1a      	lsrs	r2, r3, #8
 8005b82:	4613      	mov	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d107      	bne.n	8005ba6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	f043 0220 	orr.w	r2, r3, #32
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e008      	b.n	8005bb8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bb4:	d0e9      	beq.n	8005b8a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	20000004 	.word	0x20000004
 8005bc8:	14f8b589 	.word	0x14f8b589

08005bcc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bd8:	e042      	b.n	8005c60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	f003 0310 	and.w	r3, r3, #16
 8005be4:	2b10      	cmp	r3, #16
 8005be6:	d119      	bne.n	8005c1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f06f 0210 	mvn.w	r2, #16
 8005bf0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e029      	b.n	8005c70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c1c:	f7fc fc20 	bl	8002460 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d302      	bcc.n	8005c32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d116      	bne.n	8005c60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	f043 0220 	orr.w	r2, r3, #32
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e007      	b.n	8005c70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6a:	2b40      	cmp	r3, #64	; 0x40
 8005c6c:	d1b5      	bne.n	8005bda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c8e:	d11b      	bne.n	8005cc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb4:	f043 0204 	orr.w	r2, r3, #4
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e000      	b.n	8005cca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005ce6:	d103      	bne.n	8005cf0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005cee:	e007      	b.n	8005d00 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005cf8:	d102      	bne.n	8005d00 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2208      	movs	r2, #8
 8005cfe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e264      	b.n	80061e8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d075      	beq.n	8005e16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d2a:	4ba3      	ldr	r3, [pc, #652]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f003 030c 	and.w	r3, r3, #12
 8005d32:	2b04      	cmp	r3, #4
 8005d34:	d00c      	beq.n	8005d50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d36:	4ba0      	ldr	r3, [pc, #640]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d3e:	2b08      	cmp	r3, #8
 8005d40:	d112      	bne.n	8005d68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d42:	4b9d      	ldr	r3, [pc, #628]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d4e:	d10b      	bne.n	8005d68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d50:	4b99      	ldr	r3, [pc, #612]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d05b      	beq.n	8005e14 <HAL_RCC_OscConfig+0x108>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d157      	bne.n	8005e14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e23f      	b.n	80061e8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d70:	d106      	bne.n	8005d80 <HAL_RCC_OscConfig+0x74>
 8005d72:	4b91      	ldr	r3, [pc, #580]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a90      	ldr	r2, [pc, #576]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	e01d      	b.n	8005dbc <HAL_RCC_OscConfig+0xb0>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d88:	d10c      	bne.n	8005da4 <HAL_RCC_OscConfig+0x98>
 8005d8a:	4b8b      	ldr	r3, [pc, #556]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a8a      	ldr	r2, [pc, #552]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	4b88      	ldr	r3, [pc, #544]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a87      	ldr	r2, [pc, #540]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005da0:	6013      	str	r3, [r2, #0]
 8005da2:	e00b      	b.n	8005dbc <HAL_RCC_OscConfig+0xb0>
 8005da4:	4b84      	ldr	r3, [pc, #528]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a83      	ldr	r2, [pc, #524]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dae:	6013      	str	r3, [r2, #0]
 8005db0:	4b81      	ldr	r3, [pc, #516]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a80      	ldr	r2, [pc, #512]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d013      	beq.n	8005dec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc4:	f7fc fb4c 	bl	8002460 <HAL_GetTick>
 8005dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dca:	e008      	b.n	8005dde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dcc:	f7fc fb48 	bl	8002460 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b64      	cmp	r3, #100	; 0x64
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e204      	b.n	80061e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dde:	4b76      	ldr	r3, [pc, #472]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d0f0      	beq.n	8005dcc <HAL_RCC_OscConfig+0xc0>
 8005dea:	e014      	b.n	8005e16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dec:	f7fc fb38 	bl	8002460 <HAL_GetTick>
 8005df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005df2:	e008      	b.n	8005e06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005df4:	f7fc fb34 	bl	8002460 <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	2b64      	cmp	r3, #100	; 0x64
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e1f0      	b.n	80061e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e06:	4b6c      	ldr	r3, [pc, #432]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1f0      	bne.n	8005df4 <HAL_RCC_OscConfig+0xe8>
 8005e12:	e000      	b.n	8005e16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d063      	beq.n	8005eea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e22:	4b65      	ldr	r3, [pc, #404]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f003 030c 	and.w	r3, r3, #12
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00b      	beq.n	8005e46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e2e:	4b62      	ldr	r3, [pc, #392]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e36:	2b08      	cmp	r3, #8
 8005e38:	d11c      	bne.n	8005e74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e3a:	4b5f      	ldr	r3, [pc, #380]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d116      	bne.n	8005e74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e46:	4b5c      	ldr	r3, [pc, #368]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d005      	beq.n	8005e5e <HAL_RCC_OscConfig+0x152>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d001      	beq.n	8005e5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e1c4      	b.n	80061e8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e5e:	4b56      	ldr	r3, [pc, #344]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	00db      	lsls	r3, r3, #3
 8005e6c:	4952      	ldr	r1, [pc, #328]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e72:	e03a      	b.n	8005eea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d020      	beq.n	8005ebe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e7c:	4b4f      	ldr	r3, [pc, #316]	; (8005fbc <HAL_RCC_OscConfig+0x2b0>)
 8005e7e:	2201      	movs	r2, #1
 8005e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e82:	f7fc faed 	bl	8002460 <HAL_GetTick>
 8005e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e88:	e008      	b.n	8005e9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e8a:	f7fc fae9 	bl	8002460 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d901      	bls.n	8005e9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e1a5      	b.n	80061e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e9c:	4b46      	ldr	r3, [pc, #280]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d0f0      	beq.n	8005e8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ea8:	4b43      	ldr	r3, [pc, #268]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	00db      	lsls	r3, r3, #3
 8005eb6:	4940      	ldr	r1, [pc, #256]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	600b      	str	r3, [r1, #0]
 8005ebc:	e015      	b.n	8005eea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ebe:	4b3f      	ldr	r3, [pc, #252]	; (8005fbc <HAL_RCC_OscConfig+0x2b0>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec4:	f7fc facc 	bl	8002460 <HAL_GetTick>
 8005ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eca:	e008      	b.n	8005ede <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ecc:	f7fc fac8 	bl	8002460 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d901      	bls.n	8005ede <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e184      	b.n	80061e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ede:	4b36      	ldr	r3, [pc, #216]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1f0      	bne.n	8005ecc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0308 	and.w	r3, r3, #8
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d030      	beq.n	8005f58 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d016      	beq.n	8005f2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005efe:	4b30      	ldr	r3, [pc, #192]	; (8005fc0 <HAL_RCC_OscConfig+0x2b4>)
 8005f00:	2201      	movs	r2, #1
 8005f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f04:	f7fc faac 	bl	8002460 <HAL_GetTick>
 8005f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f0a:	e008      	b.n	8005f1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f0c:	f7fc faa8 	bl	8002460 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e164      	b.n	80061e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f1e:	4b26      	ldr	r3, [pc, #152]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f22:	f003 0302 	and.w	r3, r3, #2
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d0f0      	beq.n	8005f0c <HAL_RCC_OscConfig+0x200>
 8005f2a:	e015      	b.n	8005f58 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f2c:	4b24      	ldr	r3, [pc, #144]	; (8005fc0 <HAL_RCC_OscConfig+0x2b4>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f32:	f7fc fa95 	bl	8002460 <HAL_GetTick>
 8005f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f38:	e008      	b.n	8005f4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f3a:	f7fc fa91 	bl	8002460 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d901      	bls.n	8005f4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e14d      	b.n	80061e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f4c:	4b1a      	ldr	r3, [pc, #104]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1f0      	bne.n	8005f3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 80a0 	beq.w	80060a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f66:	2300      	movs	r3, #0
 8005f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f6a:	4b13      	ldr	r3, [pc, #76]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10f      	bne.n	8005f96 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f76:	2300      	movs	r3, #0
 8005f78:	60bb      	str	r3, [r7, #8]
 8005f7a:	4b0f      	ldr	r3, [pc, #60]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	4a0e      	ldr	r2, [pc, #56]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f84:	6413      	str	r3, [r2, #64]	; 0x40
 8005f86:	4b0c      	ldr	r3, [pc, #48]	; (8005fb8 <HAL_RCC_OscConfig+0x2ac>)
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f8e:	60bb      	str	r3, [r7, #8]
 8005f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f92:	2301      	movs	r3, #1
 8005f94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f96:	4b0b      	ldr	r3, [pc, #44]	; (8005fc4 <HAL_RCC_OscConfig+0x2b8>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d121      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fa2:	4b08      	ldr	r3, [pc, #32]	; (8005fc4 <HAL_RCC_OscConfig+0x2b8>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a07      	ldr	r2, [pc, #28]	; (8005fc4 <HAL_RCC_OscConfig+0x2b8>)
 8005fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fae:	f7fc fa57 	bl	8002460 <HAL_GetTick>
 8005fb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fb4:	e011      	b.n	8005fda <HAL_RCC_OscConfig+0x2ce>
 8005fb6:	bf00      	nop
 8005fb8:	40023800 	.word	0x40023800
 8005fbc:	42470000 	.word	0x42470000
 8005fc0:	42470e80 	.word	0x42470e80
 8005fc4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fc8:	f7fc fa4a 	bl	8002460 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e106      	b.n	80061e8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fda:	4b85      	ldr	r3, [pc, #532]	; (80061f0 <HAL_RCC_OscConfig+0x4e4>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d0f0      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d106      	bne.n	8005ffc <HAL_RCC_OscConfig+0x2f0>
 8005fee:	4b81      	ldr	r3, [pc, #516]	; (80061f4 <HAL_RCC_OscConfig+0x4e8>)
 8005ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff2:	4a80      	ldr	r2, [pc, #512]	; (80061f4 <HAL_RCC_OscConfig+0x4e8>)
 8005ff4:	f043 0301 	orr.w	r3, r3, #1
 8005ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8005ffa:	e01c      	b.n	8006036 <HAL_RCC_OscConfig+0x32a>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	2b05      	cmp	r3, #5
 8006002:	d10c      	bne.n	800601e <HAL_RCC_OscConfig+0x312>
 8006004:	4b7b      	ldr	r3, [pc, #492]	; (80061f4 <HAL_RCC_OscConfig+0x4e8>)
 8006006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006008:	4a7a      	ldr	r2, [pc, #488]	; (80061f4 <HAL_RCC_OscConfig+0x4e8>)
 800600a:	f043 0304 	orr.w	r3, r3, #4
 800600e:	6713      	str	r3, [r2, #112]	; 0x70
 8006010:	4b78      	ldr	r3, [pc, #480]	; (80061f4 <HAL_RCC_OscConfig+0x4e8>)
 8006012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006014:	4a77      	ldr	r2, [pc, #476]	; (80061f4 <HAL_RCC_OscConfig+0x4e8>)
 8006016:	f043 0301 	orr.w	r3, r3, #1
 800601a:	6713      	str	r3, [r2, #112]	; 0x70
 800601c:	e00b      	b.n	8006036 <HAL_RCC_OscConfig+0x32a>
 800601e:	4b75      	ldr	r3, [pc, #468]	; (80061f4 <HAL_RCC_OscConfig+0x4e8>)
 8006020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006022:	4a74      	ldr	r2, [pc, #464]	; (80061f4 <HAL_RCC_OscConfig+0x4e8>)
 8006024:	f023 0301 	bic.w	r3, r3, #1
 8006028:	6713      	str	r3, [r2, #112]	; 0x70
 800602a:	4b72      	ldr	r3, [pc, #456]	; (80061f4 <HAL_RCC_OscConfig+0x4e8>)
 800602c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602e:	4a71      	ldr	r2, [pc, #452]	; (80061f4 <HAL_RCC_OscConfig+0x4e8>)
 8006030:	f023 0304 	bic.w	r3, r3, #4
 8006034:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d015      	beq.n	800606a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800603e:	f7fc fa0f 	bl	8002460 <HAL_GetTick>
 8006042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006044:	e00a      	b.n	800605c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006046:	f7fc fa0b 	bl	8002460 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	f241 3288 	movw	r2, #5000	; 0x1388
 8006054:	4293      	cmp	r3, r2
 8006056:	d901      	bls.n	800605c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e0c5      	b.n	80061e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800605c:	4b65      	ldr	r3, [pc, #404]	; (80061f4 <HAL_RCC_OscConfig+0x4e8>)
 800605e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d0ee      	beq.n	8006046 <HAL_RCC_OscConfig+0x33a>
 8006068:	e014      	b.n	8006094 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800606a:	f7fc f9f9 	bl	8002460 <HAL_GetTick>
 800606e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006070:	e00a      	b.n	8006088 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006072:	f7fc f9f5 	bl	8002460 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006080:	4293      	cmp	r3, r2
 8006082:	d901      	bls.n	8006088 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e0af      	b.n	80061e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006088:	4b5a      	ldr	r3, [pc, #360]	; (80061f4 <HAL_RCC_OscConfig+0x4e8>)
 800608a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1ee      	bne.n	8006072 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006094:	7dfb      	ldrb	r3, [r7, #23]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d105      	bne.n	80060a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800609a:	4b56      	ldr	r3, [pc, #344]	; (80061f4 <HAL_RCC_OscConfig+0x4e8>)
 800609c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609e:	4a55      	ldr	r2, [pc, #340]	; (80061f4 <HAL_RCC_OscConfig+0x4e8>)
 80060a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f000 809b 	beq.w	80061e6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060b0:	4b50      	ldr	r3, [pc, #320]	; (80061f4 <HAL_RCC_OscConfig+0x4e8>)
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f003 030c 	and.w	r3, r3, #12
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d05c      	beq.n	8006176 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d141      	bne.n	8006148 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060c4:	4b4c      	ldr	r3, [pc, #304]	; (80061f8 <HAL_RCC_OscConfig+0x4ec>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ca:	f7fc f9c9 	bl	8002460 <HAL_GetTick>
 80060ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060d0:	e008      	b.n	80060e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060d2:	f7fc f9c5 	bl	8002460 <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d901      	bls.n	80060e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e081      	b.n	80061e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060e4:	4b43      	ldr	r3, [pc, #268]	; (80061f4 <HAL_RCC_OscConfig+0x4e8>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1f0      	bne.n	80060d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	69da      	ldr	r2, [r3, #28]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	431a      	orrs	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	019b      	lsls	r3, r3, #6
 8006100:	431a      	orrs	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006106:	085b      	lsrs	r3, r3, #1
 8006108:	3b01      	subs	r3, #1
 800610a:	041b      	lsls	r3, r3, #16
 800610c:	431a      	orrs	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006112:	061b      	lsls	r3, r3, #24
 8006114:	4937      	ldr	r1, [pc, #220]	; (80061f4 <HAL_RCC_OscConfig+0x4e8>)
 8006116:	4313      	orrs	r3, r2
 8006118:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800611a:	4b37      	ldr	r3, [pc, #220]	; (80061f8 <HAL_RCC_OscConfig+0x4ec>)
 800611c:	2201      	movs	r2, #1
 800611e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006120:	f7fc f99e 	bl	8002460 <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006128:	f7fc f99a 	bl	8002460 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e056      	b.n	80061e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800613a:	4b2e      	ldr	r3, [pc, #184]	; (80061f4 <HAL_RCC_OscConfig+0x4e8>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d0f0      	beq.n	8006128 <HAL_RCC_OscConfig+0x41c>
 8006146:	e04e      	b.n	80061e6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006148:	4b2b      	ldr	r3, [pc, #172]	; (80061f8 <HAL_RCC_OscConfig+0x4ec>)
 800614a:	2200      	movs	r2, #0
 800614c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800614e:	f7fc f987 	bl	8002460 <HAL_GetTick>
 8006152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006154:	e008      	b.n	8006168 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006156:	f7fc f983 	bl	8002460 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	2b02      	cmp	r3, #2
 8006162:	d901      	bls.n	8006168 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e03f      	b.n	80061e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006168:	4b22      	ldr	r3, [pc, #136]	; (80061f4 <HAL_RCC_OscConfig+0x4e8>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1f0      	bne.n	8006156 <HAL_RCC_OscConfig+0x44a>
 8006174:	e037      	b.n	80061e6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d101      	bne.n	8006182 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e032      	b.n	80061e8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006182:	4b1c      	ldr	r3, [pc, #112]	; (80061f4 <HAL_RCC_OscConfig+0x4e8>)
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d028      	beq.n	80061e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800619a:	429a      	cmp	r2, r3
 800619c:	d121      	bne.n	80061e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d11a      	bne.n	80061e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80061b2:	4013      	ands	r3, r2
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061b8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d111      	bne.n	80061e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c8:	085b      	lsrs	r3, r3, #1
 80061ca:	3b01      	subs	r3, #1
 80061cc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d107      	bne.n	80061e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061dc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061de:	429a      	cmp	r2, r3
 80061e0:	d001      	beq.n	80061e6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e000      	b.n	80061e8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3718      	adds	r7, #24
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	40007000 	.word	0x40007000
 80061f4:	40023800 	.word	0x40023800
 80061f8:	42470060 	.word	0x42470060

080061fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e0cc      	b.n	80063aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006210:	4b68      	ldr	r3, [pc, #416]	; (80063b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0307 	and.w	r3, r3, #7
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	429a      	cmp	r2, r3
 800621c:	d90c      	bls.n	8006238 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800621e:	4b65      	ldr	r3, [pc, #404]	; (80063b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006226:	4b63      	ldr	r3, [pc, #396]	; (80063b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0307 	and.w	r3, r3, #7
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	429a      	cmp	r2, r3
 8006232:	d001      	beq.n	8006238 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e0b8      	b.n	80063aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b00      	cmp	r3, #0
 8006242:	d020      	beq.n	8006286 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	2b00      	cmp	r3, #0
 800624e:	d005      	beq.n	800625c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006250:	4b59      	ldr	r3, [pc, #356]	; (80063b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	4a58      	ldr	r2, [pc, #352]	; (80063b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006256:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800625a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0308 	and.w	r3, r3, #8
 8006264:	2b00      	cmp	r3, #0
 8006266:	d005      	beq.n	8006274 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006268:	4b53      	ldr	r3, [pc, #332]	; (80063b8 <HAL_RCC_ClockConfig+0x1bc>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	4a52      	ldr	r2, [pc, #328]	; (80063b8 <HAL_RCC_ClockConfig+0x1bc>)
 800626e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006272:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006274:	4b50      	ldr	r3, [pc, #320]	; (80063b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	494d      	ldr	r1, [pc, #308]	; (80063b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006282:	4313      	orrs	r3, r2
 8006284:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b00      	cmp	r3, #0
 8006290:	d044      	beq.n	800631c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d107      	bne.n	80062aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800629a:	4b47      	ldr	r3, [pc, #284]	; (80063b8 <HAL_RCC_ClockConfig+0x1bc>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d119      	bne.n	80062da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e07f      	b.n	80063aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d003      	beq.n	80062ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	d107      	bne.n	80062ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062ba:	4b3f      	ldr	r3, [pc, #252]	; (80063b8 <HAL_RCC_ClockConfig+0x1bc>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d109      	bne.n	80062da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e06f      	b.n	80063aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ca:	4b3b      	ldr	r3, [pc, #236]	; (80063b8 <HAL_RCC_ClockConfig+0x1bc>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e067      	b.n	80063aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062da:	4b37      	ldr	r3, [pc, #220]	; (80063b8 <HAL_RCC_ClockConfig+0x1bc>)
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f023 0203 	bic.w	r2, r3, #3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	4934      	ldr	r1, [pc, #208]	; (80063b8 <HAL_RCC_ClockConfig+0x1bc>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062ec:	f7fc f8b8 	bl	8002460 <HAL_GetTick>
 80062f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062f2:	e00a      	b.n	800630a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062f4:	f7fc f8b4 	bl	8002460 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006302:	4293      	cmp	r3, r2
 8006304:	d901      	bls.n	800630a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e04f      	b.n	80063aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800630a:	4b2b      	ldr	r3, [pc, #172]	; (80063b8 <HAL_RCC_ClockConfig+0x1bc>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f003 020c 	and.w	r2, r3, #12
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	429a      	cmp	r2, r3
 800631a:	d1eb      	bne.n	80062f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800631c:	4b25      	ldr	r3, [pc, #148]	; (80063b4 <HAL_RCC_ClockConfig+0x1b8>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0307 	and.w	r3, r3, #7
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	429a      	cmp	r2, r3
 8006328:	d20c      	bcs.n	8006344 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800632a:	4b22      	ldr	r3, [pc, #136]	; (80063b4 <HAL_RCC_ClockConfig+0x1b8>)
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	b2d2      	uxtb	r2, r2
 8006330:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006332:	4b20      	ldr	r3, [pc, #128]	; (80063b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0307 	and.w	r3, r3, #7
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	429a      	cmp	r2, r3
 800633e:	d001      	beq.n	8006344 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e032      	b.n	80063aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0304 	and.w	r3, r3, #4
 800634c:	2b00      	cmp	r3, #0
 800634e:	d008      	beq.n	8006362 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006350:	4b19      	ldr	r3, [pc, #100]	; (80063b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	4916      	ldr	r1, [pc, #88]	; (80063b8 <HAL_RCC_ClockConfig+0x1bc>)
 800635e:	4313      	orrs	r3, r2
 8006360:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0308 	and.w	r3, r3, #8
 800636a:	2b00      	cmp	r3, #0
 800636c:	d009      	beq.n	8006382 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800636e:	4b12      	ldr	r3, [pc, #72]	; (80063b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	00db      	lsls	r3, r3, #3
 800637c:	490e      	ldr	r1, [pc, #56]	; (80063b8 <HAL_RCC_ClockConfig+0x1bc>)
 800637e:	4313      	orrs	r3, r2
 8006380:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006382:	f000 f821 	bl	80063c8 <HAL_RCC_GetSysClockFreq>
 8006386:	4602      	mov	r2, r0
 8006388:	4b0b      	ldr	r3, [pc, #44]	; (80063b8 <HAL_RCC_ClockConfig+0x1bc>)
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	091b      	lsrs	r3, r3, #4
 800638e:	f003 030f 	and.w	r3, r3, #15
 8006392:	490a      	ldr	r1, [pc, #40]	; (80063bc <HAL_RCC_ClockConfig+0x1c0>)
 8006394:	5ccb      	ldrb	r3, [r1, r3]
 8006396:	fa22 f303 	lsr.w	r3, r2, r3
 800639a:	4a09      	ldr	r2, [pc, #36]	; (80063c0 <HAL_RCC_ClockConfig+0x1c4>)
 800639c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800639e:	4b09      	ldr	r3, [pc, #36]	; (80063c4 <HAL_RCC_ClockConfig+0x1c8>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fc f818 	bl	80023d8 <HAL_InitTick>

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	40023c00 	.word	0x40023c00
 80063b8:	40023800 	.word	0x40023800
 80063bc:	080099c8 	.word	0x080099c8
 80063c0:	20000004 	.word	0x20000004
 80063c4:	20000008 	.word	0x20000008

080063c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80063cc:	b084      	sub	sp, #16
 80063ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	607b      	str	r3, [r7, #4]
 80063d4:	2300      	movs	r3, #0
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	2300      	movs	r3, #0
 80063da:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80063dc:	2300      	movs	r3, #0
 80063de:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063e0:	4b67      	ldr	r3, [pc, #412]	; (8006580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f003 030c 	and.w	r3, r3, #12
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	d00d      	beq.n	8006408 <HAL_RCC_GetSysClockFreq+0x40>
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	f200 80bd 	bhi.w	800656c <HAL_RCC_GetSysClockFreq+0x1a4>
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d002      	beq.n	80063fc <HAL_RCC_GetSysClockFreq+0x34>
 80063f6:	2b04      	cmp	r3, #4
 80063f8:	d003      	beq.n	8006402 <HAL_RCC_GetSysClockFreq+0x3a>
 80063fa:	e0b7      	b.n	800656c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063fc:	4b61      	ldr	r3, [pc, #388]	; (8006584 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80063fe:	60bb      	str	r3, [r7, #8]
       break;
 8006400:	e0b7      	b.n	8006572 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006402:	4b61      	ldr	r3, [pc, #388]	; (8006588 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006404:	60bb      	str	r3, [r7, #8]
      break;
 8006406:	e0b4      	b.n	8006572 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006408:	4b5d      	ldr	r3, [pc, #372]	; (8006580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006410:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006412:	4b5b      	ldr	r3, [pc, #364]	; (8006580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d04d      	beq.n	80064ba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800641e:	4b58      	ldr	r3, [pc, #352]	; (8006580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	099b      	lsrs	r3, r3, #6
 8006424:	461a      	mov	r2, r3
 8006426:	f04f 0300 	mov.w	r3, #0
 800642a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800642e:	f04f 0100 	mov.w	r1, #0
 8006432:	ea02 0800 	and.w	r8, r2, r0
 8006436:	ea03 0901 	and.w	r9, r3, r1
 800643a:	4640      	mov	r0, r8
 800643c:	4649      	mov	r1, r9
 800643e:	f04f 0200 	mov.w	r2, #0
 8006442:	f04f 0300 	mov.w	r3, #0
 8006446:	014b      	lsls	r3, r1, #5
 8006448:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800644c:	0142      	lsls	r2, r0, #5
 800644e:	4610      	mov	r0, r2
 8006450:	4619      	mov	r1, r3
 8006452:	ebb0 0008 	subs.w	r0, r0, r8
 8006456:	eb61 0109 	sbc.w	r1, r1, r9
 800645a:	f04f 0200 	mov.w	r2, #0
 800645e:	f04f 0300 	mov.w	r3, #0
 8006462:	018b      	lsls	r3, r1, #6
 8006464:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006468:	0182      	lsls	r2, r0, #6
 800646a:	1a12      	subs	r2, r2, r0
 800646c:	eb63 0301 	sbc.w	r3, r3, r1
 8006470:	f04f 0000 	mov.w	r0, #0
 8006474:	f04f 0100 	mov.w	r1, #0
 8006478:	00d9      	lsls	r1, r3, #3
 800647a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800647e:	00d0      	lsls	r0, r2, #3
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	eb12 0208 	adds.w	r2, r2, r8
 8006488:	eb43 0309 	adc.w	r3, r3, r9
 800648c:	f04f 0000 	mov.w	r0, #0
 8006490:	f04f 0100 	mov.w	r1, #0
 8006494:	0259      	lsls	r1, r3, #9
 8006496:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800649a:	0250      	lsls	r0, r2, #9
 800649c:	4602      	mov	r2, r0
 800649e:	460b      	mov	r3, r1
 80064a0:	4610      	mov	r0, r2
 80064a2:	4619      	mov	r1, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	461a      	mov	r2, r3
 80064a8:	f04f 0300 	mov.w	r3, #0
 80064ac:	f7fa fbd4 	bl	8000c58 <__aeabi_uldivmod>
 80064b0:	4602      	mov	r2, r0
 80064b2:	460b      	mov	r3, r1
 80064b4:	4613      	mov	r3, r2
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	e04a      	b.n	8006550 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064ba:	4b31      	ldr	r3, [pc, #196]	; (8006580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	099b      	lsrs	r3, r3, #6
 80064c0:	461a      	mov	r2, r3
 80064c2:	f04f 0300 	mov.w	r3, #0
 80064c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80064ca:	f04f 0100 	mov.w	r1, #0
 80064ce:	ea02 0400 	and.w	r4, r2, r0
 80064d2:	ea03 0501 	and.w	r5, r3, r1
 80064d6:	4620      	mov	r0, r4
 80064d8:	4629      	mov	r1, r5
 80064da:	f04f 0200 	mov.w	r2, #0
 80064de:	f04f 0300 	mov.w	r3, #0
 80064e2:	014b      	lsls	r3, r1, #5
 80064e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80064e8:	0142      	lsls	r2, r0, #5
 80064ea:	4610      	mov	r0, r2
 80064ec:	4619      	mov	r1, r3
 80064ee:	1b00      	subs	r0, r0, r4
 80064f0:	eb61 0105 	sbc.w	r1, r1, r5
 80064f4:	f04f 0200 	mov.w	r2, #0
 80064f8:	f04f 0300 	mov.w	r3, #0
 80064fc:	018b      	lsls	r3, r1, #6
 80064fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006502:	0182      	lsls	r2, r0, #6
 8006504:	1a12      	subs	r2, r2, r0
 8006506:	eb63 0301 	sbc.w	r3, r3, r1
 800650a:	f04f 0000 	mov.w	r0, #0
 800650e:	f04f 0100 	mov.w	r1, #0
 8006512:	00d9      	lsls	r1, r3, #3
 8006514:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006518:	00d0      	lsls	r0, r2, #3
 800651a:	4602      	mov	r2, r0
 800651c:	460b      	mov	r3, r1
 800651e:	1912      	adds	r2, r2, r4
 8006520:	eb45 0303 	adc.w	r3, r5, r3
 8006524:	f04f 0000 	mov.w	r0, #0
 8006528:	f04f 0100 	mov.w	r1, #0
 800652c:	0299      	lsls	r1, r3, #10
 800652e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006532:	0290      	lsls	r0, r2, #10
 8006534:	4602      	mov	r2, r0
 8006536:	460b      	mov	r3, r1
 8006538:	4610      	mov	r0, r2
 800653a:	4619      	mov	r1, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	461a      	mov	r2, r3
 8006540:	f04f 0300 	mov.w	r3, #0
 8006544:	f7fa fb88 	bl	8000c58 <__aeabi_uldivmod>
 8006548:	4602      	mov	r2, r0
 800654a:	460b      	mov	r3, r1
 800654c:	4613      	mov	r3, r2
 800654e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006550:	4b0b      	ldr	r3, [pc, #44]	; (8006580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	0c1b      	lsrs	r3, r3, #16
 8006556:	f003 0303 	and.w	r3, r3, #3
 800655a:	3301      	adds	r3, #1
 800655c:	005b      	lsls	r3, r3, #1
 800655e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	fbb2 f3f3 	udiv	r3, r2, r3
 8006568:	60bb      	str	r3, [r7, #8]
      break;
 800656a:	e002      	b.n	8006572 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800656c:	4b05      	ldr	r3, [pc, #20]	; (8006584 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800656e:	60bb      	str	r3, [r7, #8]
      break;
 8006570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006572:	68bb      	ldr	r3, [r7, #8]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800657e:	bf00      	nop
 8006580:	40023800 	.word	0x40023800
 8006584:	00f42400 	.word	0x00f42400
 8006588:	007a1200 	.word	0x007a1200

0800658c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800658c:	b480      	push	{r7}
 800658e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006590:	4b03      	ldr	r3, [pc, #12]	; (80065a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006592:	681b      	ldr	r3, [r3, #0]
}
 8006594:	4618      	mov	r0, r3
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	20000004 	.word	0x20000004

080065a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80065a8:	f7ff fff0 	bl	800658c <HAL_RCC_GetHCLKFreq>
 80065ac:	4602      	mov	r2, r0
 80065ae:	4b05      	ldr	r3, [pc, #20]	; (80065c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	0a9b      	lsrs	r3, r3, #10
 80065b4:	f003 0307 	and.w	r3, r3, #7
 80065b8:	4903      	ldr	r1, [pc, #12]	; (80065c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065ba:	5ccb      	ldrb	r3, [r1, r3]
 80065bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	40023800 	.word	0x40023800
 80065c8:	080099d8 	.word	0x080099d8

080065cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065d0:	f7ff ffdc 	bl	800658c <HAL_RCC_GetHCLKFreq>
 80065d4:	4602      	mov	r2, r0
 80065d6:	4b05      	ldr	r3, [pc, #20]	; (80065ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	0b5b      	lsrs	r3, r3, #13
 80065dc:	f003 0307 	and.w	r3, r3, #7
 80065e0:	4903      	ldr	r1, [pc, #12]	; (80065f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065e2:	5ccb      	ldrb	r3, [r1, r3]
 80065e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	40023800 	.word	0x40023800
 80065f0:	080099d8 	.word	0x080099d8

080065f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e03f      	b.n	8006686 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d106      	bne.n	8006620 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7fb fe48 	bl	80022b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2224      	movs	r2, #36	; 0x24
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68da      	ldr	r2, [r3, #12]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006636:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f829 	bl	8006690 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	691a      	ldr	r2, [r3, #16]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800664c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	695a      	ldr	r2, [r3, #20]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800665c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68da      	ldr	r2, [r3, #12]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800666c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2220      	movs	r2, #32
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2220      	movs	r2, #32
 8006680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006694:	b09f      	sub	sp, #124	; 0x7c
 8006696:	af00      	add	r7, sp, #0
 8006698:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800669a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80066a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a6:	68d9      	ldr	r1, [r3, #12]
 80066a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	ea40 0301 	orr.w	r3, r0, r1
 80066b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b4:	689a      	ldr	r2, [r3, #8]
 80066b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	431a      	orrs	r2, r3
 80066bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	431a      	orrs	r2, r3
 80066c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066c4:	69db      	ldr	r3, [r3, #28]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80066ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066d4:	f021 010c 	bic.w	r1, r1, #12
 80066d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066de:	430b      	orrs	r3, r1
 80066e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ee:	6999      	ldr	r1, [r3, #24]
 80066f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	ea40 0301 	orr.w	r3, r0, r1
 80066f8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	4bc5      	ldr	r3, [pc, #788]	; (8006a14 <UART_SetConfig+0x384>)
 8006700:	429a      	cmp	r2, r3
 8006702:	d004      	beq.n	800670e <UART_SetConfig+0x7e>
 8006704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	4bc3      	ldr	r3, [pc, #780]	; (8006a18 <UART_SetConfig+0x388>)
 800670a:	429a      	cmp	r2, r3
 800670c:	d103      	bne.n	8006716 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800670e:	f7ff ff5d 	bl	80065cc <HAL_RCC_GetPCLK2Freq>
 8006712:	6778      	str	r0, [r7, #116]	; 0x74
 8006714:	e002      	b.n	800671c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006716:	f7ff ff45 	bl	80065a4 <HAL_RCC_GetPCLK1Freq>
 800671a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800671c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006724:	f040 80b6 	bne.w	8006894 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006728:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800672a:	461c      	mov	r4, r3
 800672c:	f04f 0500 	mov.w	r5, #0
 8006730:	4622      	mov	r2, r4
 8006732:	462b      	mov	r3, r5
 8006734:	1891      	adds	r1, r2, r2
 8006736:	6439      	str	r1, [r7, #64]	; 0x40
 8006738:	415b      	adcs	r3, r3
 800673a:	647b      	str	r3, [r7, #68]	; 0x44
 800673c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006740:	1912      	adds	r2, r2, r4
 8006742:	eb45 0303 	adc.w	r3, r5, r3
 8006746:	f04f 0000 	mov.w	r0, #0
 800674a:	f04f 0100 	mov.w	r1, #0
 800674e:	00d9      	lsls	r1, r3, #3
 8006750:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006754:	00d0      	lsls	r0, r2, #3
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	1911      	adds	r1, r2, r4
 800675c:	6639      	str	r1, [r7, #96]	; 0x60
 800675e:	416b      	adcs	r3, r5
 8006760:	667b      	str	r3, [r7, #100]	; 0x64
 8006762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	461a      	mov	r2, r3
 8006768:	f04f 0300 	mov.w	r3, #0
 800676c:	1891      	adds	r1, r2, r2
 800676e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006770:	415b      	adcs	r3, r3
 8006772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006774:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006778:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800677c:	f7fa fa6c 	bl	8000c58 <__aeabi_uldivmod>
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	4ba5      	ldr	r3, [pc, #660]	; (8006a1c <UART_SetConfig+0x38c>)
 8006786:	fba3 2302 	umull	r2, r3, r3, r2
 800678a:	095b      	lsrs	r3, r3, #5
 800678c:	011e      	lsls	r6, r3, #4
 800678e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006790:	461c      	mov	r4, r3
 8006792:	f04f 0500 	mov.w	r5, #0
 8006796:	4622      	mov	r2, r4
 8006798:	462b      	mov	r3, r5
 800679a:	1891      	adds	r1, r2, r2
 800679c:	6339      	str	r1, [r7, #48]	; 0x30
 800679e:	415b      	adcs	r3, r3
 80067a0:	637b      	str	r3, [r7, #52]	; 0x34
 80067a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80067a6:	1912      	adds	r2, r2, r4
 80067a8:	eb45 0303 	adc.w	r3, r5, r3
 80067ac:	f04f 0000 	mov.w	r0, #0
 80067b0:	f04f 0100 	mov.w	r1, #0
 80067b4:	00d9      	lsls	r1, r3, #3
 80067b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80067ba:	00d0      	lsls	r0, r2, #3
 80067bc:	4602      	mov	r2, r0
 80067be:	460b      	mov	r3, r1
 80067c0:	1911      	adds	r1, r2, r4
 80067c2:	65b9      	str	r1, [r7, #88]	; 0x58
 80067c4:	416b      	adcs	r3, r5
 80067c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	461a      	mov	r2, r3
 80067ce:	f04f 0300 	mov.w	r3, #0
 80067d2:	1891      	adds	r1, r2, r2
 80067d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80067d6:	415b      	adcs	r3, r3
 80067d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80067e2:	f7fa fa39 	bl	8000c58 <__aeabi_uldivmod>
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	4b8c      	ldr	r3, [pc, #560]	; (8006a1c <UART_SetConfig+0x38c>)
 80067ec:	fba3 1302 	umull	r1, r3, r3, r2
 80067f0:	095b      	lsrs	r3, r3, #5
 80067f2:	2164      	movs	r1, #100	; 0x64
 80067f4:	fb01 f303 	mul.w	r3, r1, r3
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	00db      	lsls	r3, r3, #3
 80067fc:	3332      	adds	r3, #50	; 0x32
 80067fe:	4a87      	ldr	r2, [pc, #540]	; (8006a1c <UART_SetConfig+0x38c>)
 8006800:	fba2 2303 	umull	r2, r3, r2, r3
 8006804:	095b      	lsrs	r3, r3, #5
 8006806:	005b      	lsls	r3, r3, #1
 8006808:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800680c:	441e      	add	r6, r3
 800680e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006810:	4618      	mov	r0, r3
 8006812:	f04f 0100 	mov.w	r1, #0
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	1894      	adds	r4, r2, r2
 800681c:	623c      	str	r4, [r7, #32]
 800681e:	415b      	adcs	r3, r3
 8006820:	627b      	str	r3, [r7, #36]	; 0x24
 8006822:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006826:	1812      	adds	r2, r2, r0
 8006828:	eb41 0303 	adc.w	r3, r1, r3
 800682c:	f04f 0400 	mov.w	r4, #0
 8006830:	f04f 0500 	mov.w	r5, #0
 8006834:	00dd      	lsls	r5, r3, #3
 8006836:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800683a:	00d4      	lsls	r4, r2, #3
 800683c:	4622      	mov	r2, r4
 800683e:	462b      	mov	r3, r5
 8006840:	1814      	adds	r4, r2, r0
 8006842:	653c      	str	r4, [r7, #80]	; 0x50
 8006844:	414b      	adcs	r3, r1
 8006846:	657b      	str	r3, [r7, #84]	; 0x54
 8006848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	461a      	mov	r2, r3
 800684e:	f04f 0300 	mov.w	r3, #0
 8006852:	1891      	adds	r1, r2, r2
 8006854:	61b9      	str	r1, [r7, #24]
 8006856:	415b      	adcs	r3, r3
 8006858:	61fb      	str	r3, [r7, #28]
 800685a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800685e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006862:	f7fa f9f9 	bl	8000c58 <__aeabi_uldivmod>
 8006866:	4602      	mov	r2, r0
 8006868:	460b      	mov	r3, r1
 800686a:	4b6c      	ldr	r3, [pc, #432]	; (8006a1c <UART_SetConfig+0x38c>)
 800686c:	fba3 1302 	umull	r1, r3, r3, r2
 8006870:	095b      	lsrs	r3, r3, #5
 8006872:	2164      	movs	r1, #100	; 0x64
 8006874:	fb01 f303 	mul.w	r3, r1, r3
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	00db      	lsls	r3, r3, #3
 800687c:	3332      	adds	r3, #50	; 0x32
 800687e:	4a67      	ldr	r2, [pc, #412]	; (8006a1c <UART_SetConfig+0x38c>)
 8006880:	fba2 2303 	umull	r2, r3, r2, r3
 8006884:	095b      	lsrs	r3, r3, #5
 8006886:	f003 0207 	and.w	r2, r3, #7
 800688a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4432      	add	r2, r6
 8006890:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006892:	e0b9      	b.n	8006a08 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006896:	461c      	mov	r4, r3
 8006898:	f04f 0500 	mov.w	r5, #0
 800689c:	4622      	mov	r2, r4
 800689e:	462b      	mov	r3, r5
 80068a0:	1891      	adds	r1, r2, r2
 80068a2:	6139      	str	r1, [r7, #16]
 80068a4:	415b      	adcs	r3, r3
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80068ac:	1912      	adds	r2, r2, r4
 80068ae:	eb45 0303 	adc.w	r3, r5, r3
 80068b2:	f04f 0000 	mov.w	r0, #0
 80068b6:	f04f 0100 	mov.w	r1, #0
 80068ba:	00d9      	lsls	r1, r3, #3
 80068bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80068c0:	00d0      	lsls	r0, r2, #3
 80068c2:	4602      	mov	r2, r0
 80068c4:	460b      	mov	r3, r1
 80068c6:	eb12 0804 	adds.w	r8, r2, r4
 80068ca:	eb43 0905 	adc.w	r9, r3, r5
 80068ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f04f 0100 	mov.w	r1, #0
 80068d8:	f04f 0200 	mov.w	r2, #0
 80068dc:	f04f 0300 	mov.w	r3, #0
 80068e0:	008b      	lsls	r3, r1, #2
 80068e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80068e6:	0082      	lsls	r2, r0, #2
 80068e8:	4640      	mov	r0, r8
 80068ea:	4649      	mov	r1, r9
 80068ec:	f7fa f9b4 	bl	8000c58 <__aeabi_uldivmod>
 80068f0:	4602      	mov	r2, r0
 80068f2:	460b      	mov	r3, r1
 80068f4:	4b49      	ldr	r3, [pc, #292]	; (8006a1c <UART_SetConfig+0x38c>)
 80068f6:	fba3 2302 	umull	r2, r3, r3, r2
 80068fa:	095b      	lsrs	r3, r3, #5
 80068fc:	011e      	lsls	r6, r3, #4
 80068fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006900:	4618      	mov	r0, r3
 8006902:	f04f 0100 	mov.w	r1, #0
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	1894      	adds	r4, r2, r2
 800690c:	60bc      	str	r4, [r7, #8]
 800690e:	415b      	adcs	r3, r3
 8006910:	60fb      	str	r3, [r7, #12]
 8006912:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006916:	1812      	adds	r2, r2, r0
 8006918:	eb41 0303 	adc.w	r3, r1, r3
 800691c:	f04f 0400 	mov.w	r4, #0
 8006920:	f04f 0500 	mov.w	r5, #0
 8006924:	00dd      	lsls	r5, r3, #3
 8006926:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800692a:	00d4      	lsls	r4, r2, #3
 800692c:	4622      	mov	r2, r4
 800692e:	462b      	mov	r3, r5
 8006930:	1814      	adds	r4, r2, r0
 8006932:	64bc      	str	r4, [r7, #72]	; 0x48
 8006934:	414b      	adcs	r3, r1
 8006936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	4618      	mov	r0, r3
 800693e:	f04f 0100 	mov.w	r1, #0
 8006942:	f04f 0200 	mov.w	r2, #0
 8006946:	f04f 0300 	mov.w	r3, #0
 800694a:	008b      	lsls	r3, r1, #2
 800694c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006950:	0082      	lsls	r2, r0, #2
 8006952:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006956:	f7fa f97f 	bl	8000c58 <__aeabi_uldivmod>
 800695a:	4602      	mov	r2, r0
 800695c:	460b      	mov	r3, r1
 800695e:	4b2f      	ldr	r3, [pc, #188]	; (8006a1c <UART_SetConfig+0x38c>)
 8006960:	fba3 1302 	umull	r1, r3, r3, r2
 8006964:	095b      	lsrs	r3, r3, #5
 8006966:	2164      	movs	r1, #100	; 0x64
 8006968:	fb01 f303 	mul.w	r3, r1, r3
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	011b      	lsls	r3, r3, #4
 8006970:	3332      	adds	r3, #50	; 0x32
 8006972:	4a2a      	ldr	r2, [pc, #168]	; (8006a1c <UART_SetConfig+0x38c>)
 8006974:	fba2 2303 	umull	r2, r3, r2, r3
 8006978:	095b      	lsrs	r3, r3, #5
 800697a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800697e:	441e      	add	r6, r3
 8006980:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006982:	4618      	mov	r0, r3
 8006984:	f04f 0100 	mov.w	r1, #0
 8006988:	4602      	mov	r2, r0
 800698a:	460b      	mov	r3, r1
 800698c:	1894      	adds	r4, r2, r2
 800698e:	603c      	str	r4, [r7, #0]
 8006990:	415b      	adcs	r3, r3
 8006992:	607b      	str	r3, [r7, #4]
 8006994:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006998:	1812      	adds	r2, r2, r0
 800699a:	eb41 0303 	adc.w	r3, r1, r3
 800699e:	f04f 0400 	mov.w	r4, #0
 80069a2:	f04f 0500 	mov.w	r5, #0
 80069a6:	00dd      	lsls	r5, r3, #3
 80069a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80069ac:	00d4      	lsls	r4, r2, #3
 80069ae:	4622      	mov	r2, r4
 80069b0:	462b      	mov	r3, r5
 80069b2:	eb12 0a00 	adds.w	sl, r2, r0
 80069b6:	eb43 0b01 	adc.w	fp, r3, r1
 80069ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	4618      	mov	r0, r3
 80069c0:	f04f 0100 	mov.w	r1, #0
 80069c4:	f04f 0200 	mov.w	r2, #0
 80069c8:	f04f 0300 	mov.w	r3, #0
 80069cc:	008b      	lsls	r3, r1, #2
 80069ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80069d2:	0082      	lsls	r2, r0, #2
 80069d4:	4650      	mov	r0, sl
 80069d6:	4659      	mov	r1, fp
 80069d8:	f7fa f93e 	bl	8000c58 <__aeabi_uldivmod>
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	4b0e      	ldr	r3, [pc, #56]	; (8006a1c <UART_SetConfig+0x38c>)
 80069e2:	fba3 1302 	umull	r1, r3, r3, r2
 80069e6:	095b      	lsrs	r3, r3, #5
 80069e8:	2164      	movs	r1, #100	; 0x64
 80069ea:	fb01 f303 	mul.w	r3, r1, r3
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	011b      	lsls	r3, r3, #4
 80069f2:	3332      	adds	r3, #50	; 0x32
 80069f4:	4a09      	ldr	r2, [pc, #36]	; (8006a1c <UART_SetConfig+0x38c>)
 80069f6:	fba2 2303 	umull	r2, r3, r2, r3
 80069fa:	095b      	lsrs	r3, r3, #5
 80069fc:	f003 020f 	and.w	r2, r3, #15
 8006a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4432      	add	r2, r6
 8006a06:	609a      	str	r2, [r3, #8]
}
 8006a08:	bf00      	nop
 8006a0a:	377c      	adds	r7, #124	; 0x7c
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a12:	bf00      	nop
 8006a14:	40011000 	.word	0x40011000
 8006a18:	40011400 	.word	0x40011400
 8006a1c:	51eb851f 	.word	0x51eb851f

08006a20 <__errno>:
 8006a20:	4b01      	ldr	r3, [pc, #4]	; (8006a28 <__errno+0x8>)
 8006a22:	6818      	ldr	r0, [r3, #0]
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	20000010 	.word	0x20000010

08006a2c <__libc_init_array>:
 8006a2c:	b570      	push	{r4, r5, r6, lr}
 8006a2e:	4d0d      	ldr	r5, [pc, #52]	; (8006a64 <__libc_init_array+0x38>)
 8006a30:	4c0d      	ldr	r4, [pc, #52]	; (8006a68 <__libc_init_array+0x3c>)
 8006a32:	1b64      	subs	r4, r4, r5
 8006a34:	10a4      	asrs	r4, r4, #2
 8006a36:	2600      	movs	r6, #0
 8006a38:	42a6      	cmp	r6, r4
 8006a3a:	d109      	bne.n	8006a50 <__libc_init_array+0x24>
 8006a3c:	4d0b      	ldr	r5, [pc, #44]	; (8006a6c <__libc_init_array+0x40>)
 8006a3e:	4c0c      	ldr	r4, [pc, #48]	; (8006a70 <__libc_init_array+0x44>)
 8006a40:	f002 feb4 	bl	80097ac <_init>
 8006a44:	1b64      	subs	r4, r4, r5
 8006a46:	10a4      	asrs	r4, r4, #2
 8006a48:	2600      	movs	r6, #0
 8006a4a:	42a6      	cmp	r6, r4
 8006a4c:	d105      	bne.n	8006a5a <__libc_init_array+0x2e>
 8006a4e:	bd70      	pop	{r4, r5, r6, pc}
 8006a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a54:	4798      	blx	r3
 8006a56:	3601      	adds	r6, #1
 8006a58:	e7ee      	b.n	8006a38 <__libc_init_array+0xc>
 8006a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a5e:	4798      	blx	r3
 8006a60:	3601      	adds	r6, #1
 8006a62:	e7f2      	b.n	8006a4a <__libc_init_array+0x1e>
 8006a64:	08009dd4 	.word	0x08009dd4
 8006a68:	08009dd4 	.word	0x08009dd4
 8006a6c:	08009dd4 	.word	0x08009dd4
 8006a70:	08009dd8 	.word	0x08009dd8

08006a74 <memset>:
 8006a74:	4402      	add	r2, r0
 8006a76:	4603      	mov	r3, r0
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d100      	bne.n	8006a7e <memset+0xa>
 8006a7c:	4770      	bx	lr
 8006a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a82:	e7f9      	b.n	8006a78 <memset+0x4>

08006a84 <__cvt>:
 8006a84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a88:	ec55 4b10 	vmov	r4, r5, d0
 8006a8c:	2d00      	cmp	r5, #0
 8006a8e:	460e      	mov	r6, r1
 8006a90:	4619      	mov	r1, r3
 8006a92:	462b      	mov	r3, r5
 8006a94:	bfbb      	ittet	lt
 8006a96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a9a:	461d      	movlt	r5, r3
 8006a9c:	2300      	movge	r3, #0
 8006a9e:	232d      	movlt	r3, #45	; 0x2d
 8006aa0:	700b      	strb	r3, [r1, #0]
 8006aa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006aa4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006aa8:	4691      	mov	r9, r2
 8006aaa:	f023 0820 	bic.w	r8, r3, #32
 8006aae:	bfbc      	itt	lt
 8006ab0:	4622      	movlt	r2, r4
 8006ab2:	4614      	movlt	r4, r2
 8006ab4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ab8:	d005      	beq.n	8006ac6 <__cvt+0x42>
 8006aba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006abe:	d100      	bne.n	8006ac2 <__cvt+0x3e>
 8006ac0:	3601      	adds	r6, #1
 8006ac2:	2102      	movs	r1, #2
 8006ac4:	e000      	b.n	8006ac8 <__cvt+0x44>
 8006ac6:	2103      	movs	r1, #3
 8006ac8:	ab03      	add	r3, sp, #12
 8006aca:	9301      	str	r3, [sp, #4]
 8006acc:	ab02      	add	r3, sp, #8
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	ec45 4b10 	vmov	d0, r4, r5
 8006ad4:	4653      	mov	r3, sl
 8006ad6:	4632      	mov	r2, r6
 8006ad8:	f000 fcea 	bl	80074b0 <_dtoa_r>
 8006adc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ae0:	4607      	mov	r7, r0
 8006ae2:	d102      	bne.n	8006aea <__cvt+0x66>
 8006ae4:	f019 0f01 	tst.w	r9, #1
 8006ae8:	d022      	beq.n	8006b30 <__cvt+0xac>
 8006aea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006aee:	eb07 0906 	add.w	r9, r7, r6
 8006af2:	d110      	bne.n	8006b16 <__cvt+0x92>
 8006af4:	783b      	ldrb	r3, [r7, #0]
 8006af6:	2b30      	cmp	r3, #48	; 0x30
 8006af8:	d10a      	bne.n	8006b10 <__cvt+0x8c>
 8006afa:	2200      	movs	r2, #0
 8006afc:	2300      	movs	r3, #0
 8006afe:	4620      	mov	r0, r4
 8006b00:	4629      	mov	r1, r5
 8006b02:	f7f9 ffe9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b06:	b918      	cbnz	r0, 8006b10 <__cvt+0x8c>
 8006b08:	f1c6 0601 	rsb	r6, r6, #1
 8006b0c:	f8ca 6000 	str.w	r6, [sl]
 8006b10:	f8da 3000 	ldr.w	r3, [sl]
 8006b14:	4499      	add	r9, r3
 8006b16:	2200      	movs	r2, #0
 8006b18:	2300      	movs	r3, #0
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	4629      	mov	r1, r5
 8006b1e:	f7f9 ffdb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b22:	b108      	cbz	r0, 8006b28 <__cvt+0xa4>
 8006b24:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b28:	2230      	movs	r2, #48	; 0x30
 8006b2a:	9b03      	ldr	r3, [sp, #12]
 8006b2c:	454b      	cmp	r3, r9
 8006b2e:	d307      	bcc.n	8006b40 <__cvt+0xbc>
 8006b30:	9b03      	ldr	r3, [sp, #12]
 8006b32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b34:	1bdb      	subs	r3, r3, r7
 8006b36:	4638      	mov	r0, r7
 8006b38:	6013      	str	r3, [r2, #0]
 8006b3a:	b004      	add	sp, #16
 8006b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b40:	1c59      	adds	r1, r3, #1
 8006b42:	9103      	str	r1, [sp, #12]
 8006b44:	701a      	strb	r2, [r3, #0]
 8006b46:	e7f0      	b.n	8006b2a <__cvt+0xa6>

08006b48 <__exponent>:
 8006b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2900      	cmp	r1, #0
 8006b4e:	bfb8      	it	lt
 8006b50:	4249      	neglt	r1, r1
 8006b52:	f803 2b02 	strb.w	r2, [r3], #2
 8006b56:	bfb4      	ite	lt
 8006b58:	222d      	movlt	r2, #45	; 0x2d
 8006b5a:	222b      	movge	r2, #43	; 0x2b
 8006b5c:	2909      	cmp	r1, #9
 8006b5e:	7042      	strb	r2, [r0, #1]
 8006b60:	dd2a      	ble.n	8006bb8 <__exponent+0x70>
 8006b62:	f10d 0407 	add.w	r4, sp, #7
 8006b66:	46a4      	mov	ip, r4
 8006b68:	270a      	movs	r7, #10
 8006b6a:	46a6      	mov	lr, r4
 8006b6c:	460a      	mov	r2, r1
 8006b6e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006b72:	fb07 1516 	mls	r5, r7, r6, r1
 8006b76:	3530      	adds	r5, #48	; 0x30
 8006b78:	2a63      	cmp	r2, #99	; 0x63
 8006b7a:	f104 34ff 	add.w	r4, r4, #4294967295
 8006b7e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006b82:	4631      	mov	r1, r6
 8006b84:	dcf1      	bgt.n	8006b6a <__exponent+0x22>
 8006b86:	3130      	adds	r1, #48	; 0x30
 8006b88:	f1ae 0502 	sub.w	r5, lr, #2
 8006b8c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006b90:	1c44      	adds	r4, r0, #1
 8006b92:	4629      	mov	r1, r5
 8006b94:	4561      	cmp	r1, ip
 8006b96:	d30a      	bcc.n	8006bae <__exponent+0x66>
 8006b98:	f10d 0209 	add.w	r2, sp, #9
 8006b9c:	eba2 020e 	sub.w	r2, r2, lr
 8006ba0:	4565      	cmp	r5, ip
 8006ba2:	bf88      	it	hi
 8006ba4:	2200      	movhi	r2, #0
 8006ba6:	4413      	add	r3, r2
 8006ba8:	1a18      	subs	r0, r3, r0
 8006baa:	b003      	add	sp, #12
 8006bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bb2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006bb6:	e7ed      	b.n	8006b94 <__exponent+0x4c>
 8006bb8:	2330      	movs	r3, #48	; 0x30
 8006bba:	3130      	adds	r1, #48	; 0x30
 8006bbc:	7083      	strb	r3, [r0, #2]
 8006bbe:	70c1      	strb	r1, [r0, #3]
 8006bc0:	1d03      	adds	r3, r0, #4
 8006bc2:	e7f1      	b.n	8006ba8 <__exponent+0x60>

08006bc4 <_printf_float>:
 8006bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc8:	ed2d 8b02 	vpush	{d8}
 8006bcc:	b08d      	sub	sp, #52	; 0x34
 8006bce:	460c      	mov	r4, r1
 8006bd0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006bd4:	4616      	mov	r6, r2
 8006bd6:	461f      	mov	r7, r3
 8006bd8:	4605      	mov	r5, r0
 8006bda:	f001 fa55 	bl	8008088 <_localeconv_r>
 8006bde:	f8d0 a000 	ldr.w	sl, [r0]
 8006be2:	4650      	mov	r0, sl
 8006be4:	f7f9 fafc 	bl	80001e0 <strlen>
 8006be8:	2300      	movs	r3, #0
 8006bea:	930a      	str	r3, [sp, #40]	; 0x28
 8006bec:	6823      	ldr	r3, [r4, #0]
 8006bee:	9305      	str	r3, [sp, #20]
 8006bf0:	f8d8 3000 	ldr.w	r3, [r8]
 8006bf4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006bf8:	3307      	adds	r3, #7
 8006bfa:	f023 0307 	bic.w	r3, r3, #7
 8006bfe:	f103 0208 	add.w	r2, r3, #8
 8006c02:	f8c8 2000 	str.w	r2, [r8]
 8006c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006c0e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006c12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c16:	9307      	str	r3, [sp, #28]
 8006c18:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c1c:	ee08 0a10 	vmov	s16, r0
 8006c20:	4b9f      	ldr	r3, [pc, #636]	; (8006ea0 <_printf_float+0x2dc>)
 8006c22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c26:	f04f 32ff 	mov.w	r2, #4294967295
 8006c2a:	f7f9 ff87 	bl	8000b3c <__aeabi_dcmpun>
 8006c2e:	bb88      	cbnz	r0, 8006c94 <_printf_float+0xd0>
 8006c30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c34:	4b9a      	ldr	r3, [pc, #616]	; (8006ea0 <_printf_float+0x2dc>)
 8006c36:	f04f 32ff 	mov.w	r2, #4294967295
 8006c3a:	f7f9 ff61 	bl	8000b00 <__aeabi_dcmple>
 8006c3e:	bb48      	cbnz	r0, 8006c94 <_printf_float+0xd0>
 8006c40:	2200      	movs	r2, #0
 8006c42:	2300      	movs	r3, #0
 8006c44:	4640      	mov	r0, r8
 8006c46:	4649      	mov	r1, r9
 8006c48:	f7f9 ff50 	bl	8000aec <__aeabi_dcmplt>
 8006c4c:	b110      	cbz	r0, 8006c54 <_printf_float+0x90>
 8006c4e:	232d      	movs	r3, #45	; 0x2d
 8006c50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c54:	4b93      	ldr	r3, [pc, #588]	; (8006ea4 <_printf_float+0x2e0>)
 8006c56:	4894      	ldr	r0, [pc, #592]	; (8006ea8 <_printf_float+0x2e4>)
 8006c58:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006c5c:	bf94      	ite	ls
 8006c5e:	4698      	movls	r8, r3
 8006c60:	4680      	movhi	r8, r0
 8006c62:	2303      	movs	r3, #3
 8006c64:	6123      	str	r3, [r4, #16]
 8006c66:	9b05      	ldr	r3, [sp, #20]
 8006c68:	f023 0204 	bic.w	r2, r3, #4
 8006c6c:	6022      	str	r2, [r4, #0]
 8006c6e:	f04f 0900 	mov.w	r9, #0
 8006c72:	9700      	str	r7, [sp, #0]
 8006c74:	4633      	mov	r3, r6
 8006c76:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c78:	4621      	mov	r1, r4
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	f000 f9d8 	bl	8007030 <_printf_common>
 8006c80:	3001      	adds	r0, #1
 8006c82:	f040 8090 	bne.w	8006da6 <_printf_float+0x1e2>
 8006c86:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8a:	b00d      	add	sp, #52	; 0x34
 8006c8c:	ecbd 8b02 	vpop	{d8}
 8006c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c94:	4642      	mov	r2, r8
 8006c96:	464b      	mov	r3, r9
 8006c98:	4640      	mov	r0, r8
 8006c9a:	4649      	mov	r1, r9
 8006c9c:	f7f9 ff4e 	bl	8000b3c <__aeabi_dcmpun>
 8006ca0:	b140      	cbz	r0, 8006cb4 <_printf_float+0xf0>
 8006ca2:	464b      	mov	r3, r9
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	bfbc      	itt	lt
 8006ca8:	232d      	movlt	r3, #45	; 0x2d
 8006caa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006cae:	487f      	ldr	r0, [pc, #508]	; (8006eac <_printf_float+0x2e8>)
 8006cb0:	4b7f      	ldr	r3, [pc, #508]	; (8006eb0 <_printf_float+0x2ec>)
 8006cb2:	e7d1      	b.n	8006c58 <_printf_float+0x94>
 8006cb4:	6863      	ldr	r3, [r4, #4]
 8006cb6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006cba:	9206      	str	r2, [sp, #24]
 8006cbc:	1c5a      	adds	r2, r3, #1
 8006cbe:	d13f      	bne.n	8006d40 <_printf_float+0x17c>
 8006cc0:	2306      	movs	r3, #6
 8006cc2:	6063      	str	r3, [r4, #4]
 8006cc4:	9b05      	ldr	r3, [sp, #20]
 8006cc6:	6861      	ldr	r1, [r4, #4]
 8006cc8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006ccc:	2300      	movs	r3, #0
 8006cce:	9303      	str	r3, [sp, #12]
 8006cd0:	ab0a      	add	r3, sp, #40	; 0x28
 8006cd2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006cd6:	ab09      	add	r3, sp, #36	; 0x24
 8006cd8:	ec49 8b10 	vmov	d0, r8, r9
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	6022      	str	r2, [r4, #0]
 8006ce0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	f7ff fecd 	bl	8006a84 <__cvt>
 8006cea:	9b06      	ldr	r3, [sp, #24]
 8006cec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cee:	2b47      	cmp	r3, #71	; 0x47
 8006cf0:	4680      	mov	r8, r0
 8006cf2:	d108      	bne.n	8006d06 <_printf_float+0x142>
 8006cf4:	1cc8      	adds	r0, r1, #3
 8006cf6:	db02      	blt.n	8006cfe <_printf_float+0x13a>
 8006cf8:	6863      	ldr	r3, [r4, #4]
 8006cfa:	4299      	cmp	r1, r3
 8006cfc:	dd41      	ble.n	8006d82 <_printf_float+0x1be>
 8006cfe:	f1ab 0b02 	sub.w	fp, fp, #2
 8006d02:	fa5f fb8b 	uxtb.w	fp, fp
 8006d06:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d0a:	d820      	bhi.n	8006d4e <_printf_float+0x18a>
 8006d0c:	3901      	subs	r1, #1
 8006d0e:	465a      	mov	r2, fp
 8006d10:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d14:	9109      	str	r1, [sp, #36]	; 0x24
 8006d16:	f7ff ff17 	bl	8006b48 <__exponent>
 8006d1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d1c:	1813      	adds	r3, r2, r0
 8006d1e:	2a01      	cmp	r2, #1
 8006d20:	4681      	mov	r9, r0
 8006d22:	6123      	str	r3, [r4, #16]
 8006d24:	dc02      	bgt.n	8006d2c <_printf_float+0x168>
 8006d26:	6822      	ldr	r2, [r4, #0]
 8006d28:	07d2      	lsls	r2, r2, #31
 8006d2a:	d501      	bpl.n	8006d30 <_printf_float+0x16c>
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	6123      	str	r3, [r4, #16]
 8006d30:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d09c      	beq.n	8006c72 <_printf_float+0xae>
 8006d38:	232d      	movs	r3, #45	; 0x2d
 8006d3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d3e:	e798      	b.n	8006c72 <_printf_float+0xae>
 8006d40:	9a06      	ldr	r2, [sp, #24]
 8006d42:	2a47      	cmp	r2, #71	; 0x47
 8006d44:	d1be      	bne.n	8006cc4 <_printf_float+0x100>
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1bc      	bne.n	8006cc4 <_printf_float+0x100>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e7b9      	b.n	8006cc2 <_printf_float+0xfe>
 8006d4e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006d52:	d118      	bne.n	8006d86 <_printf_float+0x1c2>
 8006d54:	2900      	cmp	r1, #0
 8006d56:	6863      	ldr	r3, [r4, #4]
 8006d58:	dd0b      	ble.n	8006d72 <_printf_float+0x1ae>
 8006d5a:	6121      	str	r1, [r4, #16]
 8006d5c:	b913      	cbnz	r3, 8006d64 <_printf_float+0x1a0>
 8006d5e:	6822      	ldr	r2, [r4, #0]
 8006d60:	07d0      	lsls	r0, r2, #31
 8006d62:	d502      	bpl.n	8006d6a <_printf_float+0x1a6>
 8006d64:	3301      	adds	r3, #1
 8006d66:	440b      	add	r3, r1
 8006d68:	6123      	str	r3, [r4, #16]
 8006d6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d6c:	f04f 0900 	mov.w	r9, #0
 8006d70:	e7de      	b.n	8006d30 <_printf_float+0x16c>
 8006d72:	b913      	cbnz	r3, 8006d7a <_printf_float+0x1b6>
 8006d74:	6822      	ldr	r2, [r4, #0]
 8006d76:	07d2      	lsls	r2, r2, #31
 8006d78:	d501      	bpl.n	8006d7e <_printf_float+0x1ba>
 8006d7a:	3302      	adds	r3, #2
 8006d7c:	e7f4      	b.n	8006d68 <_printf_float+0x1a4>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e7f2      	b.n	8006d68 <_printf_float+0x1a4>
 8006d82:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d88:	4299      	cmp	r1, r3
 8006d8a:	db05      	blt.n	8006d98 <_printf_float+0x1d4>
 8006d8c:	6823      	ldr	r3, [r4, #0]
 8006d8e:	6121      	str	r1, [r4, #16]
 8006d90:	07d8      	lsls	r0, r3, #31
 8006d92:	d5ea      	bpl.n	8006d6a <_printf_float+0x1a6>
 8006d94:	1c4b      	adds	r3, r1, #1
 8006d96:	e7e7      	b.n	8006d68 <_printf_float+0x1a4>
 8006d98:	2900      	cmp	r1, #0
 8006d9a:	bfd4      	ite	le
 8006d9c:	f1c1 0202 	rsble	r2, r1, #2
 8006da0:	2201      	movgt	r2, #1
 8006da2:	4413      	add	r3, r2
 8006da4:	e7e0      	b.n	8006d68 <_printf_float+0x1a4>
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	055a      	lsls	r2, r3, #21
 8006daa:	d407      	bmi.n	8006dbc <_printf_float+0x1f8>
 8006dac:	6923      	ldr	r3, [r4, #16]
 8006dae:	4642      	mov	r2, r8
 8006db0:	4631      	mov	r1, r6
 8006db2:	4628      	mov	r0, r5
 8006db4:	47b8      	blx	r7
 8006db6:	3001      	adds	r0, #1
 8006db8:	d12c      	bne.n	8006e14 <_printf_float+0x250>
 8006dba:	e764      	b.n	8006c86 <_printf_float+0xc2>
 8006dbc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006dc0:	f240 80e0 	bls.w	8006f84 <_printf_float+0x3c0>
 8006dc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006dc8:	2200      	movs	r2, #0
 8006dca:	2300      	movs	r3, #0
 8006dcc:	f7f9 fe84 	bl	8000ad8 <__aeabi_dcmpeq>
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	d034      	beq.n	8006e3e <_printf_float+0x27a>
 8006dd4:	4a37      	ldr	r2, [pc, #220]	; (8006eb4 <_printf_float+0x2f0>)
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	4631      	mov	r1, r6
 8006dda:	4628      	mov	r0, r5
 8006ddc:	47b8      	blx	r7
 8006dde:	3001      	adds	r0, #1
 8006de0:	f43f af51 	beq.w	8006c86 <_printf_float+0xc2>
 8006de4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006de8:	429a      	cmp	r2, r3
 8006dea:	db02      	blt.n	8006df2 <_printf_float+0x22e>
 8006dec:	6823      	ldr	r3, [r4, #0]
 8006dee:	07d8      	lsls	r0, r3, #31
 8006df0:	d510      	bpl.n	8006e14 <_printf_float+0x250>
 8006df2:	ee18 3a10 	vmov	r3, s16
 8006df6:	4652      	mov	r2, sl
 8006df8:	4631      	mov	r1, r6
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	47b8      	blx	r7
 8006dfe:	3001      	adds	r0, #1
 8006e00:	f43f af41 	beq.w	8006c86 <_printf_float+0xc2>
 8006e04:	f04f 0800 	mov.w	r8, #0
 8006e08:	f104 091a 	add.w	r9, r4, #26
 8006e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	4543      	cmp	r3, r8
 8006e12:	dc09      	bgt.n	8006e28 <_printf_float+0x264>
 8006e14:	6823      	ldr	r3, [r4, #0]
 8006e16:	079b      	lsls	r3, r3, #30
 8006e18:	f100 8105 	bmi.w	8007026 <_printf_float+0x462>
 8006e1c:	68e0      	ldr	r0, [r4, #12]
 8006e1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e20:	4298      	cmp	r0, r3
 8006e22:	bfb8      	it	lt
 8006e24:	4618      	movlt	r0, r3
 8006e26:	e730      	b.n	8006c8a <_printf_float+0xc6>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	464a      	mov	r2, r9
 8006e2c:	4631      	mov	r1, r6
 8006e2e:	4628      	mov	r0, r5
 8006e30:	47b8      	blx	r7
 8006e32:	3001      	adds	r0, #1
 8006e34:	f43f af27 	beq.w	8006c86 <_printf_float+0xc2>
 8006e38:	f108 0801 	add.w	r8, r8, #1
 8006e3c:	e7e6      	b.n	8006e0c <_printf_float+0x248>
 8006e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	dc39      	bgt.n	8006eb8 <_printf_float+0x2f4>
 8006e44:	4a1b      	ldr	r2, [pc, #108]	; (8006eb4 <_printf_float+0x2f0>)
 8006e46:	2301      	movs	r3, #1
 8006e48:	4631      	mov	r1, r6
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	47b8      	blx	r7
 8006e4e:	3001      	adds	r0, #1
 8006e50:	f43f af19 	beq.w	8006c86 <_printf_float+0xc2>
 8006e54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	d102      	bne.n	8006e62 <_printf_float+0x29e>
 8006e5c:	6823      	ldr	r3, [r4, #0]
 8006e5e:	07d9      	lsls	r1, r3, #31
 8006e60:	d5d8      	bpl.n	8006e14 <_printf_float+0x250>
 8006e62:	ee18 3a10 	vmov	r3, s16
 8006e66:	4652      	mov	r2, sl
 8006e68:	4631      	mov	r1, r6
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	47b8      	blx	r7
 8006e6e:	3001      	adds	r0, #1
 8006e70:	f43f af09 	beq.w	8006c86 <_printf_float+0xc2>
 8006e74:	f04f 0900 	mov.w	r9, #0
 8006e78:	f104 0a1a 	add.w	sl, r4, #26
 8006e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e7e:	425b      	negs	r3, r3
 8006e80:	454b      	cmp	r3, r9
 8006e82:	dc01      	bgt.n	8006e88 <_printf_float+0x2c4>
 8006e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e86:	e792      	b.n	8006dae <_printf_float+0x1ea>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	4652      	mov	r2, sl
 8006e8c:	4631      	mov	r1, r6
 8006e8e:	4628      	mov	r0, r5
 8006e90:	47b8      	blx	r7
 8006e92:	3001      	adds	r0, #1
 8006e94:	f43f aef7 	beq.w	8006c86 <_printf_float+0xc2>
 8006e98:	f109 0901 	add.w	r9, r9, #1
 8006e9c:	e7ee      	b.n	8006e7c <_printf_float+0x2b8>
 8006e9e:	bf00      	nop
 8006ea0:	7fefffff 	.word	0x7fefffff
 8006ea4:	080099ec 	.word	0x080099ec
 8006ea8:	080099f0 	.word	0x080099f0
 8006eac:	080099f8 	.word	0x080099f8
 8006eb0:	080099f4 	.word	0x080099f4
 8006eb4:	080099fc 	.word	0x080099fc
 8006eb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006eba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	bfa8      	it	ge
 8006ec0:	461a      	movge	r2, r3
 8006ec2:	2a00      	cmp	r2, #0
 8006ec4:	4691      	mov	r9, r2
 8006ec6:	dc37      	bgt.n	8006f38 <_printf_float+0x374>
 8006ec8:	f04f 0b00 	mov.w	fp, #0
 8006ecc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ed0:	f104 021a 	add.w	r2, r4, #26
 8006ed4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ed6:	9305      	str	r3, [sp, #20]
 8006ed8:	eba3 0309 	sub.w	r3, r3, r9
 8006edc:	455b      	cmp	r3, fp
 8006ede:	dc33      	bgt.n	8006f48 <_printf_float+0x384>
 8006ee0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	db3b      	blt.n	8006f60 <_printf_float+0x39c>
 8006ee8:	6823      	ldr	r3, [r4, #0]
 8006eea:	07da      	lsls	r2, r3, #31
 8006eec:	d438      	bmi.n	8006f60 <_printf_float+0x39c>
 8006eee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ef0:	9b05      	ldr	r3, [sp, #20]
 8006ef2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	eba2 0901 	sub.w	r9, r2, r1
 8006efa:	4599      	cmp	r9, r3
 8006efc:	bfa8      	it	ge
 8006efe:	4699      	movge	r9, r3
 8006f00:	f1b9 0f00 	cmp.w	r9, #0
 8006f04:	dc35      	bgt.n	8006f72 <_printf_float+0x3ae>
 8006f06:	f04f 0800 	mov.w	r8, #0
 8006f0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f0e:	f104 0a1a 	add.w	sl, r4, #26
 8006f12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f16:	1a9b      	subs	r3, r3, r2
 8006f18:	eba3 0309 	sub.w	r3, r3, r9
 8006f1c:	4543      	cmp	r3, r8
 8006f1e:	f77f af79 	ble.w	8006e14 <_printf_float+0x250>
 8006f22:	2301      	movs	r3, #1
 8006f24:	4652      	mov	r2, sl
 8006f26:	4631      	mov	r1, r6
 8006f28:	4628      	mov	r0, r5
 8006f2a:	47b8      	blx	r7
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	f43f aeaa 	beq.w	8006c86 <_printf_float+0xc2>
 8006f32:	f108 0801 	add.w	r8, r8, #1
 8006f36:	e7ec      	b.n	8006f12 <_printf_float+0x34e>
 8006f38:	4613      	mov	r3, r2
 8006f3a:	4631      	mov	r1, r6
 8006f3c:	4642      	mov	r2, r8
 8006f3e:	4628      	mov	r0, r5
 8006f40:	47b8      	blx	r7
 8006f42:	3001      	adds	r0, #1
 8006f44:	d1c0      	bne.n	8006ec8 <_printf_float+0x304>
 8006f46:	e69e      	b.n	8006c86 <_printf_float+0xc2>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	4631      	mov	r1, r6
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	9205      	str	r2, [sp, #20]
 8006f50:	47b8      	blx	r7
 8006f52:	3001      	adds	r0, #1
 8006f54:	f43f ae97 	beq.w	8006c86 <_printf_float+0xc2>
 8006f58:	9a05      	ldr	r2, [sp, #20]
 8006f5a:	f10b 0b01 	add.w	fp, fp, #1
 8006f5e:	e7b9      	b.n	8006ed4 <_printf_float+0x310>
 8006f60:	ee18 3a10 	vmov	r3, s16
 8006f64:	4652      	mov	r2, sl
 8006f66:	4631      	mov	r1, r6
 8006f68:	4628      	mov	r0, r5
 8006f6a:	47b8      	blx	r7
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	d1be      	bne.n	8006eee <_printf_float+0x32a>
 8006f70:	e689      	b.n	8006c86 <_printf_float+0xc2>
 8006f72:	9a05      	ldr	r2, [sp, #20]
 8006f74:	464b      	mov	r3, r9
 8006f76:	4442      	add	r2, r8
 8006f78:	4631      	mov	r1, r6
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	47b8      	blx	r7
 8006f7e:	3001      	adds	r0, #1
 8006f80:	d1c1      	bne.n	8006f06 <_printf_float+0x342>
 8006f82:	e680      	b.n	8006c86 <_printf_float+0xc2>
 8006f84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f86:	2a01      	cmp	r2, #1
 8006f88:	dc01      	bgt.n	8006f8e <_printf_float+0x3ca>
 8006f8a:	07db      	lsls	r3, r3, #31
 8006f8c:	d538      	bpl.n	8007000 <_printf_float+0x43c>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	4642      	mov	r2, r8
 8006f92:	4631      	mov	r1, r6
 8006f94:	4628      	mov	r0, r5
 8006f96:	47b8      	blx	r7
 8006f98:	3001      	adds	r0, #1
 8006f9a:	f43f ae74 	beq.w	8006c86 <_printf_float+0xc2>
 8006f9e:	ee18 3a10 	vmov	r3, s16
 8006fa2:	4652      	mov	r2, sl
 8006fa4:	4631      	mov	r1, r6
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	47b8      	blx	r7
 8006faa:	3001      	adds	r0, #1
 8006fac:	f43f ae6b 	beq.w	8006c86 <_printf_float+0xc2>
 8006fb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	f7f9 fd8e 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fbc:	b9d8      	cbnz	r0, 8006ff6 <_printf_float+0x432>
 8006fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fc0:	f108 0201 	add.w	r2, r8, #1
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	4631      	mov	r1, r6
 8006fc8:	4628      	mov	r0, r5
 8006fca:	47b8      	blx	r7
 8006fcc:	3001      	adds	r0, #1
 8006fce:	d10e      	bne.n	8006fee <_printf_float+0x42a>
 8006fd0:	e659      	b.n	8006c86 <_printf_float+0xc2>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	4652      	mov	r2, sl
 8006fd6:	4631      	mov	r1, r6
 8006fd8:	4628      	mov	r0, r5
 8006fda:	47b8      	blx	r7
 8006fdc:	3001      	adds	r0, #1
 8006fde:	f43f ae52 	beq.w	8006c86 <_printf_float+0xc2>
 8006fe2:	f108 0801 	add.w	r8, r8, #1
 8006fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	4543      	cmp	r3, r8
 8006fec:	dcf1      	bgt.n	8006fd2 <_printf_float+0x40e>
 8006fee:	464b      	mov	r3, r9
 8006ff0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ff4:	e6dc      	b.n	8006db0 <_printf_float+0x1ec>
 8006ff6:	f04f 0800 	mov.w	r8, #0
 8006ffa:	f104 0a1a 	add.w	sl, r4, #26
 8006ffe:	e7f2      	b.n	8006fe6 <_printf_float+0x422>
 8007000:	2301      	movs	r3, #1
 8007002:	4642      	mov	r2, r8
 8007004:	e7df      	b.n	8006fc6 <_printf_float+0x402>
 8007006:	2301      	movs	r3, #1
 8007008:	464a      	mov	r2, r9
 800700a:	4631      	mov	r1, r6
 800700c:	4628      	mov	r0, r5
 800700e:	47b8      	blx	r7
 8007010:	3001      	adds	r0, #1
 8007012:	f43f ae38 	beq.w	8006c86 <_printf_float+0xc2>
 8007016:	f108 0801 	add.w	r8, r8, #1
 800701a:	68e3      	ldr	r3, [r4, #12]
 800701c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800701e:	1a5b      	subs	r3, r3, r1
 8007020:	4543      	cmp	r3, r8
 8007022:	dcf0      	bgt.n	8007006 <_printf_float+0x442>
 8007024:	e6fa      	b.n	8006e1c <_printf_float+0x258>
 8007026:	f04f 0800 	mov.w	r8, #0
 800702a:	f104 0919 	add.w	r9, r4, #25
 800702e:	e7f4      	b.n	800701a <_printf_float+0x456>

08007030 <_printf_common>:
 8007030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007034:	4616      	mov	r6, r2
 8007036:	4699      	mov	r9, r3
 8007038:	688a      	ldr	r2, [r1, #8]
 800703a:	690b      	ldr	r3, [r1, #16]
 800703c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007040:	4293      	cmp	r3, r2
 8007042:	bfb8      	it	lt
 8007044:	4613      	movlt	r3, r2
 8007046:	6033      	str	r3, [r6, #0]
 8007048:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800704c:	4607      	mov	r7, r0
 800704e:	460c      	mov	r4, r1
 8007050:	b10a      	cbz	r2, 8007056 <_printf_common+0x26>
 8007052:	3301      	adds	r3, #1
 8007054:	6033      	str	r3, [r6, #0]
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	0699      	lsls	r1, r3, #26
 800705a:	bf42      	ittt	mi
 800705c:	6833      	ldrmi	r3, [r6, #0]
 800705e:	3302      	addmi	r3, #2
 8007060:	6033      	strmi	r3, [r6, #0]
 8007062:	6825      	ldr	r5, [r4, #0]
 8007064:	f015 0506 	ands.w	r5, r5, #6
 8007068:	d106      	bne.n	8007078 <_printf_common+0x48>
 800706a:	f104 0a19 	add.w	sl, r4, #25
 800706e:	68e3      	ldr	r3, [r4, #12]
 8007070:	6832      	ldr	r2, [r6, #0]
 8007072:	1a9b      	subs	r3, r3, r2
 8007074:	42ab      	cmp	r3, r5
 8007076:	dc26      	bgt.n	80070c6 <_printf_common+0x96>
 8007078:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800707c:	1e13      	subs	r3, r2, #0
 800707e:	6822      	ldr	r2, [r4, #0]
 8007080:	bf18      	it	ne
 8007082:	2301      	movne	r3, #1
 8007084:	0692      	lsls	r2, r2, #26
 8007086:	d42b      	bmi.n	80070e0 <_printf_common+0xb0>
 8007088:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800708c:	4649      	mov	r1, r9
 800708e:	4638      	mov	r0, r7
 8007090:	47c0      	blx	r8
 8007092:	3001      	adds	r0, #1
 8007094:	d01e      	beq.n	80070d4 <_printf_common+0xa4>
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	68e5      	ldr	r5, [r4, #12]
 800709a:	6832      	ldr	r2, [r6, #0]
 800709c:	f003 0306 	and.w	r3, r3, #6
 80070a0:	2b04      	cmp	r3, #4
 80070a2:	bf08      	it	eq
 80070a4:	1aad      	subeq	r5, r5, r2
 80070a6:	68a3      	ldr	r3, [r4, #8]
 80070a8:	6922      	ldr	r2, [r4, #16]
 80070aa:	bf0c      	ite	eq
 80070ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070b0:	2500      	movne	r5, #0
 80070b2:	4293      	cmp	r3, r2
 80070b4:	bfc4      	itt	gt
 80070b6:	1a9b      	subgt	r3, r3, r2
 80070b8:	18ed      	addgt	r5, r5, r3
 80070ba:	2600      	movs	r6, #0
 80070bc:	341a      	adds	r4, #26
 80070be:	42b5      	cmp	r5, r6
 80070c0:	d11a      	bne.n	80070f8 <_printf_common+0xc8>
 80070c2:	2000      	movs	r0, #0
 80070c4:	e008      	b.n	80070d8 <_printf_common+0xa8>
 80070c6:	2301      	movs	r3, #1
 80070c8:	4652      	mov	r2, sl
 80070ca:	4649      	mov	r1, r9
 80070cc:	4638      	mov	r0, r7
 80070ce:	47c0      	blx	r8
 80070d0:	3001      	adds	r0, #1
 80070d2:	d103      	bne.n	80070dc <_printf_common+0xac>
 80070d4:	f04f 30ff 	mov.w	r0, #4294967295
 80070d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070dc:	3501      	adds	r5, #1
 80070de:	e7c6      	b.n	800706e <_printf_common+0x3e>
 80070e0:	18e1      	adds	r1, r4, r3
 80070e2:	1c5a      	adds	r2, r3, #1
 80070e4:	2030      	movs	r0, #48	; 0x30
 80070e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070ea:	4422      	add	r2, r4
 80070ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070f4:	3302      	adds	r3, #2
 80070f6:	e7c7      	b.n	8007088 <_printf_common+0x58>
 80070f8:	2301      	movs	r3, #1
 80070fa:	4622      	mov	r2, r4
 80070fc:	4649      	mov	r1, r9
 80070fe:	4638      	mov	r0, r7
 8007100:	47c0      	blx	r8
 8007102:	3001      	adds	r0, #1
 8007104:	d0e6      	beq.n	80070d4 <_printf_common+0xa4>
 8007106:	3601      	adds	r6, #1
 8007108:	e7d9      	b.n	80070be <_printf_common+0x8e>
	...

0800710c <_printf_i>:
 800710c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007110:	460c      	mov	r4, r1
 8007112:	4691      	mov	r9, r2
 8007114:	7e27      	ldrb	r7, [r4, #24]
 8007116:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007118:	2f78      	cmp	r7, #120	; 0x78
 800711a:	4680      	mov	r8, r0
 800711c:	469a      	mov	sl, r3
 800711e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007122:	d807      	bhi.n	8007134 <_printf_i+0x28>
 8007124:	2f62      	cmp	r7, #98	; 0x62
 8007126:	d80a      	bhi.n	800713e <_printf_i+0x32>
 8007128:	2f00      	cmp	r7, #0
 800712a:	f000 80d8 	beq.w	80072de <_printf_i+0x1d2>
 800712e:	2f58      	cmp	r7, #88	; 0x58
 8007130:	f000 80a3 	beq.w	800727a <_printf_i+0x16e>
 8007134:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007138:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800713c:	e03a      	b.n	80071b4 <_printf_i+0xa8>
 800713e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007142:	2b15      	cmp	r3, #21
 8007144:	d8f6      	bhi.n	8007134 <_printf_i+0x28>
 8007146:	a001      	add	r0, pc, #4	; (adr r0, 800714c <_printf_i+0x40>)
 8007148:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800714c:	080071a5 	.word	0x080071a5
 8007150:	080071b9 	.word	0x080071b9
 8007154:	08007135 	.word	0x08007135
 8007158:	08007135 	.word	0x08007135
 800715c:	08007135 	.word	0x08007135
 8007160:	08007135 	.word	0x08007135
 8007164:	080071b9 	.word	0x080071b9
 8007168:	08007135 	.word	0x08007135
 800716c:	08007135 	.word	0x08007135
 8007170:	08007135 	.word	0x08007135
 8007174:	08007135 	.word	0x08007135
 8007178:	080072c5 	.word	0x080072c5
 800717c:	080071e9 	.word	0x080071e9
 8007180:	080072a7 	.word	0x080072a7
 8007184:	08007135 	.word	0x08007135
 8007188:	08007135 	.word	0x08007135
 800718c:	080072e7 	.word	0x080072e7
 8007190:	08007135 	.word	0x08007135
 8007194:	080071e9 	.word	0x080071e9
 8007198:	08007135 	.word	0x08007135
 800719c:	08007135 	.word	0x08007135
 80071a0:	080072af 	.word	0x080072af
 80071a4:	680b      	ldr	r3, [r1, #0]
 80071a6:	1d1a      	adds	r2, r3, #4
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	600a      	str	r2, [r1, #0]
 80071ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80071b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071b4:	2301      	movs	r3, #1
 80071b6:	e0a3      	b.n	8007300 <_printf_i+0x1f4>
 80071b8:	6825      	ldr	r5, [r4, #0]
 80071ba:	6808      	ldr	r0, [r1, #0]
 80071bc:	062e      	lsls	r6, r5, #24
 80071be:	f100 0304 	add.w	r3, r0, #4
 80071c2:	d50a      	bpl.n	80071da <_printf_i+0xce>
 80071c4:	6805      	ldr	r5, [r0, #0]
 80071c6:	600b      	str	r3, [r1, #0]
 80071c8:	2d00      	cmp	r5, #0
 80071ca:	da03      	bge.n	80071d4 <_printf_i+0xc8>
 80071cc:	232d      	movs	r3, #45	; 0x2d
 80071ce:	426d      	negs	r5, r5
 80071d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071d4:	485e      	ldr	r0, [pc, #376]	; (8007350 <_printf_i+0x244>)
 80071d6:	230a      	movs	r3, #10
 80071d8:	e019      	b.n	800720e <_printf_i+0x102>
 80071da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80071de:	6805      	ldr	r5, [r0, #0]
 80071e0:	600b      	str	r3, [r1, #0]
 80071e2:	bf18      	it	ne
 80071e4:	b22d      	sxthne	r5, r5
 80071e6:	e7ef      	b.n	80071c8 <_printf_i+0xbc>
 80071e8:	680b      	ldr	r3, [r1, #0]
 80071ea:	6825      	ldr	r5, [r4, #0]
 80071ec:	1d18      	adds	r0, r3, #4
 80071ee:	6008      	str	r0, [r1, #0]
 80071f0:	0628      	lsls	r0, r5, #24
 80071f2:	d501      	bpl.n	80071f8 <_printf_i+0xec>
 80071f4:	681d      	ldr	r5, [r3, #0]
 80071f6:	e002      	b.n	80071fe <_printf_i+0xf2>
 80071f8:	0669      	lsls	r1, r5, #25
 80071fa:	d5fb      	bpl.n	80071f4 <_printf_i+0xe8>
 80071fc:	881d      	ldrh	r5, [r3, #0]
 80071fe:	4854      	ldr	r0, [pc, #336]	; (8007350 <_printf_i+0x244>)
 8007200:	2f6f      	cmp	r7, #111	; 0x6f
 8007202:	bf0c      	ite	eq
 8007204:	2308      	moveq	r3, #8
 8007206:	230a      	movne	r3, #10
 8007208:	2100      	movs	r1, #0
 800720a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800720e:	6866      	ldr	r6, [r4, #4]
 8007210:	60a6      	str	r6, [r4, #8]
 8007212:	2e00      	cmp	r6, #0
 8007214:	bfa2      	ittt	ge
 8007216:	6821      	ldrge	r1, [r4, #0]
 8007218:	f021 0104 	bicge.w	r1, r1, #4
 800721c:	6021      	strge	r1, [r4, #0]
 800721e:	b90d      	cbnz	r5, 8007224 <_printf_i+0x118>
 8007220:	2e00      	cmp	r6, #0
 8007222:	d04d      	beq.n	80072c0 <_printf_i+0x1b4>
 8007224:	4616      	mov	r6, r2
 8007226:	fbb5 f1f3 	udiv	r1, r5, r3
 800722a:	fb03 5711 	mls	r7, r3, r1, r5
 800722e:	5dc7      	ldrb	r7, [r0, r7]
 8007230:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007234:	462f      	mov	r7, r5
 8007236:	42bb      	cmp	r3, r7
 8007238:	460d      	mov	r5, r1
 800723a:	d9f4      	bls.n	8007226 <_printf_i+0x11a>
 800723c:	2b08      	cmp	r3, #8
 800723e:	d10b      	bne.n	8007258 <_printf_i+0x14c>
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	07df      	lsls	r7, r3, #31
 8007244:	d508      	bpl.n	8007258 <_printf_i+0x14c>
 8007246:	6923      	ldr	r3, [r4, #16]
 8007248:	6861      	ldr	r1, [r4, #4]
 800724a:	4299      	cmp	r1, r3
 800724c:	bfde      	ittt	le
 800724e:	2330      	movle	r3, #48	; 0x30
 8007250:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007254:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007258:	1b92      	subs	r2, r2, r6
 800725a:	6122      	str	r2, [r4, #16]
 800725c:	f8cd a000 	str.w	sl, [sp]
 8007260:	464b      	mov	r3, r9
 8007262:	aa03      	add	r2, sp, #12
 8007264:	4621      	mov	r1, r4
 8007266:	4640      	mov	r0, r8
 8007268:	f7ff fee2 	bl	8007030 <_printf_common>
 800726c:	3001      	adds	r0, #1
 800726e:	d14c      	bne.n	800730a <_printf_i+0x1fe>
 8007270:	f04f 30ff 	mov.w	r0, #4294967295
 8007274:	b004      	add	sp, #16
 8007276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800727a:	4835      	ldr	r0, [pc, #212]	; (8007350 <_printf_i+0x244>)
 800727c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	680e      	ldr	r6, [r1, #0]
 8007284:	061f      	lsls	r7, r3, #24
 8007286:	f856 5b04 	ldr.w	r5, [r6], #4
 800728a:	600e      	str	r6, [r1, #0]
 800728c:	d514      	bpl.n	80072b8 <_printf_i+0x1ac>
 800728e:	07d9      	lsls	r1, r3, #31
 8007290:	bf44      	itt	mi
 8007292:	f043 0320 	orrmi.w	r3, r3, #32
 8007296:	6023      	strmi	r3, [r4, #0]
 8007298:	b91d      	cbnz	r5, 80072a2 <_printf_i+0x196>
 800729a:	6823      	ldr	r3, [r4, #0]
 800729c:	f023 0320 	bic.w	r3, r3, #32
 80072a0:	6023      	str	r3, [r4, #0]
 80072a2:	2310      	movs	r3, #16
 80072a4:	e7b0      	b.n	8007208 <_printf_i+0xfc>
 80072a6:	6823      	ldr	r3, [r4, #0]
 80072a8:	f043 0320 	orr.w	r3, r3, #32
 80072ac:	6023      	str	r3, [r4, #0]
 80072ae:	2378      	movs	r3, #120	; 0x78
 80072b0:	4828      	ldr	r0, [pc, #160]	; (8007354 <_printf_i+0x248>)
 80072b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072b6:	e7e3      	b.n	8007280 <_printf_i+0x174>
 80072b8:	065e      	lsls	r6, r3, #25
 80072ba:	bf48      	it	mi
 80072bc:	b2ad      	uxthmi	r5, r5
 80072be:	e7e6      	b.n	800728e <_printf_i+0x182>
 80072c0:	4616      	mov	r6, r2
 80072c2:	e7bb      	b.n	800723c <_printf_i+0x130>
 80072c4:	680b      	ldr	r3, [r1, #0]
 80072c6:	6826      	ldr	r6, [r4, #0]
 80072c8:	6960      	ldr	r0, [r4, #20]
 80072ca:	1d1d      	adds	r5, r3, #4
 80072cc:	600d      	str	r5, [r1, #0]
 80072ce:	0635      	lsls	r5, r6, #24
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	d501      	bpl.n	80072d8 <_printf_i+0x1cc>
 80072d4:	6018      	str	r0, [r3, #0]
 80072d6:	e002      	b.n	80072de <_printf_i+0x1d2>
 80072d8:	0671      	lsls	r1, r6, #25
 80072da:	d5fb      	bpl.n	80072d4 <_printf_i+0x1c8>
 80072dc:	8018      	strh	r0, [r3, #0]
 80072de:	2300      	movs	r3, #0
 80072e0:	6123      	str	r3, [r4, #16]
 80072e2:	4616      	mov	r6, r2
 80072e4:	e7ba      	b.n	800725c <_printf_i+0x150>
 80072e6:	680b      	ldr	r3, [r1, #0]
 80072e8:	1d1a      	adds	r2, r3, #4
 80072ea:	600a      	str	r2, [r1, #0]
 80072ec:	681e      	ldr	r6, [r3, #0]
 80072ee:	6862      	ldr	r2, [r4, #4]
 80072f0:	2100      	movs	r1, #0
 80072f2:	4630      	mov	r0, r6
 80072f4:	f7f8 ff7c 	bl	80001f0 <memchr>
 80072f8:	b108      	cbz	r0, 80072fe <_printf_i+0x1f2>
 80072fa:	1b80      	subs	r0, r0, r6
 80072fc:	6060      	str	r0, [r4, #4]
 80072fe:	6863      	ldr	r3, [r4, #4]
 8007300:	6123      	str	r3, [r4, #16]
 8007302:	2300      	movs	r3, #0
 8007304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007308:	e7a8      	b.n	800725c <_printf_i+0x150>
 800730a:	6923      	ldr	r3, [r4, #16]
 800730c:	4632      	mov	r2, r6
 800730e:	4649      	mov	r1, r9
 8007310:	4640      	mov	r0, r8
 8007312:	47d0      	blx	sl
 8007314:	3001      	adds	r0, #1
 8007316:	d0ab      	beq.n	8007270 <_printf_i+0x164>
 8007318:	6823      	ldr	r3, [r4, #0]
 800731a:	079b      	lsls	r3, r3, #30
 800731c:	d413      	bmi.n	8007346 <_printf_i+0x23a>
 800731e:	68e0      	ldr	r0, [r4, #12]
 8007320:	9b03      	ldr	r3, [sp, #12]
 8007322:	4298      	cmp	r0, r3
 8007324:	bfb8      	it	lt
 8007326:	4618      	movlt	r0, r3
 8007328:	e7a4      	b.n	8007274 <_printf_i+0x168>
 800732a:	2301      	movs	r3, #1
 800732c:	4632      	mov	r2, r6
 800732e:	4649      	mov	r1, r9
 8007330:	4640      	mov	r0, r8
 8007332:	47d0      	blx	sl
 8007334:	3001      	adds	r0, #1
 8007336:	d09b      	beq.n	8007270 <_printf_i+0x164>
 8007338:	3501      	adds	r5, #1
 800733a:	68e3      	ldr	r3, [r4, #12]
 800733c:	9903      	ldr	r1, [sp, #12]
 800733e:	1a5b      	subs	r3, r3, r1
 8007340:	42ab      	cmp	r3, r5
 8007342:	dcf2      	bgt.n	800732a <_printf_i+0x21e>
 8007344:	e7eb      	b.n	800731e <_printf_i+0x212>
 8007346:	2500      	movs	r5, #0
 8007348:	f104 0619 	add.w	r6, r4, #25
 800734c:	e7f5      	b.n	800733a <_printf_i+0x22e>
 800734e:	bf00      	nop
 8007350:	080099fe 	.word	0x080099fe
 8007354:	08009a0f 	.word	0x08009a0f

08007358 <siprintf>:
 8007358:	b40e      	push	{r1, r2, r3}
 800735a:	b500      	push	{lr}
 800735c:	b09c      	sub	sp, #112	; 0x70
 800735e:	ab1d      	add	r3, sp, #116	; 0x74
 8007360:	9002      	str	r0, [sp, #8]
 8007362:	9006      	str	r0, [sp, #24]
 8007364:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007368:	4809      	ldr	r0, [pc, #36]	; (8007390 <siprintf+0x38>)
 800736a:	9107      	str	r1, [sp, #28]
 800736c:	9104      	str	r1, [sp, #16]
 800736e:	4909      	ldr	r1, [pc, #36]	; (8007394 <siprintf+0x3c>)
 8007370:	f853 2b04 	ldr.w	r2, [r3], #4
 8007374:	9105      	str	r1, [sp, #20]
 8007376:	6800      	ldr	r0, [r0, #0]
 8007378:	9301      	str	r3, [sp, #4]
 800737a:	a902      	add	r1, sp, #8
 800737c:	f001 fb32 	bl	80089e4 <_svfiprintf_r>
 8007380:	9b02      	ldr	r3, [sp, #8]
 8007382:	2200      	movs	r2, #0
 8007384:	701a      	strb	r2, [r3, #0]
 8007386:	b01c      	add	sp, #112	; 0x70
 8007388:	f85d eb04 	ldr.w	lr, [sp], #4
 800738c:	b003      	add	sp, #12
 800738e:	4770      	bx	lr
 8007390:	20000010 	.word	0x20000010
 8007394:	ffff0208 	.word	0xffff0208

08007398 <quorem>:
 8007398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800739c:	6903      	ldr	r3, [r0, #16]
 800739e:	690c      	ldr	r4, [r1, #16]
 80073a0:	42a3      	cmp	r3, r4
 80073a2:	4607      	mov	r7, r0
 80073a4:	f2c0 8081 	blt.w	80074aa <quorem+0x112>
 80073a8:	3c01      	subs	r4, #1
 80073aa:	f101 0814 	add.w	r8, r1, #20
 80073ae:	f100 0514 	add.w	r5, r0, #20
 80073b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073b6:	9301      	str	r3, [sp, #4]
 80073b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80073bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073c0:	3301      	adds	r3, #1
 80073c2:	429a      	cmp	r2, r3
 80073c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80073c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80073cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80073d0:	d331      	bcc.n	8007436 <quorem+0x9e>
 80073d2:	f04f 0e00 	mov.w	lr, #0
 80073d6:	4640      	mov	r0, r8
 80073d8:	46ac      	mov	ip, r5
 80073da:	46f2      	mov	sl, lr
 80073dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80073e0:	b293      	uxth	r3, r2
 80073e2:	fb06 e303 	mla	r3, r6, r3, lr
 80073e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	ebaa 0303 	sub.w	r3, sl, r3
 80073f0:	0c12      	lsrs	r2, r2, #16
 80073f2:	f8dc a000 	ldr.w	sl, [ip]
 80073f6:	fb06 e202 	mla	r2, r6, r2, lr
 80073fa:	fa13 f38a 	uxtah	r3, r3, sl
 80073fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007402:	fa1f fa82 	uxth.w	sl, r2
 8007406:	f8dc 2000 	ldr.w	r2, [ip]
 800740a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800740e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007412:	b29b      	uxth	r3, r3
 8007414:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007418:	4581      	cmp	r9, r0
 800741a:	f84c 3b04 	str.w	r3, [ip], #4
 800741e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007422:	d2db      	bcs.n	80073dc <quorem+0x44>
 8007424:	f855 300b 	ldr.w	r3, [r5, fp]
 8007428:	b92b      	cbnz	r3, 8007436 <quorem+0x9e>
 800742a:	9b01      	ldr	r3, [sp, #4]
 800742c:	3b04      	subs	r3, #4
 800742e:	429d      	cmp	r5, r3
 8007430:	461a      	mov	r2, r3
 8007432:	d32e      	bcc.n	8007492 <quorem+0xfa>
 8007434:	613c      	str	r4, [r7, #16]
 8007436:	4638      	mov	r0, r7
 8007438:	f001 f8be 	bl	80085b8 <__mcmp>
 800743c:	2800      	cmp	r0, #0
 800743e:	db24      	blt.n	800748a <quorem+0xf2>
 8007440:	3601      	adds	r6, #1
 8007442:	4628      	mov	r0, r5
 8007444:	f04f 0c00 	mov.w	ip, #0
 8007448:	f858 2b04 	ldr.w	r2, [r8], #4
 800744c:	f8d0 e000 	ldr.w	lr, [r0]
 8007450:	b293      	uxth	r3, r2
 8007452:	ebac 0303 	sub.w	r3, ip, r3
 8007456:	0c12      	lsrs	r2, r2, #16
 8007458:	fa13 f38e 	uxtah	r3, r3, lr
 800745c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007460:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007464:	b29b      	uxth	r3, r3
 8007466:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800746a:	45c1      	cmp	r9, r8
 800746c:	f840 3b04 	str.w	r3, [r0], #4
 8007470:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007474:	d2e8      	bcs.n	8007448 <quorem+0xb0>
 8007476:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800747a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800747e:	b922      	cbnz	r2, 800748a <quorem+0xf2>
 8007480:	3b04      	subs	r3, #4
 8007482:	429d      	cmp	r5, r3
 8007484:	461a      	mov	r2, r3
 8007486:	d30a      	bcc.n	800749e <quorem+0x106>
 8007488:	613c      	str	r4, [r7, #16]
 800748a:	4630      	mov	r0, r6
 800748c:	b003      	add	sp, #12
 800748e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007492:	6812      	ldr	r2, [r2, #0]
 8007494:	3b04      	subs	r3, #4
 8007496:	2a00      	cmp	r2, #0
 8007498:	d1cc      	bne.n	8007434 <quorem+0x9c>
 800749a:	3c01      	subs	r4, #1
 800749c:	e7c7      	b.n	800742e <quorem+0x96>
 800749e:	6812      	ldr	r2, [r2, #0]
 80074a0:	3b04      	subs	r3, #4
 80074a2:	2a00      	cmp	r2, #0
 80074a4:	d1f0      	bne.n	8007488 <quorem+0xf0>
 80074a6:	3c01      	subs	r4, #1
 80074a8:	e7eb      	b.n	8007482 <quorem+0xea>
 80074aa:	2000      	movs	r0, #0
 80074ac:	e7ee      	b.n	800748c <quorem+0xf4>
	...

080074b0 <_dtoa_r>:
 80074b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b4:	ed2d 8b02 	vpush	{d8}
 80074b8:	ec57 6b10 	vmov	r6, r7, d0
 80074bc:	b095      	sub	sp, #84	; 0x54
 80074be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80074c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80074c4:	9105      	str	r1, [sp, #20]
 80074c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80074ca:	4604      	mov	r4, r0
 80074cc:	9209      	str	r2, [sp, #36]	; 0x24
 80074ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80074d0:	b975      	cbnz	r5, 80074f0 <_dtoa_r+0x40>
 80074d2:	2010      	movs	r0, #16
 80074d4:	f000 fddc 	bl	8008090 <malloc>
 80074d8:	4602      	mov	r2, r0
 80074da:	6260      	str	r0, [r4, #36]	; 0x24
 80074dc:	b920      	cbnz	r0, 80074e8 <_dtoa_r+0x38>
 80074de:	4bb2      	ldr	r3, [pc, #712]	; (80077a8 <_dtoa_r+0x2f8>)
 80074e0:	21ea      	movs	r1, #234	; 0xea
 80074e2:	48b2      	ldr	r0, [pc, #712]	; (80077ac <_dtoa_r+0x2fc>)
 80074e4:	f001 fb8e 	bl	8008c04 <__assert_func>
 80074e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80074ec:	6005      	str	r5, [r0, #0]
 80074ee:	60c5      	str	r5, [r0, #12]
 80074f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074f2:	6819      	ldr	r1, [r3, #0]
 80074f4:	b151      	cbz	r1, 800750c <_dtoa_r+0x5c>
 80074f6:	685a      	ldr	r2, [r3, #4]
 80074f8:	604a      	str	r2, [r1, #4]
 80074fa:	2301      	movs	r3, #1
 80074fc:	4093      	lsls	r3, r2
 80074fe:	608b      	str	r3, [r1, #8]
 8007500:	4620      	mov	r0, r4
 8007502:	f000 fe1b 	bl	800813c <_Bfree>
 8007506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007508:	2200      	movs	r2, #0
 800750a:	601a      	str	r2, [r3, #0]
 800750c:	1e3b      	subs	r3, r7, #0
 800750e:	bfb9      	ittee	lt
 8007510:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007514:	9303      	strlt	r3, [sp, #12]
 8007516:	2300      	movge	r3, #0
 8007518:	f8c8 3000 	strge.w	r3, [r8]
 800751c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007520:	4ba3      	ldr	r3, [pc, #652]	; (80077b0 <_dtoa_r+0x300>)
 8007522:	bfbc      	itt	lt
 8007524:	2201      	movlt	r2, #1
 8007526:	f8c8 2000 	strlt.w	r2, [r8]
 800752a:	ea33 0309 	bics.w	r3, r3, r9
 800752e:	d11b      	bne.n	8007568 <_dtoa_r+0xb8>
 8007530:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007532:	f242 730f 	movw	r3, #9999	; 0x270f
 8007536:	6013      	str	r3, [r2, #0]
 8007538:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800753c:	4333      	orrs	r3, r6
 800753e:	f000 857a 	beq.w	8008036 <_dtoa_r+0xb86>
 8007542:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007544:	b963      	cbnz	r3, 8007560 <_dtoa_r+0xb0>
 8007546:	4b9b      	ldr	r3, [pc, #620]	; (80077b4 <_dtoa_r+0x304>)
 8007548:	e024      	b.n	8007594 <_dtoa_r+0xe4>
 800754a:	4b9b      	ldr	r3, [pc, #620]	; (80077b8 <_dtoa_r+0x308>)
 800754c:	9300      	str	r3, [sp, #0]
 800754e:	3308      	adds	r3, #8
 8007550:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007552:	6013      	str	r3, [r2, #0]
 8007554:	9800      	ldr	r0, [sp, #0]
 8007556:	b015      	add	sp, #84	; 0x54
 8007558:	ecbd 8b02 	vpop	{d8}
 800755c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007560:	4b94      	ldr	r3, [pc, #592]	; (80077b4 <_dtoa_r+0x304>)
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	3303      	adds	r3, #3
 8007566:	e7f3      	b.n	8007550 <_dtoa_r+0xa0>
 8007568:	ed9d 7b02 	vldr	d7, [sp, #8]
 800756c:	2200      	movs	r2, #0
 800756e:	ec51 0b17 	vmov	r0, r1, d7
 8007572:	2300      	movs	r3, #0
 8007574:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007578:	f7f9 faae 	bl	8000ad8 <__aeabi_dcmpeq>
 800757c:	4680      	mov	r8, r0
 800757e:	b158      	cbz	r0, 8007598 <_dtoa_r+0xe8>
 8007580:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007582:	2301      	movs	r3, #1
 8007584:	6013      	str	r3, [r2, #0]
 8007586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007588:	2b00      	cmp	r3, #0
 800758a:	f000 8551 	beq.w	8008030 <_dtoa_r+0xb80>
 800758e:	488b      	ldr	r0, [pc, #556]	; (80077bc <_dtoa_r+0x30c>)
 8007590:	6018      	str	r0, [r3, #0]
 8007592:	1e43      	subs	r3, r0, #1
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	e7dd      	b.n	8007554 <_dtoa_r+0xa4>
 8007598:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800759c:	aa12      	add	r2, sp, #72	; 0x48
 800759e:	a913      	add	r1, sp, #76	; 0x4c
 80075a0:	4620      	mov	r0, r4
 80075a2:	f001 f8ad 	bl	8008700 <__d2b>
 80075a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80075aa:	4683      	mov	fp, r0
 80075ac:	2d00      	cmp	r5, #0
 80075ae:	d07c      	beq.n	80076aa <_dtoa_r+0x1fa>
 80075b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80075b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80075be:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80075c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80075c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80075ca:	4b7d      	ldr	r3, [pc, #500]	; (80077c0 <_dtoa_r+0x310>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	4630      	mov	r0, r6
 80075d0:	4639      	mov	r1, r7
 80075d2:	f7f8 fe61 	bl	8000298 <__aeabi_dsub>
 80075d6:	a36e      	add	r3, pc, #440	; (adr r3, 8007790 <_dtoa_r+0x2e0>)
 80075d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075dc:	f7f9 f814 	bl	8000608 <__aeabi_dmul>
 80075e0:	a36d      	add	r3, pc, #436	; (adr r3, 8007798 <_dtoa_r+0x2e8>)
 80075e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e6:	f7f8 fe59 	bl	800029c <__adddf3>
 80075ea:	4606      	mov	r6, r0
 80075ec:	4628      	mov	r0, r5
 80075ee:	460f      	mov	r7, r1
 80075f0:	f7f8 ffa0 	bl	8000534 <__aeabi_i2d>
 80075f4:	a36a      	add	r3, pc, #424	; (adr r3, 80077a0 <_dtoa_r+0x2f0>)
 80075f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fa:	f7f9 f805 	bl	8000608 <__aeabi_dmul>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	4630      	mov	r0, r6
 8007604:	4639      	mov	r1, r7
 8007606:	f7f8 fe49 	bl	800029c <__adddf3>
 800760a:	4606      	mov	r6, r0
 800760c:	460f      	mov	r7, r1
 800760e:	f7f9 faab 	bl	8000b68 <__aeabi_d2iz>
 8007612:	2200      	movs	r2, #0
 8007614:	4682      	mov	sl, r0
 8007616:	2300      	movs	r3, #0
 8007618:	4630      	mov	r0, r6
 800761a:	4639      	mov	r1, r7
 800761c:	f7f9 fa66 	bl	8000aec <__aeabi_dcmplt>
 8007620:	b148      	cbz	r0, 8007636 <_dtoa_r+0x186>
 8007622:	4650      	mov	r0, sl
 8007624:	f7f8 ff86 	bl	8000534 <__aeabi_i2d>
 8007628:	4632      	mov	r2, r6
 800762a:	463b      	mov	r3, r7
 800762c:	f7f9 fa54 	bl	8000ad8 <__aeabi_dcmpeq>
 8007630:	b908      	cbnz	r0, 8007636 <_dtoa_r+0x186>
 8007632:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007636:	f1ba 0f16 	cmp.w	sl, #22
 800763a:	d854      	bhi.n	80076e6 <_dtoa_r+0x236>
 800763c:	4b61      	ldr	r3, [pc, #388]	; (80077c4 <_dtoa_r+0x314>)
 800763e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007646:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800764a:	f7f9 fa4f 	bl	8000aec <__aeabi_dcmplt>
 800764e:	2800      	cmp	r0, #0
 8007650:	d04b      	beq.n	80076ea <_dtoa_r+0x23a>
 8007652:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007656:	2300      	movs	r3, #0
 8007658:	930e      	str	r3, [sp, #56]	; 0x38
 800765a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800765c:	1b5d      	subs	r5, r3, r5
 800765e:	1e6b      	subs	r3, r5, #1
 8007660:	9304      	str	r3, [sp, #16]
 8007662:	bf43      	ittte	mi
 8007664:	2300      	movmi	r3, #0
 8007666:	f1c5 0801 	rsbmi	r8, r5, #1
 800766a:	9304      	strmi	r3, [sp, #16]
 800766c:	f04f 0800 	movpl.w	r8, #0
 8007670:	f1ba 0f00 	cmp.w	sl, #0
 8007674:	db3b      	blt.n	80076ee <_dtoa_r+0x23e>
 8007676:	9b04      	ldr	r3, [sp, #16]
 8007678:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800767c:	4453      	add	r3, sl
 800767e:	9304      	str	r3, [sp, #16]
 8007680:	2300      	movs	r3, #0
 8007682:	9306      	str	r3, [sp, #24]
 8007684:	9b05      	ldr	r3, [sp, #20]
 8007686:	2b09      	cmp	r3, #9
 8007688:	d869      	bhi.n	800775e <_dtoa_r+0x2ae>
 800768a:	2b05      	cmp	r3, #5
 800768c:	bfc4      	itt	gt
 800768e:	3b04      	subgt	r3, #4
 8007690:	9305      	strgt	r3, [sp, #20]
 8007692:	9b05      	ldr	r3, [sp, #20]
 8007694:	f1a3 0302 	sub.w	r3, r3, #2
 8007698:	bfcc      	ite	gt
 800769a:	2500      	movgt	r5, #0
 800769c:	2501      	movle	r5, #1
 800769e:	2b03      	cmp	r3, #3
 80076a0:	d869      	bhi.n	8007776 <_dtoa_r+0x2c6>
 80076a2:	e8df f003 	tbb	[pc, r3]
 80076a6:	4e2c      	.short	0x4e2c
 80076a8:	5a4c      	.short	0x5a4c
 80076aa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80076ae:	441d      	add	r5, r3
 80076b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80076b4:	2b20      	cmp	r3, #32
 80076b6:	bfc1      	itttt	gt
 80076b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80076bc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80076c0:	fa09 f303 	lslgt.w	r3, r9, r3
 80076c4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80076c8:	bfda      	itte	le
 80076ca:	f1c3 0320 	rsble	r3, r3, #32
 80076ce:	fa06 f003 	lslle.w	r0, r6, r3
 80076d2:	4318      	orrgt	r0, r3
 80076d4:	f7f8 ff1e 	bl	8000514 <__aeabi_ui2d>
 80076d8:	2301      	movs	r3, #1
 80076da:	4606      	mov	r6, r0
 80076dc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80076e0:	3d01      	subs	r5, #1
 80076e2:	9310      	str	r3, [sp, #64]	; 0x40
 80076e4:	e771      	b.n	80075ca <_dtoa_r+0x11a>
 80076e6:	2301      	movs	r3, #1
 80076e8:	e7b6      	b.n	8007658 <_dtoa_r+0x1a8>
 80076ea:	900e      	str	r0, [sp, #56]	; 0x38
 80076ec:	e7b5      	b.n	800765a <_dtoa_r+0x1aa>
 80076ee:	f1ca 0300 	rsb	r3, sl, #0
 80076f2:	9306      	str	r3, [sp, #24]
 80076f4:	2300      	movs	r3, #0
 80076f6:	eba8 080a 	sub.w	r8, r8, sl
 80076fa:	930d      	str	r3, [sp, #52]	; 0x34
 80076fc:	e7c2      	b.n	8007684 <_dtoa_r+0x1d4>
 80076fe:	2300      	movs	r3, #0
 8007700:	9308      	str	r3, [sp, #32]
 8007702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007704:	2b00      	cmp	r3, #0
 8007706:	dc39      	bgt.n	800777c <_dtoa_r+0x2cc>
 8007708:	f04f 0901 	mov.w	r9, #1
 800770c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007710:	464b      	mov	r3, r9
 8007712:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007716:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007718:	2200      	movs	r2, #0
 800771a:	6042      	str	r2, [r0, #4]
 800771c:	2204      	movs	r2, #4
 800771e:	f102 0614 	add.w	r6, r2, #20
 8007722:	429e      	cmp	r6, r3
 8007724:	6841      	ldr	r1, [r0, #4]
 8007726:	d92f      	bls.n	8007788 <_dtoa_r+0x2d8>
 8007728:	4620      	mov	r0, r4
 800772a:	f000 fcc7 	bl	80080bc <_Balloc>
 800772e:	9000      	str	r0, [sp, #0]
 8007730:	2800      	cmp	r0, #0
 8007732:	d14b      	bne.n	80077cc <_dtoa_r+0x31c>
 8007734:	4b24      	ldr	r3, [pc, #144]	; (80077c8 <_dtoa_r+0x318>)
 8007736:	4602      	mov	r2, r0
 8007738:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800773c:	e6d1      	b.n	80074e2 <_dtoa_r+0x32>
 800773e:	2301      	movs	r3, #1
 8007740:	e7de      	b.n	8007700 <_dtoa_r+0x250>
 8007742:	2300      	movs	r3, #0
 8007744:	9308      	str	r3, [sp, #32]
 8007746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007748:	eb0a 0903 	add.w	r9, sl, r3
 800774c:	f109 0301 	add.w	r3, r9, #1
 8007750:	2b01      	cmp	r3, #1
 8007752:	9301      	str	r3, [sp, #4]
 8007754:	bfb8      	it	lt
 8007756:	2301      	movlt	r3, #1
 8007758:	e7dd      	b.n	8007716 <_dtoa_r+0x266>
 800775a:	2301      	movs	r3, #1
 800775c:	e7f2      	b.n	8007744 <_dtoa_r+0x294>
 800775e:	2501      	movs	r5, #1
 8007760:	2300      	movs	r3, #0
 8007762:	9305      	str	r3, [sp, #20]
 8007764:	9508      	str	r5, [sp, #32]
 8007766:	f04f 39ff 	mov.w	r9, #4294967295
 800776a:	2200      	movs	r2, #0
 800776c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007770:	2312      	movs	r3, #18
 8007772:	9209      	str	r2, [sp, #36]	; 0x24
 8007774:	e7cf      	b.n	8007716 <_dtoa_r+0x266>
 8007776:	2301      	movs	r3, #1
 8007778:	9308      	str	r3, [sp, #32]
 800777a:	e7f4      	b.n	8007766 <_dtoa_r+0x2b6>
 800777c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007780:	f8cd 9004 	str.w	r9, [sp, #4]
 8007784:	464b      	mov	r3, r9
 8007786:	e7c6      	b.n	8007716 <_dtoa_r+0x266>
 8007788:	3101      	adds	r1, #1
 800778a:	6041      	str	r1, [r0, #4]
 800778c:	0052      	lsls	r2, r2, #1
 800778e:	e7c6      	b.n	800771e <_dtoa_r+0x26e>
 8007790:	636f4361 	.word	0x636f4361
 8007794:	3fd287a7 	.word	0x3fd287a7
 8007798:	8b60c8b3 	.word	0x8b60c8b3
 800779c:	3fc68a28 	.word	0x3fc68a28
 80077a0:	509f79fb 	.word	0x509f79fb
 80077a4:	3fd34413 	.word	0x3fd34413
 80077a8:	08009a2d 	.word	0x08009a2d
 80077ac:	08009a44 	.word	0x08009a44
 80077b0:	7ff00000 	.word	0x7ff00000
 80077b4:	08009a29 	.word	0x08009a29
 80077b8:	08009a20 	.word	0x08009a20
 80077bc:	080099fd 	.word	0x080099fd
 80077c0:	3ff80000 	.word	0x3ff80000
 80077c4:	08009b40 	.word	0x08009b40
 80077c8:	08009aa3 	.word	0x08009aa3
 80077cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077ce:	9a00      	ldr	r2, [sp, #0]
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	9b01      	ldr	r3, [sp, #4]
 80077d4:	2b0e      	cmp	r3, #14
 80077d6:	f200 80ad 	bhi.w	8007934 <_dtoa_r+0x484>
 80077da:	2d00      	cmp	r5, #0
 80077dc:	f000 80aa 	beq.w	8007934 <_dtoa_r+0x484>
 80077e0:	f1ba 0f00 	cmp.w	sl, #0
 80077e4:	dd36      	ble.n	8007854 <_dtoa_r+0x3a4>
 80077e6:	4ac3      	ldr	r2, [pc, #780]	; (8007af4 <_dtoa_r+0x644>)
 80077e8:	f00a 030f 	and.w	r3, sl, #15
 80077ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80077f0:	ed93 7b00 	vldr	d7, [r3]
 80077f4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80077f8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80077fc:	eeb0 8a47 	vmov.f32	s16, s14
 8007800:	eef0 8a67 	vmov.f32	s17, s15
 8007804:	d016      	beq.n	8007834 <_dtoa_r+0x384>
 8007806:	4bbc      	ldr	r3, [pc, #752]	; (8007af8 <_dtoa_r+0x648>)
 8007808:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800780c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007810:	f7f9 f824 	bl	800085c <__aeabi_ddiv>
 8007814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007818:	f007 070f 	and.w	r7, r7, #15
 800781c:	2503      	movs	r5, #3
 800781e:	4eb6      	ldr	r6, [pc, #728]	; (8007af8 <_dtoa_r+0x648>)
 8007820:	b957      	cbnz	r7, 8007838 <_dtoa_r+0x388>
 8007822:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007826:	ec53 2b18 	vmov	r2, r3, d8
 800782a:	f7f9 f817 	bl	800085c <__aeabi_ddiv>
 800782e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007832:	e029      	b.n	8007888 <_dtoa_r+0x3d8>
 8007834:	2502      	movs	r5, #2
 8007836:	e7f2      	b.n	800781e <_dtoa_r+0x36e>
 8007838:	07f9      	lsls	r1, r7, #31
 800783a:	d508      	bpl.n	800784e <_dtoa_r+0x39e>
 800783c:	ec51 0b18 	vmov	r0, r1, d8
 8007840:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007844:	f7f8 fee0 	bl	8000608 <__aeabi_dmul>
 8007848:	ec41 0b18 	vmov	d8, r0, r1
 800784c:	3501      	adds	r5, #1
 800784e:	107f      	asrs	r7, r7, #1
 8007850:	3608      	adds	r6, #8
 8007852:	e7e5      	b.n	8007820 <_dtoa_r+0x370>
 8007854:	f000 80a6 	beq.w	80079a4 <_dtoa_r+0x4f4>
 8007858:	f1ca 0600 	rsb	r6, sl, #0
 800785c:	4ba5      	ldr	r3, [pc, #660]	; (8007af4 <_dtoa_r+0x644>)
 800785e:	4fa6      	ldr	r7, [pc, #664]	; (8007af8 <_dtoa_r+0x648>)
 8007860:	f006 020f 	and.w	r2, r6, #15
 8007864:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007870:	f7f8 feca 	bl	8000608 <__aeabi_dmul>
 8007874:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007878:	1136      	asrs	r6, r6, #4
 800787a:	2300      	movs	r3, #0
 800787c:	2502      	movs	r5, #2
 800787e:	2e00      	cmp	r6, #0
 8007880:	f040 8085 	bne.w	800798e <_dtoa_r+0x4de>
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1d2      	bne.n	800782e <_dtoa_r+0x37e>
 8007888:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800788a:	2b00      	cmp	r3, #0
 800788c:	f000 808c 	beq.w	80079a8 <_dtoa_r+0x4f8>
 8007890:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007894:	4b99      	ldr	r3, [pc, #612]	; (8007afc <_dtoa_r+0x64c>)
 8007896:	2200      	movs	r2, #0
 8007898:	4630      	mov	r0, r6
 800789a:	4639      	mov	r1, r7
 800789c:	f7f9 f926 	bl	8000aec <__aeabi_dcmplt>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	f000 8081 	beq.w	80079a8 <_dtoa_r+0x4f8>
 80078a6:	9b01      	ldr	r3, [sp, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d07d      	beq.n	80079a8 <_dtoa_r+0x4f8>
 80078ac:	f1b9 0f00 	cmp.w	r9, #0
 80078b0:	dd3c      	ble.n	800792c <_dtoa_r+0x47c>
 80078b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80078b6:	9307      	str	r3, [sp, #28]
 80078b8:	2200      	movs	r2, #0
 80078ba:	4b91      	ldr	r3, [pc, #580]	; (8007b00 <_dtoa_r+0x650>)
 80078bc:	4630      	mov	r0, r6
 80078be:	4639      	mov	r1, r7
 80078c0:	f7f8 fea2 	bl	8000608 <__aeabi_dmul>
 80078c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078c8:	3501      	adds	r5, #1
 80078ca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80078ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80078d2:	4628      	mov	r0, r5
 80078d4:	f7f8 fe2e 	bl	8000534 <__aeabi_i2d>
 80078d8:	4632      	mov	r2, r6
 80078da:	463b      	mov	r3, r7
 80078dc:	f7f8 fe94 	bl	8000608 <__aeabi_dmul>
 80078e0:	4b88      	ldr	r3, [pc, #544]	; (8007b04 <_dtoa_r+0x654>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	f7f8 fcda 	bl	800029c <__adddf3>
 80078e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80078ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078f0:	9303      	str	r3, [sp, #12]
 80078f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d15c      	bne.n	80079b2 <_dtoa_r+0x502>
 80078f8:	4b83      	ldr	r3, [pc, #524]	; (8007b08 <_dtoa_r+0x658>)
 80078fa:	2200      	movs	r2, #0
 80078fc:	4630      	mov	r0, r6
 80078fe:	4639      	mov	r1, r7
 8007900:	f7f8 fcca 	bl	8000298 <__aeabi_dsub>
 8007904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007908:	4606      	mov	r6, r0
 800790a:	460f      	mov	r7, r1
 800790c:	f7f9 f90c 	bl	8000b28 <__aeabi_dcmpgt>
 8007910:	2800      	cmp	r0, #0
 8007912:	f040 8296 	bne.w	8007e42 <_dtoa_r+0x992>
 8007916:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800791a:	4630      	mov	r0, r6
 800791c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007920:	4639      	mov	r1, r7
 8007922:	f7f9 f8e3 	bl	8000aec <__aeabi_dcmplt>
 8007926:	2800      	cmp	r0, #0
 8007928:	f040 8288 	bne.w	8007e3c <_dtoa_r+0x98c>
 800792c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007930:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007934:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007936:	2b00      	cmp	r3, #0
 8007938:	f2c0 8158 	blt.w	8007bec <_dtoa_r+0x73c>
 800793c:	f1ba 0f0e 	cmp.w	sl, #14
 8007940:	f300 8154 	bgt.w	8007bec <_dtoa_r+0x73c>
 8007944:	4b6b      	ldr	r3, [pc, #428]	; (8007af4 <_dtoa_r+0x644>)
 8007946:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800794a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800794e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007950:	2b00      	cmp	r3, #0
 8007952:	f280 80e3 	bge.w	8007b1c <_dtoa_r+0x66c>
 8007956:	9b01      	ldr	r3, [sp, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	f300 80df 	bgt.w	8007b1c <_dtoa_r+0x66c>
 800795e:	f040 826d 	bne.w	8007e3c <_dtoa_r+0x98c>
 8007962:	4b69      	ldr	r3, [pc, #420]	; (8007b08 <_dtoa_r+0x658>)
 8007964:	2200      	movs	r2, #0
 8007966:	4640      	mov	r0, r8
 8007968:	4649      	mov	r1, r9
 800796a:	f7f8 fe4d 	bl	8000608 <__aeabi_dmul>
 800796e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007972:	f7f9 f8cf 	bl	8000b14 <__aeabi_dcmpge>
 8007976:	9e01      	ldr	r6, [sp, #4]
 8007978:	4637      	mov	r7, r6
 800797a:	2800      	cmp	r0, #0
 800797c:	f040 8243 	bne.w	8007e06 <_dtoa_r+0x956>
 8007980:	9d00      	ldr	r5, [sp, #0]
 8007982:	2331      	movs	r3, #49	; 0x31
 8007984:	f805 3b01 	strb.w	r3, [r5], #1
 8007988:	f10a 0a01 	add.w	sl, sl, #1
 800798c:	e23f      	b.n	8007e0e <_dtoa_r+0x95e>
 800798e:	07f2      	lsls	r2, r6, #31
 8007990:	d505      	bpl.n	800799e <_dtoa_r+0x4ee>
 8007992:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007996:	f7f8 fe37 	bl	8000608 <__aeabi_dmul>
 800799a:	3501      	adds	r5, #1
 800799c:	2301      	movs	r3, #1
 800799e:	1076      	asrs	r6, r6, #1
 80079a0:	3708      	adds	r7, #8
 80079a2:	e76c      	b.n	800787e <_dtoa_r+0x3ce>
 80079a4:	2502      	movs	r5, #2
 80079a6:	e76f      	b.n	8007888 <_dtoa_r+0x3d8>
 80079a8:	9b01      	ldr	r3, [sp, #4]
 80079aa:	f8cd a01c 	str.w	sl, [sp, #28]
 80079ae:	930c      	str	r3, [sp, #48]	; 0x30
 80079b0:	e78d      	b.n	80078ce <_dtoa_r+0x41e>
 80079b2:	9900      	ldr	r1, [sp, #0]
 80079b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80079b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079b8:	4b4e      	ldr	r3, [pc, #312]	; (8007af4 <_dtoa_r+0x644>)
 80079ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80079be:	4401      	add	r1, r0
 80079c0:	9102      	str	r1, [sp, #8]
 80079c2:	9908      	ldr	r1, [sp, #32]
 80079c4:	eeb0 8a47 	vmov.f32	s16, s14
 80079c8:	eef0 8a67 	vmov.f32	s17, s15
 80079cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80079d4:	2900      	cmp	r1, #0
 80079d6:	d045      	beq.n	8007a64 <_dtoa_r+0x5b4>
 80079d8:	494c      	ldr	r1, [pc, #304]	; (8007b0c <_dtoa_r+0x65c>)
 80079da:	2000      	movs	r0, #0
 80079dc:	f7f8 ff3e 	bl	800085c <__aeabi_ddiv>
 80079e0:	ec53 2b18 	vmov	r2, r3, d8
 80079e4:	f7f8 fc58 	bl	8000298 <__aeabi_dsub>
 80079e8:	9d00      	ldr	r5, [sp, #0]
 80079ea:	ec41 0b18 	vmov	d8, r0, r1
 80079ee:	4639      	mov	r1, r7
 80079f0:	4630      	mov	r0, r6
 80079f2:	f7f9 f8b9 	bl	8000b68 <__aeabi_d2iz>
 80079f6:	900c      	str	r0, [sp, #48]	; 0x30
 80079f8:	f7f8 fd9c 	bl	8000534 <__aeabi_i2d>
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	4630      	mov	r0, r6
 8007a02:	4639      	mov	r1, r7
 8007a04:	f7f8 fc48 	bl	8000298 <__aeabi_dsub>
 8007a08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a0a:	3330      	adds	r3, #48	; 0x30
 8007a0c:	f805 3b01 	strb.w	r3, [r5], #1
 8007a10:	ec53 2b18 	vmov	r2, r3, d8
 8007a14:	4606      	mov	r6, r0
 8007a16:	460f      	mov	r7, r1
 8007a18:	f7f9 f868 	bl	8000aec <__aeabi_dcmplt>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	d165      	bne.n	8007aec <_dtoa_r+0x63c>
 8007a20:	4632      	mov	r2, r6
 8007a22:	463b      	mov	r3, r7
 8007a24:	4935      	ldr	r1, [pc, #212]	; (8007afc <_dtoa_r+0x64c>)
 8007a26:	2000      	movs	r0, #0
 8007a28:	f7f8 fc36 	bl	8000298 <__aeabi_dsub>
 8007a2c:	ec53 2b18 	vmov	r2, r3, d8
 8007a30:	f7f9 f85c 	bl	8000aec <__aeabi_dcmplt>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	f040 80b9 	bne.w	8007bac <_dtoa_r+0x6fc>
 8007a3a:	9b02      	ldr	r3, [sp, #8]
 8007a3c:	429d      	cmp	r5, r3
 8007a3e:	f43f af75 	beq.w	800792c <_dtoa_r+0x47c>
 8007a42:	4b2f      	ldr	r3, [pc, #188]	; (8007b00 <_dtoa_r+0x650>)
 8007a44:	ec51 0b18 	vmov	r0, r1, d8
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f7f8 fddd 	bl	8000608 <__aeabi_dmul>
 8007a4e:	4b2c      	ldr	r3, [pc, #176]	; (8007b00 <_dtoa_r+0x650>)
 8007a50:	ec41 0b18 	vmov	d8, r0, r1
 8007a54:	2200      	movs	r2, #0
 8007a56:	4630      	mov	r0, r6
 8007a58:	4639      	mov	r1, r7
 8007a5a:	f7f8 fdd5 	bl	8000608 <__aeabi_dmul>
 8007a5e:	4606      	mov	r6, r0
 8007a60:	460f      	mov	r7, r1
 8007a62:	e7c4      	b.n	80079ee <_dtoa_r+0x53e>
 8007a64:	ec51 0b17 	vmov	r0, r1, d7
 8007a68:	f7f8 fdce 	bl	8000608 <__aeabi_dmul>
 8007a6c:	9b02      	ldr	r3, [sp, #8]
 8007a6e:	9d00      	ldr	r5, [sp, #0]
 8007a70:	930c      	str	r3, [sp, #48]	; 0x30
 8007a72:	ec41 0b18 	vmov	d8, r0, r1
 8007a76:	4639      	mov	r1, r7
 8007a78:	4630      	mov	r0, r6
 8007a7a:	f7f9 f875 	bl	8000b68 <__aeabi_d2iz>
 8007a7e:	9011      	str	r0, [sp, #68]	; 0x44
 8007a80:	f7f8 fd58 	bl	8000534 <__aeabi_i2d>
 8007a84:	4602      	mov	r2, r0
 8007a86:	460b      	mov	r3, r1
 8007a88:	4630      	mov	r0, r6
 8007a8a:	4639      	mov	r1, r7
 8007a8c:	f7f8 fc04 	bl	8000298 <__aeabi_dsub>
 8007a90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a92:	3330      	adds	r3, #48	; 0x30
 8007a94:	f805 3b01 	strb.w	r3, [r5], #1
 8007a98:	9b02      	ldr	r3, [sp, #8]
 8007a9a:	429d      	cmp	r5, r3
 8007a9c:	4606      	mov	r6, r0
 8007a9e:	460f      	mov	r7, r1
 8007aa0:	f04f 0200 	mov.w	r2, #0
 8007aa4:	d134      	bne.n	8007b10 <_dtoa_r+0x660>
 8007aa6:	4b19      	ldr	r3, [pc, #100]	; (8007b0c <_dtoa_r+0x65c>)
 8007aa8:	ec51 0b18 	vmov	r0, r1, d8
 8007aac:	f7f8 fbf6 	bl	800029c <__adddf3>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	4639      	mov	r1, r7
 8007ab8:	f7f9 f836 	bl	8000b28 <__aeabi_dcmpgt>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	d175      	bne.n	8007bac <_dtoa_r+0x6fc>
 8007ac0:	ec53 2b18 	vmov	r2, r3, d8
 8007ac4:	4911      	ldr	r1, [pc, #68]	; (8007b0c <_dtoa_r+0x65c>)
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	f7f8 fbe6 	bl	8000298 <__aeabi_dsub>
 8007acc:	4602      	mov	r2, r0
 8007ace:	460b      	mov	r3, r1
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	4639      	mov	r1, r7
 8007ad4:	f7f9 f80a 	bl	8000aec <__aeabi_dcmplt>
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	f43f af27 	beq.w	800792c <_dtoa_r+0x47c>
 8007ade:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ae0:	1e6b      	subs	r3, r5, #1
 8007ae2:	930c      	str	r3, [sp, #48]	; 0x30
 8007ae4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ae8:	2b30      	cmp	r3, #48	; 0x30
 8007aea:	d0f8      	beq.n	8007ade <_dtoa_r+0x62e>
 8007aec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007af0:	e04a      	b.n	8007b88 <_dtoa_r+0x6d8>
 8007af2:	bf00      	nop
 8007af4:	08009b40 	.word	0x08009b40
 8007af8:	08009b18 	.word	0x08009b18
 8007afc:	3ff00000 	.word	0x3ff00000
 8007b00:	40240000 	.word	0x40240000
 8007b04:	401c0000 	.word	0x401c0000
 8007b08:	40140000 	.word	0x40140000
 8007b0c:	3fe00000 	.word	0x3fe00000
 8007b10:	4baf      	ldr	r3, [pc, #700]	; (8007dd0 <_dtoa_r+0x920>)
 8007b12:	f7f8 fd79 	bl	8000608 <__aeabi_dmul>
 8007b16:	4606      	mov	r6, r0
 8007b18:	460f      	mov	r7, r1
 8007b1a:	e7ac      	b.n	8007a76 <_dtoa_r+0x5c6>
 8007b1c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b20:	9d00      	ldr	r5, [sp, #0]
 8007b22:	4642      	mov	r2, r8
 8007b24:	464b      	mov	r3, r9
 8007b26:	4630      	mov	r0, r6
 8007b28:	4639      	mov	r1, r7
 8007b2a:	f7f8 fe97 	bl	800085c <__aeabi_ddiv>
 8007b2e:	f7f9 f81b 	bl	8000b68 <__aeabi_d2iz>
 8007b32:	9002      	str	r0, [sp, #8]
 8007b34:	f7f8 fcfe 	bl	8000534 <__aeabi_i2d>
 8007b38:	4642      	mov	r2, r8
 8007b3a:	464b      	mov	r3, r9
 8007b3c:	f7f8 fd64 	bl	8000608 <__aeabi_dmul>
 8007b40:	4602      	mov	r2, r0
 8007b42:	460b      	mov	r3, r1
 8007b44:	4630      	mov	r0, r6
 8007b46:	4639      	mov	r1, r7
 8007b48:	f7f8 fba6 	bl	8000298 <__aeabi_dsub>
 8007b4c:	9e02      	ldr	r6, [sp, #8]
 8007b4e:	9f01      	ldr	r7, [sp, #4]
 8007b50:	3630      	adds	r6, #48	; 0x30
 8007b52:	f805 6b01 	strb.w	r6, [r5], #1
 8007b56:	9e00      	ldr	r6, [sp, #0]
 8007b58:	1bae      	subs	r6, r5, r6
 8007b5a:	42b7      	cmp	r7, r6
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	460b      	mov	r3, r1
 8007b60:	d137      	bne.n	8007bd2 <_dtoa_r+0x722>
 8007b62:	f7f8 fb9b 	bl	800029c <__adddf3>
 8007b66:	4642      	mov	r2, r8
 8007b68:	464b      	mov	r3, r9
 8007b6a:	4606      	mov	r6, r0
 8007b6c:	460f      	mov	r7, r1
 8007b6e:	f7f8 ffdb 	bl	8000b28 <__aeabi_dcmpgt>
 8007b72:	b9c8      	cbnz	r0, 8007ba8 <_dtoa_r+0x6f8>
 8007b74:	4642      	mov	r2, r8
 8007b76:	464b      	mov	r3, r9
 8007b78:	4630      	mov	r0, r6
 8007b7a:	4639      	mov	r1, r7
 8007b7c:	f7f8 ffac 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b80:	b110      	cbz	r0, 8007b88 <_dtoa_r+0x6d8>
 8007b82:	9b02      	ldr	r3, [sp, #8]
 8007b84:	07d9      	lsls	r1, r3, #31
 8007b86:	d40f      	bmi.n	8007ba8 <_dtoa_r+0x6f8>
 8007b88:	4620      	mov	r0, r4
 8007b8a:	4659      	mov	r1, fp
 8007b8c:	f000 fad6 	bl	800813c <_Bfree>
 8007b90:	2300      	movs	r3, #0
 8007b92:	702b      	strb	r3, [r5, #0]
 8007b94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b96:	f10a 0001 	add.w	r0, sl, #1
 8007b9a:	6018      	str	r0, [r3, #0]
 8007b9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f43f acd8 	beq.w	8007554 <_dtoa_r+0xa4>
 8007ba4:	601d      	str	r5, [r3, #0]
 8007ba6:	e4d5      	b.n	8007554 <_dtoa_r+0xa4>
 8007ba8:	f8cd a01c 	str.w	sl, [sp, #28]
 8007bac:	462b      	mov	r3, r5
 8007bae:	461d      	mov	r5, r3
 8007bb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bb4:	2a39      	cmp	r2, #57	; 0x39
 8007bb6:	d108      	bne.n	8007bca <_dtoa_r+0x71a>
 8007bb8:	9a00      	ldr	r2, [sp, #0]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d1f7      	bne.n	8007bae <_dtoa_r+0x6fe>
 8007bbe:	9a07      	ldr	r2, [sp, #28]
 8007bc0:	9900      	ldr	r1, [sp, #0]
 8007bc2:	3201      	adds	r2, #1
 8007bc4:	9207      	str	r2, [sp, #28]
 8007bc6:	2230      	movs	r2, #48	; 0x30
 8007bc8:	700a      	strb	r2, [r1, #0]
 8007bca:	781a      	ldrb	r2, [r3, #0]
 8007bcc:	3201      	adds	r2, #1
 8007bce:	701a      	strb	r2, [r3, #0]
 8007bd0:	e78c      	b.n	8007aec <_dtoa_r+0x63c>
 8007bd2:	4b7f      	ldr	r3, [pc, #508]	; (8007dd0 <_dtoa_r+0x920>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f7f8 fd17 	bl	8000608 <__aeabi_dmul>
 8007bda:	2200      	movs	r2, #0
 8007bdc:	2300      	movs	r3, #0
 8007bde:	4606      	mov	r6, r0
 8007be0:	460f      	mov	r7, r1
 8007be2:	f7f8 ff79 	bl	8000ad8 <__aeabi_dcmpeq>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	d09b      	beq.n	8007b22 <_dtoa_r+0x672>
 8007bea:	e7cd      	b.n	8007b88 <_dtoa_r+0x6d8>
 8007bec:	9a08      	ldr	r2, [sp, #32]
 8007bee:	2a00      	cmp	r2, #0
 8007bf0:	f000 80c4 	beq.w	8007d7c <_dtoa_r+0x8cc>
 8007bf4:	9a05      	ldr	r2, [sp, #20]
 8007bf6:	2a01      	cmp	r2, #1
 8007bf8:	f300 80a8 	bgt.w	8007d4c <_dtoa_r+0x89c>
 8007bfc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007bfe:	2a00      	cmp	r2, #0
 8007c00:	f000 80a0 	beq.w	8007d44 <_dtoa_r+0x894>
 8007c04:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c08:	9e06      	ldr	r6, [sp, #24]
 8007c0a:	4645      	mov	r5, r8
 8007c0c:	9a04      	ldr	r2, [sp, #16]
 8007c0e:	2101      	movs	r1, #1
 8007c10:	441a      	add	r2, r3
 8007c12:	4620      	mov	r0, r4
 8007c14:	4498      	add	r8, r3
 8007c16:	9204      	str	r2, [sp, #16]
 8007c18:	f000 fb4c 	bl	80082b4 <__i2b>
 8007c1c:	4607      	mov	r7, r0
 8007c1e:	2d00      	cmp	r5, #0
 8007c20:	dd0b      	ble.n	8007c3a <_dtoa_r+0x78a>
 8007c22:	9b04      	ldr	r3, [sp, #16]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	dd08      	ble.n	8007c3a <_dtoa_r+0x78a>
 8007c28:	42ab      	cmp	r3, r5
 8007c2a:	9a04      	ldr	r2, [sp, #16]
 8007c2c:	bfa8      	it	ge
 8007c2e:	462b      	movge	r3, r5
 8007c30:	eba8 0803 	sub.w	r8, r8, r3
 8007c34:	1aed      	subs	r5, r5, r3
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	9304      	str	r3, [sp, #16]
 8007c3a:	9b06      	ldr	r3, [sp, #24]
 8007c3c:	b1fb      	cbz	r3, 8007c7e <_dtoa_r+0x7ce>
 8007c3e:	9b08      	ldr	r3, [sp, #32]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 809f 	beq.w	8007d84 <_dtoa_r+0x8d4>
 8007c46:	2e00      	cmp	r6, #0
 8007c48:	dd11      	ble.n	8007c6e <_dtoa_r+0x7be>
 8007c4a:	4639      	mov	r1, r7
 8007c4c:	4632      	mov	r2, r6
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f000 fbec 	bl	800842c <__pow5mult>
 8007c54:	465a      	mov	r2, fp
 8007c56:	4601      	mov	r1, r0
 8007c58:	4607      	mov	r7, r0
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	f000 fb40 	bl	80082e0 <__multiply>
 8007c60:	4659      	mov	r1, fp
 8007c62:	9007      	str	r0, [sp, #28]
 8007c64:	4620      	mov	r0, r4
 8007c66:	f000 fa69 	bl	800813c <_Bfree>
 8007c6a:	9b07      	ldr	r3, [sp, #28]
 8007c6c:	469b      	mov	fp, r3
 8007c6e:	9b06      	ldr	r3, [sp, #24]
 8007c70:	1b9a      	subs	r2, r3, r6
 8007c72:	d004      	beq.n	8007c7e <_dtoa_r+0x7ce>
 8007c74:	4659      	mov	r1, fp
 8007c76:	4620      	mov	r0, r4
 8007c78:	f000 fbd8 	bl	800842c <__pow5mult>
 8007c7c:	4683      	mov	fp, r0
 8007c7e:	2101      	movs	r1, #1
 8007c80:	4620      	mov	r0, r4
 8007c82:	f000 fb17 	bl	80082b4 <__i2b>
 8007c86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	4606      	mov	r6, r0
 8007c8c:	dd7c      	ble.n	8007d88 <_dtoa_r+0x8d8>
 8007c8e:	461a      	mov	r2, r3
 8007c90:	4601      	mov	r1, r0
 8007c92:	4620      	mov	r0, r4
 8007c94:	f000 fbca 	bl	800842c <__pow5mult>
 8007c98:	9b05      	ldr	r3, [sp, #20]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	4606      	mov	r6, r0
 8007c9e:	dd76      	ble.n	8007d8e <_dtoa_r+0x8de>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	9306      	str	r3, [sp, #24]
 8007ca4:	6933      	ldr	r3, [r6, #16]
 8007ca6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007caa:	6918      	ldr	r0, [r3, #16]
 8007cac:	f000 fab2 	bl	8008214 <__hi0bits>
 8007cb0:	f1c0 0020 	rsb	r0, r0, #32
 8007cb4:	9b04      	ldr	r3, [sp, #16]
 8007cb6:	4418      	add	r0, r3
 8007cb8:	f010 001f 	ands.w	r0, r0, #31
 8007cbc:	f000 8086 	beq.w	8007dcc <_dtoa_r+0x91c>
 8007cc0:	f1c0 0320 	rsb	r3, r0, #32
 8007cc4:	2b04      	cmp	r3, #4
 8007cc6:	dd7f      	ble.n	8007dc8 <_dtoa_r+0x918>
 8007cc8:	f1c0 001c 	rsb	r0, r0, #28
 8007ccc:	9b04      	ldr	r3, [sp, #16]
 8007cce:	4403      	add	r3, r0
 8007cd0:	4480      	add	r8, r0
 8007cd2:	4405      	add	r5, r0
 8007cd4:	9304      	str	r3, [sp, #16]
 8007cd6:	f1b8 0f00 	cmp.w	r8, #0
 8007cda:	dd05      	ble.n	8007ce8 <_dtoa_r+0x838>
 8007cdc:	4659      	mov	r1, fp
 8007cde:	4642      	mov	r2, r8
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	f000 fbfd 	bl	80084e0 <__lshift>
 8007ce6:	4683      	mov	fp, r0
 8007ce8:	9b04      	ldr	r3, [sp, #16]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	dd05      	ble.n	8007cfa <_dtoa_r+0x84a>
 8007cee:	4631      	mov	r1, r6
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f000 fbf4 	bl	80084e0 <__lshift>
 8007cf8:	4606      	mov	r6, r0
 8007cfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d069      	beq.n	8007dd4 <_dtoa_r+0x924>
 8007d00:	4631      	mov	r1, r6
 8007d02:	4658      	mov	r0, fp
 8007d04:	f000 fc58 	bl	80085b8 <__mcmp>
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	da63      	bge.n	8007dd4 <_dtoa_r+0x924>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	4659      	mov	r1, fp
 8007d10:	220a      	movs	r2, #10
 8007d12:	4620      	mov	r0, r4
 8007d14:	f000 fa34 	bl	8008180 <__multadd>
 8007d18:	9b08      	ldr	r3, [sp, #32]
 8007d1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d1e:	4683      	mov	fp, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f000 818f 	beq.w	8008044 <_dtoa_r+0xb94>
 8007d26:	4639      	mov	r1, r7
 8007d28:	2300      	movs	r3, #0
 8007d2a:	220a      	movs	r2, #10
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f000 fa27 	bl	8008180 <__multadd>
 8007d32:	f1b9 0f00 	cmp.w	r9, #0
 8007d36:	4607      	mov	r7, r0
 8007d38:	f300 808e 	bgt.w	8007e58 <_dtoa_r+0x9a8>
 8007d3c:	9b05      	ldr	r3, [sp, #20]
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	dc50      	bgt.n	8007de4 <_dtoa_r+0x934>
 8007d42:	e089      	b.n	8007e58 <_dtoa_r+0x9a8>
 8007d44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d4a:	e75d      	b.n	8007c08 <_dtoa_r+0x758>
 8007d4c:	9b01      	ldr	r3, [sp, #4]
 8007d4e:	1e5e      	subs	r6, r3, #1
 8007d50:	9b06      	ldr	r3, [sp, #24]
 8007d52:	42b3      	cmp	r3, r6
 8007d54:	bfbf      	itttt	lt
 8007d56:	9b06      	ldrlt	r3, [sp, #24]
 8007d58:	9606      	strlt	r6, [sp, #24]
 8007d5a:	1af2      	sublt	r2, r6, r3
 8007d5c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007d5e:	bfb6      	itet	lt
 8007d60:	189b      	addlt	r3, r3, r2
 8007d62:	1b9e      	subge	r6, r3, r6
 8007d64:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007d66:	9b01      	ldr	r3, [sp, #4]
 8007d68:	bfb8      	it	lt
 8007d6a:	2600      	movlt	r6, #0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	bfb5      	itete	lt
 8007d70:	eba8 0503 	sublt.w	r5, r8, r3
 8007d74:	9b01      	ldrge	r3, [sp, #4]
 8007d76:	2300      	movlt	r3, #0
 8007d78:	4645      	movge	r5, r8
 8007d7a:	e747      	b.n	8007c0c <_dtoa_r+0x75c>
 8007d7c:	9e06      	ldr	r6, [sp, #24]
 8007d7e:	9f08      	ldr	r7, [sp, #32]
 8007d80:	4645      	mov	r5, r8
 8007d82:	e74c      	b.n	8007c1e <_dtoa_r+0x76e>
 8007d84:	9a06      	ldr	r2, [sp, #24]
 8007d86:	e775      	b.n	8007c74 <_dtoa_r+0x7c4>
 8007d88:	9b05      	ldr	r3, [sp, #20]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	dc18      	bgt.n	8007dc0 <_dtoa_r+0x910>
 8007d8e:	9b02      	ldr	r3, [sp, #8]
 8007d90:	b9b3      	cbnz	r3, 8007dc0 <_dtoa_r+0x910>
 8007d92:	9b03      	ldr	r3, [sp, #12]
 8007d94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d98:	b9a3      	cbnz	r3, 8007dc4 <_dtoa_r+0x914>
 8007d9a:	9b03      	ldr	r3, [sp, #12]
 8007d9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007da0:	0d1b      	lsrs	r3, r3, #20
 8007da2:	051b      	lsls	r3, r3, #20
 8007da4:	b12b      	cbz	r3, 8007db2 <_dtoa_r+0x902>
 8007da6:	9b04      	ldr	r3, [sp, #16]
 8007da8:	3301      	adds	r3, #1
 8007daa:	9304      	str	r3, [sp, #16]
 8007dac:	f108 0801 	add.w	r8, r8, #1
 8007db0:	2301      	movs	r3, #1
 8007db2:	9306      	str	r3, [sp, #24]
 8007db4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f47f af74 	bne.w	8007ca4 <_dtoa_r+0x7f4>
 8007dbc:	2001      	movs	r0, #1
 8007dbe:	e779      	b.n	8007cb4 <_dtoa_r+0x804>
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	e7f6      	b.n	8007db2 <_dtoa_r+0x902>
 8007dc4:	9b02      	ldr	r3, [sp, #8]
 8007dc6:	e7f4      	b.n	8007db2 <_dtoa_r+0x902>
 8007dc8:	d085      	beq.n	8007cd6 <_dtoa_r+0x826>
 8007dca:	4618      	mov	r0, r3
 8007dcc:	301c      	adds	r0, #28
 8007dce:	e77d      	b.n	8007ccc <_dtoa_r+0x81c>
 8007dd0:	40240000 	.word	0x40240000
 8007dd4:	9b01      	ldr	r3, [sp, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	dc38      	bgt.n	8007e4c <_dtoa_r+0x99c>
 8007dda:	9b05      	ldr	r3, [sp, #20]
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	dd35      	ble.n	8007e4c <_dtoa_r+0x99c>
 8007de0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007de4:	f1b9 0f00 	cmp.w	r9, #0
 8007de8:	d10d      	bne.n	8007e06 <_dtoa_r+0x956>
 8007dea:	4631      	mov	r1, r6
 8007dec:	464b      	mov	r3, r9
 8007dee:	2205      	movs	r2, #5
 8007df0:	4620      	mov	r0, r4
 8007df2:	f000 f9c5 	bl	8008180 <__multadd>
 8007df6:	4601      	mov	r1, r0
 8007df8:	4606      	mov	r6, r0
 8007dfa:	4658      	mov	r0, fp
 8007dfc:	f000 fbdc 	bl	80085b8 <__mcmp>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	f73f adbd 	bgt.w	8007980 <_dtoa_r+0x4d0>
 8007e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e08:	9d00      	ldr	r5, [sp, #0]
 8007e0a:	ea6f 0a03 	mvn.w	sl, r3
 8007e0e:	f04f 0800 	mov.w	r8, #0
 8007e12:	4631      	mov	r1, r6
 8007e14:	4620      	mov	r0, r4
 8007e16:	f000 f991 	bl	800813c <_Bfree>
 8007e1a:	2f00      	cmp	r7, #0
 8007e1c:	f43f aeb4 	beq.w	8007b88 <_dtoa_r+0x6d8>
 8007e20:	f1b8 0f00 	cmp.w	r8, #0
 8007e24:	d005      	beq.n	8007e32 <_dtoa_r+0x982>
 8007e26:	45b8      	cmp	r8, r7
 8007e28:	d003      	beq.n	8007e32 <_dtoa_r+0x982>
 8007e2a:	4641      	mov	r1, r8
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f000 f985 	bl	800813c <_Bfree>
 8007e32:	4639      	mov	r1, r7
 8007e34:	4620      	mov	r0, r4
 8007e36:	f000 f981 	bl	800813c <_Bfree>
 8007e3a:	e6a5      	b.n	8007b88 <_dtoa_r+0x6d8>
 8007e3c:	2600      	movs	r6, #0
 8007e3e:	4637      	mov	r7, r6
 8007e40:	e7e1      	b.n	8007e06 <_dtoa_r+0x956>
 8007e42:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007e44:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007e48:	4637      	mov	r7, r6
 8007e4a:	e599      	b.n	8007980 <_dtoa_r+0x4d0>
 8007e4c:	9b08      	ldr	r3, [sp, #32]
 8007e4e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f000 80fd 	beq.w	8008052 <_dtoa_r+0xba2>
 8007e58:	2d00      	cmp	r5, #0
 8007e5a:	dd05      	ble.n	8007e68 <_dtoa_r+0x9b8>
 8007e5c:	4639      	mov	r1, r7
 8007e5e:	462a      	mov	r2, r5
 8007e60:	4620      	mov	r0, r4
 8007e62:	f000 fb3d 	bl	80084e0 <__lshift>
 8007e66:	4607      	mov	r7, r0
 8007e68:	9b06      	ldr	r3, [sp, #24]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d05c      	beq.n	8007f28 <_dtoa_r+0xa78>
 8007e6e:	6879      	ldr	r1, [r7, #4]
 8007e70:	4620      	mov	r0, r4
 8007e72:	f000 f923 	bl	80080bc <_Balloc>
 8007e76:	4605      	mov	r5, r0
 8007e78:	b928      	cbnz	r0, 8007e86 <_dtoa_r+0x9d6>
 8007e7a:	4b80      	ldr	r3, [pc, #512]	; (800807c <_dtoa_r+0xbcc>)
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007e82:	f7ff bb2e 	b.w	80074e2 <_dtoa_r+0x32>
 8007e86:	693a      	ldr	r2, [r7, #16]
 8007e88:	3202      	adds	r2, #2
 8007e8a:	0092      	lsls	r2, r2, #2
 8007e8c:	f107 010c 	add.w	r1, r7, #12
 8007e90:	300c      	adds	r0, #12
 8007e92:	f000 f905 	bl	80080a0 <memcpy>
 8007e96:	2201      	movs	r2, #1
 8007e98:	4629      	mov	r1, r5
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f000 fb20 	bl	80084e0 <__lshift>
 8007ea0:	9b00      	ldr	r3, [sp, #0]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	9301      	str	r3, [sp, #4]
 8007ea6:	9b00      	ldr	r3, [sp, #0]
 8007ea8:	444b      	add	r3, r9
 8007eaa:	9307      	str	r3, [sp, #28]
 8007eac:	9b02      	ldr	r3, [sp, #8]
 8007eae:	f003 0301 	and.w	r3, r3, #1
 8007eb2:	46b8      	mov	r8, r7
 8007eb4:	9306      	str	r3, [sp, #24]
 8007eb6:	4607      	mov	r7, r0
 8007eb8:	9b01      	ldr	r3, [sp, #4]
 8007eba:	4631      	mov	r1, r6
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	4658      	mov	r0, fp
 8007ec0:	9302      	str	r3, [sp, #8]
 8007ec2:	f7ff fa69 	bl	8007398 <quorem>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	3330      	adds	r3, #48	; 0x30
 8007eca:	9004      	str	r0, [sp, #16]
 8007ecc:	4641      	mov	r1, r8
 8007ece:	4658      	mov	r0, fp
 8007ed0:	9308      	str	r3, [sp, #32]
 8007ed2:	f000 fb71 	bl	80085b8 <__mcmp>
 8007ed6:	463a      	mov	r2, r7
 8007ed8:	4681      	mov	r9, r0
 8007eda:	4631      	mov	r1, r6
 8007edc:	4620      	mov	r0, r4
 8007ede:	f000 fb87 	bl	80085f0 <__mdiff>
 8007ee2:	68c2      	ldr	r2, [r0, #12]
 8007ee4:	9b08      	ldr	r3, [sp, #32]
 8007ee6:	4605      	mov	r5, r0
 8007ee8:	bb02      	cbnz	r2, 8007f2c <_dtoa_r+0xa7c>
 8007eea:	4601      	mov	r1, r0
 8007eec:	4658      	mov	r0, fp
 8007eee:	f000 fb63 	bl	80085b8 <__mcmp>
 8007ef2:	9b08      	ldr	r3, [sp, #32]
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	4620      	mov	r0, r4
 8007efa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007efe:	f000 f91d 	bl	800813c <_Bfree>
 8007f02:	9b05      	ldr	r3, [sp, #20]
 8007f04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f06:	9d01      	ldr	r5, [sp, #4]
 8007f08:	ea43 0102 	orr.w	r1, r3, r2
 8007f0c:	9b06      	ldr	r3, [sp, #24]
 8007f0e:	430b      	orrs	r3, r1
 8007f10:	9b08      	ldr	r3, [sp, #32]
 8007f12:	d10d      	bne.n	8007f30 <_dtoa_r+0xa80>
 8007f14:	2b39      	cmp	r3, #57	; 0x39
 8007f16:	d029      	beq.n	8007f6c <_dtoa_r+0xabc>
 8007f18:	f1b9 0f00 	cmp.w	r9, #0
 8007f1c:	dd01      	ble.n	8007f22 <_dtoa_r+0xa72>
 8007f1e:	9b04      	ldr	r3, [sp, #16]
 8007f20:	3331      	adds	r3, #49	; 0x31
 8007f22:	9a02      	ldr	r2, [sp, #8]
 8007f24:	7013      	strb	r3, [r2, #0]
 8007f26:	e774      	b.n	8007e12 <_dtoa_r+0x962>
 8007f28:	4638      	mov	r0, r7
 8007f2a:	e7b9      	b.n	8007ea0 <_dtoa_r+0x9f0>
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	e7e2      	b.n	8007ef6 <_dtoa_r+0xa46>
 8007f30:	f1b9 0f00 	cmp.w	r9, #0
 8007f34:	db06      	blt.n	8007f44 <_dtoa_r+0xa94>
 8007f36:	9905      	ldr	r1, [sp, #20]
 8007f38:	ea41 0909 	orr.w	r9, r1, r9
 8007f3c:	9906      	ldr	r1, [sp, #24]
 8007f3e:	ea59 0101 	orrs.w	r1, r9, r1
 8007f42:	d120      	bne.n	8007f86 <_dtoa_r+0xad6>
 8007f44:	2a00      	cmp	r2, #0
 8007f46:	ddec      	ble.n	8007f22 <_dtoa_r+0xa72>
 8007f48:	4659      	mov	r1, fp
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	9301      	str	r3, [sp, #4]
 8007f50:	f000 fac6 	bl	80084e0 <__lshift>
 8007f54:	4631      	mov	r1, r6
 8007f56:	4683      	mov	fp, r0
 8007f58:	f000 fb2e 	bl	80085b8 <__mcmp>
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	9b01      	ldr	r3, [sp, #4]
 8007f60:	dc02      	bgt.n	8007f68 <_dtoa_r+0xab8>
 8007f62:	d1de      	bne.n	8007f22 <_dtoa_r+0xa72>
 8007f64:	07da      	lsls	r2, r3, #31
 8007f66:	d5dc      	bpl.n	8007f22 <_dtoa_r+0xa72>
 8007f68:	2b39      	cmp	r3, #57	; 0x39
 8007f6a:	d1d8      	bne.n	8007f1e <_dtoa_r+0xa6e>
 8007f6c:	9a02      	ldr	r2, [sp, #8]
 8007f6e:	2339      	movs	r3, #57	; 0x39
 8007f70:	7013      	strb	r3, [r2, #0]
 8007f72:	462b      	mov	r3, r5
 8007f74:	461d      	mov	r5, r3
 8007f76:	3b01      	subs	r3, #1
 8007f78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007f7c:	2a39      	cmp	r2, #57	; 0x39
 8007f7e:	d050      	beq.n	8008022 <_dtoa_r+0xb72>
 8007f80:	3201      	adds	r2, #1
 8007f82:	701a      	strb	r2, [r3, #0]
 8007f84:	e745      	b.n	8007e12 <_dtoa_r+0x962>
 8007f86:	2a00      	cmp	r2, #0
 8007f88:	dd03      	ble.n	8007f92 <_dtoa_r+0xae2>
 8007f8a:	2b39      	cmp	r3, #57	; 0x39
 8007f8c:	d0ee      	beq.n	8007f6c <_dtoa_r+0xabc>
 8007f8e:	3301      	adds	r3, #1
 8007f90:	e7c7      	b.n	8007f22 <_dtoa_r+0xa72>
 8007f92:	9a01      	ldr	r2, [sp, #4]
 8007f94:	9907      	ldr	r1, [sp, #28]
 8007f96:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007f9a:	428a      	cmp	r2, r1
 8007f9c:	d02a      	beq.n	8007ff4 <_dtoa_r+0xb44>
 8007f9e:	4659      	mov	r1, fp
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	220a      	movs	r2, #10
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	f000 f8eb 	bl	8008180 <__multadd>
 8007faa:	45b8      	cmp	r8, r7
 8007fac:	4683      	mov	fp, r0
 8007fae:	f04f 0300 	mov.w	r3, #0
 8007fb2:	f04f 020a 	mov.w	r2, #10
 8007fb6:	4641      	mov	r1, r8
 8007fb8:	4620      	mov	r0, r4
 8007fba:	d107      	bne.n	8007fcc <_dtoa_r+0xb1c>
 8007fbc:	f000 f8e0 	bl	8008180 <__multadd>
 8007fc0:	4680      	mov	r8, r0
 8007fc2:	4607      	mov	r7, r0
 8007fc4:	9b01      	ldr	r3, [sp, #4]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	9301      	str	r3, [sp, #4]
 8007fca:	e775      	b.n	8007eb8 <_dtoa_r+0xa08>
 8007fcc:	f000 f8d8 	bl	8008180 <__multadd>
 8007fd0:	4639      	mov	r1, r7
 8007fd2:	4680      	mov	r8, r0
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	220a      	movs	r2, #10
 8007fd8:	4620      	mov	r0, r4
 8007fda:	f000 f8d1 	bl	8008180 <__multadd>
 8007fde:	4607      	mov	r7, r0
 8007fe0:	e7f0      	b.n	8007fc4 <_dtoa_r+0xb14>
 8007fe2:	f1b9 0f00 	cmp.w	r9, #0
 8007fe6:	9a00      	ldr	r2, [sp, #0]
 8007fe8:	bfcc      	ite	gt
 8007fea:	464d      	movgt	r5, r9
 8007fec:	2501      	movle	r5, #1
 8007fee:	4415      	add	r5, r2
 8007ff0:	f04f 0800 	mov.w	r8, #0
 8007ff4:	4659      	mov	r1, fp
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	9301      	str	r3, [sp, #4]
 8007ffc:	f000 fa70 	bl	80084e0 <__lshift>
 8008000:	4631      	mov	r1, r6
 8008002:	4683      	mov	fp, r0
 8008004:	f000 fad8 	bl	80085b8 <__mcmp>
 8008008:	2800      	cmp	r0, #0
 800800a:	dcb2      	bgt.n	8007f72 <_dtoa_r+0xac2>
 800800c:	d102      	bne.n	8008014 <_dtoa_r+0xb64>
 800800e:	9b01      	ldr	r3, [sp, #4]
 8008010:	07db      	lsls	r3, r3, #31
 8008012:	d4ae      	bmi.n	8007f72 <_dtoa_r+0xac2>
 8008014:	462b      	mov	r3, r5
 8008016:	461d      	mov	r5, r3
 8008018:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800801c:	2a30      	cmp	r2, #48	; 0x30
 800801e:	d0fa      	beq.n	8008016 <_dtoa_r+0xb66>
 8008020:	e6f7      	b.n	8007e12 <_dtoa_r+0x962>
 8008022:	9a00      	ldr	r2, [sp, #0]
 8008024:	429a      	cmp	r2, r3
 8008026:	d1a5      	bne.n	8007f74 <_dtoa_r+0xac4>
 8008028:	f10a 0a01 	add.w	sl, sl, #1
 800802c:	2331      	movs	r3, #49	; 0x31
 800802e:	e779      	b.n	8007f24 <_dtoa_r+0xa74>
 8008030:	4b13      	ldr	r3, [pc, #76]	; (8008080 <_dtoa_r+0xbd0>)
 8008032:	f7ff baaf 	b.w	8007594 <_dtoa_r+0xe4>
 8008036:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008038:	2b00      	cmp	r3, #0
 800803a:	f47f aa86 	bne.w	800754a <_dtoa_r+0x9a>
 800803e:	4b11      	ldr	r3, [pc, #68]	; (8008084 <_dtoa_r+0xbd4>)
 8008040:	f7ff baa8 	b.w	8007594 <_dtoa_r+0xe4>
 8008044:	f1b9 0f00 	cmp.w	r9, #0
 8008048:	dc03      	bgt.n	8008052 <_dtoa_r+0xba2>
 800804a:	9b05      	ldr	r3, [sp, #20]
 800804c:	2b02      	cmp	r3, #2
 800804e:	f73f aec9 	bgt.w	8007de4 <_dtoa_r+0x934>
 8008052:	9d00      	ldr	r5, [sp, #0]
 8008054:	4631      	mov	r1, r6
 8008056:	4658      	mov	r0, fp
 8008058:	f7ff f99e 	bl	8007398 <quorem>
 800805c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008060:	f805 3b01 	strb.w	r3, [r5], #1
 8008064:	9a00      	ldr	r2, [sp, #0]
 8008066:	1aaa      	subs	r2, r5, r2
 8008068:	4591      	cmp	r9, r2
 800806a:	ddba      	ble.n	8007fe2 <_dtoa_r+0xb32>
 800806c:	4659      	mov	r1, fp
 800806e:	2300      	movs	r3, #0
 8008070:	220a      	movs	r2, #10
 8008072:	4620      	mov	r0, r4
 8008074:	f000 f884 	bl	8008180 <__multadd>
 8008078:	4683      	mov	fp, r0
 800807a:	e7eb      	b.n	8008054 <_dtoa_r+0xba4>
 800807c:	08009aa3 	.word	0x08009aa3
 8008080:	080099fc 	.word	0x080099fc
 8008084:	08009a20 	.word	0x08009a20

08008088 <_localeconv_r>:
 8008088:	4800      	ldr	r0, [pc, #0]	; (800808c <_localeconv_r+0x4>)
 800808a:	4770      	bx	lr
 800808c:	20000164 	.word	0x20000164

08008090 <malloc>:
 8008090:	4b02      	ldr	r3, [pc, #8]	; (800809c <malloc+0xc>)
 8008092:	4601      	mov	r1, r0
 8008094:	6818      	ldr	r0, [r3, #0]
 8008096:	f000 bbef 	b.w	8008878 <_malloc_r>
 800809a:	bf00      	nop
 800809c:	20000010 	.word	0x20000010

080080a0 <memcpy>:
 80080a0:	440a      	add	r2, r1
 80080a2:	4291      	cmp	r1, r2
 80080a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80080a8:	d100      	bne.n	80080ac <memcpy+0xc>
 80080aa:	4770      	bx	lr
 80080ac:	b510      	push	{r4, lr}
 80080ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080b6:	4291      	cmp	r1, r2
 80080b8:	d1f9      	bne.n	80080ae <memcpy+0xe>
 80080ba:	bd10      	pop	{r4, pc}

080080bc <_Balloc>:
 80080bc:	b570      	push	{r4, r5, r6, lr}
 80080be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80080c0:	4604      	mov	r4, r0
 80080c2:	460d      	mov	r5, r1
 80080c4:	b976      	cbnz	r6, 80080e4 <_Balloc+0x28>
 80080c6:	2010      	movs	r0, #16
 80080c8:	f7ff ffe2 	bl	8008090 <malloc>
 80080cc:	4602      	mov	r2, r0
 80080ce:	6260      	str	r0, [r4, #36]	; 0x24
 80080d0:	b920      	cbnz	r0, 80080dc <_Balloc+0x20>
 80080d2:	4b18      	ldr	r3, [pc, #96]	; (8008134 <_Balloc+0x78>)
 80080d4:	4818      	ldr	r0, [pc, #96]	; (8008138 <_Balloc+0x7c>)
 80080d6:	2166      	movs	r1, #102	; 0x66
 80080d8:	f000 fd94 	bl	8008c04 <__assert_func>
 80080dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080e0:	6006      	str	r6, [r0, #0]
 80080e2:	60c6      	str	r6, [r0, #12]
 80080e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80080e6:	68f3      	ldr	r3, [r6, #12]
 80080e8:	b183      	cbz	r3, 800810c <_Balloc+0x50>
 80080ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080f2:	b9b8      	cbnz	r0, 8008124 <_Balloc+0x68>
 80080f4:	2101      	movs	r1, #1
 80080f6:	fa01 f605 	lsl.w	r6, r1, r5
 80080fa:	1d72      	adds	r2, r6, #5
 80080fc:	0092      	lsls	r2, r2, #2
 80080fe:	4620      	mov	r0, r4
 8008100:	f000 fb5a 	bl	80087b8 <_calloc_r>
 8008104:	b160      	cbz	r0, 8008120 <_Balloc+0x64>
 8008106:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800810a:	e00e      	b.n	800812a <_Balloc+0x6e>
 800810c:	2221      	movs	r2, #33	; 0x21
 800810e:	2104      	movs	r1, #4
 8008110:	4620      	mov	r0, r4
 8008112:	f000 fb51 	bl	80087b8 <_calloc_r>
 8008116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008118:	60f0      	str	r0, [r6, #12]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1e4      	bne.n	80080ea <_Balloc+0x2e>
 8008120:	2000      	movs	r0, #0
 8008122:	bd70      	pop	{r4, r5, r6, pc}
 8008124:	6802      	ldr	r2, [r0, #0]
 8008126:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800812a:	2300      	movs	r3, #0
 800812c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008130:	e7f7      	b.n	8008122 <_Balloc+0x66>
 8008132:	bf00      	nop
 8008134:	08009a2d 	.word	0x08009a2d
 8008138:	08009ab4 	.word	0x08009ab4

0800813c <_Bfree>:
 800813c:	b570      	push	{r4, r5, r6, lr}
 800813e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008140:	4605      	mov	r5, r0
 8008142:	460c      	mov	r4, r1
 8008144:	b976      	cbnz	r6, 8008164 <_Bfree+0x28>
 8008146:	2010      	movs	r0, #16
 8008148:	f7ff ffa2 	bl	8008090 <malloc>
 800814c:	4602      	mov	r2, r0
 800814e:	6268      	str	r0, [r5, #36]	; 0x24
 8008150:	b920      	cbnz	r0, 800815c <_Bfree+0x20>
 8008152:	4b09      	ldr	r3, [pc, #36]	; (8008178 <_Bfree+0x3c>)
 8008154:	4809      	ldr	r0, [pc, #36]	; (800817c <_Bfree+0x40>)
 8008156:	218a      	movs	r1, #138	; 0x8a
 8008158:	f000 fd54 	bl	8008c04 <__assert_func>
 800815c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008160:	6006      	str	r6, [r0, #0]
 8008162:	60c6      	str	r6, [r0, #12]
 8008164:	b13c      	cbz	r4, 8008176 <_Bfree+0x3a>
 8008166:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008168:	6862      	ldr	r2, [r4, #4]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008170:	6021      	str	r1, [r4, #0]
 8008172:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008176:	bd70      	pop	{r4, r5, r6, pc}
 8008178:	08009a2d 	.word	0x08009a2d
 800817c:	08009ab4 	.word	0x08009ab4

08008180 <__multadd>:
 8008180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008184:	690e      	ldr	r6, [r1, #16]
 8008186:	4607      	mov	r7, r0
 8008188:	4698      	mov	r8, r3
 800818a:	460c      	mov	r4, r1
 800818c:	f101 0014 	add.w	r0, r1, #20
 8008190:	2300      	movs	r3, #0
 8008192:	6805      	ldr	r5, [r0, #0]
 8008194:	b2a9      	uxth	r1, r5
 8008196:	fb02 8101 	mla	r1, r2, r1, r8
 800819a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800819e:	0c2d      	lsrs	r5, r5, #16
 80081a0:	fb02 c505 	mla	r5, r2, r5, ip
 80081a4:	b289      	uxth	r1, r1
 80081a6:	3301      	adds	r3, #1
 80081a8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80081ac:	429e      	cmp	r6, r3
 80081ae:	f840 1b04 	str.w	r1, [r0], #4
 80081b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80081b6:	dcec      	bgt.n	8008192 <__multadd+0x12>
 80081b8:	f1b8 0f00 	cmp.w	r8, #0
 80081bc:	d022      	beq.n	8008204 <__multadd+0x84>
 80081be:	68a3      	ldr	r3, [r4, #8]
 80081c0:	42b3      	cmp	r3, r6
 80081c2:	dc19      	bgt.n	80081f8 <__multadd+0x78>
 80081c4:	6861      	ldr	r1, [r4, #4]
 80081c6:	4638      	mov	r0, r7
 80081c8:	3101      	adds	r1, #1
 80081ca:	f7ff ff77 	bl	80080bc <_Balloc>
 80081ce:	4605      	mov	r5, r0
 80081d0:	b928      	cbnz	r0, 80081de <__multadd+0x5e>
 80081d2:	4602      	mov	r2, r0
 80081d4:	4b0d      	ldr	r3, [pc, #52]	; (800820c <__multadd+0x8c>)
 80081d6:	480e      	ldr	r0, [pc, #56]	; (8008210 <__multadd+0x90>)
 80081d8:	21b5      	movs	r1, #181	; 0xb5
 80081da:	f000 fd13 	bl	8008c04 <__assert_func>
 80081de:	6922      	ldr	r2, [r4, #16]
 80081e0:	3202      	adds	r2, #2
 80081e2:	f104 010c 	add.w	r1, r4, #12
 80081e6:	0092      	lsls	r2, r2, #2
 80081e8:	300c      	adds	r0, #12
 80081ea:	f7ff ff59 	bl	80080a0 <memcpy>
 80081ee:	4621      	mov	r1, r4
 80081f0:	4638      	mov	r0, r7
 80081f2:	f7ff ffa3 	bl	800813c <_Bfree>
 80081f6:	462c      	mov	r4, r5
 80081f8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80081fc:	3601      	adds	r6, #1
 80081fe:	f8c3 8014 	str.w	r8, [r3, #20]
 8008202:	6126      	str	r6, [r4, #16]
 8008204:	4620      	mov	r0, r4
 8008206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800820a:	bf00      	nop
 800820c:	08009aa3 	.word	0x08009aa3
 8008210:	08009ab4 	.word	0x08009ab4

08008214 <__hi0bits>:
 8008214:	0c03      	lsrs	r3, r0, #16
 8008216:	041b      	lsls	r3, r3, #16
 8008218:	b9d3      	cbnz	r3, 8008250 <__hi0bits+0x3c>
 800821a:	0400      	lsls	r0, r0, #16
 800821c:	2310      	movs	r3, #16
 800821e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008222:	bf04      	itt	eq
 8008224:	0200      	lsleq	r0, r0, #8
 8008226:	3308      	addeq	r3, #8
 8008228:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800822c:	bf04      	itt	eq
 800822e:	0100      	lsleq	r0, r0, #4
 8008230:	3304      	addeq	r3, #4
 8008232:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008236:	bf04      	itt	eq
 8008238:	0080      	lsleq	r0, r0, #2
 800823a:	3302      	addeq	r3, #2
 800823c:	2800      	cmp	r0, #0
 800823e:	db05      	blt.n	800824c <__hi0bits+0x38>
 8008240:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008244:	f103 0301 	add.w	r3, r3, #1
 8008248:	bf08      	it	eq
 800824a:	2320      	moveq	r3, #32
 800824c:	4618      	mov	r0, r3
 800824e:	4770      	bx	lr
 8008250:	2300      	movs	r3, #0
 8008252:	e7e4      	b.n	800821e <__hi0bits+0xa>

08008254 <__lo0bits>:
 8008254:	6803      	ldr	r3, [r0, #0]
 8008256:	f013 0207 	ands.w	r2, r3, #7
 800825a:	4601      	mov	r1, r0
 800825c:	d00b      	beq.n	8008276 <__lo0bits+0x22>
 800825e:	07da      	lsls	r2, r3, #31
 8008260:	d424      	bmi.n	80082ac <__lo0bits+0x58>
 8008262:	0798      	lsls	r0, r3, #30
 8008264:	bf49      	itett	mi
 8008266:	085b      	lsrmi	r3, r3, #1
 8008268:	089b      	lsrpl	r3, r3, #2
 800826a:	2001      	movmi	r0, #1
 800826c:	600b      	strmi	r3, [r1, #0]
 800826e:	bf5c      	itt	pl
 8008270:	600b      	strpl	r3, [r1, #0]
 8008272:	2002      	movpl	r0, #2
 8008274:	4770      	bx	lr
 8008276:	b298      	uxth	r0, r3
 8008278:	b9b0      	cbnz	r0, 80082a8 <__lo0bits+0x54>
 800827a:	0c1b      	lsrs	r3, r3, #16
 800827c:	2010      	movs	r0, #16
 800827e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008282:	bf04      	itt	eq
 8008284:	0a1b      	lsreq	r3, r3, #8
 8008286:	3008      	addeq	r0, #8
 8008288:	071a      	lsls	r2, r3, #28
 800828a:	bf04      	itt	eq
 800828c:	091b      	lsreq	r3, r3, #4
 800828e:	3004      	addeq	r0, #4
 8008290:	079a      	lsls	r2, r3, #30
 8008292:	bf04      	itt	eq
 8008294:	089b      	lsreq	r3, r3, #2
 8008296:	3002      	addeq	r0, #2
 8008298:	07da      	lsls	r2, r3, #31
 800829a:	d403      	bmi.n	80082a4 <__lo0bits+0x50>
 800829c:	085b      	lsrs	r3, r3, #1
 800829e:	f100 0001 	add.w	r0, r0, #1
 80082a2:	d005      	beq.n	80082b0 <__lo0bits+0x5c>
 80082a4:	600b      	str	r3, [r1, #0]
 80082a6:	4770      	bx	lr
 80082a8:	4610      	mov	r0, r2
 80082aa:	e7e8      	b.n	800827e <__lo0bits+0x2a>
 80082ac:	2000      	movs	r0, #0
 80082ae:	4770      	bx	lr
 80082b0:	2020      	movs	r0, #32
 80082b2:	4770      	bx	lr

080082b4 <__i2b>:
 80082b4:	b510      	push	{r4, lr}
 80082b6:	460c      	mov	r4, r1
 80082b8:	2101      	movs	r1, #1
 80082ba:	f7ff feff 	bl	80080bc <_Balloc>
 80082be:	4602      	mov	r2, r0
 80082c0:	b928      	cbnz	r0, 80082ce <__i2b+0x1a>
 80082c2:	4b05      	ldr	r3, [pc, #20]	; (80082d8 <__i2b+0x24>)
 80082c4:	4805      	ldr	r0, [pc, #20]	; (80082dc <__i2b+0x28>)
 80082c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80082ca:	f000 fc9b 	bl	8008c04 <__assert_func>
 80082ce:	2301      	movs	r3, #1
 80082d0:	6144      	str	r4, [r0, #20]
 80082d2:	6103      	str	r3, [r0, #16]
 80082d4:	bd10      	pop	{r4, pc}
 80082d6:	bf00      	nop
 80082d8:	08009aa3 	.word	0x08009aa3
 80082dc:	08009ab4 	.word	0x08009ab4

080082e0 <__multiply>:
 80082e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e4:	4614      	mov	r4, r2
 80082e6:	690a      	ldr	r2, [r1, #16]
 80082e8:	6923      	ldr	r3, [r4, #16]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	bfb8      	it	lt
 80082ee:	460b      	movlt	r3, r1
 80082f0:	460d      	mov	r5, r1
 80082f2:	bfbc      	itt	lt
 80082f4:	4625      	movlt	r5, r4
 80082f6:	461c      	movlt	r4, r3
 80082f8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80082fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008300:	68ab      	ldr	r3, [r5, #8]
 8008302:	6869      	ldr	r1, [r5, #4]
 8008304:	eb0a 0709 	add.w	r7, sl, r9
 8008308:	42bb      	cmp	r3, r7
 800830a:	b085      	sub	sp, #20
 800830c:	bfb8      	it	lt
 800830e:	3101      	addlt	r1, #1
 8008310:	f7ff fed4 	bl	80080bc <_Balloc>
 8008314:	b930      	cbnz	r0, 8008324 <__multiply+0x44>
 8008316:	4602      	mov	r2, r0
 8008318:	4b42      	ldr	r3, [pc, #264]	; (8008424 <__multiply+0x144>)
 800831a:	4843      	ldr	r0, [pc, #268]	; (8008428 <__multiply+0x148>)
 800831c:	f240 115d 	movw	r1, #349	; 0x15d
 8008320:	f000 fc70 	bl	8008c04 <__assert_func>
 8008324:	f100 0614 	add.w	r6, r0, #20
 8008328:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800832c:	4633      	mov	r3, r6
 800832e:	2200      	movs	r2, #0
 8008330:	4543      	cmp	r3, r8
 8008332:	d31e      	bcc.n	8008372 <__multiply+0x92>
 8008334:	f105 0c14 	add.w	ip, r5, #20
 8008338:	f104 0314 	add.w	r3, r4, #20
 800833c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008340:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008344:	9202      	str	r2, [sp, #8]
 8008346:	ebac 0205 	sub.w	r2, ip, r5
 800834a:	3a15      	subs	r2, #21
 800834c:	f022 0203 	bic.w	r2, r2, #3
 8008350:	3204      	adds	r2, #4
 8008352:	f105 0115 	add.w	r1, r5, #21
 8008356:	458c      	cmp	ip, r1
 8008358:	bf38      	it	cc
 800835a:	2204      	movcc	r2, #4
 800835c:	9201      	str	r2, [sp, #4]
 800835e:	9a02      	ldr	r2, [sp, #8]
 8008360:	9303      	str	r3, [sp, #12]
 8008362:	429a      	cmp	r2, r3
 8008364:	d808      	bhi.n	8008378 <__multiply+0x98>
 8008366:	2f00      	cmp	r7, #0
 8008368:	dc55      	bgt.n	8008416 <__multiply+0x136>
 800836a:	6107      	str	r7, [r0, #16]
 800836c:	b005      	add	sp, #20
 800836e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008372:	f843 2b04 	str.w	r2, [r3], #4
 8008376:	e7db      	b.n	8008330 <__multiply+0x50>
 8008378:	f8b3 a000 	ldrh.w	sl, [r3]
 800837c:	f1ba 0f00 	cmp.w	sl, #0
 8008380:	d020      	beq.n	80083c4 <__multiply+0xe4>
 8008382:	f105 0e14 	add.w	lr, r5, #20
 8008386:	46b1      	mov	r9, r6
 8008388:	2200      	movs	r2, #0
 800838a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800838e:	f8d9 b000 	ldr.w	fp, [r9]
 8008392:	b2a1      	uxth	r1, r4
 8008394:	fa1f fb8b 	uxth.w	fp, fp
 8008398:	fb0a b101 	mla	r1, sl, r1, fp
 800839c:	4411      	add	r1, r2
 800839e:	f8d9 2000 	ldr.w	r2, [r9]
 80083a2:	0c24      	lsrs	r4, r4, #16
 80083a4:	0c12      	lsrs	r2, r2, #16
 80083a6:	fb0a 2404 	mla	r4, sl, r4, r2
 80083aa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80083ae:	b289      	uxth	r1, r1
 80083b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80083b4:	45f4      	cmp	ip, lr
 80083b6:	f849 1b04 	str.w	r1, [r9], #4
 80083ba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80083be:	d8e4      	bhi.n	800838a <__multiply+0xaa>
 80083c0:	9901      	ldr	r1, [sp, #4]
 80083c2:	5072      	str	r2, [r6, r1]
 80083c4:	9a03      	ldr	r2, [sp, #12]
 80083c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80083ca:	3304      	adds	r3, #4
 80083cc:	f1b9 0f00 	cmp.w	r9, #0
 80083d0:	d01f      	beq.n	8008412 <__multiply+0x132>
 80083d2:	6834      	ldr	r4, [r6, #0]
 80083d4:	f105 0114 	add.w	r1, r5, #20
 80083d8:	46b6      	mov	lr, r6
 80083da:	f04f 0a00 	mov.w	sl, #0
 80083de:	880a      	ldrh	r2, [r1, #0]
 80083e0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80083e4:	fb09 b202 	mla	r2, r9, r2, fp
 80083e8:	4492      	add	sl, r2
 80083ea:	b2a4      	uxth	r4, r4
 80083ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80083f0:	f84e 4b04 	str.w	r4, [lr], #4
 80083f4:	f851 4b04 	ldr.w	r4, [r1], #4
 80083f8:	f8be 2000 	ldrh.w	r2, [lr]
 80083fc:	0c24      	lsrs	r4, r4, #16
 80083fe:	fb09 2404 	mla	r4, r9, r4, r2
 8008402:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008406:	458c      	cmp	ip, r1
 8008408:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800840c:	d8e7      	bhi.n	80083de <__multiply+0xfe>
 800840e:	9a01      	ldr	r2, [sp, #4]
 8008410:	50b4      	str	r4, [r6, r2]
 8008412:	3604      	adds	r6, #4
 8008414:	e7a3      	b.n	800835e <__multiply+0x7e>
 8008416:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1a5      	bne.n	800836a <__multiply+0x8a>
 800841e:	3f01      	subs	r7, #1
 8008420:	e7a1      	b.n	8008366 <__multiply+0x86>
 8008422:	bf00      	nop
 8008424:	08009aa3 	.word	0x08009aa3
 8008428:	08009ab4 	.word	0x08009ab4

0800842c <__pow5mult>:
 800842c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008430:	4615      	mov	r5, r2
 8008432:	f012 0203 	ands.w	r2, r2, #3
 8008436:	4606      	mov	r6, r0
 8008438:	460f      	mov	r7, r1
 800843a:	d007      	beq.n	800844c <__pow5mult+0x20>
 800843c:	4c25      	ldr	r4, [pc, #148]	; (80084d4 <__pow5mult+0xa8>)
 800843e:	3a01      	subs	r2, #1
 8008440:	2300      	movs	r3, #0
 8008442:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008446:	f7ff fe9b 	bl	8008180 <__multadd>
 800844a:	4607      	mov	r7, r0
 800844c:	10ad      	asrs	r5, r5, #2
 800844e:	d03d      	beq.n	80084cc <__pow5mult+0xa0>
 8008450:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008452:	b97c      	cbnz	r4, 8008474 <__pow5mult+0x48>
 8008454:	2010      	movs	r0, #16
 8008456:	f7ff fe1b 	bl	8008090 <malloc>
 800845a:	4602      	mov	r2, r0
 800845c:	6270      	str	r0, [r6, #36]	; 0x24
 800845e:	b928      	cbnz	r0, 800846c <__pow5mult+0x40>
 8008460:	4b1d      	ldr	r3, [pc, #116]	; (80084d8 <__pow5mult+0xac>)
 8008462:	481e      	ldr	r0, [pc, #120]	; (80084dc <__pow5mult+0xb0>)
 8008464:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008468:	f000 fbcc 	bl	8008c04 <__assert_func>
 800846c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008470:	6004      	str	r4, [r0, #0]
 8008472:	60c4      	str	r4, [r0, #12]
 8008474:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008478:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800847c:	b94c      	cbnz	r4, 8008492 <__pow5mult+0x66>
 800847e:	f240 2171 	movw	r1, #625	; 0x271
 8008482:	4630      	mov	r0, r6
 8008484:	f7ff ff16 	bl	80082b4 <__i2b>
 8008488:	2300      	movs	r3, #0
 800848a:	f8c8 0008 	str.w	r0, [r8, #8]
 800848e:	4604      	mov	r4, r0
 8008490:	6003      	str	r3, [r0, #0]
 8008492:	f04f 0900 	mov.w	r9, #0
 8008496:	07eb      	lsls	r3, r5, #31
 8008498:	d50a      	bpl.n	80084b0 <__pow5mult+0x84>
 800849a:	4639      	mov	r1, r7
 800849c:	4622      	mov	r2, r4
 800849e:	4630      	mov	r0, r6
 80084a0:	f7ff ff1e 	bl	80082e0 <__multiply>
 80084a4:	4639      	mov	r1, r7
 80084a6:	4680      	mov	r8, r0
 80084a8:	4630      	mov	r0, r6
 80084aa:	f7ff fe47 	bl	800813c <_Bfree>
 80084ae:	4647      	mov	r7, r8
 80084b0:	106d      	asrs	r5, r5, #1
 80084b2:	d00b      	beq.n	80084cc <__pow5mult+0xa0>
 80084b4:	6820      	ldr	r0, [r4, #0]
 80084b6:	b938      	cbnz	r0, 80084c8 <__pow5mult+0x9c>
 80084b8:	4622      	mov	r2, r4
 80084ba:	4621      	mov	r1, r4
 80084bc:	4630      	mov	r0, r6
 80084be:	f7ff ff0f 	bl	80082e0 <__multiply>
 80084c2:	6020      	str	r0, [r4, #0]
 80084c4:	f8c0 9000 	str.w	r9, [r0]
 80084c8:	4604      	mov	r4, r0
 80084ca:	e7e4      	b.n	8008496 <__pow5mult+0x6a>
 80084cc:	4638      	mov	r0, r7
 80084ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084d2:	bf00      	nop
 80084d4:	08009c08 	.word	0x08009c08
 80084d8:	08009a2d 	.word	0x08009a2d
 80084dc:	08009ab4 	.word	0x08009ab4

080084e0 <__lshift>:
 80084e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e4:	460c      	mov	r4, r1
 80084e6:	6849      	ldr	r1, [r1, #4]
 80084e8:	6923      	ldr	r3, [r4, #16]
 80084ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80084ee:	68a3      	ldr	r3, [r4, #8]
 80084f0:	4607      	mov	r7, r0
 80084f2:	4691      	mov	r9, r2
 80084f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084f8:	f108 0601 	add.w	r6, r8, #1
 80084fc:	42b3      	cmp	r3, r6
 80084fe:	db0b      	blt.n	8008518 <__lshift+0x38>
 8008500:	4638      	mov	r0, r7
 8008502:	f7ff fddb 	bl	80080bc <_Balloc>
 8008506:	4605      	mov	r5, r0
 8008508:	b948      	cbnz	r0, 800851e <__lshift+0x3e>
 800850a:	4602      	mov	r2, r0
 800850c:	4b28      	ldr	r3, [pc, #160]	; (80085b0 <__lshift+0xd0>)
 800850e:	4829      	ldr	r0, [pc, #164]	; (80085b4 <__lshift+0xd4>)
 8008510:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008514:	f000 fb76 	bl	8008c04 <__assert_func>
 8008518:	3101      	adds	r1, #1
 800851a:	005b      	lsls	r3, r3, #1
 800851c:	e7ee      	b.n	80084fc <__lshift+0x1c>
 800851e:	2300      	movs	r3, #0
 8008520:	f100 0114 	add.w	r1, r0, #20
 8008524:	f100 0210 	add.w	r2, r0, #16
 8008528:	4618      	mov	r0, r3
 800852a:	4553      	cmp	r3, sl
 800852c:	db33      	blt.n	8008596 <__lshift+0xb6>
 800852e:	6920      	ldr	r0, [r4, #16]
 8008530:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008534:	f104 0314 	add.w	r3, r4, #20
 8008538:	f019 091f 	ands.w	r9, r9, #31
 800853c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008540:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008544:	d02b      	beq.n	800859e <__lshift+0xbe>
 8008546:	f1c9 0e20 	rsb	lr, r9, #32
 800854a:	468a      	mov	sl, r1
 800854c:	2200      	movs	r2, #0
 800854e:	6818      	ldr	r0, [r3, #0]
 8008550:	fa00 f009 	lsl.w	r0, r0, r9
 8008554:	4302      	orrs	r2, r0
 8008556:	f84a 2b04 	str.w	r2, [sl], #4
 800855a:	f853 2b04 	ldr.w	r2, [r3], #4
 800855e:	459c      	cmp	ip, r3
 8008560:	fa22 f20e 	lsr.w	r2, r2, lr
 8008564:	d8f3      	bhi.n	800854e <__lshift+0x6e>
 8008566:	ebac 0304 	sub.w	r3, ip, r4
 800856a:	3b15      	subs	r3, #21
 800856c:	f023 0303 	bic.w	r3, r3, #3
 8008570:	3304      	adds	r3, #4
 8008572:	f104 0015 	add.w	r0, r4, #21
 8008576:	4584      	cmp	ip, r0
 8008578:	bf38      	it	cc
 800857a:	2304      	movcc	r3, #4
 800857c:	50ca      	str	r2, [r1, r3]
 800857e:	b10a      	cbz	r2, 8008584 <__lshift+0xa4>
 8008580:	f108 0602 	add.w	r6, r8, #2
 8008584:	3e01      	subs	r6, #1
 8008586:	4638      	mov	r0, r7
 8008588:	612e      	str	r6, [r5, #16]
 800858a:	4621      	mov	r1, r4
 800858c:	f7ff fdd6 	bl	800813c <_Bfree>
 8008590:	4628      	mov	r0, r5
 8008592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008596:	f842 0f04 	str.w	r0, [r2, #4]!
 800859a:	3301      	adds	r3, #1
 800859c:	e7c5      	b.n	800852a <__lshift+0x4a>
 800859e:	3904      	subs	r1, #4
 80085a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80085a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80085a8:	459c      	cmp	ip, r3
 80085aa:	d8f9      	bhi.n	80085a0 <__lshift+0xc0>
 80085ac:	e7ea      	b.n	8008584 <__lshift+0xa4>
 80085ae:	bf00      	nop
 80085b0:	08009aa3 	.word	0x08009aa3
 80085b4:	08009ab4 	.word	0x08009ab4

080085b8 <__mcmp>:
 80085b8:	b530      	push	{r4, r5, lr}
 80085ba:	6902      	ldr	r2, [r0, #16]
 80085bc:	690c      	ldr	r4, [r1, #16]
 80085be:	1b12      	subs	r2, r2, r4
 80085c0:	d10e      	bne.n	80085e0 <__mcmp+0x28>
 80085c2:	f100 0314 	add.w	r3, r0, #20
 80085c6:	3114      	adds	r1, #20
 80085c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80085cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80085d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80085d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80085d8:	42a5      	cmp	r5, r4
 80085da:	d003      	beq.n	80085e4 <__mcmp+0x2c>
 80085dc:	d305      	bcc.n	80085ea <__mcmp+0x32>
 80085de:	2201      	movs	r2, #1
 80085e0:	4610      	mov	r0, r2
 80085e2:	bd30      	pop	{r4, r5, pc}
 80085e4:	4283      	cmp	r3, r0
 80085e6:	d3f3      	bcc.n	80085d0 <__mcmp+0x18>
 80085e8:	e7fa      	b.n	80085e0 <__mcmp+0x28>
 80085ea:	f04f 32ff 	mov.w	r2, #4294967295
 80085ee:	e7f7      	b.n	80085e0 <__mcmp+0x28>

080085f0 <__mdiff>:
 80085f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f4:	460c      	mov	r4, r1
 80085f6:	4606      	mov	r6, r0
 80085f8:	4611      	mov	r1, r2
 80085fa:	4620      	mov	r0, r4
 80085fc:	4617      	mov	r7, r2
 80085fe:	f7ff ffdb 	bl	80085b8 <__mcmp>
 8008602:	1e05      	subs	r5, r0, #0
 8008604:	d110      	bne.n	8008628 <__mdiff+0x38>
 8008606:	4629      	mov	r1, r5
 8008608:	4630      	mov	r0, r6
 800860a:	f7ff fd57 	bl	80080bc <_Balloc>
 800860e:	b930      	cbnz	r0, 800861e <__mdiff+0x2e>
 8008610:	4b39      	ldr	r3, [pc, #228]	; (80086f8 <__mdiff+0x108>)
 8008612:	4602      	mov	r2, r0
 8008614:	f240 2132 	movw	r1, #562	; 0x232
 8008618:	4838      	ldr	r0, [pc, #224]	; (80086fc <__mdiff+0x10c>)
 800861a:	f000 faf3 	bl	8008c04 <__assert_func>
 800861e:	2301      	movs	r3, #1
 8008620:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008624:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008628:	bfa4      	itt	ge
 800862a:	463b      	movge	r3, r7
 800862c:	4627      	movge	r7, r4
 800862e:	4630      	mov	r0, r6
 8008630:	6879      	ldr	r1, [r7, #4]
 8008632:	bfa6      	itte	ge
 8008634:	461c      	movge	r4, r3
 8008636:	2500      	movge	r5, #0
 8008638:	2501      	movlt	r5, #1
 800863a:	f7ff fd3f 	bl	80080bc <_Balloc>
 800863e:	b920      	cbnz	r0, 800864a <__mdiff+0x5a>
 8008640:	4b2d      	ldr	r3, [pc, #180]	; (80086f8 <__mdiff+0x108>)
 8008642:	4602      	mov	r2, r0
 8008644:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008648:	e7e6      	b.n	8008618 <__mdiff+0x28>
 800864a:	693e      	ldr	r6, [r7, #16]
 800864c:	60c5      	str	r5, [r0, #12]
 800864e:	6925      	ldr	r5, [r4, #16]
 8008650:	f107 0114 	add.w	r1, r7, #20
 8008654:	f104 0914 	add.w	r9, r4, #20
 8008658:	f100 0e14 	add.w	lr, r0, #20
 800865c:	f107 0210 	add.w	r2, r7, #16
 8008660:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008664:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008668:	46f2      	mov	sl, lr
 800866a:	2700      	movs	r7, #0
 800866c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008670:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008674:	fa1f f883 	uxth.w	r8, r3
 8008678:	fa17 f78b 	uxtah	r7, r7, fp
 800867c:	0c1b      	lsrs	r3, r3, #16
 800867e:	eba7 0808 	sub.w	r8, r7, r8
 8008682:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008686:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800868a:	fa1f f888 	uxth.w	r8, r8
 800868e:	141f      	asrs	r7, r3, #16
 8008690:	454d      	cmp	r5, r9
 8008692:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008696:	f84a 3b04 	str.w	r3, [sl], #4
 800869a:	d8e7      	bhi.n	800866c <__mdiff+0x7c>
 800869c:	1b2b      	subs	r3, r5, r4
 800869e:	3b15      	subs	r3, #21
 80086a0:	f023 0303 	bic.w	r3, r3, #3
 80086a4:	3304      	adds	r3, #4
 80086a6:	3415      	adds	r4, #21
 80086a8:	42a5      	cmp	r5, r4
 80086aa:	bf38      	it	cc
 80086ac:	2304      	movcc	r3, #4
 80086ae:	4419      	add	r1, r3
 80086b0:	4473      	add	r3, lr
 80086b2:	469e      	mov	lr, r3
 80086b4:	460d      	mov	r5, r1
 80086b6:	4565      	cmp	r5, ip
 80086b8:	d30e      	bcc.n	80086d8 <__mdiff+0xe8>
 80086ba:	f10c 0203 	add.w	r2, ip, #3
 80086be:	1a52      	subs	r2, r2, r1
 80086c0:	f022 0203 	bic.w	r2, r2, #3
 80086c4:	3903      	subs	r1, #3
 80086c6:	458c      	cmp	ip, r1
 80086c8:	bf38      	it	cc
 80086ca:	2200      	movcc	r2, #0
 80086cc:	441a      	add	r2, r3
 80086ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80086d2:	b17b      	cbz	r3, 80086f4 <__mdiff+0x104>
 80086d4:	6106      	str	r6, [r0, #16]
 80086d6:	e7a5      	b.n	8008624 <__mdiff+0x34>
 80086d8:	f855 8b04 	ldr.w	r8, [r5], #4
 80086dc:	fa17 f488 	uxtah	r4, r7, r8
 80086e0:	1422      	asrs	r2, r4, #16
 80086e2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80086e6:	b2a4      	uxth	r4, r4
 80086e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80086ec:	f84e 4b04 	str.w	r4, [lr], #4
 80086f0:	1417      	asrs	r7, r2, #16
 80086f2:	e7e0      	b.n	80086b6 <__mdiff+0xc6>
 80086f4:	3e01      	subs	r6, #1
 80086f6:	e7ea      	b.n	80086ce <__mdiff+0xde>
 80086f8:	08009aa3 	.word	0x08009aa3
 80086fc:	08009ab4 	.word	0x08009ab4

08008700 <__d2b>:
 8008700:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008704:	4689      	mov	r9, r1
 8008706:	2101      	movs	r1, #1
 8008708:	ec57 6b10 	vmov	r6, r7, d0
 800870c:	4690      	mov	r8, r2
 800870e:	f7ff fcd5 	bl	80080bc <_Balloc>
 8008712:	4604      	mov	r4, r0
 8008714:	b930      	cbnz	r0, 8008724 <__d2b+0x24>
 8008716:	4602      	mov	r2, r0
 8008718:	4b25      	ldr	r3, [pc, #148]	; (80087b0 <__d2b+0xb0>)
 800871a:	4826      	ldr	r0, [pc, #152]	; (80087b4 <__d2b+0xb4>)
 800871c:	f240 310a 	movw	r1, #778	; 0x30a
 8008720:	f000 fa70 	bl	8008c04 <__assert_func>
 8008724:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008728:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800872c:	bb35      	cbnz	r5, 800877c <__d2b+0x7c>
 800872e:	2e00      	cmp	r6, #0
 8008730:	9301      	str	r3, [sp, #4]
 8008732:	d028      	beq.n	8008786 <__d2b+0x86>
 8008734:	4668      	mov	r0, sp
 8008736:	9600      	str	r6, [sp, #0]
 8008738:	f7ff fd8c 	bl	8008254 <__lo0bits>
 800873c:	9900      	ldr	r1, [sp, #0]
 800873e:	b300      	cbz	r0, 8008782 <__d2b+0x82>
 8008740:	9a01      	ldr	r2, [sp, #4]
 8008742:	f1c0 0320 	rsb	r3, r0, #32
 8008746:	fa02 f303 	lsl.w	r3, r2, r3
 800874a:	430b      	orrs	r3, r1
 800874c:	40c2      	lsrs	r2, r0
 800874e:	6163      	str	r3, [r4, #20]
 8008750:	9201      	str	r2, [sp, #4]
 8008752:	9b01      	ldr	r3, [sp, #4]
 8008754:	61a3      	str	r3, [r4, #24]
 8008756:	2b00      	cmp	r3, #0
 8008758:	bf14      	ite	ne
 800875a:	2202      	movne	r2, #2
 800875c:	2201      	moveq	r2, #1
 800875e:	6122      	str	r2, [r4, #16]
 8008760:	b1d5      	cbz	r5, 8008798 <__d2b+0x98>
 8008762:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008766:	4405      	add	r5, r0
 8008768:	f8c9 5000 	str.w	r5, [r9]
 800876c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008770:	f8c8 0000 	str.w	r0, [r8]
 8008774:	4620      	mov	r0, r4
 8008776:	b003      	add	sp, #12
 8008778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800877c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008780:	e7d5      	b.n	800872e <__d2b+0x2e>
 8008782:	6161      	str	r1, [r4, #20]
 8008784:	e7e5      	b.n	8008752 <__d2b+0x52>
 8008786:	a801      	add	r0, sp, #4
 8008788:	f7ff fd64 	bl	8008254 <__lo0bits>
 800878c:	9b01      	ldr	r3, [sp, #4]
 800878e:	6163      	str	r3, [r4, #20]
 8008790:	2201      	movs	r2, #1
 8008792:	6122      	str	r2, [r4, #16]
 8008794:	3020      	adds	r0, #32
 8008796:	e7e3      	b.n	8008760 <__d2b+0x60>
 8008798:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800879c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80087a0:	f8c9 0000 	str.w	r0, [r9]
 80087a4:	6918      	ldr	r0, [r3, #16]
 80087a6:	f7ff fd35 	bl	8008214 <__hi0bits>
 80087aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80087ae:	e7df      	b.n	8008770 <__d2b+0x70>
 80087b0:	08009aa3 	.word	0x08009aa3
 80087b4:	08009ab4 	.word	0x08009ab4

080087b8 <_calloc_r>:
 80087b8:	b513      	push	{r0, r1, r4, lr}
 80087ba:	434a      	muls	r2, r1
 80087bc:	4611      	mov	r1, r2
 80087be:	9201      	str	r2, [sp, #4]
 80087c0:	f000 f85a 	bl	8008878 <_malloc_r>
 80087c4:	4604      	mov	r4, r0
 80087c6:	b118      	cbz	r0, 80087d0 <_calloc_r+0x18>
 80087c8:	9a01      	ldr	r2, [sp, #4]
 80087ca:	2100      	movs	r1, #0
 80087cc:	f7fe f952 	bl	8006a74 <memset>
 80087d0:	4620      	mov	r0, r4
 80087d2:	b002      	add	sp, #8
 80087d4:	bd10      	pop	{r4, pc}
	...

080087d8 <_free_r>:
 80087d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087da:	2900      	cmp	r1, #0
 80087dc:	d048      	beq.n	8008870 <_free_r+0x98>
 80087de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087e2:	9001      	str	r0, [sp, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f1a1 0404 	sub.w	r4, r1, #4
 80087ea:	bfb8      	it	lt
 80087ec:	18e4      	addlt	r4, r4, r3
 80087ee:	f000 fa65 	bl	8008cbc <__malloc_lock>
 80087f2:	4a20      	ldr	r2, [pc, #128]	; (8008874 <_free_r+0x9c>)
 80087f4:	9801      	ldr	r0, [sp, #4]
 80087f6:	6813      	ldr	r3, [r2, #0]
 80087f8:	4615      	mov	r5, r2
 80087fa:	b933      	cbnz	r3, 800880a <_free_r+0x32>
 80087fc:	6063      	str	r3, [r4, #4]
 80087fe:	6014      	str	r4, [r2, #0]
 8008800:	b003      	add	sp, #12
 8008802:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008806:	f000 ba5f 	b.w	8008cc8 <__malloc_unlock>
 800880a:	42a3      	cmp	r3, r4
 800880c:	d90b      	bls.n	8008826 <_free_r+0x4e>
 800880e:	6821      	ldr	r1, [r4, #0]
 8008810:	1862      	adds	r2, r4, r1
 8008812:	4293      	cmp	r3, r2
 8008814:	bf04      	itt	eq
 8008816:	681a      	ldreq	r2, [r3, #0]
 8008818:	685b      	ldreq	r3, [r3, #4]
 800881a:	6063      	str	r3, [r4, #4]
 800881c:	bf04      	itt	eq
 800881e:	1852      	addeq	r2, r2, r1
 8008820:	6022      	streq	r2, [r4, #0]
 8008822:	602c      	str	r4, [r5, #0]
 8008824:	e7ec      	b.n	8008800 <_free_r+0x28>
 8008826:	461a      	mov	r2, r3
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	b10b      	cbz	r3, 8008830 <_free_r+0x58>
 800882c:	42a3      	cmp	r3, r4
 800882e:	d9fa      	bls.n	8008826 <_free_r+0x4e>
 8008830:	6811      	ldr	r1, [r2, #0]
 8008832:	1855      	adds	r5, r2, r1
 8008834:	42a5      	cmp	r5, r4
 8008836:	d10b      	bne.n	8008850 <_free_r+0x78>
 8008838:	6824      	ldr	r4, [r4, #0]
 800883a:	4421      	add	r1, r4
 800883c:	1854      	adds	r4, r2, r1
 800883e:	42a3      	cmp	r3, r4
 8008840:	6011      	str	r1, [r2, #0]
 8008842:	d1dd      	bne.n	8008800 <_free_r+0x28>
 8008844:	681c      	ldr	r4, [r3, #0]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	6053      	str	r3, [r2, #4]
 800884a:	4421      	add	r1, r4
 800884c:	6011      	str	r1, [r2, #0]
 800884e:	e7d7      	b.n	8008800 <_free_r+0x28>
 8008850:	d902      	bls.n	8008858 <_free_r+0x80>
 8008852:	230c      	movs	r3, #12
 8008854:	6003      	str	r3, [r0, #0]
 8008856:	e7d3      	b.n	8008800 <_free_r+0x28>
 8008858:	6825      	ldr	r5, [r4, #0]
 800885a:	1961      	adds	r1, r4, r5
 800885c:	428b      	cmp	r3, r1
 800885e:	bf04      	itt	eq
 8008860:	6819      	ldreq	r1, [r3, #0]
 8008862:	685b      	ldreq	r3, [r3, #4]
 8008864:	6063      	str	r3, [r4, #4]
 8008866:	bf04      	itt	eq
 8008868:	1949      	addeq	r1, r1, r5
 800886a:	6021      	streq	r1, [r4, #0]
 800886c:	6054      	str	r4, [r2, #4]
 800886e:	e7c7      	b.n	8008800 <_free_r+0x28>
 8008870:	b003      	add	sp, #12
 8008872:	bd30      	pop	{r4, r5, pc}
 8008874:	20000600 	.word	0x20000600

08008878 <_malloc_r>:
 8008878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800887a:	1ccd      	adds	r5, r1, #3
 800887c:	f025 0503 	bic.w	r5, r5, #3
 8008880:	3508      	adds	r5, #8
 8008882:	2d0c      	cmp	r5, #12
 8008884:	bf38      	it	cc
 8008886:	250c      	movcc	r5, #12
 8008888:	2d00      	cmp	r5, #0
 800888a:	4606      	mov	r6, r0
 800888c:	db01      	blt.n	8008892 <_malloc_r+0x1a>
 800888e:	42a9      	cmp	r1, r5
 8008890:	d903      	bls.n	800889a <_malloc_r+0x22>
 8008892:	230c      	movs	r3, #12
 8008894:	6033      	str	r3, [r6, #0]
 8008896:	2000      	movs	r0, #0
 8008898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800889a:	f000 fa0f 	bl	8008cbc <__malloc_lock>
 800889e:	4921      	ldr	r1, [pc, #132]	; (8008924 <_malloc_r+0xac>)
 80088a0:	680a      	ldr	r2, [r1, #0]
 80088a2:	4614      	mov	r4, r2
 80088a4:	b99c      	cbnz	r4, 80088ce <_malloc_r+0x56>
 80088a6:	4f20      	ldr	r7, [pc, #128]	; (8008928 <_malloc_r+0xb0>)
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	b923      	cbnz	r3, 80088b6 <_malloc_r+0x3e>
 80088ac:	4621      	mov	r1, r4
 80088ae:	4630      	mov	r0, r6
 80088b0:	f000 f998 	bl	8008be4 <_sbrk_r>
 80088b4:	6038      	str	r0, [r7, #0]
 80088b6:	4629      	mov	r1, r5
 80088b8:	4630      	mov	r0, r6
 80088ba:	f000 f993 	bl	8008be4 <_sbrk_r>
 80088be:	1c43      	adds	r3, r0, #1
 80088c0:	d123      	bne.n	800890a <_malloc_r+0x92>
 80088c2:	230c      	movs	r3, #12
 80088c4:	6033      	str	r3, [r6, #0]
 80088c6:	4630      	mov	r0, r6
 80088c8:	f000 f9fe 	bl	8008cc8 <__malloc_unlock>
 80088cc:	e7e3      	b.n	8008896 <_malloc_r+0x1e>
 80088ce:	6823      	ldr	r3, [r4, #0]
 80088d0:	1b5b      	subs	r3, r3, r5
 80088d2:	d417      	bmi.n	8008904 <_malloc_r+0x8c>
 80088d4:	2b0b      	cmp	r3, #11
 80088d6:	d903      	bls.n	80088e0 <_malloc_r+0x68>
 80088d8:	6023      	str	r3, [r4, #0]
 80088da:	441c      	add	r4, r3
 80088dc:	6025      	str	r5, [r4, #0]
 80088de:	e004      	b.n	80088ea <_malloc_r+0x72>
 80088e0:	6863      	ldr	r3, [r4, #4]
 80088e2:	42a2      	cmp	r2, r4
 80088e4:	bf0c      	ite	eq
 80088e6:	600b      	streq	r3, [r1, #0]
 80088e8:	6053      	strne	r3, [r2, #4]
 80088ea:	4630      	mov	r0, r6
 80088ec:	f000 f9ec 	bl	8008cc8 <__malloc_unlock>
 80088f0:	f104 000b 	add.w	r0, r4, #11
 80088f4:	1d23      	adds	r3, r4, #4
 80088f6:	f020 0007 	bic.w	r0, r0, #7
 80088fa:	1ac2      	subs	r2, r0, r3
 80088fc:	d0cc      	beq.n	8008898 <_malloc_r+0x20>
 80088fe:	1a1b      	subs	r3, r3, r0
 8008900:	50a3      	str	r3, [r4, r2]
 8008902:	e7c9      	b.n	8008898 <_malloc_r+0x20>
 8008904:	4622      	mov	r2, r4
 8008906:	6864      	ldr	r4, [r4, #4]
 8008908:	e7cc      	b.n	80088a4 <_malloc_r+0x2c>
 800890a:	1cc4      	adds	r4, r0, #3
 800890c:	f024 0403 	bic.w	r4, r4, #3
 8008910:	42a0      	cmp	r0, r4
 8008912:	d0e3      	beq.n	80088dc <_malloc_r+0x64>
 8008914:	1a21      	subs	r1, r4, r0
 8008916:	4630      	mov	r0, r6
 8008918:	f000 f964 	bl	8008be4 <_sbrk_r>
 800891c:	3001      	adds	r0, #1
 800891e:	d1dd      	bne.n	80088dc <_malloc_r+0x64>
 8008920:	e7cf      	b.n	80088c2 <_malloc_r+0x4a>
 8008922:	bf00      	nop
 8008924:	20000600 	.word	0x20000600
 8008928:	20000604 	.word	0x20000604

0800892c <__ssputs_r>:
 800892c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008930:	688e      	ldr	r6, [r1, #8]
 8008932:	429e      	cmp	r6, r3
 8008934:	4682      	mov	sl, r0
 8008936:	460c      	mov	r4, r1
 8008938:	4690      	mov	r8, r2
 800893a:	461f      	mov	r7, r3
 800893c:	d838      	bhi.n	80089b0 <__ssputs_r+0x84>
 800893e:	898a      	ldrh	r2, [r1, #12]
 8008940:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008944:	d032      	beq.n	80089ac <__ssputs_r+0x80>
 8008946:	6825      	ldr	r5, [r4, #0]
 8008948:	6909      	ldr	r1, [r1, #16]
 800894a:	eba5 0901 	sub.w	r9, r5, r1
 800894e:	6965      	ldr	r5, [r4, #20]
 8008950:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008954:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008958:	3301      	adds	r3, #1
 800895a:	444b      	add	r3, r9
 800895c:	106d      	asrs	r5, r5, #1
 800895e:	429d      	cmp	r5, r3
 8008960:	bf38      	it	cc
 8008962:	461d      	movcc	r5, r3
 8008964:	0553      	lsls	r3, r2, #21
 8008966:	d531      	bpl.n	80089cc <__ssputs_r+0xa0>
 8008968:	4629      	mov	r1, r5
 800896a:	f7ff ff85 	bl	8008878 <_malloc_r>
 800896e:	4606      	mov	r6, r0
 8008970:	b950      	cbnz	r0, 8008988 <__ssputs_r+0x5c>
 8008972:	230c      	movs	r3, #12
 8008974:	f8ca 3000 	str.w	r3, [sl]
 8008978:	89a3      	ldrh	r3, [r4, #12]
 800897a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800897e:	81a3      	strh	r3, [r4, #12]
 8008980:	f04f 30ff 	mov.w	r0, #4294967295
 8008984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008988:	6921      	ldr	r1, [r4, #16]
 800898a:	464a      	mov	r2, r9
 800898c:	f7ff fb88 	bl	80080a0 <memcpy>
 8008990:	89a3      	ldrh	r3, [r4, #12]
 8008992:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800899a:	81a3      	strh	r3, [r4, #12]
 800899c:	6126      	str	r6, [r4, #16]
 800899e:	6165      	str	r5, [r4, #20]
 80089a0:	444e      	add	r6, r9
 80089a2:	eba5 0509 	sub.w	r5, r5, r9
 80089a6:	6026      	str	r6, [r4, #0]
 80089a8:	60a5      	str	r5, [r4, #8]
 80089aa:	463e      	mov	r6, r7
 80089ac:	42be      	cmp	r6, r7
 80089ae:	d900      	bls.n	80089b2 <__ssputs_r+0x86>
 80089b0:	463e      	mov	r6, r7
 80089b2:	4632      	mov	r2, r6
 80089b4:	6820      	ldr	r0, [r4, #0]
 80089b6:	4641      	mov	r1, r8
 80089b8:	f000 f966 	bl	8008c88 <memmove>
 80089bc:	68a3      	ldr	r3, [r4, #8]
 80089be:	6822      	ldr	r2, [r4, #0]
 80089c0:	1b9b      	subs	r3, r3, r6
 80089c2:	4432      	add	r2, r6
 80089c4:	60a3      	str	r3, [r4, #8]
 80089c6:	6022      	str	r2, [r4, #0]
 80089c8:	2000      	movs	r0, #0
 80089ca:	e7db      	b.n	8008984 <__ssputs_r+0x58>
 80089cc:	462a      	mov	r2, r5
 80089ce:	f000 f981 	bl	8008cd4 <_realloc_r>
 80089d2:	4606      	mov	r6, r0
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d1e1      	bne.n	800899c <__ssputs_r+0x70>
 80089d8:	6921      	ldr	r1, [r4, #16]
 80089da:	4650      	mov	r0, sl
 80089dc:	f7ff fefc 	bl	80087d8 <_free_r>
 80089e0:	e7c7      	b.n	8008972 <__ssputs_r+0x46>
	...

080089e4 <_svfiprintf_r>:
 80089e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e8:	4698      	mov	r8, r3
 80089ea:	898b      	ldrh	r3, [r1, #12]
 80089ec:	061b      	lsls	r3, r3, #24
 80089ee:	b09d      	sub	sp, #116	; 0x74
 80089f0:	4607      	mov	r7, r0
 80089f2:	460d      	mov	r5, r1
 80089f4:	4614      	mov	r4, r2
 80089f6:	d50e      	bpl.n	8008a16 <_svfiprintf_r+0x32>
 80089f8:	690b      	ldr	r3, [r1, #16]
 80089fa:	b963      	cbnz	r3, 8008a16 <_svfiprintf_r+0x32>
 80089fc:	2140      	movs	r1, #64	; 0x40
 80089fe:	f7ff ff3b 	bl	8008878 <_malloc_r>
 8008a02:	6028      	str	r0, [r5, #0]
 8008a04:	6128      	str	r0, [r5, #16]
 8008a06:	b920      	cbnz	r0, 8008a12 <_svfiprintf_r+0x2e>
 8008a08:	230c      	movs	r3, #12
 8008a0a:	603b      	str	r3, [r7, #0]
 8008a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a10:	e0d1      	b.n	8008bb6 <_svfiprintf_r+0x1d2>
 8008a12:	2340      	movs	r3, #64	; 0x40
 8008a14:	616b      	str	r3, [r5, #20]
 8008a16:	2300      	movs	r3, #0
 8008a18:	9309      	str	r3, [sp, #36]	; 0x24
 8008a1a:	2320      	movs	r3, #32
 8008a1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a20:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a24:	2330      	movs	r3, #48	; 0x30
 8008a26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008bd0 <_svfiprintf_r+0x1ec>
 8008a2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a2e:	f04f 0901 	mov.w	r9, #1
 8008a32:	4623      	mov	r3, r4
 8008a34:	469a      	mov	sl, r3
 8008a36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a3a:	b10a      	cbz	r2, 8008a40 <_svfiprintf_r+0x5c>
 8008a3c:	2a25      	cmp	r2, #37	; 0x25
 8008a3e:	d1f9      	bne.n	8008a34 <_svfiprintf_r+0x50>
 8008a40:	ebba 0b04 	subs.w	fp, sl, r4
 8008a44:	d00b      	beq.n	8008a5e <_svfiprintf_r+0x7a>
 8008a46:	465b      	mov	r3, fp
 8008a48:	4622      	mov	r2, r4
 8008a4a:	4629      	mov	r1, r5
 8008a4c:	4638      	mov	r0, r7
 8008a4e:	f7ff ff6d 	bl	800892c <__ssputs_r>
 8008a52:	3001      	adds	r0, #1
 8008a54:	f000 80aa 	beq.w	8008bac <_svfiprintf_r+0x1c8>
 8008a58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a5a:	445a      	add	r2, fp
 8008a5c:	9209      	str	r2, [sp, #36]	; 0x24
 8008a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f000 80a2 	beq.w	8008bac <_svfiprintf_r+0x1c8>
 8008a68:	2300      	movs	r3, #0
 8008a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a72:	f10a 0a01 	add.w	sl, sl, #1
 8008a76:	9304      	str	r3, [sp, #16]
 8008a78:	9307      	str	r3, [sp, #28]
 8008a7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a7e:	931a      	str	r3, [sp, #104]	; 0x68
 8008a80:	4654      	mov	r4, sl
 8008a82:	2205      	movs	r2, #5
 8008a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a88:	4851      	ldr	r0, [pc, #324]	; (8008bd0 <_svfiprintf_r+0x1ec>)
 8008a8a:	f7f7 fbb1 	bl	80001f0 <memchr>
 8008a8e:	9a04      	ldr	r2, [sp, #16]
 8008a90:	b9d8      	cbnz	r0, 8008aca <_svfiprintf_r+0xe6>
 8008a92:	06d0      	lsls	r0, r2, #27
 8008a94:	bf44      	itt	mi
 8008a96:	2320      	movmi	r3, #32
 8008a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a9c:	0711      	lsls	r1, r2, #28
 8008a9e:	bf44      	itt	mi
 8008aa0:	232b      	movmi	r3, #43	; 0x2b
 8008aa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8008aaa:	2b2a      	cmp	r3, #42	; 0x2a
 8008aac:	d015      	beq.n	8008ada <_svfiprintf_r+0xf6>
 8008aae:	9a07      	ldr	r2, [sp, #28]
 8008ab0:	4654      	mov	r4, sl
 8008ab2:	2000      	movs	r0, #0
 8008ab4:	f04f 0c0a 	mov.w	ip, #10
 8008ab8:	4621      	mov	r1, r4
 8008aba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008abe:	3b30      	subs	r3, #48	; 0x30
 8008ac0:	2b09      	cmp	r3, #9
 8008ac2:	d94e      	bls.n	8008b62 <_svfiprintf_r+0x17e>
 8008ac4:	b1b0      	cbz	r0, 8008af4 <_svfiprintf_r+0x110>
 8008ac6:	9207      	str	r2, [sp, #28]
 8008ac8:	e014      	b.n	8008af4 <_svfiprintf_r+0x110>
 8008aca:	eba0 0308 	sub.w	r3, r0, r8
 8008ace:	fa09 f303 	lsl.w	r3, r9, r3
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	9304      	str	r3, [sp, #16]
 8008ad6:	46a2      	mov	sl, r4
 8008ad8:	e7d2      	b.n	8008a80 <_svfiprintf_r+0x9c>
 8008ada:	9b03      	ldr	r3, [sp, #12]
 8008adc:	1d19      	adds	r1, r3, #4
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	9103      	str	r1, [sp, #12]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	bfbb      	ittet	lt
 8008ae6:	425b      	neglt	r3, r3
 8008ae8:	f042 0202 	orrlt.w	r2, r2, #2
 8008aec:	9307      	strge	r3, [sp, #28]
 8008aee:	9307      	strlt	r3, [sp, #28]
 8008af0:	bfb8      	it	lt
 8008af2:	9204      	strlt	r2, [sp, #16]
 8008af4:	7823      	ldrb	r3, [r4, #0]
 8008af6:	2b2e      	cmp	r3, #46	; 0x2e
 8008af8:	d10c      	bne.n	8008b14 <_svfiprintf_r+0x130>
 8008afa:	7863      	ldrb	r3, [r4, #1]
 8008afc:	2b2a      	cmp	r3, #42	; 0x2a
 8008afe:	d135      	bne.n	8008b6c <_svfiprintf_r+0x188>
 8008b00:	9b03      	ldr	r3, [sp, #12]
 8008b02:	1d1a      	adds	r2, r3, #4
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	9203      	str	r2, [sp, #12]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	bfb8      	it	lt
 8008b0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b10:	3402      	adds	r4, #2
 8008b12:	9305      	str	r3, [sp, #20]
 8008b14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008be0 <_svfiprintf_r+0x1fc>
 8008b18:	7821      	ldrb	r1, [r4, #0]
 8008b1a:	2203      	movs	r2, #3
 8008b1c:	4650      	mov	r0, sl
 8008b1e:	f7f7 fb67 	bl	80001f0 <memchr>
 8008b22:	b140      	cbz	r0, 8008b36 <_svfiprintf_r+0x152>
 8008b24:	2340      	movs	r3, #64	; 0x40
 8008b26:	eba0 000a 	sub.w	r0, r0, sl
 8008b2a:	fa03 f000 	lsl.w	r0, r3, r0
 8008b2e:	9b04      	ldr	r3, [sp, #16]
 8008b30:	4303      	orrs	r3, r0
 8008b32:	3401      	adds	r4, #1
 8008b34:	9304      	str	r3, [sp, #16]
 8008b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b3a:	4826      	ldr	r0, [pc, #152]	; (8008bd4 <_svfiprintf_r+0x1f0>)
 8008b3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b40:	2206      	movs	r2, #6
 8008b42:	f7f7 fb55 	bl	80001f0 <memchr>
 8008b46:	2800      	cmp	r0, #0
 8008b48:	d038      	beq.n	8008bbc <_svfiprintf_r+0x1d8>
 8008b4a:	4b23      	ldr	r3, [pc, #140]	; (8008bd8 <_svfiprintf_r+0x1f4>)
 8008b4c:	bb1b      	cbnz	r3, 8008b96 <_svfiprintf_r+0x1b2>
 8008b4e:	9b03      	ldr	r3, [sp, #12]
 8008b50:	3307      	adds	r3, #7
 8008b52:	f023 0307 	bic.w	r3, r3, #7
 8008b56:	3308      	adds	r3, #8
 8008b58:	9303      	str	r3, [sp, #12]
 8008b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b5c:	4433      	add	r3, r6
 8008b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b60:	e767      	b.n	8008a32 <_svfiprintf_r+0x4e>
 8008b62:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b66:	460c      	mov	r4, r1
 8008b68:	2001      	movs	r0, #1
 8008b6a:	e7a5      	b.n	8008ab8 <_svfiprintf_r+0xd4>
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	3401      	adds	r4, #1
 8008b70:	9305      	str	r3, [sp, #20]
 8008b72:	4619      	mov	r1, r3
 8008b74:	f04f 0c0a 	mov.w	ip, #10
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b7e:	3a30      	subs	r2, #48	; 0x30
 8008b80:	2a09      	cmp	r2, #9
 8008b82:	d903      	bls.n	8008b8c <_svfiprintf_r+0x1a8>
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d0c5      	beq.n	8008b14 <_svfiprintf_r+0x130>
 8008b88:	9105      	str	r1, [sp, #20]
 8008b8a:	e7c3      	b.n	8008b14 <_svfiprintf_r+0x130>
 8008b8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b90:	4604      	mov	r4, r0
 8008b92:	2301      	movs	r3, #1
 8008b94:	e7f0      	b.n	8008b78 <_svfiprintf_r+0x194>
 8008b96:	ab03      	add	r3, sp, #12
 8008b98:	9300      	str	r3, [sp, #0]
 8008b9a:	462a      	mov	r2, r5
 8008b9c:	4b0f      	ldr	r3, [pc, #60]	; (8008bdc <_svfiprintf_r+0x1f8>)
 8008b9e:	a904      	add	r1, sp, #16
 8008ba0:	4638      	mov	r0, r7
 8008ba2:	f7fe f80f 	bl	8006bc4 <_printf_float>
 8008ba6:	1c42      	adds	r2, r0, #1
 8008ba8:	4606      	mov	r6, r0
 8008baa:	d1d6      	bne.n	8008b5a <_svfiprintf_r+0x176>
 8008bac:	89ab      	ldrh	r3, [r5, #12]
 8008bae:	065b      	lsls	r3, r3, #25
 8008bb0:	f53f af2c 	bmi.w	8008a0c <_svfiprintf_r+0x28>
 8008bb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bb6:	b01d      	add	sp, #116	; 0x74
 8008bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bbc:	ab03      	add	r3, sp, #12
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	462a      	mov	r2, r5
 8008bc2:	4b06      	ldr	r3, [pc, #24]	; (8008bdc <_svfiprintf_r+0x1f8>)
 8008bc4:	a904      	add	r1, sp, #16
 8008bc6:	4638      	mov	r0, r7
 8008bc8:	f7fe faa0 	bl	800710c <_printf_i>
 8008bcc:	e7eb      	b.n	8008ba6 <_svfiprintf_r+0x1c2>
 8008bce:	bf00      	nop
 8008bd0:	08009c14 	.word	0x08009c14
 8008bd4:	08009c1e 	.word	0x08009c1e
 8008bd8:	08006bc5 	.word	0x08006bc5
 8008bdc:	0800892d 	.word	0x0800892d
 8008be0:	08009c1a 	.word	0x08009c1a

08008be4 <_sbrk_r>:
 8008be4:	b538      	push	{r3, r4, r5, lr}
 8008be6:	4d06      	ldr	r5, [pc, #24]	; (8008c00 <_sbrk_r+0x1c>)
 8008be8:	2300      	movs	r3, #0
 8008bea:	4604      	mov	r4, r0
 8008bec:	4608      	mov	r0, r1
 8008bee:	602b      	str	r3, [r5, #0]
 8008bf0:	f7f9 faec 	bl	80021cc <_sbrk>
 8008bf4:	1c43      	adds	r3, r0, #1
 8008bf6:	d102      	bne.n	8008bfe <_sbrk_r+0x1a>
 8008bf8:	682b      	ldr	r3, [r5, #0]
 8008bfa:	b103      	cbz	r3, 8008bfe <_sbrk_r+0x1a>
 8008bfc:	6023      	str	r3, [r4, #0]
 8008bfe:	bd38      	pop	{r3, r4, r5, pc}
 8008c00:	20000760 	.word	0x20000760

08008c04 <__assert_func>:
 8008c04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c06:	4614      	mov	r4, r2
 8008c08:	461a      	mov	r2, r3
 8008c0a:	4b09      	ldr	r3, [pc, #36]	; (8008c30 <__assert_func+0x2c>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4605      	mov	r5, r0
 8008c10:	68d8      	ldr	r0, [r3, #12]
 8008c12:	b14c      	cbz	r4, 8008c28 <__assert_func+0x24>
 8008c14:	4b07      	ldr	r3, [pc, #28]	; (8008c34 <__assert_func+0x30>)
 8008c16:	9100      	str	r1, [sp, #0]
 8008c18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c1c:	4906      	ldr	r1, [pc, #24]	; (8008c38 <__assert_func+0x34>)
 8008c1e:	462b      	mov	r3, r5
 8008c20:	f000 f80e 	bl	8008c40 <fiprintf>
 8008c24:	f000 faa4 	bl	8009170 <abort>
 8008c28:	4b04      	ldr	r3, [pc, #16]	; (8008c3c <__assert_func+0x38>)
 8008c2a:	461c      	mov	r4, r3
 8008c2c:	e7f3      	b.n	8008c16 <__assert_func+0x12>
 8008c2e:	bf00      	nop
 8008c30:	20000010 	.word	0x20000010
 8008c34:	08009c25 	.word	0x08009c25
 8008c38:	08009c32 	.word	0x08009c32
 8008c3c:	08009c60 	.word	0x08009c60

08008c40 <fiprintf>:
 8008c40:	b40e      	push	{r1, r2, r3}
 8008c42:	b503      	push	{r0, r1, lr}
 8008c44:	4601      	mov	r1, r0
 8008c46:	ab03      	add	r3, sp, #12
 8008c48:	4805      	ldr	r0, [pc, #20]	; (8008c60 <fiprintf+0x20>)
 8008c4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c4e:	6800      	ldr	r0, [r0, #0]
 8008c50:	9301      	str	r3, [sp, #4]
 8008c52:	f000 f88f 	bl	8008d74 <_vfiprintf_r>
 8008c56:	b002      	add	sp, #8
 8008c58:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c5c:	b003      	add	sp, #12
 8008c5e:	4770      	bx	lr
 8008c60:	20000010 	.word	0x20000010

08008c64 <__ascii_mbtowc>:
 8008c64:	b082      	sub	sp, #8
 8008c66:	b901      	cbnz	r1, 8008c6a <__ascii_mbtowc+0x6>
 8008c68:	a901      	add	r1, sp, #4
 8008c6a:	b142      	cbz	r2, 8008c7e <__ascii_mbtowc+0x1a>
 8008c6c:	b14b      	cbz	r3, 8008c82 <__ascii_mbtowc+0x1e>
 8008c6e:	7813      	ldrb	r3, [r2, #0]
 8008c70:	600b      	str	r3, [r1, #0]
 8008c72:	7812      	ldrb	r2, [r2, #0]
 8008c74:	1e10      	subs	r0, r2, #0
 8008c76:	bf18      	it	ne
 8008c78:	2001      	movne	r0, #1
 8008c7a:	b002      	add	sp, #8
 8008c7c:	4770      	bx	lr
 8008c7e:	4610      	mov	r0, r2
 8008c80:	e7fb      	b.n	8008c7a <__ascii_mbtowc+0x16>
 8008c82:	f06f 0001 	mvn.w	r0, #1
 8008c86:	e7f8      	b.n	8008c7a <__ascii_mbtowc+0x16>

08008c88 <memmove>:
 8008c88:	4288      	cmp	r0, r1
 8008c8a:	b510      	push	{r4, lr}
 8008c8c:	eb01 0402 	add.w	r4, r1, r2
 8008c90:	d902      	bls.n	8008c98 <memmove+0x10>
 8008c92:	4284      	cmp	r4, r0
 8008c94:	4623      	mov	r3, r4
 8008c96:	d807      	bhi.n	8008ca8 <memmove+0x20>
 8008c98:	1e43      	subs	r3, r0, #1
 8008c9a:	42a1      	cmp	r1, r4
 8008c9c:	d008      	beq.n	8008cb0 <memmove+0x28>
 8008c9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ca2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ca6:	e7f8      	b.n	8008c9a <memmove+0x12>
 8008ca8:	4402      	add	r2, r0
 8008caa:	4601      	mov	r1, r0
 8008cac:	428a      	cmp	r2, r1
 8008cae:	d100      	bne.n	8008cb2 <memmove+0x2a>
 8008cb0:	bd10      	pop	{r4, pc}
 8008cb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cba:	e7f7      	b.n	8008cac <memmove+0x24>

08008cbc <__malloc_lock>:
 8008cbc:	4801      	ldr	r0, [pc, #4]	; (8008cc4 <__malloc_lock+0x8>)
 8008cbe:	f000 bc17 	b.w	80094f0 <__retarget_lock_acquire_recursive>
 8008cc2:	bf00      	nop
 8008cc4:	20000768 	.word	0x20000768

08008cc8 <__malloc_unlock>:
 8008cc8:	4801      	ldr	r0, [pc, #4]	; (8008cd0 <__malloc_unlock+0x8>)
 8008cca:	f000 bc12 	b.w	80094f2 <__retarget_lock_release_recursive>
 8008cce:	bf00      	nop
 8008cd0:	20000768 	.word	0x20000768

08008cd4 <_realloc_r>:
 8008cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd6:	4607      	mov	r7, r0
 8008cd8:	4614      	mov	r4, r2
 8008cda:	460e      	mov	r6, r1
 8008cdc:	b921      	cbnz	r1, 8008ce8 <_realloc_r+0x14>
 8008cde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008ce2:	4611      	mov	r1, r2
 8008ce4:	f7ff bdc8 	b.w	8008878 <_malloc_r>
 8008ce8:	b922      	cbnz	r2, 8008cf4 <_realloc_r+0x20>
 8008cea:	f7ff fd75 	bl	80087d8 <_free_r>
 8008cee:	4625      	mov	r5, r4
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cf4:	f000 fc62 	bl	80095bc <_malloc_usable_size_r>
 8008cf8:	42a0      	cmp	r0, r4
 8008cfa:	d20f      	bcs.n	8008d1c <_realloc_r+0x48>
 8008cfc:	4621      	mov	r1, r4
 8008cfe:	4638      	mov	r0, r7
 8008d00:	f7ff fdba 	bl	8008878 <_malloc_r>
 8008d04:	4605      	mov	r5, r0
 8008d06:	2800      	cmp	r0, #0
 8008d08:	d0f2      	beq.n	8008cf0 <_realloc_r+0x1c>
 8008d0a:	4631      	mov	r1, r6
 8008d0c:	4622      	mov	r2, r4
 8008d0e:	f7ff f9c7 	bl	80080a0 <memcpy>
 8008d12:	4631      	mov	r1, r6
 8008d14:	4638      	mov	r0, r7
 8008d16:	f7ff fd5f 	bl	80087d8 <_free_r>
 8008d1a:	e7e9      	b.n	8008cf0 <_realloc_r+0x1c>
 8008d1c:	4635      	mov	r5, r6
 8008d1e:	e7e7      	b.n	8008cf0 <_realloc_r+0x1c>

08008d20 <__sfputc_r>:
 8008d20:	6893      	ldr	r3, [r2, #8]
 8008d22:	3b01      	subs	r3, #1
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	b410      	push	{r4}
 8008d28:	6093      	str	r3, [r2, #8]
 8008d2a:	da08      	bge.n	8008d3e <__sfputc_r+0x1e>
 8008d2c:	6994      	ldr	r4, [r2, #24]
 8008d2e:	42a3      	cmp	r3, r4
 8008d30:	db01      	blt.n	8008d36 <__sfputc_r+0x16>
 8008d32:	290a      	cmp	r1, #10
 8008d34:	d103      	bne.n	8008d3e <__sfputc_r+0x1e>
 8008d36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d3a:	f000 b94b 	b.w	8008fd4 <__swbuf_r>
 8008d3e:	6813      	ldr	r3, [r2, #0]
 8008d40:	1c58      	adds	r0, r3, #1
 8008d42:	6010      	str	r0, [r2, #0]
 8008d44:	7019      	strb	r1, [r3, #0]
 8008d46:	4608      	mov	r0, r1
 8008d48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d4c:	4770      	bx	lr

08008d4e <__sfputs_r>:
 8008d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d50:	4606      	mov	r6, r0
 8008d52:	460f      	mov	r7, r1
 8008d54:	4614      	mov	r4, r2
 8008d56:	18d5      	adds	r5, r2, r3
 8008d58:	42ac      	cmp	r4, r5
 8008d5a:	d101      	bne.n	8008d60 <__sfputs_r+0x12>
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	e007      	b.n	8008d70 <__sfputs_r+0x22>
 8008d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d64:	463a      	mov	r2, r7
 8008d66:	4630      	mov	r0, r6
 8008d68:	f7ff ffda 	bl	8008d20 <__sfputc_r>
 8008d6c:	1c43      	adds	r3, r0, #1
 8008d6e:	d1f3      	bne.n	8008d58 <__sfputs_r+0xa>
 8008d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d74 <_vfiprintf_r>:
 8008d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d78:	460d      	mov	r5, r1
 8008d7a:	b09d      	sub	sp, #116	; 0x74
 8008d7c:	4614      	mov	r4, r2
 8008d7e:	4698      	mov	r8, r3
 8008d80:	4606      	mov	r6, r0
 8008d82:	b118      	cbz	r0, 8008d8c <_vfiprintf_r+0x18>
 8008d84:	6983      	ldr	r3, [r0, #24]
 8008d86:	b90b      	cbnz	r3, 8008d8c <_vfiprintf_r+0x18>
 8008d88:	f000 fb14 	bl	80093b4 <__sinit>
 8008d8c:	4b89      	ldr	r3, [pc, #548]	; (8008fb4 <_vfiprintf_r+0x240>)
 8008d8e:	429d      	cmp	r5, r3
 8008d90:	d11b      	bne.n	8008dca <_vfiprintf_r+0x56>
 8008d92:	6875      	ldr	r5, [r6, #4]
 8008d94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d96:	07d9      	lsls	r1, r3, #31
 8008d98:	d405      	bmi.n	8008da6 <_vfiprintf_r+0x32>
 8008d9a:	89ab      	ldrh	r3, [r5, #12]
 8008d9c:	059a      	lsls	r2, r3, #22
 8008d9e:	d402      	bmi.n	8008da6 <_vfiprintf_r+0x32>
 8008da0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008da2:	f000 fba5 	bl	80094f0 <__retarget_lock_acquire_recursive>
 8008da6:	89ab      	ldrh	r3, [r5, #12]
 8008da8:	071b      	lsls	r3, r3, #28
 8008daa:	d501      	bpl.n	8008db0 <_vfiprintf_r+0x3c>
 8008dac:	692b      	ldr	r3, [r5, #16]
 8008dae:	b9eb      	cbnz	r3, 8008dec <_vfiprintf_r+0x78>
 8008db0:	4629      	mov	r1, r5
 8008db2:	4630      	mov	r0, r6
 8008db4:	f000 f96e 	bl	8009094 <__swsetup_r>
 8008db8:	b1c0      	cbz	r0, 8008dec <_vfiprintf_r+0x78>
 8008dba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dbc:	07dc      	lsls	r4, r3, #31
 8008dbe:	d50e      	bpl.n	8008dde <_vfiprintf_r+0x6a>
 8008dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc4:	b01d      	add	sp, #116	; 0x74
 8008dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dca:	4b7b      	ldr	r3, [pc, #492]	; (8008fb8 <_vfiprintf_r+0x244>)
 8008dcc:	429d      	cmp	r5, r3
 8008dce:	d101      	bne.n	8008dd4 <_vfiprintf_r+0x60>
 8008dd0:	68b5      	ldr	r5, [r6, #8]
 8008dd2:	e7df      	b.n	8008d94 <_vfiprintf_r+0x20>
 8008dd4:	4b79      	ldr	r3, [pc, #484]	; (8008fbc <_vfiprintf_r+0x248>)
 8008dd6:	429d      	cmp	r5, r3
 8008dd8:	bf08      	it	eq
 8008dda:	68f5      	ldreq	r5, [r6, #12]
 8008ddc:	e7da      	b.n	8008d94 <_vfiprintf_r+0x20>
 8008dde:	89ab      	ldrh	r3, [r5, #12]
 8008de0:	0598      	lsls	r0, r3, #22
 8008de2:	d4ed      	bmi.n	8008dc0 <_vfiprintf_r+0x4c>
 8008de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008de6:	f000 fb84 	bl	80094f2 <__retarget_lock_release_recursive>
 8008dea:	e7e9      	b.n	8008dc0 <_vfiprintf_r+0x4c>
 8008dec:	2300      	movs	r3, #0
 8008dee:	9309      	str	r3, [sp, #36]	; 0x24
 8008df0:	2320      	movs	r3, #32
 8008df2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008df6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dfa:	2330      	movs	r3, #48	; 0x30
 8008dfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008fc0 <_vfiprintf_r+0x24c>
 8008e00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e04:	f04f 0901 	mov.w	r9, #1
 8008e08:	4623      	mov	r3, r4
 8008e0a:	469a      	mov	sl, r3
 8008e0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e10:	b10a      	cbz	r2, 8008e16 <_vfiprintf_r+0xa2>
 8008e12:	2a25      	cmp	r2, #37	; 0x25
 8008e14:	d1f9      	bne.n	8008e0a <_vfiprintf_r+0x96>
 8008e16:	ebba 0b04 	subs.w	fp, sl, r4
 8008e1a:	d00b      	beq.n	8008e34 <_vfiprintf_r+0xc0>
 8008e1c:	465b      	mov	r3, fp
 8008e1e:	4622      	mov	r2, r4
 8008e20:	4629      	mov	r1, r5
 8008e22:	4630      	mov	r0, r6
 8008e24:	f7ff ff93 	bl	8008d4e <__sfputs_r>
 8008e28:	3001      	adds	r0, #1
 8008e2a:	f000 80aa 	beq.w	8008f82 <_vfiprintf_r+0x20e>
 8008e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e30:	445a      	add	r2, fp
 8008e32:	9209      	str	r2, [sp, #36]	; 0x24
 8008e34:	f89a 3000 	ldrb.w	r3, [sl]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f000 80a2 	beq.w	8008f82 <_vfiprintf_r+0x20e>
 8008e3e:	2300      	movs	r3, #0
 8008e40:	f04f 32ff 	mov.w	r2, #4294967295
 8008e44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e48:	f10a 0a01 	add.w	sl, sl, #1
 8008e4c:	9304      	str	r3, [sp, #16]
 8008e4e:	9307      	str	r3, [sp, #28]
 8008e50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e54:	931a      	str	r3, [sp, #104]	; 0x68
 8008e56:	4654      	mov	r4, sl
 8008e58:	2205      	movs	r2, #5
 8008e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e5e:	4858      	ldr	r0, [pc, #352]	; (8008fc0 <_vfiprintf_r+0x24c>)
 8008e60:	f7f7 f9c6 	bl	80001f0 <memchr>
 8008e64:	9a04      	ldr	r2, [sp, #16]
 8008e66:	b9d8      	cbnz	r0, 8008ea0 <_vfiprintf_r+0x12c>
 8008e68:	06d1      	lsls	r1, r2, #27
 8008e6a:	bf44      	itt	mi
 8008e6c:	2320      	movmi	r3, #32
 8008e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e72:	0713      	lsls	r3, r2, #28
 8008e74:	bf44      	itt	mi
 8008e76:	232b      	movmi	r3, #43	; 0x2b
 8008e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e80:	2b2a      	cmp	r3, #42	; 0x2a
 8008e82:	d015      	beq.n	8008eb0 <_vfiprintf_r+0x13c>
 8008e84:	9a07      	ldr	r2, [sp, #28]
 8008e86:	4654      	mov	r4, sl
 8008e88:	2000      	movs	r0, #0
 8008e8a:	f04f 0c0a 	mov.w	ip, #10
 8008e8e:	4621      	mov	r1, r4
 8008e90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e94:	3b30      	subs	r3, #48	; 0x30
 8008e96:	2b09      	cmp	r3, #9
 8008e98:	d94e      	bls.n	8008f38 <_vfiprintf_r+0x1c4>
 8008e9a:	b1b0      	cbz	r0, 8008eca <_vfiprintf_r+0x156>
 8008e9c:	9207      	str	r2, [sp, #28]
 8008e9e:	e014      	b.n	8008eca <_vfiprintf_r+0x156>
 8008ea0:	eba0 0308 	sub.w	r3, r0, r8
 8008ea4:	fa09 f303 	lsl.w	r3, r9, r3
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	9304      	str	r3, [sp, #16]
 8008eac:	46a2      	mov	sl, r4
 8008eae:	e7d2      	b.n	8008e56 <_vfiprintf_r+0xe2>
 8008eb0:	9b03      	ldr	r3, [sp, #12]
 8008eb2:	1d19      	adds	r1, r3, #4
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	9103      	str	r1, [sp, #12]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	bfbb      	ittet	lt
 8008ebc:	425b      	neglt	r3, r3
 8008ebe:	f042 0202 	orrlt.w	r2, r2, #2
 8008ec2:	9307      	strge	r3, [sp, #28]
 8008ec4:	9307      	strlt	r3, [sp, #28]
 8008ec6:	bfb8      	it	lt
 8008ec8:	9204      	strlt	r2, [sp, #16]
 8008eca:	7823      	ldrb	r3, [r4, #0]
 8008ecc:	2b2e      	cmp	r3, #46	; 0x2e
 8008ece:	d10c      	bne.n	8008eea <_vfiprintf_r+0x176>
 8008ed0:	7863      	ldrb	r3, [r4, #1]
 8008ed2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ed4:	d135      	bne.n	8008f42 <_vfiprintf_r+0x1ce>
 8008ed6:	9b03      	ldr	r3, [sp, #12]
 8008ed8:	1d1a      	adds	r2, r3, #4
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	9203      	str	r2, [sp, #12]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	bfb8      	it	lt
 8008ee2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ee6:	3402      	adds	r4, #2
 8008ee8:	9305      	str	r3, [sp, #20]
 8008eea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008fd0 <_vfiprintf_r+0x25c>
 8008eee:	7821      	ldrb	r1, [r4, #0]
 8008ef0:	2203      	movs	r2, #3
 8008ef2:	4650      	mov	r0, sl
 8008ef4:	f7f7 f97c 	bl	80001f0 <memchr>
 8008ef8:	b140      	cbz	r0, 8008f0c <_vfiprintf_r+0x198>
 8008efa:	2340      	movs	r3, #64	; 0x40
 8008efc:	eba0 000a 	sub.w	r0, r0, sl
 8008f00:	fa03 f000 	lsl.w	r0, r3, r0
 8008f04:	9b04      	ldr	r3, [sp, #16]
 8008f06:	4303      	orrs	r3, r0
 8008f08:	3401      	adds	r4, #1
 8008f0a:	9304      	str	r3, [sp, #16]
 8008f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f10:	482c      	ldr	r0, [pc, #176]	; (8008fc4 <_vfiprintf_r+0x250>)
 8008f12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f16:	2206      	movs	r2, #6
 8008f18:	f7f7 f96a 	bl	80001f0 <memchr>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	d03f      	beq.n	8008fa0 <_vfiprintf_r+0x22c>
 8008f20:	4b29      	ldr	r3, [pc, #164]	; (8008fc8 <_vfiprintf_r+0x254>)
 8008f22:	bb1b      	cbnz	r3, 8008f6c <_vfiprintf_r+0x1f8>
 8008f24:	9b03      	ldr	r3, [sp, #12]
 8008f26:	3307      	adds	r3, #7
 8008f28:	f023 0307 	bic.w	r3, r3, #7
 8008f2c:	3308      	adds	r3, #8
 8008f2e:	9303      	str	r3, [sp, #12]
 8008f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f32:	443b      	add	r3, r7
 8008f34:	9309      	str	r3, [sp, #36]	; 0x24
 8008f36:	e767      	b.n	8008e08 <_vfiprintf_r+0x94>
 8008f38:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f3c:	460c      	mov	r4, r1
 8008f3e:	2001      	movs	r0, #1
 8008f40:	e7a5      	b.n	8008e8e <_vfiprintf_r+0x11a>
 8008f42:	2300      	movs	r3, #0
 8008f44:	3401      	adds	r4, #1
 8008f46:	9305      	str	r3, [sp, #20]
 8008f48:	4619      	mov	r1, r3
 8008f4a:	f04f 0c0a 	mov.w	ip, #10
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f54:	3a30      	subs	r2, #48	; 0x30
 8008f56:	2a09      	cmp	r2, #9
 8008f58:	d903      	bls.n	8008f62 <_vfiprintf_r+0x1ee>
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d0c5      	beq.n	8008eea <_vfiprintf_r+0x176>
 8008f5e:	9105      	str	r1, [sp, #20]
 8008f60:	e7c3      	b.n	8008eea <_vfiprintf_r+0x176>
 8008f62:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f66:	4604      	mov	r4, r0
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e7f0      	b.n	8008f4e <_vfiprintf_r+0x1da>
 8008f6c:	ab03      	add	r3, sp, #12
 8008f6e:	9300      	str	r3, [sp, #0]
 8008f70:	462a      	mov	r2, r5
 8008f72:	4b16      	ldr	r3, [pc, #88]	; (8008fcc <_vfiprintf_r+0x258>)
 8008f74:	a904      	add	r1, sp, #16
 8008f76:	4630      	mov	r0, r6
 8008f78:	f7fd fe24 	bl	8006bc4 <_printf_float>
 8008f7c:	4607      	mov	r7, r0
 8008f7e:	1c78      	adds	r0, r7, #1
 8008f80:	d1d6      	bne.n	8008f30 <_vfiprintf_r+0x1bc>
 8008f82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f84:	07d9      	lsls	r1, r3, #31
 8008f86:	d405      	bmi.n	8008f94 <_vfiprintf_r+0x220>
 8008f88:	89ab      	ldrh	r3, [r5, #12]
 8008f8a:	059a      	lsls	r2, r3, #22
 8008f8c:	d402      	bmi.n	8008f94 <_vfiprintf_r+0x220>
 8008f8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f90:	f000 faaf 	bl	80094f2 <__retarget_lock_release_recursive>
 8008f94:	89ab      	ldrh	r3, [r5, #12]
 8008f96:	065b      	lsls	r3, r3, #25
 8008f98:	f53f af12 	bmi.w	8008dc0 <_vfiprintf_r+0x4c>
 8008f9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f9e:	e711      	b.n	8008dc4 <_vfiprintf_r+0x50>
 8008fa0:	ab03      	add	r3, sp, #12
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	462a      	mov	r2, r5
 8008fa6:	4b09      	ldr	r3, [pc, #36]	; (8008fcc <_vfiprintf_r+0x258>)
 8008fa8:	a904      	add	r1, sp, #16
 8008faa:	4630      	mov	r0, r6
 8008fac:	f7fe f8ae 	bl	800710c <_printf_i>
 8008fb0:	e7e4      	b.n	8008f7c <_vfiprintf_r+0x208>
 8008fb2:	bf00      	nop
 8008fb4:	08009d8c 	.word	0x08009d8c
 8008fb8:	08009dac 	.word	0x08009dac
 8008fbc:	08009d6c 	.word	0x08009d6c
 8008fc0:	08009c14 	.word	0x08009c14
 8008fc4:	08009c1e 	.word	0x08009c1e
 8008fc8:	08006bc5 	.word	0x08006bc5
 8008fcc:	08008d4f 	.word	0x08008d4f
 8008fd0:	08009c1a 	.word	0x08009c1a

08008fd4 <__swbuf_r>:
 8008fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd6:	460e      	mov	r6, r1
 8008fd8:	4614      	mov	r4, r2
 8008fda:	4605      	mov	r5, r0
 8008fdc:	b118      	cbz	r0, 8008fe6 <__swbuf_r+0x12>
 8008fde:	6983      	ldr	r3, [r0, #24]
 8008fe0:	b90b      	cbnz	r3, 8008fe6 <__swbuf_r+0x12>
 8008fe2:	f000 f9e7 	bl	80093b4 <__sinit>
 8008fe6:	4b21      	ldr	r3, [pc, #132]	; (800906c <__swbuf_r+0x98>)
 8008fe8:	429c      	cmp	r4, r3
 8008fea:	d12b      	bne.n	8009044 <__swbuf_r+0x70>
 8008fec:	686c      	ldr	r4, [r5, #4]
 8008fee:	69a3      	ldr	r3, [r4, #24]
 8008ff0:	60a3      	str	r3, [r4, #8]
 8008ff2:	89a3      	ldrh	r3, [r4, #12]
 8008ff4:	071a      	lsls	r2, r3, #28
 8008ff6:	d52f      	bpl.n	8009058 <__swbuf_r+0x84>
 8008ff8:	6923      	ldr	r3, [r4, #16]
 8008ffa:	b36b      	cbz	r3, 8009058 <__swbuf_r+0x84>
 8008ffc:	6923      	ldr	r3, [r4, #16]
 8008ffe:	6820      	ldr	r0, [r4, #0]
 8009000:	1ac0      	subs	r0, r0, r3
 8009002:	6963      	ldr	r3, [r4, #20]
 8009004:	b2f6      	uxtb	r6, r6
 8009006:	4283      	cmp	r3, r0
 8009008:	4637      	mov	r7, r6
 800900a:	dc04      	bgt.n	8009016 <__swbuf_r+0x42>
 800900c:	4621      	mov	r1, r4
 800900e:	4628      	mov	r0, r5
 8009010:	f000 f93c 	bl	800928c <_fflush_r>
 8009014:	bb30      	cbnz	r0, 8009064 <__swbuf_r+0x90>
 8009016:	68a3      	ldr	r3, [r4, #8]
 8009018:	3b01      	subs	r3, #1
 800901a:	60a3      	str	r3, [r4, #8]
 800901c:	6823      	ldr	r3, [r4, #0]
 800901e:	1c5a      	adds	r2, r3, #1
 8009020:	6022      	str	r2, [r4, #0]
 8009022:	701e      	strb	r6, [r3, #0]
 8009024:	6963      	ldr	r3, [r4, #20]
 8009026:	3001      	adds	r0, #1
 8009028:	4283      	cmp	r3, r0
 800902a:	d004      	beq.n	8009036 <__swbuf_r+0x62>
 800902c:	89a3      	ldrh	r3, [r4, #12]
 800902e:	07db      	lsls	r3, r3, #31
 8009030:	d506      	bpl.n	8009040 <__swbuf_r+0x6c>
 8009032:	2e0a      	cmp	r6, #10
 8009034:	d104      	bne.n	8009040 <__swbuf_r+0x6c>
 8009036:	4621      	mov	r1, r4
 8009038:	4628      	mov	r0, r5
 800903a:	f000 f927 	bl	800928c <_fflush_r>
 800903e:	b988      	cbnz	r0, 8009064 <__swbuf_r+0x90>
 8009040:	4638      	mov	r0, r7
 8009042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009044:	4b0a      	ldr	r3, [pc, #40]	; (8009070 <__swbuf_r+0x9c>)
 8009046:	429c      	cmp	r4, r3
 8009048:	d101      	bne.n	800904e <__swbuf_r+0x7a>
 800904a:	68ac      	ldr	r4, [r5, #8]
 800904c:	e7cf      	b.n	8008fee <__swbuf_r+0x1a>
 800904e:	4b09      	ldr	r3, [pc, #36]	; (8009074 <__swbuf_r+0xa0>)
 8009050:	429c      	cmp	r4, r3
 8009052:	bf08      	it	eq
 8009054:	68ec      	ldreq	r4, [r5, #12]
 8009056:	e7ca      	b.n	8008fee <__swbuf_r+0x1a>
 8009058:	4621      	mov	r1, r4
 800905a:	4628      	mov	r0, r5
 800905c:	f000 f81a 	bl	8009094 <__swsetup_r>
 8009060:	2800      	cmp	r0, #0
 8009062:	d0cb      	beq.n	8008ffc <__swbuf_r+0x28>
 8009064:	f04f 37ff 	mov.w	r7, #4294967295
 8009068:	e7ea      	b.n	8009040 <__swbuf_r+0x6c>
 800906a:	bf00      	nop
 800906c:	08009d8c 	.word	0x08009d8c
 8009070:	08009dac 	.word	0x08009dac
 8009074:	08009d6c 	.word	0x08009d6c

08009078 <__ascii_wctomb>:
 8009078:	b149      	cbz	r1, 800908e <__ascii_wctomb+0x16>
 800907a:	2aff      	cmp	r2, #255	; 0xff
 800907c:	bf85      	ittet	hi
 800907e:	238a      	movhi	r3, #138	; 0x8a
 8009080:	6003      	strhi	r3, [r0, #0]
 8009082:	700a      	strbls	r2, [r1, #0]
 8009084:	f04f 30ff 	movhi.w	r0, #4294967295
 8009088:	bf98      	it	ls
 800908a:	2001      	movls	r0, #1
 800908c:	4770      	bx	lr
 800908e:	4608      	mov	r0, r1
 8009090:	4770      	bx	lr
	...

08009094 <__swsetup_r>:
 8009094:	4b32      	ldr	r3, [pc, #200]	; (8009160 <__swsetup_r+0xcc>)
 8009096:	b570      	push	{r4, r5, r6, lr}
 8009098:	681d      	ldr	r5, [r3, #0]
 800909a:	4606      	mov	r6, r0
 800909c:	460c      	mov	r4, r1
 800909e:	b125      	cbz	r5, 80090aa <__swsetup_r+0x16>
 80090a0:	69ab      	ldr	r3, [r5, #24]
 80090a2:	b913      	cbnz	r3, 80090aa <__swsetup_r+0x16>
 80090a4:	4628      	mov	r0, r5
 80090a6:	f000 f985 	bl	80093b4 <__sinit>
 80090aa:	4b2e      	ldr	r3, [pc, #184]	; (8009164 <__swsetup_r+0xd0>)
 80090ac:	429c      	cmp	r4, r3
 80090ae:	d10f      	bne.n	80090d0 <__swsetup_r+0x3c>
 80090b0:	686c      	ldr	r4, [r5, #4]
 80090b2:	89a3      	ldrh	r3, [r4, #12]
 80090b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090b8:	0719      	lsls	r1, r3, #28
 80090ba:	d42c      	bmi.n	8009116 <__swsetup_r+0x82>
 80090bc:	06dd      	lsls	r5, r3, #27
 80090be:	d411      	bmi.n	80090e4 <__swsetup_r+0x50>
 80090c0:	2309      	movs	r3, #9
 80090c2:	6033      	str	r3, [r6, #0]
 80090c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80090c8:	81a3      	strh	r3, [r4, #12]
 80090ca:	f04f 30ff 	mov.w	r0, #4294967295
 80090ce:	e03e      	b.n	800914e <__swsetup_r+0xba>
 80090d0:	4b25      	ldr	r3, [pc, #148]	; (8009168 <__swsetup_r+0xd4>)
 80090d2:	429c      	cmp	r4, r3
 80090d4:	d101      	bne.n	80090da <__swsetup_r+0x46>
 80090d6:	68ac      	ldr	r4, [r5, #8]
 80090d8:	e7eb      	b.n	80090b2 <__swsetup_r+0x1e>
 80090da:	4b24      	ldr	r3, [pc, #144]	; (800916c <__swsetup_r+0xd8>)
 80090dc:	429c      	cmp	r4, r3
 80090de:	bf08      	it	eq
 80090e0:	68ec      	ldreq	r4, [r5, #12]
 80090e2:	e7e6      	b.n	80090b2 <__swsetup_r+0x1e>
 80090e4:	0758      	lsls	r0, r3, #29
 80090e6:	d512      	bpl.n	800910e <__swsetup_r+0x7a>
 80090e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090ea:	b141      	cbz	r1, 80090fe <__swsetup_r+0x6a>
 80090ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090f0:	4299      	cmp	r1, r3
 80090f2:	d002      	beq.n	80090fa <__swsetup_r+0x66>
 80090f4:	4630      	mov	r0, r6
 80090f6:	f7ff fb6f 	bl	80087d8 <_free_r>
 80090fa:	2300      	movs	r3, #0
 80090fc:	6363      	str	r3, [r4, #52]	; 0x34
 80090fe:	89a3      	ldrh	r3, [r4, #12]
 8009100:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009104:	81a3      	strh	r3, [r4, #12]
 8009106:	2300      	movs	r3, #0
 8009108:	6063      	str	r3, [r4, #4]
 800910a:	6923      	ldr	r3, [r4, #16]
 800910c:	6023      	str	r3, [r4, #0]
 800910e:	89a3      	ldrh	r3, [r4, #12]
 8009110:	f043 0308 	orr.w	r3, r3, #8
 8009114:	81a3      	strh	r3, [r4, #12]
 8009116:	6923      	ldr	r3, [r4, #16]
 8009118:	b94b      	cbnz	r3, 800912e <__swsetup_r+0x9a>
 800911a:	89a3      	ldrh	r3, [r4, #12]
 800911c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009124:	d003      	beq.n	800912e <__swsetup_r+0x9a>
 8009126:	4621      	mov	r1, r4
 8009128:	4630      	mov	r0, r6
 800912a:	f000 fa07 	bl	800953c <__smakebuf_r>
 800912e:	89a0      	ldrh	r0, [r4, #12]
 8009130:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009134:	f010 0301 	ands.w	r3, r0, #1
 8009138:	d00a      	beq.n	8009150 <__swsetup_r+0xbc>
 800913a:	2300      	movs	r3, #0
 800913c:	60a3      	str	r3, [r4, #8]
 800913e:	6963      	ldr	r3, [r4, #20]
 8009140:	425b      	negs	r3, r3
 8009142:	61a3      	str	r3, [r4, #24]
 8009144:	6923      	ldr	r3, [r4, #16]
 8009146:	b943      	cbnz	r3, 800915a <__swsetup_r+0xc6>
 8009148:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800914c:	d1ba      	bne.n	80090c4 <__swsetup_r+0x30>
 800914e:	bd70      	pop	{r4, r5, r6, pc}
 8009150:	0781      	lsls	r1, r0, #30
 8009152:	bf58      	it	pl
 8009154:	6963      	ldrpl	r3, [r4, #20]
 8009156:	60a3      	str	r3, [r4, #8]
 8009158:	e7f4      	b.n	8009144 <__swsetup_r+0xb0>
 800915a:	2000      	movs	r0, #0
 800915c:	e7f7      	b.n	800914e <__swsetup_r+0xba>
 800915e:	bf00      	nop
 8009160:	20000010 	.word	0x20000010
 8009164:	08009d8c 	.word	0x08009d8c
 8009168:	08009dac 	.word	0x08009dac
 800916c:	08009d6c 	.word	0x08009d6c

08009170 <abort>:
 8009170:	b508      	push	{r3, lr}
 8009172:	2006      	movs	r0, #6
 8009174:	f000 fa52 	bl	800961c <raise>
 8009178:	2001      	movs	r0, #1
 800917a:	f7f8 ffaf 	bl	80020dc <_exit>
	...

08009180 <__sflush_r>:
 8009180:	898a      	ldrh	r2, [r1, #12]
 8009182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009186:	4605      	mov	r5, r0
 8009188:	0710      	lsls	r0, r2, #28
 800918a:	460c      	mov	r4, r1
 800918c:	d458      	bmi.n	8009240 <__sflush_r+0xc0>
 800918e:	684b      	ldr	r3, [r1, #4]
 8009190:	2b00      	cmp	r3, #0
 8009192:	dc05      	bgt.n	80091a0 <__sflush_r+0x20>
 8009194:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009196:	2b00      	cmp	r3, #0
 8009198:	dc02      	bgt.n	80091a0 <__sflush_r+0x20>
 800919a:	2000      	movs	r0, #0
 800919c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091a2:	2e00      	cmp	r6, #0
 80091a4:	d0f9      	beq.n	800919a <__sflush_r+0x1a>
 80091a6:	2300      	movs	r3, #0
 80091a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80091ac:	682f      	ldr	r7, [r5, #0]
 80091ae:	602b      	str	r3, [r5, #0]
 80091b0:	d032      	beq.n	8009218 <__sflush_r+0x98>
 80091b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80091b4:	89a3      	ldrh	r3, [r4, #12]
 80091b6:	075a      	lsls	r2, r3, #29
 80091b8:	d505      	bpl.n	80091c6 <__sflush_r+0x46>
 80091ba:	6863      	ldr	r3, [r4, #4]
 80091bc:	1ac0      	subs	r0, r0, r3
 80091be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80091c0:	b10b      	cbz	r3, 80091c6 <__sflush_r+0x46>
 80091c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091c4:	1ac0      	subs	r0, r0, r3
 80091c6:	2300      	movs	r3, #0
 80091c8:	4602      	mov	r2, r0
 80091ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091cc:	6a21      	ldr	r1, [r4, #32]
 80091ce:	4628      	mov	r0, r5
 80091d0:	47b0      	blx	r6
 80091d2:	1c43      	adds	r3, r0, #1
 80091d4:	89a3      	ldrh	r3, [r4, #12]
 80091d6:	d106      	bne.n	80091e6 <__sflush_r+0x66>
 80091d8:	6829      	ldr	r1, [r5, #0]
 80091da:	291d      	cmp	r1, #29
 80091dc:	d82c      	bhi.n	8009238 <__sflush_r+0xb8>
 80091de:	4a2a      	ldr	r2, [pc, #168]	; (8009288 <__sflush_r+0x108>)
 80091e0:	40ca      	lsrs	r2, r1
 80091e2:	07d6      	lsls	r6, r2, #31
 80091e4:	d528      	bpl.n	8009238 <__sflush_r+0xb8>
 80091e6:	2200      	movs	r2, #0
 80091e8:	6062      	str	r2, [r4, #4]
 80091ea:	04d9      	lsls	r1, r3, #19
 80091ec:	6922      	ldr	r2, [r4, #16]
 80091ee:	6022      	str	r2, [r4, #0]
 80091f0:	d504      	bpl.n	80091fc <__sflush_r+0x7c>
 80091f2:	1c42      	adds	r2, r0, #1
 80091f4:	d101      	bne.n	80091fa <__sflush_r+0x7a>
 80091f6:	682b      	ldr	r3, [r5, #0]
 80091f8:	b903      	cbnz	r3, 80091fc <__sflush_r+0x7c>
 80091fa:	6560      	str	r0, [r4, #84]	; 0x54
 80091fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091fe:	602f      	str	r7, [r5, #0]
 8009200:	2900      	cmp	r1, #0
 8009202:	d0ca      	beq.n	800919a <__sflush_r+0x1a>
 8009204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009208:	4299      	cmp	r1, r3
 800920a:	d002      	beq.n	8009212 <__sflush_r+0x92>
 800920c:	4628      	mov	r0, r5
 800920e:	f7ff fae3 	bl	80087d8 <_free_r>
 8009212:	2000      	movs	r0, #0
 8009214:	6360      	str	r0, [r4, #52]	; 0x34
 8009216:	e7c1      	b.n	800919c <__sflush_r+0x1c>
 8009218:	6a21      	ldr	r1, [r4, #32]
 800921a:	2301      	movs	r3, #1
 800921c:	4628      	mov	r0, r5
 800921e:	47b0      	blx	r6
 8009220:	1c41      	adds	r1, r0, #1
 8009222:	d1c7      	bne.n	80091b4 <__sflush_r+0x34>
 8009224:	682b      	ldr	r3, [r5, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d0c4      	beq.n	80091b4 <__sflush_r+0x34>
 800922a:	2b1d      	cmp	r3, #29
 800922c:	d001      	beq.n	8009232 <__sflush_r+0xb2>
 800922e:	2b16      	cmp	r3, #22
 8009230:	d101      	bne.n	8009236 <__sflush_r+0xb6>
 8009232:	602f      	str	r7, [r5, #0]
 8009234:	e7b1      	b.n	800919a <__sflush_r+0x1a>
 8009236:	89a3      	ldrh	r3, [r4, #12]
 8009238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800923c:	81a3      	strh	r3, [r4, #12]
 800923e:	e7ad      	b.n	800919c <__sflush_r+0x1c>
 8009240:	690f      	ldr	r7, [r1, #16]
 8009242:	2f00      	cmp	r7, #0
 8009244:	d0a9      	beq.n	800919a <__sflush_r+0x1a>
 8009246:	0793      	lsls	r3, r2, #30
 8009248:	680e      	ldr	r6, [r1, #0]
 800924a:	bf08      	it	eq
 800924c:	694b      	ldreq	r3, [r1, #20]
 800924e:	600f      	str	r7, [r1, #0]
 8009250:	bf18      	it	ne
 8009252:	2300      	movne	r3, #0
 8009254:	eba6 0807 	sub.w	r8, r6, r7
 8009258:	608b      	str	r3, [r1, #8]
 800925a:	f1b8 0f00 	cmp.w	r8, #0
 800925e:	dd9c      	ble.n	800919a <__sflush_r+0x1a>
 8009260:	6a21      	ldr	r1, [r4, #32]
 8009262:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009264:	4643      	mov	r3, r8
 8009266:	463a      	mov	r2, r7
 8009268:	4628      	mov	r0, r5
 800926a:	47b0      	blx	r6
 800926c:	2800      	cmp	r0, #0
 800926e:	dc06      	bgt.n	800927e <__sflush_r+0xfe>
 8009270:	89a3      	ldrh	r3, [r4, #12]
 8009272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009276:	81a3      	strh	r3, [r4, #12]
 8009278:	f04f 30ff 	mov.w	r0, #4294967295
 800927c:	e78e      	b.n	800919c <__sflush_r+0x1c>
 800927e:	4407      	add	r7, r0
 8009280:	eba8 0800 	sub.w	r8, r8, r0
 8009284:	e7e9      	b.n	800925a <__sflush_r+0xda>
 8009286:	bf00      	nop
 8009288:	20400001 	.word	0x20400001

0800928c <_fflush_r>:
 800928c:	b538      	push	{r3, r4, r5, lr}
 800928e:	690b      	ldr	r3, [r1, #16]
 8009290:	4605      	mov	r5, r0
 8009292:	460c      	mov	r4, r1
 8009294:	b913      	cbnz	r3, 800929c <_fflush_r+0x10>
 8009296:	2500      	movs	r5, #0
 8009298:	4628      	mov	r0, r5
 800929a:	bd38      	pop	{r3, r4, r5, pc}
 800929c:	b118      	cbz	r0, 80092a6 <_fflush_r+0x1a>
 800929e:	6983      	ldr	r3, [r0, #24]
 80092a0:	b90b      	cbnz	r3, 80092a6 <_fflush_r+0x1a>
 80092a2:	f000 f887 	bl	80093b4 <__sinit>
 80092a6:	4b14      	ldr	r3, [pc, #80]	; (80092f8 <_fflush_r+0x6c>)
 80092a8:	429c      	cmp	r4, r3
 80092aa:	d11b      	bne.n	80092e4 <_fflush_r+0x58>
 80092ac:	686c      	ldr	r4, [r5, #4]
 80092ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d0ef      	beq.n	8009296 <_fflush_r+0xa>
 80092b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80092b8:	07d0      	lsls	r0, r2, #31
 80092ba:	d404      	bmi.n	80092c6 <_fflush_r+0x3a>
 80092bc:	0599      	lsls	r1, r3, #22
 80092be:	d402      	bmi.n	80092c6 <_fflush_r+0x3a>
 80092c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092c2:	f000 f915 	bl	80094f0 <__retarget_lock_acquire_recursive>
 80092c6:	4628      	mov	r0, r5
 80092c8:	4621      	mov	r1, r4
 80092ca:	f7ff ff59 	bl	8009180 <__sflush_r>
 80092ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092d0:	07da      	lsls	r2, r3, #31
 80092d2:	4605      	mov	r5, r0
 80092d4:	d4e0      	bmi.n	8009298 <_fflush_r+0xc>
 80092d6:	89a3      	ldrh	r3, [r4, #12]
 80092d8:	059b      	lsls	r3, r3, #22
 80092da:	d4dd      	bmi.n	8009298 <_fflush_r+0xc>
 80092dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092de:	f000 f908 	bl	80094f2 <__retarget_lock_release_recursive>
 80092e2:	e7d9      	b.n	8009298 <_fflush_r+0xc>
 80092e4:	4b05      	ldr	r3, [pc, #20]	; (80092fc <_fflush_r+0x70>)
 80092e6:	429c      	cmp	r4, r3
 80092e8:	d101      	bne.n	80092ee <_fflush_r+0x62>
 80092ea:	68ac      	ldr	r4, [r5, #8]
 80092ec:	e7df      	b.n	80092ae <_fflush_r+0x22>
 80092ee:	4b04      	ldr	r3, [pc, #16]	; (8009300 <_fflush_r+0x74>)
 80092f0:	429c      	cmp	r4, r3
 80092f2:	bf08      	it	eq
 80092f4:	68ec      	ldreq	r4, [r5, #12]
 80092f6:	e7da      	b.n	80092ae <_fflush_r+0x22>
 80092f8:	08009d8c 	.word	0x08009d8c
 80092fc:	08009dac 	.word	0x08009dac
 8009300:	08009d6c 	.word	0x08009d6c

08009304 <std>:
 8009304:	2300      	movs	r3, #0
 8009306:	b510      	push	{r4, lr}
 8009308:	4604      	mov	r4, r0
 800930a:	e9c0 3300 	strd	r3, r3, [r0]
 800930e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009312:	6083      	str	r3, [r0, #8]
 8009314:	8181      	strh	r1, [r0, #12]
 8009316:	6643      	str	r3, [r0, #100]	; 0x64
 8009318:	81c2      	strh	r2, [r0, #14]
 800931a:	6183      	str	r3, [r0, #24]
 800931c:	4619      	mov	r1, r3
 800931e:	2208      	movs	r2, #8
 8009320:	305c      	adds	r0, #92	; 0x5c
 8009322:	f7fd fba7 	bl	8006a74 <memset>
 8009326:	4b05      	ldr	r3, [pc, #20]	; (800933c <std+0x38>)
 8009328:	6263      	str	r3, [r4, #36]	; 0x24
 800932a:	4b05      	ldr	r3, [pc, #20]	; (8009340 <std+0x3c>)
 800932c:	62a3      	str	r3, [r4, #40]	; 0x28
 800932e:	4b05      	ldr	r3, [pc, #20]	; (8009344 <std+0x40>)
 8009330:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009332:	4b05      	ldr	r3, [pc, #20]	; (8009348 <std+0x44>)
 8009334:	6224      	str	r4, [r4, #32]
 8009336:	6323      	str	r3, [r4, #48]	; 0x30
 8009338:	bd10      	pop	{r4, pc}
 800933a:	bf00      	nop
 800933c:	08009655 	.word	0x08009655
 8009340:	08009677 	.word	0x08009677
 8009344:	080096af 	.word	0x080096af
 8009348:	080096d3 	.word	0x080096d3

0800934c <_cleanup_r>:
 800934c:	4901      	ldr	r1, [pc, #4]	; (8009354 <_cleanup_r+0x8>)
 800934e:	f000 b8af 	b.w	80094b0 <_fwalk_reent>
 8009352:	bf00      	nop
 8009354:	0800928d 	.word	0x0800928d

08009358 <__sfmoreglue>:
 8009358:	b570      	push	{r4, r5, r6, lr}
 800935a:	1e4a      	subs	r2, r1, #1
 800935c:	2568      	movs	r5, #104	; 0x68
 800935e:	4355      	muls	r5, r2
 8009360:	460e      	mov	r6, r1
 8009362:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009366:	f7ff fa87 	bl	8008878 <_malloc_r>
 800936a:	4604      	mov	r4, r0
 800936c:	b140      	cbz	r0, 8009380 <__sfmoreglue+0x28>
 800936e:	2100      	movs	r1, #0
 8009370:	e9c0 1600 	strd	r1, r6, [r0]
 8009374:	300c      	adds	r0, #12
 8009376:	60a0      	str	r0, [r4, #8]
 8009378:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800937c:	f7fd fb7a 	bl	8006a74 <memset>
 8009380:	4620      	mov	r0, r4
 8009382:	bd70      	pop	{r4, r5, r6, pc}

08009384 <__sfp_lock_acquire>:
 8009384:	4801      	ldr	r0, [pc, #4]	; (800938c <__sfp_lock_acquire+0x8>)
 8009386:	f000 b8b3 	b.w	80094f0 <__retarget_lock_acquire_recursive>
 800938a:	bf00      	nop
 800938c:	2000076c 	.word	0x2000076c

08009390 <__sfp_lock_release>:
 8009390:	4801      	ldr	r0, [pc, #4]	; (8009398 <__sfp_lock_release+0x8>)
 8009392:	f000 b8ae 	b.w	80094f2 <__retarget_lock_release_recursive>
 8009396:	bf00      	nop
 8009398:	2000076c 	.word	0x2000076c

0800939c <__sinit_lock_acquire>:
 800939c:	4801      	ldr	r0, [pc, #4]	; (80093a4 <__sinit_lock_acquire+0x8>)
 800939e:	f000 b8a7 	b.w	80094f0 <__retarget_lock_acquire_recursive>
 80093a2:	bf00      	nop
 80093a4:	20000767 	.word	0x20000767

080093a8 <__sinit_lock_release>:
 80093a8:	4801      	ldr	r0, [pc, #4]	; (80093b0 <__sinit_lock_release+0x8>)
 80093aa:	f000 b8a2 	b.w	80094f2 <__retarget_lock_release_recursive>
 80093ae:	bf00      	nop
 80093b0:	20000767 	.word	0x20000767

080093b4 <__sinit>:
 80093b4:	b510      	push	{r4, lr}
 80093b6:	4604      	mov	r4, r0
 80093b8:	f7ff fff0 	bl	800939c <__sinit_lock_acquire>
 80093bc:	69a3      	ldr	r3, [r4, #24]
 80093be:	b11b      	cbz	r3, 80093c8 <__sinit+0x14>
 80093c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093c4:	f7ff bff0 	b.w	80093a8 <__sinit_lock_release>
 80093c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80093cc:	6523      	str	r3, [r4, #80]	; 0x50
 80093ce:	4b13      	ldr	r3, [pc, #76]	; (800941c <__sinit+0x68>)
 80093d0:	4a13      	ldr	r2, [pc, #76]	; (8009420 <__sinit+0x6c>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80093d6:	42a3      	cmp	r3, r4
 80093d8:	bf04      	itt	eq
 80093da:	2301      	moveq	r3, #1
 80093dc:	61a3      	streq	r3, [r4, #24]
 80093de:	4620      	mov	r0, r4
 80093e0:	f000 f820 	bl	8009424 <__sfp>
 80093e4:	6060      	str	r0, [r4, #4]
 80093e6:	4620      	mov	r0, r4
 80093e8:	f000 f81c 	bl	8009424 <__sfp>
 80093ec:	60a0      	str	r0, [r4, #8]
 80093ee:	4620      	mov	r0, r4
 80093f0:	f000 f818 	bl	8009424 <__sfp>
 80093f4:	2200      	movs	r2, #0
 80093f6:	60e0      	str	r0, [r4, #12]
 80093f8:	2104      	movs	r1, #4
 80093fa:	6860      	ldr	r0, [r4, #4]
 80093fc:	f7ff ff82 	bl	8009304 <std>
 8009400:	68a0      	ldr	r0, [r4, #8]
 8009402:	2201      	movs	r2, #1
 8009404:	2109      	movs	r1, #9
 8009406:	f7ff ff7d 	bl	8009304 <std>
 800940a:	68e0      	ldr	r0, [r4, #12]
 800940c:	2202      	movs	r2, #2
 800940e:	2112      	movs	r1, #18
 8009410:	f7ff ff78 	bl	8009304 <std>
 8009414:	2301      	movs	r3, #1
 8009416:	61a3      	str	r3, [r4, #24]
 8009418:	e7d2      	b.n	80093c0 <__sinit+0xc>
 800941a:	bf00      	nop
 800941c:	080099e8 	.word	0x080099e8
 8009420:	0800934d 	.word	0x0800934d

08009424 <__sfp>:
 8009424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009426:	4607      	mov	r7, r0
 8009428:	f7ff ffac 	bl	8009384 <__sfp_lock_acquire>
 800942c:	4b1e      	ldr	r3, [pc, #120]	; (80094a8 <__sfp+0x84>)
 800942e:	681e      	ldr	r6, [r3, #0]
 8009430:	69b3      	ldr	r3, [r6, #24]
 8009432:	b913      	cbnz	r3, 800943a <__sfp+0x16>
 8009434:	4630      	mov	r0, r6
 8009436:	f7ff ffbd 	bl	80093b4 <__sinit>
 800943a:	3648      	adds	r6, #72	; 0x48
 800943c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009440:	3b01      	subs	r3, #1
 8009442:	d503      	bpl.n	800944c <__sfp+0x28>
 8009444:	6833      	ldr	r3, [r6, #0]
 8009446:	b30b      	cbz	r3, 800948c <__sfp+0x68>
 8009448:	6836      	ldr	r6, [r6, #0]
 800944a:	e7f7      	b.n	800943c <__sfp+0x18>
 800944c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009450:	b9d5      	cbnz	r5, 8009488 <__sfp+0x64>
 8009452:	4b16      	ldr	r3, [pc, #88]	; (80094ac <__sfp+0x88>)
 8009454:	60e3      	str	r3, [r4, #12]
 8009456:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800945a:	6665      	str	r5, [r4, #100]	; 0x64
 800945c:	f000 f847 	bl	80094ee <__retarget_lock_init_recursive>
 8009460:	f7ff ff96 	bl	8009390 <__sfp_lock_release>
 8009464:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009468:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800946c:	6025      	str	r5, [r4, #0]
 800946e:	61a5      	str	r5, [r4, #24]
 8009470:	2208      	movs	r2, #8
 8009472:	4629      	mov	r1, r5
 8009474:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009478:	f7fd fafc 	bl	8006a74 <memset>
 800947c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009480:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009484:	4620      	mov	r0, r4
 8009486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009488:	3468      	adds	r4, #104	; 0x68
 800948a:	e7d9      	b.n	8009440 <__sfp+0x1c>
 800948c:	2104      	movs	r1, #4
 800948e:	4638      	mov	r0, r7
 8009490:	f7ff ff62 	bl	8009358 <__sfmoreglue>
 8009494:	4604      	mov	r4, r0
 8009496:	6030      	str	r0, [r6, #0]
 8009498:	2800      	cmp	r0, #0
 800949a:	d1d5      	bne.n	8009448 <__sfp+0x24>
 800949c:	f7ff ff78 	bl	8009390 <__sfp_lock_release>
 80094a0:	230c      	movs	r3, #12
 80094a2:	603b      	str	r3, [r7, #0]
 80094a4:	e7ee      	b.n	8009484 <__sfp+0x60>
 80094a6:	bf00      	nop
 80094a8:	080099e8 	.word	0x080099e8
 80094ac:	ffff0001 	.word	0xffff0001

080094b0 <_fwalk_reent>:
 80094b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094b4:	4606      	mov	r6, r0
 80094b6:	4688      	mov	r8, r1
 80094b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80094bc:	2700      	movs	r7, #0
 80094be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094c2:	f1b9 0901 	subs.w	r9, r9, #1
 80094c6:	d505      	bpl.n	80094d4 <_fwalk_reent+0x24>
 80094c8:	6824      	ldr	r4, [r4, #0]
 80094ca:	2c00      	cmp	r4, #0
 80094cc:	d1f7      	bne.n	80094be <_fwalk_reent+0xe>
 80094ce:	4638      	mov	r0, r7
 80094d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094d4:	89ab      	ldrh	r3, [r5, #12]
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d907      	bls.n	80094ea <_fwalk_reent+0x3a>
 80094da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094de:	3301      	adds	r3, #1
 80094e0:	d003      	beq.n	80094ea <_fwalk_reent+0x3a>
 80094e2:	4629      	mov	r1, r5
 80094e4:	4630      	mov	r0, r6
 80094e6:	47c0      	blx	r8
 80094e8:	4307      	orrs	r7, r0
 80094ea:	3568      	adds	r5, #104	; 0x68
 80094ec:	e7e9      	b.n	80094c2 <_fwalk_reent+0x12>

080094ee <__retarget_lock_init_recursive>:
 80094ee:	4770      	bx	lr

080094f0 <__retarget_lock_acquire_recursive>:
 80094f0:	4770      	bx	lr

080094f2 <__retarget_lock_release_recursive>:
 80094f2:	4770      	bx	lr

080094f4 <__swhatbuf_r>:
 80094f4:	b570      	push	{r4, r5, r6, lr}
 80094f6:	460e      	mov	r6, r1
 80094f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094fc:	2900      	cmp	r1, #0
 80094fe:	b096      	sub	sp, #88	; 0x58
 8009500:	4614      	mov	r4, r2
 8009502:	461d      	mov	r5, r3
 8009504:	da07      	bge.n	8009516 <__swhatbuf_r+0x22>
 8009506:	2300      	movs	r3, #0
 8009508:	602b      	str	r3, [r5, #0]
 800950a:	89b3      	ldrh	r3, [r6, #12]
 800950c:	061a      	lsls	r2, r3, #24
 800950e:	d410      	bmi.n	8009532 <__swhatbuf_r+0x3e>
 8009510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009514:	e00e      	b.n	8009534 <__swhatbuf_r+0x40>
 8009516:	466a      	mov	r2, sp
 8009518:	f000 f902 	bl	8009720 <_fstat_r>
 800951c:	2800      	cmp	r0, #0
 800951e:	dbf2      	blt.n	8009506 <__swhatbuf_r+0x12>
 8009520:	9a01      	ldr	r2, [sp, #4]
 8009522:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009526:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800952a:	425a      	negs	r2, r3
 800952c:	415a      	adcs	r2, r3
 800952e:	602a      	str	r2, [r5, #0]
 8009530:	e7ee      	b.n	8009510 <__swhatbuf_r+0x1c>
 8009532:	2340      	movs	r3, #64	; 0x40
 8009534:	2000      	movs	r0, #0
 8009536:	6023      	str	r3, [r4, #0]
 8009538:	b016      	add	sp, #88	; 0x58
 800953a:	bd70      	pop	{r4, r5, r6, pc}

0800953c <__smakebuf_r>:
 800953c:	898b      	ldrh	r3, [r1, #12]
 800953e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009540:	079d      	lsls	r5, r3, #30
 8009542:	4606      	mov	r6, r0
 8009544:	460c      	mov	r4, r1
 8009546:	d507      	bpl.n	8009558 <__smakebuf_r+0x1c>
 8009548:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800954c:	6023      	str	r3, [r4, #0]
 800954e:	6123      	str	r3, [r4, #16]
 8009550:	2301      	movs	r3, #1
 8009552:	6163      	str	r3, [r4, #20]
 8009554:	b002      	add	sp, #8
 8009556:	bd70      	pop	{r4, r5, r6, pc}
 8009558:	ab01      	add	r3, sp, #4
 800955a:	466a      	mov	r2, sp
 800955c:	f7ff ffca 	bl	80094f4 <__swhatbuf_r>
 8009560:	9900      	ldr	r1, [sp, #0]
 8009562:	4605      	mov	r5, r0
 8009564:	4630      	mov	r0, r6
 8009566:	f7ff f987 	bl	8008878 <_malloc_r>
 800956a:	b948      	cbnz	r0, 8009580 <__smakebuf_r+0x44>
 800956c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009570:	059a      	lsls	r2, r3, #22
 8009572:	d4ef      	bmi.n	8009554 <__smakebuf_r+0x18>
 8009574:	f023 0303 	bic.w	r3, r3, #3
 8009578:	f043 0302 	orr.w	r3, r3, #2
 800957c:	81a3      	strh	r3, [r4, #12]
 800957e:	e7e3      	b.n	8009548 <__smakebuf_r+0xc>
 8009580:	4b0d      	ldr	r3, [pc, #52]	; (80095b8 <__smakebuf_r+0x7c>)
 8009582:	62b3      	str	r3, [r6, #40]	; 0x28
 8009584:	89a3      	ldrh	r3, [r4, #12]
 8009586:	6020      	str	r0, [r4, #0]
 8009588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800958c:	81a3      	strh	r3, [r4, #12]
 800958e:	9b00      	ldr	r3, [sp, #0]
 8009590:	6163      	str	r3, [r4, #20]
 8009592:	9b01      	ldr	r3, [sp, #4]
 8009594:	6120      	str	r0, [r4, #16]
 8009596:	b15b      	cbz	r3, 80095b0 <__smakebuf_r+0x74>
 8009598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800959c:	4630      	mov	r0, r6
 800959e:	f000 f8d1 	bl	8009744 <_isatty_r>
 80095a2:	b128      	cbz	r0, 80095b0 <__smakebuf_r+0x74>
 80095a4:	89a3      	ldrh	r3, [r4, #12]
 80095a6:	f023 0303 	bic.w	r3, r3, #3
 80095aa:	f043 0301 	orr.w	r3, r3, #1
 80095ae:	81a3      	strh	r3, [r4, #12]
 80095b0:	89a0      	ldrh	r0, [r4, #12]
 80095b2:	4305      	orrs	r5, r0
 80095b4:	81a5      	strh	r5, [r4, #12]
 80095b6:	e7cd      	b.n	8009554 <__smakebuf_r+0x18>
 80095b8:	0800934d 	.word	0x0800934d

080095bc <_malloc_usable_size_r>:
 80095bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095c0:	1f18      	subs	r0, r3, #4
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	bfbc      	itt	lt
 80095c6:	580b      	ldrlt	r3, [r1, r0]
 80095c8:	18c0      	addlt	r0, r0, r3
 80095ca:	4770      	bx	lr

080095cc <_raise_r>:
 80095cc:	291f      	cmp	r1, #31
 80095ce:	b538      	push	{r3, r4, r5, lr}
 80095d0:	4604      	mov	r4, r0
 80095d2:	460d      	mov	r5, r1
 80095d4:	d904      	bls.n	80095e0 <_raise_r+0x14>
 80095d6:	2316      	movs	r3, #22
 80095d8:	6003      	str	r3, [r0, #0]
 80095da:	f04f 30ff 	mov.w	r0, #4294967295
 80095de:	bd38      	pop	{r3, r4, r5, pc}
 80095e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80095e2:	b112      	cbz	r2, 80095ea <_raise_r+0x1e>
 80095e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095e8:	b94b      	cbnz	r3, 80095fe <_raise_r+0x32>
 80095ea:	4620      	mov	r0, r4
 80095ec:	f000 f830 	bl	8009650 <_getpid_r>
 80095f0:	462a      	mov	r2, r5
 80095f2:	4601      	mov	r1, r0
 80095f4:	4620      	mov	r0, r4
 80095f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095fa:	f000 b817 	b.w	800962c <_kill_r>
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d00a      	beq.n	8009618 <_raise_r+0x4c>
 8009602:	1c59      	adds	r1, r3, #1
 8009604:	d103      	bne.n	800960e <_raise_r+0x42>
 8009606:	2316      	movs	r3, #22
 8009608:	6003      	str	r3, [r0, #0]
 800960a:	2001      	movs	r0, #1
 800960c:	e7e7      	b.n	80095de <_raise_r+0x12>
 800960e:	2400      	movs	r4, #0
 8009610:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009614:	4628      	mov	r0, r5
 8009616:	4798      	blx	r3
 8009618:	2000      	movs	r0, #0
 800961a:	e7e0      	b.n	80095de <_raise_r+0x12>

0800961c <raise>:
 800961c:	4b02      	ldr	r3, [pc, #8]	; (8009628 <raise+0xc>)
 800961e:	4601      	mov	r1, r0
 8009620:	6818      	ldr	r0, [r3, #0]
 8009622:	f7ff bfd3 	b.w	80095cc <_raise_r>
 8009626:	bf00      	nop
 8009628:	20000010 	.word	0x20000010

0800962c <_kill_r>:
 800962c:	b538      	push	{r3, r4, r5, lr}
 800962e:	4d07      	ldr	r5, [pc, #28]	; (800964c <_kill_r+0x20>)
 8009630:	2300      	movs	r3, #0
 8009632:	4604      	mov	r4, r0
 8009634:	4608      	mov	r0, r1
 8009636:	4611      	mov	r1, r2
 8009638:	602b      	str	r3, [r5, #0]
 800963a:	f7f8 fd3f 	bl	80020bc <_kill>
 800963e:	1c43      	adds	r3, r0, #1
 8009640:	d102      	bne.n	8009648 <_kill_r+0x1c>
 8009642:	682b      	ldr	r3, [r5, #0]
 8009644:	b103      	cbz	r3, 8009648 <_kill_r+0x1c>
 8009646:	6023      	str	r3, [r4, #0]
 8009648:	bd38      	pop	{r3, r4, r5, pc}
 800964a:	bf00      	nop
 800964c:	20000760 	.word	0x20000760

08009650 <_getpid_r>:
 8009650:	f7f8 bd2c 	b.w	80020ac <_getpid>

08009654 <__sread>:
 8009654:	b510      	push	{r4, lr}
 8009656:	460c      	mov	r4, r1
 8009658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800965c:	f000 f894 	bl	8009788 <_read_r>
 8009660:	2800      	cmp	r0, #0
 8009662:	bfab      	itete	ge
 8009664:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009666:	89a3      	ldrhlt	r3, [r4, #12]
 8009668:	181b      	addge	r3, r3, r0
 800966a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800966e:	bfac      	ite	ge
 8009670:	6563      	strge	r3, [r4, #84]	; 0x54
 8009672:	81a3      	strhlt	r3, [r4, #12]
 8009674:	bd10      	pop	{r4, pc}

08009676 <__swrite>:
 8009676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800967a:	461f      	mov	r7, r3
 800967c:	898b      	ldrh	r3, [r1, #12]
 800967e:	05db      	lsls	r3, r3, #23
 8009680:	4605      	mov	r5, r0
 8009682:	460c      	mov	r4, r1
 8009684:	4616      	mov	r6, r2
 8009686:	d505      	bpl.n	8009694 <__swrite+0x1e>
 8009688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800968c:	2302      	movs	r3, #2
 800968e:	2200      	movs	r2, #0
 8009690:	f000 f868 	bl	8009764 <_lseek_r>
 8009694:	89a3      	ldrh	r3, [r4, #12]
 8009696:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800969a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800969e:	81a3      	strh	r3, [r4, #12]
 80096a0:	4632      	mov	r2, r6
 80096a2:	463b      	mov	r3, r7
 80096a4:	4628      	mov	r0, r5
 80096a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096aa:	f000 b817 	b.w	80096dc <_write_r>

080096ae <__sseek>:
 80096ae:	b510      	push	{r4, lr}
 80096b0:	460c      	mov	r4, r1
 80096b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096b6:	f000 f855 	bl	8009764 <_lseek_r>
 80096ba:	1c43      	adds	r3, r0, #1
 80096bc:	89a3      	ldrh	r3, [r4, #12]
 80096be:	bf15      	itete	ne
 80096c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80096c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80096c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80096ca:	81a3      	strheq	r3, [r4, #12]
 80096cc:	bf18      	it	ne
 80096ce:	81a3      	strhne	r3, [r4, #12]
 80096d0:	bd10      	pop	{r4, pc}

080096d2 <__sclose>:
 80096d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096d6:	f000 b813 	b.w	8009700 <_close_r>
	...

080096dc <_write_r>:
 80096dc:	b538      	push	{r3, r4, r5, lr}
 80096de:	4d07      	ldr	r5, [pc, #28]	; (80096fc <_write_r+0x20>)
 80096e0:	4604      	mov	r4, r0
 80096e2:	4608      	mov	r0, r1
 80096e4:	4611      	mov	r1, r2
 80096e6:	2200      	movs	r2, #0
 80096e8:	602a      	str	r2, [r5, #0]
 80096ea:	461a      	mov	r2, r3
 80096ec:	f7f8 fd1d 	bl	800212a <_write>
 80096f0:	1c43      	adds	r3, r0, #1
 80096f2:	d102      	bne.n	80096fa <_write_r+0x1e>
 80096f4:	682b      	ldr	r3, [r5, #0]
 80096f6:	b103      	cbz	r3, 80096fa <_write_r+0x1e>
 80096f8:	6023      	str	r3, [r4, #0]
 80096fa:	bd38      	pop	{r3, r4, r5, pc}
 80096fc:	20000760 	.word	0x20000760

08009700 <_close_r>:
 8009700:	b538      	push	{r3, r4, r5, lr}
 8009702:	4d06      	ldr	r5, [pc, #24]	; (800971c <_close_r+0x1c>)
 8009704:	2300      	movs	r3, #0
 8009706:	4604      	mov	r4, r0
 8009708:	4608      	mov	r0, r1
 800970a:	602b      	str	r3, [r5, #0]
 800970c:	f7f8 fd29 	bl	8002162 <_close>
 8009710:	1c43      	adds	r3, r0, #1
 8009712:	d102      	bne.n	800971a <_close_r+0x1a>
 8009714:	682b      	ldr	r3, [r5, #0]
 8009716:	b103      	cbz	r3, 800971a <_close_r+0x1a>
 8009718:	6023      	str	r3, [r4, #0]
 800971a:	bd38      	pop	{r3, r4, r5, pc}
 800971c:	20000760 	.word	0x20000760

08009720 <_fstat_r>:
 8009720:	b538      	push	{r3, r4, r5, lr}
 8009722:	4d07      	ldr	r5, [pc, #28]	; (8009740 <_fstat_r+0x20>)
 8009724:	2300      	movs	r3, #0
 8009726:	4604      	mov	r4, r0
 8009728:	4608      	mov	r0, r1
 800972a:	4611      	mov	r1, r2
 800972c:	602b      	str	r3, [r5, #0]
 800972e:	f7f8 fd24 	bl	800217a <_fstat>
 8009732:	1c43      	adds	r3, r0, #1
 8009734:	d102      	bne.n	800973c <_fstat_r+0x1c>
 8009736:	682b      	ldr	r3, [r5, #0]
 8009738:	b103      	cbz	r3, 800973c <_fstat_r+0x1c>
 800973a:	6023      	str	r3, [r4, #0]
 800973c:	bd38      	pop	{r3, r4, r5, pc}
 800973e:	bf00      	nop
 8009740:	20000760 	.word	0x20000760

08009744 <_isatty_r>:
 8009744:	b538      	push	{r3, r4, r5, lr}
 8009746:	4d06      	ldr	r5, [pc, #24]	; (8009760 <_isatty_r+0x1c>)
 8009748:	2300      	movs	r3, #0
 800974a:	4604      	mov	r4, r0
 800974c:	4608      	mov	r0, r1
 800974e:	602b      	str	r3, [r5, #0]
 8009750:	f7f8 fd23 	bl	800219a <_isatty>
 8009754:	1c43      	adds	r3, r0, #1
 8009756:	d102      	bne.n	800975e <_isatty_r+0x1a>
 8009758:	682b      	ldr	r3, [r5, #0]
 800975a:	b103      	cbz	r3, 800975e <_isatty_r+0x1a>
 800975c:	6023      	str	r3, [r4, #0]
 800975e:	bd38      	pop	{r3, r4, r5, pc}
 8009760:	20000760 	.word	0x20000760

08009764 <_lseek_r>:
 8009764:	b538      	push	{r3, r4, r5, lr}
 8009766:	4d07      	ldr	r5, [pc, #28]	; (8009784 <_lseek_r+0x20>)
 8009768:	4604      	mov	r4, r0
 800976a:	4608      	mov	r0, r1
 800976c:	4611      	mov	r1, r2
 800976e:	2200      	movs	r2, #0
 8009770:	602a      	str	r2, [r5, #0]
 8009772:	461a      	mov	r2, r3
 8009774:	f7f8 fd1c 	bl	80021b0 <_lseek>
 8009778:	1c43      	adds	r3, r0, #1
 800977a:	d102      	bne.n	8009782 <_lseek_r+0x1e>
 800977c:	682b      	ldr	r3, [r5, #0]
 800977e:	b103      	cbz	r3, 8009782 <_lseek_r+0x1e>
 8009780:	6023      	str	r3, [r4, #0]
 8009782:	bd38      	pop	{r3, r4, r5, pc}
 8009784:	20000760 	.word	0x20000760

08009788 <_read_r>:
 8009788:	b538      	push	{r3, r4, r5, lr}
 800978a:	4d07      	ldr	r5, [pc, #28]	; (80097a8 <_read_r+0x20>)
 800978c:	4604      	mov	r4, r0
 800978e:	4608      	mov	r0, r1
 8009790:	4611      	mov	r1, r2
 8009792:	2200      	movs	r2, #0
 8009794:	602a      	str	r2, [r5, #0]
 8009796:	461a      	mov	r2, r3
 8009798:	f7f8 fcaa 	bl	80020f0 <_read>
 800979c:	1c43      	adds	r3, r0, #1
 800979e:	d102      	bne.n	80097a6 <_read_r+0x1e>
 80097a0:	682b      	ldr	r3, [r5, #0]
 80097a2:	b103      	cbz	r3, 80097a6 <_read_r+0x1e>
 80097a4:	6023      	str	r3, [r4, #0]
 80097a6:	bd38      	pop	{r3, r4, r5, pc}
 80097a8:	20000760 	.word	0x20000760

080097ac <_init>:
 80097ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ae:	bf00      	nop
 80097b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097b2:	bc08      	pop	{r3}
 80097b4:	469e      	mov	lr, r3
 80097b6:	4770      	bx	lr

080097b8 <_fini>:
 80097b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ba:	bf00      	nop
 80097bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097be:	bc08      	pop	{r3}
 80097c0:	469e      	mov	lr, r3
 80097c2:	4770      	bx	lr
