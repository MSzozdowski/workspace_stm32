
T3_L32_UART_ComplexParse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072e0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  080073f0  080073f0  000173f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a70  08007a70  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  08007a70  08007a70  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a70  08007a70  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a70  08007a70  00017a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a74  08007a74  00017a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08007a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000200  08007c78  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08007c78  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a720  00000000  00000000  00020229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002125  00000000  00000000  0002a949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000810  00000000  00000000  0002ca70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  0002d280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186aa  00000000  00000000  0002d9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a0da  00000000  00000000  00046052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083dba  00000000  00000000  0005012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3ee6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003318  00000000  00000000  000d3f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	080073d8 	.word	0x080073d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	080073d8 	.word	0x080073d8

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2lz>:
 8000b7c:	b538      	push	{r3, r4, r5, lr}
 8000b7e:	460c      	mov	r4, r1
 8000b80:	4605      	mov	r5, r0
 8000b82:	4621      	mov	r1, r4
 8000b84:	4628      	mov	r0, r5
 8000b86:	2200      	movs	r2, #0
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f7ff ff21 	bl	80009d0 <__aeabi_dcmplt>
 8000b8e:	b928      	cbnz	r0, 8000b9c <__aeabi_d2lz+0x20>
 8000b90:	4628      	mov	r0, r5
 8000b92:	4621      	mov	r1, r4
 8000b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b98:	f000 b80a 	b.w	8000bb0 <__aeabi_d2ulz>
 8000b9c:	4628      	mov	r0, r5
 8000b9e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000ba2:	f000 f805 	bl	8000bb0 <__aeabi_d2ulz>
 8000ba6:	4240      	negs	r0, r0
 8000ba8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bac:	bd38      	pop	{r3, r4, r5, pc}
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2ulz>:
 8000bb0:	b5d0      	push	{r4, r6, r7, lr}
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <__aeabi_d2ulz+0x34>)
 8000bb6:	4606      	mov	r6, r0
 8000bb8:	460f      	mov	r7, r1
 8000bba:	f7ff fc97 	bl	80004ec <__aeabi_dmul>
 8000bbe:	f7ff ff6d 	bl	8000a9c <__aeabi_d2uiz>
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	f7ff fc18 	bl	80003f8 <__aeabi_ui2d>
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <__aeabi_d2ulz+0x38>)
 8000bcc:	f7ff fc8e 	bl	80004ec <__aeabi_dmul>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	4630      	mov	r0, r6
 8000bd6:	4639      	mov	r1, r7
 8000bd8:	f7ff fad0 	bl	800017c <__aeabi_dsub>
 8000bdc:	f7ff ff5e 	bl	8000a9c <__aeabi_d2uiz>
 8000be0:	4621      	mov	r1, r4
 8000be2:	bdd0      	pop	{r4, r6, r7, pc}
 8000be4:	3df00000 	.word	0x3df00000
 8000be8:	41f00000 	.word	0x41f00000

08000bec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf2:	f107 0310 	add.w	r3, r7, #16
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c00:	4b2d      	ldr	r3, [pc, #180]	; (8000cb8 <MX_GPIO_Init+0xcc>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a2c      	ldr	r2, [pc, #176]	; (8000cb8 <MX_GPIO_Init+0xcc>)
 8000c06:	f043 0310 	orr.w	r3, r3, #16
 8000c0a:	6193      	str	r3, [r2, #24]
 8000c0c:	4b2a      	ldr	r3, [pc, #168]	; (8000cb8 <MX_GPIO_Init+0xcc>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f003 0310 	and.w	r3, r3, #16
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c18:	4b27      	ldr	r3, [pc, #156]	; (8000cb8 <MX_GPIO_Init+0xcc>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	4a26      	ldr	r2, [pc, #152]	; (8000cb8 <MX_GPIO_Init+0xcc>)
 8000c1e:	f043 0320 	orr.w	r3, r3, #32
 8000c22:	6193      	str	r3, [r2, #24]
 8000c24:	4b24      	ldr	r3, [pc, #144]	; (8000cb8 <MX_GPIO_Init+0xcc>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f003 0320 	and.w	r3, r3, #32
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c30:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <MX_GPIO_Init+0xcc>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	4a20      	ldr	r2, [pc, #128]	; (8000cb8 <MX_GPIO_Init+0xcc>)
 8000c36:	f043 0304 	orr.w	r3, r3, #4
 8000c3a:	6193      	str	r3, [r2, #24]
 8000c3c:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <MX_GPIO_Init+0xcc>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	f003 0304 	and.w	r3, r3, #4
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <MX_GPIO_Init+0xcc>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	4a1a      	ldr	r2, [pc, #104]	; (8000cb8 <MX_GPIO_Init+0xcc>)
 8000c4e:	f043 0308 	orr.w	r3, r3, #8
 8000c52:	6193      	str	r3, [r2, #24]
 8000c54:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <MX_GPIO_Init+0xcc>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f003 0308 	and.w	r3, r3, #8
 8000c5c:	603b      	str	r3, [r7, #0]
 8000c5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2120      	movs	r1, #32
 8000c64:	4815      	ldr	r0, [pc, #84]	; (8000cbc <MX_GPIO_Init+0xd0>)
 8000c66:	f001 f821 	bl	8001cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <MX_GPIO_Init+0xd4>)
 8000c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4811      	ldr	r0, [pc, #68]	; (8000cc4 <MX_GPIO_Init+0xd8>)
 8000c80:	f000 fe90 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c84:	2320      	movs	r3, #32
 8000c86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4808      	ldr	r0, [pc, #32]	; (8000cbc <MX_GPIO_Init+0xd0>)
 8000c9c:	f000 fe82 	bl	80019a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	2028      	movs	r0, #40	; 0x28
 8000ca6:	f000 fd96 	bl	80017d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000caa:	2028      	movs	r0, #40	; 0x28
 8000cac:	f000 fdaf 	bl	800180e <HAL_NVIC_EnableIRQ>

}
 8000cb0:	bf00      	nop
 8000cb2:	3720      	adds	r7, #32
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40010800 	.word	0x40010800
 8000cc0:	10110000 	.word	0x10110000
 8000cc4:	40011000 	.word	0x40011000

08000cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ccc:	f000 fc4a 	bl	8001564 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd0:	f000 f828 	bl	8000d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd4:	f7ff ff8a 	bl	8000bec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cd8:	f000 fba0 	bl	800141c <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000cdc:	f000 f863 	bl	8000da6 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2,&ReceiveTmp,1);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	490b      	ldr	r1, [pc, #44]	; (8000d10 <main+0x48>)
 8000ce4:	480b      	ldr	r0, [pc, #44]	; (8000d14 <main+0x4c>)
 8000ce6:	f001 fd14 	bl	8002712 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ReceivedLines > 0)
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <main+0x50>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d0fb      	beq.n	8000cea <main+0x22>
	  {
		  Parser_TakeLine(&ReceiveBuffer,ReceivedData);
 8000cf2:	490a      	ldr	r1, [pc, #40]	; (8000d1c <main+0x54>)
 8000cf4:	480a      	ldr	r0, [pc, #40]	; (8000d20 <main+0x58>)
 8000cf6:	f000 f898 	bl	8000e2a <Parser_TakeLine>
		  ReceivedLines--;
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <main+0x50>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <main+0x50>)
 8000d04:	701a      	strb	r2, [r3, #0]
		  Parser_Parse(ReceivedData);
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <main+0x54>)
 8000d08:	f000 f9d2 	bl	80010b0 <Parser_Parse>
	  if(ReceivedLines > 0)
 8000d0c:	e7ed      	b.n	8000cea <main+0x22>
 8000d0e:	bf00      	nop
 8000d10:	20000228 	.word	0x20000228
 8000d14:	20000290 	.word	0x20000290
 8000d18:	20000229 	.word	0x20000229
 8000d1c:	2000022c 	.word	0x2000022c
 8000d20:	2000024c 	.word	0x2000024c

08000d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b090      	sub	sp, #64	; 0x40
 8000d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2a:	f107 0318 	add.w	r3, r7, #24
 8000d2e:	2228      	movs	r2, #40	; 0x28
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f002 f974 	bl	8003020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d46:	2302      	movs	r3, #2
 8000d48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d4e:	2310      	movs	r3, #16
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d52:	2302      	movs	r3, #2
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000d56:	2300      	movs	r3, #0
 8000d58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d5a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d60:	f107 0318 	add.w	r3, r7, #24
 8000d64:	4618      	mov	r0, r3
 8000d66:	f000 ffdb 	bl	8001d20 <HAL_RCC_OscConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000d70:	f000 f856 	bl	8000e20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d74:	230f      	movs	r3, #15
 8000d76:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	2102      	movs	r1, #2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f001 fa46 	bl	8002220 <HAL_RCC_ClockConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000d9a:	f000 f841 	bl	8000e20 <Error_Handler>
  }
}
 8000d9e:	bf00      	nop
 8000da0:	3740      	adds	r7, #64	; 0x40
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2100      	movs	r1, #0
 8000dae:	2026      	movs	r0, #38	; 0x26
 8000db0:	f000 fd11 	bl	80017d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000db4:	2026      	movs	r0, #38	; 0x26
 8000db6:	f000 fd2a 	bl	800180e <HAL_NVIC_EnableIRQ>
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0f      	ldr	r2, [pc, #60]	; (8000e0c <HAL_UART_RxCpltCallback+0x4c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d117      	bne.n	8000e02 <HAL_UART_RxCpltCallback+0x42>
	{
		if(RB_OK == RB_Write(&ReceiveBuffer, ReceiveTmp))
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <HAL_UART_RxCpltCallback+0x50>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	480e      	ldr	r0, [pc, #56]	; (8000e14 <HAL_UART_RxCpltCallback+0x54>)
 8000dda:	f000 f9c3 	bl	8001164 <RB_Write>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d109      	bne.n	8000df8 <HAL_UART_RxCpltCallback+0x38>
		{
			if(ReceiveTmp == ENDLINE)
 8000de4:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_UART_RxCpltCallback+0x50>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b0a      	cmp	r3, #10
 8000dea:	d105      	bne.n	8000df8 <HAL_UART_RxCpltCallback+0x38>
			{
				ReceivedLines++;
 8000dec:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <HAL_UART_RxCpltCallback+0x58>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	3301      	adds	r3, #1
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <HAL_UART_RxCpltCallback+0x58>)
 8000df6:	701a      	strb	r2, [r3, #0]
			}
		}

		HAL_UART_Receive_IT(&huart2,&ReceiveTmp,1);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	4905      	ldr	r1, [pc, #20]	; (8000e10 <HAL_UART_RxCpltCallback+0x50>)
 8000dfc:	4807      	ldr	r0, [pc, #28]	; (8000e1c <HAL_UART_RxCpltCallback+0x5c>)
 8000dfe:	f001 fc88 	bl	8002712 <HAL_UART_Receive_IT>
	}

}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40004400 	.word	0x40004400
 8000e10:	20000228 	.word	0x20000228
 8000e14:	2000024c 	.word	0x2000024c
 8000e18:	20000229 	.word	0x20000229
 8000e1c:	20000290 	.word	0x20000290

08000e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e24:	b672      	cpsid	i
}
 8000e26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <Error_Handler+0x8>

08000e2a <Parser_TakeLine>:
#define MAX_NAME_SIZE 32

static char MyName[MAX_NAME_SIZE] = "No Name";

void Parser_TakeLine(RingBuffer_t *Buf, uint8_t *Destination)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b084      	sub	sp, #16
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
 8000e32:	6039      	str	r1, [r7, #0]
	uint8_t Tmp;
	uint8_t i = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	73fb      	strb	r3, [r7, #15]

	do
	{
	  RB_Read(Buf, &Tmp);
 8000e38:	f107 030e 	add.w	r3, r7, #14
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f000 f968 	bl	8001114 <RB_Read>
	  if(Tmp == ENDLINE)
 8000e44:	7bbb      	ldrb	r3, [r7, #14]
 8000e46:	2b0a      	cmp	r3, #10
 8000e48:	d105      	bne.n	8000e56 <Parser_TakeLine+0x2c>
	  {
		  Destination[i] = 0;
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	683a      	ldr	r2, [r7, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
 8000e54:	e004      	b.n	8000e60 <Parser_TakeLine+0x36>
	  }
	  else
	  {
		  Destination[i] = Tmp;
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	683a      	ldr	r2, [r7, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	7bba      	ldrb	r2, [r7, #14]
 8000e5e:	701a      	strb	r2, [r3, #0]
	  }
	  i++;
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	3301      	adds	r3, #1
 8000e64:	73fb      	strb	r3, [r7, #15]
	}while(Tmp != ENDLINE);
 8000e66:	7bbb      	ldrb	r3, [r7, #14]
 8000e68:	2b0a      	cmp	r3, #10
 8000e6a:	d1e5      	bne.n	8000e38 <Parser_TakeLine+0xe>

}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <Parser_ParseLED>:

static void Parser_ParseLED(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
	char *ParsePointer = strtok(NULL,",");
 8000e7e:	4918      	ldr	r1, [pc, #96]	; (8000ee0 <Parser_ParseLED+0x68>)
 8000e80:	2000      	movs	r0, #0
 8000e82:	f003 fb81 	bl	8004588 <strtok>
 8000e86:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer)>0)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d024      	beq.n	8000eda <Parser_ParseLED+0x62>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '1')
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b2f      	cmp	r3, #47	; 0x2f
 8000e96:	d903      	bls.n	8000ea0 <Parser_ParseLED+0x28>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b31      	cmp	r3, #49	; 0x31
 8000e9e:	d903      	bls.n	8000ea8 <Parser_ParseLED+0x30>
		{
			UartLog("LED wrong value. Please type 0 or 1! \n\r");
 8000ea0:	4810      	ldr	r0, [pc, #64]	; (8000ee4 <Parser_ParseLED+0x6c>)
 8000ea2:	f000 fb23 	bl	80014ec <UartLog>
			return;
 8000ea6:	e018      	b.n	8000eda <Parser_ParseLED+0x62>
		}

		if(ParsePointer[0] == '1')
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b31      	cmp	r3, #49	; 0x31
 8000eae:	d108      	bne.n	8000ec2 <Parser_ParseLED+0x4a>
		{
			HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2120      	movs	r1, #32
 8000eb4:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <Parser_ParseLED+0x70>)
 8000eb6:	f000 fef9 	bl	8001cac <HAL_GPIO_WritePin>
			UartLog("LED on \n\r");
 8000eba:	480c      	ldr	r0, [pc, #48]	; (8000eec <Parser_ParseLED+0x74>)
 8000ebc:	f000 fb16 	bl	80014ec <UartLog>
 8000ec0:	e00b      	b.n	8000eda <Parser_ParseLED+0x62>
		}
		else if (ParsePointer[0] == '0')
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b30      	cmp	r3, #48	; 0x30
 8000ec8:	d107      	bne.n	8000eda <Parser_ParseLED+0x62>
		{
			HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2120      	movs	r1, #32
 8000ece:	4806      	ldr	r0, [pc, #24]	; (8000ee8 <Parser_ParseLED+0x70>)
 8000ed0:	f000 feec 	bl	8001cac <HAL_GPIO_WritePin>
			UartLog("LED off \n\r");
 8000ed4:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <Parser_ParseLED+0x78>)
 8000ed6:	f000 fb09 	bl	80014ec <UartLog>
		}
	}
}
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	080073f0 	.word	0x080073f0
 8000ee4:	080073f4 	.word	0x080073f4
 8000ee8:	40010800 	.word	0x40010800
 8000eec:	0800741c 	.word	0x0800741c
 8000ef0:	08007428 	.word	0x08007428

08000ef4 <Parser_ParseENV>:

static void Parser_ParseENV(void)
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b08f      	sub	sp, #60	; 0x3c
 8000ef8:	af00      	add	r7, sp, #0
	float EnvParameters[3];
	char Message[32];

	for(uint8_t i = 0; i < 3; i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000f00:	e04d      	b.n	8000f9e <Parser_ParseENV+0xaa>
	{
		char *ParsePointer = strtok(NULL,",");
 8000f02:	493f      	ldr	r1, [pc, #252]	; (8001000 <Parser_ParseENV+0x10c>)
 8000f04:	2000      	movs	r0, #0
 8000f06:	f003 fb3f 	bl	8004588 <strtok>
 8000f0a:	6338      	str	r0, [r7, #48]	; 0x30
		if(strlen(ParsePointer) > 0)
 8000f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d03b      	beq.n	8000f8c <Parser_ParseENV+0x98>
		{
			for(uint8_t j = 0; ParsePointer[j] != 0; j++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000f1a:	e01d      	b.n	8000f58 <Parser_ParseENV+0x64>
			{
				if((ParsePointer[j] < '0' && ParsePointer[j] >'9') && ParsePointer[j] != '.')
 8000f1c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f22:	4413      	add	r3, r2
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b2f      	cmp	r3, #47	; 0x2f
 8000f28:	d811      	bhi.n	8000f4e <Parser_ParseENV+0x5a>
 8000f2a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f30:	4413      	add	r3, r2
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b39      	cmp	r3, #57	; 0x39
 8000f36:	d90a      	bls.n	8000f4e <Parser_ParseENV+0x5a>
 8000f38:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f3e:	4413      	add	r3, r2
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b2e      	cmp	r3, #46	; 0x2e
 8000f44:	d003      	beq.n	8000f4e <Parser_ParseENV+0x5a>
				{
					UartLog("ENV wrong value. Don't use letters dude! \n\r");
 8000f46:	482f      	ldr	r0, [pc, #188]	; (8001004 <Parser_ParseENV+0x110>)
 8000f48:	f000 fad0 	bl	80014ec <UartLog>
					return;
 8000f4c:	e055      	b.n	8000ffa <Parser_ParseENV+0x106>
			for(uint8_t j = 0; ParsePointer[j] != 0; j++)
 8000f4e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f52:	3301      	adds	r3, #1
 8000f54:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000f58:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f5e:	4413      	add	r3, r2
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1da      	bne.n	8000f1c <Parser_ParseENV+0x28>
				}
			}
			EnvParameters[i] = atof(ParsePointer);
 8000f66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f68:	f002 f82c 	bl	8002fc4 <atof>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8000f74:	4610      	mov	r0, r2
 8000f76:	4619      	mov	r1, r3
 8000f78:	f7ff fdb0 	bl	8000adc <__aeabi_d2f>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	00a3      	lsls	r3, r4, #2
 8000f80:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000f84:	440b      	add	r3, r1
 8000f86:	f843 2c14 	str.w	r2, [r3, #-20]
 8000f8a:	e003      	b.n	8000f94 <Parser_ParseENV+0xa0>
		}
		else
		{
			UartLog("ENV too less values. ENV=X,Y,Z \n\r");
 8000f8c:	481e      	ldr	r0, [pc, #120]	; (8001008 <Parser_ParseENV+0x114>)
 8000f8e:	f000 faad 	bl	80014ec <UartLog>
			return;
 8000f92:	e032      	b.n	8000ffa <Parser_ParseENV+0x106>
	for(uint8_t i = 0; i < 3; i++)
 8000f94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f98:	3301      	adds	r3, #1
 8000f9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000f9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d9ad      	bls.n	8000f02 <Parser_ParseENV+0xe>
		}
	}
	sprintf(Message, "Temperature: %.1f \n\r", EnvParameters[0]);
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fa47 	bl	800043c <__aeabi_f2d>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	1d38      	adds	r0, r7, #4
 8000fb4:	4915      	ldr	r1, [pc, #84]	; (800100c <Parser_ParseENV+0x118>)
 8000fb6:	f002 fc9b 	bl	80038f0 <siprintf>
	UartLog(Message);
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 fa95 	bl	80014ec <UartLog>

	sprintf(Message, "Humidity: %.1f \n\r", EnvParameters[1]);
 8000fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fa39 	bl	800043c <__aeabi_f2d>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	1d38      	adds	r0, r7, #4
 8000fd0:	490f      	ldr	r1, [pc, #60]	; (8001010 <Parser_ParseENV+0x11c>)
 8000fd2:	f002 fc8d 	bl	80038f0 <siprintf>
	UartLog(Message);
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 fa87 	bl	80014ec <UartLog>

	sprintf(Message, "Pressure: %.1f \n\r", EnvParameters[2]);
 8000fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fa2b 	bl	800043c <__aeabi_f2d>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	1d38      	adds	r0, r7, #4
 8000fec:	4909      	ldr	r1, [pc, #36]	; (8001014 <Parser_ParseENV+0x120>)
 8000fee:	f002 fc7f 	bl	80038f0 <siprintf>
	UartLog(Message);
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 fa79 	bl	80014ec <UartLog>
}
 8000ffa:	373c      	adds	r7, #60	; 0x3c
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd90      	pop	{r4, r7, pc}
 8001000:	080073f0 	.word	0x080073f0
 8001004:	08007434 	.word	0x08007434
 8001008:	08007460 	.word	0x08007460
 800100c:	08007484 	.word	0x08007484
 8001010:	0800749c 	.word	0x0800749c
 8001014:	080074b0 	.word	0x080074b0

08001018 <Parser_ParseNAME>:

static void Parser_ParseNAME(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b092      	sub	sp, #72	; 0x48
 800101c:	af00      	add	r7, sp, #0
	char *ParsePointer = strtok(NULL,",");
 800101e:	491d      	ldr	r1, [pc, #116]	; (8001094 <Parser_ParseNAME+0x7c>)
 8001020:	2000      	movs	r0, #0
 8001022:	f003 fab1 	bl	8004588 <strtok>
 8001026:	6478      	str	r0, [r7, #68]	; 0x44
	char Message[MAX_NAME_SIZE+32];

	if(strlen(ParsePointer) > 0)
 8001028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d02a      	beq.n	8001086 <Parser_ParseNAME+0x6e>
	{
		if(strcmp("?" , ParsePointer) == 0)
 8001030:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001032:	4819      	ldr	r0, [pc, #100]	; (8001098 <Parser_ParseNAME+0x80>)
 8001034:	f7ff f88c 	bl	8000150 <strcmp>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10a      	bne.n	8001054 <Parser_ParseNAME+0x3c>
		{
			sprintf(Message, "My name is %s \r\n", MyName);
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	4a16      	ldr	r2, [pc, #88]	; (800109c <Parser_ParseNAME+0x84>)
 8001042:	4917      	ldr	r1, [pc, #92]	; (80010a0 <Parser_ParseNAME+0x88>)
 8001044:	4618      	mov	r0, r3
 8001046:	f002 fc53 	bl	80038f0 <siprintf>
			UartLog(Message);
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fa4d 	bl	80014ec <UartLog>
 8001052:	e01b      	b.n	800108c <Parser_ParseNAME+0x74>
		}
		else
		{
			if(strlen(ParsePointer) > MAX_NAME_SIZE)
 8001054:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001056:	f7ff f885 	bl	8000164 <strlen>
 800105a:	4603      	mov	r3, r0
 800105c:	2b20      	cmp	r3, #32
 800105e:	d903      	bls.n	8001068 <Parser_ParseNAME+0x50>
			{
				UartLog("Name should be less than 32 \r\n");
 8001060:	4810      	ldr	r0, [pc, #64]	; (80010a4 <Parser_ParseNAME+0x8c>)
 8001062:	f000 fa43 	bl	80014ec <UartLog>
 8001066:	e011      	b.n	800108c <Parser_ParseNAME+0x74>
				return;
			}
			strcpy(MyName,ParsePointer);
 8001068:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800106a:	480c      	ldr	r0, [pc, #48]	; (800109c <Parser_ParseNAME+0x84>)
 800106c:	f002 fc60 	bl	8003930 <strcpy>
			sprintf(Message, "My new name is %s \n\r", MyName);
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <Parser_ParseNAME+0x84>)
 8001074:	490c      	ldr	r1, [pc, #48]	; (80010a8 <Parser_ParseNAME+0x90>)
 8001076:	4618      	mov	r0, r3
 8001078:	f002 fc3a 	bl	80038f0 <siprintf>
			UartLog(Message);
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	4618      	mov	r0, r3
 8001080:	f000 fa34 	bl	80014ec <UartLog>
 8001084:	e002      	b.n	800108c <Parser_ParseNAME+0x74>
		}
	}
	else
	{
		UartLog("Name can't be empty \r\n");
 8001086:	4809      	ldr	r0, [pc, #36]	; (80010ac <Parser_ParseNAME+0x94>)
 8001088:	f000 fa30 	bl	80014ec <UartLog>
	}

}
 800108c:	3748      	adds	r7, #72	; 0x48
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	080073f0 	.word	0x080073f0
 8001098:	080074c4 	.word	0x080074c4
 800109c:	20000000 	.word	0x20000000
 80010a0:	080074c8 	.word	0x080074c8
 80010a4:	080074dc 	.word	0x080074dc
 80010a8:	080074fc 	.word	0x080074fc
 80010ac:	08007514 	.word	0x08007514

080010b0 <Parser_Parse>:

void Parser_Parse(uint8_t *DataToParse)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	char *ParsePointer = strtok((char*)DataToParse,"=");
 80010b8:	4912      	ldr	r1, [pc, #72]	; (8001104 <Parser_Parse+0x54>)
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f003 fa64 	bl	8004588 <strtok>
 80010c0:	60f8      	str	r0, [r7, #12]

	if(strcmp("LED", ParsePointer) == 0)
 80010c2:	68f9      	ldr	r1, [r7, #12]
 80010c4:	4810      	ldr	r0, [pc, #64]	; (8001108 <Parser_Parse+0x58>)
 80010c6:	f7ff f843 	bl	8000150 <strcmp>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <Parser_Parse+0x26>
	{
		Parser_ParseLED();
 80010d0:	f7ff fed2 	bl	8000e78 <Parser_ParseLED>
	}
	else if(strcmp("NAME", ParsePointer) == 0)
	{
		Parser_ParseNAME();
	}
}
 80010d4:	e012      	b.n	80010fc <Parser_Parse+0x4c>
	else if(strcmp("ENV", ParsePointer) == 0)
 80010d6:	68f9      	ldr	r1, [r7, #12]
 80010d8:	480c      	ldr	r0, [pc, #48]	; (800110c <Parser_Parse+0x5c>)
 80010da:	f7ff f839 	bl	8000150 <strcmp>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <Parser_Parse+0x3a>
		Parser_ParseENV();
 80010e4:	f7ff ff06 	bl	8000ef4 <Parser_ParseENV>
}
 80010e8:	e008      	b.n	80010fc <Parser_Parse+0x4c>
	else if(strcmp("NAME", ParsePointer) == 0)
 80010ea:	68f9      	ldr	r1, [r7, #12]
 80010ec:	4808      	ldr	r0, [pc, #32]	; (8001110 <Parser_Parse+0x60>)
 80010ee:	f7ff f82f 	bl	8000150 <strcmp>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <Parser_Parse+0x4c>
		Parser_ParseNAME();
 80010f8:	f7ff ff8e 	bl	8001018 <Parser_ParseNAME>
}
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	0800752c 	.word	0x0800752c
 8001108:	08007530 	.word	0x08007530
 800110c:	08007534 	.word	0x08007534
 8001110:	08007538 	.word	0x08007538

08001114 <RB_Read>:
 */
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer_t *Buf, uint8_t *Value)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
	if(Buf->Head == Buf->Tail)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	881a      	ldrh	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	885b      	ldrh	r3, [r3, #2]
 8001126:	429a      	cmp	r2, r3
 8001128:	d101      	bne.n	800112e <RB_Read+0x1a>
	{
		return RB_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e015      	b.n	800115a <RB_Read+0x46>
	}

	*Value = Buf->Buffer[Buf->Tail];
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	885b      	ldrh	r3, [r3, #2]
 8001132:	461a      	mov	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4413      	add	r3, r2
 8001138:	791a      	ldrb	r2, [r3, #4]
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	701a      	strb	r2, [r3, #0]

	Buf->Tail = (Buf->Tail + 1) % RING_BUFFER_SIZE;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	885b      	ldrh	r3, [r3, #2]
 8001142:	3301      	adds	r3, #1
 8001144:	425a      	negs	r2, r3
 8001146:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800114a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800114e:	bf58      	it	pl
 8001150:	4253      	negpl	r3, r2
 8001152:	b29a      	uxth	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	805a      	strh	r2, [r3, #2]

	return RB_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <RB_Write>:

RB_Status RB_Write(RingBuffer_t *Buf, uint8_t Value)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	70fb      	strb	r3, [r7, #3]
	uint8_t HeadTmp = (Buf->Head + 1) % RING_BUFFER_SIZE;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	3301      	adds	r3, #1
 8001176:	425a      	negs	r2, r3
 8001178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800117c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001180:	bf58      	it	pl
 8001182:	4253      	negpl	r3, r2
 8001184:	73fb      	strb	r3, [r7, #15]

	if(HeadTmp == Buf->Tail)
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	b29a      	uxth	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	885b      	ldrh	r3, [r3, #2]
 800118e:	429a      	cmp	r2, r3
 8001190:	d101      	bne.n	8001196 <RB_Write+0x32>
	{
		return RB_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e00b      	b.n	80011ae <RB_Write+0x4a>
	}

	Buf->Buffer[Buf->Head] = Value;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	78fa      	ldrb	r2, [r7, #3]
 80011a2:	711a      	strb	r2, [r3, #4]

	Buf->Head = HeadTmp;
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	801a      	strh	r2, [r3, #0]


	return RB_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr

080011b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <HAL_MspInit+0x5c>)
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	4a14      	ldr	r2, [pc, #80]	; (8001214 <HAL_MspInit+0x5c>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6193      	str	r3, [r2, #24]
 80011ca:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_MspInit+0x5c>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <HAL_MspInit+0x5c>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <HAL_MspInit+0x5c>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	61d3      	str	r3, [r2, #28]
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <HAL_MspInit+0x5c>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_MspInit+0x60>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	4a04      	ldr	r2, [pc, #16]	; (8001218 <HAL_MspInit+0x60>)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120a:	bf00      	nop
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	40021000 	.word	0x40021000
 8001218:	40010000 	.word	0x40010000

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <NMI_Handler+0x4>

08001222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <HardFault_Handler+0x4>

08001228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <MemManage_Handler+0x4>

0800122e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <BusFault_Handler+0x4>

08001234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <UsageFault_Handler+0x4>

0800123a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr

08001246 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr

08001252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr

0800125e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001262:	f000 f9c5 	bl	80015f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <USART2_IRQHandler+0x10>)
 8001272:	f001 fa7f 	bl	8002774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000290 	.word	0x20000290

08001280 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001284:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001288:	f000 fd28 	bl	8001cdc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}

08001290 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
	return 1;
 8001294:	2301      	movs	r3, #1
}
 8001296:	4618      	mov	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr

0800129e <_kill>:

int _kill(int pid, int sig)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012a8:	f001 fe90 	bl	8002fcc <__errno>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2216      	movs	r2, #22
 80012b0:	601a      	str	r2, [r3, #0]
	return -1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <_exit>:

void _exit (int status)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012c6:	f04f 31ff 	mov.w	r1, #4294967295
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffe7 	bl	800129e <_kill>
	while (1) {}		/* Make sure we hang here */
 80012d0:	e7fe      	b.n	80012d0 <_exit+0x12>

080012d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b086      	sub	sp, #24
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	60f8      	str	r0, [r7, #12]
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	e00a      	b.n	80012fa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012e4:	f3af 8000 	nop.w
 80012e8:	4601      	mov	r1, r0
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	60ba      	str	r2, [r7, #8]
 80012f0:	b2ca      	uxtb	r2, r1
 80012f2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	3301      	adds	r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	429a      	cmp	r2, r3
 8001300:	dbf0      	blt.n	80012e4 <_read+0x12>
	}

return len;
 8001302:	687b      	ldr	r3, [r7, #4]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	e009      	b.n	8001332 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	60ba      	str	r2, [r7, #8]
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	3301      	adds	r3, #1
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	429a      	cmp	r2, r3
 8001338:	dbf1      	blt.n	800131e <_write+0x12>
	}
	return len;
 800133a:	687b      	ldr	r3, [r7, #4]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <_close>:

int _close(int file)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	return -1;
 800134c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr

0800135a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800136a:	605a      	str	r2, [r3, #4]
	return 0;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <_isatty>:

int _isatty(int file)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	return 1;
 8001380:	2301      	movs	r3, #1
}
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
	return 0;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013ac:	4a14      	ldr	r2, [pc, #80]	; (8001400 <_sbrk+0x5c>)
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <_sbrk+0x60>)
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d102      	bne.n	80013c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <_sbrk+0x64>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	; (800140c <_sbrk+0x68>)
 80013c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <_sbrk+0x64>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d207      	bcs.n	80013e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d4:	f001 fdfa 	bl	8002fcc <__errno>
 80013d8:	4603      	mov	r3, r0
 80013da:	220c      	movs	r2, #12
 80013dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
 80013e2:	e009      	b.n	80013f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <_sbrk+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <_sbrk+0x64>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	4a05      	ldr	r2, [pc, #20]	; (8001408 <_sbrk+0x64>)
 80013f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013f6:	68fb      	ldr	r3, [r7, #12]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20005000 	.word	0x20005000
 8001404:	00000400 	.word	0x00000400
 8001408:	2000021c 	.word	0x2000021c
 800140c:	200002e8 	.word	0x200002e8

08001410 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_USART2_UART_Init+0x4c>)
 8001422:	4a12      	ldr	r2, [pc, #72]	; (800146c <MX_USART2_UART_Init+0x50>)
 8001424:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <MX_USART2_UART_Init+0x4c>)
 8001428:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800142c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <MX_USART2_UART_Init+0x4c>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <MX_USART2_UART_Init+0x4c>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <MX_USART2_UART_Init+0x4c>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001440:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_USART2_UART_Init+0x4c>)
 8001442:	220c      	movs	r2, #12
 8001444:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001446:	4b08      	ldr	r3, [pc, #32]	; (8001468 <MX_USART2_UART_Init+0x4c>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MX_USART2_UART_Init+0x4c>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_USART2_UART_Init+0x4c>)
 8001454:	f001 f87e 	bl	8002554 <HAL_UART_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800145e:	f7ff fcdf 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000290 	.word	0x20000290
 800146c:	40004400 	.word	0x40004400

08001470 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a15      	ldr	r2, [pc, #84]	; (80014e0 <HAL_UART_MspInit+0x70>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d123      	bne.n	80014d8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <HAL_UART_MspInit+0x74>)
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	4a13      	ldr	r2, [pc, #76]	; (80014e4 <HAL_UART_MspInit+0x74>)
 8001496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800149a:	61d3      	str	r3, [r2, #28]
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <HAL_UART_MspInit+0x74>)
 800149e:	69db      	ldr	r3, [r3, #28]
 80014a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a8:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <HAL_UART_MspInit+0x74>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	4a0d      	ldr	r2, [pc, #52]	; (80014e4 <HAL_UART_MspInit+0x74>)
 80014ae:	f043 0304 	orr.w	r3, r3, #4
 80014b2:	6193      	str	r3, [r2, #24]
 80014b4:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_UART_MspInit+0x74>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014c0:	230c      	movs	r3, #12
 80014c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2302      	movs	r3, #2
 80014ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	4619      	mov	r1, r3
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <HAL_UART_MspInit+0x78>)
 80014d4:	f000 fa66 	bl	80019a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014d8:	bf00      	nop
 80014da:	3720      	adds	r7, #32
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40004400 	.word	0x40004400
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010800 	.word	0x40010800

080014ec <UartLog>:
 */
#include "main.h"
#include "string.h"
#include "usart.h"
void UartLog(char* Message)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)Message, strlen(Message), 1000);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7fe fe35 	bl	8000164 <strlen>
 80014fa:	4603      	mov	r3, r0
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	4803      	ldr	r0, [pc, #12]	; (8001514 <UartLog+0x28>)
 8001506:	f001 f872 	bl	80025ee <HAL_UART_Transmit>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000290 	.word	0x20000290

08001518 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001518:	480c      	ldr	r0, [pc, #48]	; (800154c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800151a:	490d      	ldr	r1, [pc, #52]	; (8001550 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800151c:	4a0d      	ldr	r2, [pc, #52]	; (8001554 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001520:	e002      	b.n	8001528 <LoopCopyDataInit>

08001522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001526:	3304      	adds	r3, #4

08001528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800152c:	d3f9      	bcc.n	8001522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152e:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001530:	4c0a      	ldr	r4, [pc, #40]	; (800155c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001534:	e001      	b.n	800153a <LoopFillZerobss>

08001536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001538:	3204      	adds	r2, #4

0800153a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800153c:	d3fb      	bcc.n	8001536 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800153e:	f7ff ff67 	bl	8001410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001542:	f001 fd49 	bl	8002fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001546:	f7ff fbbf 	bl	8000cc8 <main>
  bx lr
 800154a:	4770      	bx	lr
  ldr r0, =_sdata
 800154c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001550:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8001554:	08007a78 	.word	0x08007a78
  ldr r2, =_sbss
 8001558:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 800155c:	200002e8 	.word	0x200002e8

08001560 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001560:	e7fe      	b.n	8001560 <ADC1_2_IRQHandler>
	...

08001564 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <HAL_Init+0x28>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a07      	ldr	r2, [pc, #28]	; (800158c <HAL_Init+0x28>)
 800156e:	f043 0310 	orr.w	r3, r3, #16
 8001572:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001574:	2003      	movs	r0, #3
 8001576:	f000 f923 	bl	80017c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800157a:	2000      	movs	r0, #0
 800157c:	f000 f808 	bl	8001590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001580:	f7ff fe1a 	bl	80011b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40022000 	.word	0x40022000

08001590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_InitTick+0x54>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_InitTick+0x58>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f93b 	bl	800182a <HAL_SYSTICK_Config>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00e      	b.n	80015dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b0f      	cmp	r3, #15
 80015c2:	d80a      	bhi.n	80015da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c4:	2200      	movs	r2, #0
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f000 f903 	bl	80017d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d0:	4a06      	ldr	r2, [pc, #24]	; (80015ec <HAL_InitTick+0x5c>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e000      	b.n	80015dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000020 	.word	0x20000020
 80015e8:	20000028 	.word	0x20000028
 80015ec:	20000024 	.word	0x20000024

080015f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <HAL_IncTick+0x1c>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b05      	ldr	r3, [pc, #20]	; (8001610 <HAL_IncTick+0x20>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	4a03      	ldr	r2, [pc, #12]	; (8001610 <HAL_IncTick+0x20>)
 8001602:	6013      	str	r3, [r2, #0]
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	20000028 	.word	0x20000028
 8001610:	200002d4 	.word	0x200002d4

08001614 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return uwTick;
 8001618:	4b02      	ldr	r3, [pc, #8]	; (8001624 <HAL_GetTick+0x10>)
 800161a:	681b      	ldr	r3, [r3, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	200002d4 	.word	0x200002d4

08001628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <__NVIC_SetPriorityGrouping+0x44>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001644:	4013      	ands	r3, r2
 8001646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800165a:	4a04      	ldr	r2, [pc, #16]	; (800166c <__NVIC_SetPriorityGrouping+0x44>)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	60d3      	str	r3, [r2, #12]
}
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001674:	4b04      	ldr	r3, [pc, #16]	; (8001688 <__NVIC_GetPriorityGrouping+0x18>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	0a1b      	lsrs	r3, r3, #8
 800167a:	f003 0307 	and.w	r3, r3, #7
}
 800167e:	4618      	mov	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	2b00      	cmp	r3, #0
 800169c:	db0b      	blt.n	80016b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	f003 021f 	and.w	r2, r3, #31
 80016a4:	4906      	ldr	r1, [pc, #24]	; (80016c0 <__NVIC_EnableIRQ+0x34>)
 80016a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016aa:	095b      	lsrs	r3, r3, #5
 80016ac:	2001      	movs	r0, #1
 80016ae:	fa00 f202 	lsl.w	r2, r0, r2
 80016b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	e000e100 	.word	0xe000e100

080016c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	6039      	str	r1, [r7, #0]
 80016ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	db0a      	blt.n	80016ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	490c      	ldr	r1, [pc, #48]	; (8001710 <__NVIC_SetPriority+0x4c>)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	0112      	lsls	r2, r2, #4
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	440b      	add	r3, r1
 80016e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ec:	e00a      	b.n	8001704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4908      	ldr	r1, [pc, #32]	; (8001714 <__NVIC_SetPriority+0x50>)
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	3b04      	subs	r3, #4
 80016fc:	0112      	lsls	r2, r2, #4
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	440b      	add	r3, r1
 8001702:	761a      	strb	r2, [r3, #24]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000e100 	.word	0xe000e100
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	; 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f1c3 0307 	rsb	r3, r3, #7
 8001732:	2b04      	cmp	r3, #4
 8001734:	bf28      	it	cs
 8001736:	2304      	movcs	r3, #4
 8001738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3304      	adds	r3, #4
 800173e:	2b06      	cmp	r3, #6
 8001740:	d902      	bls.n	8001748 <NVIC_EncodePriority+0x30>
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3b03      	subs	r3, #3
 8001746:	e000      	b.n	800174a <NVIC_EncodePriority+0x32>
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	f04f 32ff 	mov.w	r2, #4294967295
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43da      	mvns	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	401a      	ands	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001760:	f04f 31ff 	mov.w	r1, #4294967295
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	fa01 f303 	lsl.w	r3, r1, r3
 800176a:	43d9      	mvns	r1, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	4313      	orrs	r3, r2
         );
}
 8001772:	4618      	mov	r0, r3
 8001774:	3724      	adds	r7, #36	; 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800178c:	d301      	bcc.n	8001792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178e:	2301      	movs	r3, #1
 8001790:	e00f      	b.n	80017b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001792:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <SysTick_Config+0x40>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179a:	210f      	movs	r1, #15
 800179c:	f04f 30ff 	mov.w	r0, #4294967295
 80017a0:	f7ff ff90 	bl	80016c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <SysTick_Config+0x40>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017aa:	4b04      	ldr	r3, [pc, #16]	; (80017bc <SysTick_Config+0x40>)
 80017ac:	2207      	movs	r2, #7
 80017ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	e000e010 	.word	0xe000e010

080017c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ff2d 	bl	8001628 <__NVIC_SetPriorityGrouping>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4603      	mov	r3, r0
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e8:	f7ff ff42 	bl	8001670 <__NVIC_GetPriorityGrouping>
 80017ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	6978      	ldr	r0, [r7, #20]
 80017f4:	f7ff ff90 	bl	8001718 <NVIC_EncodePriority>
 80017f8:	4602      	mov	r2, r0
 80017fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff5f 	bl	80016c4 <__NVIC_SetPriority>
}
 8001806:	bf00      	nop
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff35 	bl	800168c <__NVIC_EnableIRQ>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ffa2 	bl	800177c <SysTick_Config>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001842:	b480      	push	{r7}
 8001844:	b085      	sub	sp, #20
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001854:	2b02      	cmp	r3, #2
 8001856:	d008      	beq.n	800186a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2204      	movs	r2, #4
 800185c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e020      	b.n	80018ac <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 020e 	bic.w	r2, r2, #14
 8001878:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 0201 	bic.w	r2, r2, #1
 8001888:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001892:	2101      	movs	r1, #1
 8001894:	fa01 f202 	lsl.w	r2, r1, r2
 8001898:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
	...

080018b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d005      	beq.n	80018da <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2204      	movs	r2, #4
 80018d2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
 80018d8:	e051      	b.n	800197e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 020e 	bic.w	r2, r2, #14
 80018e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 0201 	bic.w	r2, r2, #1
 80018f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a22      	ldr	r2, [pc, #136]	; (8001988 <HAL_DMA_Abort_IT+0xd0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d029      	beq.n	8001958 <HAL_DMA_Abort_IT+0xa0>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a20      	ldr	r2, [pc, #128]	; (800198c <HAL_DMA_Abort_IT+0xd4>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d022      	beq.n	8001954 <HAL_DMA_Abort_IT+0x9c>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a1f      	ldr	r2, [pc, #124]	; (8001990 <HAL_DMA_Abort_IT+0xd8>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d01a      	beq.n	800194e <HAL_DMA_Abort_IT+0x96>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a1d      	ldr	r2, [pc, #116]	; (8001994 <HAL_DMA_Abort_IT+0xdc>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d012      	beq.n	8001948 <HAL_DMA_Abort_IT+0x90>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a1c      	ldr	r2, [pc, #112]	; (8001998 <HAL_DMA_Abort_IT+0xe0>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d00a      	beq.n	8001942 <HAL_DMA_Abort_IT+0x8a>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a1a      	ldr	r2, [pc, #104]	; (800199c <HAL_DMA_Abort_IT+0xe4>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d102      	bne.n	800193c <HAL_DMA_Abort_IT+0x84>
 8001936:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800193a:	e00e      	b.n	800195a <HAL_DMA_Abort_IT+0xa2>
 800193c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001940:	e00b      	b.n	800195a <HAL_DMA_Abort_IT+0xa2>
 8001942:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001946:	e008      	b.n	800195a <HAL_DMA_Abort_IT+0xa2>
 8001948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800194c:	e005      	b.n	800195a <HAL_DMA_Abort_IT+0xa2>
 800194e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001952:	e002      	b.n	800195a <HAL_DMA_Abort_IT+0xa2>
 8001954:	2310      	movs	r3, #16
 8001956:	e000      	b.n	800195a <HAL_DMA_Abort_IT+0xa2>
 8001958:	2301      	movs	r3, #1
 800195a:	4a11      	ldr	r2, [pc, #68]	; (80019a0 <HAL_DMA_Abort_IT+0xe8>)
 800195c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	4798      	blx	r3
    } 
  }
  return status;
 800197e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40020008 	.word	0x40020008
 800198c:	4002001c 	.word	0x4002001c
 8001990:	40020030 	.word	0x40020030
 8001994:	40020044 	.word	0x40020044
 8001998:	40020058 	.word	0x40020058
 800199c:	4002006c 	.word	0x4002006c
 80019a0:	40020000 	.word	0x40020000

080019a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b08b      	sub	sp, #44	; 0x2c
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ae:	2300      	movs	r3, #0
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019b2:	2300      	movs	r3, #0
 80019b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b6:	e169      	b.n	8001c8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019b8:	2201      	movs	r2, #1
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	f040 8158 	bne.w	8001c86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	4a9a      	ldr	r2, [pc, #616]	; (8001c44 <HAL_GPIO_Init+0x2a0>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d05e      	beq.n	8001a9e <HAL_GPIO_Init+0xfa>
 80019e0:	4a98      	ldr	r2, [pc, #608]	; (8001c44 <HAL_GPIO_Init+0x2a0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d875      	bhi.n	8001ad2 <HAL_GPIO_Init+0x12e>
 80019e6:	4a98      	ldr	r2, [pc, #608]	; (8001c48 <HAL_GPIO_Init+0x2a4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d058      	beq.n	8001a9e <HAL_GPIO_Init+0xfa>
 80019ec:	4a96      	ldr	r2, [pc, #600]	; (8001c48 <HAL_GPIO_Init+0x2a4>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d86f      	bhi.n	8001ad2 <HAL_GPIO_Init+0x12e>
 80019f2:	4a96      	ldr	r2, [pc, #600]	; (8001c4c <HAL_GPIO_Init+0x2a8>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d052      	beq.n	8001a9e <HAL_GPIO_Init+0xfa>
 80019f8:	4a94      	ldr	r2, [pc, #592]	; (8001c4c <HAL_GPIO_Init+0x2a8>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d869      	bhi.n	8001ad2 <HAL_GPIO_Init+0x12e>
 80019fe:	4a94      	ldr	r2, [pc, #592]	; (8001c50 <HAL_GPIO_Init+0x2ac>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d04c      	beq.n	8001a9e <HAL_GPIO_Init+0xfa>
 8001a04:	4a92      	ldr	r2, [pc, #584]	; (8001c50 <HAL_GPIO_Init+0x2ac>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d863      	bhi.n	8001ad2 <HAL_GPIO_Init+0x12e>
 8001a0a:	4a92      	ldr	r2, [pc, #584]	; (8001c54 <HAL_GPIO_Init+0x2b0>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d046      	beq.n	8001a9e <HAL_GPIO_Init+0xfa>
 8001a10:	4a90      	ldr	r2, [pc, #576]	; (8001c54 <HAL_GPIO_Init+0x2b0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d85d      	bhi.n	8001ad2 <HAL_GPIO_Init+0x12e>
 8001a16:	2b12      	cmp	r3, #18
 8001a18:	d82a      	bhi.n	8001a70 <HAL_GPIO_Init+0xcc>
 8001a1a:	2b12      	cmp	r3, #18
 8001a1c:	d859      	bhi.n	8001ad2 <HAL_GPIO_Init+0x12e>
 8001a1e:	a201      	add	r2, pc, #4	; (adr r2, 8001a24 <HAL_GPIO_Init+0x80>)
 8001a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a24:	08001a9f 	.word	0x08001a9f
 8001a28:	08001a79 	.word	0x08001a79
 8001a2c:	08001a8b 	.word	0x08001a8b
 8001a30:	08001acd 	.word	0x08001acd
 8001a34:	08001ad3 	.word	0x08001ad3
 8001a38:	08001ad3 	.word	0x08001ad3
 8001a3c:	08001ad3 	.word	0x08001ad3
 8001a40:	08001ad3 	.word	0x08001ad3
 8001a44:	08001ad3 	.word	0x08001ad3
 8001a48:	08001ad3 	.word	0x08001ad3
 8001a4c:	08001ad3 	.word	0x08001ad3
 8001a50:	08001ad3 	.word	0x08001ad3
 8001a54:	08001ad3 	.word	0x08001ad3
 8001a58:	08001ad3 	.word	0x08001ad3
 8001a5c:	08001ad3 	.word	0x08001ad3
 8001a60:	08001ad3 	.word	0x08001ad3
 8001a64:	08001ad3 	.word	0x08001ad3
 8001a68:	08001a81 	.word	0x08001a81
 8001a6c:	08001a95 	.word	0x08001a95
 8001a70:	4a79      	ldr	r2, [pc, #484]	; (8001c58 <HAL_GPIO_Init+0x2b4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d013      	beq.n	8001a9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a76:	e02c      	b.n	8001ad2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	623b      	str	r3, [r7, #32]
          break;
 8001a7e:	e029      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	3304      	adds	r3, #4
 8001a86:	623b      	str	r3, [r7, #32]
          break;
 8001a88:	e024      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	3308      	adds	r3, #8
 8001a90:	623b      	str	r3, [r7, #32]
          break;
 8001a92:	e01f      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	330c      	adds	r3, #12
 8001a9a:	623b      	str	r3, [r7, #32]
          break;
 8001a9c:	e01a      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d102      	bne.n	8001aac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001aa6:	2304      	movs	r3, #4
 8001aa8:	623b      	str	r3, [r7, #32]
          break;
 8001aaa:	e013      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d105      	bne.n	8001ac0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ab4:	2308      	movs	r3, #8
 8001ab6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69fa      	ldr	r2, [r7, #28]
 8001abc:	611a      	str	r2, [r3, #16]
          break;
 8001abe:	e009      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ac0:	2308      	movs	r3, #8
 8001ac2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69fa      	ldr	r2, [r7, #28]
 8001ac8:	615a      	str	r2, [r3, #20]
          break;
 8001aca:	e003      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
          break;
 8001ad0:	e000      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          break;
 8001ad2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	2bff      	cmp	r3, #255	; 0xff
 8001ad8:	d801      	bhi.n	8001ade <HAL_GPIO_Init+0x13a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	e001      	b.n	8001ae2 <HAL_GPIO_Init+0x13e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	2bff      	cmp	r3, #255	; 0xff
 8001ae8:	d802      	bhi.n	8001af0 <HAL_GPIO_Init+0x14c>
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	e002      	b.n	8001af6 <HAL_GPIO_Init+0x152>
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	3b08      	subs	r3, #8
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	210f      	movs	r1, #15
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	fa01 f303 	lsl.w	r3, r1, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	401a      	ands	r2, r3
 8001b08:	6a39      	ldr	r1, [r7, #32]
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b10:	431a      	orrs	r2, r3
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 80b1 	beq.w	8001c86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b24:	4b4d      	ldr	r3, [pc, #308]	; (8001c5c <HAL_GPIO_Init+0x2b8>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	4a4c      	ldr	r2, [pc, #304]	; (8001c5c <HAL_GPIO_Init+0x2b8>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6193      	str	r3, [r2, #24]
 8001b30:	4b4a      	ldr	r3, [pc, #296]	; (8001c5c <HAL_GPIO_Init+0x2b8>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b3c:	4a48      	ldr	r2, [pc, #288]	; (8001c60 <HAL_GPIO_Init+0x2bc>)
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	089b      	lsrs	r3, r3, #2
 8001b42:	3302      	adds	r3, #2
 8001b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	220f      	movs	r2, #15
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a40      	ldr	r2, [pc, #256]	; (8001c64 <HAL_GPIO_Init+0x2c0>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d013      	beq.n	8001b90 <HAL_GPIO_Init+0x1ec>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a3f      	ldr	r2, [pc, #252]	; (8001c68 <HAL_GPIO_Init+0x2c4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d00d      	beq.n	8001b8c <HAL_GPIO_Init+0x1e8>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a3e      	ldr	r2, [pc, #248]	; (8001c6c <HAL_GPIO_Init+0x2c8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d007      	beq.n	8001b88 <HAL_GPIO_Init+0x1e4>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a3d      	ldr	r2, [pc, #244]	; (8001c70 <HAL_GPIO_Init+0x2cc>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d101      	bne.n	8001b84 <HAL_GPIO_Init+0x1e0>
 8001b80:	2303      	movs	r3, #3
 8001b82:	e006      	b.n	8001b92 <HAL_GPIO_Init+0x1ee>
 8001b84:	2304      	movs	r3, #4
 8001b86:	e004      	b.n	8001b92 <HAL_GPIO_Init+0x1ee>
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e002      	b.n	8001b92 <HAL_GPIO_Init+0x1ee>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <HAL_GPIO_Init+0x1ee>
 8001b90:	2300      	movs	r3, #0
 8001b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b94:	f002 0203 	and.w	r2, r2, #3
 8001b98:	0092      	lsls	r2, r2, #2
 8001b9a:	4093      	lsls	r3, r2
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ba2:	492f      	ldr	r1, [pc, #188]	; (8001c60 <HAL_GPIO_Init+0x2bc>)
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	3302      	adds	r3, #2
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d006      	beq.n	8001bca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bbc:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	492c      	ldr	r1, [pc, #176]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	600b      	str	r3, [r1, #0]
 8001bc8:	e006      	b.n	8001bd8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bca:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	4928      	ldr	r1, [pc, #160]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d006      	beq.n	8001bf2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001be4:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	4922      	ldr	r1, [pc, #136]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	604b      	str	r3, [r1, #4]
 8001bf0:	e006      	b.n	8001c00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bf2:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	491e      	ldr	r1, [pc, #120]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d006      	beq.n	8001c1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c0c:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	4918      	ldr	r1, [pc, #96]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	608b      	str	r3, [r1, #8]
 8001c18:	e006      	b.n	8001c28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c1a:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	4914      	ldr	r1, [pc, #80]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d021      	beq.n	8001c78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	490e      	ldr	r1, [pc, #56]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	60cb      	str	r3, [r1, #12]
 8001c40:	e021      	b.n	8001c86 <HAL_GPIO_Init+0x2e2>
 8001c42:	bf00      	nop
 8001c44:	10320000 	.word	0x10320000
 8001c48:	10310000 	.word	0x10310000
 8001c4c:	10220000 	.word	0x10220000
 8001c50:	10210000 	.word	0x10210000
 8001c54:	10120000 	.word	0x10120000
 8001c58:	10110000 	.word	0x10110000
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40010000 	.word	0x40010000
 8001c64:	40010800 	.word	0x40010800
 8001c68:	40010c00 	.word	0x40010c00
 8001c6c:	40011000 	.word	0x40011000
 8001c70:	40011400 	.word	0x40011400
 8001c74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_GPIO_Init+0x304>)
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	4909      	ldr	r1, [pc, #36]	; (8001ca8 <HAL_GPIO_Init+0x304>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	3301      	adds	r3, #1
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	fa22 f303 	lsr.w	r3, r2, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f47f ae8e 	bne.w	80019b8 <HAL_GPIO_Init+0x14>
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	372c      	adds	r7, #44	; 0x2c
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	40010400 	.word	0x40010400

08001cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cbc:	787b      	ldrb	r3, [r7, #1]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cc2:	887a      	ldrh	r2, [r7, #2]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cc8:	e003      	b.n	8001cd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cca:	887b      	ldrh	r3, [r7, #2]
 8001ccc:	041a      	lsls	r2, r3, #16
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	611a      	str	r2, [r3, #16]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ce8:	695a      	ldr	r2, [r3, #20]
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d006      	beq.n	8001d00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cf2:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cf4:	88fb      	ldrh	r3, [r7, #6]
 8001cf6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 f806 	bl	8001d0c <HAL_GPIO_EXTI_Callback>
  }
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40010400 	.word	0x40010400

08001d0c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e26c      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 8087 	beq.w	8001e4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d40:	4b92      	ldr	r3, [pc, #584]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 030c 	and.w	r3, r3, #12
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d00c      	beq.n	8001d66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d4c:	4b8f      	ldr	r3, [pc, #572]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 030c 	and.w	r3, r3, #12
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d112      	bne.n	8001d7e <HAL_RCC_OscConfig+0x5e>
 8001d58:	4b8c      	ldr	r3, [pc, #560]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d64:	d10b      	bne.n	8001d7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d66:	4b89      	ldr	r3, [pc, #548]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d06c      	beq.n	8001e4c <HAL_RCC_OscConfig+0x12c>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d168      	bne.n	8001e4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e246      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d86:	d106      	bne.n	8001d96 <HAL_RCC_OscConfig+0x76>
 8001d88:	4b80      	ldr	r3, [pc, #512]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a7f      	ldr	r2, [pc, #508]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	e02e      	b.n	8001df4 <HAL_RCC_OscConfig+0xd4>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x98>
 8001d9e:	4b7b      	ldr	r3, [pc, #492]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a7a      	ldr	r2, [pc, #488]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	4b78      	ldr	r3, [pc, #480]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a77      	ldr	r2, [pc, #476]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001db0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	e01d      	b.n	8001df4 <HAL_RCC_OscConfig+0xd4>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dc0:	d10c      	bne.n	8001ddc <HAL_RCC_OscConfig+0xbc>
 8001dc2:	4b72      	ldr	r3, [pc, #456]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a71      	ldr	r2, [pc, #452]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	4b6f      	ldr	r3, [pc, #444]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a6e      	ldr	r2, [pc, #440]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	e00b      	b.n	8001df4 <HAL_RCC_OscConfig+0xd4>
 8001ddc:	4b6b      	ldr	r3, [pc, #428]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a6a      	ldr	r2, [pc, #424]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	4b68      	ldr	r3, [pc, #416]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a67      	ldr	r2, [pc, #412]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001df2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d013      	beq.n	8001e24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fc0a 	bl	8001614 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e04:	f7ff fc06 	bl	8001614 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b64      	cmp	r3, #100	; 0x64
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e1fa      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e16:	4b5d      	ldr	r3, [pc, #372]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0xe4>
 8001e22:	e014      	b.n	8001e4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7ff fbf6 	bl	8001614 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e2c:	f7ff fbf2 	bl	8001614 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b64      	cmp	r3, #100	; 0x64
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e1e6      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3e:	4b53      	ldr	r3, [pc, #332]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x10c>
 8001e4a:	e000      	b.n	8001e4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d063      	beq.n	8001f22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e5a:	4b4c      	ldr	r3, [pc, #304]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00b      	beq.n	8001e7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e66:	4b49      	ldr	r3, [pc, #292]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d11c      	bne.n	8001eac <HAL_RCC_OscConfig+0x18c>
 8001e72:	4b46      	ldr	r3, [pc, #280]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d116      	bne.n	8001eac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7e:	4b43      	ldr	r3, [pc, #268]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d005      	beq.n	8001e96 <HAL_RCC_OscConfig+0x176>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d001      	beq.n	8001e96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e1ba      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e96:	4b3d      	ldr	r3, [pc, #244]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4939      	ldr	r1, [pc, #228]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eaa:	e03a      	b.n	8001f22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d020      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb4:	4b36      	ldr	r3, [pc, #216]	; (8001f90 <HAL_RCC_OscConfig+0x270>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eba:	f7ff fbab 	bl	8001614 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec2:	f7ff fba7 	bl	8001614 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e19b      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed4:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee0:	4b2a      	ldr	r3, [pc, #168]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4927      	ldr	r1, [pc, #156]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	600b      	str	r3, [r1, #0]
 8001ef4:	e015      	b.n	8001f22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ef6:	4b26      	ldr	r3, [pc, #152]	; (8001f90 <HAL_RCC_OscConfig+0x270>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff fb8a 	bl	8001614 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f04:	f7ff fb86 	bl	8001614 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e17a      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f16:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d03a      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d019      	beq.n	8001f6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f36:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <HAL_RCC_OscConfig+0x274>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3c:	f7ff fb6a 	bl	8001614 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f44:	f7ff fb66 	bl	8001614 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e15a      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f56:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f62:	2001      	movs	r0, #1
 8001f64:	f000 fad8 	bl	8002518 <RCC_Delay>
 8001f68:	e01c      	b.n	8001fa4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <HAL_RCC_OscConfig+0x274>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f70:	f7ff fb50 	bl	8001614 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f76:	e00f      	b.n	8001f98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f78:	f7ff fb4c 	bl	8001614 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d908      	bls.n	8001f98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e140      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	42420000 	.word	0x42420000
 8001f94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f98:	4b9e      	ldr	r3, [pc, #632]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1e9      	bne.n	8001f78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 80a6 	beq.w	80020fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fb6:	4b97      	ldr	r3, [pc, #604]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10d      	bne.n	8001fde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc2:	4b94      	ldr	r3, [pc, #592]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	4a93      	ldr	r2, [pc, #588]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8001fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	61d3      	str	r3, [r2, #28]
 8001fce:	4b91      	ldr	r3, [pc, #580]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fde:	4b8e      	ldr	r3, [pc, #568]	; (8002218 <HAL_RCC_OscConfig+0x4f8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d118      	bne.n	800201c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fea:	4b8b      	ldr	r3, [pc, #556]	; (8002218 <HAL_RCC_OscConfig+0x4f8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a8a      	ldr	r2, [pc, #552]	; (8002218 <HAL_RCC_OscConfig+0x4f8>)
 8001ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff6:	f7ff fb0d 	bl	8001614 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffe:	f7ff fb09 	bl	8001614 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b64      	cmp	r3, #100	; 0x64
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e0fd      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002010:	4b81      	ldr	r3, [pc, #516]	; (8002218 <HAL_RCC_OscConfig+0x4f8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d106      	bne.n	8002032 <HAL_RCC_OscConfig+0x312>
 8002024:	4b7b      	ldr	r3, [pc, #492]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	4a7a      	ldr	r2, [pc, #488]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6213      	str	r3, [r2, #32]
 8002030:	e02d      	b.n	800208e <HAL_RCC_OscConfig+0x36e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10c      	bne.n	8002054 <HAL_RCC_OscConfig+0x334>
 800203a:	4b76      	ldr	r3, [pc, #472]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	4a75      	ldr	r2, [pc, #468]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	6213      	str	r3, [r2, #32]
 8002046:	4b73      	ldr	r3, [pc, #460]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	4a72      	ldr	r2, [pc, #456]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 800204c:	f023 0304 	bic.w	r3, r3, #4
 8002050:	6213      	str	r3, [r2, #32]
 8002052:	e01c      	b.n	800208e <HAL_RCC_OscConfig+0x36e>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	2b05      	cmp	r3, #5
 800205a:	d10c      	bne.n	8002076 <HAL_RCC_OscConfig+0x356>
 800205c:	4b6d      	ldr	r3, [pc, #436]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	4a6c      	ldr	r2, [pc, #432]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8002062:	f043 0304 	orr.w	r3, r3, #4
 8002066:	6213      	str	r3, [r2, #32]
 8002068:	4b6a      	ldr	r3, [pc, #424]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	4a69      	ldr	r2, [pc, #420]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	6213      	str	r3, [r2, #32]
 8002074:	e00b      	b.n	800208e <HAL_RCC_OscConfig+0x36e>
 8002076:	4b67      	ldr	r3, [pc, #412]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	4a66      	ldr	r2, [pc, #408]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 800207c:	f023 0301 	bic.w	r3, r3, #1
 8002080:	6213      	str	r3, [r2, #32]
 8002082:	4b64      	ldr	r3, [pc, #400]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	4a63      	ldr	r2, [pc, #396]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8002088:	f023 0304 	bic.w	r3, r3, #4
 800208c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d015      	beq.n	80020c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002096:	f7ff fabd 	bl	8001614 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800209c:	e00a      	b.n	80020b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209e:	f7ff fab9 	bl	8001614 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e0ab      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b4:	4b57      	ldr	r3, [pc, #348]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0ee      	beq.n	800209e <HAL_RCC_OscConfig+0x37e>
 80020c0:	e014      	b.n	80020ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c2:	f7ff faa7 	bl	8001614 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c8:	e00a      	b.n	80020e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ca:	f7ff faa3 	bl	8001614 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d8:	4293      	cmp	r3, r2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e095      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e0:	4b4c      	ldr	r3, [pc, #304]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1ee      	bne.n	80020ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020ec:	7dfb      	ldrb	r3, [r7, #23]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d105      	bne.n	80020fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f2:	4b48      	ldr	r3, [pc, #288]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	4a47      	ldr	r2, [pc, #284]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 80020f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 8081 	beq.w	800220a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002108:	4b42      	ldr	r3, [pc, #264]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 030c 	and.w	r3, r3, #12
 8002110:	2b08      	cmp	r3, #8
 8002112:	d061      	beq.n	80021d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	2b02      	cmp	r3, #2
 800211a:	d146      	bne.n	80021aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800211c:	4b3f      	ldr	r3, [pc, #252]	; (800221c <HAL_RCC_OscConfig+0x4fc>)
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002122:	f7ff fa77 	bl	8001614 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212a:	f7ff fa73 	bl	8001614 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e067      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800213c:	4b35      	ldr	r3, [pc, #212]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1f0      	bne.n	800212a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002150:	d108      	bne.n	8002164 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002152:	4b30      	ldr	r3, [pc, #192]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	492d      	ldr	r1, [pc, #180]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8002160:	4313      	orrs	r3, r2
 8002162:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002164:	4b2b      	ldr	r3, [pc, #172]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a19      	ldr	r1, [r3, #32]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	430b      	orrs	r3, r1
 8002176:	4927      	ldr	r1, [pc, #156]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 8002178:	4313      	orrs	r3, r2
 800217a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800217c:	4b27      	ldr	r3, [pc, #156]	; (800221c <HAL_RCC_OscConfig+0x4fc>)
 800217e:	2201      	movs	r2, #1
 8002180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002182:	f7ff fa47 	bl	8001614 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218a:	f7ff fa43 	bl	8001614 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e037      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800219c:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x46a>
 80021a8:	e02f      	b.n	800220a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021aa:	4b1c      	ldr	r3, [pc, #112]	; (800221c <HAL_RCC_OscConfig+0x4fc>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b0:	f7ff fa30 	bl	8001614 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b8:	f7ff fa2c 	bl	8001614 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e020      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ca:	4b12      	ldr	r3, [pc, #72]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x498>
 80021d6:	e018      	b.n	800220a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e013      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_RCC_OscConfig+0x4f4>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d106      	bne.n	8002206 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002202:	429a      	cmp	r2, r3
 8002204:	d001      	beq.n	800220a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40021000 	.word	0x40021000
 8002218:	40007000 	.word	0x40007000
 800221c:	42420060 	.word	0x42420060

08002220 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0d0      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002234:	4b6a      	ldr	r3, [pc, #424]	; (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d910      	bls.n	8002264 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002242:	4b67      	ldr	r3, [pc, #412]	; (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 0207 	bic.w	r2, r3, #7
 800224a:	4965      	ldr	r1, [pc, #404]	; (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002252:	4b63      	ldr	r3, [pc, #396]	; (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d001      	beq.n	8002264 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0b8      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d020      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800227c:	4b59      	ldr	r3, [pc, #356]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	4a58      	ldr	r2, [pc, #352]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002286:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002294:	4b53      	ldr	r3, [pc, #332]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	4a52      	ldr	r2, [pc, #328]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 800229a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800229e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a0:	4b50      	ldr	r3, [pc, #320]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	494d      	ldr	r1, [pc, #308]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d040      	beq.n	8002340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d107      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c6:	4b47      	ldr	r3, [pc, #284]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d115      	bne.n	80022fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e07f      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d107      	bne.n	80022ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022de:	4b41      	ldr	r3, [pc, #260]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d109      	bne.n	80022fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e073      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ee:	4b3d      	ldr	r3, [pc, #244]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e06b      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022fe:	4b39      	ldr	r3, [pc, #228]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f023 0203 	bic.w	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	4936      	ldr	r1, [pc, #216]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	4313      	orrs	r3, r2
 800230e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002310:	f7ff f980 	bl	8001614 <HAL_GetTick>
 8002314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002316:	e00a      	b.n	800232e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002318:	f7ff f97c 	bl	8001614 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f241 3288 	movw	r2, #5000	; 0x1388
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e053      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232e:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 020c 	and.w	r2, r3, #12
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	429a      	cmp	r2, r3
 800233e:	d1eb      	bne.n	8002318 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002340:	4b27      	ldr	r3, [pc, #156]	; (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d210      	bcs.n	8002370 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234e:	4b24      	ldr	r3, [pc, #144]	; (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 0207 	bic.w	r2, r3, #7
 8002356:	4922      	ldr	r1, [pc, #136]	; (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e032      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800237c:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4916      	ldr	r1, [pc, #88]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 800238a:	4313      	orrs	r3, r2
 800238c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d009      	beq.n	80023ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800239a:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	490e      	ldr	r1, [pc, #56]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023ae:	f000 f821 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 80023b2:	4602      	mov	r2, r0
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	490a      	ldr	r1, [pc, #40]	; (80023e8 <HAL_RCC_ClockConfig+0x1c8>)
 80023c0:	5ccb      	ldrb	r3, [r1, r3]
 80023c2:	fa22 f303 	lsr.w	r3, r2, r3
 80023c6:	4a09      	ldr	r2, [pc, #36]	; (80023ec <HAL_RCC_ClockConfig+0x1cc>)
 80023c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_RCC_ClockConfig+0x1d0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff f8de 	bl	8001590 <HAL_InitTick>

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40022000 	.word	0x40022000
 80023e4:	40021000 	.word	0x40021000
 80023e8:	08007550 	.word	0x08007550
 80023ec:	20000020 	.word	0x20000020
 80023f0:	20000024 	.word	0x20000024

080023f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f4:	b490      	push	{r4, r7}
 80023f6:	b08a      	sub	sp, #40	; 0x28
 80023f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023fa:	4b2a      	ldr	r3, [pc, #168]	; (80024a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023fc:	1d3c      	adds	r4, r7, #4
 80023fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002400:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002404:	f240 2301 	movw	r3, #513	; 0x201
 8002408:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
 800240e:	2300      	movs	r3, #0
 8002410:	61bb      	str	r3, [r7, #24]
 8002412:	2300      	movs	r3, #0
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800241e:	4b22      	ldr	r3, [pc, #136]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	2b04      	cmp	r3, #4
 800242c:	d002      	beq.n	8002434 <HAL_RCC_GetSysClockFreq+0x40>
 800242e:	2b08      	cmp	r3, #8
 8002430:	d003      	beq.n	800243a <HAL_RCC_GetSysClockFreq+0x46>
 8002432:	e02d      	b.n	8002490 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002434:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002436:	623b      	str	r3, [r7, #32]
      break;
 8002438:	e02d      	b.n	8002496 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	0c9b      	lsrs	r3, r3, #18
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002446:	4413      	add	r3, r2
 8002448:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800244c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d013      	beq.n	8002480 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002458:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	0c5b      	lsrs	r3, r3, #17
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002466:	4413      	add	r3, r2
 8002468:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800246c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	4a0e      	ldr	r2, [pc, #56]	; (80024ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002472:	fb02 f203 	mul.w	r2, r2, r3
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	fbb2 f3f3 	udiv	r3, r2, r3
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
 800247e:	e004      	b.n	800248a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	4a0b      	ldr	r2, [pc, #44]	; (80024b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002484:	fb02 f303 	mul.w	r3, r2, r3
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	623b      	str	r3, [r7, #32]
      break;
 800248e:	e002      	b.n	8002496 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002492:	623b      	str	r3, [r7, #32]
      break;
 8002494:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002496:	6a3b      	ldr	r3, [r7, #32]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3728      	adds	r7, #40	; 0x28
 800249c:	46bd      	mov	sp, r7
 800249e:	bc90      	pop	{r4, r7}
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	08007540 	.word	0x08007540
 80024a8:	40021000 	.word	0x40021000
 80024ac:	007a1200 	.word	0x007a1200
 80024b0:	003d0900 	.word	0x003d0900

080024b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024b8:	4b02      	ldr	r3, [pc, #8]	; (80024c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80024ba:	681b      	ldr	r3, [r3, #0]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr
 80024c4:	20000020 	.word	0x20000020

080024c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024cc:	f7ff fff2 	bl	80024b4 <HAL_RCC_GetHCLKFreq>
 80024d0:	4602      	mov	r2, r0
 80024d2:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	0a1b      	lsrs	r3, r3, #8
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	4903      	ldr	r1, [pc, #12]	; (80024ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80024de:	5ccb      	ldrb	r3, [r1, r3]
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40021000 	.word	0x40021000
 80024ec:	08007560 	.word	0x08007560

080024f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024f4:	f7ff ffde 	bl	80024b4 <HAL_RCC_GetHCLKFreq>
 80024f8:	4602      	mov	r2, r0
 80024fa:	4b05      	ldr	r3, [pc, #20]	; (8002510 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	0adb      	lsrs	r3, r3, #11
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	4903      	ldr	r1, [pc, #12]	; (8002514 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002506:	5ccb      	ldrb	r3, [r1, r3]
 8002508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800250c:	4618      	mov	r0, r3
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40021000 	.word	0x40021000
 8002514:	08007560 	.word	0x08007560

08002518 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002520:	4b0a      	ldr	r3, [pc, #40]	; (800254c <RCC_Delay+0x34>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0a      	ldr	r2, [pc, #40]	; (8002550 <RCC_Delay+0x38>)
 8002526:	fba2 2303 	umull	r2, r3, r2, r3
 800252a:	0a5b      	lsrs	r3, r3, #9
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	fb02 f303 	mul.w	r3, r2, r3
 8002532:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002534:	bf00      	nop
  }
  while (Delay --);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1e5a      	subs	r2, r3, #1
 800253a:	60fa      	str	r2, [r7, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1f9      	bne.n	8002534 <RCC_Delay+0x1c>
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr
 800254c:	20000020 	.word	0x20000020
 8002550:	10624dd3 	.word	0x10624dd3

08002554 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e03f      	b.n	80025e6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d106      	bne.n	8002580 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7fe ff78 	bl	8001470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2224      	movs	r2, #36	; 0x24
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002596:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 fc85 	bl	8002ea8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695a      	ldr	r2, [r3, #20]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2220      	movs	r2, #32
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b08a      	sub	sp, #40	; 0x28
 80025f2:	af02      	add	r7, sp, #8
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	603b      	str	r3, [r7, #0]
 80025fa:	4613      	mov	r3, r2
 80025fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b20      	cmp	r3, #32
 800260c:	d17c      	bne.n	8002708 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <HAL_UART_Transmit+0x2c>
 8002614:	88fb      	ldrh	r3, [r7, #6]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e075      	b.n	800270a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002624:	2b01      	cmp	r3, #1
 8002626:	d101      	bne.n	800262c <HAL_UART_Transmit+0x3e>
 8002628:	2302      	movs	r3, #2
 800262a:	e06e      	b.n	800270a <HAL_UART_Transmit+0x11c>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2221      	movs	r2, #33	; 0x21
 800263e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002642:	f7fe ffe7 	bl	8001614 <HAL_GetTick>
 8002646:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	88fa      	ldrh	r2, [r7, #6]
 800264c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	88fa      	ldrh	r2, [r7, #6]
 8002652:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800265c:	d108      	bne.n	8002670 <HAL_UART_Transmit+0x82>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d104      	bne.n	8002670 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	61bb      	str	r3, [r7, #24]
 800266e:	e003      	b.n	8002678 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002674:	2300      	movs	r3, #0
 8002676:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002680:	e02a      	b.n	80026d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2200      	movs	r2, #0
 800268a:	2180      	movs	r1, #128	; 0x80
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f000 fa38 	bl	8002b02 <UART_WaitOnFlagUntilTimeout>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e036      	b.n	800270a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10b      	bne.n	80026ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	3302      	adds	r3, #2
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	e007      	b.n	80026ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	781a      	ldrb	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	3301      	adds	r3, #1
 80026c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1cf      	bne.n	8002682 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2200      	movs	r2, #0
 80026ea:	2140      	movs	r1, #64	; 0x40
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 fa08 	bl	8002b02 <UART_WaitOnFlagUntilTimeout>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e006      	b.n	800270a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	e000      	b.n	800270a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002708:	2302      	movs	r3, #2
  }
}
 800270a:	4618      	mov	r0, r3
 800270c:	3720      	adds	r7, #32
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	4613      	mov	r3, r2
 800271e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b20      	cmp	r3, #32
 800272a:	d11d      	bne.n	8002768 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <HAL_UART_Receive_IT+0x26>
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e016      	b.n	800276a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_UART_Receive_IT+0x38>
 8002746:	2302      	movs	r3, #2
 8002748:	e00f      	b.n	800276a <HAL_UART_Receive_IT+0x58>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002758:	88fb      	ldrh	r3, [r7, #6]
 800275a:	461a      	mov	r2, r3
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 fa19 	bl	8002b96 <UART_Start_Receive_IT>
 8002764:	4603      	mov	r3, r0
 8002766:	e000      	b.n	800276a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002768:	2302      	movs	r3, #2
  }
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	; 0x28
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002794:	2300      	movs	r3, #0
 8002796:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10d      	bne.n	80027c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <HAL_UART_IRQHandler+0x52>
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	f003 0320 	and.w	r3, r3, #32
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fac9 	bl	8002d56 <UART_Receive_IT>
      return;
 80027c4:	e17b      	b.n	8002abe <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 80b1 	beq.w	8002930 <HAL_UART_IRQHandler+0x1bc>
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d105      	bne.n	80027e4 <HAL_UART_IRQHandler+0x70>
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 80a6 	beq.w	8002930 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <HAL_UART_IRQHandler+0x90>
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	f043 0201 	orr.w	r2, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_UART_IRQHandler+0xb0>
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	f043 0202 	orr.w	r2, r3, #2
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <HAL_UART_IRQHandler+0xd0>
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	f043 0204 	orr.w	r2, r3, #4
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00f      	beq.n	800286e <HAL_UART_IRQHandler+0xfa>
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	f003 0320 	and.w	r3, r3, #32
 8002854:	2b00      	cmp	r3, #0
 8002856:	d104      	bne.n	8002862 <HAL_UART_IRQHandler+0xee>
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d005      	beq.n	800286e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f043 0208 	orr.w	r2, r3, #8
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 811e 	beq.w	8002ab4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	f003 0320 	and.w	r3, r3, #32
 800287e:	2b00      	cmp	r3, #0
 8002880:	d007      	beq.n	8002892 <HAL_UART_IRQHandler+0x11e>
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	f003 0320 	and.w	r3, r3, #32
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 fa62 	bl	8002d56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf14      	ite	ne
 80028a0:	2301      	movne	r3, #1
 80028a2:	2300      	moveq	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d102      	bne.n	80028ba <HAL_UART_IRQHandler+0x146>
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d031      	beq.n	800291e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f9a4 	bl	8002c08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d023      	beq.n	8002916 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695a      	ldr	r2, [r3, #20]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028dc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d013      	beq.n	800290e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ea:	4a76      	ldr	r2, [pc, #472]	; (8002ac4 <HAL_UART_IRQHandler+0x350>)
 80028ec:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe ffe0 	bl	80018b8 <HAL_DMA_Abort_IT>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d016      	beq.n	800292c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002908:	4610      	mov	r0, r2
 800290a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800290c:	e00e      	b.n	800292c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f8e3 	bl	8002ada <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002914:	e00a      	b.n	800292c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f8df 	bl	8002ada <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800291c:	e006      	b.n	800292c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f8db 	bl	8002ada <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800292a:	e0c3      	b.n	8002ab4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800292c:	bf00      	nop
    return;
 800292e:	e0c1      	b.n	8002ab4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	2b01      	cmp	r3, #1
 8002936:	f040 80a1 	bne.w	8002a7c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	f003 0310 	and.w	r3, r3, #16
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 809b 	beq.w	8002a7c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	f003 0310 	and.w	r3, r3, #16
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 8095 	beq.w	8002a7c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002972:	2b00      	cmp	r3, #0
 8002974:	d04e      	beq.n	8002a14 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002980:	8a3b      	ldrh	r3, [r7, #16]
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 8098 	beq.w	8002ab8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800298c:	8a3a      	ldrh	r2, [r7, #16]
 800298e:	429a      	cmp	r2, r3
 8002990:	f080 8092 	bcs.w	8002ab8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	8a3a      	ldrh	r2, [r7, #16]
 8002998:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	d02b      	beq.n	80029fc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029b2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0201 	bic.w	r2, r2, #1
 80029c2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695a      	ldr	r2, [r3, #20]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029d2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0210 	bic.w	r2, r2, #16
 80029f0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fe ff23 	bl	8001842 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f86d 	bl	8002aec <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002a12:	e051      	b.n	8002ab8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d047      	beq.n	8002abc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002a2c:	8a7b      	ldrh	r3, [r7, #18]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d044      	beq.n	8002abc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002a40:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	695a      	ldr	r2, [r3, #20]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0201 	bic.w	r2, r2, #1
 8002a50:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2220      	movs	r2, #32
 8002a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0210 	bic.w	r2, r2, #16
 8002a6e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a70:	8a7b      	ldrh	r3, [r7, #18]
 8002a72:	4619      	mov	r1, r3
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f839 	bl	8002aec <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002a7a:	e01f      	b.n	8002abc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d008      	beq.n	8002a98 <HAL_UART_IRQHandler+0x324>
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f8f9 	bl	8002c88 <UART_Transmit_IT>
    return;
 8002a96:	e012      	b.n	8002abe <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00d      	beq.n	8002abe <HAL_UART_IRQHandler+0x34a>
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f93a 	bl	8002d26 <UART_EndTransmit_IT>
    return;
 8002ab2:	e004      	b.n	8002abe <HAL_UART_IRQHandler+0x34a>
    return;
 8002ab4:	bf00      	nop
 8002ab6:	e002      	b.n	8002abe <HAL_UART_IRQHandler+0x34a>
      return;
 8002ab8:	bf00      	nop
 8002aba:	e000      	b.n	8002abe <HAL_UART_IRQHandler+0x34a>
      return;
 8002abc:	bf00      	nop
  }
}
 8002abe:	3728      	adds	r7, #40	; 0x28
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	08002c61 	.word	0x08002c61

08002ac8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr

08002ada <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr

08002aec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b084      	sub	sp, #16
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	60f8      	str	r0, [r7, #12]
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	603b      	str	r3, [r7, #0]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b12:	e02c      	b.n	8002b6e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1a:	d028      	beq.n	8002b6e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d007      	beq.n	8002b32 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b22:	f7fe fd77 	bl	8001614 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d21d      	bcs.n	8002b6e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b40:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695a      	ldr	r2, [r3, #20]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0201 	bic.w	r2, r2, #1
 8002b50:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2220      	movs	r2, #32
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e00f      	b.n	8002b8e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	4013      	ands	r3, r2
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	bf0c      	ite	eq
 8002b7e:	2301      	moveq	r3, #1
 8002b80:	2300      	movne	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d0c3      	beq.n	8002b14 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b085      	sub	sp, #20
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	60f8      	str	r0, [r7, #12]
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	88fa      	ldrh	r2, [r7, #6]
 8002bae:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	88fa      	ldrh	r2, [r7, #6]
 8002bb4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2222      	movs	r2, #34	; 0x22
 8002bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bda:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0220 	orr.w	r2, r2, #32
 8002bfa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c1e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0201 	bic.w	r2, r2, #1
 8002c2e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d107      	bne.n	8002c48 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0210 	bic.w	r2, r2, #16
 8002c46:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f7ff ff2d 	bl	8002ada <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c80:	bf00      	nop
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b21      	cmp	r3, #33	; 0x21
 8002c9a:	d13e      	bne.n	8002d1a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca4:	d114      	bne.n	8002cd0 <UART_Transmit_IT+0x48>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d110      	bne.n	8002cd0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cc2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	1c9a      	adds	r2, r3, #2
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	621a      	str	r2, [r3, #32]
 8002cce:	e008      	b.n	8002ce2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	1c59      	adds	r1, r3, #1
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6211      	str	r1, [r2, #32]
 8002cda:	781a      	ldrb	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	4619      	mov	r1, r3
 8002cf0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10f      	bne.n	8002d16 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d04:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d14:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	e000      	b.n	8002d1c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d1a:	2302      	movs	r3, #2
  }
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr

08002d26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2220      	movs	r2, #32
 8002d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7ff febe 	bl	8002ac8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b086      	sub	sp, #24
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b22      	cmp	r3, #34	; 0x22
 8002d68:	f040 8099 	bne.w	8002e9e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d74:	d117      	bne.n	8002da6 <UART_Receive_IT+0x50>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d113      	bne.n	8002da6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	1c9a      	adds	r2, r3, #2
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28
 8002da4:	e026      	b.n	8002df4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002daa:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db8:	d007      	beq.n	8002dca <UART_Receive_IT+0x74>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10a      	bne.n	8002dd8 <UART_Receive_IT+0x82>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	701a      	strb	r2, [r3, #0]
 8002dd6:	e008      	b.n	8002dea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	4619      	mov	r1, r3
 8002e02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d148      	bne.n	8002e9a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0220 	bic.w	r2, r2, #32
 8002e16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0201 	bic.w	r2, r2, #1
 8002e36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d123      	bne.n	8002e90 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0210 	bic.w	r2, r2, #16
 8002e5c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0310 	and.w	r3, r3, #16
 8002e68:	2b10      	cmp	r3, #16
 8002e6a:	d10a      	bne.n	8002e82 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e86:	4619      	mov	r1, r3
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff fe2f 	bl	8002aec <HAL_UARTEx_RxEventCallback>
 8002e8e:	e002      	b.n	8002e96 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7fd ff95 	bl	8000dc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	e002      	b.n	8002ea0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	e000      	b.n	8002ea0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002e9e:	2302      	movs	r3, #2
  }
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ee2:	f023 030c 	bic.w	r3, r3, #12
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6812      	ldr	r2, [r2, #0]
 8002eea:	68b9      	ldr	r1, [r7, #8]
 8002eec:	430b      	orrs	r3, r1
 8002eee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699a      	ldr	r2, [r3, #24]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a2c      	ldr	r2, [pc, #176]	; (8002fbc <UART_SetConfig+0x114>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d103      	bne.n	8002f18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f10:	f7ff faee 	bl	80024f0 <HAL_RCC_GetPCLK2Freq>
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	e002      	b.n	8002f1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f18:	f7ff fad6 	bl	80024c8 <HAL_RCC_GetPCLK1Freq>
 8002f1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	009a      	lsls	r2, r3, #2
 8002f28:	441a      	add	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f34:	4a22      	ldr	r2, [pc, #136]	; (8002fc0 <UART_SetConfig+0x118>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	0119      	lsls	r1, r3, #4
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	009a      	lsls	r2, r3, #2
 8002f48:	441a      	add	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f54:	4b1a      	ldr	r3, [pc, #104]	; (8002fc0 <UART_SetConfig+0x118>)
 8002f56:	fba3 0302 	umull	r0, r3, r3, r2
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	2064      	movs	r0, #100	; 0x64
 8002f5e:	fb00 f303 	mul.w	r3, r0, r3
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	3332      	adds	r3, #50	; 0x32
 8002f68:	4a15      	ldr	r2, [pc, #84]	; (8002fc0 <UART_SetConfig+0x118>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f74:	4419      	add	r1, r3
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	009a      	lsls	r2, r3, #2
 8002f80:	441a      	add	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <UART_SetConfig+0x118>)
 8002f8e:	fba3 0302 	umull	r0, r3, r3, r2
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	2064      	movs	r0, #100	; 0x64
 8002f96:	fb00 f303 	mul.w	r3, r0, r3
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	3332      	adds	r3, #50	; 0x32
 8002fa0:	4a07      	ldr	r2, [pc, #28]	; (8002fc0 <UART_SetConfig+0x118>)
 8002fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	f003 020f 	and.w	r2, r3, #15
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	440a      	add	r2, r1
 8002fb2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002fb4:	bf00      	nop
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40013800 	.word	0x40013800
 8002fc0:	51eb851f 	.word	0x51eb851f

08002fc4 <atof>:
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	f001 bad3 	b.w	8004570 <strtod>
	...

08002fcc <__errno>:
 8002fcc:	4b01      	ldr	r3, [pc, #4]	; (8002fd4 <__errno+0x8>)
 8002fce:	6818      	ldr	r0, [r3, #0]
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	2000002c 	.word	0x2000002c

08002fd8 <__libc_init_array>:
 8002fd8:	b570      	push	{r4, r5, r6, lr}
 8002fda:	2600      	movs	r6, #0
 8002fdc:	4d0c      	ldr	r5, [pc, #48]	; (8003010 <__libc_init_array+0x38>)
 8002fde:	4c0d      	ldr	r4, [pc, #52]	; (8003014 <__libc_init_array+0x3c>)
 8002fe0:	1b64      	subs	r4, r4, r5
 8002fe2:	10a4      	asrs	r4, r4, #2
 8002fe4:	42a6      	cmp	r6, r4
 8002fe6:	d109      	bne.n	8002ffc <__libc_init_array+0x24>
 8002fe8:	f004 f9f6 	bl	80073d8 <_init>
 8002fec:	2600      	movs	r6, #0
 8002fee:	4d0a      	ldr	r5, [pc, #40]	; (8003018 <__libc_init_array+0x40>)
 8002ff0:	4c0a      	ldr	r4, [pc, #40]	; (800301c <__libc_init_array+0x44>)
 8002ff2:	1b64      	subs	r4, r4, r5
 8002ff4:	10a4      	asrs	r4, r4, #2
 8002ff6:	42a6      	cmp	r6, r4
 8002ff8:	d105      	bne.n	8003006 <__libc_init_array+0x2e>
 8002ffa:	bd70      	pop	{r4, r5, r6, pc}
 8002ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003000:	4798      	blx	r3
 8003002:	3601      	adds	r6, #1
 8003004:	e7ee      	b.n	8002fe4 <__libc_init_array+0xc>
 8003006:	f855 3b04 	ldr.w	r3, [r5], #4
 800300a:	4798      	blx	r3
 800300c:	3601      	adds	r6, #1
 800300e:	e7f2      	b.n	8002ff6 <__libc_init_array+0x1e>
 8003010:	08007a70 	.word	0x08007a70
 8003014:	08007a70 	.word	0x08007a70
 8003018:	08007a70 	.word	0x08007a70
 800301c:	08007a74 	.word	0x08007a74

08003020 <memset>:
 8003020:	4603      	mov	r3, r0
 8003022:	4402      	add	r2, r0
 8003024:	4293      	cmp	r3, r2
 8003026:	d100      	bne.n	800302a <memset+0xa>
 8003028:	4770      	bx	lr
 800302a:	f803 1b01 	strb.w	r1, [r3], #1
 800302e:	e7f9      	b.n	8003024 <memset+0x4>

08003030 <__cvt>:
 8003030:	2b00      	cmp	r3, #0
 8003032:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003036:	461f      	mov	r7, r3
 8003038:	bfbb      	ittet	lt
 800303a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800303e:	461f      	movlt	r7, r3
 8003040:	2300      	movge	r3, #0
 8003042:	232d      	movlt	r3, #45	; 0x2d
 8003044:	b088      	sub	sp, #32
 8003046:	4614      	mov	r4, r2
 8003048:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800304a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800304c:	7013      	strb	r3, [r2, #0]
 800304e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003050:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003054:	f023 0820 	bic.w	r8, r3, #32
 8003058:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800305c:	d005      	beq.n	800306a <__cvt+0x3a>
 800305e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003062:	d100      	bne.n	8003066 <__cvt+0x36>
 8003064:	3501      	adds	r5, #1
 8003066:	2302      	movs	r3, #2
 8003068:	e000      	b.n	800306c <__cvt+0x3c>
 800306a:	2303      	movs	r3, #3
 800306c:	aa07      	add	r2, sp, #28
 800306e:	9204      	str	r2, [sp, #16]
 8003070:	aa06      	add	r2, sp, #24
 8003072:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003076:	e9cd 3500 	strd	r3, r5, [sp]
 800307a:	4622      	mov	r2, r4
 800307c:	463b      	mov	r3, r7
 800307e:	f001 fb8b 	bl	8004798 <_dtoa_r>
 8003082:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003086:	4606      	mov	r6, r0
 8003088:	d102      	bne.n	8003090 <__cvt+0x60>
 800308a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800308c:	07db      	lsls	r3, r3, #31
 800308e:	d522      	bpl.n	80030d6 <__cvt+0xa6>
 8003090:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003094:	eb06 0905 	add.w	r9, r6, r5
 8003098:	d110      	bne.n	80030bc <__cvt+0x8c>
 800309a:	7833      	ldrb	r3, [r6, #0]
 800309c:	2b30      	cmp	r3, #48	; 0x30
 800309e:	d10a      	bne.n	80030b6 <__cvt+0x86>
 80030a0:	2200      	movs	r2, #0
 80030a2:	2300      	movs	r3, #0
 80030a4:	4620      	mov	r0, r4
 80030a6:	4639      	mov	r1, r7
 80030a8:	f7fd fc88 	bl	80009bc <__aeabi_dcmpeq>
 80030ac:	b918      	cbnz	r0, 80030b6 <__cvt+0x86>
 80030ae:	f1c5 0501 	rsb	r5, r5, #1
 80030b2:	f8ca 5000 	str.w	r5, [sl]
 80030b6:	f8da 3000 	ldr.w	r3, [sl]
 80030ba:	4499      	add	r9, r3
 80030bc:	2200      	movs	r2, #0
 80030be:	2300      	movs	r3, #0
 80030c0:	4620      	mov	r0, r4
 80030c2:	4639      	mov	r1, r7
 80030c4:	f7fd fc7a 	bl	80009bc <__aeabi_dcmpeq>
 80030c8:	b108      	cbz	r0, 80030ce <__cvt+0x9e>
 80030ca:	f8cd 901c 	str.w	r9, [sp, #28]
 80030ce:	2230      	movs	r2, #48	; 0x30
 80030d0:	9b07      	ldr	r3, [sp, #28]
 80030d2:	454b      	cmp	r3, r9
 80030d4:	d307      	bcc.n	80030e6 <__cvt+0xb6>
 80030d6:	4630      	mov	r0, r6
 80030d8:	9b07      	ldr	r3, [sp, #28]
 80030da:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80030dc:	1b9b      	subs	r3, r3, r6
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	b008      	add	sp, #32
 80030e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030e6:	1c59      	adds	r1, r3, #1
 80030e8:	9107      	str	r1, [sp, #28]
 80030ea:	701a      	strb	r2, [r3, #0]
 80030ec:	e7f0      	b.n	80030d0 <__cvt+0xa0>

080030ee <__exponent>:
 80030ee:	4603      	mov	r3, r0
 80030f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030f2:	2900      	cmp	r1, #0
 80030f4:	f803 2b02 	strb.w	r2, [r3], #2
 80030f8:	bfb6      	itet	lt
 80030fa:	222d      	movlt	r2, #45	; 0x2d
 80030fc:	222b      	movge	r2, #43	; 0x2b
 80030fe:	4249      	neglt	r1, r1
 8003100:	2909      	cmp	r1, #9
 8003102:	7042      	strb	r2, [r0, #1]
 8003104:	dd2b      	ble.n	800315e <__exponent+0x70>
 8003106:	f10d 0407 	add.w	r4, sp, #7
 800310a:	46a4      	mov	ip, r4
 800310c:	270a      	movs	r7, #10
 800310e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003112:	460a      	mov	r2, r1
 8003114:	46a6      	mov	lr, r4
 8003116:	fb07 1516 	mls	r5, r7, r6, r1
 800311a:	2a63      	cmp	r2, #99	; 0x63
 800311c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003120:	4631      	mov	r1, r6
 8003122:	f104 34ff 	add.w	r4, r4, #4294967295
 8003126:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800312a:	dcf0      	bgt.n	800310e <__exponent+0x20>
 800312c:	3130      	adds	r1, #48	; 0x30
 800312e:	f1ae 0502 	sub.w	r5, lr, #2
 8003132:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003136:	4629      	mov	r1, r5
 8003138:	1c44      	adds	r4, r0, #1
 800313a:	4561      	cmp	r1, ip
 800313c:	d30a      	bcc.n	8003154 <__exponent+0x66>
 800313e:	f10d 0209 	add.w	r2, sp, #9
 8003142:	eba2 020e 	sub.w	r2, r2, lr
 8003146:	4565      	cmp	r5, ip
 8003148:	bf88      	it	hi
 800314a:	2200      	movhi	r2, #0
 800314c:	4413      	add	r3, r2
 800314e:	1a18      	subs	r0, r3, r0
 8003150:	b003      	add	sp, #12
 8003152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003154:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003158:	f804 2f01 	strb.w	r2, [r4, #1]!
 800315c:	e7ed      	b.n	800313a <__exponent+0x4c>
 800315e:	2330      	movs	r3, #48	; 0x30
 8003160:	3130      	adds	r1, #48	; 0x30
 8003162:	7083      	strb	r3, [r0, #2]
 8003164:	70c1      	strb	r1, [r0, #3]
 8003166:	1d03      	adds	r3, r0, #4
 8003168:	e7f1      	b.n	800314e <__exponent+0x60>
	...

0800316c <_printf_float>:
 800316c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003170:	b091      	sub	sp, #68	; 0x44
 8003172:	460c      	mov	r4, r1
 8003174:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003178:	4616      	mov	r6, r2
 800317a:	461f      	mov	r7, r3
 800317c:	4605      	mov	r5, r0
 800317e:	f002 fc71 	bl	8005a64 <_localeconv_r>
 8003182:	6803      	ldr	r3, [r0, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	9309      	str	r3, [sp, #36]	; 0x24
 8003188:	f7fc ffec 	bl	8000164 <strlen>
 800318c:	2300      	movs	r3, #0
 800318e:	930e      	str	r3, [sp, #56]	; 0x38
 8003190:	f8d8 3000 	ldr.w	r3, [r8]
 8003194:	900a      	str	r0, [sp, #40]	; 0x28
 8003196:	3307      	adds	r3, #7
 8003198:	f023 0307 	bic.w	r3, r3, #7
 800319c:	f103 0208 	add.w	r2, r3, #8
 80031a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80031a4:	f8d4 b000 	ldr.w	fp, [r4]
 80031a8:	f8c8 2000 	str.w	r2, [r8]
 80031ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80031b4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80031b8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80031bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80031be:	f04f 32ff 	mov.w	r2, #4294967295
 80031c2:	4640      	mov	r0, r8
 80031c4:	4b9c      	ldr	r3, [pc, #624]	; (8003438 <_printf_float+0x2cc>)
 80031c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80031c8:	f7fd fc2a 	bl	8000a20 <__aeabi_dcmpun>
 80031cc:	bb70      	cbnz	r0, 800322c <_printf_float+0xc0>
 80031ce:	f04f 32ff 	mov.w	r2, #4294967295
 80031d2:	4640      	mov	r0, r8
 80031d4:	4b98      	ldr	r3, [pc, #608]	; (8003438 <_printf_float+0x2cc>)
 80031d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80031d8:	f7fd fc04 	bl	80009e4 <__aeabi_dcmple>
 80031dc:	bb30      	cbnz	r0, 800322c <_printf_float+0xc0>
 80031de:	2200      	movs	r2, #0
 80031e0:	2300      	movs	r3, #0
 80031e2:	4640      	mov	r0, r8
 80031e4:	4651      	mov	r1, sl
 80031e6:	f7fd fbf3 	bl	80009d0 <__aeabi_dcmplt>
 80031ea:	b110      	cbz	r0, 80031f2 <_printf_float+0x86>
 80031ec:	232d      	movs	r3, #45	; 0x2d
 80031ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031f2:	4b92      	ldr	r3, [pc, #584]	; (800343c <_printf_float+0x2d0>)
 80031f4:	4892      	ldr	r0, [pc, #584]	; (8003440 <_printf_float+0x2d4>)
 80031f6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80031fa:	bf94      	ite	ls
 80031fc:	4698      	movls	r8, r3
 80031fe:	4680      	movhi	r8, r0
 8003200:	2303      	movs	r3, #3
 8003202:	f04f 0a00 	mov.w	sl, #0
 8003206:	6123      	str	r3, [r4, #16]
 8003208:	f02b 0304 	bic.w	r3, fp, #4
 800320c:	6023      	str	r3, [r4, #0]
 800320e:	4633      	mov	r3, r6
 8003210:	4621      	mov	r1, r4
 8003212:	4628      	mov	r0, r5
 8003214:	9700      	str	r7, [sp, #0]
 8003216:	aa0f      	add	r2, sp, #60	; 0x3c
 8003218:	f000 f9d4 	bl	80035c4 <_printf_common>
 800321c:	3001      	adds	r0, #1
 800321e:	f040 8090 	bne.w	8003342 <_printf_float+0x1d6>
 8003222:	f04f 30ff 	mov.w	r0, #4294967295
 8003226:	b011      	add	sp, #68	; 0x44
 8003228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800322c:	4642      	mov	r2, r8
 800322e:	4653      	mov	r3, sl
 8003230:	4640      	mov	r0, r8
 8003232:	4651      	mov	r1, sl
 8003234:	f7fd fbf4 	bl	8000a20 <__aeabi_dcmpun>
 8003238:	b148      	cbz	r0, 800324e <_printf_float+0xe2>
 800323a:	f1ba 0f00 	cmp.w	sl, #0
 800323e:	bfb8      	it	lt
 8003240:	232d      	movlt	r3, #45	; 0x2d
 8003242:	4880      	ldr	r0, [pc, #512]	; (8003444 <_printf_float+0x2d8>)
 8003244:	bfb8      	it	lt
 8003246:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800324a:	4b7f      	ldr	r3, [pc, #508]	; (8003448 <_printf_float+0x2dc>)
 800324c:	e7d3      	b.n	80031f6 <_printf_float+0x8a>
 800324e:	6863      	ldr	r3, [r4, #4]
 8003250:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	d142      	bne.n	80032de <_printf_float+0x172>
 8003258:	2306      	movs	r3, #6
 800325a:	6063      	str	r3, [r4, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	9206      	str	r2, [sp, #24]
 8003260:	aa0e      	add	r2, sp, #56	; 0x38
 8003262:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003266:	aa0d      	add	r2, sp, #52	; 0x34
 8003268:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800326c:	9203      	str	r2, [sp, #12]
 800326e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003272:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003276:	6023      	str	r3, [r4, #0]
 8003278:	6863      	ldr	r3, [r4, #4]
 800327a:	4642      	mov	r2, r8
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	4628      	mov	r0, r5
 8003280:	4653      	mov	r3, sl
 8003282:	910b      	str	r1, [sp, #44]	; 0x2c
 8003284:	f7ff fed4 	bl	8003030 <__cvt>
 8003288:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800328a:	4680      	mov	r8, r0
 800328c:	2947      	cmp	r1, #71	; 0x47
 800328e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003290:	d108      	bne.n	80032a4 <_printf_float+0x138>
 8003292:	1cc8      	adds	r0, r1, #3
 8003294:	db02      	blt.n	800329c <_printf_float+0x130>
 8003296:	6863      	ldr	r3, [r4, #4]
 8003298:	4299      	cmp	r1, r3
 800329a:	dd40      	ble.n	800331e <_printf_float+0x1b2>
 800329c:	f1a9 0902 	sub.w	r9, r9, #2
 80032a0:	fa5f f989 	uxtb.w	r9, r9
 80032a4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80032a8:	d81f      	bhi.n	80032ea <_printf_float+0x17e>
 80032aa:	464a      	mov	r2, r9
 80032ac:	3901      	subs	r1, #1
 80032ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80032b2:	910d      	str	r1, [sp, #52]	; 0x34
 80032b4:	f7ff ff1b 	bl	80030ee <__exponent>
 80032b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80032ba:	4682      	mov	sl, r0
 80032bc:	1813      	adds	r3, r2, r0
 80032be:	2a01      	cmp	r2, #1
 80032c0:	6123      	str	r3, [r4, #16]
 80032c2:	dc02      	bgt.n	80032ca <_printf_float+0x15e>
 80032c4:	6822      	ldr	r2, [r4, #0]
 80032c6:	07d2      	lsls	r2, r2, #31
 80032c8:	d501      	bpl.n	80032ce <_printf_float+0x162>
 80032ca:	3301      	adds	r3, #1
 80032cc:	6123      	str	r3, [r4, #16]
 80032ce:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d09b      	beq.n	800320e <_printf_float+0xa2>
 80032d6:	232d      	movs	r3, #45	; 0x2d
 80032d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032dc:	e797      	b.n	800320e <_printf_float+0xa2>
 80032de:	2947      	cmp	r1, #71	; 0x47
 80032e0:	d1bc      	bne.n	800325c <_printf_float+0xf0>
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1ba      	bne.n	800325c <_printf_float+0xf0>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e7b7      	b.n	800325a <_printf_float+0xee>
 80032ea:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80032ee:	d118      	bne.n	8003322 <_printf_float+0x1b6>
 80032f0:	2900      	cmp	r1, #0
 80032f2:	6863      	ldr	r3, [r4, #4]
 80032f4:	dd0b      	ble.n	800330e <_printf_float+0x1a2>
 80032f6:	6121      	str	r1, [r4, #16]
 80032f8:	b913      	cbnz	r3, 8003300 <_printf_float+0x194>
 80032fa:	6822      	ldr	r2, [r4, #0]
 80032fc:	07d0      	lsls	r0, r2, #31
 80032fe:	d502      	bpl.n	8003306 <_printf_float+0x19a>
 8003300:	3301      	adds	r3, #1
 8003302:	440b      	add	r3, r1
 8003304:	6123      	str	r3, [r4, #16]
 8003306:	f04f 0a00 	mov.w	sl, #0
 800330a:	65a1      	str	r1, [r4, #88]	; 0x58
 800330c:	e7df      	b.n	80032ce <_printf_float+0x162>
 800330e:	b913      	cbnz	r3, 8003316 <_printf_float+0x1aa>
 8003310:	6822      	ldr	r2, [r4, #0]
 8003312:	07d2      	lsls	r2, r2, #31
 8003314:	d501      	bpl.n	800331a <_printf_float+0x1ae>
 8003316:	3302      	adds	r3, #2
 8003318:	e7f4      	b.n	8003304 <_printf_float+0x198>
 800331a:	2301      	movs	r3, #1
 800331c:	e7f2      	b.n	8003304 <_printf_float+0x198>
 800331e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003322:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003324:	4299      	cmp	r1, r3
 8003326:	db05      	blt.n	8003334 <_printf_float+0x1c8>
 8003328:	6823      	ldr	r3, [r4, #0]
 800332a:	6121      	str	r1, [r4, #16]
 800332c:	07d8      	lsls	r0, r3, #31
 800332e:	d5ea      	bpl.n	8003306 <_printf_float+0x19a>
 8003330:	1c4b      	adds	r3, r1, #1
 8003332:	e7e7      	b.n	8003304 <_printf_float+0x198>
 8003334:	2900      	cmp	r1, #0
 8003336:	bfcc      	ite	gt
 8003338:	2201      	movgt	r2, #1
 800333a:	f1c1 0202 	rsble	r2, r1, #2
 800333e:	4413      	add	r3, r2
 8003340:	e7e0      	b.n	8003304 <_printf_float+0x198>
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	055a      	lsls	r2, r3, #21
 8003346:	d407      	bmi.n	8003358 <_printf_float+0x1ec>
 8003348:	6923      	ldr	r3, [r4, #16]
 800334a:	4642      	mov	r2, r8
 800334c:	4631      	mov	r1, r6
 800334e:	4628      	mov	r0, r5
 8003350:	47b8      	blx	r7
 8003352:	3001      	adds	r0, #1
 8003354:	d12b      	bne.n	80033ae <_printf_float+0x242>
 8003356:	e764      	b.n	8003222 <_printf_float+0xb6>
 8003358:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800335c:	f240 80dd 	bls.w	800351a <_printf_float+0x3ae>
 8003360:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003364:	2200      	movs	r2, #0
 8003366:	2300      	movs	r3, #0
 8003368:	f7fd fb28 	bl	80009bc <__aeabi_dcmpeq>
 800336c:	2800      	cmp	r0, #0
 800336e:	d033      	beq.n	80033d8 <_printf_float+0x26c>
 8003370:	2301      	movs	r3, #1
 8003372:	4631      	mov	r1, r6
 8003374:	4628      	mov	r0, r5
 8003376:	4a35      	ldr	r2, [pc, #212]	; (800344c <_printf_float+0x2e0>)
 8003378:	47b8      	blx	r7
 800337a:	3001      	adds	r0, #1
 800337c:	f43f af51 	beq.w	8003222 <_printf_float+0xb6>
 8003380:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003384:	429a      	cmp	r2, r3
 8003386:	db02      	blt.n	800338e <_printf_float+0x222>
 8003388:	6823      	ldr	r3, [r4, #0]
 800338a:	07d8      	lsls	r0, r3, #31
 800338c:	d50f      	bpl.n	80033ae <_printf_float+0x242>
 800338e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003392:	4631      	mov	r1, r6
 8003394:	4628      	mov	r0, r5
 8003396:	47b8      	blx	r7
 8003398:	3001      	adds	r0, #1
 800339a:	f43f af42 	beq.w	8003222 <_printf_float+0xb6>
 800339e:	f04f 0800 	mov.w	r8, #0
 80033a2:	f104 091a 	add.w	r9, r4, #26
 80033a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033a8:	3b01      	subs	r3, #1
 80033aa:	4543      	cmp	r3, r8
 80033ac:	dc09      	bgt.n	80033c2 <_printf_float+0x256>
 80033ae:	6823      	ldr	r3, [r4, #0]
 80033b0:	079b      	lsls	r3, r3, #30
 80033b2:	f100 8102 	bmi.w	80035ba <_printf_float+0x44e>
 80033b6:	68e0      	ldr	r0, [r4, #12]
 80033b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80033ba:	4298      	cmp	r0, r3
 80033bc:	bfb8      	it	lt
 80033be:	4618      	movlt	r0, r3
 80033c0:	e731      	b.n	8003226 <_printf_float+0xba>
 80033c2:	2301      	movs	r3, #1
 80033c4:	464a      	mov	r2, r9
 80033c6:	4631      	mov	r1, r6
 80033c8:	4628      	mov	r0, r5
 80033ca:	47b8      	blx	r7
 80033cc:	3001      	adds	r0, #1
 80033ce:	f43f af28 	beq.w	8003222 <_printf_float+0xb6>
 80033d2:	f108 0801 	add.w	r8, r8, #1
 80033d6:	e7e6      	b.n	80033a6 <_printf_float+0x23a>
 80033d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033da:	2b00      	cmp	r3, #0
 80033dc:	dc38      	bgt.n	8003450 <_printf_float+0x2e4>
 80033de:	2301      	movs	r3, #1
 80033e0:	4631      	mov	r1, r6
 80033e2:	4628      	mov	r0, r5
 80033e4:	4a19      	ldr	r2, [pc, #100]	; (800344c <_printf_float+0x2e0>)
 80033e6:	47b8      	blx	r7
 80033e8:	3001      	adds	r0, #1
 80033ea:	f43f af1a 	beq.w	8003222 <_printf_float+0xb6>
 80033ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80033f2:	4313      	orrs	r3, r2
 80033f4:	d102      	bne.n	80033fc <_printf_float+0x290>
 80033f6:	6823      	ldr	r3, [r4, #0]
 80033f8:	07d9      	lsls	r1, r3, #31
 80033fa:	d5d8      	bpl.n	80033ae <_printf_float+0x242>
 80033fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003400:	4631      	mov	r1, r6
 8003402:	4628      	mov	r0, r5
 8003404:	47b8      	blx	r7
 8003406:	3001      	adds	r0, #1
 8003408:	f43f af0b 	beq.w	8003222 <_printf_float+0xb6>
 800340c:	f04f 0900 	mov.w	r9, #0
 8003410:	f104 0a1a 	add.w	sl, r4, #26
 8003414:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003416:	425b      	negs	r3, r3
 8003418:	454b      	cmp	r3, r9
 800341a:	dc01      	bgt.n	8003420 <_printf_float+0x2b4>
 800341c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800341e:	e794      	b.n	800334a <_printf_float+0x1de>
 8003420:	2301      	movs	r3, #1
 8003422:	4652      	mov	r2, sl
 8003424:	4631      	mov	r1, r6
 8003426:	4628      	mov	r0, r5
 8003428:	47b8      	blx	r7
 800342a:	3001      	adds	r0, #1
 800342c:	f43f aef9 	beq.w	8003222 <_printf_float+0xb6>
 8003430:	f109 0901 	add.w	r9, r9, #1
 8003434:	e7ee      	b.n	8003414 <_printf_float+0x2a8>
 8003436:	bf00      	nop
 8003438:	7fefffff 	.word	0x7fefffff
 800343c:	0800756c 	.word	0x0800756c
 8003440:	08007570 	.word	0x08007570
 8003444:	08007578 	.word	0x08007578
 8003448:	08007574 	.word	0x08007574
 800344c:	0800757c 	.word	0x0800757c
 8003450:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003452:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003454:	429a      	cmp	r2, r3
 8003456:	bfa8      	it	ge
 8003458:	461a      	movge	r2, r3
 800345a:	2a00      	cmp	r2, #0
 800345c:	4691      	mov	r9, r2
 800345e:	dc37      	bgt.n	80034d0 <_printf_float+0x364>
 8003460:	f04f 0b00 	mov.w	fp, #0
 8003464:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003468:	f104 021a 	add.w	r2, r4, #26
 800346c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003470:	ebaa 0309 	sub.w	r3, sl, r9
 8003474:	455b      	cmp	r3, fp
 8003476:	dc33      	bgt.n	80034e0 <_printf_float+0x374>
 8003478:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800347c:	429a      	cmp	r2, r3
 800347e:	db3b      	blt.n	80034f8 <_printf_float+0x38c>
 8003480:	6823      	ldr	r3, [r4, #0]
 8003482:	07da      	lsls	r2, r3, #31
 8003484:	d438      	bmi.n	80034f8 <_printf_float+0x38c>
 8003486:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003488:	990d      	ldr	r1, [sp, #52]	; 0x34
 800348a:	eba2 030a 	sub.w	r3, r2, sl
 800348e:	eba2 0901 	sub.w	r9, r2, r1
 8003492:	4599      	cmp	r9, r3
 8003494:	bfa8      	it	ge
 8003496:	4699      	movge	r9, r3
 8003498:	f1b9 0f00 	cmp.w	r9, #0
 800349c:	dc34      	bgt.n	8003508 <_printf_float+0x39c>
 800349e:	f04f 0800 	mov.w	r8, #0
 80034a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80034a6:	f104 0a1a 	add.w	sl, r4, #26
 80034aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	eba3 0309 	sub.w	r3, r3, r9
 80034b4:	4543      	cmp	r3, r8
 80034b6:	f77f af7a 	ble.w	80033ae <_printf_float+0x242>
 80034ba:	2301      	movs	r3, #1
 80034bc:	4652      	mov	r2, sl
 80034be:	4631      	mov	r1, r6
 80034c0:	4628      	mov	r0, r5
 80034c2:	47b8      	blx	r7
 80034c4:	3001      	adds	r0, #1
 80034c6:	f43f aeac 	beq.w	8003222 <_printf_float+0xb6>
 80034ca:	f108 0801 	add.w	r8, r8, #1
 80034ce:	e7ec      	b.n	80034aa <_printf_float+0x33e>
 80034d0:	4613      	mov	r3, r2
 80034d2:	4631      	mov	r1, r6
 80034d4:	4642      	mov	r2, r8
 80034d6:	4628      	mov	r0, r5
 80034d8:	47b8      	blx	r7
 80034da:	3001      	adds	r0, #1
 80034dc:	d1c0      	bne.n	8003460 <_printf_float+0x2f4>
 80034de:	e6a0      	b.n	8003222 <_printf_float+0xb6>
 80034e0:	2301      	movs	r3, #1
 80034e2:	4631      	mov	r1, r6
 80034e4:	4628      	mov	r0, r5
 80034e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80034e8:	47b8      	blx	r7
 80034ea:	3001      	adds	r0, #1
 80034ec:	f43f ae99 	beq.w	8003222 <_printf_float+0xb6>
 80034f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80034f2:	f10b 0b01 	add.w	fp, fp, #1
 80034f6:	e7b9      	b.n	800346c <_printf_float+0x300>
 80034f8:	4631      	mov	r1, r6
 80034fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034fe:	4628      	mov	r0, r5
 8003500:	47b8      	blx	r7
 8003502:	3001      	adds	r0, #1
 8003504:	d1bf      	bne.n	8003486 <_printf_float+0x31a>
 8003506:	e68c      	b.n	8003222 <_printf_float+0xb6>
 8003508:	464b      	mov	r3, r9
 800350a:	4631      	mov	r1, r6
 800350c:	4628      	mov	r0, r5
 800350e:	eb08 020a 	add.w	r2, r8, sl
 8003512:	47b8      	blx	r7
 8003514:	3001      	adds	r0, #1
 8003516:	d1c2      	bne.n	800349e <_printf_float+0x332>
 8003518:	e683      	b.n	8003222 <_printf_float+0xb6>
 800351a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800351c:	2a01      	cmp	r2, #1
 800351e:	dc01      	bgt.n	8003524 <_printf_float+0x3b8>
 8003520:	07db      	lsls	r3, r3, #31
 8003522:	d537      	bpl.n	8003594 <_printf_float+0x428>
 8003524:	2301      	movs	r3, #1
 8003526:	4642      	mov	r2, r8
 8003528:	4631      	mov	r1, r6
 800352a:	4628      	mov	r0, r5
 800352c:	47b8      	blx	r7
 800352e:	3001      	adds	r0, #1
 8003530:	f43f ae77 	beq.w	8003222 <_printf_float+0xb6>
 8003534:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003538:	4631      	mov	r1, r6
 800353a:	4628      	mov	r0, r5
 800353c:	47b8      	blx	r7
 800353e:	3001      	adds	r0, #1
 8003540:	f43f ae6f 	beq.w	8003222 <_printf_float+0xb6>
 8003544:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003548:	2200      	movs	r2, #0
 800354a:	2300      	movs	r3, #0
 800354c:	f7fd fa36 	bl	80009bc <__aeabi_dcmpeq>
 8003550:	b9d8      	cbnz	r0, 800358a <_printf_float+0x41e>
 8003552:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003554:	f108 0201 	add.w	r2, r8, #1
 8003558:	3b01      	subs	r3, #1
 800355a:	4631      	mov	r1, r6
 800355c:	4628      	mov	r0, r5
 800355e:	47b8      	blx	r7
 8003560:	3001      	adds	r0, #1
 8003562:	d10e      	bne.n	8003582 <_printf_float+0x416>
 8003564:	e65d      	b.n	8003222 <_printf_float+0xb6>
 8003566:	2301      	movs	r3, #1
 8003568:	464a      	mov	r2, r9
 800356a:	4631      	mov	r1, r6
 800356c:	4628      	mov	r0, r5
 800356e:	47b8      	blx	r7
 8003570:	3001      	adds	r0, #1
 8003572:	f43f ae56 	beq.w	8003222 <_printf_float+0xb6>
 8003576:	f108 0801 	add.w	r8, r8, #1
 800357a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800357c:	3b01      	subs	r3, #1
 800357e:	4543      	cmp	r3, r8
 8003580:	dcf1      	bgt.n	8003566 <_printf_float+0x3fa>
 8003582:	4653      	mov	r3, sl
 8003584:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003588:	e6e0      	b.n	800334c <_printf_float+0x1e0>
 800358a:	f04f 0800 	mov.w	r8, #0
 800358e:	f104 091a 	add.w	r9, r4, #26
 8003592:	e7f2      	b.n	800357a <_printf_float+0x40e>
 8003594:	2301      	movs	r3, #1
 8003596:	4642      	mov	r2, r8
 8003598:	e7df      	b.n	800355a <_printf_float+0x3ee>
 800359a:	2301      	movs	r3, #1
 800359c:	464a      	mov	r2, r9
 800359e:	4631      	mov	r1, r6
 80035a0:	4628      	mov	r0, r5
 80035a2:	47b8      	blx	r7
 80035a4:	3001      	adds	r0, #1
 80035a6:	f43f ae3c 	beq.w	8003222 <_printf_float+0xb6>
 80035aa:	f108 0801 	add.w	r8, r8, #1
 80035ae:	68e3      	ldr	r3, [r4, #12]
 80035b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80035b2:	1a5b      	subs	r3, r3, r1
 80035b4:	4543      	cmp	r3, r8
 80035b6:	dcf0      	bgt.n	800359a <_printf_float+0x42e>
 80035b8:	e6fd      	b.n	80033b6 <_printf_float+0x24a>
 80035ba:	f04f 0800 	mov.w	r8, #0
 80035be:	f104 0919 	add.w	r9, r4, #25
 80035c2:	e7f4      	b.n	80035ae <_printf_float+0x442>

080035c4 <_printf_common>:
 80035c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035c8:	4616      	mov	r6, r2
 80035ca:	4699      	mov	r9, r3
 80035cc:	688a      	ldr	r2, [r1, #8]
 80035ce:	690b      	ldr	r3, [r1, #16]
 80035d0:	4607      	mov	r7, r0
 80035d2:	4293      	cmp	r3, r2
 80035d4:	bfb8      	it	lt
 80035d6:	4613      	movlt	r3, r2
 80035d8:	6033      	str	r3, [r6, #0]
 80035da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035de:	460c      	mov	r4, r1
 80035e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035e4:	b10a      	cbz	r2, 80035ea <_printf_common+0x26>
 80035e6:	3301      	adds	r3, #1
 80035e8:	6033      	str	r3, [r6, #0]
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	0699      	lsls	r1, r3, #26
 80035ee:	bf42      	ittt	mi
 80035f0:	6833      	ldrmi	r3, [r6, #0]
 80035f2:	3302      	addmi	r3, #2
 80035f4:	6033      	strmi	r3, [r6, #0]
 80035f6:	6825      	ldr	r5, [r4, #0]
 80035f8:	f015 0506 	ands.w	r5, r5, #6
 80035fc:	d106      	bne.n	800360c <_printf_common+0x48>
 80035fe:	f104 0a19 	add.w	sl, r4, #25
 8003602:	68e3      	ldr	r3, [r4, #12]
 8003604:	6832      	ldr	r2, [r6, #0]
 8003606:	1a9b      	subs	r3, r3, r2
 8003608:	42ab      	cmp	r3, r5
 800360a:	dc28      	bgt.n	800365e <_printf_common+0x9a>
 800360c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003610:	1e13      	subs	r3, r2, #0
 8003612:	6822      	ldr	r2, [r4, #0]
 8003614:	bf18      	it	ne
 8003616:	2301      	movne	r3, #1
 8003618:	0692      	lsls	r2, r2, #26
 800361a:	d42d      	bmi.n	8003678 <_printf_common+0xb4>
 800361c:	4649      	mov	r1, r9
 800361e:	4638      	mov	r0, r7
 8003620:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003624:	47c0      	blx	r8
 8003626:	3001      	adds	r0, #1
 8003628:	d020      	beq.n	800366c <_printf_common+0xa8>
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	68e5      	ldr	r5, [r4, #12]
 800362e:	f003 0306 	and.w	r3, r3, #6
 8003632:	2b04      	cmp	r3, #4
 8003634:	bf18      	it	ne
 8003636:	2500      	movne	r5, #0
 8003638:	6832      	ldr	r2, [r6, #0]
 800363a:	f04f 0600 	mov.w	r6, #0
 800363e:	68a3      	ldr	r3, [r4, #8]
 8003640:	bf08      	it	eq
 8003642:	1aad      	subeq	r5, r5, r2
 8003644:	6922      	ldr	r2, [r4, #16]
 8003646:	bf08      	it	eq
 8003648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800364c:	4293      	cmp	r3, r2
 800364e:	bfc4      	itt	gt
 8003650:	1a9b      	subgt	r3, r3, r2
 8003652:	18ed      	addgt	r5, r5, r3
 8003654:	341a      	adds	r4, #26
 8003656:	42b5      	cmp	r5, r6
 8003658:	d11a      	bne.n	8003690 <_printf_common+0xcc>
 800365a:	2000      	movs	r0, #0
 800365c:	e008      	b.n	8003670 <_printf_common+0xac>
 800365e:	2301      	movs	r3, #1
 8003660:	4652      	mov	r2, sl
 8003662:	4649      	mov	r1, r9
 8003664:	4638      	mov	r0, r7
 8003666:	47c0      	blx	r8
 8003668:	3001      	adds	r0, #1
 800366a:	d103      	bne.n	8003674 <_printf_common+0xb0>
 800366c:	f04f 30ff 	mov.w	r0, #4294967295
 8003670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003674:	3501      	adds	r5, #1
 8003676:	e7c4      	b.n	8003602 <_printf_common+0x3e>
 8003678:	2030      	movs	r0, #48	; 0x30
 800367a:	18e1      	adds	r1, r4, r3
 800367c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003686:	4422      	add	r2, r4
 8003688:	3302      	adds	r3, #2
 800368a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800368e:	e7c5      	b.n	800361c <_printf_common+0x58>
 8003690:	2301      	movs	r3, #1
 8003692:	4622      	mov	r2, r4
 8003694:	4649      	mov	r1, r9
 8003696:	4638      	mov	r0, r7
 8003698:	47c0      	blx	r8
 800369a:	3001      	adds	r0, #1
 800369c:	d0e6      	beq.n	800366c <_printf_common+0xa8>
 800369e:	3601      	adds	r6, #1
 80036a0:	e7d9      	b.n	8003656 <_printf_common+0x92>
	...

080036a4 <_printf_i>:
 80036a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036a8:	460c      	mov	r4, r1
 80036aa:	7e27      	ldrb	r7, [r4, #24]
 80036ac:	4691      	mov	r9, r2
 80036ae:	2f78      	cmp	r7, #120	; 0x78
 80036b0:	4680      	mov	r8, r0
 80036b2:	469a      	mov	sl, r3
 80036b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80036b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036ba:	d807      	bhi.n	80036cc <_printf_i+0x28>
 80036bc:	2f62      	cmp	r7, #98	; 0x62
 80036be:	d80a      	bhi.n	80036d6 <_printf_i+0x32>
 80036c0:	2f00      	cmp	r7, #0
 80036c2:	f000 80d9 	beq.w	8003878 <_printf_i+0x1d4>
 80036c6:	2f58      	cmp	r7, #88	; 0x58
 80036c8:	f000 80a4 	beq.w	8003814 <_printf_i+0x170>
 80036cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80036d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036d4:	e03a      	b.n	800374c <_printf_i+0xa8>
 80036d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036da:	2b15      	cmp	r3, #21
 80036dc:	d8f6      	bhi.n	80036cc <_printf_i+0x28>
 80036de:	a001      	add	r0, pc, #4	; (adr r0, 80036e4 <_printf_i+0x40>)
 80036e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80036e4:	0800373d 	.word	0x0800373d
 80036e8:	08003751 	.word	0x08003751
 80036ec:	080036cd 	.word	0x080036cd
 80036f0:	080036cd 	.word	0x080036cd
 80036f4:	080036cd 	.word	0x080036cd
 80036f8:	080036cd 	.word	0x080036cd
 80036fc:	08003751 	.word	0x08003751
 8003700:	080036cd 	.word	0x080036cd
 8003704:	080036cd 	.word	0x080036cd
 8003708:	080036cd 	.word	0x080036cd
 800370c:	080036cd 	.word	0x080036cd
 8003710:	0800385f 	.word	0x0800385f
 8003714:	08003781 	.word	0x08003781
 8003718:	08003841 	.word	0x08003841
 800371c:	080036cd 	.word	0x080036cd
 8003720:	080036cd 	.word	0x080036cd
 8003724:	08003881 	.word	0x08003881
 8003728:	080036cd 	.word	0x080036cd
 800372c:	08003781 	.word	0x08003781
 8003730:	080036cd 	.word	0x080036cd
 8003734:	080036cd 	.word	0x080036cd
 8003738:	08003849 	.word	0x08003849
 800373c:	680b      	ldr	r3, [r1, #0]
 800373e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003742:	1d1a      	adds	r2, r3, #4
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	600a      	str	r2, [r1, #0]
 8003748:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800374c:	2301      	movs	r3, #1
 800374e:	e0a4      	b.n	800389a <_printf_i+0x1f6>
 8003750:	6825      	ldr	r5, [r4, #0]
 8003752:	6808      	ldr	r0, [r1, #0]
 8003754:	062e      	lsls	r6, r5, #24
 8003756:	f100 0304 	add.w	r3, r0, #4
 800375a:	d50a      	bpl.n	8003772 <_printf_i+0xce>
 800375c:	6805      	ldr	r5, [r0, #0]
 800375e:	600b      	str	r3, [r1, #0]
 8003760:	2d00      	cmp	r5, #0
 8003762:	da03      	bge.n	800376c <_printf_i+0xc8>
 8003764:	232d      	movs	r3, #45	; 0x2d
 8003766:	426d      	negs	r5, r5
 8003768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800376c:	230a      	movs	r3, #10
 800376e:	485e      	ldr	r0, [pc, #376]	; (80038e8 <_printf_i+0x244>)
 8003770:	e019      	b.n	80037a6 <_printf_i+0x102>
 8003772:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003776:	6805      	ldr	r5, [r0, #0]
 8003778:	600b      	str	r3, [r1, #0]
 800377a:	bf18      	it	ne
 800377c:	b22d      	sxthne	r5, r5
 800377e:	e7ef      	b.n	8003760 <_printf_i+0xbc>
 8003780:	680b      	ldr	r3, [r1, #0]
 8003782:	6825      	ldr	r5, [r4, #0]
 8003784:	1d18      	adds	r0, r3, #4
 8003786:	6008      	str	r0, [r1, #0]
 8003788:	0628      	lsls	r0, r5, #24
 800378a:	d501      	bpl.n	8003790 <_printf_i+0xec>
 800378c:	681d      	ldr	r5, [r3, #0]
 800378e:	e002      	b.n	8003796 <_printf_i+0xf2>
 8003790:	0669      	lsls	r1, r5, #25
 8003792:	d5fb      	bpl.n	800378c <_printf_i+0xe8>
 8003794:	881d      	ldrh	r5, [r3, #0]
 8003796:	2f6f      	cmp	r7, #111	; 0x6f
 8003798:	bf0c      	ite	eq
 800379a:	2308      	moveq	r3, #8
 800379c:	230a      	movne	r3, #10
 800379e:	4852      	ldr	r0, [pc, #328]	; (80038e8 <_printf_i+0x244>)
 80037a0:	2100      	movs	r1, #0
 80037a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037a6:	6866      	ldr	r6, [r4, #4]
 80037a8:	2e00      	cmp	r6, #0
 80037aa:	bfa8      	it	ge
 80037ac:	6821      	ldrge	r1, [r4, #0]
 80037ae:	60a6      	str	r6, [r4, #8]
 80037b0:	bfa4      	itt	ge
 80037b2:	f021 0104 	bicge.w	r1, r1, #4
 80037b6:	6021      	strge	r1, [r4, #0]
 80037b8:	b90d      	cbnz	r5, 80037be <_printf_i+0x11a>
 80037ba:	2e00      	cmp	r6, #0
 80037bc:	d04d      	beq.n	800385a <_printf_i+0x1b6>
 80037be:	4616      	mov	r6, r2
 80037c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80037c4:	fb03 5711 	mls	r7, r3, r1, r5
 80037c8:	5dc7      	ldrb	r7, [r0, r7]
 80037ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80037ce:	462f      	mov	r7, r5
 80037d0:	42bb      	cmp	r3, r7
 80037d2:	460d      	mov	r5, r1
 80037d4:	d9f4      	bls.n	80037c0 <_printf_i+0x11c>
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d10b      	bne.n	80037f2 <_printf_i+0x14e>
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	07df      	lsls	r7, r3, #31
 80037de:	d508      	bpl.n	80037f2 <_printf_i+0x14e>
 80037e0:	6923      	ldr	r3, [r4, #16]
 80037e2:	6861      	ldr	r1, [r4, #4]
 80037e4:	4299      	cmp	r1, r3
 80037e6:	bfde      	ittt	le
 80037e8:	2330      	movle	r3, #48	; 0x30
 80037ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80037ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80037f2:	1b92      	subs	r2, r2, r6
 80037f4:	6122      	str	r2, [r4, #16]
 80037f6:	464b      	mov	r3, r9
 80037f8:	4621      	mov	r1, r4
 80037fa:	4640      	mov	r0, r8
 80037fc:	f8cd a000 	str.w	sl, [sp]
 8003800:	aa03      	add	r2, sp, #12
 8003802:	f7ff fedf 	bl	80035c4 <_printf_common>
 8003806:	3001      	adds	r0, #1
 8003808:	d14c      	bne.n	80038a4 <_printf_i+0x200>
 800380a:	f04f 30ff 	mov.w	r0, #4294967295
 800380e:	b004      	add	sp, #16
 8003810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003814:	4834      	ldr	r0, [pc, #208]	; (80038e8 <_printf_i+0x244>)
 8003816:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800381a:	680e      	ldr	r6, [r1, #0]
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003822:	061f      	lsls	r7, r3, #24
 8003824:	600e      	str	r6, [r1, #0]
 8003826:	d514      	bpl.n	8003852 <_printf_i+0x1ae>
 8003828:	07d9      	lsls	r1, r3, #31
 800382a:	bf44      	itt	mi
 800382c:	f043 0320 	orrmi.w	r3, r3, #32
 8003830:	6023      	strmi	r3, [r4, #0]
 8003832:	b91d      	cbnz	r5, 800383c <_printf_i+0x198>
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	f023 0320 	bic.w	r3, r3, #32
 800383a:	6023      	str	r3, [r4, #0]
 800383c:	2310      	movs	r3, #16
 800383e:	e7af      	b.n	80037a0 <_printf_i+0xfc>
 8003840:	6823      	ldr	r3, [r4, #0]
 8003842:	f043 0320 	orr.w	r3, r3, #32
 8003846:	6023      	str	r3, [r4, #0]
 8003848:	2378      	movs	r3, #120	; 0x78
 800384a:	4828      	ldr	r0, [pc, #160]	; (80038ec <_printf_i+0x248>)
 800384c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003850:	e7e3      	b.n	800381a <_printf_i+0x176>
 8003852:	065e      	lsls	r6, r3, #25
 8003854:	bf48      	it	mi
 8003856:	b2ad      	uxthmi	r5, r5
 8003858:	e7e6      	b.n	8003828 <_printf_i+0x184>
 800385a:	4616      	mov	r6, r2
 800385c:	e7bb      	b.n	80037d6 <_printf_i+0x132>
 800385e:	680b      	ldr	r3, [r1, #0]
 8003860:	6826      	ldr	r6, [r4, #0]
 8003862:	1d1d      	adds	r5, r3, #4
 8003864:	6960      	ldr	r0, [r4, #20]
 8003866:	600d      	str	r5, [r1, #0]
 8003868:	0635      	lsls	r5, r6, #24
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	d501      	bpl.n	8003872 <_printf_i+0x1ce>
 800386e:	6018      	str	r0, [r3, #0]
 8003870:	e002      	b.n	8003878 <_printf_i+0x1d4>
 8003872:	0671      	lsls	r1, r6, #25
 8003874:	d5fb      	bpl.n	800386e <_printf_i+0x1ca>
 8003876:	8018      	strh	r0, [r3, #0]
 8003878:	2300      	movs	r3, #0
 800387a:	4616      	mov	r6, r2
 800387c:	6123      	str	r3, [r4, #16]
 800387e:	e7ba      	b.n	80037f6 <_printf_i+0x152>
 8003880:	680b      	ldr	r3, [r1, #0]
 8003882:	1d1a      	adds	r2, r3, #4
 8003884:	600a      	str	r2, [r1, #0]
 8003886:	681e      	ldr	r6, [r3, #0]
 8003888:	2100      	movs	r1, #0
 800388a:	4630      	mov	r0, r6
 800388c:	6862      	ldr	r2, [r4, #4]
 800388e:	f002 f907 	bl	8005aa0 <memchr>
 8003892:	b108      	cbz	r0, 8003898 <_printf_i+0x1f4>
 8003894:	1b80      	subs	r0, r0, r6
 8003896:	6060      	str	r0, [r4, #4]
 8003898:	6863      	ldr	r3, [r4, #4]
 800389a:	6123      	str	r3, [r4, #16]
 800389c:	2300      	movs	r3, #0
 800389e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038a2:	e7a8      	b.n	80037f6 <_printf_i+0x152>
 80038a4:	4632      	mov	r2, r6
 80038a6:	4649      	mov	r1, r9
 80038a8:	4640      	mov	r0, r8
 80038aa:	6923      	ldr	r3, [r4, #16]
 80038ac:	47d0      	blx	sl
 80038ae:	3001      	adds	r0, #1
 80038b0:	d0ab      	beq.n	800380a <_printf_i+0x166>
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	079b      	lsls	r3, r3, #30
 80038b6:	d413      	bmi.n	80038e0 <_printf_i+0x23c>
 80038b8:	68e0      	ldr	r0, [r4, #12]
 80038ba:	9b03      	ldr	r3, [sp, #12]
 80038bc:	4298      	cmp	r0, r3
 80038be:	bfb8      	it	lt
 80038c0:	4618      	movlt	r0, r3
 80038c2:	e7a4      	b.n	800380e <_printf_i+0x16a>
 80038c4:	2301      	movs	r3, #1
 80038c6:	4632      	mov	r2, r6
 80038c8:	4649      	mov	r1, r9
 80038ca:	4640      	mov	r0, r8
 80038cc:	47d0      	blx	sl
 80038ce:	3001      	adds	r0, #1
 80038d0:	d09b      	beq.n	800380a <_printf_i+0x166>
 80038d2:	3501      	adds	r5, #1
 80038d4:	68e3      	ldr	r3, [r4, #12]
 80038d6:	9903      	ldr	r1, [sp, #12]
 80038d8:	1a5b      	subs	r3, r3, r1
 80038da:	42ab      	cmp	r3, r5
 80038dc:	dcf2      	bgt.n	80038c4 <_printf_i+0x220>
 80038de:	e7eb      	b.n	80038b8 <_printf_i+0x214>
 80038e0:	2500      	movs	r5, #0
 80038e2:	f104 0619 	add.w	r6, r4, #25
 80038e6:	e7f5      	b.n	80038d4 <_printf_i+0x230>
 80038e8:	0800757e 	.word	0x0800757e
 80038ec:	0800758f 	.word	0x0800758f

080038f0 <siprintf>:
 80038f0:	b40e      	push	{r1, r2, r3}
 80038f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038f6:	b500      	push	{lr}
 80038f8:	b09c      	sub	sp, #112	; 0x70
 80038fa:	ab1d      	add	r3, sp, #116	; 0x74
 80038fc:	9002      	str	r0, [sp, #8]
 80038fe:	9006      	str	r0, [sp, #24]
 8003900:	9107      	str	r1, [sp, #28]
 8003902:	9104      	str	r1, [sp, #16]
 8003904:	4808      	ldr	r0, [pc, #32]	; (8003928 <siprintf+0x38>)
 8003906:	4909      	ldr	r1, [pc, #36]	; (800392c <siprintf+0x3c>)
 8003908:	f853 2b04 	ldr.w	r2, [r3], #4
 800390c:	9105      	str	r1, [sp, #20]
 800390e:	6800      	ldr	r0, [r0, #0]
 8003910:	a902      	add	r1, sp, #8
 8003912:	9301      	str	r3, [sp, #4]
 8003914:	f002 fea8 	bl	8006668 <_svfiprintf_r>
 8003918:	2200      	movs	r2, #0
 800391a:	9b02      	ldr	r3, [sp, #8]
 800391c:	701a      	strb	r2, [r3, #0]
 800391e:	b01c      	add	sp, #112	; 0x70
 8003920:	f85d eb04 	ldr.w	lr, [sp], #4
 8003924:	b003      	add	sp, #12
 8003926:	4770      	bx	lr
 8003928:	2000002c 	.word	0x2000002c
 800392c:	ffff0208 	.word	0xffff0208

08003930 <strcpy>:
 8003930:	4603      	mov	r3, r0
 8003932:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003936:	f803 2b01 	strb.w	r2, [r3], #1
 800393a:	2a00      	cmp	r2, #0
 800393c:	d1f9      	bne.n	8003932 <strcpy+0x2>
 800393e:	4770      	bx	lr

08003940 <sulp>:
 8003940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003944:	460f      	mov	r7, r1
 8003946:	4690      	mov	r8, r2
 8003948:	f002 fc36 	bl	80061b8 <__ulp>
 800394c:	4604      	mov	r4, r0
 800394e:	460d      	mov	r5, r1
 8003950:	f1b8 0f00 	cmp.w	r8, #0
 8003954:	d011      	beq.n	800397a <sulp+0x3a>
 8003956:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800395a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800395e:	2b00      	cmp	r3, #0
 8003960:	dd0b      	ble.n	800397a <sulp+0x3a>
 8003962:	2400      	movs	r4, #0
 8003964:	051b      	lsls	r3, r3, #20
 8003966:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800396a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800396e:	4622      	mov	r2, r4
 8003970:	462b      	mov	r3, r5
 8003972:	f7fc fdbb 	bl	80004ec <__aeabi_dmul>
 8003976:	4604      	mov	r4, r0
 8003978:	460d      	mov	r5, r1
 800397a:	4620      	mov	r0, r4
 800397c:	4629      	mov	r1, r5
 800397e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003982:	0000      	movs	r0, r0
 8003984:	0000      	movs	r0, r0
	...

08003988 <_strtod_l>:
 8003988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800398c:	469b      	mov	fp, r3
 800398e:	2300      	movs	r3, #0
 8003990:	b0a1      	sub	sp, #132	; 0x84
 8003992:	931c      	str	r3, [sp, #112]	; 0x70
 8003994:	4ba1      	ldr	r3, [pc, #644]	; (8003c1c <_strtod_l+0x294>)
 8003996:	4682      	mov	sl, r0
 8003998:	681f      	ldr	r7, [r3, #0]
 800399a:	460e      	mov	r6, r1
 800399c:	4638      	mov	r0, r7
 800399e:	9217      	str	r2, [sp, #92]	; 0x5c
 80039a0:	f7fc fbe0 	bl	8000164 <strlen>
 80039a4:	f04f 0800 	mov.w	r8, #0
 80039a8:	4604      	mov	r4, r0
 80039aa:	f04f 0900 	mov.w	r9, #0
 80039ae:	961b      	str	r6, [sp, #108]	; 0x6c
 80039b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80039b2:	781a      	ldrb	r2, [r3, #0]
 80039b4:	2a2b      	cmp	r2, #43	; 0x2b
 80039b6:	d04c      	beq.n	8003a52 <_strtod_l+0xca>
 80039b8:	d83a      	bhi.n	8003a30 <_strtod_l+0xa8>
 80039ba:	2a0d      	cmp	r2, #13
 80039bc:	d833      	bhi.n	8003a26 <_strtod_l+0x9e>
 80039be:	2a08      	cmp	r2, #8
 80039c0:	d833      	bhi.n	8003a2a <_strtod_l+0xa2>
 80039c2:	2a00      	cmp	r2, #0
 80039c4:	d03d      	beq.n	8003a42 <_strtod_l+0xba>
 80039c6:	2300      	movs	r3, #0
 80039c8:	930c      	str	r3, [sp, #48]	; 0x30
 80039ca:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80039cc:	782b      	ldrb	r3, [r5, #0]
 80039ce:	2b30      	cmp	r3, #48	; 0x30
 80039d0:	f040 80af 	bne.w	8003b32 <_strtod_l+0x1aa>
 80039d4:	786b      	ldrb	r3, [r5, #1]
 80039d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80039da:	2b58      	cmp	r3, #88	; 0x58
 80039dc:	d16c      	bne.n	8003ab8 <_strtod_l+0x130>
 80039de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039e0:	4650      	mov	r0, sl
 80039e2:	9301      	str	r3, [sp, #4]
 80039e4:	ab1c      	add	r3, sp, #112	; 0x70
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	4a8d      	ldr	r2, [pc, #564]	; (8003c20 <_strtod_l+0x298>)
 80039ea:	f8cd b008 	str.w	fp, [sp, #8]
 80039ee:	ab1d      	add	r3, sp, #116	; 0x74
 80039f0:	a91b      	add	r1, sp, #108	; 0x6c
 80039f2:	f001 fd39 	bl	8005468 <__gethex>
 80039f6:	f010 0607 	ands.w	r6, r0, #7
 80039fa:	4604      	mov	r4, r0
 80039fc:	d005      	beq.n	8003a0a <_strtod_l+0x82>
 80039fe:	2e06      	cmp	r6, #6
 8003a00:	d129      	bne.n	8003a56 <_strtod_l+0xce>
 8003a02:	2300      	movs	r3, #0
 8003a04:	3501      	adds	r5, #1
 8003a06:	951b      	str	r5, [sp, #108]	; 0x6c
 8003a08:	930c      	str	r3, [sp, #48]	; 0x30
 8003a0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f040 8596 	bne.w	800453e <_strtod_l+0xbb6>
 8003a12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a14:	b1d3      	cbz	r3, 8003a4c <_strtod_l+0xc4>
 8003a16:	4642      	mov	r2, r8
 8003a18:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003a1c:	4610      	mov	r0, r2
 8003a1e:	4619      	mov	r1, r3
 8003a20:	b021      	add	sp, #132	; 0x84
 8003a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a26:	2a20      	cmp	r2, #32
 8003a28:	d1cd      	bne.n	80039c6 <_strtod_l+0x3e>
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	931b      	str	r3, [sp, #108]	; 0x6c
 8003a2e:	e7bf      	b.n	80039b0 <_strtod_l+0x28>
 8003a30:	2a2d      	cmp	r2, #45	; 0x2d
 8003a32:	d1c8      	bne.n	80039c6 <_strtod_l+0x3e>
 8003a34:	2201      	movs	r2, #1
 8003a36:	920c      	str	r2, [sp, #48]	; 0x30
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	921b      	str	r2, [sp, #108]	; 0x6c
 8003a3c:	785b      	ldrb	r3, [r3, #1]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1c3      	bne.n	80039ca <_strtod_l+0x42>
 8003a42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003a44:	961b      	str	r6, [sp, #108]	; 0x6c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f040 8577 	bne.w	800453a <_strtod_l+0xbb2>
 8003a4c:	4642      	mov	r2, r8
 8003a4e:	464b      	mov	r3, r9
 8003a50:	e7e4      	b.n	8003a1c <_strtod_l+0x94>
 8003a52:	2200      	movs	r2, #0
 8003a54:	e7ef      	b.n	8003a36 <_strtod_l+0xae>
 8003a56:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003a58:	b13a      	cbz	r2, 8003a6a <_strtod_l+0xe2>
 8003a5a:	2135      	movs	r1, #53	; 0x35
 8003a5c:	a81e      	add	r0, sp, #120	; 0x78
 8003a5e:	f002 fcaf 	bl	80063c0 <__copybits>
 8003a62:	4650      	mov	r0, sl
 8003a64:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003a66:	f002 f877 	bl	8005b58 <_Bfree>
 8003a6a:	3e01      	subs	r6, #1
 8003a6c:	2e05      	cmp	r6, #5
 8003a6e:	d807      	bhi.n	8003a80 <_strtod_l+0xf8>
 8003a70:	e8df f006 	tbb	[pc, r6]
 8003a74:	1d180b0e 	.word	0x1d180b0e
 8003a78:	030e      	.short	0x030e
 8003a7a:	f04f 0900 	mov.w	r9, #0
 8003a7e:	46c8      	mov	r8, r9
 8003a80:	0721      	lsls	r1, r4, #28
 8003a82:	d5c2      	bpl.n	8003a0a <_strtod_l+0x82>
 8003a84:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8003a88:	e7bf      	b.n	8003a0a <_strtod_l+0x82>
 8003a8a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8003a8e:	e7f7      	b.n	8003a80 <_strtod_l+0xf8>
 8003a90:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003a92:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8003a96:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003a9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003a9e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8003aa2:	e7ed      	b.n	8003a80 <_strtod_l+0xf8>
 8003aa4:	f04f 0800 	mov.w	r8, #0
 8003aa8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8003c24 <_strtod_l+0x29c>
 8003aac:	e7e8      	b.n	8003a80 <_strtod_l+0xf8>
 8003aae:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8003ab2:	f04f 38ff 	mov.w	r8, #4294967295
 8003ab6:	e7e3      	b.n	8003a80 <_strtod_l+0xf8>
 8003ab8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	921b      	str	r2, [sp, #108]	; 0x6c
 8003abe:	785b      	ldrb	r3, [r3, #1]
 8003ac0:	2b30      	cmp	r3, #48	; 0x30
 8003ac2:	d0f9      	beq.n	8003ab8 <_strtod_l+0x130>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0a0      	beq.n	8003a0a <_strtod_l+0x82>
 8003ac8:	2301      	movs	r3, #1
 8003aca:	9307      	str	r3, [sp, #28]
 8003acc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003ace:	220a      	movs	r2, #10
 8003ad0:	9308      	str	r3, [sp, #32]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	469b      	mov	fp, r3
 8003ad6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003ada:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8003adc:	7805      	ldrb	r5, [r0, #0]
 8003ade:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003ae2:	b2d9      	uxtb	r1, r3
 8003ae4:	2909      	cmp	r1, #9
 8003ae6:	d926      	bls.n	8003b36 <_strtod_l+0x1ae>
 8003ae8:	4622      	mov	r2, r4
 8003aea:	4639      	mov	r1, r7
 8003aec:	f003 f82a 	bl	8006b44 <strncmp>
 8003af0:	2800      	cmp	r0, #0
 8003af2:	d032      	beq.n	8003b5a <_strtod_l+0x1d2>
 8003af4:	2000      	movs	r0, #0
 8003af6:	462b      	mov	r3, r5
 8003af8:	465c      	mov	r4, fp
 8003afa:	4602      	mov	r2, r0
 8003afc:	9004      	str	r0, [sp, #16]
 8003afe:	2b65      	cmp	r3, #101	; 0x65
 8003b00:	d001      	beq.n	8003b06 <_strtod_l+0x17e>
 8003b02:	2b45      	cmp	r3, #69	; 0x45
 8003b04:	d113      	bne.n	8003b2e <_strtod_l+0x1a6>
 8003b06:	b91c      	cbnz	r4, 8003b10 <_strtod_l+0x188>
 8003b08:	9b07      	ldr	r3, [sp, #28]
 8003b0a:	4303      	orrs	r3, r0
 8003b0c:	d099      	beq.n	8003a42 <_strtod_l+0xba>
 8003b0e:	2400      	movs	r4, #0
 8003b10:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8003b12:	1c73      	adds	r3, r6, #1
 8003b14:	931b      	str	r3, [sp, #108]	; 0x6c
 8003b16:	7873      	ldrb	r3, [r6, #1]
 8003b18:	2b2b      	cmp	r3, #43	; 0x2b
 8003b1a:	d078      	beq.n	8003c0e <_strtod_l+0x286>
 8003b1c:	2b2d      	cmp	r3, #45	; 0x2d
 8003b1e:	d07b      	beq.n	8003c18 <_strtod_l+0x290>
 8003b20:	2700      	movs	r7, #0
 8003b22:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8003b26:	2909      	cmp	r1, #9
 8003b28:	f240 8082 	bls.w	8003c30 <_strtod_l+0x2a8>
 8003b2c:	961b      	str	r6, [sp, #108]	; 0x6c
 8003b2e:	2500      	movs	r5, #0
 8003b30:	e09e      	b.n	8003c70 <_strtod_l+0x2e8>
 8003b32:	2300      	movs	r3, #0
 8003b34:	e7c9      	b.n	8003aca <_strtod_l+0x142>
 8003b36:	f1bb 0f08 	cmp.w	fp, #8
 8003b3a:	bfd5      	itete	le
 8003b3c:	9906      	ldrle	r1, [sp, #24]
 8003b3e:	9905      	ldrgt	r1, [sp, #20]
 8003b40:	fb02 3301 	mlale	r3, r2, r1, r3
 8003b44:	fb02 3301 	mlagt	r3, r2, r1, r3
 8003b48:	f100 0001 	add.w	r0, r0, #1
 8003b4c:	bfd4      	ite	le
 8003b4e:	9306      	strle	r3, [sp, #24]
 8003b50:	9305      	strgt	r3, [sp, #20]
 8003b52:	f10b 0b01 	add.w	fp, fp, #1
 8003b56:	901b      	str	r0, [sp, #108]	; 0x6c
 8003b58:	e7bf      	b.n	8003ada <_strtod_l+0x152>
 8003b5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003b5c:	191a      	adds	r2, r3, r4
 8003b5e:	921b      	str	r2, [sp, #108]	; 0x6c
 8003b60:	5d1b      	ldrb	r3, [r3, r4]
 8003b62:	f1bb 0f00 	cmp.w	fp, #0
 8003b66:	d036      	beq.n	8003bd6 <_strtod_l+0x24e>
 8003b68:	465c      	mov	r4, fp
 8003b6a:	9004      	str	r0, [sp, #16]
 8003b6c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003b70:	2a09      	cmp	r2, #9
 8003b72:	d912      	bls.n	8003b9a <_strtod_l+0x212>
 8003b74:	2201      	movs	r2, #1
 8003b76:	e7c2      	b.n	8003afe <_strtod_l+0x176>
 8003b78:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003b7a:	3001      	adds	r0, #1
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	921b      	str	r2, [sp, #108]	; 0x6c
 8003b80:	785b      	ldrb	r3, [r3, #1]
 8003b82:	2b30      	cmp	r3, #48	; 0x30
 8003b84:	d0f8      	beq.n	8003b78 <_strtod_l+0x1f0>
 8003b86:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8003b8a:	2a08      	cmp	r2, #8
 8003b8c:	f200 84dc 	bhi.w	8004548 <_strtod_l+0xbc0>
 8003b90:	9004      	str	r0, [sp, #16]
 8003b92:	2000      	movs	r0, #0
 8003b94:	4604      	mov	r4, r0
 8003b96:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003b98:	9208      	str	r2, [sp, #32]
 8003b9a:	3b30      	subs	r3, #48	; 0x30
 8003b9c:	f100 0201 	add.w	r2, r0, #1
 8003ba0:	d013      	beq.n	8003bca <_strtod_l+0x242>
 8003ba2:	9904      	ldr	r1, [sp, #16]
 8003ba4:	1905      	adds	r5, r0, r4
 8003ba6:	4411      	add	r1, r2
 8003ba8:	9104      	str	r1, [sp, #16]
 8003baa:	4622      	mov	r2, r4
 8003bac:	210a      	movs	r1, #10
 8003bae:	42aa      	cmp	r2, r5
 8003bb0:	d113      	bne.n	8003bda <_strtod_l+0x252>
 8003bb2:	1822      	adds	r2, r4, r0
 8003bb4:	2a08      	cmp	r2, #8
 8003bb6:	f104 0401 	add.w	r4, r4, #1
 8003bba:	4404      	add	r4, r0
 8003bbc:	dc1b      	bgt.n	8003bf6 <_strtod_l+0x26e>
 8003bbe:	220a      	movs	r2, #10
 8003bc0:	9906      	ldr	r1, [sp, #24]
 8003bc2:	fb02 3301 	mla	r3, r2, r1, r3
 8003bc6:	9306      	str	r3, [sp, #24]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003bcc:	4610      	mov	r0, r2
 8003bce:	1c59      	adds	r1, r3, #1
 8003bd0:	911b      	str	r1, [sp, #108]	; 0x6c
 8003bd2:	785b      	ldrb	r3, [r3, #1]
 8003bd4:	e7ca      	b.n	8003b6c <_strtod_l+0x1e4>
 8003bd6:	4658      	mov	r0, fp
 8003bd8:	e7d3      	b.n	8003b82 <_strtod_l+0x1fa>
 8003bda:	2a08      	cmp	r2, #8
 8003bdc:	dc04      	bgt.n	8003be8 <_strtod_l+0x260>
 8003bde:	9f06      	ldr	r7, [sp, #24]
 8003be0:	434f      	muls	r7, r1
 8003be2:	9706      	str	r7, [sp, #24]
 8003be4:	3201      	adds	r2, #1
 8003be6:	e7e2      	b.n	8003bae <_strtod_l+0x226>
 8003be8:	1c57      	adds	r7, r2, #1
 8003bea:	2f10      	cmp	r7, #16
 8003bec:	bfde      	ittt	le
 8003bee:	9f05      	ldrle	r7, [sp, #20]
 8003bf0:	434f      	mulle	r7, r1
 8003bf2:	9705      	strle	r7, [sp, #20]
 8003bf4:	e7f6      	b.n	8003be4 <_strtod_l+0x25c>
 8003bf6:	2c10      	cmp	r4, #16
 8003bf8:	bfdf      	itttt	le
 8003bfa:	220a      	movle	r2, #10
 8003bfc:	9905      	ldrle	r1, [sp, #20]
 8003bfe:	fb02 3301 	mlale	r3, r2, r1, r3
 8003c02:	9305      	strle	r3, [sp, #20]
 8003c04:	e7e0      	b.n	8003bc8 <_strtod_l+0x240>
 8003c06:	2300      	movs	r3, #0
 8003c08:	2201      	movs	r2, #1
 8003c0a:	9304      	str	r3, [sp, #16]
 8003c0c:	e77c      	b.n	8003b08 <_strtod_l+0x180>
 8003c0e:	2700      	movs	r7, #0
 8003c10:	1cb3      	adds	r3, r6, #2
 8003c12:	931b      	str	r3, [sp, #108]	; 0x6c
 8003c14:	78b3      	ldrb	r3, [r6, #2]
 8003c16:	e784      	b.n	8003b22 <_strtod_l+0x19a>
 8003c18:	2701      	movs	r7, #1
 8003c1a:	e7f9      	b.n	8003c10 <_strtod_l+0x288>
 8003c1c:	0800778c 	.word	0x0800778c
 8003c20:	080075a0 	.word	0x080075a0
 8003c24:	7ff00000 	.word	0x7ff00000
 8003c28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003c2a:	1c59      	adds	r1, r3, #1
 8003c2c:	911b      	str	r1, [sp, #108]	; 0x6c
 8003c2e:	785b      	ldrb	r3, [r3, #1]
 8003c30:	2b30      	cmp	r3, #48	; 0x30
 8003c32:	d0f9      	beq.n	8003c28 <_strtod_l+0x2a0>
 8003c34:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8003c38:	2908      	cmp	r1, #8
 8003c3a:	f63f af78 	bhi.w	8003b2e <_strtod_l+0x1a6>
 8003c3e:	f04f 0e0a 	mov.w	lr, #10
 8003c42:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8003c46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003c48:	9309      	str	r3, [sp, #36]	; 0x24
 8003c4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003c4c:	1c59      	adds	r1, r3, #1
 8003c4e:	911b      	str	r1, [sp, #108]	; 0x6c
 8003c50:	785b      	ldrb	r3, [r3, #1]
 8003c52:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8003c56:	2d09      	cmp	r5, #9
 8003c58:	d935      	bls.n	8003cc6 <_strtod_l+0x33e>
 8003c5a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003c5c:	1b49      	subs	r1, r1, r5
 8003c5e:	2908      	cmp	r1, #8
 8003c60:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8003c64:	dc02      	bgt.n	8003c6c <_strtod_l+0x2e4>
 8003c66:	4565      	cmp	r5, ip
 8003c68:	bfa8      	it	ge
 8003c6a:	4665      	movge	r5, ip
 8003c6c:	b107      	cbz	r7, 8003c70 <_strtod_l+0x2e8>
 8003c6e:	426d      	negs	r5, r5
 8003c70:	2c00      	cmp	r4, #0
 8003c72:	d14c      	bne.n	8003d0e <_strtod_l+0x386>
 8003c74:	9907      	ldr	r1, [sp, #28]
 8003c76:	4301      	orrs	r1, r0
 8003c78:	f47f aec7 	bne.w	8003a0a <_strtod_l+0x82>
 8003c7c:	2a00      	cmp	r2, #0
 8003c7e:	f47f aee0 	bne.w	8003a42 <_strtod_l+0xba>
 8003c82:	2b69      	cmp	r3, #105	; 0x69
 8003c84:	d026      	beq.n	8003cd4 <_strtod_l+0x34c>
 8003c86:	dc23      	bgt.n	8003cd0 <_strtod_l+0x348>
 8003c88:	2b49      	cmp	r3, #73	; 0x49
 8003c8a:	d023      	beq.n	8003cd4 <_strtod_l+0x34c>
 8003c8c:	2b4e      	cmp	r3, #78	; 0x4e
 8003c8e:	f47f aed8 	bne.w	8003a42 <_strtod_l+0xba>
 8003c92:	499c      	ldr	r1, [pc, #624]	; (8003f04 <_strtod_l+0x57c>)
 8003c94:	a81b      	add	r0, sp, #108	; 0x6c
 8003c96:	f001 fe35 	bl	8005904 <__match>
 8003c9a:	2800      	cmp	r0, #0
 8003c9c:	f43f aed1 	beq.w	8003a42 <_strtod_l+0xba>
 8003ca0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	2b28      	cmp	r3, #40	; 0x28
 8003ca6:	d12c      	bne.n	8003d02 <_strtod_l+0x37a>
 8003ca8:	4997      	ldr	r1, [pc, #604]	; (8003f08 <_strtod_l+0x580>)
 8003caa:	aa1e      	add	r2, sp, #120	; 0x78
 8003cac:	a81b      	add	r0, sp, #108	; 0x6c
 8003cae:	f001 fe3d 	bl	800592c <__hexnan>
 8003cb2:	2805      	cmp	r0, #5
 8003cb4:	d125      	bne.n	8003d02 <_strtod_l+0x37a>
 8003cb6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003cb8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8003cbc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8003cc0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8003cc4:	e6a1      	b.n	8003a0a <_strtod_l+0x82>
 8003cc6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8003cca:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8003cce:	e7bc      	b.n	8003c4a <_strtod_l+0x2c2>
 8003cd0:	2b6e      	cmp	r3, #110	; 0x6e
 8003cd2:	e7dc      	b.n	8003c8e <_strtod_l+0x306>
 8003cd4:	498d      	ldr	r1, [pc, #564]	; (8003f0c <_strtod_l+0x584>)
 8003cd6:	a81b      	add	r0, sp, #108	; 0x6c
 8003cd8:	f001 fe14 	bl	8005904 <__match>
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	f43f aeb0 	beq.w	8003a42 <_strtod_l+0xba>
 8003ce2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003ce4:	498a      	ldr	r1, [pc, #552]	; (8003f10 <_strtod_l+0x588>)
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	a81b      	add	r0, sp, #108	; 0x6c
 8003cea:	931b      	str	r3, [sp, #108]	; 0x6c
 8003cec:	f001 fe0a 	bl	8005904 <__match>
 8003cf0:	b910      	cbnz	r0, 8003cf8 <_strtod_l+0x370>
 8003cf2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	931b      	str	r3, [sp, #108]	; 0x6c
 8003cf8:	f04f 0800 	mov.w	r8, #0
 8003cfc:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8003f20 <_strtod_l+0x598>
 8003d00:	e683      	b.n	8003a0a <_strtod_l+0x82>
 8003d02:	4884      	ldr	r0, [pc, #528]	; (8003f14 <_strtod_l+0x58c>)
 8003d04:	f002 ff08 	bl	8006b18 <nan>
 8003d08:	4680      	mov	r8, r0
 8003d0a:	4689      	mov	r9, r1
 8003d0c:	e67d      	b.n	8003a0a <_strtod_l+0x82>
 8003d0e:	9b04      	ldr	r3, [sp, #16]
 8003d10:	f1bb 0f00 	cmp.w	fp, #0
 8003d14:	bf08      	it	eq
 8003d16:	46a3      	moveq	fp, r4
 8003d18:	1aeb      	subs	r3, r5, r3
 8003d1a:	2c10      	cmp	r4, #16
 8003d1c:	9806      	ldr	r0, [sp, #24]
 8003d1e:	4626      	mov	r6, r4
 8003d20:	9307      	str	r3, [sp, #28]
 8003d22:	bfa8      	it	ge
 8003d24:	2610      	movge	r6, #16
 8003d26:	f7fc fb67 	bl	80003f8 <__aeabi_ui2d>
 8003d2a:	2c09      	cmp	r4, #9
 8003d2c:	4680      	mov	r8, r0
 8003d2e:	4689      	mov	r9, r1
 8003d30:	dd13      	ble.n	8003d5a <_strtod_l+0x3d2>
 8003d32:	4b79      	ldr	r3, [pc, #484]	; (8003f18 <_strtod_l+0x590>)
 8003d34:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003d38:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003d3c:	f7fc fbd6 	bl	80004ec <__aeabi_dmul>
 8003d40:	4680      	mov	r8, r0
 8003d42:	9805      	ldr	r0, [sp, #20]
 8003d44:	4689      	mov	r9, r1
 8003d46:	f7fc fb57 	bl	80003f8 <__aeabi_ui2d>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4640      	mov	r0, r8
 8003d50:	4649      	mov	r1, r9
 8003d52:	f7fc fa15 	bl	8000180 <__adddf3>
 8003d56:	4680      	mov	r8, r0
 8003d58:	4689      	mov	r9, r1
 8003d5a:	2c0f      	cmp	r4, #15
 8003d5c:	dc36      	bgt.n	8003dcc <_strtod_l+0x444>
 8003d5e:	9b07      	ldr	r3, [sp, #28]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f43f ae52 	beq.w	8003a0a <_strtod_l+0x82>
 8003d66:	dd22      	ble.n	8003dae <_strtod_l+0x426>
 8003d68:	2b16      	cmp	r3, #22
 8003d6a:	dc09      	bgt.n	8003d80 <_strtod_l+0x3f8>
 8003d6c:	4c6a      	ldr	r4, [pc, #424]	; (8003f18 <_strtod_l+0x590>)
 8003d6e:	4642      	mov	r2, r8
 8003d70:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8003d74:	464b      	mov	r3, r9
 8003d76:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003d7a:	f7fc fbb7 	bl	80004ec <__aeabi_dmul>
 8003d7e:	e7c3      	b.n	8003d08 <_strtod_l+0x380>
 8003d80:	9a07      	ldr	r2, [sp, #28]
 8003d82:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8003d86:	4293      	cmp	r3, r2
 8003d88:	db20      	blt.n	8003dcc <_strtod_l+0x444>
 8003d8a:	4d63      	ldr	r5, [pc, #396]	; (8003f18 <_strtod_l+0x590>)
 8003d8c:	f1c4 040f 	rsb	r4, r4, #15
 8003d90:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8003d94:	4642      	mov	r2, r8
 8003d96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d9a:	464b      	mov	r3, r9
 8003d9c:	f7fc fba6 	bl	80004ec <__aeabi_dmul>
 8003da0:	9b07      	ldr	r3, [sp, #28]
 8003da2:	1b1c      	subs	r4, r3, r4
 8003da4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8003da8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003dac:	e7e5      	b.n	8003d7a <_strtod_l+0x3f2>
 8003dae:	9b07      	ldr	r3, [sp, #28]
 8003db0:	3316      	adds	r3, #22
 8003db2:	db0b      	blt.n	8003dcc <_strtod_l+0x444>
 8003db4:	9b04      	ldr	r3, [sp, #16]
 8003db6:	4a58      	ldr	r2, [pc, #352]	; (8003f18 <_strtod_l+0x590>)
 8003db8:	1b5d      	subs	r5, r3, r5
 8003dba:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8003dbe:	4640      	mov	r0, r8
 8003dc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003dc4:	4649      	mov	r1, r9
 8003dc6:	f7fc fcbb 	bl	8000740 <__aeabi_ddiv>
 8003dca:	e79d      	b.n	8003d08 <_strtod_l+0x380>
 8003dcc:	9b07      	ldr	r3, [sp, #28]
 8003dce:	1ba6      	subs	r6, r4, r6
 8003dd0:	441e      	add	r6, r3
 8003dd2:	2e00      	cmp	r6, #0
 8003dd4:	dd71      	ble.n	8003eba <_strtod_l+0x532>
 8003dd6:	f016 030f 	ands.w	r3, r6, #15
 8003dda:	d00a      	beq.n	8003df2 <_strtod_l+0x46a>
 8003ddc:	494e      	ldr	r1, [pc, #312]	; (8003f18 <_strtod_l+0x590>)
 8003dde:	4642      	mov	r2, r8
 8003de0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003de4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003de8:	464b      	mov	r3, r9
 8003dea:	f7fc fb7f 	bl	80004ec <__aeabi_dmul>
 8003dee:	4680      	mov	r8, r0
 8003df0:	4689      	mov	r9, r1
 8003df2:	f036 060f 	bics.w	r6, r6, #15
 8003df6:	d050      	beq.n	8003e9a <_strtod_l+0x512>
 8003df8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8003dfc:	dd27      	ble.n	8003e4e <_strtod_l+0x4c6>
 8003dfe:	f04f 0b00 	mov.w	fp, #0
 8003e02:	f8cd b010 	str.w	fp, [sp, #16]
 8003e06:	f8cd b020 	str.w	fp, [sp, #32]
 8003e0a:	f8cd b018 	str.w	fp, [sp, #24]
 8003e0e:	2322      	movs	r3, #34	; 0x22
 8003e10:	f04f 0800 	mov.w	r8, #0
 8003e14:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8003f20 <_strtod_l+0x598>
 8003e18:	f8ca 3000 	str.w	r3, [sl]
 8003e1c:	9b08      	ldr	r3, [sp, #32]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f43f adf3 	beq.w	8003a0a <_strtod_l+0x82>
 8003e24:	4650      	mov	r0, sl
 8003e26:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003e28:	f001 fe96 	bl	8005b58 <_Bfree>
 8003e2c:	4650      	mov	r0, sl
 8003e2e:	9906      	ldr	r1, [sp, #24]
 8003e30:	f001 fe92 	bl	8005b58 <_Bfree>
 8003e34:	4650      	mov	r0, sl
 8003e36:	9904      	ldr	r1, [sp, #16]
 8003e38:	f001 fe8e 	bl	8005b58 <_Bfree>
 8003e3c:	4650      	mov	r0, sl
 8003e3e:	9908      	ldr	r1, [sp, #32]
 8003e40:	f001 fe8a 	bl	8005b58 <_Bfree>
 8003e44:	4659      	mov	r1, fp
 8003e46:	4650      	mov	r0, sl
 8003e48:	f001 fe86 	bl	8005b58 <_Bfree>
 8003e4c:	e5dd      	b.n	8003a0a <_strtod_l+0x82>
 8003e4e:	2300      	movs	r3, #0
 8003e50:	4640      	mov	r0, r8
 8003e52:	4649      	mov	r1, r9
 8003e54:	461f      	mov	r7, r3
 8003e56:	1136      	asrs	r6, r6, #4
 8003e58:	2e01      	cmp	r6, #1
 8003e5a:	dc21      	bgt.n	8003ea0 <_strtod_l+0x518>
 8003e5c:	b10b      	cbz	r3, 8003e62 <_strtod_l+0x4da>
 8003e5e:	4680      	mov	r8, r0
 8003e60:	4689      	mov	r9, r1
 8003e62:	4b2e      	ldr	r3, [pc, #184]	; (8003f1c <_strtod_l+0x594>)
 8003e64:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8003e68:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8003e6c:	4642      	mov	r2, r8
 8003e6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e72:	464b      	mov	r3, r9
 8003e74:	f7fc fb3a 	bl	80004ec <__aeabi_dmul>
 8003e78:	4b29      	ldr	r3, [pc, #164]	; (8003f20 <_strtod_l+0x598>)
 8003e7a:	460a      	mov	r2, r1
 8003e7c:	400b      	ands	r3, r1
 8003e7e:	4929      	ldr	r1, [pc, #164]	; (8003f24 <_strtod_l+0x59c>)
 8003e80:	4680      	mov	r8, r0
 8003e82:	428b      	cmp	r3, r1
 8003e84:	d8bb      	bhi.n	8003dfe <_strtod_l+0x476>
 8003e86:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003e8a:	428b      	cmp	r3, r1
 8003e8c:	bf86      	itte	hi
 8003e8e:	f04f 38ff 	movhi.w	r8, #4294967295
 8003e92:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8003f28 <_strtod_l+0x5a0>
 8003e96:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	9305      	str	r3, [sp, #20]
 8003e9e:	e07e      	b.n	8003f9e <_strtod_l+0x616>
 8003ea0:	07f2      	lsls	r2, r6, #31
 8003ea2:	d507      	bpl.n	8003eb4 <_strtod_l+0x52c>
 8003ea4:	4b1d      	ldr	r3, [pc, #116]	; (8003f1c <_strtod_l+0x594>)
 8003ea6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eae:	f7fc fb1d 	bl	80004ec <__aeabi_dmul>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	3701      	adds	r7, #1
 8003eb6:	1076      	asrs	r6, r6, #1
 8003eb8:	e7ce      	b.n	8003e58 <_strtod_l+0x4d0>
 8003eba:	d0ee      	beq.n	8003e9a <_strtod_l+0x512>
 8003ebc:	4276      	negs	r6, r6
 8003ebe:	f016 020f 	ands.w	r2, r6, #15
 8003ec2:	d00a      	beq.n	8003eda <_strtod_l+0x552>
 8003ec4:	4b14      	ldr	r3, [pc, #80]	; (8003f18 <_strtod_l+0x590>)
 8003ec6:	4640      	mov	r0, r8
 8003ec8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ecc:	4649      	mov	r1, r9
 8003ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed2:	f7fc fc35 	bl	8000740 <__aeabi_ddiv>
 8003ed6:	4680      	mov	r8, r0
 8003ed8:	4689      	mov	r9, r1
 8003eda:	1136      	asrs	r6, r6, #4
 8003edc:	d0dd      	beq.n	8003e9a <_strtod_l+0x512>
 8003ede:	2e1f      	cmp	r6, #31
 8003ee0:	dd24      	ble.n	8003f2c <_strtod_l+0x5a4>
 8003ee2:	f04f 0b00 	mov.w	fp, #0
 8003ee6:	f8cd b010 	str.w	fp, [sp, #16]
 8003eea:	f8cd b020 	str.w	fp, [sp, #32]
 8003eee:	f8cd b018 	str.w	fp, [sp, #24]
 8003ef2:	2322      	movs	r3, #34	; 0x22
 8003ef4:	f04f 0800 	mov.w	r8, #0
 8003ef8:	f04f 0900 	mov.w	r9, #0
 8003efc:	f8ca 3000 	str.w	r3, [sl]
 8003f00:	e78c      	b.n	8003e1c <_strtod_l+0x494>
 8003f02:	bf00      	nop
 8003f04:	08007579 	.word	0x08007579
 8003f08:	080075b4 	.word	0x080075b4
 8003f0c:	08007571 	.word	0x08007571
 8003f10:	080076a7 	.word	0x080076a7
 8003f14:	080076a3 	.word	0x080076a3
 8003f18:	08007828 	.word	0x08007828
 8003f1c:	08007800 	.word	0x08007800
 8003f20:	7ff00000 	.word	0x7ff00000
 8003f24:	7ca00000 	.word	0x7ca00000
 8003f28:	7fefffff 	.word	0x7fefffff
 8003f2c:	f016 0310 	ands.w	r3, r6, #16
 8003f30:	bf18      	it	ne
 8003f32:	236a      	movne	r3, #106	; 0x6a
 8003f34:	4640      	mov	r0, r8
 8003f36:	9305      	str	r3, [sp, #20]
 8003f38:	4649      	mov	r1, r9
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	4fb2      	ldr	r7, [pc, #712]	; (8004208 <_strtod_l+0x880>)
 8003f3e:	07f2      	lsls	r2, r6, #31
 8003f40:	d504      	bpl.n	8003f4c <_strtod_l+0x5c4>
 8003f42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f46:	f7fc fad1 	bl	80004ec <__aeabi_dmul>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	1076      	asrs	r6, r6, #1
 8003f4e:	f107 0708 	add.w	r7, r7, #8
 8003f52:	d1f4      	bne.n	8003f3e <_strtod_l+0x5b6>
 8003f54:	b10b      	cbz	r3, 8003f5a <_strtod_l+0x5d2>
 8003f56:	4680      	mov	r8, r0
 8003f58:	4689      	mov	r9, r1
 8003f5a:	9b05      	ldr	r3, [sp, #20]
 8003f5c:	b1bb      	cbz	r3, 8003f8e <_strtod_l+0x606>
 8003f5e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8003f62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	4649      	mov	r1, r9
 8003f6a:	dd10      	ble.n	8003f8e <_strtod_l+0x606>
 8003f6c:	2b1f      	cmp	r3, #31
 8003f6e:	f340 812b 	ble.w	80041c8 <_strtod_l+0x840>
 8003f72:	2b34      	cmp	r3, #52	; 0x34
 8003f74:	bfd8      	it	le
 8003f76:	f04f 32ff 	movle.w	r2, #4294967295
 8003f7a:	f04f 0800 	mov.w	r8, #0
 8003f7e:	bfcf      	iteee	gt
 8003f80:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8003f84:	3b20      	suble	r3, #32
 8003f86:	fa02 f303 	lslle.w	r3, r2, r3
 8003f8a:	ea03 0901 	andle.w	r9, r3, r1
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2300      	movs	r3, #0
 8003f92:	4640      	mov	r0, r8
 8003f94:	4649      	mov	r1, r9
 8003f96:	f7fc fd11 	bl	80009bc <__aeabi_dcmpeq>
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	d1a1      	bne.n	8003ee2 <_strtod_l+0x55a>
 8003f9e:	9b06      	ldr	r3, [sp, #24]
 8003fa0:	465a      	mov	r2, fp
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	4650      	mov	r0, sl
 8003fa6:	4623      	mov	r3, r4
 8003fa8:	9908      	ldr	r1, [sp, #32]
 8003faa:	f001 fe41 	bl	8005c30 <__s2b>
 8003fae:	9008      	str	r0, [sp, #32]
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	f43f af24 	beq.w	8003dfe <_strtod_l+0x476>
 8003fb6:	9b04      	ldr	r3, [sp, #16]
 8003fb8:	f04f 0b00 	mov.w	fp, #0
 8003fbc:	1b5d      	subs	r5, r3, r5
 8003fbe:	9b07      	ldr	r3, [sp, #28]
 8003fc0:	f8cd b010 	str.w	fp, [sp, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	bfb4      	ite	lt
 8003fc8:	462b      	movlt	r3, r5
 8003fca:	2300      	movge	r3, #0
 8003fcc:	930e      	str	r3, [sp, #56]	; 0x38
 8003fce:	9b07      	ldr	r3, [sp, #28]
 8003fd0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003fd4:	9316      	str	r3, [sp, #88]	; 0x58
 8003fd6:	9b08      	ldr	r3, [sp, #32]
 8003fd8:	4650      	mov	r0, sl
 8003fda:	6859      	ldr	r1, [r3, #4]
 8003fdc:	f001 fd7c 	bl	8005ad8 <_Balloc>
 8003fe0:	9006      	str	r0, [sp, #24]
 8003fe2:	2800      	cmp	r0, #0
 8003fe4:	f43f af13 	beq.w	8003e0e <_strtod_l+0x486>
 8003fe8:	9b08      	ldr	r3, [sp, #32]
 8003fea:	300c      	adds	r0, #12
 8003fec:	691a      	ldr	r2, [r3, #16]
 8003fee:	f103 010c 	add.w	r1, r3, #12
 8003ff2:	3202      	adds	r2, #2
 8003ff4:	0092      	lsls	r2, r2, #2
 8003ff6:	f001 fd61 	bl	8005abc <memcpy>
 8003ffa:	ab1e      	add	r3, sp, #120	; 0x78
 8003ffc:	9301      	str	r3, [sp, #4]
 8003ffe:	ab1d      	add	r3, sp, #116	; 0x74
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	4642      	mov	r2, r8
 8004004:	464b      	mov	r3, r9
 8004006:	4650      	mov	r0, sl
 8004008:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800400c:	f002 f94e 	bl	80062ac <__d2b>
 8004010:	901c      	str	r0, [sp, #112]	; 0x70
 8004012:	2800      	cmp	r0, #0
 8004014:	f43f aefb 	beq.w	8003e0e <_strtod_l+0x486>
 8004018:	2101      	movs	r1, #1
 800401a:	4650      	mov	r0, sl
 800401c:	f001 fea0 	bl	8005d60 <__i2b>
 8004020:	4603      	mov	r3, r0
 8004022:	9004      	str	r0, [sp, #16]
 8004024:	2800      	cmp	r0, #0
 8004026:	f43f aef2 	beq.w	8003e0e <_strtod_l+0x486>
 800402a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800402c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800402e:	2d00      	cmp	r5, #0
 8004030:	bfab      	itete	ge
 8004032:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004034:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8004036:	18ee      	addge	r6, r5, r3
 8004038:	1b5c      	sublt	r4, r3, r5
 800403a:	9b05      	ldr	r3, [sp, #20]
 800403c:	bfa8      	it	ge
 800403e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8004040:	eba5 0503 	sub.w	r5, r5, r3
 8004044:	4415      	add	r5, r2
 8004046:	4b71      	ldr	r3, [pc, #452]	; (800420c <_strtod_l+0x884>)
 8004048:	f105 35ff 	add.w	r5, r5, #4294967295
 800404c:	bfb8      	it	lt
 800404e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004050:	429d      	cmp	r5, r3
 8004052:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004056:	f280 80c9 	bge.w	80041ec <_strtod_l+0x864>
 800405a:	1b5b      	subs	r3, r3, r5
 800405c:	2b1f      	cmp	r3, #31
 800405e:	f04f 0701 	mov.w	r7, #1
 8004062:	eba2 0203 	sub.w	r2, r2, r3
 8004066:	f300 80b6 	bgt.w	80041d6 <_strtod_l+0x84e>
 800406a:	2500      	movs	r5, #0
 800406c:	fa07 f303 	lsl.w	r3, r7, r3
 8004070:	930f      	str	r3, [sp, #60]	; 0x3c
 8004072:	18b7      	adds	r7, r6, r2
 8004074:	9b05      	ldr	r3, [sp, #20]
 8004076:	42be      	cmp	r6, r7
 8004078:	4414      	add	r4, r2
 800407a:	441c      	add	r4, r3
 800407c:	4633      	mov	r3, r6
 800407e:	bfa8      	it	ge
 8004080:	463b      	movge	r3, r7
 8004082:	42a3      	cmp	r3, r4
 8004084:	bfa8      	it	ge
 8004086:	4623      	movge	r3, r4
 8004088:	2b00      	cmp	r3, #0
 800408a:	bfc2      	ittt	gt
 800408c:	1aff      	subgt	r7, r7, r3
 800408e:	1ae4      	subgt	r4, r4, r3
 8004090:	1af6      	subgt	r6, r6, r3
 8004092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004094:	2b00      	cmp	r3, #0
 8004096:	dd17      	ble.n	80040c8 <_strtod_l+0x740>
 8004098:	461a      	mov	r2, r3
 800409a:	4650      	mov	r0, sl
 800409c:	9904      	ldr	r1, [sp, #16]
 800409e:	f001 ff19 	bl	8005ed4 <__pow5mult>
 80040a2:	9004      	str	r0, [sp, #16]
 80040a4:	2800      	cmp	r0, #0
 80040a6:	f43f aeb2 	beq.w	8003e0e <_strtod_l+0x486>
 80040aa:	4601      	mov	r1, r0
 80040ac:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80040ae:	4650      	mov	r0, sl
 80040b0:	f001 fe6c 	bl	8005d8c <__multiply>
 80040b4:	9009      	str	r0, [sp, #36]	; 0x24
 80040b6:	2800      	cmp	r0, #0
 80040b8:	f43f aea9 	beq.w	8003e0e <_strtod_l+0x486>
 80040bc:	4650      	mov	r0, sl
 80040be:	991c      	ldr	r1, [sp, #112]	; 0x70
 80040c0:	f001 fd4a 	bl	8005b58 <_Bfree>
 80040c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040c6:	931c      	str	r3, [sp, #112]	; 0x70
 80040c8:	2f00      	cmp	r7, #0
 80040ca:	f300 8093 	bgt.w	80041f4 <_strtod_l+0x86c>
 80040ce:	9b07      	ldr	r3, [sp, #28]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	dd08      	ble.n	80040e6 <_strtod_l+0x75e>
 80040d4:	4650      	mov	r0, sl
 80040d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80040d8:	9906      	ldr	r1, [sp, #24]
 80040da:	f001 fefb 	bl	8005ed4 <__pow5mult>
 80040de:	9006      	str	r0, [sp, #24]
 80040e0:	2800      	cmp	r0, #0
 80040e2:	f43f ae94 	beq.w	8003e0e <_strtod_l+0x486>
 80040e6:	2c00      	cmp	r4, #0
 80040e8:	dd08      	ble.n	80040fc <_strtod_l+0x774>
 80040ea:	4622      	mov	r2, r4
 80040ec:	4650      	mov	r0, sl
 80040ee:	9906      	ldr	r1, [sp, #24]
 80040f0:	f001 ff4a 	bl	8005f88 <__lshift>
 80040f4:	9006      	str	r0, [sp, #24]
 80040f6:	2800      	cmp	r0, #0
 80040f8:	f43f ae89 	beq.w	8003e0e <_strtod_l+0x486>
 80040fc:	2e00      	cmp	r6, #0
 80040fe:	dd08      	ble.n	8004112 <_strtod_l+0x78a>
 8004100:	4632      	mov	r2, r6
 8004102:	4650      	mov	r0, sl
 8004104:	9904      	ldr	r1, [sp, #16]
 8004106:	f001 ff3f 	bl	8005f88 <__lshift>
 800410a:	9004      	str	r0, [sp, #16]
 800410c:	2800      	cmp	r0, #0
 800410e:	f43f ae7e 	beq.w	8003e0e <_strtod_l+0x486>
 8004112:	4650      	mov	r0, sl
 8004114:	9a06      	ldr	r2, [sp, #24]
 8004116:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004118:	f001 ffbe 	bl	8006098 <__mdiff>
 800411c:	4683      	mov	fp, r0
 800411e:	2800      	cmp	r0, #0
 8004120:	f43f ae75 	beq.w	8003e0e <_strtod_l+0x486>
 8004124:	2400      	movs	r4, #0
 8004126:	68c3      	ldr	r3, [r0, #12]
 8004128:	9904      	ldr	r1, [sp, #16]
 800412a:	60c4      	str	r4, [r0, #12]
 800412c:	930d      	str	r3, [sp, #52]	; 0x34
 800412e:	f001 ff97 	bl	8006060 <__mcmp>
 8004132:	42a0      	cmp	r0, r4
 8004134:	da70      	bge.n	8004218 <_strtod_l+0x890>
 8004136:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004138:	ea53 0308 	orrs.w	r3, r3, r8
 800413c:	f040 8096 	bne.w	800426c <_strtod_l+0x8e4>
 8004140:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004144:	2b00      	cmp	r3, #0
 8004146:	f040 8091 	bne.w	800426c <_strtod_l+0x8e4>
 800414a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800414e:	0d1b      	lsrs	r3, r3, #20
 8004150:	051b      	lsls	r3, r3, #20
 8004152:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004156:	f240 8089 	bls.w	800426c <_strtod_l+0x8e4>
 800415a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800415e:	b923      	cbnz	r3, 800416a <_strtod_l+0x7e2>
 8004160:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004164:	2b01      	cmp	r3, #1
 8004166:	f340 8081 	ble.w	800426c <_strtod_l+0x8e4>
 800416a:	4659      	mov	r1, fp
 800416c:	2201      	movs	r2, #1
 800416e:	4650      	mov	r0, sl
 8004170:	f001 ff0a 	bl	8005f88 <__lshift>
 8004174:	9904      	ldr	r1, [sp, #16]
 8004176:	4683      	mov	fp, r0
 8004178:	f001 ff72 	bl	8006060 <__mcmp>
 800417c:	2800      	cmp	r0, #0
 800417e:	dd75      	ble.n	800426c <_strtod_l+0x8e4>
 8004180:	9905      	ldr	r1, [sp, #20]
 8004182:	464b      	mov	r3, r9
 8004184:	4a22      	ldr	r2, [pc, #136]	; (8004210 <_strtod_l+0x888>)
 8004186:	2900      	cmp	r1, #0
 8004188:	f000 8091 	beq.w	80042ae <_strtod_l+0x926>
 800418c:	ea02 0109 	and.w	r1, r2, r9
 8004190:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004194:	f300 808b 	bgt.w	80042ae <_strtod_l+0x926>
 8004198:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800419c:	f77f aea9 	ble.w	8003ef2 <_strtod_l+0x56a>
 80041a0:	2300      	movs	r3, #0
 80041a2:	4a1c      	ldr	r2, [pc, #112]	; (8004214 <_strtod_l+0x88c>)
 80041a4:	4640      	mov	r0, r8
 80041a6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80041aa:	4649      	mov	r1, r9
 80041ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80041b0:	f7fc f99c 	bl	80004ec <__aeabi_dmul>
 80041b4:	460b      	mov	r3, r1
 80041b6:	4303      	orrs	r3, r0
 80041b8:	bf08      	it	eq
 80041ba:	2322      	moveq	r3, #34	; 0x22
 80041bc:	4680      	mov	r8, r0
 80041be:	4689      	mov	r9, r1
 80041c0:	bf08      	it	eq
 80041c2:	f8ca 3000 	streq.w	r3, [sl]
 80041c6:	e62d      	b.n	8003e24 <_strtod_l+0x49c>
 80041c8:	f04f 32ff 	mov.w	r2, #4294967295
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	ea03 0808 	and.w	r8, r3, r8
 80041d4:	e6db      	b.n	8003f8e <_strtod_l+0x606>
 80041d6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80041da:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80041de:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80041e2:	35e2      	adds	r5, #226	; 0xe2
 80041e4:	fa07 f505 	lsl.w	r5, r7, r5
 80041e8:	970f      	str	r7, [sp, #60]	; 0x3c
 80041ea:	e742      	b.n	8004072 <_strtod_l+0x6ea>
 80041ec:	2301      	movs	r3, #1
 80041ee:	2500      	movs	r5, #0
 80041f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80041f2:	e73e      	b.n	8004072 <_strtod_l+0x6ea>
 80041f4:	463a      	mov	r2, r7
 80041f6:	4650      	mov	r0, sl
 80041f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80041fa:	f001 fec5 	bl	8005f88 <__lshift>
 80041fe:	901c      	str	r0, [sp, #112]	; 0x70
 8004200:	2800      	cmp	r0, #0
 8004202:	f47f af64 	bne.w	80040ce <_strtod_l+0x746>
 8004206:	e602      	b.n	8003e0e <_strtod_l+0x486>
 8004208:	080075c8 	.word	0x080075c8
 800420c:	fffffc02 	.word	0xfffffc02
 8004210:	7ff00000 	.word	0x7ff00000
 8004214:	39500000 	.word	0x39500000
 8004218:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800421c:	d166      	bne.n	80042ec <_strtod_l+0x964>
 800421e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004220:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004224:	b35a      	cbz	r2, 800427e <_strtod_l+0x8f6>
 8004226:	4a9c      	ldr	r2, [pc, #624]	; (8004498 <_strtod_l+0xb10>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d12c      	bne.n	8004286 <_strtod_l+0x8fe>
 800422c:	9b05      	ldr	r3, [sp, #20]
 800422e:	4640      	mov	r0, r8
 8004230:	b303      	cbz	r3, 8004274 <_strtod_l+0x8ec>
 8004232:	464b      	mov	r3, r9
 8004234:	4a99      	ldr	r2, [pc, #612]	; (800449c <_strtod_l+0xb14>)
 8004236:	f04f 31ff 	mov.w	r1, #4294967295
 800423a:	401a      	ands	r2, r3
 800423c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004240:	d81b      	bhi.n	800427a <_strtod_l+0x8f2>
 8004242:	0d12      	lsrs	r2, r2, #20
 8004244:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004248:	fa01 f303 	lsl.w	r3, r1, r3
 800424c:	4298      	cmp	r0, r3
 800424e:	d11a      	bne.n	8004286 <_strtod_l+0x8fe>
 8004250:	4b93      	ldr	r3, [pc, #588]	; (80044a0 <_strtod_l+0xb18>)
 8004252:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004254:	429a      	cmp	r2, r3
 8004256:	d102      	bne.n	800425e <_strtod_l+0x8d6>
 8004258:	3001      	adds	r0, #1
 800425a:	f43f add8 	beq.w	8003e0e <_strtod_l+0x486>
 800425e:	f04f 0800 	mov.w	r8, #0
 8004262:	4b8e      	ldr	r3, [pc, #568]	; (800449c <_strtod_l+0xb14>)
 8004264:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004266:	401a      	ands	r2, r3
 8004268:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800426c:	9b05      	ldr	r3, [sp, #20]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d196      	bne.n	80041a0 <_strtod_l+0x818>
 8004272:	e5d7      	b.n	8003e24 <_strtod_l+0x49c>
 8004274:	f04f 33ff 	mov.w	r3, #4294967295
 8004278:	e7e8      	b.n	800424c <_strtod_l+0x8c4>
 800427a:	460b      	mov	r3, r1
 800427c:	e7e6      	b.n	800424c <_strtod_l+0x8c4>
 800427e:	ea53 0308 	orrs.w	r3, r3, r8
 8004282:	f43f af7d 	beq.w	8004180 <_strtod_l+0x7f8>
 8004286:	b1e5      	cbz	r5, 80042c2 <_strtod_l+0x93a>
 8004288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800428a:	421d      	tst	r5, r3
 800428c:	d0ee      	beq.n	800426c <_strtod_l+0x8e4>
 800428e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004290:	4640      	mov	r0, r8
 8004292:	4649      	mov	r1, r9
 8004294:	9a05      	ldr	r2, [sp, #20]
 8004296:	b1c3      	cbz	r3, 80042ca <_strtod_l+0x942>
 8004298:	f7ff fb52 	bl	8003940 <sulp>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80042a4:	f7fb ff6c 	bl	8000180 <__adddf3>
 80042a8:	4680      	mov	r8, r0
 80042aa:	4689      	mov	r9, r1
 80042ac:	e7de      	b.n	800426c <_strtod_l+0x8e4>
 80042ae:	4013      	ands	r3, r2
 80042b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80042b4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80042b8:	f04f 38ff 	mov.w	r8, #4294967295
 80042bc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80042c0:	e7d4      	b.n	800426c <_strtod_l+0x8e4>
 80042c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042c4:	ea13 0f08 	tst.w	r3, r8
 80042c8:	e7e0      	b.n	800428c <_strtod_l+0x904>
 80042ca:	f7ff fb39 	bl	8003940 <sulp>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80042d6:	f7fb ff51 	bl	800017c <__aeabi_dsub>
 80042da:	2200      	movs	r2, #0
 80042dc:	2300      	movs	r3, #0
 80042de:	4680      	mov	r8, r0
 80042e0:	4689      	mov	r9, r1
 80042e2:	f7fc fb6b 	bl	80009bc <__aeabi_dcmpeq>
 80042e6:	2800      	cmp	r0, #0
 80042e8:	d0c0      	beq.n	800426c <_strtod_l+0x8e4>
 80042ea:	e602      	b.n	8003ef2 <_strtod_l+0x56a>
 80042ec:	4658      	mov	r0, fp
 80042ee:	9904      	ldr	r1, [sp, #16]
 80042f0:	f002 f838 	bl	8006364 <__ratio>
 80042f4:	2200      	movs	r2, #0
 80042f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80042fa:	4606      	mov	r6, r0
 80042fc:	460f      	mov	r7, r1
 80042fe:	f7fc fb71 	bl	80009e4 <__aeabi_dcmple>
 8004302:	2800      	cmp	r0, #0
 8004304:	d075      	beq.n	80043f2 <_strtod_l+0xa6a>
 8004306:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004308:	2b00      	cmp	r3, #0
 800430a:	d047      	beq.n	800439c <_strtod_l+0xa14>
 800430c:	2600      	movs	r6, #0
 800430e:	4f65      	ldr	r7, [pc, #404]	; (80044a4 <_strtod_l+0xb1c>)
 8004310:	4d64      	ldr	r5, [pc, #400]	; (80044a4 <_strtod_l+0xb1c>)
 8004312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004314:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004318:	0d1b      	lsrs	r3, r3, #20
 800431a:	051b      	lsls	r3, r3, #20
 800431c:	930f      	str	r3, [sp, #60]	; 0x3c
 800431e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004320:	4b61      	ldr	r3, [pc, #388]	; (80044a8 <_strtod_l+0xb20>)
 8004322:	429a      	cmp	r2, r3
 8004324:	f040 80c8 	bne.w	80044b8 <_strtod_l+0xb30>
 8004328:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800432c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004332:	4640      	mov	r0, r8
 8004334:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004338:	4649      	mov	r1, r9
 800433a:	f001 ff3d 	bl	80061b8 <__ulp>
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	4630      	mov	r0, r6
 8004344:	4639      	mov	r1, r7
 8004346:	f7fc f8d1 	bl	80004ec <__aeabi_dmul>
 800434a:	4642      	mov	r2, r8
 800434c:	464b      	mov	r3, r9
 800434e:	f7fb ff17 	bl	8000180 <__adddf3>
 8004352:	460b      	mov	r3, r1
 8004354:	4951      	ldr	r1, [pc, #324]	; (800449c <_strtod_l+0xb14>)
 8004356:	4a55      	ldr	r2, [pc, #340]	; (80044ac <_strtod_l+0xb24>)
 8004358:	4019      	ands	r1, r3
 800435a:	4291      	cmp	r1, r2
 800435c:	4680      	mov	r8, r0
 800435e:	d95e      	bls.n	800441e <_strtod_l+0xa96>
 8004360:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004362:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004366:	4293      	cmp	r3, r2
 8004368:	d103      	bne.n	8004372 <_strtod_l+0x9ea>
 800436a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800436c:	3301      	adds	r3, #1
 800436e:	f43f ad4e 	beq.w	8003e0e <_strtod_l+0x486>
 8004372:	f04f 38ff 	mov.w	r8, #4294967295
 8004376:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80044a0 <_strtod_l+0xb18>
 800437a:	4650      	mov	r0, sl
 800437c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800437e:	f001 fbeb 	bl	8005b58 <_Bfree>
 8004382:	4650      	mov	r0, sl
 8004384:	9906      	ldr	r1, [sp, #24]
 8004386:	f001 fbe7 	bl	8005b58 <_Bfree>
 800438a:	4650      	mov	r0, sl
 800438c:	9904      	ldr	r1, [sp, #16]
 800438e:	f001 fbe3 	bl	8005b58 <_Bfree>
 8004392:	4659      	mov	r1, fp
 8004394:	4650      	mov	r0, sl
 8004396:	f001 fbdf 	bl	8005b58 <_Bfree>
 800439a:	e61c      	b.n	8003fd6 <_strtod_l+0x64e>
 800439c:	f1b8 0f00 	cmp.w	r8, #0
 80043a0:	d119      	bne.n	80043d6 <_strtod_l+0xa4e>
 80043a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043a8:	b9e3      	cbnz	r3, 80043e4 <_strtod_l+0xa5c>
 80043aa:	2200      	movs	r2, #0
 80043ac:	4630      	mov	r0, r6
 80043ae:	4639      	mov	r1, r7
 80043b0:	4b3c      	ldr	r3, [pc, #240]	; (80044a4 <_strtod_l+0xb1c>)
 80043b2:	f7fc fb0d 	bl	80009d0 <__aeabi_dcmplt>
 80043b6:	b9c8      	cbnz	r0, 80043ec <_strtod_l+0xa64>
 80043b8:	2200      	movs	r2, #0
 80043ba:	4630      	mov	r0, r6
 80043bc:	4639      	mov	r1, r7
 80043be:	4b3c      	ldr	r3, [pc, #240]	; (80044b0 <_strtod_l+0xb28>)
 80043c0:	f7fc f894 	bl	80004ec <__aeabi_dmul>
 80043c4:	4604      	mov	r4, r0
 80043c6:	460d      	mov	r5, r1
 80043c8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80043cc:	9418      	str	r4, [sp, #96]	; 0x60
 80043ce:	9319      	str	r3, [sp, #100]	; 0x64
 80043d0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80043d4:	e79d      	b.n	8004312 <_strtod_l+0x98a>
 80043d6:	f1b8 0f01 	cmp.w	r8, #1
 80043da:	d103      	bne.n	80043e4 <_strtod_l+0xa5c>
 80043dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f43f ad87 	beq.w	8003ef2 <_strtod_l+0x56a>
 80043e4:	2600      	movs	r6, #0
 80043e6:	2400      	movs	r4, #0
 80043e8:	4f32      	ldr	r7, [pc, #200]	; (80044b4 <_strtod_l+0xb2c>)
 80043ea:	e791      	b.n	8004310 <_strtod_l+0x988>
 80043ec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80043ee:	4d30      	ldr	r5, [pc, #192]	; (80044b0 <_strtod_l+0xb28>)
 80043f0:	e7ea      	b.n	80043c8 <_strtod_l+0xa40>
 80043f2:	4b2f      	ldr	r3, [pc, #188]	; (80044b0 <_strtod_l+0xb28>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	4630      	mov	r0, r6
 80043f8:	4639      	mov	r1, r7
 80043fa:	f7fc f877 	bl	80004ec <__aeabi_dmul>
 80043fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004400:	4604      	mov	r4, r0
 8004402:	460d      	mov	r5, r1
 8004404:	b933      	cbnz	r3, 8004414 <_strtod_l+0xa8c>
 8004406:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800440a:	9010      	str	r0, [sp, #64]	; 0x40
 800440c:	9311      	str	r3, [sp, #68]	; 0x44
 800440e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004412:	e77e      	b.n	8004312 <_strtod_l+0x98a>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800441c:	e7f7      	b.n	800440e <_strtod_l+0xa86>
 800441e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004422:	9b05      	ldr	r3, [sp, #20]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1a8      	bne.n	800437a <_strtod_l+0x9f2>
 8004428:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800442c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800442e:	0d1b      	lsrs	r3, r3, #20
 8004430:	051b      	lsls	r3, r3, #20
 8004432:	429a      	cmp	r2, r3
 8004434:	d1a1      	bne.n	800437a <_strtod_l+0x9f2>
 8004436:	4620      	mov	r0, r4
 8004438:	4629      	mov	r1, r5
 800443a:	f7fc fb9f 	bl	8000b7c <__aeabi_d2lz>
 800443e:	f7fc f827 	bl	8000490 <__aeabi_l2d>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4620      	mov	r0, r4
 8004448:	4629      	mov	r1, r5
 800444a:	f7fb fe97 	bl	800017c <__aeabi_dsub>
 800444e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004450:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004454:	ea43 0308 	orr.w	r3, r3, r8
 8004458:	4313      	orrs	r3, r2
 800445a:	4604      	mov	r4, r0
 800445c:	460d      	mov	r5, r1
 800445e:	d066      	beq.n	800452e <_strtod_l+0xba6>
 8004460:	a309      	add	r3, pc, #36	; (adr r3, 8004488 <_strtod_l+0xb00>)
 8004462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004466:	f7fc fab3 	bl	80009d0 <__aeabi_dcmplt>
 800446a:	2800      	cmp	r0, #0
 800446c:	f47f acda 	bne.w	8003e24 <_strtod_l+0x49c>
 8004470:	a307      	add	r3, pc, #28	; (adr r3, 8004490 <_strtod_l+0xb08>)
 8004472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004476:	4620      	mov	r0, r4
 8004478:	4629      	mov	r1, r5
 800447a:	f7fc fac7 	bl	8000a0c <__aeabi_dcmpgt>
 800447e:	2800      	cmp	r0, #0
 8004480:	f43f af7b 	beq.w	800437a <_strtod_l+0x9f2>
 8004484:	e4ce      	b.n	8003e24 <_strtod_l+0x49c>
 8004486:	bf00      	nop
 8004488:	94a03595 	.word	0x94a03595
 800448c:	3fdfffff 	.word	0x3fdfffff
 8004490:	35afe535 	.word	0x35afe535
 8004494:	3fe00000 	.word	0x3fe00000
 8004498:	000fffff 	.word	0x000fffff
 800449c:	7ff00000 	.word	0x7ff00000
 80044a0:	7fefffff 	.word	0x7fefffff
 80044a4:	3ff00000 	.word	0x3ff00000
 80044a8:	7fe00000 	.word	0x7fe00000
 80044ac:	7c9fffff 	.word	0x7c9fffff
 80044b0:	3fe00000 	.word	0x3fe00000
 80044b4:	bff00000 	.word	0xbff00000
 80044b8:	9b05      	ldr	r3, [sp, #20]
 80044ba:	b313      	cbz	r3, 8004502 <_strtod_l+0xb7a>
 80044bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80044be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80044c2:	d81e      	bhi.n	8004502 <_strtod_l+0xb7a>
 80044c4:	a326      	add	r3, pc, #152	; (adr r3, 8004560 <_strtod_l+0xbd8>)
 80044c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ca:	4620      	mov	r0, r4
 80044cc:	4629      	mov	r1, r5
 80044ce:	f7fc fa89 	bl	80009e4 <__aeabi_dcmple>
 80044d2:	b190      	cbz	r0, 80044fa <_strtod_l+0xb72>
 80044d4:	4629      	mov	r1, r5
 80044d6:	4620      	mov	r0, r4
 80044d8:	f7fc fae0 	bl	8000a9c <__aeabi_d2uiz>
 80044dc:	2801      	cmp	r0, #1
 80044de:	bf38      	it	cc
 80044e0:	2001      	movcc	r0, #1
 80044e2:	f7fb ff89 	bl	80003f8 <__aeabi_ui2d>
 80044e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044e8:	4604      	mov	r4, r0
 80044ea:	460d      	mov	r5, r1
 80044ec:	b9d3      	cbnz	r3, 8004524 <_strtod_l+0xb9c>
 80044ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80044f2:	9012      	str	r0, [sp, #72]	; 0x48
 80044f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80044f6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80044fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80044fc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004500:	1a9f      	subs	r7, r3, r2
 8004502:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004506:	f001 fe57 	bl	80061b8 <__ulp>
 800450a:	4602      	mov	r2, r0
 800450c:	460b      	mov	r3, r1
 800450e:	4630      	mov	r0, r6
 8004510:	4639      	mov	r1, r7
 8004512:	f7fb ffeb 	bl	80004ec <__aeabi_dmul>
 8004516:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800451a:	f7fb fe31 	bl	8000180 <__adddf3>
 800451e:	4680      	mov	r8, r0
 8004520:	4689      	mov	r9, r1
 8004522:	e77e      	b.n	8004422 <_strtod_l+0xa9a>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800452c:	e7e3      	b.n	80044f6 <_strtod_l+0xb6e>
 800452e:	a30e      	add	r3, pc, #56	; (adr r3, 8004568 <_strtod_l+0xbe0>)
 8004530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004534:	f7fc fa4c 	bl	80009d0 <__aeabi_dcmplt>
 8004538:	e7a1      	b.n	800447e <_strtod_l+0xaf6>
 800453a:	2300      	movs	r3, #0
 800453c:	930c      	str	r3, [sp, #48]	; 0x30
 800453e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004540:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	f7ff ba65 	b.w	8003a12 <_strtod_l+0x8a>
 8004548:	2b65      	cmp	r3, #101	; 0x65
 800454a:	f43f ab5c 	beq.w	8003c06 <_strtod_l+0x27e>
 800454e:	2b45      	cmp	r3, #69	; 0x45
 8004550:	f43f ab59 	beq.w	8003c06 <_strtod_l+0x27e>
 8004554:	2201      	movs	r2, #1
 8004556:	f7ff bb8d 	b.w	8003c74 <_strtod_l+0x2ec>
 800455a:	bf00      	nop
 800455c:	f3af 8000 	nop.w
 8004560:	ffc00000 	.word	0xffc00000
 8004564:	41dfffff 	.word	0x41dfffff
 8004568:	94a03595 	.word	0x94a03595
 800456c:	3fcfffff 	.word	0x3fcfffff

08004570 <strtod>:
 8004570:	460a      	mov	r2, r1
 8004572:	4601      	mov	r1, r0
 8004574:	4802      	ldr	r0, [pc, #8]	; (8004580 <strtod+0x10>)
 8004576:	4b03      	ldr	r3, [pc, #12]	; (8004584 <strtod+0x14>)
 8004578:	6800      	ldr	r0, [r0, #0]
 800457a:	f7ff ba05 	b.w	8003988 <_strtod_l>
 800457e:	bf00      	nop
 8004580:	2000002c 	.word	0x2000002c
 8004584:	20000094 	.word	0x20000094

08004588 <strtok>:
 8004588:	4b16      	ldr	r3, [pc, #88]	; (80045e4 <strtok+0x5c>)
 800458a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800458e:	681f      	ldr	r7, [r3, #0]
 8004590:	4605      	mov	r5, r0
 8004592:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8004594:	460e      	mov	r6, r1
 8004596:	b9ec      	cbnz	r4, 80045d4 <strtok+0x4c>
 8004598:	2050      	movs	r0, #80	; 0x50
 800459a:	f001 fa67 	bl	8005a6c <malloc>
 800459e:	4602      	mov	r2, r0
 80045a0:	65b8      	str	r0, [r7, #88]	; 0x58
 80045a2:	b920      	cbnz	r0, 80045ae <strtok+0x26>
 80045a4:	2157      	movs	r1, #87	; 0x57
 80045a6:	4b10      	ldr	r3, [pc, #64]	; (80045e8 <strtok+0x60>)
 80045a8:	4810      	ldr	r0, [pc, #64]	; (80045ec <strtok+0x64>)
 80045aa:	f000 f849 	bl	8004640 <__assert_func>
 80045ae:	e9c0 4400 	strd	r4, r4, [r0]
 80045b2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80045b6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80045ba:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80045be:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80045c2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80045c6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80045ca:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80045ce:	6184      	str	r4, [r0, #24]
 80045d0:	7704      	strb	r4, [r0, #28]
 80045d2:	6244      	str	r4, [r0, #36]	; 0x24
 80045d4:	4631      	mov	r1, r6
 80045d6:	4628      	mov	r0, r5
 80045d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045da:	2301      	movs	r3, #1
 80045dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045e0:	f000 b806 	b.w	80045f0 <__strtok_r>
 80045e4:	2000002c 	.word	0x2000002c
 80045e8:	080075f0 	.word	0x080075f0
 80045ec:	08007607 	.word	0x08007607

080045f0 <__strtok_r>:
 80045f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045f2:	b908      	cbnz	r0, 80045f8 <__strtok_r+0x8>
 80045f4:	6810      	ldr	r0, [r2, #0]
 80045f6:	b188      	cbz	r0, 800461c <__strtok_r+0x2c>
 80045f8:	4604      	mov	r4, r0
 80045fa:	460f      	mov	r7, r1
 80045fc:	4620      	mov	r0, r4
 80045fe:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004602:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004606:	b91e      	cbnz	r6, 8004610 <__strtok_r+0x20>
 8004608:	b965      	cbnz	r5, 8004624 <__strtok_r+0x34>
 800460a:	4628      	mov	r0, r5
 800460c:	6015      	str	r5, [r2, #0]
 800460e:	e005      	b.n	800461c <__strtok_r+0x2c>
 8004610:	42b5      	cmp	r5, r6
 8004612:	d1f6      	bne.n	8004602 <__strtok_r+0x12>
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f0      	bne.n	80045fa <__strtok_r+0xa>
 8004618:	6014      	str	r4, [r2, #0]
 800461a:	7003      	strb	r3, [r0, #0]
 800461c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800461e:	461c      	mov	r4, r3
 8004620:	e00c      	b.n	800463c <__strtok_r+0x4c>
 8004622:	b915      	cbnz	r5, 800462a <__strtok_r+0x3a>
 8004624:	460e      	mov	r6, r1
 8004626:	f814 3b01 	ldrb.w	r3, [r4], #1
 800462a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800462e:	42ab      	cmp	r3, r5
 8004630:	d1f7      	bne.n	8004622 <__strtok_r+0x32>
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0f3      	beq.n	800461e <__strtok_r+0x2e>
 8004636:	2300      	movs	r3, #0
 8004638:	f804 3c01 	strb.w	r3, [r4, #-1]
 800463c:	6014      	str	r4, [r2, #0]
 800463e:	e7ed      	b.n	800461c <__strtok_r+0x2c>

08004640 <__assert_func>:
 8004640:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004642:	4614      	mov	r4, r2
 8004644:	461a      	mov	r2, r3
 8004646:	4b09      	ldr	r3, [pc, #36]	; (800466c <__assert_func+0x2c>)
 8004648:	4605      	mov	r5, r0
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68d8      	ldr	r0, [r3, #12]
 800464e:	b14c      	cbz	r4, 8004664 <__assert_func+0x24>
 8004650:	4b07      	ldr	r3, [pc, #28]	; (8004670 <__assert_func+0x30>)
 8004652:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004656:	9100      	str	r1, [sp, #0]
 8004658:	462b      	mov	r3, r5
 800465a:	4906      	ldr	r1, [pc, #24]	; (8004674 <__assert_func+0x34>)
 800465c:	f000 fe8a 	bl	8005374 <fiprintf>
 8004660:	f002 fb50 	bl	8006d04 <abort>
 8004664:	4b04      	ldr	r3, [pc, #16]	; (8004678 <__assert_func+0x38>)
 8004666:	461c      	mov	r4, r3
 8004668:	e7f3      	b.n	8004652 <__assert_func+0x12>
 800466a:	bf00      	nop
 800466c:	2000002c 	.word	0x2000002c
 8004670:	08007668 	.word	0x08007668
 8004674:	08007675 	.word	0x08007675
 8004678:	080076a3 	.word	0x080076a3

0800467c <quorem>:
 800467c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004680:	6903      	ldr	r3, [r0, #16]
 8004682:	690c      	ldr	r4, [r1, #16]
 8004684:	4607      	mov	r7, r0
 8004686:	42a3      	cmp	r3, r4
 8004688:	f2c0 8083 	blt.w	8004792 <quorem+0x116>
 800468c:	3c01      	subs	r4, #1
 800468e:	f100 0514 	add.w	r5, r0, #20
 8004692:	f101 0814 	add.w	r8, r1, #20
 8004696:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800469a:	9301      	str	r3, [sp, #4]
 800469c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80046a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80046a4:	3301      	adds	r3, #1
 80046a6:	429a      	cmp	r2, r3
 80046a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80046ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80046b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80046b4:	d332      	bcc.n	800471c <quorem+0xa0>
 80046b6:	f04f 0e00 	mov.w	lr, #0
 80046ba:	4640      	mov	r0, r8
 80046bc:	46ac      	mov	ip, r5
 80046be:	46f2      	mov	sl, lr
 80046c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80046c4:	b293      	uxth	r3, r2
 80046c6:	fb06 e303 	mla	r3, r6, r3, lr
 80046ca:	0c12      	lsrs	r2, r2, #16
 80046cc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80046d0:	fb06 e202 	mla	r2, r6, r2, lr
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	ebaa 0303 	sub.w	r3, sl, r3
 80046da:	f8dc a000 	ldr.w	sl, [ip]
 80046de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80046e2:	fa1f fa8a 	uxth.w	sl, sl
 80046e6:	4453      	add	r3, sl
 80046e8:	fa1f fa82 	uxth.w	sl, r2
 80046ec:	f8dc 2000 	ldr.w	r2, [ip]
 80046f0:	4581      	cmp	r9, r0
 80046f2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80046f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004700:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004704:	f84c 3b04 	str.w	r3, [ip], #4
 8004708:	d2da      	bcs.n	80046c0 <quorem+0x44>
 800470a:	f855 300b 	ldr.w	r3, [r5, fp]
 800470e:	b92b      	cbnz	r3, 800471c <quorem+0xa0>
 8004710:	9b01      	ldr	r3, [sp, #4]
 8004712:	3b04      	subs	r3, #4
 8004714:	429d      	cmp	r5, r3
 8004716:	461a      	mov	r2, r3
 8004718:	d32f      	bcc.n	800477a <quorem+0xfe>
 800471a:	613c      	str	r4, [r7, #16]
 800471c:	4638      	mov	r0, r7
 800471e:	f001 fc9f 	bl	8006060 <__mcmp>
 8004722:	2800      	cmp	r0, #0
 8004724:	db25      	blt.n	8004772 <quorem+0xf6>
 8004726:	4628      	mov	r0, r5
 8004728:	f04f 0c00 	mov.w	ip, #0
 800472c:	3601      	adds	r6, #1
 800472e:	f858 1b04 	ldr.w	r1, [r8], #4
 8004732:	f8d0 e000 	ldr.w	lr, [r0]
 8004736:	b28b      	uxth	r3, r1
 8004738:	ebac 0303 	sub.w	r3, ip, r3
 800473c:	fa1f f28e 	uxth.w	r2, lr
 8004740:	4413      	add	r3, r2
 8004742:	0c0a      	lsrs	r2, r1, #16
 8004744:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004748:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800474c:	b29b      	uxth	r3, r3
 800474e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004752:	45c1      	cmp	r9, r8
 8004754:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004758:	f840 3b04 	str.w	r3, [r0], #4
 800475c:	d2e7      	bcs.n	800472e <quorem+0xb2>
 800475e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004762:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004766:	b922      	cbnz	r2, 8004772 <quorem+0xf6>
 8004768:	3b04      	subs	r3, #4
 800476a:	429d      	cmp	r5, r3
 800476c:	461a      	mov	r2, r3
 800476e:	d30a      	bcc.n	8004786 <quorem+0x10a>
 8004770:	613c      	str	r4, [r7, #16]
 8004772:	4630      	mov	r0, r6
 8004774:	b003      	add	sp, #12
 8004776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800477a:	6812      	ldr	r2, [r2, #0]
 800477c:	3b04      	subs	r3, #4
 800477e:	2a00      	cmp	r2, #0
 8004780:	d1cb      	bne.n	800471a <quorem+0x9e>
 8004782:	3c01      	subs	r4, #1
 8004784:	e7c6      	b.n	8004714 <quorem+0x98>
 8004786:	6812      	ldr	r2, [r2, #0]
 8004788:	3b04      	subs	r3, #4
 800478a:	2a00      	cmp	r2, #0
 800478c:	d1f0      	bne.n	8004770 <quorem+0xf4>
 800478e:	3c01      	subs	r4, #1
 8004790:	e7eb      	b.n	800476a <quorem+0xee>
 8004792:	2000      	movs	r0, #0
 8004794:	e7ee      	b.n	8004774 <quorem+0xf8>
	...

08004798 <_dtoa_r>:
 8004798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800479c:	4616      	mov	r6, r2
 800479e:	461f      	mov	r7, r3
 80047a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80047a2:	b099      	sub	sp, #100	; 0x64
 80047a4:	4605      	mov	r5, r0
 80047a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80047aa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80047ae:	b974      	cbnz	r4, 80047ce <_dtoa_r+0x36>
 80047b0:	2010      	movs	r0, #16
 80047b2:	f001 f95b 	bl	8005a6c <malloc>
 80047b6:	4602      	mov	r2, r0
 80047b8:	6268      	str	r0, [r5, #36]	; 0x24
 80047ba:	b920      	cbnz	r0, 80047c6 <_dtoa_r+0x2e>
 80047bc:	21ea      	movs	r1, #234	; 0xea
 80047be:	4bae      	ldr	r3, [pc, #696]	; (8004a78 <_dtoa_r+0x2e0>)
 80047c0:	48ae      	ldr	r0, [pc, #696]	; (8004a7c <_dtoa_r+0x2e4>)
 80047c2:	f7ff ff3d 	bl	8004640 <__assert_func>
 80047c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80047ca:	6004      	str	r4, [r0, #0]
 80047cc:	60c4      	str	r4, [r0, #12]
 80047ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80047d0:	6819      	ldr	r1, [r3, #0]
 80047d2:	b151      	cbz	r1, 80047ea <_dtoa_r+0x52>
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	2301      	movs	r3, #1
 80047d8:	4093      	lsls	r3, r2
 80047da:	604a      	str	r2, [r1, #4]
 80047dc:	608b      	str	r3, [r1, #8]
 80047de:	4628      	mov	r0, r5
 80047e0:	f001 f9ba 	bl	8005b58 <_Bfree>
 80047e4:	2200      	movs	r2, #0
 80047e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	1e3b      	subs	r3, r7, #0
 80047ec:	bfaf      	iteee	ge
 80047ee:	2300      	movge	r3, #0
 80047f0:	2201      	movlt	r2, #1
 80047f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80047f6:	9305      	strlt	r3, [sp, #20]
 80047f8:	bfa8      	it	ge
 80047fa:	f8c8 3000 	strge.w	r3, [r8]
 80047fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004802:	4b9f      	ldr	r3, [pc, #636]	; (8004a80 <_dtoa_r+0x2e8>)
 8004804:	bfb8      	it	lt
 8004806:	f8c8 2000 	strlt.w	r2, [r8]
 800480a:	ea33 0309 	bics.w	r3, r3, r9
 800480e:	d119      	bne.n	8004844 <_dtoa_r+0xac>
 8004810:	f242 730f 	movw	r3, #9999	; 0x270f
 8004814:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004816:	6013      	str	r3, [r2, #0]
 8004818:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800481c:	4333      	orrs	r3, r6
 800481e:	f000 8580 	beq.w	8005322 <_dtoa_r+0xb8a>
 8004822:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004824:	b953      	cbnz	r3, 800483c <_dtoa_r+0xa4>
 8004826:	4b97      	ldr	r3, [pc, #604]	; (8004a84 <_dtoa_r+0x2ec>)
 8004828:	e022      	b.n	8004870 <_dtoa_r+0xd8>
 800482a:	4b97      	ldr	r3, [pc, #604]	; (8004a88 <_dtoa_r+0x2f0>)
 800482c:	9308      	str	r3, [sp, #32]
 800482e:	3308      	adds	r3, #8
 8004830:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	9808      	ldr	r0, [sp, #32]
 8004836:	b019      	add	sp, #100	; 0x64
 8004838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800483c:	4b91      	ldr	r3, [pc, #580]	; (8004a84 <_dtoa_r+0x2ec>)
 800483e:	9308      	str	r3, [sp, #32]
 8004840:	3303      	adds	r3, #3
 8004842:	e7f5      	b.n	8004830 <_dtoa_r+0x98>
 8004844:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004848:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800484c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004850:	2200      	movs	r2, #0
 8004852:	2300      	movs	r3, #0
 8004854:	f7fc f8b2 	bl	80009bc <__aeabi_dcmpeq>
 8004858:	4680      	mov	r8, r0
 800485a:	b158      	cbz	r0, 8004874 <_dtoa_r+0xdc>
 800485c:	2301      	movs	r3, #1
 800485e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 8559 	beq.w	800531c <_dtoa_r+0xb84>
 800486a:	4888      	ldr	r0, [pc, #544]	; (8004a8c <_dtoa_r+0x2f4>)
 800486c:	6018      	str	r0, [r3, #0]
 800486e:	1e43      	subs	r3, r0, #1
 8004870:	9308      	str	r3, [sp, #32]
 8004872:	e7df      	b.n	8004834 <_dtoa_r+0x9c>
 8004874:	ab16      	add	r3, sp, #88	; 0x58
 8004876:	9301      	str	r3, [sp, #4]
 8004878:	ab17      	add	r3, sp, #92	; 0x5c
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	4628      	mov	r0, r5
 800487e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004882:	f001 fd13 	bl	80062ac <__d2b>
 8004886:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800488a:	4682      	mov	sl, r0
 800488c:	2c00      	cmp	r4, #0
 800488e:	d07e      	beq.n	800498e <_dtoa_r+0x1f6>
 8004890:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004894:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004896:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800489a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800489e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80048a2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80048a6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80048aa:	2200      	movs	r2, #0
 80048ac:	4b78      	ldr	r3, [pc, #480]	; (8004a90 <_dtoa_r+0x2f8>)
 80048ae:	f7fb fc65 	bl	800017c <__aeabi_dsub>
 80048b2:	a36b      	add	r3, pc, #428	; (adr r3, 8004a60 <_dtoa_r+0x2c8>)
 80048b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b8:	f7fb fe18 	bl	80004ec <__aeabi_dmul>
 80048bc:	a36a      	add	r3, pc, #424	; (adr r3, 8004a68 <_dtoa_r+0x2d0>)
 80048be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c2:	f7fb fc5d 	bl	8000180 <__adddf3>
 80048c6:	4606      	mov	r6, r0
 80048c8:	4620      	mov	r0, r4
 80048ca:	460f      	mov	r7, r1
 80048cc:	f7fb fda4 	bl	8000418 <__aeabi_i2d>
 80048d0:	a367      	add	r3, pc, #412	; (adr r3, 8004a70 <_dtoa_r+0x2d8>)
 80048d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d6:	f7fb fe09 	bl	80004ec <__aeabi_dmul>
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	4630      	mov	r0, r6
 80048e0:	4639      	mov	r1, r7
 80048e2:	f7fb fc4d 	bl	8000180 <__adddf3>
 80048e6:	4606      	mov	r6, r0
 80048e8:	460f      	mov	r7, r1
 80048ea:	f7fc f8af 	bl	8000a4c <__aeabi_d2iz>
 80048ee:	2200      	movs	r2, #0
 80048f0:	4681      	mov	r9, r0
 80048f2:	2300      	movs	r3, #0
 80048f4:	4630      	mov	r0, r6
 80048f6:	4639      	mov	r1, r7
 80048f8:	f7fc f86a 	bl	80009d0 <__aeabi_dcmplt>
 80048fc:	b148      	cbz	r0, 8004912 <_dtoa_r+0x17a>
 80048fe:	4648      	mov	r0, r9
 8004900:	f7fb fd8a 	bl	8000418 <__aeabi_i2d>
 8004904:	4632      	mov	r2, r6
 8004906:	463b      	mov	r3, r7
 8004908:	f7fc f858 	bl	80009bc <__aeabi_dcmpeq>
 800490c:	b908      	cbnz	r0, 8004912 <_dtoa_r+0x17a>
 800490e:	f109 39ff 	add.w	r9, r9, #4294967295
 8004912:	f1b9 0f16 	cmp.w	r9, #22
 8004916:	d857      	bhi.n	80049c8 <_dtoa_r+0x230>
 8004918:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800491c:	4b5d      	ldr	r3, [pc, #372]	; (8004a94 <_dtoa_r+0x2fc>)
 800491e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004926:	f7fc f853 	bl	80009d0 <__aeabi_dcmplt>
 800492a:	2800      	cmp	r0, #0
 800492c:	d04e      	beq.n	80049cc <_dtoa_r+0x234>
 800492e:	2300      	movs	r3, #0
 8004930:	f109 39ff 	add.w	r9, r9, #4294967295
 8004934:	930f      	str	r3, [sp, #60]	; 0x3c
 8004936:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004938:	1b1c      	subs	r4, r3, r4
 800493a:	1e63      	subs	r3, r4, #1
 800493c:	9309      	str	r3, [sp, #36]	; 0x24
 800493e:	bf49      	itett	mi
 8004940:	f1c4 0301 	rsbmi	r3, r4, #1
 8004944:	2300      	movpl	r3, #0
 8004946:	9306      	strmi	r3, [sp, #24]
 8004948:	2300      	movmi	r3, #0
 800494a:	bf54      	ite	pl
 800494c:	9306      	strpl	r3, [sp, #24]
 800494e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004950:	f1b9 0f00 	cmp.w	r9, #0
 8004954:	db3c      	blt.n	80049d0 <_dtoa_r+0x238>
 8004956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004958:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800495c:	444b      	add	r3, r9
 800495e:	9309      	str	r3, [sp, #36]	; 0x24
 8004960:	2300      	movs	r3, #0
 8004962:	930a      	str	r3, [sp, #40]	; 0x28
 8004964:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004966:	2b09      	cmp	r3, #9
 8004968:	d86c      	bhi.n	8004a44 <_dtoa_r+0x2ac>
 800496a:	2b05      	cmp	r3, #5
 800496c:	bfc4      	itt	gt
 800496e:	3b04      	subgt	r3, #4
 8004970:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004972:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004974:	bfc8      	it	gt
 8004976:	2400      	movgt	r4, #0
 8004978:	f1a3 0302 	sub.w	r3, r3, #2
 800497c:	bfd8      	it	le
 800497e:	2401      	movle	r4, #1
 8004980:	2b03      	cmp	r3, #3
 8004982:	f200 808b 	bhi.w	8004a9c <_dtoa_r+0x304>
 8004986:	e8df f003 	tbb	[pc, r3]
 800498a:	4f2d      	.short	0x4f2d
 800498c:	5b4d      	.short	0x5b4d
 800498e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004992:	441c      	add	r4, r3
 8004994:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004998:	2b20      	cmp	r3, #32
 800499a:	bfc3      	ittte	gt
 800499c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80049a0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80049a4:	fa09 f303 	lslgt.w	r3, r9, r3
 80049a8:	f1c3 0320 	rsble	r3, r3, #32
 80049ac:	bfc6      	itte	gt
 80049ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80049b2:	4318      	orrgt	r0, r3
 80049b4:	fa06 f003 	lslle.w	r0, r6, r3
 80049b8:	f7fb fd1e 	bl	80003f8 <__aeabi_ui2d>
 80049bc:	2301      	movs	r3, #1
 80049be:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80049c2:	3c01      	subs	r4, #1
 80049c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80049c6:	e770      	b.n	80048aa <_dtoa_r+0x112>
 80049c8:	2301      	movs	r3, #1
 80049ca:	e7b3      	b.n	8004934 <_dtoa_r+0x19c>
 80049cc:	900f      	str	r0, [sp, #60]	; 0x3c
 80049ce:	e7b2      	b.n	8004936 <_dtoa_r+0x19e>
 80049d0:	9b06      	ldr	r3, [sp, #24]
 80049d2:	eba3 0309 	sub.w	r3, r3, r9
 80049d6:	9306      	str	r3, [sp, #24]
 80049d8:	f1c9 0300 	rsb	r3, r9, #0
 80049dc:	930a      	str	r3, [sp, #40]	; 0x28
 80049de:	2300      	movs	r3, #0
 80049e0:	930e      	str	r3, [sp, #56]	; 0x38
 80049e2:	e7bf      	b.n	8004964 <_dtoa_r+0x1cc>
 80049e4:	2300      	movs	r3, #0
 80049e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80049e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	dc59      	bgt.n	8004aa2 <_dtoa_r+0x30a>
 80049ee:	f04f 0b01 	mov.w	fp, #1
 80049f2:	465b      	mov	r3, fp
 80049f4:	f8cd b008 	str.w	fp, [sp, #8]
 80049f8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80049fc:	2200      	movs	r2, #0
 80049fe:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004a00:	6042      	str	r2, [r0, #4]
 8004a02:	2204      	movs	r2, #4
 8004a04:	f102 0614 	add.w	r6, r2, #20
 8004a08:	429e      	cmp	r6, r3
 8004a0a:	6841      	ldr	r1, [r0, #4]
 8004a0c:	d94f      	bls.n	8004aae <_dtoa_r+0x316>
 8004a0e:	4628      	mov	r0, r5
 8004a10:	f001 f862 	bl	8005ad8 <_Balloc>
 8004a14:	9008      	str	r0, [sp, #32]
 8004a16:	2800      	cmp	r0, #0
 8004a18:	d14d      	bne.n	8004ab6 <_dtoa_r+0x31e>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004a20:	4b1d      	ldr	r3, [pc, #116]	; (8004a98 <_dtoa_r+0x300>)
 8004a22:	e6cd      	b.n	80047c0 <_dtoa_r+0x28>
 8004a24:	2301      	movs	r3, #1
 8004a26:	e7de      	b.n	80049e6 <_dtoa_r+0x24e>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a2e:	eb09 0b03 	add.w	fp, r9, r3
 8004a32:	f10b 0301 	add.w	r3, fp, #1
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	9302      	str	r3, [sp, #8]
 8004a3a:	bfb8      	it	lt
 8004a3c:	2301      	movlt	r3, #1
 8004a3e:	e7dd      	b.n	80049fc <_dtoa_r+0x264>
 8004a40:	2301      	movs	r3, #1
 8004a42:	e7f2      	b.n	8004a2a <_dtoa_r+0x292>
 8004a44:	2401      	movs	r4, #1
 8004a46:	2300      	movs	r3, #0
 8004a48:	940b      	str	r4, [sp, #44]	; 0x2c
 8004a4a:	9322      	str	r3, [sp, #136]	; 0x88
 8004a4c:	f04f 3bff 	mov.w	fp, #4294967295
 8004a50:	2200      	movs	r2, #0
 8004a52:	2312      	movs	r3, #18
 8004a54:	f8cd b008 	str.w	fp, [sp, #8]
 8004a58:	9223      	str	r2, [sp, #140]	; 0x8c
 8004a5a:	e7cf      	b.n	80049fc <_dtoa_r+0x264>
 8004a5c:	f3af 8000 	nop.w
 8004a60:	636f4361 	.word	0x636f4361
 8004a64:	3fd287a7 	.word	0x3fd287a7
 8004a68:	8b60c8b3 	.word	0x8b60c8b3
 8004a6c:	3fc68a28 	.word	0x3fc68a28
 8004a70:	509f79fb 	.word	0x509f79fb
 8004a74:	3fd34413 	.word	0x3fd34413
 8004a78:	080075f0 	.word	0x080075f0
 8004a7c:	080076b1 	.word	0x080076b1
 8004a80:	7ff00000 	.word	0x7ff00000
 8004a84:	080076ad 	.word	0x080076ad
 8004a88:	080076a4 	.word	0x080076a4
 8004a8c:	0800757d 	.word	0x0800757d
 8004a90:	3ff80000 	.word	0x3ff80000
 8004a94:	08007828 	.word	0x08007828
 8004a98:	08007710 	.word	0x08007710
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004aa0:	e7d4      	b.n	8004a4c <_dtoa_r+0x2b4>
 8004aa2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004aa6:	465b      	mov	r3, fp
 8004aa8:	f8cd b008 	str.w	fp, [sp, #8]
 8004aac:	e7a6      	b.n	80049fc <_dtoa_r+0x264>
 8004aae:	3101      	adds	r1, #1
 8004ab0:	6041      	str	r1, [r0, #4]
 8004ab2:	0052      	lsls	r2, r2, #1
 8004ab4:	e7a6      	b.n	8004a04 <_dtoa_r+0x26c>
 8004ab6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ab8:	9a08      	ldr	r2, [sp, #32]
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	9b02      	ldr	r3, [sp, #8]
 8004abe:	2b0e      	cmp	r3, #14
 8004ac0:	f200 80a8 	bhi.w	8004c14 <_dtoa_r+0x47c>
 8004ac4:	2c00      	cmp	r4, #0
 8004ac6:	f000 80a5 	beq.w	8004c14 <_dtoa_r+0x47c>
 8004aca:	f1b9 0f00 	cmp.w	r9, #0
 8004ace:	dd34      	ble.n	8004b3a <_dtoa_r+0x3a2>
 8004ad0:	4a9a      	ldr	r2, [pc, #616]	; (8004d3c <_dtoa_r+0x5a4>)
 8004ad2:	f009 030f 	and.w	r3, r9, #15
 8004ad6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004ada:	f419 7f80 	tst.w	r9, #256	; 0x100
 8004ade:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ae2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004ae6:	ea4f 1429 	mov.w	r4, r9, asr #4
 8004aea:	d016      	beq.n	8004b1a <_dtoa_r+0x382>
 8004aec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004af0:	4b93      	ldr	r3, [pc, #588]	; (8004d40 <_dtoa_r+0x5a8>)
 8004af2:	2703      	movs	r7, #3
 8004af4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004af8:	f7fb fe22 	bl	8000740 <__aeabi_ddiv>
 8004afc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b00:	f004 040f 	and.w	r4, r4, #15
 8004b04:	4e8e      	ldr	r6, [pc, #568]	; (8004d40 <_dtoa_r+0x5a8>)
 8004b06:	b954      	cbnz	r4, 8004b1e <_dtoa_r+0x386>
 8004b08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004b0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b10:	f7fb fe16 	bl	8000740 <__aeabi_ddiv>
 8004b14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b18:	e029      	b.n	8004b6e <_dtoa_r+0x3d6>
 8004b1a:	2702      	movs	r7, #2
 8004b1c:	e7f2      	b.n	8004b04 <_dtoa_r+0x36c>
 8004b1e:	07e1      	lsls	r1, r4, #31
 8004b20:	d508      	bpl.n	8004b34 <_dtoa_r+0x39c>
 8004b22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b26:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004b2a:	f7fb fcdf 	bl	80004ec <__aeabi_dmul>
 8004b2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004b32:	3701      	adds	r7, #1
 8004b34:	1064      	asrs	r4, r4, #1
 8004b36:	3608      	adds	r6, #8
 8004b38:	e7e5      	b.n	8004b06 <_dtoa_r+0x36e>
 8004b3a:	f000 80a5 	beq.w	8004c88 <_dtoa_r+0x4f0>
 8004b3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b42:	f1c9 0400 	rsb	r4, r9, #0
 8004b46:	4b7d      	ldr	r3, [pc, #500]	; (8004d3c <_dtoa_r+0x5a4>)
 8004b48:	f004 020f 	and.w	r2, r4, #15
 8004b4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b54:	f7fb fcca 	bl	80004ec <__aeabi_dmul>
 8004b58:	2702      	movs	r7, #2
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b60:	4e77      	ldr	r6, [pc, #476]	; (8004d40 <_dtoa_r+0x5a8>)
 8004b62:	1124      	asrs	r4, r4, #4
 8004b64:	2c00      	cmp	r4, #0
 8004b66:	f040 8084 	bne.w	8004c72 <_dtoa_r+0x4da>
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1d2      	bne.n	8004b14 <_dtoa_r+0x37c>
 8004b6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 808b 	beq.w	8004c8c <_dtoa_r+0x4f4>
 8004b76:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004b7a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004b7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b82:	2200      	movs	r2, #0
 8004b84:	4b6f      	ldr	r3, [pc, #444]	; (8004d44 <_dtoa_r+0x5ac>)
 8004b86:	f7fb ff23 	bl	80009d0 <__aeabi_dcmplt>
 8004b8a:	2800      	cmp	r0, #0
 8004b8c:	d07e      	beq.n	8004c8c <_dtoa_r+0x4f4>
 8004b8e:	9b02      	ldr	r3, [sp, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d07b      	beq.n	8004c8c <_dtoa_r+0x4f4>
 8004b94:	f1bb 0f00 	cmp.w	fp, #0
 8004b98:	dd38      	ble.n	8004c0c <_dtoa_r+0x474>
 8004b9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	4b69      	ldr	r3, [pc, #420]	; (8004d48 <_dtoa_r+0x5b0>)
 8004ba2:	f7fb fca3 	bl	80004ec <__aeabi_dmul>
 8004ba6:	465c      	mov	r4, fp
 8004ba8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bac:	f109 38ff 	add.w	r8, r9, #4294967295
 8004bb0:	3701      	adds	r7, #1
 8004bb2:	4638      	mov	r0, r7
 8004bb4:	f7fb fc30 	bl	8000418 <__aeabi_i2d>
 8004bb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bbc:	f7fb fc96 	bl	80004ec <__aeabi_dmul>
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	4b62      	ldr	r3, [pc, #392]	; (8004d4c <_dtoa_r+0x5b4>)
 8004bc4:	f7fb fadc 	bl	8000180 <__adddf3>
 8004bc8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004bcc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004bd0:	9611      	str	r6, [sp, #68]	; 0x44
 8004bd2:	2c00      	cmp	r4, #0
 8004bd4:	d15d      	bne.n	8004c92 <_dtoa_r+0x4fa>
 8004bd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	4b5c      	ldr	r3, [pc, #368]	; (8004d50 <_dtoa_r+0x5b8>)
 8004bde:	f7fb facd 	bl	800017c <__aeabi_dsub>
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004bea:	4633      	mov	r3, r6
 8004bec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004bee:	f7fb ff0d 	bl	8000a0c <__aeabi_dcmpgt>
 8004bf2:	2800      	cmp	r0, #0
 8004bf4:	f040 829e 	bne.w	8005134 <_dtoa_r+0x99c>
 8004bf8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bfc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004bfe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004c02:	f7fb fee5 	bl	80009d0 <__aeabi_dcmplt>
 8004c06:	2800      	cmp	r0, #0
 8004c08:	f040 8292 	bne.w	8005130 <_dtoa_r+0x998>
 8004c0c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004c10:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004c14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f2c0 8153 	blt.w	8004ec2 <_dtoa_r+0x72a>
 8004c1c:	f1b9 0f0e 	cmp.w	r9, #14
 8004c20:	f300 814f 	bgt.w	8004ec2 <_dtoa_r+0x72a>
 8004c24:	4b45      	ldr	r3, [pc, #276]	; (8004d3c <_dtoa_r+0x5a4>)
 8004c26:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004c2a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c2e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004c32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f280 80db 	bge.w	8004df0 <_dtoa_r+0x658>
 8004c3a:	9b02      	ldr	r3, [sp, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f300 80d7 	bgt.w	8004df0 <_dtoa_r+0x658>
 8004c42:	f040 8274 	bne.w	800512e <_dtoa_r+0x996>
 8004c46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	4b40      	ldr	r3, [pc, #256]	; (8004d50 <_dtoa_r+0x5b8>)
 8004c4e:	f7fb fc4d 	bl	80004ec <__aeabi_dmul>
 8004c52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c56:	f7fb fecf 	bl	80009f8 <__aeabi_dcmpge>
 8004c5a:	9c02      	ldr	r4, [sp, #8]
 8004c5c:	4626      	mov	r6, r4
 8004c5e:	2800      	cmp	r0, #0
 8004c60:	f040 824a 	bne.w	80050f8 <_dtoa_r+0x960>
 8004c64:	2331      	movs	r3, #49	; 0x31
 8004c66:	9f08      	ldr	r7, [sp, #32]
 8004c68:	f109 0901 	add.w	r9, r9, #1
 8004c6c:	f807 3b01 	strb.w	r3, [r7], #1
 8004c70:	e246      	b.n	8005100 <_dtoa_r+0x968>
 8004c72:	07e2      	lsls	r2, r4, #31
 8004c74:	d505      	bpl.n	8004c82 <_dtoa_r+0x4ea>
 8004c76:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004c7a:	f7fb fc37 	bl	80004ec <__aeabi_dmul>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	3701      	adds	r7, #1
 8004c82:	1064      	asrs	r4, r4, #1
 8004c84:	3608      	adds	r6, #8
 8004c86:	e76d      	b.n	8004b64 <_dtoa_r+0x3cc>
 8004c88:	2702      	movs	r7, #2
 8004c8a:	e770      	b.n	8004b6e <_dtoa_r+0x3d6>
 8004c8c:	46c8      	mov	r8, r9
 8004c8e:	9c02      	ldr	r4, [sp, #8]
 8004c90:	e78f      	b.n	8004bb2 <_dtoa_r+0x41a>
 8004c92:	9908      	ldr	r1, [sp, #32]
 8004c94:	4b29      	ldr	r3, [pc, #164]	; (8004d3c <_dtoa_r+0x5a4>)
 8004c96:	4421      	add	r1, r4
 8004c98:	9112      	str	r1, [sp, #72]	; 0x48
 8004c9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004ca0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004ca4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004ca8:	2900      	cmp	r1, #0
 8004caa:	d055      	beq.n	8004d58 <_dtoa_r+0x5c0>
 8004cac:	2000      	movs	r0, #0
 8004cae:	4929      	ldr	r1, [pc, #164]	; (8004d54 <_dtoa_r+0x5bc>)
 8004cb0:	f7fb fd46 	bl	8000740 <__aeabi_ddiv>
 8004cb4:	463b      	mov	r3, r7
 8004cb6:	4632      	mov	r2, r6
 8004cb8:	f7fb fa60 	bl	800017c <__aeabi_dsub>
 8004cbc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004cc0:	9f08      	ldr	r7, [sp, #32]
 8004cc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cc6:	f7fb fec1 	bl	8000a4c <__aeabi_d2iz>
 8004cca:	4604      	mov	r4, r0
 8004ccc:	f7fb fba4 	bl	8000418 <__aeabi_i2d>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cd8:	f7fb fa50 	bl	800017c <__aeabi_dsub>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	3430      	adds	r4, #48	; 0x30
 8004ce2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ce6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004cea:	f807 4b01 	strb.w	r4, [r7], #1
 8004cee:	f7fb fe6f 	bl	80009d0 <__aeabi_dcmplt>
 8004cf2:	2800      	cmp	r0, #0
 8004cf4:	d174      	bne.n	8004de0 <_dtoa_r+0x648>
 8004cf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cfa:	2000      	movs	r0, #0
 8004cfc:	4911      	ldr	r1, [pc, #68]	; (8004d44 <_dtoa_r+0x5ac>)
 8004cfe:	f7fb fa3d 	bl	800017c <__aeabi_dsub>
 8004d02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d06:	f7fb fe63 	bl	80009d0 <__aeabi_dcmplt>
 8004d0a:	2800      	cmp	r0, #0
 8004d0c:	f040 80b6 	bne.w	8004e7c <_dtoa_r+0x6e4>
 8004d10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d12:	429f      	cmp	r7, r3
 8004d14:	f43f af7a 	beq.w	8004c0c <_dtoa_r+0x474>
 8004d18:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	4b0a      	ldr	r3, [pc, #40]	; (8004d48 <_dtoa_r+0x5b0>)
 8004d20:	f7fb fbe4 	bl	80004ec <__aeabi_dmul>
 8004d24:	2200      	movs	r2, #0
 8004d26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d2e:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <_dtoa_r+0x5b0>)
 8004d30:	f7fb fbdc 	bl	80004ec <__aeabi_dmul>
 8004d34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d38:	e7c3      	b.n	8004cc2 <_dtoa_r+0x52a>
 8004d3a:	bf00      	nop
 8004d3c:	08007828 	.word	0x08007828
 8004d40:	08007800 	.word	0x08007800
 8004d44:	3ff00000 	.word	0x3ff00000
 8004d48:	40240000 	.word	0x40240000
 8004d4c:	401c0000 	.word	0x401c0000
 8004d50:	40140000 	.word	0x40140000
 8004d54:	3fe00000 	.word	0x3fe00000
 8004d58:	4630      	mov	r0, r6
 8004d5a:	4639      	mov	r1, r7
 8004d5c:	f7fb fbc6 	bl	80004ec <__aeabi_dmul>
 8004d60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d62:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d66:	9c08      	ldr	r4, [sp, #32]
 8004d68:	9314      	str	r3, [sp, #80]	; 0x50
 8004d6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d6e:	f7fb fe6d 	bl	8000a4c <__aeabi_d2iz>
 8004d72:	9015      	str	r0, [sp, #84]	; 0x54
 8004d74:	f7fb fb50 	bl	8000418 <__aeabi_i2d>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d80:	f7fb f9fc 	bl	800017c <__aeabi_dsub>
 8004d84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004d86:	4606      	mov	r6, r0
 8004d88:	3330      	adds	r3, #48	; 0x30
 8004d8a:	f804 3b01 	strb.w	r3, [r4], #1
 8004d8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d90:	460f      	mov	r7, r1
 8004d92:	429c      	cmp	r4, r3
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	d124      	bne.n	8004de4 <_dtoa_r+0x64c>
 8004d9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d9e:	4bb3      	ldr	r3, [pc, #716]	; (800506c <_dtoa_r+0x8d4>)
 8004da0:	f7fb f9ee 	bl	8000180 <__adddf3>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4630      	mov	r0, r6
 8004daa:	4639      	mov	r1, r7
 8004dac:	f7fb fe2e 	bl	8000a0c <__aeabi_dcmpgt>
 8004db0:	2800      	cmp	r0, #0
 8004db2:	d162      	bne.n	8004e7a <_dtoa_r+0x6e2>
 8004db4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004db8:	2000      	movs	r0, #0
 8004dba:	49ac      	ldr	r1, [pc, #688]	; (800506c <_dtoa_r+0x8d4>)
 8004dbc:	f7fb f9de 	bl	800017c <__aeabi_dsub>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	4639      	mov	r1, r7
 8004dc8:	f7fb fe02 	bl	80009d0 <__aeabi_dcmplt>
 8004dcc:	2800      	cmp	r0, #0
 8004dce:	f43f af1d 	beq.w	8004c0c <_dtoa_r+0x474>
 8004dd2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004dd4:	1e7b      	subs	r3, r7, #1
 8004dd6:	9314      	str	r3, [sp, #80]	; 0x50
 8004dd8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004ddc:	2b30      	cmp	r3, #48	; 0x30
 8004dde:	d0f8      	beq.n	8004dd2 <_dtoa_r+0x63a>
 8004de0:	46c1      	mov	r9, r8
 8004de2:	e03a      	b.n	8004e5a <_dtoa_r+0x6c2>
 8004de4:	4ba2      	ldr	r3, [pc, #648]	; (8005070 <_dtoa_r+0x8d8>)
 8004de6:	f7fb fb81 	bl	80004ec <__aeabi_dmul>
 8004dea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004dee:	e7bc      	b.n	8004d6a <_dtoa_r+0x5d2>
 8004df0:	9f08      	ldr	r7, [sp, #32]
 8004df2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004df6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dfa:	f7fb fca1 	bl	8000740 <__aeabi_ddiv>
 8004dfe:	f7fb fe25 	bl	8000a4c <__aeabi_d2iz>
 8004e02:	4604      	mov	r4, r0
 8004e04:	f7fb fb08 	bl	8000418 <__aeabi_i2d>
 8004e08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e0c:	f7fb fb6e 	bl	80004ec <__aeabi_dmul>
 8004e10:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004e14:	460b      	mov	r3, r1
 8004e16:	4602      	mov	r2, r0
 8004e18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e1c:	f7fb f9ae 	bl	800017c <__aeabi_dsub>
 8004e20:	f807 6b01 	strb.w	r6, [r7], #1
 8004e24:	9e08      	ldr	r6, [sp, #32]
 8004e26:	9b02      	ldr	r3, [sp, #8]
 8004e28:	1bbe      	subs	r6, r7, r6
 8004e2a:	42b3      	cmp	r3, r6
 8004e2c:	d13a      	bne.n	8004ea4 <_dtoa_r+0x70c>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	f7fb f9a5 	bl	8000180 <__adddf3>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e42:	f7fb fde3 	bl	8000a0c <__aeabi_dcmpgt>
 8004e46:	bb58      	cbnz	r0, 8004ea0 <_dtoa_r+0x708>
 8004e48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e50:	f7fb fdb4 	bl	80009bc <__aeabi_dcmpeq>
 8004e54:	b108      	cbz	r0, 8004e5a <_dtoa_r+0x6c2>
 8004e56:	07e1      	lsls	r1, r4, #31
 8004e58:	d422      	bmi.n	8004ea0 <_dtoa_r+0x708>
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	4651      	mov	r1, sl
 8004e5e:	f000 fe7b 	bl	8005b58 <_Bfree>
 8004e62:	2300      	movs	r3, #0
 8004e64:	703b      	strb	r3, [r7, #0]
 8004e66:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004e68:	f109 0001 	add.w	r0, r9, #1
 8004e6c:	6018      	str	r0, [r3, #0]
 8004e6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f43f acdf 	beq.w	8004834 <_dtoa_r+0x9c>
 8004e76:	601f      	str	r7, [r3, #0]
 8004e78:	e4dc      	b.n	8004834 <_dtoa_r+0x9c>
 8004e7a:	4627      	mov	r7, r4
 8004e7c:	463b      	mov	r3, r7
 8004e7e:	461f      	mov	r7, r3
 8004e80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e84:	2a39      	cmp	r2, #57	; 0x39
 8004e86:	d107      	bne.n	8004e98 <_dtoa_r+0x700>
 8004e88:	9a08      	ldr	r2, [sp, #32]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d1f7      	bne.n	8004e7e <_dtoa_r+0x6e6>
 8004e8e:	2230      	movs	r2, #48	; 0x30
 8004e90:	9908      	ldr	r1, [sp, #32]
 8004e92:	f108 0801 	add.w	r8, r8, #1
 8004e96:	700a      	strb	r2, [r1, #0]
 8004e98:	781a      	ldrb	r2, [r3, #0]
 8004e9a:	3201      	adds	r2, #1
 8004e9c:	701a      	strb	r2, [r3, #0]
 8004e9e:	e79f      	b.n	8004de0 <_dtoa_r+0x648>
 8004ea0:	46c8      	mov	r8, r9
 8004ea2:	e7eb      	b.n	8004e7c <_dtoa_r+0x6e4>
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	4b72      	ldr	r3, [pc, #456]	; (8005070 <_dtoa_r+0x8d8>)
 8004ea8:	f7fb fb20 	bl	80004ec <__aeabi_dmul>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f7fb fd80 	bl	80009bc <__aeabi_dcmpeq>
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	d098      	beq.n	8004df2 <_dtoa_r+0x65a>
 8004ec0:	e7cb      	b.n	8004e5a <_dtoa_r+0x6c2>
 8004ec2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ec4:	2a00      	cmp	r2, #0
 8004ec6:	f000 80cd 	beq.w	8005064 <_dtoa_r+0x8cc>
 8004eca:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004ecc:	2a01      	cmp	r2, #1
 8004ece:	f300 80af 	bgt.w	8005030 <_dtoa_r+0x898>
 8004ed2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004ed4:	2a00      	cmp	r2, #0
 8004ed6:	f000 80a7 	beq.w	8005028 <_dtoa_r+0x890>
 8004eda:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004ede:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004ee0:	9f06      	ldr	r7, [sp, #24]
 8004ee2:	9a06      	ldr	r2, [sp, #24]
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	441a      	add	r2, r3
 8004ee8:	9206      	str	r2, [sp, #24]
 8004eea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004eec:	4628      	mov	r0, r5
 8004eee:	441a      	add	r2, r3
 8004ef0:	9209      	str	r2, [sp, #36]	; 0x24
 8004ef2:	f000 ff35 	bl	8005d60 <__i2b>
 8004ef6:	4606      	mov	r6, r0
 8004ef8:	2f00      	cmp	r7, #0
 8004efa:	dd0c      	ble.n	8004f16 <_dtoa_r+0x77e>
 8004efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	dd09      	ble.n	8004f16 <_dtoa_r+0x77e>
 8004f02:	42bb      	cmp	r3, r7
 8004f04:	bfa8      	it	ge
 8004f06:	463b      	movge	r3, r7
 8004f08:	9a06      	ldr	r2, [sp, #24]
 8004f0a:	1aff      	subs	r7, r7, r3
 8004f0c:	1ad2      	subs	r2, r2, r3
 8004f0e:	9206      	str	r2, [sp, #24]
 8004f10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	9309      	str	r3, [sp, #36]	; 0x24
 8004f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f18:	b1f3      	cbz	r3, 8004f58 <_dtoa_r+0x7c0>
 8004f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 80a9 	beq.w	8005074 <_dtoa_r+0x8dc>
 8004f22:	2c00      	cmp	r4, #0
 8004f24:	dd10      	ble.n	8004f48 <_dtoa_r+0x7b0>
 8004f26:	4631      	mov	r1, r6
 8004f28:	4622      	mov	r2, r4
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	f000 ffd2 	bl	8005ed4 <__pow5mult>
 8004f30:	4652      	mov	r2, sl
 8004f32:	4601      	mov	r1, r0
 8004f34:	4606      	mov	r6, r0
 8004f36:	4628      	mov	r0, r5
 8004f38:	f000 ff28 	bl	8005d8c <__multiply>
 8004f3c:	4680      	mov	r8, r0
 8004f3e:	4651      	mov	r1, sl
 8004f40:	4628      	mov	r0, r5
 8004f42:	f000 fe09 	bl	8005b58 <_Bfree>
 8004f46:	46c2      	mov	sl, r8
 8004f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f4a:	1b1a      	subs	r2, r3, r4
 8004f4c:	d004      	beq.n	8004f58 <_dtoa_r+0x7c0>
 8004f4e:	4651      	mov	r1, sl
 8004f50:	4628      	mov	r0, r5
 8004f52:	f000 ffbf 	bl	8005ed4 <__pow5mult>
 8004f56:	4682      	mov	sl, r0
 8004f58:	2101      	movs	r1, #1
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	f000 ff00 	bl	8005d60 <__i2b>
 8004f60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f62:	4604      	mov	r4, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f340 8087 	ble.w	8005078 <_dtoa_r+0x8e0>
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	4601      	mov	r1, r0
 8004f6e:	4628      	mov	r0, r5
 8004f70:	f000 ffb0 	bl	8005ed4 <__pow5mult>
 8004f74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f76:	4604      	mov	r4, r0
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	f340 8080 	ble.w	800507e <_dtoa_r+0x8e6>
 8004f7e:	f04f 0800 	mov.w	r8, #0
 8004f82:	6923      	ldr	r3, [r4, #16]
 8004f84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004f88:	6918      	ldr	r0, [r3, #16]
 8004f8a:	f000 fe9b 	bl	8005cc4 <__hi0bits>
 8004f8e:	f1c0 0020 	rsb	r0, r0, #32
 8004f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f94:	4418      	add	r0, r3
 8004f96:	f010 001f 	ands.w	r0, r0, #31
 8004f9a:	f000 8092 	beq.w	80050c2 <_dtoa_r+0x92a>
 8004f9e:	f1c0 0320 	rsb	r3, r0, #32
 8004fa2:	2b04      	cmp	r3, #4
 8004fa4:	f340 808a 	ble.w	80050bc <_dtoa_r+0x924>
 8004fa8:	f1c0 001c 	rsb	r0, r0, #28
 8004fac:	9b06      	ldr	r3, [sp, #24]
 8004fae:	4407      	add	r7, r0
 8004fb0:	4403      	add	r3, r0
 8004fb2:	9306      	str	r3, [sp, #24]
 8004fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fb6:	4403      	add	r3, r0
 8004fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8004fba:	9b06      	ldr	r3, [sp, #24]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	dd05      	ble.n	8004fcc <_dtoa_r+0x834>
 8004fc0:	4651      	mov	r1, sl
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	f000 ffdf 	bl	8005f88 <__lshift>
 8004fca:	4682      	mov	sl, r0
 8004fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	dd05      	ble.n	8004fde <_dtoa_r+0x846>
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	f000 ffd6 	bl	8005f88 <__lshift>
 8004fdc:	4604      	mov	r4, r0
 8004fde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d070      	beq.n	80050c6 <_dtoa_r+0x92e>
 8004fe4:	4621      	mov	r1, r4
 8004fe6:	4650      	mov	r0, sl
 8004fe8:	f001 f83a 	bl	8006060 <__mcmp>
 8004fec:	2800      	cmp	r0, #0
 8004fee:	da6a      	bge.n	80050c6 <_dtoa_r+0x92e>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	4651      	mov	r1, sl
 8004ff4:	220a      	movs	r2, #10
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	f000 fdd0 	bl	8005b9c <__multadd>
 8004ffc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ffe:	4682      	mov	sl, r0
 8005000:	f109 39ff 	add.w	r9, r9, #4294967295
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 8193 	beq.w	8005330 <_dtoa_r+0xb98>
 800500a:	4631      	mov	r1, r6
 800500c:	2300      	movs	r3, #0
 800500e:	220a      	movs	r2, #10
 8005010:	4628      	mov	r0, r5
 8005012:	f000 fdc3 	bl	8005b9c <__multadd>
 8005016:	f1bb 0f00 	cmp.w	fp, #0
 800501a:	4606      	mov	r6, r0
 800501c:	f300 8093 	bgt.w	8005146 <_dtoa_r+0x9ae>
 8005020:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005022:	2b02      	cmp	r3, #2
 8005024:	dc57      	bgt.n	80050d6 <_dtoa_r+0x93e>
 8005026:	e08e      	b.n	8005146 <_dtoa_r+0x9ae>
 8005028:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800502a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800502e:	e756      	b.n	8004ede <_dtoa_r+0x746>
 8005030:	9b02      	ldr	r3, [sp, #8]
 8005032:	1e5c      	subs	r4, r3, #1
 8005034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005036:	42a3      	cmp	r3, r4
 8005038:	bfb7      	itett	lt
 800503a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800503c:	1b1c      	subge	r4, r3, r4
 800503e:	1ae2      	sublt	r2, r4, r3
 8005040:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005042:	bfbe      	ittt	lt
 8005044:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005046:	189b      	addlt	r3, r3, r2
 8005048:	930e      	strlt	r3, [sp, #56]	; 0x38
 800504a:	9b02      	ldr	r3, [sp, #8]
 800504c:	bfb8      	it	lt
 800504e:	2400      	movlt	r4, #0
 8005050:	2b00      	cmp	r3, #0
 8005052:	bfbb      	ittet	lt
 8005054:	9b06      	ldrlt	r3, [sp, #24]
 8005056:	9a02      	ldrlt	r2, [sp, #8]
 8005058:	9f06      	ldrge	r7, [sp, #24]
 800505a:	1a9f      	sublt	r7, r3, r2
 800505c:	bfac      	ite	ge
 800505e:	9b02      	ldrge	r3, [sp, #8]
 8005060:	2300      	movlt	r3, #0
 8005062:	e73e      	b.n	8004ee2 <_dtoa_r+0x74a>
 8005064:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005066:	9f06      	ldr	r7, [sp, #24]
 8005068:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800506a:	e745      	b.n	8004ef8 <_dtoa_r+0x760>
 800506c:	3fe00000 	.word	0x3fe00000
 8005070:	40240000 	.word	0x40240000
 8005074:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005076:	e76a      	b.n	8004f4e <_dtoa_r+0x7b6>
 8005078:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800507a:	2b01      	cmp	r3, #1
 800507c:	dc19      	bgt.n	80050b2 <_dtoa_r+0x91a>
 800507e:	9b04      	ldr	r3, [sp, #16]
 8005080:	b9bb      	cbnz	r3, 80050b2 <_dtoa_r+0x91a>
 8005082:	9b05      	ldr	r3, [sp, #20]
 8005084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005088:	b99b      	cbnz	r3, 80050b2 <_dtoa_r+0x91a>
 800508a:	9b05      	ldr	r3, [sp, #20]
 800508c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005090:	0d1b      	lsrs	r3, r3, #20
 8005092:	051b      	lsls	r3, r3, #20
 8005094:	b183      	cbz	r3, 80050b8 <_dtoa_r+0x920>
 8005096:	f04f 0801 	mov.w	r8, #1
 800509a:	9b06      	ldr	r3, [sp, #24]
 800509c:	3301      	adds	r3, #1
 800509e:	9306      	str	r3, [sp, #24]
 80050a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050a2:	3301      	adds	r3, #1
 80050a4:	9309      	str	r3, [sp, #36]	; 0x24
 80050a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f47f af6a 	bne.w	8004f82 <_dtoa_r+0x7ea>
 80050ae:	2001      	movs	r0, #1
 80050b0:	e76f      	b.n	8004f92 <_dtoa_r+0x7fa>
 80050b2:	f04f 0800 	mov.w	r8, #0
 80050b6:	e7f6      	b.n	80050a6 <_dtoa_r+0x90e>
 80050b8:	4698      	mov	r8, r3
 80050ba:	e7f4      	b.n	80050a6 <_dtoa_r+0x90e>
 80050bc:	f43f af7d 	beq.w	8004fba <_dtoa_r+0x822>
 80050c0:	4618      	mov	r0, r3
 80050c2:	301c      	adds	r0, #28
 80050c4:	e772      	b.n	8004fac <_dtoa_r+0x814>
 80050c6:	9b02      	ldr	r3, [sp, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	dc36      	bgt.n	800513a <_dtoa_r+0x9a2>
 80050cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	dd33      	ble.n	800513a <_dtoa_r+0x9a2>
 80050d2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80050d6:	f1bb 0f00 	cmp.w	fp, #0
 80050da:	d10d      	bne.n	80050f8 <_dtoa_r+0x960>
 80050dc:	4621      	mov	r1, r4
 80050de:	465b      	mov	r3, fp
 80050e0:	2205      	movs	r2, #5
 80050e2:	4628      	mov	r0, r5
 80050e4:	f000 fd5a 	bl	8005b9c <__multadd>
 80050e8:	4601      	mov	r1, r0
 80050ea:	4604      	mov	r4, r0
 80050ec:	4650      	mov	r0, sl
 80050ee:	f000 ffb7 	bl	8006060 <__mcmp>
 80050f2:	2800      	cmp	r0, #0
 80050f4:	f73f adb6 	bgt.w	8004c64 <_dtoa_r+0x4cc>
 80050f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050fa:	9f08      	ldr	r7, [sp, #32]
 80050fc:	ea6f 0903 	mvn.w	r9, r3
 8005100:	f04f 0800 	mov.w	r8, #0
 8005104:	4621      	mov	r1, r4
 8005106:	4628      	mov	r0, r5
 8005108:	f000 fd26 	bl	8005b58 <_Bfree>
 800510c:	2e00      	cmp	r6, #0
 800510e:	f43f aea4 	beq.w	8004e5a <_dtoa_r+0x6c2>
 8005112:	f1b8 0f00 	cmp.w	r8, #0
 8005116:	d005      	beq.n	8005124 <_dtoa_r+0x98c>
 8005118:	45b0      	cmp	r8, r6
 800511a:	d003      	beq.n	8005124 <_dtoa_r+0x98c>
 800511c:	4641      	mov	r1, r8
 800511e:	4628      	mov	r0, r5
 8005120:	f000 fd1a 	bl	8005b58 <_Bfree>
 8005124:	4631      	mov	r1, r6
 8005126:	4628      	mov	r0, r5
 8005128:	f000 fd16 	bl	8005b58 <_Bfree>
 800512c:	e695      	b.n	8004e5a <_dtoa_r+0x6c2>
 800512e:	2400      	movs	r4, #0
 8005130:	4626      	mov	r6, r4
 8005132:	e7e1      	b.n	80050f8 <_dtoa_r+0x960>
 8005134:	46c1      	mov	r9, r8
 8005136:	4626      	mov	r6, r4
 8005138:	e594      	b.n	8004c64 <_dtoa_r+0x4cc>
 800513a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800513c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 80fc 	beq.w	800533e <_dtoa_r+0xba6>
 8005146:	2f00      	cmp	r7, #0
 8005148:	dd05      	ble.n	8005156 <_dtoa_r+0x9be>
 800514a:	4631      	mov	r1, r6
 800514c:	463a      	mov	r2, r7
 800514e:	4628      	mov	r0, r5
 8005150:	f000 ff1a 	bl	8005f88 <__lshift>
 8005154:	4606      	mov	r6, r0
 8005156:	f1b8 0f00 	cmp.w	r8, #0
 800515a:	d05c      	beq.n	8005216 <_dtoa_r+0xa7e>
 800515c:	4628      	mov	r0, r5
 800515e:	6871      	ldr	r1, [r6, #4]
 8005160:	f000 fcba 	bl	8005ad8 <_Balloc>
 8005164:	4607      	mov	r7, r0
 8005166:	b928      	cbnz	r0, 8005174 <_dtoa_r+0x9dc>
 8005168:	4602      	mov	r2, r0
 800516a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800516e:	4b7e      	ldr	r3, [pc, #504]	; (8005368 <_dtoa_r+0xbd0>)
 8005170:	f7ff bb26 	b.w	80047c0 <_dtoa_r+0x28>
 8005174:	6932      	ldr	r2, [r6, #16]
 8005176:	f106 010c 	add.w	r1, r6, #12
 800517a:	3202      	adds	r2, #2
 800517c:	0092      	lsls	r2, r2, #2
 800517e:	300c      	adds	r0, #12
 8005180:	f000 fc9c 	bl	8005abc <memcpy>
 8005184:	2201      	movs	r2, #1
 8005186:	4639      	mov	r1, r7
 8005188:	4628      	mov	r0, r5
 800518a:	f000 fefd 	bl	8005f88 <__lshift>
 800518e:	46b0      	mov	r8, r6
 8005190:	4606      	mov	r6, r0
 8005192:	9b08      	ldr	r3, [sp, #32]
 8005194:	3301      	adds	r3, #1
 8005196:	9302      	str	r3, [sp, #8]
 8005198:	9b08      	ldr	r3, [sp, #32]
 800519a:	445b      	add	r3, fp
 800519c:	930a      	str	r3, [sp, #40]	; 0x28
 800519e:	9b04      	ldr	r3, [sp, #16]
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	9309      	str	r3, [sp, #36]	; 0x24
 80051a6:	9b02      	ldr	r3, [sp, #8]
 80051a8:	4621      	mov	r1, r4
 80051aa:	4650      	mov	r0, sl
 80051ac:	f103 3bff 	add.w	fp, r3, #4294967295
 80051b0:	f7ff fa64 	bl	800467c <quorem>
 80051b4:	4603      	mov	r3, r0
 80051b6:	4641      	mov	r1, r8
 80051b8:	3330      	adds	r3, #48	; 0x30
 80051ba:	9004      	str	r0, [sp, #16]
 80051bc:	4650      	mov	r0, sl
 80051be:	930b      	str	r3, [sp, #44]	; 0x2c
 80051c0:	f000 ff4e 	bl	8006060 <__mcmp>
 80051c4:	4632      	mov	r2, r6
 80051c6:	9006      	str	r0, [sp, #24]
 80051c8:	4621      	mov	r1, r4
 80051ca:	4628      	mov	r0, r5
 80051cc:	f000 ff64 	bl	8006098 <__mdiff>
 80051d0:	68c2      	ldr	r2, [r0, #12]
 80051d2:	4607      	mov	r7, r0
 80051d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051d6:	bb02      	cbnz	r2, 800521a <_dtoa_r+0xa82>
 80051d8:	4601      	mov	r1, r0
 80051da:	4650      	mov	r0, sl
 80051dc:	f000 ff40 	bl	8006060 <__mcmp>
 80051e0:	4602      	mov	r2, r0
 80051e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051e4:	4639      	mov	r1, r7
 80051e6:	4628      	mov	r0, r5
 80051e8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80051ec:	f000 fcb4 	bl	8005b58 <_Bfree>
 80051f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051f4:	9f02      	ldr	r7, [sp, #8]
 80051f6:	ea43 0102 	orr.w	r1, r3, r2
 80051fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051fc:	430b      	orrs	r3, r1
 80051fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005200:	d10d      	bne.n	800521e <_dtoa_r+0xa86>
 8005202:	2b39      	cmp	r3, #57	; 0x39
 8005204:	d027      	beq.n	8005256 <_dtoa_r+0xabe>
 8005206:	9a06      	ldr	r2, [sp, #24]
 8005208:	2a00      	cmp	r2, #0
 800520a:	dd01      	ble.n	8005210 <_dtoa_r+0xa78>
 800520c:	9b04      	ldr	r3, [sp, #16]
 800520e:	3331      	adds	r3, #49	; 0x31
 8005210:	f88b 3000 	strb.w	r3, [fp]
 8005214:	e776      	b.n	8005104 <_dtoa_r+0x96c>
 8005216:	4630      	mov	r0, r6
 8005218:	e7b9      	b.n	800518e <_dtoa_r+0x9f6>
 800521a:	2201      	movs	r2, #1
 800521c:	e7e2      	b.n	80051e4 <_dtoa_r+0xa4c>
 800521e:	9906      	ldr	r1, [sp, #24]
 8005220:	2900      	cmp	r1, #0
 8005222:	db04      	blt.n	800522e <_dtoa_r+0xa96>
 8005224:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005226:	4301      	orrs	r1, r0
 8005228:	9809      	ldr	r0, [sp, #36]	; 0x24
 800522a:	4301      	orrs	r1, r0
 800522c:	d120      	bne.n	8005270 <_dtoa_r+0xad8>
 800522e:	2a00      	cmp	r2, #0
 8005230:	ddee      	ble.n	8005210 <_dtoa_r+0xa78>
 8005232:	4651      	mov	r1, sl
 8005234:	2201      	movs	r2, #1
 8005236:	4628      	mov	r0, r5
 8005238:	9302      	str	r3, [sp, #8]
 800523a:	f000 fea5 	bl	8005f88 <__lshift>
 800523e:	4621      	mov	r1, r4
 8005240:	4682      	mov	sl, r0
 8005242:	f000 ff0d 	bl	8006060 <__mcmp>
 8005246:	2800      	cmp	r0, #0
 8005248:	9b02      	ldr	r3, [sp, #8]
 800524a:	dc02      	bgt.n	8005252 <_dtoa_r+0xaba>
 800524c:	d1e0      	bne.n	8005210 <_dtoa_r+0xa78>
 800524e:	07da      	lsls	r2, r3, #31
 8005250:	d5de      	bpl.n	8005210 <_dtoa_r+0xa78>
 8005252:	2b39      	cmp	r3, #57	; 0x39
 8005254:	d1da      	bne.n	800520c <_dtoa_r+0xa74>
 8005256:	2339      	movs	r3, #57	; 0x39
 8005258:	f88b 3000 	strb.w	r3, [fp]
 800525c:	463b      	mov	r3, r7
 800525e:	461f      	mov	r7, r3
 8005260:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005264:	3b01      	subs	r3, #1
 8005266:	2a39      	cmp	r2, #57	; 0x39
 8005268:	d050      	beq.n	800530c <_dtoa_r+0xb74>
 800526a:	3201      	adds	r2, #1
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	e749      	b.n	8005104 <_dtoa_r+0x96c>
 8005270:	2a00      	cmp	r2, #0
 8005272:	dd03      	ble.n	800527c <_dtoa_r+0xae4>
 8005274:	2b39      	cmp	r3, #57	; 0x39
 8005276:	d0ee      	beq.n	8005256 <_dtoa_r+0xabe>
 8005278:	3301      	adds	r3, #1
 800527a:	e7c9      	b.n	8005210 <_dtoa_r+0xa78>
 800527c:	9a02      	ldr	r2, [sp, #8]
 800527e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005280:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005284:	428a      	cmp	r2, r1
 8005286:	d02a      	beq.n	80052de <_dtoa_r+0xb46>
 8005288:	4651      	mov	r1, sl
 800528a:	2300      	movs	r3, #0
 800528c:	220a      	movs	r2, #10
 800528e:	4628      	mov	r0, r5
 8005290:	f000 fc84 	bl	8005b9c <__multadd>
 8005294:	45b0      	cmp	r8, r6
 8005296:	4682      	mov	sl, r0
 8005298:	f04f 0300 	mov.w	r3, #0
 800529c:	f04f 020a 	mov.w	r2, #10
 80052a0:	4641      	mov	r1, r8
 80052a2:	4628      	mov	r0, r5
 80052a4:	d107      	bne.n	80052b6 <_dtoa_r+0xb1e>
 80052a6:	f000 fc79 	bl	8005b9c <__multadd>
 80052aa:	4680      	mov	r8, r0
 80052ac:	4606      	mov	r6, r0
 80052ae:	9b02      	ldr	r3, [sp, #8]
 80052b0:	3301      	adds	r3, #1
 80052b2:	9302      	str	r3, [sp, #8]
 80052b4:	e777      	b.n	80051a6 <_dtoa_r+0xa0e>
 80052b6:	f000 fc71 	bl	8005b9c <__multadd>
 80052ba:	4631      	mov	r1, r6
 80052bc:	4680      	mov	r8, r0
 80052be:	2300      	movs	r3, #0
 80052c0:	220a      	movs	r2, #10
 80052c2:	4628      	mov	r0, r5
 80052c4:	f000 fc6a 	bl	8005b9c <__multadd>
 80052c8:	4606      	mov	r6, r0
 80052ca:	e7f0      	b.n	80052ae <_dtoa_r+0xb16>
 80052cc:	f1bb 0f00 	cmp.w	fp, #0
 80052d0:	bfcc      	ite	gt
 80052d2:	465f      	movgt	r7, fp
 80052d4:	2701      	movle	r7, #1
 80052d6:	f04f 0800 	mov.w	r8, #0
 80052da:	9a08      	ldr	r2, [sp, #32]
 80052dc:	4417      	add	r7, r2
 80052de:	4651      	mov	r1, sl
 80052e0:	2201      	movs	r2, #1
 80052e2:	4628      	mov	r0, r5
 80052e4:	9302      	str	r3, [sp, #8]
 80052e6:	f000 fe4f 	bl	8005f88 <__lshift>
 80052ea:	4621      	mov	r1, r4
 80052ec:	4682      	mov	sl, r0
 80052ee:	f000 feb7 	bl	8006060 <__mcmp>
 80052f2:	2800      	cmp	r0, #0
 80052f4:	dcb2      	bgt.n	800525c <_dtoa_r+0xac4>
 80052f6:	d102      	bne.n	80052fe <_dtoa_r+0xb66>
 80052f8:	9b02      	ldr	r3, [sp, #8]
 80052fa:	07db      	lsls	r3, r3, #31
 80052fc:	d4ae      	bmi.n	800525c <_dtoa_r+0xac4>
 80052fe:	463b      	mov	r3, r7
 8005300:	461f      	mov	r7, r3
 8005302:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005306:	2a30      	cmp	r2, #48	; 0x30
 8005308:	d0fa      	beq.n	8005300 <_dtoa_r+0xb68>
 800530a:	e6fb      	b.n	8005104 <_dtoa_r+0x96c>
 800530c:	9a08      	ldr	r2, [sp, #32]
 800530e:	429a      	cmp	r2, r3
 8005310:	d1a5      	bne.n	800525e <_dtoa_r+0xac6>
 8005312:	2331      	movs	r3, #49	; 0x31
 8005314:	f109 0901 	add.w	r9, r9, #1
 8005318:	7013      	strb	r3, [r2, #0]
 800531a:	e6f3      	b.n	8005104 <_dtoa_r+0x96c>
 800531c:	4b13      	ldr	r3, [pc, #76]	; (800536c <_dtoa_r+0xbd4>)
 800531e:	f7ff baa7 	b.w	8004870 <_dtoa_r+0xd8>
 8005322:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005324:	2b00      	cmp	r3, #0
 8005326:	f47f aa80 	bne.w	800482a <_dtoa_r+0x92>
 800532a:	4b11      	ldr	r3, [pc, #68]	; (8005370 <_dtoa_r+0xbd8>)
 800532c:	f7ff baa0 	b.w	8004870 <_dtoa_r+0xd8>
 8005330:	f1bb 0f00 	cmp.w	fp, #0
 8005334:	dc03      	bgt.n	800533e <_dtoa_r+0xba6>
 8005336:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005338:	2b02      	cmp	r3, #2
 800533a:	f73f aecc 	bgt.w	80050d6 <_dtoa_r+0x93e>
 800533e:	9f08      	ldr	r7, [sp, #32]
 8005340:	4621      	mov	r1, r4
 8005342:	4650      	mov	r0, sl
 8005344:	f7ff f99a 	bl	800467c <quorem>
 8005348:	9a08      	ldr	r2, [sp, #32]
 800534a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800534e:	f807 3b01 	strb.w	r3, [r7], #1
 8005352:	1aba      	subs	r2, r7, r2
 8005354:	4593      	cmp	fp, r2
 8005356:	ddb9      	ble.n	80052cc <_dtoa_r+0xb34>
 8005358:	4651      	mov	r1, sl
 800535a:	2300      	movs	r3, #0
 800535c:	220a      	movs	r2, #10
 800535e:	4628      	mov	r0, r5
 8005360:	f000 fc1c 	bl	8005b9c <__multadd>
 8005364:	4682      	mov	sl, r0
 8005366:	e7eb      	b.n	8005340 <_dtoa_r+0xba8>
 8005368:	08007710 	.word	0x08007710
 800536c:	0800757c 	.word	0x0800757c
 8005370:	080076a4 	.word	0x080076a4

08005374 <fiprintf>:
 8005374:	b40e      	push	{r1, r2, r3}
 8005376:	b503      	push	{r0, r1, lr}
 8005378:	4601      	mov	r1, r0
 800537a:	ab03      	add	r3, sp, #12
 800537c:	4805      	ldr	r0, [pc, #20]	; (8005394 <fiprintf+0x20>)
 800537e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005382:	6800      	ldr	r0, [r0, #0]
 8005384:	9301      	str	r3, [sp, #4]
 8005386:	f001 fa97 	bl	80068b8 <_vfiprintf_r>
 800538a:	b002      	add	sp, #8
 800538c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005390:	b003      	add	sp, #12
 8005392:	4770      	bx	lr
 8005394:	2000002c 	.word	0x2000002c

08005398 <rshift>:
 8005398:	6903      	ldr	r3, [r0, #16]
 800539a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800539e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80053a2:	f100 0414 	add.w	r4, r0, #20
 80053a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80053aa:	dd46      	ble.n	800543a <rshift+0xa2>
 80053ac:	f011 011f 	ands.w	r1, r1, #31
 80053b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80053b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80053b8:	d10c      	bne.n	80053d4 <rshift+0x3c>
 80053ba:	4629      	mov	r1, r5
 80053bc:	f100 0710 	add.w	r7, r0, #16
 80053c0:	42b1      	cmp	r1, r6
 80053c2:	d335      	bcc.n	8005430 <rshift+0x98>
 80053c4:	1a9b      	subs	r3, r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	1eea      	subs	r2, r5, #3
 80053ca:	4296      	cmp	r6, r2
 80053cc:	bf38      	it	cc
 80053ce:	2300      	movcc	r3, #0
 80053d0:	4423      	add	r3, r4
 80053d2:	e015      	b.n	8005400 <rshift+0x68>
 80053d4:	46a1      	mov	r9, r4
 80053d6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80053da:	f1c1 0820 	rsb	r8, r1, #32
 80053de:	40cf      	lsrs	r7, r1
 80053e0:	f105 0e04 	add.w	lr, r5, #4
 80053e4:	4576      	cmp	r6, lr
 80053e6:	46f4      	mov	ip, lr
 80053e8:	d816      	bhi.n	8005418 <rshift+0x80>
 80053ea:	1a9b      	subs	r3, r3, r2
 80053ec:	009a      	lsls	r2, r3, #2
 80053ee:	3a04      	subs	r2, #4
 80053f0:	3501      	adds	r5, #1
 80053f2:	42ae      	cmp	r6, r5
 80053f4:	bf38      	it	cc
 80053f6:	2200      	movcc	r2, #0
 80053f8:	18a3      	adds	r3, r4, r2
 80053fa:	50a7      	str	r7, [r4, r2]
 80053fc:	b107      	cbz	r7, 8005400 <rshift+0x68>
 80053fe:	3304      	adds	r3, #4
 8005400:	42a3      	cmp	r3, r4
 8005402:	eba3 0204 	sub.w	r2, r3, r4
 8005406:	bf08      	it	eq
 8005408:	2300      	moveq	r3, #0
 800540a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800540e:	6102      	str	r2, [r0, #16]
 8005410:	bf08      	it	eq
 8005412:	6143      	streq	r3, [r0, #20]
 8005414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005418:	f8dc c000 	ldr.w	ip, [ip]
 800541c:	fa0c fc08 	lsl.w	ip, ip, r8
 8005420:	ea4c 0707 	orr.w	r7, ip, r7
 8005424:	f849 7b04 	str.w	r7, [r9], #4
 8005428:	f85e 7b04 	ldr.w	r7, [lr], #4
 800542c:	40cf      	lsrs	r7, r1
 800542e:	e7d9      	b.n	80053e4 <rshift+0x4c>
 8005430:	f851 cb04 	ldr.w	ip, [r1], #4
 8005434:	f847 cf04 	str.w	ip, [r7, #4]!
 8005438:	e7c2      	b.n	80053c0 <rshift+0x28>
 800543a:	4623      	mov	r3, r4
 800543c:	e7e0      	b.n	8005400 <rshift+0x68>

0800543e <__hexdig_fun>:
 800543e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005442:	2b09      	cmp	r3, #9
 8005444:	d802      	bhi.n	800544c <__hexdig_fun+0xe>
 8005446:	3820      	subs	r0, #32
 8005448:	b2c0      	uxtb	r0, r0
 800544a:	4770      	bx	lr
 800544c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005450:	2b05      	cmp	r3, #5
 8005452:	d801      	bhi.n	8005458 <__hexdig_fun+0x1a>
 8005454:	3847      	subs	r0, #71	; 0x47
 8005456:	e7f7      	b.n	8005448 <__hexdig_fun+0xa>
 8005458:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800545c:	2b05      	cmp	r3, #5
 800545e:	d801      	bhi.n	8005464 <__hexdig_fun+0x26>
 8005460:	3827      	subs	r0, #39	; 0x27
 8005462:	e7f1      	b.n	8005448 <__hexdig_fun+0xa>
 8005464:	2000      	movs	r0, #0
 8005466:	4770      	bx	lr

08005468 <__gethex>:
 8005468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800546c:	b08b      	sub	sp, #44	; 0x2c
 800546e:	9306      	str	r3, [sp, #24]
 8005470:	4bb9      	ldr	r3, [pc, #740]	; (8005758 <__gethex+0x2f0>)
 8005472:	9002      	str	r0, [sp, #8]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	468b      	mov	fp, r1
 8005478:	4618      	mov	r0, r3
 800547a:	4690      	mov	r8, r2
 800547c:	9303      	str	r3, [sp, #12]
 800547e:	f7fa fe71 	bl	8000164 <strlen>
 8005482:	4682      	mov	sl, r0
 8005484:	9b03      	ldr	r3, [sp, #12]
 8005486:	f8db 2000 	ldr.w	r2, [fp]
 800548a:	4403      	add	r3, r0
 800548c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005490:	9307      	str	r3, [sp, #28]
 8005492:	1c93      	adds	r3, r2, #2
 8005494:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005498:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800549c:	32fe      	adds	r2, #254	; 0xfe
 800549e:	18d1      	adds	r1, r2, r3
 80054a0:	461f      	mov	r7, r3
 80054a2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80054a6:	9101      	str	r1, [sp, #4]
 80054a8:	2830      	cmp	r0, #48	; 0x30
 80054aa:	d0f8      	beq.n	800549e <__gethex+0x36>
 80054ac:	f7ff ffc7 	bl	800543e <__hexdig_fun>
 80054b0:	4604      	mov	r4, r0
 80054b2:	2800      	cmp	r0, #0
 80054b4:	d13a      	bne.n	800552c <__gethex+0xc4>
 80054b6:	4652      	mov	r2, sl
 80054b8:	4638      	mov	r0, r7
 80054ba:	9903      	ldr	r1, [sp, #12]
 80054bc:	f001 fb42 	bl	8006b44 <strncmp>
 80054c0:	4605      	mov	r5, r0
 80054c2:	2800      	cmp	r0, #0
 80054c4:	d166      	bne.n	8005594 <__gethex+0x12c>
 80054c6:	f817 000a 	ldrb.w	r0, [r7, sl]
 80054ca:	eb07 060a 	add.w	r6, r7, sl
 80054ce:	f7ff ffb6 	bl	800543e <__hexdig_fun>
 80054d2:	2800      	cmp	r0, #0
 80054d4:	d060      	beq.n	8005598 <__gethex+0x130>
 80054d6:	4633      	mov	r3, r6
 80054d8:	7818      	ldrb	r0, [r3, #0]
 80054da:	461f      	mov	r7, r3
 80054dc:	2830      	cmp	r0, #48	; 0x30
 80054de:	f103 0301 	add.w	r3, r3, #1
 80054e2:	d0f9      	beq.n	80054d8 <__gethex+0x70>
 80054e4:	f7ff ffab 	bl	800543e <__hexdig_fun>
 80054e8:	2301      	movs	r3, #1
 80054ea:	fab0 f480 	clz	r4, r0
 80054ee:	4635      	mov	r5, r6
 80054f0:	0964      	lsrs	r4, r4, #5
 80054f2:	9301      	str	r3, [sp, #4]
 80054f4:	463a      	mov	r2, r7
 80054f6:	4616      	mov	r6, r2
 80054f8:	7830      	ldrb	r0, [r6, #0]
 80054fa:	3201      	adds	r2, #1
 80054fc:	f7ff ff9f 	bl	800543e <__hexdig_fun>
 8005500:	2800      	cmp	r0, #0
 8005502:	d1f8      	bne.n	80054f6 <__gethex+0x8e>
 8005504:	4652      	mov	r2, sl
 8005506:	4630      	mov	r0, r6
 8005508:	9903      	ldr	r1, [sp, #12]
 800550a:	f001 fb1b 	bl	8006b44 <strncmp>
 800550e:	b980      	cbnz	r0, 8005532 <__gethex+0xca>
 8005510:	b94d      	cbnz	r5, 8005526 <__gethex+0xbe>
 8005512:	eb06 050a 	add.w	r5, r6, sl
 8005516:	462a      	mov	r2, r5
 8005518:	4616      	mov	r6, r2
 800551a:	7830      	ldrb	r0, [r6, #0]
 800551c:	3201      	adds	r2, #1
 800551e:	f7ff ff8e 	bl	800543e <__hexdig_fun>
 8005522:	2800      	cmp	r0, #0
 8005524:	d1f8      	bne.n	8005518 <__gethex+0xb0>
 8005526:	1bad      	subs	r5, r5, r6
 8005528:	00ad      	lsls	r5, r5, #2
 800552a:	e004      	b.n	8005536 <__gethex+0xce>
 800552c:	2400      	movs	r4, #0
 800552e:	4625      	mov	r5, r4
 8005530:	e7e0      	b.n	80054f4 <__gethex+0x8c>
 8005532:	2d00      	cmp	r5, #0
 8005534:	d1f7      	bne.n	8005526 <__gethex+0xbe>
 8005536:	7833      	ldrb	r3, [r6, #0]
 8005538:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800553c:	2b50      	cmp	r3, #80	; 0x50
 800553e:	d139      	bne.n	80055b4 <__gethex+0x14c>
 8005540:	7873      	ldrb	r3, [r6, #1]
 8005542:	2b2b      	cmp	r3, #43	; 0x2b
 8005544:	d02a      	beq.n	800559c <__gethex+0x134>
 8005546:	2b2d      	cmp	r3, #45	; 0x2d
 8005548:	d02c      	beq.n	80055a4 <__gethex+0x13c>
 800554a:	f04f 0900 	mov.w	r9, #0
 800554e:	1c71      	adds	r1, r6, #1
 8005550:	7808      	ldrb	r0, [r1, #0]
 8005552:	f7ff ff74 	bl	800543e <__hexdig_fun>
 8005556:	1e43      	subs	r3, r0, #1
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b18      	cmp	r3, #24
 800555c:	d82a      	bhi.n	80055b4 <__gethex+0x14c>
 800555e:	f1a0 0210 	sub.w	r2, r0, #16
 8005562:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005566:	f7ff ff6a 	bl	800543e <__hexdig_fun>
 800556a:	1e43      	subs	r3, r0, #1
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b18      	cmp	r3, #24
 8005570:	d91b      	bls.n	80055aa <__gethex+0x142>
 8005572:	f1b9 0f00 	cmp.w	r9, #0
 8005576:	d000      	beq.n	800557a <__gethex+0x112>
 8005578:	4252      	negs	r2, r2
 800557a:	4415      	add	r5, r2
 800557c:	f8cb 1000 	str.w	r1, [fp]
 8005580:	b1d4      	cbz	r4, 80055b8 <__gethex+0x150>
 8005582:	9b01      	ldr	r3, [sp, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	bf14      	ite	ne
 8005588:	2700      	movne	r7, #0
 800558a:	2706      	moveq	r7, #6
 800558c:	4638      	mov	r0, r7
 800558e:	b00b      	add	sp, #44	; 0x2c
 8005590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005594:	463e      	mov	r6, r7
 8005596:	4625      	mov	r5, r4
 8005598:	2401      	movs	r4, #1
 800559a:	e7cc      	b.n	8005536 <__gethex+0xce>
 800559c:	f04f 0900 	mov.w	r9, #0
 80055a0:	1cb1      	adds	r1, r6, #2
 80055a2:	e7d5      	b.n	8005550 <__gethex+0xe8>
 80055a4:	f04f 0901 	mov.w	r9, #1
 80055a8:	e7fa      	b.n	80055a0 <__gethex+0x138>
 80055aa:	230a      	movs	r3, #10
 80055ac:	fb03 0202 	mla	r2, r3, r2, r0
 80055b0:	3a10      	subs	r2, #16
 80055b2:	e7d6      	b.n	8005562 <__gethex+0xfa>
 80055b4:	4631      	mov	r1, r6
 80055b6:	e7e1      	b.n	800557c <__gethex+0x114>
 80055b8:	4621      	mov	r1, r4
 80055ba:	1bf3      	subs	r3, r6, r7
 80055bc:	3b01      	subs	r3, #1
 80055be:	2b07      	cmp	r3, #7
 80055c0:	dc0a      	bgt.n	80055d8 <__gethex+0x170>
 80055c2:	9802      	ldr	r0, [sp, #8]
 80055c4:	f000 fa88 	bl	8005ad8 <_Balloc>
 80055c8:	4604      	mov	r4, r0
 80055ca:	b940      	cbnz	r0, 80055de <__gethex+0x176>
 80055cc:	4602      	mov	r2, r0
 80055ce:	21de      	movs	r1, #222	; 0xde
 80055d0:	4b62      	ldr	r3, [pc, #392]	; (800575c <__gethex+0x2f4>)
 80055d2:	4863      	ldr	r0, [pc, #396]	; (8005760 <__gethex+0x2f8>)
 80055d4:	f7ff f834 	bl	8004640 <__assert_func>
 80055d8:	3101      	adds	r1, #1
 80055da:	105b      	asrs	r3, r3, #1
 80055dc:	e7ef      	b.n	80055be <__gethex+0x156>
 80055de:	f04f 0b00 	mov.w	fp, #0
 80055e2:	f100 0914 	add.w	r9, r0, #20
 80055e6:	f1ca 0301 	rsb	r3, sl, #1
 80055ea:	f8cd 9010 	str.w	r9, [sp, #16]
 80055ee:	f8cd b004 	str.w	fp, [sp, #4]
 80055f2:	9308      	str	r3, [sp, #32]
 80055f4:	42b7      	cmp	r7, r6
 80055f6:	d33f      	bcc.n	8005678 <__gethex+0x210>
 80055f8:	9f04      	ldr	r7, [sp, #16]
 80055fa:	9b01      	ldr	r3, [sp, #4]
 80055fc:	f847 3b04 	str.w	r3, [r7], #4
 8005600:	eba7 0709 	sub.w	r7, r7, r9
 8005604:	10bf      	asrs	r7, r7, #2
 8005606:	6127      	str	r7, [r4, #16]
 8005608:	4618      	mov	r0, r3
 800560a:	f000 fb5b 	bl	8005cc4 <__hi0bits>
 800560e:	017f      	lsls	r7, r7, #5
 8005610:	f8d8 6000 	ldr.w	r6, [r8]
 8005614:	1a3f      	subs	r7, r7, r0
 8005616:	42b7      	cmp	r7, r6
 8005618:	dd62      	ble.n	80056e0 <__gethex+0x278>
 800561a:	1bbf      	subs	r7, r7, r6
 800561c:	4639      	mov	r1, r7
 800561e:	4620      	mov	r0, r4
 8005620:	f000 fef1 	bl	8006406 <__any_on>
 8005624:	4682      	mov	sl, r0
 8005626:	b1a8      	cbz	r0, 8005654 <__gethex+0x1ec>
 8005628:	f04f 0a01 	mov.w	sl, #1
 800562c:	1e7b      	subs	r3, r7, #1
 800562e:	1159      	asrs	r1, r3, #5
 8005630:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005634:	f003 021f 	and.w	r2, r3, #31
 8005638:	fa0a f202 	lsl.w	r2, sl, r2
 800563c:	420a      	tst	r2, r1
 800563e:	d009      	beq.n	8005654 <__gethex+0x1ec>
 8005640:	4553      	cmp	r3, sl
 8005642:	dd05      	ble.n	8005650 <__gethex+0x1e8>
 8005644:	4620      	mov	r0, r4
 8005646:	1eb9      	subs	r1, r7, #2
 8005648:	f000 fedd 	bl	8006406 <__any_on>
 800564c:	2800      	cmp	r0, #0
 800564e:	d144      	bne.n	80056da <__gethex+0x272>
 8005650:	f04f 0a02 	mov.w	sl, #2
 8005654:	4639      	mov	r1, r7
 8005656:	4620      	mov	r0, r4
 8005658:	f7ff fe9e 	bl	8005398 <rshift>
 800565c:	443d      	add	r5, r7
 800565e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005662:	42ab      	cmp	r3, r5
 8005664:	da4a      	bge.n	80056fc <__gethex+0x294>
 8005666:	4621      	mov	r1, r4
 8005668:	9802      	ldr	r0, [sp, #8]
 800566a:	f000 fa75 	bl	8005b58 <_Bfree>
 800566e:	2300      	movs	r3, #0
 8005670:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005672:	27a3      	movs	r7, #163	; 0xa3
 8005674:	6013      	str	r3, [r2, #0]
 8005676:	e789      	b.n	800558c <__gethex+0x124>
 8005678:	1e73      	subs	r3, r6, #1
 800567a:	9a07      	ldr	r2, [sp, #28]
 800567c:	9305      	str	r3, [sp, #20]
 800567e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005682:	4293      	cmp	r3, r2
 8005684:	d019      	beq.n	80056ba <__gethex+0x252>
 8005686:	f1bb 0f20 	cmp.w	fp, #32
 800568a:	d107      	bne.n	800569c <__gethex+0x234>
 800568c:	9b04      	ldr	r3, [sp, #16]
 800568e:	9a01      	ldr	r2, [sp, #4]
 8005690:	f843 2b04 	str.w	r2, [r3], #4
 8005694:	9304      	str	r3, [sp, #16]
 8005696:	2300      	movs	r3, #0
 8005698:	469b      	mov	fp, r3
 800569a:	9301      	str	r3, [sp, #4]
 800569c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80056a0:	f7ff fecd 	bl	800543e <__hexdig_fun>
 80056a4:	9b01      	ldr	r3, [sp, #4]
 80056a6:	f000 000f 	and.w	r0, r0, #15
 80056aa:	fa00 f00b 	lsl.w	r0, r0, fp
 80056ae:	4303      	orrs	r3, r0
 80056b0:	9301      	str	r3, [sp, #4]
 80056b2:	f10b 0b04 	add.w	fp, fp, #4
 80056b6:	9b05      	ldr	r3, [sp, #20]
 80056b8:	e00d      	b.n	80056d6 <__gethex+0x26e>
 80056ba:	9b05      	ldr	r3, [sp, #20]
 80056bc:	9a08      	ldr	r2, [sp, #32]
 80056be:	4413      	add	r3, r2
 80056c0:	42bb      	cmp	r3, r7
 80056c2:	d3e0      	bcc.n	8005686 <__gethex+0x21e>
 80056c4:	4618      	mov	r0, r3
 80056c6:	4652      	mov	r2, sl
 80056c8:	9903      	ldr	r1, [sp, #12]
 80056ca:	9309      	str	r3, [sp, #36]	; 0x24
 80056cc:	f001 fa3a 	bl	8006b44 <strncmp>
 80056d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d2:	2800      	cmp	r0, #0
 80056d4:	d1d7      	bne.n	8005686 <__gethex+0x21e>
 80056d6:	461e      	mov	r6, r3
 80056d8:	e78c      	b.n	80055f4 <__gethex+0x18c>
 80056da:	f04f 0a03 	mov.w	sl, #3
 80056de:	e7b9      	b.n	8005654 <__gethex+0x1ec>
 80056e0:	da09      	bge.n	80056f6 <__gethex+0x28e>
 80056e2:	1bf7      	subs	r7, r6, r7
 80056e4:	4621      	mov	r1, r4
 80056e6:	463a      	mov	r2, r7
 80056e8:	9802      	ldr	r0, [sp, #8]
 80056ea:	f000 fc4d 	bl	8005f88 <__lshift>
 80056ee:	4604      	mov	r4, r0
 80056f0:	1bed      	subs	r5, r5, r7
 80056f2:	f100 0914 	add.w	r9, r0, #20
 80056f6:	f04f 0a00 	mov.w	sl, #0
 80056fa:	e7b0      	b.n	800565e <__gethex+0x1f6>
 80056fc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005700:	42a8      	cmp	r0, r5
 8005702:	dd71      	ble.n	80057e8 <__gethex+0x380>
 8005704:	1b45      	subs	r5, r0, r5
 8005706:	42ae      	cmp	r6, r5
 8005708:	dc34      	bgt.n	8005774 <__gethex+0x30c>
 800570a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800570e:	2b02      	cmp	r3, #2
 8005710:	d028      	beq.n	8005764 <__gethex+0x2fc>
 8005712:	2b03      	cmp	r3, #3
 8005714:	d02a      	beq.n	800576c <__gethex+0x304>
 8005716:	2b01      	cmp	r3, #1
 8005718:	d115      	bne.n	8005746 <__gethex+0x2de>
 800571a:	42ae      	cmp	r6, r5
 800571c:	d113      	bne.n	8005746 <__gethex+0x2de>
 800571e:	2e01      	cmp	r6, #1
 8005720:	d10b      	bne.n	800573a <__gethex+0x2d2>
 8005722:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005726:	9a06      	ldr	r2, [sp, #24]
 8005728:	2762      	movs	r7, #98	; 0x62
 800572a:	6013      	str	r3, [r2, #0]
 800572c:	2301      	movs	r3, #1
 800572e:	6123      	str	r3, [r4, #16]
 8005730:	f8c9 3000 	str.w	r3, [r9]
 8005734:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005736:	601c      	str	r4, [r3, #0]
 8005738:	e728      	b.n	800558c <__gethex+0x124>
 800573a:	4620      	mov	r0, r4
 800573c:	1e71      	subs	r1, r6, #1
 800573e:	f000 fe62 	bl	8006406 <__any_on>
 8005742:	2800      	cmp	r0, #0
 8005744:	d1ed      	bne.n	8005722 <__gethex+0x2ba>
 8005746:	4621      	mov	r1, r4
 8005748:	9802      	ldr	r0, [sp, #8]
 800574a:	f000 fa05 	bl	8005b58 <_Bfree>
 800574e:	2300      	movs	r3, #0
 8005750:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005752:	2750      	movs	r7, #80	; 0x50
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	e719      	b.n	800558c <__gethex+0x124>
 8005758:	0800778c 	.word	0x0800778c
 800575c:	08007710 	.word	0x08007710
 8005760:	08007721 	.word	0x08007721
 8005764:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1ed      	bne.n	8005746 <__gethex+0x2de>
 800576a:	e7da      	b.n	8005722 <__gethex+0x2ba>
 800576c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1d7      	bne.n	8005722 <__gethex+0x2ba>
 8005772:	e7e8      	b.n	8005746 <__gethex+0x2de>
 8005774:	1e6f      	subs	r7, r5, #1
 8005776:	f1ba 0f00 	cmp.w	sl, #0
 800577a:	d132      	bne.n	80057e2 <__gethex+0x37a>
 800577c:	b127      	cbz	r7, 8005788 <__gethex+0x320>
 800577e:	4639      	mov	r1, r7
 8005780:	4620      	mov	r0, r4
 8005782:	f000 fe40 	bl	8006406 <__any_on>
 8005786:	4682      	mov	sl, r0
 8005788:	2101      	movs	r1, #1
 800578a:	117b      	asrs	r3, r7, #5
 800578c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005790:	f007 071f 	and.w	r7, r7, #31
 8005794:	fa01 f707 	lsl.w	r7, r1, r7
 8005798:	421f      	tst	r7, r3
 800579a:	f04f 0702 	mov.w	r7, #2
 800579e:	4629      	mov	r1, r5
 80057a0:	4620      	mov	r0, r4
 80057a2:	bf18      	it	ne
 80057a4:	f04a 0a02 	orrne.w	sl, sl, #2
 80057a8:	1b76      	subs	r6, r6, r5
 80057aa:	f7ff fdf5 	bl	8005398 <rshift>
 80057ae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80057b2:	f1ba 0f00 	cmp.w	sl, #0
 80057b6:	d048      	beq.n	800584a <__gethex+0x3e2>
 80057b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d015      	beq.n	80057ec <__gethex+0x384>
 80057c0:	2b03      	cmp	r3, #3
 80057c2:	d017      	beq.n	80057f4 <__gethex+0x38c>
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d109      	bne.n	80057dc <__gethex+0x374>
 80057c8:	f01a 0f02 	tst.w	sl, #2
 80057cc:	d006      	beq.n	80057dc <__gethex+0x374>
 80057ce:	f8d9 0000 	ldr.w	r0, [r9]
 80057d2:	ea4a 0a00 	orr.w	sl, sl, r0
 80057d6:	f01a 0f01 	tst.w	sl, #1
 80057da:	d10e      	bne.n	80057fa <__gethex+0x392>
 80057dc:	f047 0710 	orr.w	r7, r7, #16
 80057e0:	e033      	b.n	800584a <__gethex+0x3e2>
 80057e2:	f04f 0a01 	mov.w	sl, #1
 80057e6:	e7cf      	b.n	8005788 <__gethex+0x320>
 80057e8:	2701      	movs	r7, #1
 80057ea:	e7e2      	b.n	80057b2 <__gethex+0x34a>
 80057ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80057ee:	f1c3 0301 	rsb	r3, r3, #1
 80057f2:	9315      	str	r3, [sp, #84]	; 0x54
 80057f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0f0      	beq.n	80057dc <__gethex+0x374>
 80057fa:	f04f 0c00 	mov.w	ip, #0
 80057fe:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005802:	f104 0314 	add.w	r3, r4, #20
 8005806:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800580a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800580e:	4618      	mov	r0, r3
 8005810:	f853 2b04 	ldr.w	r2, [r3], #4
 8005814:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005818:	d01c      	beq.n	8005854 <__gethex+0x3ec>
 800581a:	3201      	adds	r2, #1
 800581c:	6002      	str	r2, [r0, #0]
 800581e:	2f02      	cmp	r7, #2
 8005820:	f104 0314 	add.w	r3, r4, #20
 8005824:	d13d      	bne.n	80058a2 <__gethex+0x43a>
 8005826:	f8d8 2000 	ldr.w	r2, [r8]
 800582a:	3a01      	subs	r2, #1
 800582c:	42b2      	cmp	r2, r6
 800582e:	d10a      	bne.n	8005846 <__gethex+0x3de>
 8005830:	2201      	movs	r2, #1
 8005832:	1171      	asrs	r1, r6, #5
 8005834:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005838:	f006 061f 	and.w	r6, r6, #31
 800583c:	fa02 f606 	lsl.w	r6, r2, r6
 8005840:	421e      	tst	r6, r3
 8005842:	bf18      	it	ne
 8005844:	4617      	movne	r7, r2
 8005846:	f047 0720 	orr.w	r7, r7, #32
 800584a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800584c:	601c      	str	r4, [r3, #0]
 800584e:	9b06      	ldr	r3, [sp, #24]
 8005850:	601d      	str	r5, [r3, #0]
 8005852:	e69b      	b.n	800558c <__gethex+0x124>
 8005854:	4299      	cmp	r1, r3
 8005856:	f843 cc04 	str.w	ip, [r3, #-4]
 800585a:	d8d8      	bhi.n	800580e <__gethex+0x3a6>
 800585c:	68a3      	ldr	r3, [r4, #8]
 800585e:	459b      	cmp	fp, r3
 8005860:	db17      	blt.n	8005892 <__gethex+0x42a>
 8005862:	6861      	ldr	r1, [r4, #4]
 8005864:	9802      	ldr	r0, [sp, #8]
 8005866:	3101      	adds	r1, #1
 8005868:	f000 f936 	bl	8005ad8 <_Balloc>
 800586c:	4681      	mov	r9, r0
 800586e:	b918      	cbnz	r0, 8005878 <__gethex+0x410>
 8005870:	4602      	mov	r2, r0
 8005872:	2184      	movs	r1, #132	; 0x84
 8005874:	4b19      	ldr	r3, [pc, #100]	; (80058dc <__gethex+0x474>)
 8005876:	e6ac      	b.n	80055d2 <__gethex+0x16a>
 8005878:	6922      	ldr	r2, [r4, #16]
 800587a:	f104 010c 	add.w	r1, r4, #12
 800587e:	3202      	adds	r2, #2
 8005880:	0092      	lsls	r2, r2, #2
 8005882:	300c      	adds	r0, #12
 8005884:	f000 f91a 	bl	8005abc <memcpy>
 8005888:	4621      	mov	r1, r4
 800588a:	9802      	ldr	r0, [sp, #8]
 800588c:	f000 f964 	bl	8005b58 <_Bfree>
 8005890:	464c      	mov	r4, r9
 8005892:	6923      	ldr	r3, [r4, #16]
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	6122      	str	r2, [r4, #16]
 8005898:	2201      	movs	r2, #1
 800589a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800589e:	615a      	str	r2, [r3, #20]
 80058a0:	e7bd      	b.n	800581e <__gethex+0x3b6>
 80058a2:	6922      	ldr	r2, [r4, #16]
 80058a4:	455a      	cmp	r2, fp
 80058a6:	dd0b      	ble.n	80058c0 <__gethex+0x458>
 80058a8:	2101      	movs	r1, #1
 80058aa:	4620      	mov	r0, r4
 80058ac:	f7ff fd74 	bl	8005398 <rshift>
 80058b0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80058b4:	3501      	adds	r5, #1
 80058b6:	42ab      	cmp	r3, r5
 80058b8:	f6ff aed5 	blt.w	8005666 <__gethex+0x1fe>
 80058bc:	2701      	movs	r7, #1
 80058be:	e7c2      	b.n	8005846 <__gethex+0x3de>
 80058c0:	f016 061f 	ands.w	r6, r6, #31
 80058c4:	d0fa      	beq.n	80058bc <__gethex+0x454>
 80058c6:	449a      	add	sl, r3
 80058c8:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80058cc:	f000 f9fa 	bl	8005cc4 <__hi0bits>
 80058d0:	f1c6 0620 	rsb	r6, r6, #32
 80058d4:	42b0      	cmp	r0, r6
 80058d6:	dbe7      	blt.n	80058a8 <__gethex+0x440>
 80058d8:	e7f0      	b.n	80058bc <__gethex+0x454>
 80058da:	bf00      	nop
 80058dc:	08007710 	.word	0x08007710

080058e0 <L_shift>:
 80058e0:	f1c2 0208 	rsb	r2, r2, #8
 80058e4:	0092      	lsls	r2, r2, #2
 80058e6:	b570      	push	{r4, r5, r6, lr}
 80058e8:	f1c2 0620 	rsb	r6, r2, #32
 80058ec:	6843      	ldr	r3, [r0, #4]
 80058ee:	6804      	ldr	r4, [r0, #0]
 80058f0:	fa03 f506 	lsl.w	r5, r3, r6
 80058f4:	432c      	orrs	r4, r5
 80058f6:	40d3      	lsrs	r3, r2
 80058f8:	6004      	str	r4, [r0, #0]
 80058fa:	f840 3f04 	str.w	r3, [r0, #4]!
 80058fe:	4288      	cmp	r0, r1
 8005900:	d3f4      	bcc.n	80058ec <L_shift+0xc>
 8005902:	bd70      	pop	{r4, r5, r6, pc}

08005904 <__match>:
 8005904:	b530      	push	{r4, r5, lr}
 8005906:	6803      	ldr	r3, [r0, #0]
 8005908:	3301      	adds	r3, #1
 800590a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800590e:	b914      	cbnz	r4, 8005916 <__match+0x12>
 8005910:	6003      	str	r3, [r0, #0]
 8005912:	2001      	movs	r0, #1
 8005914:	bd30      	pop	{r4, r5, pc}
 8005916:	f813 2b01 	ldrb.w	r2, [r3], #1
 800591a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800591e:	2d19      	cmp	r5, #25
 8005920:	bf98      	it	ls
 8005922:	3220      	addls	r2, #32
 8005924:	42a2      	cmp	r2, r4
 8005926:	d0f0      	beq.n	800590a <__match+0x6>
 8005928:	2000      	movs	r0, #0
 800592a:	e7f3      	b.n	8005914 <__match+0x10>

0800592c <__hexnan>:
 800592c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005930:	2500      	movs	r5, #0
 8005932:	680b      	ldr	r3, [r1, #0]
 8005934:	4682      	mov	sl, r0
 8005936:	115e      	asrs	r6, r3, #5
 8005938:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800593c:	f013 031f 	ands.w	r3, r3, #31
 8005940:	bf18      	it	ne
 8005942:	3604      	addne	r6, #4
 8005944:	1f37      	subs	r7, r6, #4
 8005946:	4690      	mov	r8, r2
 8005948:	46b9      	mov	r9, r7
 800594a:	463c      	mov	r4, r7
 800594c:	46ab      	mov	fp, r5
 800594e:	b087      	sub	sp, #28
 8005950:	6801      	ldr	r1, [r0, #0]
 8005952:	9301      	str	r3, [sp, #4]
 8005954:	f846 5c04 	str.w	r5, [r6, #-4]
 8005958:	9502      	str	r5, [sp, #8]
 800595a:	784a      	ldrb	r2, [r1, #1]
 800595c:	1c4b      	adds	r3, r1, #1
 800595e:	9303      	str	r3, [sp, #12]
 8005960:	b342      	cbz	r2, 80059b4 <__hexnan+0x88>
 8005962:	4610      	mov	r0, r2
 8005964:	9105      	str	r1, [sp, #20]
 8005966:	9204      	str	r2, [sp, #16]
 8005968:	f7ff fd69 	bl	800543e <__hexdig_fun>
 800596c:	2800      	cmp	r0, #0
 800596e:	d14f      	bne.n	8005a10 <__hexnan+0xe4>
 8005970:	9a04      	ldr	r2, [sp, #16]
 8005972:	9905      	ldr	r1, [sp, #20]
 8005974:	2a20      	cmp	r2, #32
 8005976:	d818      	bhi.n	80059aa <__hexnan+0x7e>
 8005978:	9b02      	ldr	r3, [sp, #8]
 800597a:	459b      	cmp	fp, r3
 800597c:	dd13      	ble.n	80059a6 <__hexnan+0x7a>
 800597e:	454c      	cmp	r4, r9
 8005980:	d206      	bcs.n	8005990 <__hexnan+0x64>
 8005982:	2d07      	cmp	r5, #7
 8005984:	dc04      	bgt.n	8005990 <__hexnan+0x64>
 8005986:	462a      	mov	r2, r5
 8005988:	4649      	mov	r1, r9
 800598a:	4620      	mov	r0, r4
 800598c:	f7ff ffa8 	bl	80058e0 <L_shift>
 8005990:	4544      	cmp	r4, r8
 8005992:	d950      	bls.n	8005a36 <__hexnan+0x10a>
 8005994:	2300      	movs	r3, #0
 8005996:	f1a4 0904 	sub.w	r9, r4, #4
 800599a:	f844 3c04 	str.w	r3, [r4, #-4]
 800599e:	461d      	mov	r5, r3
 80059a0:	464c      	mov	r4, r9
 80059a2:	f8cd b008 	str.w	fp, [sp, #8]
 80059a6:	9903      	ldr	r1, [sp, #12]
 80059a8:	e7d7      	b.n	800595a <__hexnan+0x2e>
 80059aa:	2a29      	cmp	r2, #41	; 0x29
 80059ac:	d156      	bne.n	8005a5c <__hexnan+0x130>
 80059ae:	3102      	adds	r1, #2
 80059b0:	f8ca 1000 	str.w	r1, [sl]
 80059b4:	f1bb 0f00 	cmp.w	fp, #0
 80059b8:	d050      	beq.n	8005a5c <__hexnan+0x130>
 80059ba:	454c      	cmp	r4, r9
 80059bc:	d206      	bcs.n	80059cc <__hexnan+0xa0>
 80059be:	2d07      	cmp	r5, #7
 80059c0:	dc04      	bgt.n	80059cc <__hexnan+0xa0>
 80059c2:	462a      	mov	r2, r5
 80059c4:	4649      	mov	r1, r9
 80059c6:	4620      	mov	r0, r4
 80059c8:	f7ff ff8a 	bl	80058e0 <L_shift>
 80059cc:	4544      	cmp	r4, r8
 80059ce:	d934      	bls.n	8005a3a <__hexnan+0x10e>
 80059d0:	4623      	mov	r3, r4
 80059d2:	f1a8 0204 	sub.w	r2, r8, #4
 80059d6:	f853 1b04 	ldr.w	r1, [r3], #4
 80059da:	429f      	cmp	r7, r3
 80059dc:	f842 1f04 	str.w	r1, [r2, #4]!
 80059e0:	d2f9      	bcs.n	80059d6 <__hexnan+0xaa>
 80059e2:	1b3b      	subs	r3, r7, r4
 80059e4:	f023 0303 	bic.w	r3, r3, #3
 80059e8:	3304      	adds	r3, #4
 80059ea:	3401      	adds	r4, #1
 80059ec:	3e03      	subs	r6, #3
 80059ee:	42b4      	cmp	r4, r6
 80059f0:	bf88      	it	hi
 80059f2:	2304      	movhi	r3, #4
 80059f4:	2200      	movs	r2, #0
 80059f6:	4443      	add	r3, r8
 80059f8:	f843 2b04 	str.w	r2, [r3], #4
 80059fc:	429f      	cmp	r7, r3
 80059fe:	d2fb      	bcs.n	80059f8 <__hexnan+0xcc>
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	b91b      	cbnz	r3, 8005a0c <__hexnan+0xe0>
 8005a04:	4547      	cmp	r7, r8
 8005a06:	d127      	bne.n	8005a58 <__hexnan+0x12c>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	603b      	str	r3, [r7, #0]
 8005a0c:	2005      	movs	r0, #5
 8005a0e:	e026      	b.n	8005a5e <__hexnan+0x132>
 8005a10:	3501      	adds	r5, #1
 8005a12:	2d08      	cmp	r5, #8
 8005a14:	f10b 0b01 	add.w	fp, fp, #1
 8005a18:	dd06      	ble.n	8005a28 <__hexnan+0xfc>
 8005a1a:	4544      	cmp	r4, r8
 8005a1c:	d9c3      	bls.n	80059a6 <__hexnan+0x7a>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	2501      	movs	r5, #1
 8005a22:	f844 3c04 	str.w	r3, [r4, #-4]
 8005a26:	3c04      	subs	r4, #4
 8005a28:	6822      	ldr	r2, [r4, #0]
 8005a2a:	f000 000f 	and.w	r0, r0, #15
 8005a2e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005a32:	6022      	str	r2, [r4, #0]
 8005a34:	e7b7      	b.n	80059a6 <__hexnan+0x7a>
 8005a36:	2508      	movs	r5, #8
 8005a38:	e7b5      	b.n	80059a6 <__hexnan+0x7a>
 8005a3a:	9b01      	ldr	r3, [sp, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0df      	beq.n	8005a00 <__hexnan+0xd4>
 8005a40:	f04f 32ff 	mov.w	r2, #4294967295
 8005a44:	f1c3 0320 	rsb	r3, r3, #32
 8005a48:	fa22 f303 	lsr.w	r3, r2, r3
 8005a4c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005a50:	401a      	ands	r2, r3
 8005a52:	f846 2c04 	str.w	r2, [r6, #-4]
 8005a56:	e7d3      	b.n	8005a00 <__hexnan+0xd4>
 8005a58:	3f04      	subs	r7, #4
 8005a5a:	e7d1      	b.n	8005a00 <__hexnan+0xd4>
 8005a5c:	2004      	movs	r0, #4
 8005a5e:	b007      	add	sp, #28
 8005a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005a64 <_localeconv_r>:
 8005a64:	4800      	ldr	r0, [pc, #0]	; (8005a68 <_localeconv_r+0x4>)
 8005a66:	4770      	bx	lr
 8005a68:	20000184 	.word	0x20000184

08005a6c <malloc>:
 8005a6c:	4b02      	ldr	r3, [pc, #8]	; (8005a78 <malloc+0xc>)
 8005a6e:	4601      	mov	r1, r0
 8005a70:	6818      	ldr	r0, [r3, #0]
 8005a72:	f000 bd43 	b.w	80064fc <_malloc_r>
 8005a76:	bf00      	nop
 8005a78:	2000002c 	.word	0x2000002c

08005a7c <__ascii_mbtowc>:
 8005a7c:	b082      	sub	sp, #8
 8005a7e:	b901      	cbnz	r1, 8005a82 <__ascii_mbtowc+0x6>
 8005a80:	a901      	add	r1, sp, #4
 8005a82:	b142      	cbz	r2, 8005a96 <__ascii_mbtowc+0x1a>
 8005a84:	b14b      	cbz	r3, 8005a9a <__ascii_mbtowc+0x1e>
 8005a86:	7813      	ldrb	r3, [r2, #0]
 8005a88:	600b      	str	r3, [r1, #0]
 8005a8a:	7812      	ldrb	r2, [r2, #0]
 8005a8c:	1e10      	subs	r0, r2, #0
 8005a8e:	bf18      	it	ne
 8005a90:	2001      	movne	r0, #1
 8005a92:	b002      	add	sp, #8
 8005a94:	4770      	bx	lr
 8005a96:	4610      	mov	r0, r2
 8005a98:	e7fb      	b.n	8005a92 <__ascii_mbtowc+0x16>
 8005a9a:	f06f 0001 	mvn.w	r0, #1
 8005a9e:	e7f8      	b.n	8005a92 <__ascii_mbtowc+0x16>

08005aa0 <memchr>:
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	b510      	push	{r4, lr}
 8005aa4:	b2c9      	uxtb	r1, r1
 8005aa6:	4402      	add	r2, r0
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	4618      	mov	r0, r3
 8005aac:	d101      	bne.n	8005ab2 <memchr+0x12>
 8005aae:	2000      	movs	r0, #0
 8005ab0:	e003      	b.n	8005aba <memchr+0x1a>
 8005ab2:	7804      	ldrb	r4, [r0, #0]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	428c      	cmp	r4, r1
 8005ab8:	d1f6      	bne.n	8005aa8 <memchr+0x8>
 8005aba:	bd10      	pop	{r4, pc}

08005abc <memcpy>:
 8005abc:	440a      	add	r2, r1
 8005abe:	4291      	cmp	r1, r2
 8005ac0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ac4:	d100      	bne.n	8005ac8 <memcpy+0xc>
 8005ac6:	4770      	bx	lr
 8005ac8:	b510      	push	{r4, lr}
 8005aca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ace:	4291      	cmp	r1, r2
 8005ad0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ad4:	d1f9      	bne.n	8005aca <memcpy+0xe>
 8005ad6:	bd10      	pop	{r4, pc}

08005ad8 <_Balloc>:
 8005ad8:	b570      	push	{r4, r5, r6, lr}
 8005ada:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005adc:	4604      	mov	r4, r0
 8005ade:	460d      	mov	r5, r1
 8005ae0:	b976      	cbnz	r6, 8005b00 <_Balloc+0x28>
 8005ae2:	2010      	movs	r0, #16
 8005ae4:	f7ff ffc2 	bl	8005a6c <malloc>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	6260      	str	r0, [r4, #36]	; 0x24
 8005aec:	b920      	cbnz	r0, 8005af8 <_Balloc+0x20>
 8005aee:	2166      	movs	r1, #102	; 0x66
 8005af0:	4b17      	ldr	r3, [pc, #92]	; (8005b50 <_Balloc+0x78>)
 8005af2:	4818      	ldr	r0, [pc, #96]	; (8005b54 <_Balloc+0x7c>)
 8005af4:	f7fe fda4 	bl	8004640 <__assert_func>
 8005af8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005afc:	6006      	str	r6, [r0, #0]
 8005afe:	60c6      	str	r6, [r0, #12]
 8005b00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005b02:	68f3      	ldr	r3, [r6, #12]
 8005b04:	b183      	cbz	r3, 8005b28 <_Balloc+0x50>
 8005b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005b0e:	b9b8      	cbnz	r0, 8005b40 <_Balloc+0x68>
 8005b10:	2101      	movs	r1, #1
 8005b12:	fa01 f605 	lsl.w	r6, r1, r5
 8005b16:	1d72      	adds	r2, r6, #5
 8005b18:	4620      	mov	r0, r4
 8005b1a:	0092      	lsls	r2, r2, #2
 8005b1c:	f000 fc94 	bl	8006448 <_calloc_r>
 8005b20:	b160      	cbz	r0, 8005b3c <_Balloc+0x64>
 8005b22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005b26:	e00e      	b.n	8005b46 <_Balloc+0x6e>
 8005b28:	2221      	movs	r2, #33	; 0x21
 8005b2a:	2104      	movs	r1, #4
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	f000 fc8b 	bl	8006448 <_calloc_r>
 8005b32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b34:	60f0      	str	r0, [r6, #12]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e4      	bne.n	8005b06 <_Balloc+0x2e>
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	bd70      	pop	{r4, r5, r6, pc}
 8005b40:	6802      	ldr	r2, [r0, #0]
 8005b42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005b46:	2300      	movs	r3, #0
 8005b48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b4c:	e7f7      	b.n	8005b3e <_Balloc+0x66>
 8005b4e:	bf00      	nop
 8005b50:	080075f0 	.word	0x080075f0
 8005b54:	080077a0 	.word	0x080077a0

08005b58 <_Bfree>:
 8005b58:	b570      	push	{r4, r5, r6, lr}
 8005b5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b5c:	4605      	mov	r5, r0
 8005b5e:	460c      	mov	r4, r1
 8005b60:	b976      	cbnz	r6, 8005b80 <_Bfree+0x28>
 8005b62:	2010      	movs	r0, #16
 8005b64:	f7ff ff82 	bl	8005a6c <malloc>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	6268      	str	r0, [r5, #36]	; 0x24
 8005b6c:	b920      	cbnz	r0, 8005b78 <_Bfree+0x20>
 8005b6e:	218a      	movs	r1, #138	; 0x8a
 8005b70:	4b08      	ldr	r3, [pc, #32]	; (8005b94 <_Bfree+0x3c>)
 8005b72:	4809      	ldr	r0, [pc, #36]	; (8005b98 <_Bfree+0x40>)
 8005b74:	f7fe fd64 	bl	8004640 <__assert_func>
 8005b78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b7c:	6006      	str	r6, [r0, #0]
 8005b7e:	60c6      	str	r6, [r0, #12]
 8005b80:	b13c      	cbz	r4, 8005b92 <_Bfree+0x3a>
 8005b82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b84:	6862      	ldr	r2, [r4, #4]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b8c:	6021      	str	r1, [r4, #0]
 8005b8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b92:	bd70      	pop	{r4, r5, r6, pc}
 8005b94:	080075f0 	.word	0x080075f0
 8005b98:	080077a0 	.word	0x080077a0

08005b9c <__multadd>:
 8005b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ba0:	4698      	mov	r8, r3
 8005ba2:	460c      	mov	r4, r1
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	690e      	ldr	r6, [r1, #16]
 8005ba8:	4607      	mov	r7, r0
 8005baa:	f101 0014 	add.w	r0, r1, #20
 8005bae:	6805      	ldr	r5, [r0, #0]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	b2a9      	uxth	r1, r5
 8005bb4:	fb02 8101 	mla	r1, r2, r1, r8
 8005bb8:	0c2d      	lsrs	r5, r5, #16
 8005bba:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005bbe:	fb02 c505 	mla	r5, r2, r5, ip
 8005bc2:	b289      	uxth	r1, r1
 8005bc4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005bc8:	429e      	cmp	r6, r3
 8005bca:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005bce:	f840 1b04 	str.w	r1, [r0], #4
 8005bd2:	dcec      	bgt.n	8005bae <__multadd+0x12>
 8005bd4:	f1b8 0f00 	cmp.w	r8, #0
 8005bd8:	d022      	beq.n	8005c20 <__multadd+0x84>
 8005bda:	68a3      	ldr	r3, [r4, #8]
 8005bdc:	42b3      	cmp	r3, r6
 8005bde:	dc19      	bgt.n	8005c14 <__multadd+0x78>
 8005be0:	6861      	ldr	r1, [r4, #4]
 8005be2:	4638      	mov	r0, r7
 8005be4:	3101      	adds	r1, #1
 8005be6:	f7ff ff77 	bl	8005ad8 <_Balloc>
 8005bea:	4605      	mov	r5, r0
 8005bec:	b928      	cbnz	r0, 8005bfa <__multadd+0x5e>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	21b5      	movs	r1, #181	; 0xb5
 8005bf2:	4b0d      	ldr	r3, [pc, #52]	; (8005c28 <__multadd+0x8c>)
 8005bf4:	480d      	ldr	r0, [pc, #52]	; (8005c2c <__multadd+0x90>)
 8005bf6:	f7fe fd23 	bl	8004640 <__assert_func>
 8005bfa:	6922      	ldr	r2, [r4, #16]
 8005bfc:	f104 010c 	add.w	r1, r4, #12
 8005c00:	3202      	adds	r2, #2
 8005c02:	0092      	lsls	r2, r2, #2
 8005c04:	300c      	adds	r0, #12
 8005c06:	f7ff ff59 	bl	8005abc <memcpy>
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	4638      	mov	r0, r7
 8005c0e:	f7ff ffa3 	bl	8005b58 <_Bfree>
 8005c12:	462c      	mov	r4, r5
 8005c14:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005c18:	3601      	adds	r6, #1
 8005c1a:	f8c3 8014 	str.w	r8, [r3, #20]
 8005c1e:	6126      	str	r6, [r4, #16]
 8005c20:	4620      	mov	r0, r4
 8005c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c26:	bf00      	nop
 8005c28:	08007710 	.word	0x08007710
 8005c2c:	080077a0 	.word	0x080077a0

08005c30 <__s2b>:
 8005c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c34:	4615      	mov	r5, r2
 8005c36:	2209      	movs	r2, #9
 8005c38:	461f      	mov	r7, r3
 8005c3a:	3308      	adds	r3, #8
 8005c3c:	460c      	mov	r4, r1
 8005c3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c42:	4606      	mov	r6, r0
 8005c44:	2201      	movs	r2, #1
 8005c46:	2100      	movs	r1, #0
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	db09      	blt.n	8005c60 <__s2b+0x30>
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	f7ff ff43 	bl	8005ad8 <_Balloc>
 8005c52:	b940      	cbnz	r0, 8005c66 <__s2b+0x36>
 8005c54:	4602      	mov	r2, r0
 8005c56:	21ce      	movs	r1, #206	; 0xce
 8005c58:	4b18      	ldr	r3, [pc, #96]	; (8005cbc <__s2b+0x8c>)
 8005c5a:	4819      	ldr	r0, [pc, #100]	; (8005cc0 <__s2b+0x90>)
 8005c5c:	f7fe fcf0 	bl	8004640 <__assert_func>
 8005c60:	0052      	lsls	r2, r2, #1
 8005c62:	3101      	adds	r1, #1
 8005c64:	e7f0      	b.n	8005c48 <__s2b+0x18>
 8005c66:	9b08      	ldr	r3, [sp, #32]
 8005c68:	2d09      	cmp	r5, #9
 8005c6a:	6143      	str	r3, [r0, #20]
 8005c6c:	f04f 0301 	mov.w	r3, #1
 8005c70:	6103      	str	r3, [r0, #16]
 8005c72:	dd16      	ble.n	8005ca2 <__s2b+0x72>
 8005c74:	f104 0909 	add.w	r9, r4, #9
 8005c78:	46c8      	mov	r8, r9
 8005c7a:	442c      	add	r4, r5
 8005c7c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005c80:	4601      	mov	r1, r0
 8005c82:	220a      	movs	r2, #10
 8005c84:	4630      	mov	r0, r6
 8005c86:	3b30      	subs	r3, #48	; 0x30
 8005c88:	f7ff ff88 	bl	8005b9c <__multadd>
 8005c8c:	45a0      	cmp	r8, r4
 8005c8e:	d1f5      	bne.n	8005c7c <__s2b+0x4c>
 8005c90:	f1a5 0408 	sub.w	r4, r5, #8
 8005c94:	444c      	add	r4, r9
 8005c96:	1b2d      	subs	r5, r5, r4
 8005c98:	1963      	adds	r3, r4, r5
 8005c9a:	42bb      	cmp	r3, r7
 8005c9c:	db04      	blt.n	8005ca8 <__s2b+0x78>
 8005c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ca2:	2509      	movs	r5, #9
 8005ca4:	340a      	adds	r4, #10
 8005ca6:	e7f6      	b.n	8005c96 <__s2b+0x66>
 8005ca8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005cac:	4601      	mov	r1, r0
 8005cae:	220a      	movs	r2, #10
 8005cb0:	4630      	mov	r0, r6
 8005cb2:	3b30      	subs	r3, #48	; 0x30
 8005cb4:	f7ff ff72 	bl	8005b9c <__multadd>
 8005cb8:	e7ee      	b.n	8005c98 <__s2b+0x68>
 8005cba:	bf00      	nop
 8005cbc:	08007710 	.word	0x08007710
 8005cc0:	080077a0 	.word	0x080077a0

08005cc4 <__hi0bits>:
 8005cc4:	0c02      	lsrs	r2, r0, #16
 8005cc6:	0412      	lsls	r2, r2, #16
 8005cc8:	4603      	mov	r3, r0
 8005cca:	b9ca      	cbnz	r2, 8005d00 <__hi0bits+0x3c>
 8005ccc:	0403      	lsls	r3, r0, #16
 8005cce:	2010      	movs	r0, #16
 8005cd0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005cd4:	bf04      	itt	eq
 8005cd6:	021b      	lsleq	r3, r3, #8
 8005cd8:	3008      	addeq	r0, #8
 8005cda:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005cde:	bf04      	itt	eq
 8005ce0:	011b      	lsleq	r3, r3, #4
 8005ce2:	3004      	addeq	r0, #4
 8005ce4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005ce8:	bf04      	itt	eq
 8005cea:	009b      	lsleq	r3, r3, #2
 8005cec:	3002      	addeq	r0, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	db05      	blt.n	8005cfe <__hi0bits+0x3a>
 8005cf2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005cf6:	f100 0001 	add.w	r0, r0, #1
 8005cfa:	bf08      	it	eq
 8005cfc:	2020      	moveq	r0, #32
 8005cfe:	4770      	bx	lr
 8005d00:	2000      	movs	r0, #0
 8005d02:	e7e5      	b.n	8005cd0 <__hi0bits+0xc>

08005d04 <__lo0bits>:
 8005d04:	6803      	ldr	r3, [r0, #0]
 8005d06:	4602      	mov	r2, r0
 8005d08:	f013 0007 	ands.w	r0, r3, #7
 8005d0c:	d00b      	beq.n	8005d26 <__lo0bits+0x22>
 8005d0e:	07d9      	lsls	r1, r3, #31
 8005d10:	d422      	bmi.n	8005d58 <__lo0bits+0x54>
 8005d12:	0798      	lsls	r0, r3, #30
 8005d14:	bf49      	itett	mi
 8005d16:	085b      	lsrmi	r3, r3, #1
 8005d18:	089b      	lsrpl	r3, r3, #2
 8005d1a:	2001      	movmi	r0, #1
 8005d1c:	6013      	strmi	r3, [r2, #0]
 8005d1e:	bf5c      	itt	pl
 8005d20:	2002      	movpl	r0, #2
 8005d22:	6013      	strpl	r3, [r2, #0]
 8005d24:	4770      	bx	lr
 8005d26:	b299      	uxth	r1, r3
 8005d28:	b909      	cbnz	r1, 8005d2e <__lo0bits+0x2a>
 8005d2a:	2010      	movs	r0, #16
 8005d2c:	0c1b      	lsrs	r3, r3, #16
 8005d2e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005d32:	bf04      	itt	eq
 8005d34:	0a1b      	lsreq	r3, r3, #8
 8005d36:	3008      	addeq	r0, #8
 8005d38:	0719      	lsls	r1, r3, #28
 8005d3a:	bf04      	itt	eq
 8005d3c:	091b      	lsreq	r3, r3, #4
 8005d3e:	3004      	addeq	r0, #4
 8005d40:	0799      	lsls	r1, r3, #30
 8005d42:	bf04      	itt	eq
 8005d44:	089b      	lsreq	r3, r3, #2
 8005d46:	3002      	addeq	r0, #2
 8005d48:	07d9      	lsls	r1, r3, #31
 8005d4a:	d403      	bmi.n	8005d54 <__lo0bits+0x50>
 8005d4c:	085b      	lsrs	r3, r3, #1
 8005d4e:	f100 0001 	add.w	r0, r0, #1
 8005d52:	d003      	beq.n	8005d5c <__lo0bits+0x58>
 8005d54:	6013      	str	r3, [r2, #0]
 8005d56:	4770      	bx	lr
 8005d58:	2000      	movs	r0, #0
 8005d5a:	4770      	bx	lr
 8005d5c:	2020      	movs	r0, #32
 8005d5e:	4770      	bx	lr

08005d60 <__i2b>:
 8005d60:	b510      	push	{r4, lr}
 8005d62:	460c      	mov	r4, r1
 8005d64:	2101      	movs	r1, #1
 8005d66:	f7ff feb7 	bl	8005ad8 <_Balloc>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	b928      	cbnz	r0, 8005d7a <__i2b+0x1a>
 8005d6e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005d72:	4b04      	ldr	r3, [pc, #16]	; (8005d84 <__i2b+0x24>)
 8005d74:	4804      	ldr	r0, [pc, #16]	; (8005d88 <__i2b+0x28>)
 8005d76:	f7fe fc63 	bl	8004640 <__assert_func>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	6144      	str	r4, [r0, #20]
 8005d7e:	6103      	str	r3, [r0, #16]
 8005d80:	bd10      	pop	{r4, pc}
 8005d82:	bf00      	nop
 8005d84:	08007710 	.word	0x08007710
 8005d88:	080077a0 	.word	0x080077a0

08005d8c <__multiply>:
 8005d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d90:	4614      	mov	r4, r2
 8005d92:	690a      	ldr	r2, [r1, #16]
 8005d94:	6923      	ldr	r3, [r4, #16]
 8005d96:	460d      	mov	r5, r1
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	bfbe      	ittt	lt
 8005d9c:	460b      	movlt	r3, r1
 8005d9e:	4625      	movlt	r5, r4
 8005da0:	461c      	movlt	r4, r3
 8005da2:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005da6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005daa:	68ab      	ldr	r3, [r5, #8]
 8005dac:	6869      	ldr	r1, [r5, #4]
 8005dae:	eb0a 0709 	add.w	r7, sl, r9
 8005db2:	42bb      	cmp	r3, r7
 8005db4:	b085      	sub	sp, #20
 8005db6:	bfb8      	it	lt
 8005db8:	3101      	addlt	r1, #1
 8005dba:	f7ff fe8d 	bl	8005ad8 <_Balloc>
 8005dbe:	b930      	cbnz	r0, 8005dce <__multiply+0x42>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	f240 115d 	movw	r1, #349	; 0x15d
 8005dc6:	4b41      	ldr	r3, [pc, #260]	; (8005ecc <__multiply+0x140>)
 8005dc8:	4841      	ldr	r0, [pc, #260]	; (8005ed0 <__multiply+0x144>)
 8005dca:	f7fe fc39 	bl	8004640 <__assert_func>
 8005dce:	f100 0614 	add.w	r6, r0, #20
 8005dd2:	4633      	mov	r3, r6
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005dda:	4543      	cmp	r3, r8
 8005ddc:	d31e      	bcc.n	8005e1c <__multiply+0x90>
 8005dde:	f105 0c14 	add.w	ip, r5, #20
 8005de2:	f104 0314 	add.w	r3, r4, #20
 8005de6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005dea:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005dee:	9202      	str	r2, [sp, #8]
 8005df0:	ebac 0205 	sub.w	r2, ip, r5
 8005df4:	3a15      	subs	r2, #21
 8005df6:	f022 0203 	bic.w	r2, r2, #3
 8005dfa:	3204      	adds	r2, #4
 8005dfc:	f105 0115 	add.w	r1, r5, #21
 8005e00:	458c      	cmp	ip, r1
 8005e02:	bf38      	it	cc
 8005e04:	2204      	movcc	r2, #4
 8005e06:	9201      	str	r2, [sp, #4]
 8005e08:	9a02      	ldr	r2, [sp, #8]
 8005e0a:	9303      	str	r3, [sp, #12]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d808      	bhi.n	8005e22 <__multiply+0x96>
 8005e10:	2f00      	cmp	r7, #0
 8005e12:	dc55      	bgt.n	8005ec0 <__multiply+0x134>
 8005e14:	6107      	str	r7, [r0, #16]
 8005e16:	b005      	add	sp, #20
 8005e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e1c:	f843 2b04 	str.w	r2, [r3], #4
 8005e20:	e7db      	b.n	8005dda <__multiply+0x4e>
 8005e22:	f8b3 a000 	ldrh.w	sl, [r3]
 8005e26:	f1ba 0f00 	cmp.w	sl, #0
 8005e2a:	d020      	beq.n	8005e6e <__multiply+0xe2>
 8005e2c:	46b1      	mov	r9, r6
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f105 0e14 	add.w	lr, r5, #20
 8005e34:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005e38:	f8d9 b000 	ldr.w	fp, [r9]
 8005e3c:	b2a1      	uxth	r1, r4
 8005e3e:	fa1f fb8b 	uxth.w	fp, fp
 8005e42:	fb0a b101 	mla	r1, sl, r1, fp
 8005e46:	4411      	add	r1, r2
 8005e48:	f8d9 2000 	ldr.w	r2, [r9]
 8005e4c:	0c24      	lsrs	r4, r4, #16
 8005e4e:	0c12      	lsrs	r2, r2, #16
 8005e50:	fb0a 2404 	mla	r4, sl, r4, r2
 8005e54:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005e58:	b289      	uxth	r1, r1
 8005e5a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005e5e:	45f4      	cmp	ip, lr
 8005e60:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005e64:	f849 1b04 	str.w	r1, [r9], #4
 8005e68:	d8e4      	bhi.n	8005e34 <__multiply+0xa8>
 8005e6a:	9901      	ldr	r1, [sp, #4]
 8005e6c:	5072      	str	r2, [r6, r1]
 8005e6e:	9a03      	ldr	r2, [sp, #12]
 8005e70:	3304      	adds	r3, #4
 8005e72:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005e76:	f1b9 0f00 	cmp.w	r9, #0
 8005e7a:	d01f      	beq.n	8005ebc <__multiply+0x130>
 8005e7c:	46b6      	mov	lr, r6
 8005e7e:	f04f 0a00 	mov.w	sl, #0
 8005e82:	6834      	ldr	r4, [r6, #0]
 8005e84:	f105 0114 	add.w	r1, r5, #20
 8005e88:	880a      	ldrh	r2, [r1, #0]
 8005e8a:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005e8e:	b2a4      	uxth	r4, r4
 8005e90:	fb09 b202 	mla	r2, r9, r2, fp
 8005e94:	4492      	add	sl, r2
 8005e96:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005e9a:	f84e 4b04 	str.w	r4, [lr], #4
 8005e9e:	f851 4b04 	ldr.w	r4, [r1], #4
 8005ea2:	f8be 2000 	ldrh.w	r2, [lr]
 8005ea6:	0c24      	lsrs	r4, r4, #16
 8005ea8:	fb09 2404 	mla	r4, r9, r4, r2
 8005eac:	458c      	cmp	ip, r1
 8005eae:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005eb2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005eb6:	d8e7      	bhi.n	8005e88 <__multiply+0xfc>
 8005eb8:	9a01      	ldr	r2, [sp, #4]
 8005eba:	50b4      	str	r4, [r6, r2]
 8005ebc:	3604      	adds	r6, #4
 8005ebe:	e7a3      	b.n	8005e08 <__multiply+0x7c>
 8005ec0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1a5      	bne.n	8005e14 <__multiply+0x88>
 8005ec8:	3f01      	subs	r7, #1
 8005eca:	e7a1      	b.n	8005e10 <__multiply+0x84>
 8005ecc:	08007710 	.word	0x08007710
 8005ed0:	080077a0 	.word	0x080077a0

08005ed4 <__pow5mult>:
 8005ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ed8:	4615      	mov	r5, r2
 8005eda:	f012 0203 	ands.w	r2, r2, #3
 8005ede:	4606      	mov	r6, r0
 8005ee0:	460f      	mov	r7, r1
 8005ee2:	d007      	beq.n	8005ef4 <__pow5mult+0x20>
 8005ee4:	4c25      	ldr	r4, [pc, #148]	; (8005f7c <__pow5mult+0xa8>)
 8005ee6:	3a01      	subs	r2, #1
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005eee:	f7ff fe55 	bl	8005b9c <__multadd>
 8005ef2:	4607      	mov	r7, r0
 8005ef4:	10ad      	asrs	r5, r5, #2
 8005ef6:	d03d      	beq.n	8005f74 <__pow5mult+0xa0>
 8005ef8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005efa:	b97c      	cbnz	r4, 8005f1c <__pow5mult+0x48>
 8005efc:	2010      	movs	r0, #16
 8005efe:	f7ff fdb5 	bl	8005a6c <malloc>
 8005f02:	4602      	mov	r2, r0
 8005f04:	6270      	str	r0, [r6, #36]	; 0x24
 8005f06:	b928      	cbnz	r0, 8005f14 <__pow5mult+0x40>
 8005f08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005f0c:	4b1c      	ldr	r3, [pc, #112]	; (8005f80 <__pow5mult+0xac>)
 8005f0e:	481d      	ldr	r0, [pc, #116]	; (8005f84 <__pow5mult+0xb0>)
 8005f10:	f7fe fb96 	bl	8004640 <__assert_func>
 8005f14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f18:	6004      	str	r4, [r0, #0]
 8005f1a:	60c4      	str	r4, [r0, #12]
 8005f1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005f20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005f24:	b94c      	cbnz	r4, 8005f3a <__pow5mult+0x66>
 8005f26:	f240 2171 	movw	r1, #625	; 0x271
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	f7ff ff18 	bl	8005d60 <__i2b>
 8005f30:	2300      	movs	r3, #0
 8005f32:	4604      	mov	r4, r0
 8005f34:	f8c8 0008 	str.w	r0, [r8, #8]
 8005f38:	6003      	str	r3, [r0, #0]
 8005f3a:	f04f 0900 	mov.w	r9, #0
 8005f3e:	07eb      	lsls	r3, r5, #31
 8005f40:	d50a      	bpl.n	8005f58 <__pow5mult+0x84>
 8005f42:	4639      	mov	r1, r7
 8005f44:	4622      	mov	r2, r4
 8005f46:	4630      	mov	r0, r6
 8005f48:	f7ff ff20 	bl	8005d8c <__multiply>
 8005f4c:	4680      	mov	r8, r0
 8005f4e:	4639      	mov	r1, r7
 8005f50:	4630      	mov	r0, r6
 8005f52:	f7ff fe01 	bl	8005b58 <_Bfree>
 8005f56:	4647      	mov	r7, r8
 8005f58:	106d      	asrs	r5, r5, #1
 8005f5a:	d00b      	beq.n	8005f74 <__pow5mult+0xa0>
 8005f5c:	6820      	ldr	r0, [r4, #0]
 8005f5e:	b938      	cbnz	r0, 8005f70 <__pow5mult+0x9c>
 8005f60:	4622      	mov	r2, r4
 8005f62:	4621      	mov	r1, r4
 8005f64:	4630      	mov	r0, r6
 8005f66:	f7ff ff11 	bl	8005d8c <__multiply>
 8005f6a:	6020      	str	r0, [r4, #0]
 8005f6c:	f8c0 9000 	str.w	r9, [r0]
 8005f70:	4604      	mov	r4, r0
 8005f72:	e7e4      	b.n	8005f3e <__pow5mult+0x6a>
 8005f74:	4638      	mov	r0, r7
 8005f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f7a:	bf00      	nop
 8005f7c:	080078f0 	.word	0x080078f0
 8005f80:	080075f0 	.word	0x080075f0
 8005f84:	080077a0 	.word	0x080077a0

08005f88 <__lshift>:
 8005f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f8c:	460c      	mov	r4, r1
 8005f8e:	4607      	mov	r7, r0
 8005f90:	4691      	mov	r9, r2
 8005f92:	6923      	ldr	r3, [r4, #16]
 8005f94:	6849      	ldr	r1, [r1, #4]
 8005f96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005f9a:	68a3      	ldr	r3, [r4, #8]
 8005f9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005fa0:	f108 0601 	add.w	r6, r8, #1
 8005fa4:	42b3      	cmp	r3, r6
 8005fa6:	db0b      	blt.n	8005fc0 <__lshift+0x38>
 8005fa8:	4638      	mov	r0, r7
 8005faa:	f7ff fd95 	bl	8005ad8 <_Balloc>
 8005fae:	4605      	mov	r5, r0
 8005fb0:	b948      	cbnz	r0, 8005fc6 <__lshift+0x3e>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005fb8:	4b27      	ldr	r3, [pc, #156]	; (8006058 <__lshift+0xd0>)
 8005fba:	4828      	ldr	r0, [pc, #160]	; (800605c <__lshift+0xd4>)
 8005fbc:	f7fe fb40 	bl	8004640 <__assert_func>
 8005fc0:	3101      	adds	r1, #1
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	e7ee      	b.n	8005fa4 <__lshift+0x1c>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	f100 0114 	add.w	r1, r0, #20
 8005fcc:	f100 0210 	add.w	r2, r0, #16
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	4553      	cmp	r3, sl
 8005fd4:	db33      	blt.n	800603e <__lshift+0xb6>
 8005fd6:	6920      	ldr	r0, [r4, #16]
 8005fd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005fdc:	f104 0314 	add.w	r3, r4, #20
 8005fe0:	f019 091f 	ands.w	r9, r9, #31
 8005fe4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005fe8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005fec:	d02b      	beq.n	8006046 <__lshift+0xbe>
 8005fee:	468a      	mov	sl, r1
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f1c9 0e20 	rsb	lr, r9, #32
 8005ff6:	6818      	ldr	r0, [r3, #0]
 8005ff8:	fa00 f009 	lsl.w	r0, r0, r9
 8005ffc:	4302      	orrs	r2, r0
 8005ffe:	f84a 2b04 	str.w	r2, [sl], #4
 8006002:	f853 2b04 	ldr.w	r2, [r3], #4
 8006006:	459c      	cmp	ip, r3
 8006008:	fa22 f20e 	lsr.w	r2, r2, lr
 800600c:	d8f3      	bhi.n	8005ff6 <__lshift+0x6e>
 800600e:	ebac 0304 	sub.w	r3, ip, r4
 8006012:	3b15      	subs	r3, #21
 8006014:	f023 0303 	bic.w	r3, r3, #3
 8006018:	3304      	adds	r3, #4
 800601a:	f104 0015 	add.w	r0, r4, #21
 800601e:	4584      	cmp	ip, r0
 8006020:	bf38      	it	cc
 8006022:	2304      	movcc	r3, #4
 8006024:	50ca      	str	r2, [r1, r3]
 8006026:	b10a      	cbz	r2, 800602c <__lshift+0xa4>
 8006028:	f108 0602 	add.w	r6, r8, #2
 800602c:	3e01      	subs	r6, #1
 800602e:	4638      	mov	r0, r7
 8006030:	4621      	mov	r1, r4
 8006032:	612e      	str	r6, [r5, #16]
 8006034:	f7ff fd90 	bl	8005b58 <_Bfree>
 8006038:	4628      	mov	r0, r5
 800603a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800603e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006042:	3301      	adds	r3, #1
 8006044:	e7c5      	b.n	8005fd2 <__lshift+0x4a>
 8006046:	3904      	subs	r1, #4
 8006048:	f853 2b04 	ldr.w	r2, [r3], #4
 800604c:	459c      	cmp	ip, r3
 800604e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006052:	d8f9      	bhi.n	8006048 <__lshift+0xc0>
 8006054:	e7ea      	b.n	800602c <__lshift+0xa4>
 8006056:	bf00      	nop
 8006058:	08007710 	.word	0x08007710
 800605c:	080077a0 	.word	0x080077a0

08006060 <__mcmp>:
 8006060:	4603      	mov	r3, r0
 8006062:	690a      	ldr	r2, [r1, #16]
 8006064:	6900      	ldr	r0, [r0, #16]
 8006066:	b530      	push	{r4, r5, lr}
 8006068:	1a80      	subs	r0, r0, r2
 800606a:	d10d      	bne.n	8006088 <__mcmp+0x28>
 800606c:	3314      	adds	r3, #20
 800606e:	3114      	adds	r1, #20
 8006070:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006074:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006078:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800607c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006080:	4295      	cmp	r5, r2
 8006082:	d002      	beq.n	800608a <__mcmp+0x2a>
 8006084:	d304      	bcc.n	8006090 <__mcmp+0x30>
 8006086:	2001      	movs	r0, #1
 8006088:	bd30      	pop	{r4, r5, pc}
 800608a:	42a3      	cmp	r3, r4
 800608c:	d3f4      	bcc.n	8006078 <__mcmp+0x18>
 800608e:	e7fb      	b.n	8006088 <__mcmp+0x28>
 8006090:	f04f 30ff 	mov.w	r0, #4294967295
 8006094:	e7f8      	b.n	8006088 <__mcmp+0x28>
	...

08006098 <__mdiff>:
 8006098:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609c:	460c      	mov	r4, r1
 800609e:	4606      	mov	r6, r0
 80060a0:	4611      	mov	r1, r2
 80060a2:	4620      	mov	r0, r4
 80060a4:	4692      	mov	sl, r2
 80060a6:	f7ff ffdb 	bl	8006060 <__mcmp>
 80060aa:	1e05      	subs	r5, r0, #0
 80060ac:	d111      	bne.n	80060d2 <__mdiff+0x3a>
 80060ae:	4629      	mov	r1, r5
 80060b0:	4630      	mov	r0, r6
 80060b2:	f7ff fd11 	bl	8005ad8 <_Balloc>
 80060b6:	4602      	mov	r2, r0
 80060b8:	b928      	cbnz	r0, 80060c6 <__mdiff+0x2e>
 80060ba:	f240 2132 	movw	r1, #562	; 0x232
 80060be:	4b3c      	ldr	r3, [pc, #240]	; (80061b0 <__mdiff+0x118>)
 80060c0:	483c      	ldr	r0, [pc, #240]	; (80061b4 <__mdiff+0x11c>)
 80060c2:	f7fe fabd 	bl	8004640 <__assert_func>
 80060c6:	2301      	movs	r3, #1
 80060c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80060cc:	4610      	mov	r0, r2
 80060ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d2:	bfa4      	itt	ge
 80060d4:	4653      	movge	r3, sl
 80060d6:	46a2      	movge	sl, r4
 80060d8:	4630      	mov	r0, r6
 80060da:	f8da 1004 	ldr.w	r1, [sl, #4]
 80060de:	bfa6      	itte	ge
 80060e0:	461c      	movge	r4, r3
 80060e2:	2500      	movge	r5, #0
 80060e4:	2501      	movlt	r5, #1
 80060e6:	f7ff fcf7 	bl	8005ad8 <_Balloc>
 80060ea:	4602      	mov	r2, r0
 80060ec:	b918      	cbnz	r0, 80060f6 <__mdiff+0x5e>
 80060ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 80060f2:	4b2f      	ldr	r3, [pc, #188]	; (80061b0 <__mdiff+0x118>)
 80060f4:	e7e4      	b.n	80060c0 <__mdiff+0x28>
 80060f6:	f100 0814 	add.w	r8, r0, #20
 80060fa:	f8da 7010 	ldr.w	r7, [sl, #16]
 80060fe:	60c5      	str	r5, [r0, #12]
 8006100:	f04f 0c00 	mov.w	ip, #0
 8006104:	f10a 0514 	add.w	r5, sl, #20
 8006108:	f10a 0010 	add.w	r0, sl, #16
 800610c:	46c2      	mov	sl, r8
 800610e:	6926      	ldr	r6, [r4, #16]
 8006110:	f104 0914 	add.w	r9, r4, #20
 8006114:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006118:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800611c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006120:	f859 3b04 	ldr.w	r3, [r9], #4
 8006124:	fa1f f18b 	uxth.w	r1, fp
 8006128:	4461      	add	r1, ip
 800612a:	fa1f fc83 	uxth.w	ip, r3
 800612e:	0c1b      	lsrs	r3, r3, #16
 8006130:	eba1 010c 	sub.w	r1, r1, ip
 8006134:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006138:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800613c:	b289      	uxth	r1, r1
 800613e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006142:	454e      	cmp	r6, r9
 8006144:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006148:	f84a 3b04 	str.w	r3, [sl], #4
 800614c:	d8e6      	bhi.n	800611c <__mdiff+0x84>
 800614e:	1b33      	subs	r3, r6, r4
 8006150:	3b15      	subs	r3, #21
 8006152:	f023 0303 	bic.w	r3, r3, #3
 8006156:	3415      	adds	r4, #21
 8006158:	3304      	adds	r3, #4
 800615a:	42a6      	cmp	r6, r4
 800615c:	bf38      	it	cc
 800615e:	2304      	movcc	r3, #4
 8006160:	441d      	add	r5, r3
 8006162:	4443      	add	r3, r8
 8006164:	461e      	mov	r6, r3
 8006166:	462c      	mov	r4, r5
 8006168:	4574      	cmp	r4, lr
 800616a:	d30e      	bcc.n	800618a <__mdiff+0xf2>
 800616c:	f10e 0103 	add.w	r1, lr, #3
 8006170:	1b49      	subs	r1, r1, r5
 8006172:	f021 0103 	bic.w	r1, r1, #3
 8006176:	3d03      	subs	r5, #3
 8006178:	45ae      	cmp	lr, r5
 800617a:	bf38      	it	cc
 800617c:	2100      	movcc	r1, #0
 800617e:	4419      	add	r1, r3
 8006180:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006184:	b18b      	cbz	r3, 80061aa <__mdiff+0x112>
 8006186:	6117      	str	r7, [r2, #16]
 8006188:	e7a0      	b.n	80060cc <__mdiff+0x34>
 800618a:	f854 8b04 	ldr.w	r8, [r4], #4
 800618e:	fa1f f188 	uxth.w	r1, r8
 8006192:	4461      	add	r1, ip
 8006194:	1408      	asrs	r0, r1, #16
 8006196:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800619a:	b289      	uxth	r1, r1
 800619c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80061a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80061a4:	f846 1b04 	str.w	r1, [r6], #4
 80061a8:	e7de      	b.n	8006168 <__mdiff+0xd0>
 80061aa:	3f01      	subs	r7, #1
 80061ac:	e7e8      	b.n	8006180 <__mdiff+0xe8>
 80061ae:	bf00      	nop
 80061b0:	08007710 	.word	0x08007710
 80061b4:	080077a0 	.word	0x080077a0

080061b8 <__ulp>:
 80061b8:	4b11      	ldr	r3, [pc, #68]	; (8006200 <__ulp+0x48>)
 80061ba:	400b      	ands	r3, r1
 80061bc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	dd02      	ble.n	80061ca <__ulp+0x12>
 80061c4:	2000      	movs	r0, #0
 80061c6:	4619      	mov	r1, r3
 80061c8:	4770      	bx	lr
 80061ca:	425b      	negs	r3, r3
 80061cc:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80061d0:	f04f 0000 	mov.w	r0, #0
 80061d4:	f04f 0100 	mov.w	r1, #0
 80061d8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80061dc:	da04      	bge.n	80061e8 <__ulp+0x30>
 80061de:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80061e2:	fa43 f102 	asr.w	r1, r3, r2
 80061e6:	4770      	bx	lr
 80061e8:	f1a2 0314 	sub.w	r3, r2, #20
 80061ec:	2b1e      	cmp	r3, #30
 80061ee:	bfd6      	itet	le
 80061f0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80061f4:	2301      	movgt	r3, #1
 80061f6:	fa22 f303 	lsrle.w	r3, r2, r3
 80061fa:	4618      	mov	r0, r3
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	7ff00000 	.word	0x7ff00000

08006204 <__b2d>:
 8006204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006208:	6907      	ldr	r7, [r0, #16]
 800620a:	f100 0914 	add.w	r9, r0, #20
 800620e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006212:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006216:	f1a7 0804 	sub.w	r8, r7, #4
 800621a:	4630      	mov	r0, r6
 800621c:	f7ff fd52 	bl	8005cc4 <__hi0bits>
 8006220:	f1c0 0320 	rsb	r3, r0, #32
 8006224:	280a      	cmp	r0, #10
 8006226:	600b      	str	r3, [r1, #0]
 8006228:	491f      	ldr	r1, [pc, #124]	; (80062a8 <__b2d+0xa4>)
 800622a:	dc17      	bgt.n	800625c <__b2d+0x58>
 800622c:	45c1      	cmp	r9, r8
 800622e:	bf28      	it	cs
 8006230:	2200      	movcs	r2, #0
 8006232:	f1c0 0c0b 	rsb	ip, r0, #11
 8006236:	fa26 f30c 	lsr.w	r3, r6, ip
 800623a:	bf38      	it	cc
 800623c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006240:	ea43 0501 	orr.w	r5, r3, r1
 8006244:	f100 0315 	add.w	r3, r0, #21
 8006248:	fa06 f303 	lsl.w	r3, r6, r3
 800624c:	fa22 f20c 	lsr.w	r2, r2, ip
 8006250:	ea43 0402 	orr.w	r4, r3, r2
 8006254:	4620      	mov	r0, r4
 8006256:	4629      	mov	r1, r5
 8006258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800625c:	45c1      	cmp	r9, r8
 800625e:	bf2e      	itee	cs
 8006260:	2200      	movcs	r2, #0
 8006262:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006266:	f1a7 0808 	subcc.w	r8, r7, #8
 800626a:	f1b0 030b 	subs.w	r3, r0, #11
 800626e:	d016      	beq.n	800629e <__b2d+0x9a>
 8006270:	f1c3 0720 	rsb	r7, r3, #32
 8006274:	fa22 f107 	lsr.w	r1, r2, r7
 8006278:	45c8      	cmp	r8, r9
 800627a:	fa06 f603 	lsl.w	r6, r6, r3
 800627e:	ea46 0601 	orr.w	r6, r6, r1
 8006282:	bf94      	ite	ls
 8006284:	2100      	movls	r1, #0
 8006286:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800628a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800628e:	fa02 f003 	lsl.w	r0, r2, r3
 8006292:	40f9      	lsrs	r1, r7
 8006294:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006298:	ea40 0401 	orr.w	r4, r0, r1
 800629c:	e7da      	b.n	8006254 <__b2d+0x50>
 800629e:	4614      	mov	r4, r2
 80062a0:	ea46 0501 	orr.w	r5, r6, r1
 80062a4:	e7d6      	b.n	8006254 <__b2d+0x50>
 80062a6:	bf00      	nop
 80062a8:	3ff00000 	.word	0x3ff00000

080062ac <__d2b>:
 80062ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80062b0:	2101      	movs	r1, #1
 80062b2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80062b6:	4690      	mov	r8, r2
 80062b8:	461d      	mov	r5, r3
 80062ba:	f7ff fc0d 	bl	8005ad8 <_Balloc>
 80062be:	4604      	mov	r4, r0
 80062c0:	b930      	cbnz	r0, 80062d0 <__d2b+0x24>
 80062c2:	4602      	mov	r2, r0
 80062c4:	f240 310a 	movw	r1, #778	; 0x30a
 80062c8:	4b24      	ldr	r3, [pc, #144]	; (800635c <__d2b+0xb0>)
 80062ca:	4825      	ldr	r0, [pc, #148]	; (8006360 <__d2b+0xb4>)
 80062cc:	f7fe f9b8 	bl	8004640 <__assert_func>
 80062d0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80062d4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80062d8:	bb2d      	cbnz	r5, 8006326 <__d2b+0x7a>
 80062da:	9301      	str	r3, [sp, #4]
 80062dc:	f1b8 0300 	subs.w	r3, r8, #0
 80062e0:	d026      	beq.n	8006330 <__d2b+0x84>
 80062e2:	4668      	mov	r0, sp
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	f7ff fd0d 	bl	8005d04 <__lo0bits>
 80062ea:	9900      	ldr	r1, [sp, #0]
 80062ec:	b1f0      	cbz	r0, 800632c <__d2b+0x80>
 80062ee:	9a01      	ldr	r2, [sp, #4]
 80062f0:	f1c0 0320 	rsb	r3, r0, #32
 80062f4:	fa02 f303 	lsl.w	r3, r2, r3
 80062f8:	430b      	orrs	r3, r1
 80062fa:	40c2      	lsrs	r2, r0
 80062fc:	6163      	str	r3, [r4, #20]
 80062fe:	9201      	str	r2, [sp, #4]
 8006300:	9b01      	ldr	r3, [sp, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	bf14      	ite	ne
 8006306:	2102      	movne	r1, #2
 8006308:	2101      	moveq	r1, #1
 800630a:	61a3      	str	r3, [r4, #24]
 800630c:	6121      	str	r1, [r4, #16]
 800630e:	b1c5      	cbz	r5, 8006342 <__d2b+0x96>
 8006310:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006314:	4405      	add	r5, r0
 8006316:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800631a:	603d      	str	r5, [r7, #0]
 800631c:	6030      	str	r0, [r6, #0]
 800631e:	4620      	mov	r0, r4
 8006320:	b002      	add	sp, #8
 8006322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800632a:	e7d6      	b.n	80062da <__d2b+0x2e>
 800632c:	6161      	str	r1, [r4, #20]
 800632e:	e7e7      	b.n	8006300 <__d2b+0x54>
 8006330:	a801      	add	r0, sp, #4
 8006332:	f7ff fce7 	bl	8005d04 <__lo0bits>
 8006336:	2101      	movs	r1, #1
 8006338:	9b01      	ldr	r3, [sp, #4]
 800633a:	6121      	str	r1, [r4, #16]
 800633c:	6163      	str	r3, [r4, #20]
 800633e:	3020      	adds	r0, #32
 8006340:	e7e5      	b.n	800630e <__d2b+0x62>
 8006342:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006346:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800634a:	6038      	str	r0, [r7, #0]
 800634c:	6918      	ldr	r0, [r3, #16]
 800634e:	f7ff fcb9 	bl	8005cc4 <__hi0bits>
 8006352:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006356:	6031      	str	r1, [r6, #0]
 8006358:	e7e1      	b.n	800631e <__d2b+0x72>
 800635a:	bf00      	nop
 800635c:	08007710 	.word	0x08007710
 8006360:	080077a0 	.word	0x080077a0

08006364 <__ratio>:
 8006364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006368:	4688      	mov	r8, r1
 800636a:	4669      	mov	r1, sp
 800636c:	4681      	mov	r9, r0
 800636e:	f7ff ff49 	bl	8006204 <__b2d>
 8006372:	460f      	mov	r7, r1
 8006374:	4604      	mov	r4, r0
 8006376:	460d      	mov	r5, r1
 8006378:	4640      	mov	r0, r8
 800637a:	a901      	add	r1, sp, #4
 800637c:	f7ff ff42 	bl	8006204 <__b2d>
 8006380:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006384:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006388:	468b      	mov	fp, r1
 800638a:	eba3 0c02 	sub.w	ip, r3, r2
 800638e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006392:	1a9b      	subs	r3, r3, r2
 8006394:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006398:	2b00      	cmp	r3, #0
 800639a:	bfd5      	itete	le
 800639c:	460a      	movle	r2, r1
 800639e:	462a      	movgt	r2, r5
 80063a0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80063a4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80063a8:	bfd8      	it	le
 80063aa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80063ae:	465b      	mov	r3, fp
 80063b0:	4602      	mov	r2, r0
 80063b2:	4639      	mov	r1, r7
 80063b4:	4620      	mov	r0, r4
 80063b6:	f7fa f9c3 	bl	8000740 <__aeabi_ddiv>
 80063ba:	b003      	add	sp, #12
 80063bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080063c0 <__copybits>:
 80063c0:	3901      	subs	r1, #1
 80063c2:	b570      	push	{r4, r5, r6, lr}
 80063c4:	1149      	asrs	r1, r1, #5
 80063c6:	6914      	ldr	r4, [r2, #16]
 80063c8:	3101      	adds	r1, #1
 80063ca:	f102 0314 	add.w	r3, r2, #20
 80063ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80063d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80063d6:	1f05      	subs	r5, r0, #4
 80063d8:	42a3      	cmp	r3, r4
 80063da:	d30c      	bcc.n	80063f6 <__copybits+0x36>
 80063dc:	1aa3      	subs	r3, r4, r2
 80063de:	3b11      	subs	r3, #17
 80063e0:	f023 0303 	bic.w	r3, r3, #3
 80063e4:	3211      	adds	r2, #17
 80063e6:	42a2      	cmp	r2, r4
 80063e8:	bf88      	it	hi
 80063ea:	2300      	movhi	r3, #0
 80063ec:	4418      	add	r0, r3
 80063ee:	2300      	movs	r3, #0
 80063f0:	4288      	cmp	r0, r1
 80063f2:	d305      	bcc.n	8006400 <__copybits+0x40>
 80063f4:	bd70      	pop	{r4, r5, r6, pc}
 80063f6:	f853 6b04 	ldr.w	r6, [r3], #4
 80063fa:	f845 6f04 	str.w	r6, [r5, #4]!
 80063fe:	e7eb      	b.n	80063d8 <__copybits+0x18>
 8006400:	f840 3b04 	str.w	r3, [r0], #4
 8006404:	e7f4      	b.n	80063f0 <__copybits+0x30>

08006406 <__any_on>:
 8006406:	f100 0214 	add.w	r2, r0, #20
 800640a:	6900      	ldr	r0, [r0, #16]
 800640c:	114b      	asrs	r3, r1, #5
 800640e:	4298      	cmp	r0, r3
 8006410:	b510      	push	{r4, lr}
 8006412:	db11      	blt.n	8006438 <__any_on+0x32>
 8006414:	dd0a      	ble.n	800642c <__any_on+0x26>
 8006416:	f011 011f 	ands.w	r1, r1, #31
 800641a:	d007      	beq.n	800642c <__any_on+0x26>
 800641c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006420:	fa24 f001 	lsr.w	r0, r4, r1
 8006424:	fa00 f101 	lsl.w	r1, r0, r1
 8006428:	428c      	cmp	r4, r1
 800642a:	d10b      	bne.n	8006444 <__any_on+0x3e>
 800642c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006430:	4293      	cmp	r3, r2
 8006432:	d803      	bhi.n	800643c <__any_on+0x36>
 8006434:	2000      	movs	r0, #0
 8006436:	bd10      	pop	{r4, pc}
 8006438:	4603      	mov	r3, r0
 800643a:	e7f7      	b.n	800642c <__any_on+0x26>
 800643c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006440:	2900      	cmp	r1, #0
 8006442:	d0f5      	beq.n	8006430 <__any_on+0x2a>
 8006444:	2001      	movs	r0, #1
 8006446:	e7f6      	b.n	8006436 <__any_on+0x30>

08006448 <_calloc_r>:
 8006448:	b538      	push	{r3, r4, r5, lr}
 800644a:	fb02 f501 	mul.w	r5, r2, r1
 800644e:	4629      	mov	r1, r5
 8006450:	f000 f854 	bl	80064fc <_malloc_r>
 8006454:	4604      	mov	r4, r0
 8006456:	b118      	cbz	r0, 8006460 <_calloc_r+0x18>
 8006458:	462a      	mov	r2, r5
 800645a:	2100      	movs	r1, #0
 800645c:	f7fc fde0 	bl	8003020 <memset>
 8006460:	4620      	mov	r0, r4
 8006462:	bd38      	pop	{r3, r4, r5, pc}

08006464 <_free_r>:
 8006464:	b538      	push	{r3, r4, r5, lr}
 8006466:	4605      	mov	r5, r0
 8006468:	2900      	cmp	r1, #0
 800646a:	d043      	beq.n	80064f4 <_free_r+0x90>
 800646c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006470:	1f0c      	subs	r4, r1, #4
 8006472:	2b00      	cmp	r3, #0
 8006474:	bfb8      	it	lt
 8006476:	18e4      	addlt	r4, r4, r3
 8006478:	f000 fe84 	bl	8007184 <__malloc_lock>
 800647c:	4a1e      	ldr	r2, [pc, #120]	; (80064f8 <_free_r+0x94>)
 800647e:	6813      	ldr	r3, [r2, #0]
 8006480:	4610      	mov	r0, r2
 8006482:	b933      	cbnz	r3, 8006492 <_free_r+0x2e>
 8006484:	6063      	str	r3, [r4, #4]
 8006486:	6014      	str	r4, [r2, #0]
 8006488:	4628      	mov	r0, r5
 800648a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800648e:	f000 be7f 	b.w	8007190 <__malloc_unlock>
 8006492:	42a3      	cmp	r3, r4
 8006494:	d90a      	bls.n	80064ac <_free_r+0x48>
 8006496:	6821      	ldr	r1, [r4, #0]
 8006498:	1862      	adds	r2, r4, r1
 800649a:	4293      	cmp	r3, r2
 800649c:	bf01      	itttt	eq
 800649e:	681a      	ldreq	r2, [r3, #0]
 80064a0:	685b      	ldreq	r3, [r3, #4]
 80064a2:	1852      	addeq	r2, r2, r1
 80064a4:	6022      	streq	r2, [r4, #0]
 80064a6:	6063      	str	r3, [r4, #4]
 80064a8:	6004      	str	r4, [r0, #0]
 80064aa:	e7ed      	b.n	8006488 <_free_r+0x24>
 80064ac:	461a      	mov	r2, r3
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	b10b      	cbz	r3, 80064b6 <_free_r+0x52>
 80064b2:	42a3      	cmp	r3, r4
 80064b4:	d9fa      	bls.n	80064ac <_free_r+0x48>
 80064b6:	6811      	ldr	r1, [r2, #0]
 80064b8:	1850      	adds	r0, r2, r1
 80064ba:	42a0      	cmp	r0, r4
 80064bc:	d10b      	bne.n	80064d6 <_free_r+0x72>
 80064be:	6820      	ldr	r0, [r4, #0]
 80064c0:	4401      	add	r1, r0
 80064c2:	1850      	adds	r0, r2, r1
 80064c4:	4283      	cmp	r3, r0
 80064c6:	6011      	str	r1, [r2, #0]
 80064c8:	d1de      	bne.n	8006488 <_free_r+0x24>
 80064ca:	6818      	ldr	r0, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	4401      	add	r1, r0
 80064d0:	6011      	str	r1, [r2, #0]
 80064d2:	6053      	str	r3, [r2, #4]
 80064d4:	e7d8      	b.n	8006488 <_free_r+0x24>
 80064d6:	d902      	bls.n	80064de <_free_r+0x7a>
 80064d8:	230c      	movs	r3, #12
 80064da:	602b      	str	r3, [r5, #0]
 80064dc:	e7d4      	b.n	8006488 <_free_r+0x24>
 80064de:	6820      	ldr	r0, [r4, #0]
 80064e0:	1821      	adds	r1, r4, r0
 80064e2:	428b      	cmp	r3, r1
 80064e4:	bf01      	itttt	eq
 80064e6:	6819      	ldreq	r1, [r3, #0]
 80064e8:	685b      	ldreq	r3, [r3, #4]
 80064ea:	1809      	addeq	r1, r1, r0
 80064ec:	6021      	streq	r1, [r4, #0]
 80064ee:	6063      	str	r3, [r4, #4]
 80064f0:	6054      	str	r4, [r2, #4]
 80064f2:	e7c9      	b.n	8006488 <_free_r+0x24>
 80064f4:	bd38      	pop	{r3, r4, r5, pc}
 80064f6:	bf00      	nop
 80064f8:	20000220 	.word	0x20000220

080064fc <_malloc_r>:
 80064fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fe:	1ccd      	adds	r5, r1, #3
 8006500:	f025 0503 	bic.w	r5, r5, #3
 8006504:	3508      	adds	r5, #8
 8006506:	2d0c      	cmp	r5, #12
 8006508:	bf38      	it	cc
 800650a:	250c      	movcc	r5, #12
 800650c:	2d00      	cmp	r5, #0
 800650e:	4606      	mov	r6, r0
 8006510:	db01      	blt.n	8006516 <_malloc_r+0x1a>
 8006512:	42a9      	cmp	r1, r5
 8006514:	d903      	bls.n	800651e <_malloc_r+0x22>
 8006516:	230c      	movs	r3, #12
 8006518:	6033      	str	r3, [r6, #0]
 800651a:	2000      	movs	r0, #0
 800651c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800651e:	f000 fe31 	bl	8007184 <__malloc_lock>
 8006522:	4921      	ldr	r1, [pc, #132]	; (80065a8 <_malloc_r+0xac>)
 8006524:	680a      	ldr	r2, [r1, #0]
 8006526:	4614      	mov	r4, r2
 8006528:	b99c      	cbnz	r4, 8006552 <_malloc_r+0x56>
 800652a:	4f20      	ldr	r7, [pc, #128]	; (80065ac <_malloc_r+0xb0>)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	b923      	cbnz	r3, 800653a <_malloc_r+0x3e>
 8006530:	4621      	mov	r1, r4
 8006532:	4630      	mov	r0, r6
 8006534:	f000 faf6 	bl	8006b24 <_sbrk_r>
 8006538:	6038      	str	r0, [r7, #0]
 800653a:	4629      	mov	r1, r5
 800653c:	4630      	mov	r0, r6
 800653e:	f000 faf1 	bl	8006b24 <_sbrk_r>
 8006542:	1c43      	adds	r3, r0, #1
 8006544:	d123      	bne.n	800658e <_malloc_r+0x92>
 8006546:	230c      	movs	r3, #12
 8006548:	4630      	mov	r0, r6
 800654a:	6033      	str	r3, [r6, #0]
 800654c:	f000 fe20 	bl	8007190 <__malloc_unlock>
 8006550:	e7e3      	b.n	800651a <_malloc_r+0x1e>
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	1b5b      	subs	r3, r3, r5
 8006556:	d417      	bmi.n	8006588 <_malloc_r+0x8c>
 8006558:	2b0b      	cmp	r3, #11
 800655a:	d903      	bls.n	8006564 <_malloc_r+0x68>
 800655c:	6023      	str	r3, [r4, #0]
 800655e:	441c      	add	r4, r3
 8006560:	6025      	str	r5, [r4, #0]
 8006562:	e004      	b.n	800656e <_malloc_r+0x72>
 8006564:	6863      	ldr	r3, [r4, #4]
 8006566:	42a2      	cmp	r2, r4
 8006568:	bf0c      	ite	eq
 800656a:	600b      	streq	r3, [r1, #0]
 800656c:	6053      	strne	r3, [r2, #4]
 800656e:	4630      	mov	r0, r6
 8006570:	f000 fe0e 	bl	8007190 <__malloc_unlock>
 8006574:	f104 000b 	add.w	r0, r4, #11
 8006578:	1d23      	adds	r3, r4, #4
 800657a:	f020 0007 	bic.w	r0, r0, #7
 800657e:	1ac2      	subs	r2, r0, r3
 8006580:	d0cc      	beq.n	800651c <_malloc_r+0x20>
 8006582:	1a1b      	subs	r3, r3, r0
 8006584:	50a3      	str	r3, [r4, r2]
 8006586:	e7c9      	b.n	800651c <_malloc_r+0x20>
 8006588:	4622      	mov	r2, r4
 800658a:	6864      	ldr	r4, [r4, #4]
 800658c:	e7cc      	b.n	8006528 <_malloc_r+0x2c>
 800658e:	1cc4      	adds	r4, r0, #3
 8006590:	f024 0403 	bic.w	r4, r4, #3
 8006594:	42a0      	cmp	r0, r4
 8006596:	d0e3      	beq.n	8006560 <_malloc_r+0x64>
 8006598:	1a21      	subs	r1, r4, r0
 800659a:	4630      	mov	r0, r6
 800659c:	f000 fac2 	bl	8006b24 <_sbrk_r>
 80065a0:	3001      	adds	r0, #1
 80065a2:	d1dd      	bne.n	8006560 <_malloc_r+0x64>
 80065a4:	e7cf      	b.n	8006546 <_malloc_r+0x4a>
 80065a6:	bf00      	nop
 80065a8:	20000220 	.word	0x20000220
 80065ac:	20000224 	.word	0x20000224

080065b0 <__ssputs_r>:
 80065b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065b4:	688e      	ldr	r6, [r1, #8]
 80065b6:	4682      	mov	sl, r0
 80065b8:	429e      	cmp	r6, r3
 80065ba:	460c      	mov	r4, r1
 80065bc:	4690      	mov	r8, r2
 80065be:	461f      	mov	r7, r3
 80065c0:	d838      	bhi.n	8006634 <__ssputs_r+0x84>
 80065c2:	898a      	ldrh	r2, [r1, #12]
 80065c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065c8:	d032      	beq.n	8006630 <__ssputs_r+0x80>
 80065ca:	6825      	ldr	r5, [r4, #0]
 80065cc:	6909      	ldr	r1, [r1, #16]
 80065ce:	3301      	adds	r3, #1
 80065d0:	eba5 0901 	sub.w	r9, r5, r1
 80065d4:	6965      	ldr	r5, [r4, #20]
 80065d6:	444b      	add	r3, r9
 80065d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065e0:	106d      	asrs	r5, r5, #1
 80065e2:	429d      	cmp	r5, r3
 80065e4:	bf38      	it	cc
 80065e6:	461d      	movcc	r5, r3
 80065e8:	0553      	lsls	r3, r2, #21
 80065ea:	d531      	bpl.n	8006650 <__ssputs_r+0xa0>
 80065ec:	4629      	mov	r1, r5
 80065ee:	f7ff ff85 	bl	80064fc <_malloc_r>
 80065f2:	4606      	mov	r6, r0
 80065f4:	b950      	cbnz	r0, 800660c <__ssputs_r+0x5c>
 80065f6:	230c      	movs	r3, #12
 80065f8:	f04f 30ff 	mov.w	r0, #4294967295
 80065fc:	f8ca 3000 	str.w	r3, [sl]
 8006600:	89a3      	ldrh	r3, [r4, #12]
 8006602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006606:	81a3      	strh	r3, [r4, #12]
 8006608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800660c:	464a      	mov	r2, r9
 800660e:	6921      	ldr	r1, [r4, #16]
 8006610:	f7ff fa54 	bl	8005abc <memcpy>
 8006614:	89a3      	ldrh	r3, [r4, #12]
 8006616:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800661a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800661e:	81a3      	strh	r3, [r4, #12]
 8006620:	6126      	str	r6, [r4, #16]
 8006622:	444e      	add	r6, r9
 8006624:	6026      	str	r6, [r4, #0]
 8006626:	463e      	mov	r6, r7
 8006628:	6165      	str	r5, [r4, #20]
 800662a:	eba5 0509 	sub.w	r5, r5, r9
 800662e:	60a5      	str	r5, [r4, #8]
 8006630:	42be      	cmp	r6, r7
 8006632:	d900      	bls.n	8006636 <__ssputs_r+0x86>
 8006634:	463e      	mov	r6, r7
 8006636:	4632      	mov	r2, r6
 8006638:	4641      	mov	r1, r8
 800663a:	6820      	ldr	r0, [r4, #0]
 800663c:	f000 fd88 	bl	8007150 <memmove>
 8006640:	68a3      	ldr	r3, [r4, #8]
 8006642:	6822      	ldr	r2, [r4, #0]
 8006644:	1b9b      	subs	r3, r3, r6
 8006646:	4432      	add	r2, r6
 8006648:	2000      	movs	r0, #0
 800664a:	60a3      	str	r3, [r4, #8]
 800664c:	6022      	str	r2, [r4, #0]
 800664e:	e7db      	b.n	8006608 <__ssputs_r+0x58>
 8006650:	462a      	mov	r2, r5
 8006652:	f000 fda3 	bl	800719c <_realloc_r>
 8006656:	4606      	mov	r6, r0
 8006658:	2800      	cmp	r0, #0
 800665a:	d1e1      	bne.n	8006620 <__ssputs_r+0x70>
 800665c:	4650      	mov	r0, sl
 800665e:	6921      	ldr	r1, [r4, #16]
 8006660:	f7ff ff00 	bl	8006464 <_free_r>
 8006664:	e7c7      	b.n	80065f6 <__ssputs_r+0x46>
	...

08006668 <_svfiprintf_r>:
 8006668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800666c:	4698      	mov	r8, r3
 800666e:	898b      	ldrh	r3, [r1, #12]
 8006670:	4607      	mov	r7, r0
 8006672:	061b      	lsls	r3, r3, #24
 8006674:	460d      	mov	r5, r1
 8006676:	4614      	mov	r4, r2
 8006678:	b09d      	sub	sp, #116	; 0x74
 800667a:	d50e      	bpl.n	800669a <_svfiprintf_r+0x32>
 800667c:	690b      	ldr	r3, [r1, #16]
 800667e:	b963      	cbnz	r3, 800669a <_svfiprintf_r+0x32>
 8006680:	2140      	movs	r1, #64	; 0x40
 8006682:	f7ff ff3b 	bl	80064fc <_malloc_r>
 8006686:	6028      	str	r0, [r5, #0]
 8006688:	6128      	str	r0, [r5, #16]
 800668a:	b920      	cbnz	r0, 8006696 <_svfiprintf_r+0x2e>
 800668c:	230c      	movs	r3, #12
 800668e:	603b      	str	r3, [r7, #0]
 8006690:	f04f 30ff 	mov.w	r0, #4294967295
 8006694:	e0d1      	b.n	800683a <_svfiprintf_r+0x1d2>
 8006696:	2340      	movs	r3, #64	; 0x40
 8006698:	616b      	str	r3, [r5, #20]
 800669a:	2300      	movs	r3, #0
 800669c:	9309      	str	r3, [sp, #36]	; 0x24
 800669e:	2320      	movs	r3, #32
 80066a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066a4:	2330      	movs	r3, #48	; 0x30
 80066a6:	f04f 0901 	mov.w	r9, #1
 80066aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80066ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006854 <_svfiprintf_r+0x1ec>
 80066b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066b6:	4623      	mov	r3, r4
 80066b8:	469a      	mov	sl, r3
 80066ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066be:	b10a      	cbz	r2, 80066c4 <_svfiprintf_r+0x5c>
 80066c0:	2a25      	cmp	r2, #37	; 0x25
 80066c2:	d1f9      	bne.n	80066b8 <_svfiprintf_r+0x50>
 80066c4:	ebba 0b04 	subs.w	fp, sl, r4
 80066c8:	d00b      	beq.n	80066e2 <_svfiprintf_r+0x7a>
 80066ca:	465b      	mov	r3, fp
 80066cc:	4622      	mov	r2, r4
 80066ce:	4629      	mov	r1, r5
 80066d0:	4638      	mov	r0, r7
 80066d2:	f7ff ff6d 	bl	80065b0 <__ssputs_r>
 80066d6:	3001      	adds	r0, #1
 80066d8:	f000 80aa 	beq.w	8006830 <_svfiprintf_r+0x1c8>
 80066dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066de:	445a      	add	r2, fp
 80066e0:	9209      	str	r2, [sp, #36]	; 0x24
 80066e2:	f89a 3000 	ldrb.w	r3, [sl]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 80a2 	beq.w	8006830 <_svfiprintf_r+0x1c8>
 80066ec:	2300      	movs	r3, #0
 80066ee:	f04f 32ff 	mov.w	r2, #4294967295
 80066f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066f6:	f10a 0a01 	add.w	sl, sl, #1
 80066fa:	9304      	str	r3, [sp, #16]
 80066fc:	9307      	str	r3, [sp, #28]
 80066fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006702:	931a      	str	r3, [sp, #104]	; 0x68
 8006704:	4654      	mov	r4, sl
 8006706:	2205      	movs	r2, #5
 8006708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800670c:	4851      	ldr	r0, [pc, #324]	; (8006854 <_svfiprintf_r+0x1ec>)
 800670e:	f7ff f9c7 	bl	8005aa0 <memchr>
 8006712:	9a04      	ldr	r2, [sp, #16]
 8006714:	b9d8      	cbnz	r0, 800674e <_svfiprintf_r+0xe6>
 8006716:	06d0      	lsls	r0, r2, #27
 8006718:	bf44      	itt	mi
 800671a:	2320      	movmi	r3, #32
 800671c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006720:	0711      	lsls	r1, r2, #28
 8006722:	bf44      	itt	mi
 8006724:	232b      	movmi	r3, #43	; 0x2b
 8006726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800672a:	f89a 3000 	ldrb.w	r3, [sl]
 800672e:	2b2a      	cmp	r3, #42	; 0x2a
 8006730:	d015      	beq.n	800675e <_svfiprintf_r+0xf6>
 8006732:	4654      	mov	r4, sl
 8006734:	2000      	movs	r0, #0
 8006736:	f04f 0c0a 	mov.w	ip, #10
 800673a:	9a07      	ldr	r2, [sp, #28]
 800673c:	4621      	mov	r1, r4
 800673e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006742:	3b30      	subs	r3, #48	; 0x30
 8006744:	2b09      	cmp	r3, #9
 8006746:	d94e      	bls.n	80067e6 <_svfiprintf_r+0x17e>
 8006748:	b1b0      	cbz	r0, 8006778 <_svfiprintf_r+0x110>
 800674a:	9207      	str	r2, [sp, #28]
 800674c:	e014      	b.n	8006778 <_svfiprintf_r+0x110>
 800674e:	eba0 0308 	sub.w	r3, r0, r8
 8006752:	fa09 f303 	lsl.w	r3, r9, r3
 8006756:	4313      	orrs	r3, r2
 8006758:	46a2      	mov	sl, r4
 800675a:	9304      	str	r3, [sp, #16]
 800675c:	e7d2      	b.n	8006704 <_svfiprintf_r+0x9c>
 800675e:	9b03      	ldr	r3, [sp, #12]
 8006760:	1d19      	adds	r1, r3, #4
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	9103      	str	r1, [sp, #12]
 8006766:	2b00      	cmp	r3, #0
 8006768:	bfbb      	ittet	lt
 800676a:	425b      	neglt	r3, r3
 800676c:	f042 0202 	orrlt.w	r2, r2, #2
 8006770:	9307      	strge	r3, [sp, #28]
 8006772:	9307      	strlt	r3, [sp, #28]
 8006774:	bfb8      	it	lt
 8006776:	9204      	strlt	r2, [sp, #16]
 8006778:	7823      	ldrb	r3, [r4, #0]
 800677a:	2b2e      	cmp	r3, #46	; 0x2e
 800677c:	d10c      	bne.n	8006798 <_svfiprintf_r+0x130>
 800677e:	7863      	ldrb	r3, [r4, #1]
 8006780:	2b2a      	cmp	r3, #42	; 0x2a
 8006782:	d135      	bne.n	80067f0 <_svfiprintf_r+0x188>
 8006784:	9b03      	ldr	r3, [sp, #12]
 8006786:	3402      	adds	r4, #2
 8006788:	1d1a      	adds	r2, r3, #4
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	9203      	str	r2, [sp, #12]
 800678e:	2b00      	cmp	r3, #0
 8006790:	bfb8      	it	lt
 8006792:	f04f 33ff 	movlt.w	r3, #4294967295
 8006796:	9305      	str	r3, [sp, #20]
 8006798:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006864 <_svfiprintf_r+0x1fc>
 800679c:	2203      	movs	r2, #3
 800679e:	4650      	mov	r0, sl
 80067a0:	7821      	ldrb	r1, [r4, #0]
 80067a2:	f7ff f97d 	bl	8005aa0 <memchr>
 80067a6:	b140      	cbz	r0, 80067ba <_svfiprintf_r+0x152>
 80067a8:	2340      	movs	r3, #64	; 0x40
 80067aa:	eba0 000a 	sub.w	r0, r0, sl
 80067ae:	fa03 f000 	lsl.w	r0, r3, r0
 80067b2:	9b04      	ldr	r3, [sp, #16]
 80067b4:	3401      	adds	r4, #1
 80067b6:	4303      	orrs	r3, r0
 80067b8:	9304      	str	r3, [sp, #16]
 80067ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067be:	2206      	movs	r2, #6
 80067c0:	4825      	ldr	r0, [pc, #148]	; (8006858 <_svfiprintf_r+0x1f0>)
 80067c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067c6:	f7ff f96b 	bl	8005aa0 <memchr>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	d038      	beq.n	8006840 <_svfiprintf_r+0x1d8>
 80067ce:	4b23      	ldr	r3, [pc, #140]	; (800685c <_svfiprintf_r+0x1f4>)
 80067d0:	bb1b      	cbnz	r3, 800681a <_svfiprintf_r+0x1b2>
 80067d2:	9b03      	ldr	r3, [sp, #12]
 80067d4:	3307      	adds	r3, #7
 80067d6:	f023 0307 	bic.w	r3, r3, #7
 80067da:	3308      	adds	r3, #8
 80067dc:	9303      	str	r3, [sp, #12]
 80067de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e0:	4433      	add	r3, r6
 80067e2:	9309      	str	r3, [sp, #36]	; 0x24
 80067e4:	e767      	b.n	80066b6 <_svfiprintf_r+0x4e>
 80067e6:	460c      	mov	r4, r1
 80067e8:	2001      	movs	r0, #1
 80067ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80067ee:	e7a5      	b.n	800673c <_svfiprintf_r+0xd4>
 80067f0:	2300      	movs	r3, #0
 80067f2:	f04f 0c0a 	mov.w	ip, #10
 80067f6:	4619      	mov	r1, r3
 80067f8:	3401      	adds	r4, #1
 80067fa:	9305      	str	r3, [sp, #20]
 80067fc:	4620      	mov	r0, r4
 80067fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006802:	3a30      	subs	r2, #48	; 0x30
 8006804:	2a09      	cmp	r2, #9
 8006806:	d903      	bls.n	8006810 <_svfiprintf_r+0x1a8>
 8006808:	2b00      	cmp	r3, #0
 800680a:	d0c5      	beq.n	8006798 <_svfiprintf_r+0x130>
 800680c:	9105      	str	r1, [sp, #20]
 800680e:	e7c3      	b.n	8006798 <_svfiprintf_r+0x130>
 8006810:	4604      	mov	r4, r0
 8006812:	2301      	movs	r3, #1
 8006814:	fb0c 2101 	mla	r1, ip, r1, r2
 8006818:	e7f0      	b.n	80067fc <_svfiprintf_r+0x194>
 800681a:	ab03      	add	r3, sp, #12
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	462a      	mov	r2, r5
 8006820:	4638      	mov	r0, r7
 8006822:	4b0f      	ldr	r3, [pc, #60]	; (8006860 <_svfiprintf_r+0x1f8>)
 8006824:	a904      	add	r1, sp, #16
 8006826:	f7fc fca1 	bl	800316c <_printf_float>
 800682a:	1c42      	adds	r2, r0, #1
 800682c:	4606      	mov	r6, r0
 800682e:	d1d6      	bne.n	80067de <_svfiprintf_r+0x176>
 8006830:	89ab      	ldrh	r3, [r5, #12]
 8006832:	065b      	lsls	r3, r3, #25
 8006834:	f53f af2c 	bmi.w	8006690 <_svfiprintf_r+0x28>
 8006838:	9809      	ldr	r0, [sp, #36]	; 0x24
 800683a:	b01d      	add	sp, #116	; 0x74
 800683c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006840:	ab03      	add	r3, sp, #12
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	462a      	mov	r2, r5
 8006846:	4638      	mov	r0, r7
 8006848:	4b05      	ldr	r3, [pc, #20]	; (8006860 <_svfiprintf_r+0x1f8>)
 800684a:	a904      	add	r1, sp, #16
 800684c:	f7fc ff2a 	bl	80036a4 <_printf_i>
 8006850:	e7eb      	b.n	800682a <_svfiprintf_r+0x1c2>
 8006852:	bf00      	nop
 8006854:	080078fc 	.word	0x080078fc
 8006858:	08007906 	.word	0x08007906
 800685c:	0800316d 	.word	0x0800316d
 8006860:	080065b1 	.word	0x080065b1
 8006864:	08007902 	.word	0x08007902

08006868 <__sfputc_r>:
 8006868:	6893      	ldr	r3, [r2, #8]
 800686a:	b410      	push	{r4}
 800686c:	3b01      	subs	r3, #1
 800686e:	2b00      	cmp	r3, #0
 8006870:	6093      	str	r3, [r2, #8]
 8006872:	da07      	bge.n	8006884 <__sfputc_r+0x1c>
 8006874:	6994      	ldr	r4, [r2, #24]
 8006876:	42a3      	cmp	r3, r4
 8006878:	db01      	blt.n	800687e <__sfputc_r+0x16>
 800687a:	290a      	cmp	r1, #10
 800687c:	d102      	bne.n	8006884 <__sfputc_r+0x1c>
 800687e:	bc10      	pop	{r4}
 8006880:	f000 b972 	b.w	8006b68 <__swbuf_r>
 8006884:	6813      	ldr	r3, [r2, #0]
 8006886:	1c58      	adds	r0, r3, #1
 8006888:	6010      	str	r0, [r2, #0]
 800688a:	7019      	strb	r1, [r3, #0]
 800688c:	4608      	mov	r0, r1
 800688e:	bc10      	pop	{r4}
 8006890:	4770      	bx	lr

08006892 <__sfputs_r>:
 8006892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006894:	4606      	mov	r6, r0
 8006896:	460f      	mov	r7, r1
 8006898:	4614      	mov	r4, r2
 800689a:	18d5      	adds	r5, r2, r3
 800689c:	42ac      	cmp	r4, r5
 800689e:	d101      	bne.n	80068a4 <__sfputs_r+0x12>
 80068a0:	2000      	movs	r0, #0
 80068a2:	e007      	b.n	80068b4 <__sfputs_r+0x22>
 80068a4:	463a      	mov	r2, r7
 80068a6:	4630      	mov	r0, r6
 80068a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068ac:	f7ff ffdc 	bl	8006868 <__sfputc_r>
 80068b0:	1c43      	adds	r3, r0, #1
 80068b2:	d1f3      	bne.n	800689c <__sfputs_r+0xa>
 80068b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068b8 <_vfiprintf_r>:
 80068b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068bc:	460d      	mov	r5, r1
 80068be:	4614      	mov	r4, r2
 80068c0:	4698      	mov	r8, r3
 80068c2:	4606      	mov	r6, r0
 80068c4:	b09d      	sub	sp, #116	; 0x74
 80068c6:	b118      	cbz	r0, 80068d0 <_vfiprintf_r+0x18>
 80068c8:	6983      	ldr	r3, [r0, #24]
 80068ca:	b90b      	cbnz	r3, 80068d0 <_vfiprintf_r+0x18>
 80068cc:	f000 fb3c 	bl	8006f48 <__sinit>
 80068d0:	4b89      	ldr	r3, [pc, #548]	; (8006af8 <_vfiprintf_r+0x240>)
 80068d2:	429d      	cmp	r5, r3
 80068d4:	d11b      	bne.n	800690e <_vfiprintf_r+0x56>
 80068d6:	6875      	ldr	r5, [r6, #4]
 80068d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068da:	07d9      	lsls	r1, r3, #31
 80068dc:	d405      	bmi.n	80068ea <_vfiprintf_r+0x32>
 80068de:	89ab      	ldrh	r3, [r5, #12]
 80068e0:	059a      	lsls	r2, r3, #22
 80068e2:	d402      	bmi.n	80068ea <_vfiprintf_r+0x32>
 80068e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068e6:	f000 fbcd 	bl	8007084 <__retarget_lock_acquire_recursive>
 80068ea:	89ab      	ldrh	r3, [r5, #12]
 80068ec:	071b      	lsls	r3, r3, #28
 80068ee:	d501      	bpl.n	80068f4 <_vfiprintf_r+0x3c>
 80068f0:	692b      	ldr	r3, [r5, #16]
 80068f2:	b9eb      	cbnz	r3, 8006930 <_vfiprintf_r+0x78>
 80068f4:	4629      	mov	r1, r5
 80068f6:	4630      	mov	r0, r6
 80068f8:	f000 f996 	bl	8006c28 <__swsetup_r>
 80068fc:	b1c0      	cbz	r0, 8006930 <_vfiprintf_r+0x78>
 80068fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006900:	07dc      	lsls	r4, r3, #31
 8006902:	d50e      	bpl.n	8006922 <_vfiprintf_r+0x6a>
 8006904:	f04f 30ff 	mov.w	r0, #4294967295
 8006908:	b01d      	add	sp, #116	; 0x74
 800690a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800690e:	4b7b      	ldr	r3, [pc, #492]	; (8006afc <_vfiprintf_r+0x244>)
 8006910:	429d      	cmp	r5, r3
 8006912:	d101      	bne.n	8006918 <_vfiprintf_r+0x60>
 8006914:	68b5      	ldr	r5, [r6, #8]
 8006916:	e7df      	b.n	80068d8 <_vfiprintf_r+0x20>
 8006918:	4b79      	ldr	r3, [pc, #484]	; (8006b00 <_vfiprintf_r+0x248>)
 800691a:	429d      	cmp	r5, r3
 800691c:	bf08      	it	eq
 800691e:	68f5      	ldreq	r5, [r6, #12]
 8006920:	e7da      	b.n	80068d8 <_vfiprintf_r+0x20>
 8006922:	89ab      	ldrh	r3, [r5, #12]
 8006924:	0598      	lsls	r0, r3, #22
 8006926:	d4ed      	bmi.n	8006904 <_vfiprintf_r+0x4c>
 8006928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800692a:	f000 fbac 	bl	8007086 <__retarget_lock_release_recursive>
 800692e:	e7e9      	b.n	8006904 <_vfiprintf_r+0x4c>
 8006930:	2300      	movs	r3, #0
 8006932:	9309      	str	r3, [sp, #36]	; 0x24
 8006934:	2320      	movs	r3, #32
 8006936:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800693a:	2330      	movs	r3, #48	; 0x30
 800693c:	f04f 0901 	mov.w	r9, #1
 8006940:	f8cd 800c 	str.w	r8, [sp, #12]
 8006944:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006b04 <_vfiprintf_r+0x24c>
 8006948:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800694c:	4623      	mov	r3, r4
 800694e:	469a      	mov	sl, r3
 8006950:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006954:	b10a      	cbz	r2, 800695a <_vfiprintf_r+0xa2>
 8006956:	2a25      	cmp	r2, #37	; 0x25
 8006958:	d1f9      	bne.n	800694e <_vfiprintf_r+0x96>
 800695a:	ebba 0b04 	subs.w	fp, sl, r4
 800695e:	d00b      	beq.n	8006978 <_vfiprintf_r+0xc0>
 8006960:	465b      	mov	r3, fp
 8006962:	4622      	mov	r2, r4
 8006964:	4629      	mov	r1, r5
 8006966:	4630      	mov	r0, r6
 8006968:	f7ff ff93 	bl	8006892 <__sfputs_r>
 800696c:	3001      	adds	r0, #1
 800696e:	f000 80aa 	beq.w	8006ac6 <_vfiprintf_r+0x20e>
 8006972:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006974:	445a      	add	r2, fp
 8006976:	9209      	str	r2, [sp, #36]	; 0x24
 8006978:	f89a 3000 	ldrb.w	r3, [sl]
 800697c:	2b00      	cmp	r3, #0
 800697e:	f000 80a2 	beq.w	8006ac6 <_vfiprintf_r+0x20e>
 8006982:	2300      	movs	r3, #0
 8006984:	f04f 32ff 	mov.w	r2, #4294967295
 8006988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800698c:	f10a 0a01 	add.w	sl, sl, #1
 8006990:	9304      	str	r3, [sp, #16]
 8006992:	9307      	str	r3, [sp, #28]
 8006994:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006998:	931a      	str	r3, [sp, #104]	; 0x68
 800699a:	4654      	mov	r4, sl
 800699c:	2205      	movs	r2, #5
 800699e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069a2:	4858      	ldr	r0, [pc, #352]	; (8006b04 <_vfiprintf_r+0x24c>)
 80069a4:	f7ff f87c 	bl	8005aa0 <memchr>
 80069a8:	9a04      	ldr	r2, [sp, #16]
 80069aa:	b9d8      	cbnz	r0, 80069e4 <_vfiprintf_r+0x12c>
 80069ac:	06d1      	lsls	r1, r2, #27
 80069ae:	bf44      	itt	mi
 80069b0:	2320      	movmi	r3, #32
 80069b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069b6:	0713      	lsls	r3, r2, #28
 80069b8:	bf44      	itt	mi
 80069ba:	232b      	movmi	r3, #43	; 0x2b
 80069bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069c0:	f89a 3000 	ldrb.w	r3, [sl]
 80069c4:	2b2a      	cmp	r3, #42	; 0x2a
 80069c6:	d015      	beq.n	80069f4 <_vfiprintf_r+0x13c>
 80069c8:	4654      	mov	r4, sl
 80069ca:	2000      	movs	r0, #0
 80069cc:	f04f 0c0a 	mov.w	ip, #10
 80069d0:	9a07      	ldr	r2, [sp, #28]
 80069d2:	4621      	mov	r1, r4
 80069d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069d8:	3b30      	subs	r3, #48	; 0x30
 80069da:	2b09      	cmp	r3, #9
 80069dc:	d94e      	bls.n	8006a7c <_vfiprintf_r+0x1c4>
 80069de:	b1b0      	cbz	r0, 8006a0e <_vfiprintf_r+0x156>
 80069e0:	9207      	str	r2, [sp, #28]
 80069e2:	e014      	b.n	8006a0e <_vfiprintf_r+0x156>
 80069e4:	eba0 0308 	sub.w	r3, r0, r8
 80069e8:	fa09 f303 	lsl.w	r3, r9, r3
 80069ec:	4313      	orrs	r3, r2
 80069ee:	46a2      	mov	sl, r4
 80069f0:	9304      	str	r3, [sp, #16]
 80069f2:	e7d2      	b.n	800699a <_vfiprintf_r+0xe2>
 80069f4:	9b03      	ldr	r3, [sp, #12]
 80069f6:	1d19      	adds	r1, r3, #4
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	9103      	str	r1, [sp, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	bfbb      	ittet	lt
 8006a00:	425b      	neglt	r3, r3
 8006a02:	f042 0202 	orrlt.w	r2, r2, #2
 8006a06:	9307      	strge	r3, [sp, #28]
 8006a08:	9307      	strlt	r3, [sp, #28]
 8006a0a:	bfb8      	it	lt
 8006a0c:	9204      	strlt	r2, [sp, #16]
 8006a0e:	7823      	ldrb	r3, [r4, #0]
 8006a10:	2b2e      	cmp	r3, #46	; 0x2e
 8006a12:	d10c      	bne.n	8006a2e <_vfiprintf_r+0x176>
 8006a14:	7863      	ldrb	r3, [r4, #1]
 8006a16:	2b2a      	cmp	r3, #42	; 0x2a
 8006a18:	d135      	bne.n	8006a86 <_vfiprintf_r+0x1ce>
 8006a1a:	9b03      	ldr	r3, [sp, #12]
 8006a1c:	3402      	adds	r4, #2
 8006a1e:	1d1a      	adds	r2, r3, #4
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	9203      	str	r2, [sp, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	bfb8      	it	lt
 8006a28:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a2c:	9305      	str	r3, [sp, #20]
 8006a2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006b14 <_vfiprintf_r+0x25c>
 8006a32:	2203      	movs	r2, #3
 8006a34:	4650      	mov	r0, sl
 8006a36:	7821      	ldrb	r1, [r4, #0]
 8006a38:	f7ff f832 	bl	8005aa0 <memchr>
 8006a3c:	b140      	cbz	r0, 8006a50 <_vfiprintf_r+0x198>
 8006a3e:	2340      	movs	r3, #64	; 0x40
 8006a40:	eba0 000a 	sub.w	r0, r0, sl
 8006a44:	fa03 f000 	lsl.w	r0, r3, r0
 8006a48:	9b04      	ldr	r3, [sp, #16]
 8006a4a:	3401      	adds	r4, #1
 8006a4c:	4303      	orrs	r3, r0
 8006a4e:	9304      	str	r3, [sp, #16]
 8006a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a54:	2206      	movs	r2, #6
 8006a56:	482c      	ldr	r0, [pc, #176]	; (8006b08 <_vfiprintf_r+0x250>)
 8006a58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a5c:	f7ff f820 	bl	8005aa0 <memchr>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	d03f      	beq.n	8006ae4 <_vfiprintf_r+0x22c>
 8006a64:	4b29      	ldr	r3, [pc, #164]	; (8006b0c <_vfiprintf_r+0x254>)
 8006a66:	bb1b      	cbnz	r3, 8006ab0 <_vfiprintf_r+0x1f8>
 8006a68:	9b03      	ldr	r3, [sp, #12]
 8006a6a:	3307      	adds	r3, #7
 8006a6c:	f023 0307 	bic.w	r3, r3, #7
 8006a70:	3308      	adds	r3, #8
 8006a72:	9303      	str	r3, [sp, #12]
 8006a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a76:	443b      	add	r3, r7
 8006a78:	9309      	str	r3, [sp, #36]	; 0x24
 8006a7a:	e767      	b.n	800694c <_vfiprintf_r+0x94>
 8006a7c:	460c      	mov	r4, r1
 8006a7e:	2001      	movs	r0, #1
 8006a80:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a84:	e7a5      	b.n	80069d2 <_vfiprintf_r+0x11a>
 8006a86:	2300      	movs	r3, #0
 8006a88:	f04f 0c0a 	mov.w	ip, #10
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	3401      	adds	r4, #1
 8006a90:	9305      	str	r3, [sp, #20]
 8006a92:	4620      	mov	r0, r4
 8006a94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a98:	3a30      	subs	r2, #48	; 0x30
 8006a9a:	2a09      	cmp	r2, #9
 8006a9c:	d903      	bls.n	8006aa6 <_vfiprintf_r+0x1ee>
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0c5      	beq.n	8006a2e <_vfiprintf_r+0x176>
 8006aa2:	9105      	str	r1, [sp, #20]
 8006aa4:	e7c3      	b.n	8006a2e <_vfiprintf_r+0x176>
 8006aa6:	4604      	mov	r4, r0
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	fb0c 2101 	mla	r1, ip, r1, r2
 8006aae:	e7f0      	b.n	8006a92 <_vfiprintf_r+0x1da>
 8006ab0:	ab03      	add	r3, sp, #12
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	462a      	mov	r2, r5
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	4b15      	ldr	r3, [pc, #84]	; (8006b10 <_vfiprintf_r+0x258>)
 8006aba:	a904      	add	r1, sp, #16
 8006abc:	f7fc fb56 	bl	800316c <_printf_float>
 8006ac0:	4607      	mov	r7, r0
 8006ac2:	1c78      	adds	r0, r7, #1
 8006ac4:	d1d6      	bne.n	8006a74 <_vfiprintf_r+0x1bc>
 8006ac6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ac8:	07d9      	lsls	r1, r3, #31
 8006aca:	d405      	bmi.n	8006ad8 <_vfiprintf_r+0x220>
 8006acc:	89ab      	ldrh	r3, [r5, #12]
 8006ace:	059a      	lsls	r2, r3, #22
 8006ad0:	d402      	bmi.n	8006ad8 <_vfiprintf_r+0x220>
 8006ad2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ad4:	f000 fad7 	bl	8007086 <__retarget_lock_release_recursive>
 8006ad8:	89ab      	ldrh	r3, [r5, #12]
 8006ada:	065b      	lsls	r3, r3, #25
 8006adc:	f53f af12 	bmi.w	8006904 <_vfiprintf_r+0x4c>
 8006ae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ae2:	e711      	b.n	8006908 <_vfiprintf_r+0x50>
 8006ae4:	ab03      	add	r3, sp, #12
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	462a      	mov	r2, r5
 8006aea:	4630      	mov	r0, r6
 8006aec:	4b08      	ldr	r3, [pc, #32]	; (8006b10 <_vfiprintf_r+0x258>)
 8006aee:	a904      	add	r1, sp, #16
 8006af0:	f7fc fdd8 	bl	80036a4 <_printf_i>
 8006af4:	e7e4      	b.n	8006ac0 <_vfiprintf_r+0x208>
 8006af6:	bf00      	nop
 8006af8:	08007a30 	.word	0x08007a30
 8006afc:	08007a50 	.word	0x08007a50
 8006b00:	08007a10 	.word	0x08007a10
 8006b04:	080078fc 	.word	0x080078fc
 8006b08:	08007906 	.word	0x08007906
 8006b0c:	0800316d 	.word	0x0800316d
 8006b10:	08006893 	.word	0x08006893
 8006b14:	08007902 	.word	0x08007902

08006b18 <nan>:
 8006b18:	2000      	movs	r0, #0
 8006b1a:	4901      	ldr	r1, [pc, #4]	; (8006b20 <nan+0x8>)
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	7ff80000 	.word	0x7ff80000

08006b24 <_sbrk_r>:
 8006b24:	b538      	push	{r3, r4, r5, lr}
 8006b26:	2300      	movs	r3, #0
 8006b28:	4d05      	ldr	r5, [pc, #20]	; (8006b40 <_sbrk_r+0x1c>)
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	4608      	mov	r0, r1
 8006b2e:	602b      	str	r3, [r5, #0]
 8006b30:	f7fa fc38 	bl	80013a4 <_sbrk>
 8006b34:	1c43      	adds	r3, r0, #1
 8006b36:	d102      	bne.n	8006b3e <_sbrk_r+0x1a>
 8006b38:	682b      	ldr	r3, [r5, #0]
 8006b3a:	b103      	cbz	r3, 8006b3e <_sbrk_r+0x1a>
 8006b3c:	6023      	str	r3, [r4, #0]
 8006b3e:	bd38      	pop	{r3, r4, r5, pc}
 8006b40:	200002e4 	.word	0x200002e4

08006b44 <strncmp>:
 8006b44:	b510      	push	{r4, lr}
 8006b46:	b16a      	cbz	r2, 8006b64 <strncmp+0x20>
 8006b48:	3901      	subs	r1, #1
 8006b4a:	1884      	adds	r4, r0, r2
 8006b4c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006b50:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d103      	bne.n	8006b60 <strncmp+0x1c>
 8006b58:	42a0      	cmp	r0, r4
 8006b5a:	d001      	beq.n	8006b60 <strncmp+0x1c>
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1f5      	bne.n	8006b4c <strncmp+0x8>
 8006b60:	1a98      	subs	r0, r3, r2
 8006b62:	bd10      	pop	{r4, pc}
 8006b64:	4610      	mov	r0, r2
 8006b66:	e7fc      	b.n	8006b62 <strncmp+0x1e>

08006b68 <__swbuf_r>:
 8006b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6a:	460e      	mov	r6, r1
 8006b6c:	4614      	mov	r4, r2
 8006b6e:	4605      	mov	r5, r0
 8006b70:	b118      	cbz	r0, 8006b7a <__swbuf_r+0x12>
 8006b72:	6983      	ldr	r3, [r0, #24]
 8006b74:	b90b      	cbnz	r3, 8006b7a <__swbuf_r+0x12>
 8006b76:	f000 f9e7 	bl	8006f48 <__sinit>
 8006b7a:	4b21      	ldr	r3, [pc, #132]	; (8006c00 <__swbuf_r+0x98>)
 8006b7c:	429c      	cmp	r4, r3
 8006b7e:	d12b      	bne.n	8006bd8 <__swbuf_r+0x70>
 8006b80:	686c      	ldr	r4, [r5, #4]
 8006b82:	69a3      	ldr	r3, [r4, #24]
 8006b84:	60a3      	str	r3, [r4, #8]
 8006b86:	89a3      	ldrh	r3, [r4, #12]
 8006b88:	071a      	lsls	r2, r3, #28
 8006b8a:	d52f      	bpl.n	8006bec <__swbuf_r+0x84>
 8006b8c:	6923      	ldr	r3, [r4, #16]
 8006b8e:	b36b      	cbz	r3, 8006bec <__swbuf_r+0x84>
 8006b90:	6923      	ldr	r3, [r4, #16]
 8006b92:	6820      	ldr	r0, [r4, #0]
 8006b94:	b2f6      	uxtb	r6, r6
 8006b96:	1ac0      	subs	r0, r0, r3
 8006b98:	6963      	ldr	r3, [r4, #20]
 8006b9a:	4637      	mov	r7, r6
 8006b9c:	4283      	cmp	r3, r0
 8006b9e:	dc04      	bgt.n	8006baa <__swbuf_r+0x42>
 8006ba0:	4621      	mov	r1, r4
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	f000 f93c 	bl	8006e20 <_fflush_r>
 8006ba8:	bb30      	cbnz	r0, 8006bf8 <__swbuf_r+0x90>
 8006baa:	68a3      	ldr	r3, [r4, #8]
 8006bac:	3001      	adds	r0, #1
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	60a3      	str	r3, [r4, #8]
 8006bb2:	6823      	ldr	r3, [r4, #0]
 8006bb4:	1c5a      	adds	r2, r3, #1
 8006bb6:	6022      	str	r2, [r4, #0]
 8006bb8:	701e      	strb	r6, [r3, #0]
 8006bba:	6963      	ldr	r3, [r4, #20]
 8006bbc:	4283      	cmp	r3, r0
 8006bbe:	d004      	beq.n	8006bca <__swbuf_r+0x62>
 8006bc0:	89a3      	ldrh	r3, [r4, #12]
 8006bc2:	07db      	lsls	r3, r3, #31
 8006bc4:	d506      	bpl.n	8006bd4 <__swbuf_r+0x6c>
 8006bc6:	2e0a      	cmp	r6, #10
 8006bc8:	d104      	bne.n	8006bd4 <__swbuf_r+0x6c>
 8006bca:	4621      	mov	r1, r4
 8006bcc:	4628      	mov	r0, r5
 8006bce:	f000 f927 	bl	8006e20 <_fflush_r>
 8006bd2:	b988      	cbnz	r0, 8006bf8 <__swbuf_r+0x90>
 8006bd4:	4638      	mov	r0, r7
 8006bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bd8:	4b0a      	ldr	r3, [pc, #40]	; (8006c04 <__swbuf_r+0x9c>)
 8006bda:	429c      	cmp	r4, r3
 8006bdc:	d101      	bne.n	8006be2 <__swbuf_r+0x7a>
 8006bde:	68ac      	ldr	r4, [r5, #8]
 8006be0:	e7cf      	b.n	8006b82 <__swbuf_r+0x1a>
 8006be2:	4b09      	ldr	r3, [pc, #36]	; (8006c08 <__swbuf_r+0xa0>)
 8006be4:	429c      	cmp	r4, r3
 8006be6:	bf08      	it	eq
 8006be8:	68ec      	ldreq	r4, [r5, #12]
 8006bea:	e7ca      	b.n	8006b82 <__swbuf_r+0x1a>
 8006bec:	4621      	mov	r1, r4
 8006bee:	4628      	mov	r0, r5
 8006bf0:	f000 f81a 	bl	8006c28 <__swsetup_r>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	d0cb      	beq.n	8006b90 <__swbuf_r+0x28>
 8006bf8:	f04f 37ff 	mov.w	r7, #4294967295
 8006bfc:	e7ea      	b.n	8006bd4 <__swbuf_r+0x6c>
 8006bfe:	bf00      	nop
 8006c00:	08007a30 	.word	0x08007a30
 8006c04:	08007a50 	.word	0x08007a50
 8006c08:	08007a10 	.word	0x08007a10

08006c0c <__ascii_wctomb>:
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	4608      	mov	r0, r1
 8006c10:	b141      	cbz	r1, 8006c24 <__ascii_wctomb+0x18>
 8006c12:	2aff      	cmp	r2, #255	; 0xff
 8006c14:	d904      	bls.n	8006c20 <__ascii_wctomb+0x14>
 8006c16:	228a      	movs	r2, #138	; 0x8a
 8006c18:	f04f 30ff 	mov.w	r0, #4294967295
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	4770      	bx	lr
 8006c20:	2001      	movs	r0, #1
 8006c22:	700a      	strb	r2, [r1, #0]
 8006c24:	4770      	bx	lr
	...

08006c28 <__swsetup_r>:
 8006c28:	4b32      	ldr	r3, [pc, #200]	; (8006cf4 <__swsetup_r+0xcc>)
 8006c2a:	b570      	push	{r4, r5, r6, lr}
 8006c2c:	681d      	ldr	r5, [r3, #0]
 8006c2e:	4606      	mov	r6, r0
 8006c30:	460c      	mov	r4, r1
 8006c32:	b125      	cbz	r5, 8006c3e <__swsetup_r+0x16>
 8006c34:	69ab      	ldr	r3, [r5, #24]
 8006c36:	b913      	cbnz	r3, 8006c3e <__swsetup_r+0x16>
 8006c38:	4628      	mov	r0, r5
 8006c3a:	f000 f985 	bl	8006f48 <__sinit>
 8006c3e:	4b2e      	ldr	r3, [pc, #184]	; (8006cf8 <__swsetup_r+0xd0>)
 8006c40:	429c      	cmp	r4, r3
 8006c42:	d10f      	bne.n	8006c64 <__swsetup_r+0x3c>
 8006c44:	686c      	ldr	r4, [r5, #4]
 8006c46:	89a3      	ldrh	r3, [r4, #12]
 8006c48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c4c:	0719      	lsls	r1, r3, #28
 8006c4e:	d42c      	bmi.n	8006caa <__swsetup_r+0x82>
 8006c50:	06dd      	lsls	r5, r3, #27
 8006c52:	d411      	bmi.n	8006c78 <__swsetup_r+0x50>
 8006c54:	2309      	movs	r3, #9
 8006c56:	6033      	str	r3, [r6, #0]
 8006c58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c60:	81a3      	strh	r3, [r4, #12]
 8006c62:	e03e      	b.n	8006ce2 <__swsetup_r+0xba>
 8006c64:	4b25      	ldr	r3, [pc, #148]	; (8006cfc <__swsetup_r+0xd4>)
 8006c66:	429c      	cmp	r4, r3
 8006c68:	d101      	bne.n	8006c6e <__swsetup_r+0x46>
 8006c6a:	68ac      	ldr	r4, [r5, #8]
 8006c6c:	e7eb      	b.n	8006c46 <__swsetup_r+0x1e>
 8006c6e:	4b24      	ldr	r3, [pc, #144]	; (8006d00 <__swsetup_r+0xd8>)
 8006c70:	429c      	cmp	r4, r3
 8006c72:	bf08      	it	eq
 8006c74:	68ec      	ldreq	r4, [r5, #12]
 8006c76:	e7e6      	b.n	8006c46 <__swsetup_r+0x1e>
 8006c78:	0758      	lsls	r0, r3, #29
 8006c7a:	d512      	bpl.n	8006ca2 <__swsetup_r+0x7a>
 8006c7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c7e:	b141      	cbz	r1, 8006c92 <__swsetup_r+0x6a>
 8006c80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c84:	4299      	cmp	r1, r3
 8006c86:	d002      	beq.n	8006c8e <__swsetup_r+0x66>
 8006c88:	4630      	mov	r0, r6
 8006c8a:	f7ff fbeb 	bl	8006464 <_free_r>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	6363      	str	r3, [r4, #52]	; 0x34
 8006c92:	89a3      	ldrh	r3, [r4, #12]
 8006c94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c98:	81a3      	strh	r3, [r4, #12]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	6063      	str	r3, [r4, #4]
 8006c9e:	6923      	ldr	r3, [r4, #16]
 8006ca0:	6023      	str	r3, [r4, #0]
 8006ca2:	89a3      	ldrh	r3, [r4, #12]
 8006ca4:	f043 0308 	orr.w	r3, r3, #8
 8006ca8:	81a3      	strh	r3, [r4, #12]
 8006caa:	6923      	ldr	r3, [r4, #16]
 8006cac:	b94b      	cbnz	r3, 8006cc2 <__swsetup_r+0x9a>
 8006cae:	89a3      	ldrh	r3, [r4, #12]
 8006cb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cb8:	d003      	beq.n	8006cc2 <__swsetup_r+0x9a>
 8006cba:	4621      	mov	r1, r4
 8006cbc:	4630      	mov	r0, r6
 8006cbe:	f000 fa07 	bl	80070d0 <__smakebuf_r>
 8006cc2:	89a0      	ldrh	r0, [r4, #12]
 8006cc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cc8:	f010 0301 	ands.w	r3, r0, #1
 8006ccc:	d00a      	beq.n	8006ce4 <__swsetup_r+0xbc>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60a3      	str	r3, [r4, #8]
 8006cd2:	6963      	ldr	r3, [r4, #20]
 8006cd4:	425b      	negs	r3, r3
 8006cd6:	61a3      	str	r3, [r4, #24]
 8006cd8:	6923      	ldr	r3, [r4, #16]
 8006cda:	b943      	cbnz	r3, 8006cee <__swsetup_r+0xc6>
 8006cdc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ce0:	d1ba      	bne.n	8006c58 <__swsetup_r+0x30>
 8006ce2:	bd70      	pop	{r4, r5, r6, pc}
 8006ce4:	0781      	lsls	r1, r0, #30
 8006ce6:	bf58      	it	pl
 8006ce8:	6963      	ldrpl	r3, [r4, #20]
 8006cea:	60a3      	str	r3, [r4, #8]
 8006cec:	e7f4      	b.n	8006cd8 <__swsetup_r+0xb0>
 8006cee:	2000      	movs	r0, #0
 8006cf0:	e7f7      	b.n	8006ce2 <__swsetup_r+0xba>
 8006cf2:	bf00      	nop
 8006cf4:	2000002c 	.word	0x2000002c
 8006cf8:	08007a30 	.word	0x08007a30
 8006cfc:	08007a50 	.word	0x08007a50
 8006d00:	08007a10 	.word	0x08007a10

08006d04 <abort>:
 8006d04:	2006      	movs	r0, #6
 8006d06:	b508      	push	{r3, lr}
 8006d08:	f000 fa96 	bl	8007238 <raise>
 8006d0c:	2001      	movs	r0, #1
 8006d0e:	f7fa fad6 	bl	80012be <_exit>
	...

08006d14 <__sflush_r>:
 8006d14:	898a      	ldrh	r2, [r1, #12]
 8006d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d1a:	4605      	mov	r5, r0
 8006d1c:	0710      	lsls	r0, r2, #28
 8006d1e:	460c      	mov	r4, r1
 8006d20:	d458      	bmi.n	8006dd4 <__sflush_r+0xc0>
 8006d22:	684b      	ldr	r3, [r1, #4]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	dc05      	bgt.n	8006d34 <__sflush_r+0x20>
 8006d28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	dc02      	bgt.n	8006d34 <__sflush_r+0x20>
 8006d2e:	2000      	movs	r0, #0
 8006d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d36:	2e00      	cmp	r6, #0
 8006d38:	d0f9      	beq.n	8006d2e <__sflush_r+0x1a>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d40:	682f      	ldr	r7, [r5, #0]
 8006d42:	602b      	str	r3, [r5, #0]
 8006d44:	d032      	beq.n	8006dac <__sflush_r+0x98>
 8006d46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d48:	89a3      	ldrh	r3, [r4, #12]
 8006d4a:	075a      	lsls	r2, r3, #29
 8006d4c:	d505      	bpl.n	8006d5a <__sflush_r+0x46>
 8006d4e:	6863      	ldr	r3, [r4, #4]
 8006d50:	1ac0      	subs	r0, r0, r3
 8006d52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d54:	b10b      	cbz	r3, 8006d5a <__sflush_r+0x46>
 8006d56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d58:	1ac0      	subs	r0, r0, r3
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d60:	4628      	mov	r0, r5
 8006d62:	6a21      	ldr	r1, [r4, #32]
 8006d64:	47b0      	blx	r6
 8006d66:	1c43      	adds	r3, r0, #1
 8006d68:	89a3      	ldrh	r3, [r4, #12]
 8006d6a:	d106      	bne.n	8006d7a <__sflush_r+0x66>
 8006d6c:	6829      	ldr	r1, [r5, #0]
 8006d6e:	291d      	cmp	r1, #29
 8006d70:	d82c      	bhi.n	8006dcc <__sflush_r+0xb8>
 8006d72:	4a2a      	ldr	r2, [pc, #168]	; (8006e1c <__sflush_r+0x108>)
 8006d74:	40ca      	lsrs	r2, r1
 8006d76:	07d6      	lsls	r6, r2, #31
 8006d78:	d528      	bpl.n	8006dcc <__sflush_r+0xb8>
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	6062      	str	r2, [r4, #4]
 8006d7e:	6922      	ldr	r2, [r4, #16]
 8006d80:	04d9      	lsls	r1, r3, #19
 8006d82:	6022      	str	r2, [r4, #0]
 8006d84:	d504      	bpl.n	8006d90 <__sflush_r+0x7c>
 8006d86:	1c42      	adds	r2, r0, #1
 8006d88:	d101      	bne.n	8006d8e <__sflush_r+0x7a>
 8006d8a:	682b      	ldr	r3, [r5, #0]
 8006d8c:	b903      	cbnz	r3, 8006d90 <__sflush_r+0x7c>
 8006d8e:	6560      	str	r0, [r4, #84]	; 0x54
 8006d90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d92:	602f      	str	r7, [r5, #0]
 8006d94:	2900      	cmp	r1, #0
 8006d96:	d0ca      	beq.n	8006d2e <__sflush_r+0x1a>
 8006d98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d9c:	4299      	cmp	r1, r3
 8006d9e:	d002      	beq.n	8006da6 <__sflush_r+0x92>
 8006da0:	4628      	mov	r0, r5
 8006da2:	f7ff fb5f 	bl	8006464 <_free_r>
 8006da6:	2000      	movs	r0, #0
 8006da8:	6360      	str	r0, [r4, #52]	; 0x34
 8006daa:	e7c1      	b.n	8006d30 <__sflush_r+0x1c>
 8006dac:	6a21      	ldr	r1, [r4, #32]
 8006dae:	2301      	movs	r3, #1
 8006db0:	4628      	mov	r0, r5
 8006db2:	47b0      	blx	r6
 8006db4:	1c41      	adds	r1, r0, #1
 8006db6:	d1c7      	bne.n	8006d48 <__sflush_r+0x34>
 8006db8:	682b      	ldr	r3, [r5, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d0c4      	beq.n	8006d48 <__sflush_r+0x34>
 8006dbe:	2b1d      	cmp	r3, #29
 8006dc0:	d001      	beq.n	8006dc6 <__sflush_r+0xb2>
 8006dc2:	2b16      	cmp	r3, #22
 8006dc4:	d101      	bne.n	8006dca <__sflush_r+0xb6>
 8006dc6:	602f      	str	r7, [r5, #0]
 8006dc8:	e7b1      	b.n	8006d2e <__sflush_r+0x1a>
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dd0:	81a3      	strh	r3, [r4, #12]
 8006dd2:	e7ad      	b.n	8006d30 <__sflush_r+0x1c>
 8006dd4:	690f      	ldr	r7, [r1, #16]
 8006dd6:	2f00      	cmp	r7, #0
 8006dd8:	d0a9      	beq.n	8006d2e <__sflush_r+0x1a>
 8006dda:	0793      	lsls	r3, r2, #30
 8006ddc:	bf18      	it	ne
 8006dde:	2300      	movne	r3, #0
 8006de0:	680e      	ldr	r6, [r1, #0]
 8006de2:	bf08      	it	eq
 8006de4:	694b      	ldreq	r3, [r1, #20]
 8006de6:	eba6 0807 	sub.w	r8, r6, r7
 8006dea:	600f      	str	r7, [r1, #0]
 8006dec:	608b      	str	r3, [r1, #8]
 8006dee:	f1b8 0f00 	cmp.w	r8, #0
 8006df2:	dd9c      	ble.n	8006d2e <__sflush_r+0x1a>
 8006df4:	4643      	mov	r3, r8
 8006df6:	463a      	mov	r2, r7
 8006df8:	4628      	mov	r0, r5
 8006dfa:	6a21      	ldr	r1, [r4, #32]
 8006dfc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006dfe:	47b0      	blx	r6
 8006e00:	2800      	cmp	r0, #0
 8006e02:	dc06      	bgt.n	8006e12 <__sflush_r+0xfe>
 8006e04:	89a3      	ldrh	r3, [r4, #12]
 8006e06:	f04f 30ff 	mov.w	r0, #4294967295
 8006e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e0e:	81a3      	strh	r3, [r4, #12]
 8006e10:	e78e      	b.n	8006d30 <__sflush_r+0x1c>
 8006e12:	4407      	add	r7, r0
 8006e14:	eba8 0800 	sub.w	r8, r8, r0
 8006e18:	e7e9      	b.n	8006dee <__sflush_r+0xda>
 8006e1a:	bf00      	nop
 8006e1c:	20400001 	.word	0x20400001

08006e20 <_fflush_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	690b      	ldr	r3, [r1, #16]
 8006e24:	4605      	mov	r5, r0
 8006e26:	460c      	mov	r4, r1
 8006e28:	b913      	cbnz	r3, 8006e30 <_fflush_r+0x10>
 8006e2a:	2500      	movs	r5, #0
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	bd38      	pop	{r3, r4, r5, pc}
 8006e30:	b118      	cbz	r0, 8006e3a <_fflush_r+0x1a>
 8006e32:	6983      	ldr	r3, [r0, #24]
 8006e34:	b90b      	cbnz	r3, 8006e3a <_fflush_r+0x1a>
 8006e36:	f000 f887 	bl	8006f48 <__sinit>
 8006e3a:	4b14      	ldr	r3, [pc, #80]	; (8006e8c <_fflush_r+0x6c>)
 8006e3c:	429c      	cmp	r4, r3
 8006e3e:	d11b      	bne.n	8006e78 <_fflush_r+0x58>
 8006e40:	686c      	ldr	r4, [r5, #4]
 8006e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d0ef      	beq.n	8006e2a <_fflush_r+0xa>
 8006e4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e4c:	07d0      	lsls	r0, r2, #31
 8006e4e:	d404      	bmi.n	8006e5a <_fflush_r+0x3a>
 8006e50:	0599      	lsls	r1, r3, #22
 8006e52:	d402      	bmi.n	8006e5a <_fflush_r+0x3a>
 8006e54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e56:	f000 f915 	bl	8007084 <__retarget_lock_acquire_recursive>
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	f7ff ff59 	bl	8006d14 <__sflush_r>
 8006e62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e64:	4605      	mov	r5, r0
 8006e66:	07da      	lsls	r2, r3, #31
 8006e68:	d4e0      	bmi.n	8006e2c <_fflush_r+0xc>
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	059b      	lsls	r3, r3, #22
 8006e6e:	d4dd      	bmi.n	8006e2c <_fflush_r+0xc>
 8006e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e72:	f000 f908 	bl	8007086 <__retarget_lock_release_recursive>
 8006e76:	e7d9      	b.n	8006e2c <_fflush_r+0xc>
 8006e78:	4b05      	ldr	r3, [pc, #20]	; (8006e90 <_fflush_r+0x70>)
 8006e7a:	429c      	cmp	r4, r3
 8006e7c:	d101      	bne.n	8006e82 <_fflush_r+0x62>
 8006e7e:	68ac      	ldr	r4, [r5, #8]
 8006e80:	e7df      	b.n	8006e42 <_fflush_r+0x22>
 8006e82:	4b04      	ldr	r3, [pc, #16]	; (8006e94 <_fflush_r+0x74>)
 8006e84:	429c      	cmp	r4, r3
 8006e86:	bf08      	it	eq
 8006e88:	68ec      	ldreq	r4, [r5, #12]
 8006e8a:	e7da      	b.n	8006e42 <_fflush_r+0x22>
 8006e8c:	08007a30 	.word	0x08007a30
 8006e90:	08007a50 	.word	0x08007a50
 8006e94:	08007a10 	.word	0x08007a10

08006e98 <std>:
 8006e98:	2300      	movs	r3, #0
 8006e9a:	b510      	push	{r4, lr}
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	e9c0 3300 	strd	r3, r3, [r0]
 8006ea2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ea6:	6083      	str	r3, [r0, #8]
 8006ea8:	8181      	strh	r1, [r0, #12]
 8006eaa:	6643      	str	r3, [r0, #100]	; 0x64
 8006eac:	81c2      	strh	r2, [r0, #14]
 8006eae:	6183      	str	r3, [r0, #24]
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	2208      	movs	r2, #8
 8006eb4:	305c      	adds	r0, #92	; 0x5c
 8006eb6:	f7fc f8b3 	bl	8003020 <memset>
 8006eba:	4b05      	ldr	r3, [pc, #20]	; (8006ed0 <std+0x38>)
 8006ebc:	6224      	str	r4, [r4, #32]
 8006ebe:	6263      	str	r3, [r4, #36]	; 0x24
 8006ec0:	4b04      	ldr	r3, [pc, #16]	; (8006ed4 <std+0x3c>)
 8006ec2:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ec4:	4b04      	ldr	r3, [pc, #16]	; (8006ed8 <std+0x40>)
 8006ec6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ec8:	4b04      	ldr	r3, [pc, #16]	; (8006edc <std+0x44>)
 8006eca:	6323      	str	r3, [r4, #48]	; 0x30
 8006ecc:	bd10      	pop	{r4, pc}
 8006ece:	bf00      	nop
 8006ed0:	08007271 	.word	0x08007271
 8006ed4:	08007293 	.word	0x08007293
 8006ed8:	080072cb 	.word	0x080072cb
 8006edc:	080072ef 	.word	0x080072ef

08006ee0 <_cleanup_r>:
 8006ee0:	4901      	ldr	r1, [pc, #4]	; (8006ee8 <_cleanup_r+0x8>)
 8006ee2:	f000 b8af 	b.w	8007044 <_fwalk_reent>
 8006ee6:	bf00      	nop
 8006ee8:	08006e21 	.word	0x08006e21

08006eec <__sfmoreglue>:
 8006eec:	b570      	push	{r4, r5, r6, lr}
 8006eee:	2568      	movs	r5, #104	; 0x68
 8006ef0:	1e4a      	subs	r2, r1, #1
 8006ef2:	4355      	muls	r5, r2
 8006ef4:	460e      	mov	r6, r1
 8006ef6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006efa:	f7ff faff 	bl	80064fc <_malloc_r>
 8006efe:	4604      	mov	r4, r0
 8006f00:	b140      	cbz	r0, 8006f14 <__sfmoreglue+0x28>
 8006f02:	2100      	movs	r1, #0
 8006f04:	e9c0 1600 	strd	r1, r6, [r0]
 8006f08:	300c      	adds	r0, #12
 8006f0a:	60a0      	str	r0, [r4, #8]
 8006f0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f10:	f7fc f886 	bl	8003020 <memset>
 8006f14:	4620      	mov	r0, r4
 8006f16:	bd70      	pop	{r4, r5, r6, pc}

08006f18 <__sfp_lock_acquire>:
 8006f18:	4801      	ldr	r0, [pc, #4]	; (8006f20 <__sfp_lock_acquire+0x8>)
 8006f1a:	f000 b8b3 	b.w	8007084 <__retarget_lock_acquire_recursive>
 8006f1e:	bf00      	nop
 8006f20:	200002e0 	.word	0x200002e0

08006f24 <__sfp_lock_release>:
 8006f24:	4801      	ldr	r0, [pc, #4]	; (8006f2c <__sfp_lock_release+0x8>)
 8006f26:	f000 b8ae 	b.w	8007086 <__retarget_lock_release_recursive>
 8006f2a:	bf00      	nop
 8006f2c:	200002e0 	.word	0x200002e0

08006f30 <__sinit_lock_acquire>:
 8006f30:	4801      	ldr	r0, [pc, #4]	; (8006f38 <__sinit_lock_acquire+0x8>)
 8006f32:	f000 b8a7 	b.w	8007084 <__retarget_lock_acquire_recursive>
 8006f36:	bf00      	nop
 8006f38:	200002db 	.word	0x200002db

08006f3c <__sinit_lock_release>:
 8006f3c:	4801      	ldr	r0, [pc, #4]	; (8006f44 <__sinit_lock_release+0x8>)
 8006f3e:	f000 b8a2 	b.w	8007086 <__retarget_lock_release_recursive>
 8006f42:	bf00      	nop
 8006f44:	200002db 	.word	0x200002db

08006f48 <__sinit>:
 8006f48:	b510      	push	{r4, lr}
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	f7ff fff0 	bl	8006f30 <__sinit_lock_acquire>
 8006f50:	69a3      	ldr	r3, [r4, #24]
 8006f52:	b11b      	cbz	r3, 8006f5c <__sinit+0x14>
 8006f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f58:	f7ff bff0 	b.w	8006f3c <__sinit_lock_release>
 8006f5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f60:	6523      	str	r3, [r4, #80]	; 0x50
 8006f62:	4b13      	ldr	r3, [pc, #76]	; (8006fb0 <__sinit+0x68>)
 8006f64:	4a13      	ldr	r2, [pc, #76]	; (8006fb4 <__sinit+0x6c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f6a:	42a3      	cmp	r3, r4
 8006f6c:	bf08      	it	eq
 8006f6e:	2301      	moveq	r3, #1
 8006f70:	4620      	mov	r0, r4
 8006f72:	bf08      	it	eq
 8006f74:	61a3      	streq	r3, [r4, #24]
 8006f76:	f000 f81f 	bl	8006fb8 <__sfp>
 8006f7a:	6060      	str	r0, [r4, #4]
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	f000 f81b 	bl	8006fb8 <__sfp>
 8006f82:	60a0      	str	r0, [r4, #8]
 8006f84:	4620      	mov	r0, r4
 8006f86:	f000 f817 	bl	8006fb8 <__sfp>
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	2104      	movs	r1, #4
 8006f8e:	60e0      	str	r0, [r4, #12]
 8006f90:	6860      	ldr	r0, [r4, #4]
 8006f92:	f7ff ff81 	bl	8006e98 <std>
 8006f96:	2201      	movs	r2, #1
 8006f98:	2109      	movs	r1, #9
 8006f9a:	68a0      	ldr	r0, [r4, #8]
 8006f9c:	f7ff ff7c 	bl	8006e98 <std>
 8006fa0:	2202      	movs	r2, #2
 8006fa2:	2112      	movs	r1, #18
 8006fa4:	68e0      	ldr	r0, [r4, #12]
 8006fa6:	f7ff ff77 	bl	8006e98 <std>
 8006faa:	2301      	movs	r3, #1
 8006fac:	61a3      	str	r3, [r4, #24]
 8006fae:	e7d1      	b.n	8006f54 <__sinit+0xc>
 8006fb0:	08007568 	.word	0x08007568
 8006fb4:	08006ee1 	.word	0x08006ee1

08006fb8 <__sfp>:
 8006fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fba:	4607      	mov	r7, r0
 8006fbc:	f7ff ffac 	bl	8006f18 <__sfp_lock_acquire>
 8006fc0:	4b1e      	ldr	r3, [pc, #120]	; (800703c <__sfp+0x84>)
 8006fc2:	681e      	ldr	r6, [r3, #0]
 8006fc4:	69b3      	ldr	r3, [r6, #24]
 8006fc6:	b913      	cbnz	r3, 8006fce <__sfp+0x16>
 8006fc8:	4630      	mov	r0, r6
 8006fca:	f7ff ffbd 	bl	8006f48 <__sinit>
 8006fce:	3648      	adds	r6, #72	; 0x48
 8006fd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	d503      	bpl.n	8006fe0 <__sfp+0x28>
 8006fd8:	6833      	ldr	r3, [r6, #0]
 8006fda:	b30b      	cbz	r3, 8007020 <__sfp+0x68>
 8006fdc:	6836      	ldr	r6, [r6, #0]
 8006fde:	e7f7      	b.n	8006fd0 <__sfp+0x18>
 8006fe0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006fe4:	b9d5      	cbnz	r5, 800701c <__sfp+0x64>
 8006fe6:	4b16      	ldr	r3, [pc, #88]	; (8007040 <__sfp+0x88>)
 8006fe8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006fec:	60e3      	str	r3, [r4, #12]
 8006fee:	6665      	str	r5, [r4, #100]	; 0x64
 8006ff0:	f000 f847 	bl	8007082 <__retarget_lock_init_recursive>
 8006ff4:	f7ff ff96 	bl	8006f24 <__sfp_lock_release>
 8006ff8:	2208      	movs	r2, #8
 8006ffa:	4629      	mov	r1, r5
 8006ffc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007000:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007004:	6025      	str	r5, [r4, #0]
 8007006:	61a5      	str	r5, [r4, #24]
 8007008:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800700c:	f7fc f808 	bl	8003020 <memset>
 8007010:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007014:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007018:	4620      	mov	r0, r4
 800701a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800701c:	3468      	adds	r4, #104	; 0x68
 800701e:	e7d9      	b.n	8006fd4 <__sfp+0x1c>
 8007020:	2104      	movs	r1, #4
 8007022:	4638      	mov	r0, r7
 8007024:	f7ff ff62 	bl	8006eec <__sfmoreglue>
 8007028:	4604      	mov	r4, r0
 800702a:	6030      	str	r0, [r6, #0]
 800702c:	2800      	cmp	r0, #0
 800702e:	d1d5      	bne.n	8006fdc <__sfp+0x24>
 8007030:	f7ff ff78 	bl	8006f24 <__sfp_lock_release>
 8007034:	230c      	movs	r3, #12
 8007036:	603b      	str	r3, [r7, #0]
 8007038:	e7ee      	b.n	8007018 <__sfp+0x60>
 800703a:	bf00      	nop
 800703c:	08007568 	.word	0x08007568
 8007040:	ffff0001 	.word	0xffff0001

08007044 <_fwalk_reent>:
 8007044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007048:	4606      	mov	r6, r0
 800704a:	4688      	mov	r8, r1
 800704c:	2700      	movs	r7, #0
 800704e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007052:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007056:	f1b9 0901 	subs.w	r9, r9, #1
 800705a:	d505      	bpl.n	8007068 <_fwalk_reent+0x24>
 800705c:	6824      	ldr	r4, [r4, #0]
 800705e:	2c00      	cmp	r4, #0
 8007060:	d1f7      	bne.n	8007052 <_fwalk_reent+0xe>
 8007062:	4638      	mov	r0, r7
 8007064:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007068:	89ab      	ldrh	r3, [r5, #12]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d907      	bls.n	800707e <_fwalk_reent+0x3a>
 800706e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007072:	3301      	adds	r3, #1
 8007074:	d003      	beq.n	800707e <_fwalk_reent+0x3a>
 8007076:	4629      	mov	r1, r5
 8007078:	4630      	mov	r0, r6
 800707a:	47c0      	blx	r8
 800707c:	4307      	orrs	r7, r0
 800707e:	3568      	adds	r5, #104	; 0x68
 8007080:	e7e9      	b.n	8007056 <_fwalk_reent+0x12>

08007082 <__retarget_lock_init_recursive>:
 8007082:	4770      	bx	lr

08007084 <__retarget_lock_acquire_recursive>:
 8007084:	4770      	bx	lr

08007086 <__retarget_lock_release_recursive>:
 8007086:	4770      	bx	lr

08007088 <__swhatbuf_r>:
 8007088:	b570      	push	{r4, r5, r6, lr}
 800708a:	460e      	mov	r6, r1
 800708c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007090:	4614      	mov	r4, r2
 8007092:	2900      	cmp	r1, #0
 8007094:	461d      	mov	r5, r3
 8007096:	b096      	sub	sp, #88	; 0x58
 8007098:	da07      	bge.n	80070aa <__swhatbuf_r+0x22>
 800709a:	2300      	movs	r3, #0
 800709c:	602b      	str	r3, [r5, #0]
 800709e:	89b3      	ldrh	r3, [r6, #12]
 80070a0:	061a      	lsls	r2, r3, #24
 80070a2:	d410      	bmi.n	80070c6 <__swhatbuf_r+0x3e>
 80070a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070a8:	e00e      	b.n	80070c8 <__swhatbuf_r+0x40>
 80070aa:	466a      	mov	r2, sp
 80070ac:	f000 f946 	bl	800733c <_fstat_r>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	dbf2      	blt.n	800709a <__swhatbuf_r+0x12>
 80070b4:	9a01      	ldr	r2, [sp, #4]
 80070b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80070ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070be:	425a      	negs	r2, r3
 80070c0:	415a      	adcs	r2, r3
 80070c2:	602a      	str	r2, [r5, #0]
 80070c4:	e7ee      	b.n	80070a4 <__swhatbuf_r+0x1c>
 80070c6:	2340      	movs	r3, #64	; 0x40
 80070c8:	2000      	movs	r0, #0
 80070ca:	6023      	str	r3, [r4, #0]
 80070cc:	b016      	add	sp, #88	; 0x58
 80070ce:	bd70      	pop	{r4, r5, r6, pc}

080070d0 <__smakebuf_r>:
 80070d0:	898b      	ldrh	r3, [r1, #12]
 80070d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070d4:	079d      	lsls	r5, r3, #30
 80070d6:	4606      	mov	r6, r0
 80070d8:	460c      	mov	r4, r1
 80070da:	d507      	bpl.n	80070ec <__smakebuf_r+0x1c>
 80070dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070e0:	6023      	str	r3, [r4, #0]
 80070e2:	6123      	str	r3, [r4, #16]
 80070e4:	2301      	movs	r3, #1
 80070e6:	6163      	str	r3, [r4, #20]
 80070e8:	b002      	add	sp, #8
 80070ea:	bd70      	pop	{r4, r5, r6, pc}
 80070ec:	466a      	mov	r2, sp
 80070ee:	ab01      	add	r3, sp, #4
 80070f0:	f7ff ffca 	bl	8007088 <__swhatbuf_r>
 80070f4:	9900      	ldr	r1, [sp, #0]
 80070f6:	4605      	mov	r5, r0
 80070f8:	4630      	mov	r0, r6
 80070fa:	f7ff f9ff 	bl	80064fc <_malloc_r>
 80070fe:	b948      	cbnz	r0, 8007114 <__smakebuf_r+0x44>
 8007100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007104:	059a      	lsls	r2, r3, #22
 8007106:	d4ef      	bmi.n	80070e8 <__smakebuf_r+0x18>
 8007108:	f023 0303 	bic.w	r3, r3, #3
 800710c:	f043 0302 	orr.w	r3, r3, #2
 8007110:	81a3      	strh	r3, [r4, #12]
 8007112:	e7e3      	b.n	80070dc <__smakebuf_r+0xc>
 8007114:	4b0d      	ldr	r3, [pc, #52]	; (800714c <__smakebuf_r+0x7c>)
 8007116:	62b3      	str	r3, [r6, #40]	; 0x28
 8007118:	89a3      	ldrh	r3, [r4, #12]
 800711a:	6020      	str	r0, [r4, #0]
 800711c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007120:	81a3      	strh	r3, [r4, #12]
 8007122:	9b00      	ldr	r3, [sp, #0]
 8007124:	6120      	str	r0, [r4, #16]
 8007126:	6163      	str	r3, [r4, #20]
 8007128:	9b01      	ldr	r3, [sp, #4]
 800712a:	b15b      	cbz	r3, 8007144 <__smakebuf_r+0x74>
 800712c:	4630      	mov	r0, r6
 800712e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007132:	f000 f915 	bl	8007360 <_isatty_r>
 8007136:	b128      	cbz	r0, 8007144 <__smakebuf_r+0x74>
 8007138:	89a3      	ldrh	r3, [r4, #12]
 800713a:	f023 0303 	bic.w	r3, r3, #3
 800713e:	f043 0301 	orr.w	r3, r3, #1
 8007142:	81a3      	strh	r3, [r4, #12]
 8007144:	89a0      	ldrh	r0, [r4, #12]
 8007146:	4305      	orrs	r5, r0
 8007148:	81a5      	strh	r5, [r4, #12]
 800714a:	e7cd      	b.n	80070e8 <__smakebuf_r+0x18>
 800714c:	08006ee1 	.word	0x08006ee1

08007150 <memmove>:
 8007150:	4288      	cmp	r0, r1
 8007152:	b510      	push	{r4, lr}
 8007154:	eb01 0402 	add.w	r4, r1, r2
 8007158:	d902      	bls.n	8007160 <memmove+0x10>
 800715a:	4284      	cmp	r4, r0
 800715c:	4623      	mov	r3, r4
 800715e:	d807      	bhi.n	8007170 <memmove+0x20>
 8007160:	1e43      	subs	r3, r0, #1
 8007162:	42a1      	cmp	r1, r4
 8007164:	d008      	beq.n	8007178 <memmove+0x28>
 8007166:	f811 2b01 	ldrb.w	r2, [r1], #1
 800716a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800716e:	e7f8      	b.n	8007162 <memmove+0x12>
 8007170:	4601      	mov	r1, r0
 8007172:	4402      	add	r2, r0
 8007174:	428a      	cmp	r2, r1
 8007176:	d100      	bne.n	800717a <memmove+0x2a>
 8007178:	bd10      	pop	{r4, pc}
 800717a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800717e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007182:	e7f7      	b.n	8007174 <memmove+0x24>

08007184 <__malloc_lock>:
 8007184:	4801      	ldr	r0, [pc, #4]	; (800718c <__malloc_lock+0x8>)
 8007186:	f7ff bf7d 	b.w	8007084 <__retarget_lock_acquire_recursive>
 800718a:	bf00      	nop
 800718c:	200002dc 	.word	0x200002dc

08007190 <__malloc_unlock>:
 8007190:	4801      	ldr	r0, [pc, #4]	; (8007198 <__malloc_unlock+0x8>)
 8007192:	f7ff bf78 	b.w	8007086 <__retarget_lock_release_recursive>
 8007196:	bf00      	nop
 8007198:	200002dc 	.word	0x200002dc

0800719c <_realloc_r>:
 800719c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719e:	4607      	mov	r7, r0
 80071a0:	4614      	mov	r4, r2
 80071a2:	460e      	mov	r6, r1
 80071a4:	b921      	cbnz	r1, 80071b0 <_realloc_r+0x14>
 80071a6:	4611      	mov	r1, r2
 80071a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80071ac:	f7ff b9a6 	b.w	80064fc <_malloc_r>
 80071b0:	b922      	cbnz	r2, 80071bc <_realloc_r+0x20>
 80071b2:	f7ff f957 	bl	8006464 <_free_r>
 80071b6:	4625      	mov	r5, r4
 80071b8:	4628      	mov	r0, r5
 80071ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071bc:	f000 f8f2 	bl	80073a4 <_malloc_usable_size_r>
 80071c0:	42a0      	cmp	r0, r4
 80071c2:	d20f      	bcs.n	80071e4 <_realloc_r+0x48>
 80071c4:	4621      	mov	r1, r4
 80071c6:	4638      	mov	r0, r7
 80071c8:	f7ff f998 	bl	80064fc <_malloc_r>
 80071cc:	4605      	mov	r5, r0
 80071ce:	2800      	cmp	r0, #0
 80071d0:	d0f2      	beq.n	80071b8 <_realloc_r+0x1c>
 80071d2:	4631      	mov	r1, r6
 80071d4:	4622      	mov	r2, r4
 80071d6:	f7fe fc71 	bl	8005abc <memcpy>
 80071da:	4631      	mov	r1, r6
 80071dc:	4638      	mov	r0, r7
 80071de:	f7ff f941 	bl	8006464 <_free_r>
 80071e2:	e7e9      	b.n	80071b8 <_realloc_r+0x1c>
 80071e4:	4635      	mov	r5, r6
 80071e6:	e7e7      	b.n	80071b8 <_realloc_r+0x1c>

080071e8 <_raise_r>:
 80071e8:	291f      	cmp	r1, #31
 80071ea:	b538      	push	{r3, r4, r5, lr}
 80071ec:	4604      	mov	r4, r0
 80071ee:	460d      	mov	r5, r1
 80071f0:	d904      	bls.n	80071fc <_raise_r+0x14>
 80071f2:	2316      	movs	r3, #22
 80071f4:	6003      	str	r3, [r0, #0]
 80071f6:	f04f 30ff 	mov.w	r0, #4294967295
 80071fa:	bd38      	pop	{r3, r4, r5, pc}
 80071fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80071fe:	b112      	cbz	r2, 8007206 <_raise_r+0x1e>
 8007200:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007204:	b94b      	cbnz	r3, 800721a <_raise_r+0x32>
 8007206:	4620      	mov	r0, r4
 8007208:	f000 f830 	bl	800726c <_getpid_r>
 800720c:	462a      	mov	r2, r5
 800720e:	4601      	mov	r1, r0
 8007210:	4620      	mov	r0, r4
 8007212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007216:	f000 b817 	b.w	8007248 <_kill_r>
 800721a:	2b01      	cmp	r3, #1
 800721c:	d00a      	beq.n	8007234 <_raise_r+0x4c>
 800721e:	1c59      	adds	r1, r3, #1
 8007220:	d103      	bne.n	800722a <_raise_r+0x42>
 8007222:	2316      	movs	r3, #22
 8007224:	6003      	str	r3, [r0, #0]
 8007226:	2001      	movs	r0, #1
 8007228:	e7e7      	b.n	80071fa <_raise_r+0x12>
 800722a:	2400      	movs	r4, #0
 800722c:	4628      	mov	r0, r5
 800722e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007232:	4798      	blx	r3
 8007234:	2000      	movs	r0, #0
 8007236:	e7e0      	b.n	80071fa <_raise_r+0x12>

08007238 <raise>:
 8007238:	4b02      	ldr	r3, [pc, #8]	; (8007244 <raise+0xc>)
 800723a:	4601      	mov	r1, r0
 800723c:	6818      	ldr	r0, [r3, #0]
 800723e:	f7ff bfd3 	b.w	80071e8 <_raise_r>
 8007242:	bf00      	nop
 8007244:	2000002c 	.word	0x2000002c

08007248 <_kill_r>:
 8007248:	b538      	push	{r3, r4, r5, lr}
 800724a:	2300      	movs	r3, #0
 800724c:	4d06      	ldr	r5, [pc, #24]	; (8007268 <_kill_r+0x20>)
 800724e:	4604      	mov	r4, r0
 8007250:	4608      	mov	r0, r1
 8007252:	4611      	mov	r1, r2
 8007254:	602b      	str	r3, [r5, #0]
 8007256:	f7fa f822 	bl	800129e <_kill>
 800725a:	1c43      	adds	r3, r0, #1
 800725c:	d102      	bne.n	8007264 <_kill_r+0x1c>
 800725e:	682b      	ldr	r3, [r5, #0]
 8007260:	b103      	cbz	r3, 8007264 <_kill_r+0x1c>
 8007262:	6023      	str	r3, [r4, #0]
 8007264:	bd38      	pop	{r3, r4, r5, pc}
 8007266:	bf00      	nop
 8007268:	200002e4 	.word	0x200002e4

0800726c <_getpid_r>:
 800726c:	f7fa b810 	b.w	8001290 <_getpid>

08007270 <__sread>:
 8007270:	b510      	push	{r4, lr}
 8007272:	460c      	mov	r4, r1
 8007274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007278:	f000 f89c 	bl	80073b4 <_read_r>
 800727c:	2800      	cmp	r0, #0
 800727e:	bfab      	itete	ge
 8007280:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007282:	89a3      	ldrhlt	r3, [r4, #12]
 8007284:	181b      	addge	r3, r3, r0
 8007286:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800728a:	bfac      	ite	ge
 800728c:	6563      	strge	r3, [r4, #84]	; 0x54
 800728e:	81a3      	strhlt	r3, [r4, #12]
 8007290:	bd10      	pop	{r4, pc}

08007292 <__swrite>:
 8007292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007296:	461f      	mov	r7, r3
 8007298:	898b      	ldrh	r3, [r1, #12]
 800729a:	4605      	mov	r5, r0
 800729c:	05db      	lsls	r3, r3, #23
 800729e:	460c      	mov	r4, r1
 80072a0:	4616      	mov	r6, r2
 80072a2:	d505      	bpl.n	80072b0 <__swrite+0x1e>
 80072a4:	2302      	movs	r3, #2
 80072a6:	2200      	movs	r2, #0
 80072a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072ac:	f000 f868 	bl	8007380 <_lseek_r>
 80072b0:	89a3      	ldrh	r3, [r4, #12]
 80072b2:	4632      	mov	r2, r6
 80072b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072b8:	81a3      	strh	r3, [r4, #12]
 80072ba:	4628      	mov	r0, r5
 80072bc:	463b      	mov	r3, r7
 80072be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072c6:	f000 b817 	b.w	80072f8 <_write_r>

080072ca <__sseek>:
 80072ca:	b510      	push	{r4, lr}
 80072cc:	460c      	mov	r4, r1
 80072ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d2:	f000 f855 	bl	8007380 <_lseek_r>
 80072d6:	1c43      	adds	r3, r0, #1
 80072d8:	89a3      	ldrh	r3, [r4, #12]
 80072da:	bf15      	itete	ne
 80072dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80072de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072e6:	81a3      	strheq	r3, [r4, #12]
 80072e8:	bf18      	it	ne
 80072ea:	81a3      	strhne	r3, [r4, #12]
 80072ec:	bd10      	pop	{r4, pc}

080072ee <__sclose>:
 80072ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072f2:	f000 b813 	b.w	800731c <_close_r>
	...

080072f8 <_write_r>:
 80072f8:	b538      	push	{r3, r4, r5, lr}
 80072fa:	4604      	mov	r4, r0
 80072fc:	4608      	mov	r0, r1
 80072fe:	4611      	mov	r1, r2
 8007300:	2200      	movs	r2, #0
 8007302:	4d05      	ldr	r5, [pc, #20]	; (8007318 <_write_r+0x20>)
 8007304:	602a      	str	r2, [r5, #0]
 8007306:	461a      	mov	r2, r3
 8007308:	f7fa f800 	bl	800130c <_write>
 800730c:	1c43      	adds	r3, r0, #1
 800730e:	d102      	bne.n	8007316 <_write_r+0x1e>
 8007310:	682b      	ldr	r3, [r5, #0]
 8007312:	b103      	cbz	r3, 8007316 <_write_r+0x1e>
 8007314:	6023      	str	r3, [r4, #0]
 8007316:	bd38      	pop	{r3, r4, r5, pc}
 8007318:	200002e4 	.word	0x200002e4

0800731c <_close_r>:
 800731c:	b538      	push	{r3, r4, r5, lr}
 800731e:	2300      	movs	r3, #0
 8007320:	4d05      	ldr	r5, [pc, #20]	; (8007338 <_close_r+0x1c>)
 8007322:	4604      	mov	r4, r0
 8007324:	4608      	mov	r0, r1
 8007326:	602b      	str	r3, [r5, #0]
 8007328:	f7fa f80c 	bl	8001344 <_close>
 800732c:	1c43      	adds	r3, r0, #1
 800732e:	d102      	bne.n	8007336 <_close_r+0x1a>
 8007330:	682b      	ldr	r3, [r5, #0]
 8007332:	b103      	cbz	r3, 8007336 <_close_r+0x1a>
 8007334:	6023      	str	r3, [r4, #0]
 8007336:	bd38      	pop	{r3, r4, r5, pc}
 8007338:	200002e4 	.word	0x200002e4

0800733c <_fstat_r>:
 800733c:	b538      	push	{r3, r4, r5, lr}
 800733e:	2300      	movs	r3, #0
 8007340:	4d06      	ldr	r5, [pc, #24]	; (800735c <_fstat_r+0x20>)
 8007342:	4604      	mov	r4, r0
 8007344:	4608      	mov	r0, r1
 8007346:	4611      	mov	r1, r2
 8007348:	602b      	str	r3, [r5, #0]
 800734a:	f7fa f806 	bl	800135a <_fstat>
 800734e:	1c43      	adds	r3, r0, #1
 8007350:	d102      	bne.n	8007358 <_fstat_r+0x1c>
 8007352:	682b      	ldr	r3, [r5, #0]
 8007354:	b103      	cbz	r3, 8007358 <_fstat_r+0x1c>
 8007356:	6023      	str	r3, [r4, #0]
 8007358:	bd38      	pop	{r3, r4, r5, pc}
 800735a:	bf00      	nop
 800735c:	200002e4 	.word	0x200002e4

08007360 <_isatty_r>:
 8007360:	b538      	push	{r3, r4, r5, lr}
 8007362:	2300      	movs	r3, #0
 8007364:	4d05      	ldr	r5, [pc, #20]	; (800737c <_isatty_r+0x1c>)
 8007366:	4604      	mov	r4, r0
 8007368:	4608      	mov	r0, r1
 800736a:	602b      	str	r3, [r5, #0]
 800736c:	f7fa f804 	bl	8001378 <_isatty>
 8007370:	1c43      	adds	r3, r0, #1
 8007372:	d102      	bne.n	800737a <_isatty_r+0x1a>
 8007374:	682b      	ldr	r3, [r5, #0]
 8007376:	b103      	cbz	r3, 800737a <_isatty_r+0x1a>
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	bd38      	pop	{r3, r4, r5, pc}
 800737c:	200002e4 	.word	0x200002e4

08007380 <_lseek_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	4604      	mov	r4, r0
 8007384:	4608      	mov	r0, r1
 8007386:	4611      	mov	r1, r2
 8007388:	2200      	movs	r2, #0
 800738a:	4d05      	ldr	r5, [pc, #20]	; (80073a0 <_lseek_r+0x20>)
 800738c:	602a      	str	r2, [r5, #0]
 800738e:	461a      	mov	r2, r3
 8007390:	f7f9 fffc 	bl	800138c <_lseek>
 8007394:	1c43      	adds	r3, r0, #1
 8007396:	d102      	bne.n	800739e <_lseek_r+0x1e>
 8007398:	682b      	ldr	r3, [r5, #0]
 800739a:	b103      	cbz	r3, 800739e <_lseek_r+0x1e>
 800739c:	6023      	str	r3, [r4, #0]
 800739e:	bd38      	pop	{r3, r4, r5, pc}
 80073a0:	200002e4 	.word	0x200002e4

080073a4 <_malloc_usable_size_r>:
 80073a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073a8:	1f18      	subs	r0, r3, #4
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	bfbc      	itt	lt
 80073ae:	580b      	ldrlt	r3, [r1, r0]
 80073b0:	18c0      	addlt	r0, r0, r3
 80073b2:	4770      	bx	lr

080073b4 <_read_r>:
 80073b4:	b538      	push	{r3, r4, r5, lr}
 80073b6:	4604      	mov	r4, r0
 80073b8:	4608      	mov	r0, r1
 80073ba:	4611      	mov	r1, r2
 80073bc:	2200      	movs	r2, #0
 80073be:	4d05      	ldr	r5, [pc, #20]	; (80073d4 <_read_r+0x20>)
 80073c0:	602a      	str	r2, [r5, #0]
 80073c2:	461a      	mov	r2, r3
 80073c4:	f7f9 ff85 	bl	80012d2 <_read>
 80073c8:	1c43      	adds	r3, r0, #1
 80073ca:	d102      	bne.n	80073d2 <_read_r+0x1e>
 80073cc:	682b      	ldr	r3, [r5, #0]
 80073ce:	b103      	cbz	r3, 80073d2 <_read_r+0x1e>
 80073d0:	6023      	str	r3, [r4, #0]
 80073d2:	bd38      	pop	{r3, r4, r5, pc}
 80073d4:	200002e4 	.word	0x200002e4

080073d8 <_init>:
 80073d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073da:	bf00      	nop
 80073dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073de:	bc08      	pop	{r3}
 80073e0:	469e      	mov	lr, r3
 80073e2:	4770      	bx	lr

080073e4 <_fini>:
 80073e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e6:	bf00      	nop
 80073e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ea:	bc08      	pop	{r3}
 80073ec:	469e      	mov	lr, r3
 80073ee:	4770      	bx	lr
